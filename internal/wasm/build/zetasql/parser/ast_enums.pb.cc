// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/parser/ast_enums.proto

#include "zetasql/parser/ast_enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace zetasql {
class ASTBinaryExpressionEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTBinaryExpressionEnums>
      _instance;
} _ASTBinaryExpressionEnums_default_instance_;
class ASTOrderingExpressionEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTOrderingExpressionEnums>
      _instance;
} _ASTOrderingExpressionEnums_default_instance_;
class ASTJoinEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTJoinEnums>
      _instance;
} _ASTJoinEnums_default_instance_;
class ASTSelectAsEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTSelectAsEnums>
      _instance;
} _ASTSelectAsEnums_default_instance_;
class ASTFunctionCallEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTFunctionCallEnums>
      _instance;
} _ASTFunctionCallEnums_default_instance_;
class ASTExpressionSubqueryEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTExpressionSubqueryEnums>
      _instance;
} _ASTExpressionSubqueryEnums_default_instance_;
class ASTHavingModifierEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTHavingModifierEnums>
      _instance;
} _ASTHavingModifierEnums_default_instance_;
class ASTSetOperationEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTSetOperationEnums>
      _instance;
} _ASTSetOperationEnums_default_instance_;
class ASTUnaryExpressionEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTUnaryExpressionEnums>
      _instance;
} _ASTUnaryExpressionEnums_default_instance_;
class ASTWindowFrameEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTWindowFrameEnums>
      _instance;
} _ASTWindowFrameEnums_default_instance_;
class ASTWindowFrameExprEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTWindowFrameExprEnums>
      _instance;
} _ASTWindowFrameExprEnums_default_instance_;
class ASTAnySomeAllOpEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTAnySomeAllOpEnums>
      _instance;
} _ASTAnySomeAllOpEnums_default_instance_;
class ASTTransactionReadWriteModeEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTTransactionReadWriteModeEnums>
      _instance;
} _ASTTransactionReadWriteModeEnums_default_instance_;
class ASTImportStatementEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTImportStatementEnums>
      _instance;
} _ASTImportStatementEnums_default_instance_;
class ASTUnpivotClauseEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTUnpivotClauseEnums>
      _instance;
} _ASTUnpivotClauseEnums_default_instance_;
class ASTCreateStatementEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTCreateStatementEnums>
      _instance;
} _ASTCreateStatementEnums_default_instance_;
class ASTFunctionParameterEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTFunctionParameterEnums>
      _instance;
} _ASTFunctionParameterEnums_default_instance_;
class ASTTemplatedParameterTypeEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTTemplatedParameterTypeEnums>
      _instance;
} _ASTTemplatedParameterTypeEnums_default_instance_;
class ASTGeneratedColumnInfoEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTGeneratedColumnInfoEnums>
      _instance;
} _ASTGeneratedColumnInfoEnums_default_instance_;
class ASTColumnPositionEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTColumnPositionEnums>
      _instance;
} _ASTColumnPositionEnums_default_instance_;
class ASTInsertStatementEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTInsertStatementEnums>
      _instance;
} _ASTInsertStatementEnums_default_instance_;
class ASTMergeActionEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTMergeActionEnums>
      _instance;
} _ASTMergeActionEnums_default_instance_;
class ASTMergeWhenClauseEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTMergeWhenClauseEnums>
      _instance;
} _ASTMergeWhenClauseEnums_default_instance_;
class ASTFilterFieldsArgEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTFilterFieldsArgEnums>
      _instance;
} _ASTFilterFieldsArgEnums_default_instance_;
class ASTSampleSizeEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTSampleSizeEnums>
      _instance;
} _ASTSampleSizeEnums_default_instance_;
class ASTForeignKeyActionsEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTForeignKeyActionsEnums>
      _instance;
} _ASTForeignKeyActionsEnums_default_instance_;
class ASTForeignKeyReferenceEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTForeignKeyReferenceEnums>
      _instance;
} _ASTForeignKeyReferenceEnums_default_instance_;
class ASTBreakContinueStatementEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTBreakContinueStatementEnums>
      _instance;
} _ASTBreakContinueStatementEnums_default_instance_;
class ASTDropStatementEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTDropStatementEnums>
      _instance;
} _ASTDropStatementEnums_default_instance_;
class ASTCreateFunctionStmtBaseEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTCreateFunctionStmtBaseEnums>
      _instance;
} _ASTCreateFunctionStmtBaseEnums_default_instance_;
class ASTAuxLoadDataStatementEnumsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ASTAuxLoadDataStatementEnums>
      _instance;
} _ASTAuxLoadDataStatementEnums_default_instance_;
}  // namespace zetasql
namespace protobuf_zetasql_2fparser_2fast_5fenums_2eproto {
static void InitDefaultsASTBinaryExpressionEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTBinaryExpressionEnums_default_instance_;
    new (ptr) ::zetasql::ASTBinaryExpressionEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTBinaryExpressionEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTBinaryExpressionEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTBinaryExpressionEnums}, {}};

static void InitDefaultsASTOrderingExpressionEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTOrderingExpressionEnums_default_instance_;
    new (ptr) ::zetasql::ASTOrderingExpressionEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTOrderingExpressionEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTOrderingExpressionEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTOrderingExpressionEnums}, {}};

static void InitDefaultsASTJoinEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTJoinEnums_default_instance_;
    new (ptr) ::zetasql::ASTJoinEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTJoinEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTJoinEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTJoinEnums}, {}};

static void InitDefaultsASTSelectAsEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTSelectAsEnums_default_instance_;
    new (ptr) ::zetasql::ASTSelectAsEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTSelectAsEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTSelectAsEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTSelectAsEnums}, {}};

static void InitDefaultsASTFunctionCallEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTFunctionCallEnums_default_instance_;
    new (ptr) ::zetasql::ASTFunctionCallEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTFunctionCallEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTFunctionCallEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTFunctionCallEnums}, {}};

static void InitDefaultsASTExpressionSubqueryEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTExpressionSubqueryEnums_default_instance_;
    new (ptr) ::zetasql::ASTExpressionSubqueryEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTExpressionSubqueryEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTExpressionSubqueryEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTExpressionSubqueryEnums}, {}};

static void InitDefaultsASTHavingModifierEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTHavingModifierEnums_default_instance_;
    new (ptr) ::zetasql::ASTHavingModifierEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTHavingModifierEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTHavingModifierEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTHavingModifierEnums}, {}};

static void InitDefaultsASTSetOperationEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTSetOperationEnums_default_instance_;
    new (ptr) ::zetasql::ASTSetOperationEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTSetOperationEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTSetOperationEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTSetOperationEnums}, {}};

static void InitDefaultsASTUnaryExpressionEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTUnaryExpressionEnums_default_instance_;
    new (ptr) ::zetasql::ASTUnaryExpressionEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTUnaryExpressionEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTUnaryExpressionEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTUnaryExpressionEnums}, {}};

static void InitDefaultsASTWindowFrameEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTWindowFrameEnums_default_instance_;
    new (ptr) ::zetasql::ASTWindowFrameEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTWindowFrameEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTWindowFrameEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTWindowFrameEnums}, {}};

static void InitDefaultsASTWindowFrameExprEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTWindowFrameExprEnums_default_instance_;
    new (ptr) ::zetasql::ASTWindowFrameExprEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTWindowFrameExprEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTWindowFrameExprEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTWindowFrameExprEnums}, {}};

static void InitDefaultsASTAnySomeAllOpEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTAnySomeAllOpEnums_default_instance_;
    new (ptr) ::zetasql::ASTAnySomeAllOpEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTAnySomeAllOpEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTAnySomeAllOpEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTAnySomeAllOpEnums}, {}};

static void InitDefaultsASTTransactionReadWriteModeEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTTransactionReadWriteModeEnums_default_instance_;
    new (ptr) ::zetasql::ASTTransactionReadWriteModeEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTTransactionReadWriteModeEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTTransactionReadWriteModeEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTTransactionReadWriteModeEnums}, {}};

static void InitDefaultsASTImportStatementEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTImportStatementEnums_default_instance_;
    new (ptr) ::zetasql::ASTImportStatementEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTImportStatementEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTImportStatementEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTImportStatementEnums}, {}};

static void InitDefaultsASTUnpivotClauseEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTUnpivotClauseEnums_default_instance_;
    new (ptr) ::zetasql::ASTUnpivotClauseEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTUnpivotClauseEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTUnpivotClauseEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTUnpivotClauseEnums}, {}};

static void InitDefaultsASTCreateStatementEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTCreateStatementEnums_default_instance_;
    new (ptr) ::zetasql::ASTCreateStatementEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTCreateStatementEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTCreateStatementEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTCreateStatementEnums}, {}};

static void InitDefaultsASTFunctionParameterEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTFunctionParameterEnums_default_instance_;
    new (ptr) ::zetasql::ASTFunctionParameterEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTFunctionParameterEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTFunctionParameterEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTFunctionParameterEnums}, {}};

static void InitDefaultsASTTemplatedParameterTypeEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTTemplatedParameterTypeEnums_default_instance_;
    new (ptr) ::zetasql::ASTTemplatedParameterTypeEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTTemplatedParameterTypeEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTTemplatedParameterTypeEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTTemplatedParameterTypeEnums}, {}};

static void InitDefaultsASTGeneratedColumnInfoEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTGeneratedColumnInfoEnums_default_instance_;
    new (ptr) ::zetasql::ASTGeneratedColumnInfoEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTGeneratedColumnInfoEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTGeneratedColumnInfoEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTGeneratedColumnInfoEnums}, {}};

static void InitDefaultsASTColumnPositionEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTColumnPositionEnums_default_instance_;
    new (ptr) ::zetasql::ASTColumnPositionEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTColumnPositionEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTColumnPositionEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTColumnPositionEnums}, {}};

static void InitDefaultsASTInsertStatementEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTInsertStatementEnums_default_instance_;
    new (ptr) ::zetasql::ASTInsertStatementEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTInsertStatementEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTInsertStatementEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTInsertStatementEnums}, {}};

static void InitDefaultsASTMergeActionEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTMergeActionEnums_default_instance_;
    new (ptr) ::zetasql::ASTMergeActionEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTMergeActionEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTMergeActionEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTMergeActionEnums}, {}};

static void InitDefaultsASTMergeWhenClauseEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTMergeWhenClauseEnums_default_instance_;
    new (ptr) ::zetasql::ASTMergeWhenClauseEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTMergeWhenClauseEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTMergeWhenClauseEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTMergeWhenClauseEnums}, {}};

static void InitDefaultsASTFilterFieldsArgEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTFilterFieldsArgEnums_default_instance_;
    new (ptr) ::zetasql::ASTFilterFieldsArgEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTFilterFieldsArgEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTFilterFieldsArgEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTFilterFieldsArgEnums}, {}};

static void InitDefaultsASTSampleSizeEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTSampleSizeEnums_default_instance_;
    new (ptr) ::zetasql::ASTSampleSizeEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTSampleSizeEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTSampleSizeEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTSampleSizeEnums}, {}};

static void InitDefaultsASTForeignKeyActionsEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTForeignKeyActionsEnums_default_instance_;
    new (ptr) ::zetasql::ASTForeignKeyActionsEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTForeignKeyActionsEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTForeignKeyActionsEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTForeignKeyActionsEnums}, {}};

static void InitDefaultsASTForeignKeyReferenceEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTForeignKeyReferenceEnums_default_instance_;
    new (ptr) ::zetasql::ASTForeignKeyReferenceEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTForeignKeyReferenceEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTForeignKeyReferenceEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTForeignKeyReferenceEnums}, {}};

static void InitDefaultsASTBreakContinueStatementEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTBreakContinueStatementEnums_default_instance_;
    new (ptr) ::zetasql::ASTBreakContinueStatementEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTBreakContinueStatementEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTBreakContinueStatementEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTBreakContinueStatementEnums}, {}};

static void InitDefaultsASTDropStatementEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTDropStatementEnums_default_instance_;
    new (ptr) ::zetasql::ASTDropStatementEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTDropStatementEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTDropStatementEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTDropStatementEnums}, {}};

static void InitDefaultsASTCreateFunctionStmtBaseEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTCreateFunctionStmtBaseEnums_default_instance_;
    new (ptr) ::zetasql::ASTCreateFunctionStmtBaseEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTCreateFunctionStmtBaseEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTCreateFunctionStmtBaseEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTCreateFunctionStmtBaseEnums}, {}};

static void InitDefaultsASTAuxLoadDataStatementEnums() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ASTAuxLoadDataStatementEnums_default_instance_;
    new (ptr) ::zetasql::ASTAuxLoadDataStatementEnums();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ASTAuxLoadDataStatementEnums::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ASTAuxLoadDataStatementEnums =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsASTAuxLoadDataStatementEnums}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ASTBinaryExpressionEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTOrderingExpressionEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTJoinEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTSelectAsEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTFunctionCallEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTExpressionSubqueryEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTHavingModifierEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTSetOperationEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTUnaryExpressionEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTWindowFrameEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTWindowFrameExprEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTAnySomeAllOpEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTTransactionReadWriteModeEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTImportStatementEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTUnpivotClauseEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTCreateStatementEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTFunctionParameterEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTTemplatedParameterTypeEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTGeneratedColumnInfoEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTColumnPositionEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTInsertStatementEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTMergeActionEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTMergeWhenClauseEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTFilterFieldsArgEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTSampleSizeEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTForeignKeyActionsEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTForeignKeyReferenceEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTBreakContinueStatementEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTDropStatementEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTCreateFunctionStmtBaseEnums.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ASTAuxLoadDataStatementEnums.base);
}

::google::protobuf::Metadata file_level_metadata[31];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[35];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTBinaryExpressionEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTBinaryExpressionEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTOrderingExpressionEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTOrderingExpressionEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTJoinEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTJoinEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTSelectAsEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTSelectAsEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTFunctionCallEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTFunctionCallEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTExpressionSubqueryEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTExpressionSubqueryEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTHavingModifierEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTHavingModifierEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTSetOperationEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTSetOperationEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTUnaryExpressionEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTUnaryExpressionEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTWindowFrameEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTWindowFrameEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTWindowFrameExprEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTWindowFrameExprEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTAnySomeAllOpEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTAnySomeAllOpEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTTransactionReadWriteModeEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTTransactionReadWriteModeEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTImportStatementEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTImportStatementEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTUnpivotClauseEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTUnpivotClauseEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTCreateStatementEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTCreateStatementEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTFunctionParameterEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTFunctionParameterEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTTemplatedParameterTypeEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTTemplatedParameterTypeEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTGeneratedColumnInfoEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTGeneratedColumnInfoEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTColumnPositionEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTColumnPositionEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTInsertStatementEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTInsertStatementEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTMergeActionEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTMergeActionEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTMergeWhenClauseEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTMergeWhenClauseEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTFilterFieldsArgEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTFilterFieldsArgEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTSampleSizeEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTSampleSizeEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTForeignKeyActionsEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTForeignKeyActionsEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTForeignKeyReferenceEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTForeignKeyReferenceEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTBreakContinueStatementEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTBreakContinueStatementEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTDropStatementEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTDropStatementEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTCreateFunctionStmtBaseEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTCreateFunctionStmtBaseEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTAuxLoadDataStatementEnums, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ASTAuxLoadDataStatementEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(::zetasql::ASTBinaryExpressionEnums)},
  { 5, 10, sizeof(::zetasql::ASTOrderingExpressionEnums)},
  { 10, 15, sizeof(::zetasql::ASTJoinEnums)},
  { 15, 20, sizeof(::zetasql::ASTSelectAsEnums)},
  { 20, 25, sizeof(::zetasql::ASTFunctionCallEnums)},
  { 25, 30, sizeof(::zetasql::ASTExpressionSubqueryEnums)},
  { 30, 35, sizeof(::zetasql::ASTHavingModifierEnums)},
  { 35, 40, sizeof(::zetasql::ASTSetOperationEnums)},
  { 40, 45, sizeof(::zetasql::ASTUnaryExpressionEnums)},
  { 45, 50, sizeof(::zetasql::ASTWindowFrameEnums)},
  { 50, 55, sizeof(::zetasql::ASTWindowFrameExprEnums)},
  { 55, 60, sizeof(::zetasql::ASTAnySomeAllOpEnums)},
  { 60, 65, sizeof(::zetasql::ASTTransactionReadWriteModeEnums)},
  { 65, 70, sizeof(::zetasql::ASTImportStatementEnums)},
  { 70, 75, sizeof(::zetasql::ASTUnpivotClauseEnums)},
  { 75, 80, sizeof(::zetasql::ASTCreateStatementEnums)},
  { 80, 85, sizeof(::zetasql::ASTFunctionParameterEnums)},
  { 85, 90, sizeof(::zetasql::ASTTemplatedParameterTypeEnums)},
  { 90, 95, sizeof(::zetasql::ASTGeneratedColumnInfoEnums)},
  { 95, 100, sizeof(::zetasql::ASTColumnPositionEnums)},
  { 100, 105, sizeof(::zetasql::ASTInsertStatementEnums)},
  { 105, 110, sizeof(::zetasql::ASTMergeActionEnums)},
  { 110, 115, sizeof(::zetasql::ASTMergeWhenClauseEnums)},
  { 115, 120, sizeof(::zetasql::ASTFilterFieldsArgEnums)},
  { 120, 125, sizeof(::zetasql::ASTSampleSizeEnums)},
  { 125, 130, sizeof(::zetasql::ASTForeignKeyActionsEnums)},
  { 130, 135, sizeof(::zetasql::ASTForeignKeyReferenceEnums)},
  { 135, 140, sizeof(::zetasql::ASTBreakContinueStatementEnums)},
  { 140, 145, sizeof(::zetasql::ASTDropStatementEnums)},
  { 145, 150, sizeof(::zetasql::ASTCreateFunctionStmtBaseEnums)},
  { 150, 155, sizeof(::zetasql::ASTAuxLoadDataStatementEnums)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTBinaryExpressionEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTOrderingExpressionEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTJoinEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTSelectAsEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTFunctionCallEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTExpressionSubqueryEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTHavingModifierEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTSetOperationEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTUnaryExpressionEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTWindowFrameEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTWindowFrameExprEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTAnySomeAllOpEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTTransactionReadWriteModeEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTImportStatementEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTUnpivotClauseEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTCreateStatementEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTFunctionParameterEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTTemplatedParameterTypeEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTGeneratedColumnInfoEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTColumnPositionEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTInsertStatementEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTMergeActionEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTMergeWhenClauseEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTFilterFieldsArgEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTSampleSizeEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTForeignKeyActionsEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTForeignKeyReferenceEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTBreakContinueStatementEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTDropStatementEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTCreateFunctionStmtBaseEnums_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ASTAuxLoadDataStatementEnums_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "zetasql/parser/ast_enums.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 31);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\036zetasql/parser/ast_enums.proto\022\007zetasq"
      "l\"\367\001\n\030ASTBinaryExpressionEnums\"\332\001\n\002Op\022\013\n"
      "\007NOT_SET\020\000\022\010\n\004LIKE\020\001\022\006\n\002IS\020\002\022\006\n\002EQ\020\003\022\006\n\002"
      "NE\020\004\022\007\n\003NE2\020\005\022\006\n\002GT\020\006\022\006\n\002LT\020\007\022\006\n\002GE\020\010\022\006\n"
      "\002LE\020\t\022\016\n\nBITWISE_OR\020\n\022\017\n\013BITWISE_XOR\020\013\022\017"
      "\n\013BITWISE_AND\020\014\022\010\n\004PLUS\020\r\022\t\n\005MINUS\020\016\022\014\n\010"
      "MULTIPLY\020\017\022\n\n\006DIVIDE\020\020\022\r\n\tCONCAT_OP\020\021\022\014\n"
      "\010DISTINCT\020\022\"]\n\032ASTOrderingExpressionEnum"
      "s\"\?\n\014OrderingSpec\022\013\n\007NOT_SET\020\000\022\007\n\003ASC\020\001\022"
      "\010\n\004DESC\020\002\022\017\n\013UNSPECIFIED\020\003\"\245\001\n\014ASTJoinEn"
      "ums\"a\n\010JoinType\022\025\n\021DEFAULT_JOIN_TYPE\020\000\022\t"
      "\n\005COMMA\020\001\022\t\n\005CROSS\020\002\022\010\n\004FULL\020\003\022\t\n\005INNER\020"
      "\004\022\010\n\004LEFT\020\005\022\t\n\005RIGHT\020\006\"2\n\010JoinHint\022\020\n\014NO"
      "_JOIN_HINT\020\000\022\010\n\004HASH\020\001\022\n\n\006LOOKUP\020\002\"O\n\020AS"
      "TSelectAsEnums\";\n\006AsMode\022\013\n\007NOT_SET\020\000\022\n\n"
      "\006STRUCT\020\001\022\t\n\005VALUE\020\002\022\r\n\tTYPE_NAME\020\003\"n\n\024A"
      "STFunctionCallEnums\"V\n\024NullHandlingModif"
      "ier\022\031\n\025DEFAULT_NULL_HANDLING\020\000\022\020\n\014IGNORE"
      "_NULLS\020\001\022\021\n\rRESPECT_NULLS\020\002\"I\n\032ASTExpres"
      "sionSubqueryEnums\"+\n\010Modifier\022\010\n\004NONE\020\000\022"
      "\t\n\005ARRAY\020\001\022\n\n\006EXISTS\020\002\"G\n\026ASTHavingModif"
      "ierEnums\"-\n\014ModifierKind\022\013\n\007NOT_SET\020\000\022\007\n"
      "\003MIN\020\001\022\007\n\003MAX\020\002\"Z\n\024ASTSetOperationEnums\""
      "B\n\rOperationType\022\013\n\007NOT_SET\020\000\022\t\n\005UNION\020\001"
      "\022\n\n\006EXCEPT\020\002\022\r\n\tINTERSECT\020\004\"\177\n\027ASTUnaryE"
      "xpressionEnums\"d\n\002Op\022\013\n\007NOT_SET\020\000\022\007\n\003NOT"
      "\020\001\022\017\n\013BITWISE_NOT\020\002\022\t\n\005MINUS\020\003\022\010\n\004PLUS\020\004"
      "\022\016\n\nIS_UNKNOWN\020\005\022\022\n\016IS_NOT_UNKNOWN\020\006\"7\n\023"
      "ASTWindowFrameEnums\" \n\tFrameUnit\022\010\n\004ROWS"
      "\020\001\022\t\n\005RANGE\020\002\"\230\001\n\027ASTWindowFrameExprEnum"
      "s\"}\n\014BoundaryType\022\027\n\023UNBOUNDED_PRECEDING"
      "\020\001\022\024\n\020OFFSET_PRECEDING\020\002\022\017\n\013CURRENT_ROW\020"
      "\003\022\024\n\020OFFSET_FOLLOWING\020\004\022\027\n\023UNBOUNDED_FOL"
      "LOWING\020\005\"O\n\024ASTAnySomeAllOpEnums\"7\n\002Op\022\022"
      "\n\016kUninitialized\020\001\022\010\n\004kAny\020\002\022\t\n\005kSome\020\003\022"
      "\010\n\004kAll\020\004\"V\n ASTTransactionReadWriteMode"
      "Enums\"2\n\004Mode\022\013\n\007INVALID\020\000\022\r\n\tREAD_ONLY\020"
      "\001\022\016\n\nREAD_WRITE\020\002\">\n\027ASTImportStatementE"
      "nums\"#\n\nImportKind\022\n\n\006MODULE\020\001\022\t\n\005PROTO\020"
      "\002\"S\n\025ASTUnpivotClauseEnums\":\n\nNullFilter"
      "\022\020\n\014kUnspecified\020\001\022\014\n\010kInclude\020\002\022\014\n\010kExc"
      "lude\020\003\"\276\001\n\027ASTCreateStatementEnums\"B\n\005Sc"
      "ope\022\021\n\rDEFAULT_SCOPE\020\000\022\013\n\007PRIVATE\020\001\022\n\n\006P"
      "UBLIC\020\002\022\r\n\tTEMPORARY\020\003\"_\n\013SqlSecurity\022\034\n"
      "\030SQL_SECURITY_UNSPECIFIED\020\000\022\030\n\024SQL_SECUR"
      "ITY_DEFINER\020\001\022\030\n\024SQL_SECURITY_INVOKER\020\002\""
      "^\n\031ASTFunctionParameterEnums\"A\n\026Procedur"
      "eParameterMode\022\013\n\007NOT_SET\020\000\022\006\n\002IN\020\001\022\007\n\003O"
      "UT\020\002\022\t\n\005INOUT\020\003\"\241\001\n\036ASTTemplatedParamete"
      "rTypeEnums\"\177\n\021TemplatedTypeKind\022\021\n\rUNINI"
      "TIALIZED\020\001\022\014\n\010ANY_TYPE\020\002\022\r\n\tANY_PROTO\020\003\022"
      "\014\n\010ANY_ENUM\020\004\022\016\n\nANY_STRUCT\020\005\022\r\n\tANY_ARR"
      "AY\020\006\022\r\n\tANY_TABLE\020\007\"\\\n\033ASTGeneratedColum"
      "nInfoEnums\"=\n\nStoredMode\022\016\n\nNON_STORED\020\000"
      "\022\n\n\006STORED\020\001\022\023\n\017STORED_VOLATILE\020\002\"N\n\026AST"
      "ColumnPositionEnums\"4\n\024RelativePositionT"
      "ype\022\r\n\tPRECEDING\020\001\022\r\n\tFOLLOWING\020\002\"\334\001\n\027AS"
      "TInsertStatementEnums\"C\n\nInsertMode\022\020\n\014D"
      "EFAULT_MODE\020\000\022\013\n\007REPLACE\020\001\022\n\n\006UPDATE\020\002\022\n"
      "\n\006IGNORE\020\003\"|\n\rParseProgress\022\014\n\010kInitial\020"
      "\001\022\036\n\032kSeenOrIgnoreReplaceUpdate\020\002\022\023\n\017kSe"
      "enTargetPath\020\003\022\023\n\017kSeenColumnList\020\004\022\023\n\017k"
      "SeenValuesList\020\005\"T\n\023ASTMergeActionEnums\""
      "=\n\nActionType\022\013\n\007NOT_SET\020\000\022\n\n\006INSERT\020\001\022\n"
      "\n\006UPDATE\020\002\022\n\n\006DELETE\020\003\"v\n\027ASTMergeWhenCl"
      "auseEnums\"[\n\tMatchType\022\013\n\007NOT_SET\020\000\022\013\n\007M"
      "ATCHED\020\001\022\031\n\025NOT_MATCHED_BY_SOURCE\020\002\022\031\n\025N"
      "OT_MATCHED_BY_TARGET\020\003\"N\n\027ASTFilterField"
      "sArgEnums\"3\n\nFilterType\022\013\n\007NOT_SET\020\000\022\013\n\007"
      "INCLUDE\020\001\022\013\n\007EXCLUDE\020\002\"@\n\022ASTSampleSizeE"
      "nums\"*\n\004Unit\022\013\n\007NOT_SET\020\000\022\010\n\004ROWS\020\001\022\013\n\007P"
      "ERCENT\020\002\"]\n\031ASTForeignKeyActionsEnums\"@\n"
      "\006Action\022\r\n\tNO_ACTION\020\000\022\014\n\010RESTRICT\020\001\022\013\n\007"
      "CASCADE\020\002\022\014\n\010SET_NULL\020\003\"N\n\033ASTForeignKey"
      "ReferenceEnums\"/\n\005Match\022\n\n\006SIMPLE\020\001\022\010\n\004F"
      "ULL\020\002\022\020\n\014NOT_DISTINCT\020\003\"i\n\036ASTBreakConti"
      "nueStatementEnums\"G\n\024BreakContinueKeywor"
      "d\022\t\n\005BREAK\020\001\022\t\n\005LEAVE\020\002\022\014\n\010CONTINUE\020\003\022\013\n"
      "\007ITERATE\020\004\"Y\n\025ASTDropStatementEnums\"@\n\010D"
      "ropMode\022\031\n\025DROP_MODE_UNSPECIFIED\020\000\022\014\n\010RE"
      "STRICT\020\001\022\013\n\007CASCADE\020\002\"\245\001\n\036ASTCreateFunct"
      "ionStmtBaseEnums\"\202\001\n\020DeterminismLevel\022\033\n"
      "\027DETERMINISM_UNSPECIFIED\020\000\022\021\n\rDETERMINIS"
      "TIC\020\001\022\025\n\021NOT_DETERMINISTIC\020\002\022\r\n\tIMMUTABL"
      "E\020\003\022\n\n\006STABLE\020\004\022\014\n\010VOLATILE\020\005\"W\n\034ASTAuxL"
      "oadDataStatementEnums\"7\n\rInsertionMode\022\013"
      "\n\007NOT_SET\020\000\022\n\n\006APPEND\020\001\022\r\n\tOVERWRITE\020\002*\323"
      "\002\n\020SchemaObjectKind\022=\n0__SchemaObjectKin"
      "d__switch_must_have_a_default__\020\377\377\377\377\377\377\377\377"
      "\377\001\022\034\n\030kInvalidSchemaObjectKind\020\001\022\026\n\022kAgg"
      "regateFunction\020\002\022\r\n\tkConstant\020\003\022\r\n\tkData"
      "base\020\004\022\022\n\016kExternalTable\020\005\022\r\n\tkFunction\020"
      "\006\022\n\n\006kIndex\020\007\022\025\n\021kMaterializedView\020\010\022\n\n\006"
      "kModel\020\t\022\016\n\nkProcedure\020\n\022\013\n\007kSchema\020\013\022\n\n"
      "\006kTable\020\014\022\022\n\016kTableFunction\020\r\022\t\n\005kView\020\016"
      "\022\022\n\016kSnapshotTable\020\017B\035\n\031com.google.zetas"
      "ql.parserP\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3851);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zetasql/parser/ast_enums.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_zetasql_2fparser_2fast_5fenums_2eproto
namespace zetasql {
const ::google::protobuf::EnumDescriptor* ASTBinaryExpressionEnums_Op_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[0];
}
bool ASTBinaryExpressionEnums_Op_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTBinaryExpressionEnums_Op ASTBinaryExpressionEnums::NOT_SET;
const ASTBinaryExpressionEnums_Op ASTBinaryExpressionEnums::LIKE;
const ASTBinaryExpressionEnums_Op ASTBinaryExpressionEnums::IS;
const ASTBinaryExpressionEnums_Op ASTBinaryExpressionEnums::EQ;
const ASTBinaryExpressionEnums_Op ASTBinaryExpressionEnums::NE;
const ASTBinaryExpressionEnums_Op ASTBinaryExpressionEnums::NE2;
const ASTBinaryExpressionEnums_Op ASTBinaryExpressionEnums::GT;
const ASTBinaryExpressionEnums_Op ASTBinaryExpressionEnums::LT;
const ASTBinaryExpressionEnums_Op ASTBinaryExpressionEnums::GE;
const ASTBinaryExpressionEnums_Op ASTBinaryExpressionEnums::LE;
const ASTBinaryExpressionEnums_Op ASTBinaryExpressionEnums::BITWISE_OR;
const ASTBinaryExpressionEnums_Op ASTBinaryExpressionEnums::BITWISE_XOR;
const ASTBinaryExpressionEnums_Op ASTBinaryExpressionEnums::BITWISE_AND;
const ASTBinaryExpressionEnums_Op ASTBinaryExpressionEnums::PLUS;
const ASTBinaryExpressionEnums_Op ASTBinaryExpressionEnums::MINUS;
const ASTBinaryExpressionEnums_Op ASTBinaryExpressionEnums::MULTIPLY;
const ASTBinaryExpressionEnums_Op ASTBinaryExpressionEnums::DIVIDE;
const ASTBinaryExpressionEnums_Op ASTBinaryExpressionEnums::CONCAT_OP;
const ASTBinaryExpressionEnums_Op ASTBinaryExpressionEnums::DISTINCT;
const ASTBinaryExpressionEnums_Op ASTBinaryExpressionEnums::Op_MIN;
const ASTBinaryExpressionEnums_Op ASTBinaryExpressionEnums::Op_MAX;
const int ASTBinaryExpressionEnums::Op_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTOrderingExpressionEnums_OrderingSpec_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[1];
}
bool ASTOrderingExpressionEnums_OrderingSpec_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTOrderingExpressionEnums_OrderingSpec ASTOrderingExpressionEnums::NOT_SET;
const ASTOrderingExpressionEnums_OrderingSpec ASTOrderingExpressionEnums::ASC;
const ASTOrderingExpressionEnums_OrderingSpec ASTOrderingExpressionEnums::DESC;
const ASTOrderingExpressionEnums_OrderingSpec ASTOrderingExpressionEnums::UNSPECIFIED;
const ASTOrderingExpressionEnums_OrderingSpec ASTOrderingExpressionEnums::OrderingSpec_MIN;
const ASTOrderingExpressionEnums_OrderingSpec ASTOrderingExpressionEnums::OrderingSpec_MAX;
const int ASTOrderingExpressionEnums::OrderingSpec_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTJoinEnums_JoinType_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[2];
}
bool ASTJoinEnums_JoinType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTJoinEnums_JoinType ASTJoinEnums::DEFAULT_JOIN_TYPE;
const ASTJoinEnums_JoinType ASTJoinEnums::COMMA;
const ASTJoinEnums_JoinType ASTJoinEnums::CROSS;
const ASTJoinEnums_JoinType ASTJoinEnums::FULL;
const ASTJoinEnums_JoinType ASTJoinEnums::INNER;
const ASTJoinEnums_JoinType ASTJoinEnums::LEFT;
const ASTJoinEnums_JoinType ASTJoinEnums::RIGHT;
const ASTJoinEnums_JoinType ASTJoinEnums::JoinType_MIN;
const ASTJoinEnums_JoinType ASTJoinEnums::JoinType_MAX;
const int ASTJoinEnums::JoinType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTJoinEnums_JoinHint_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[3];
}
bool ASTJoinEnums_JoinHint_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTJoinEnums_JoinHint ASTJoinEnums::NO_JOIN_HINT;
const ASTJoinEnums_JoinHint ASTJoinEnums::HASH;
const ASTJoinEnums_JoinHint ASTJoinEnums::LOOKUP;
const ASTJoinEnums_JoinHint ASTJoinEnums::JoinHint_MIN;
const ASTJoinEnums_JoinHint ASTJoinEnums::JoinHint_MAX;
const int ASTJoinEnums::JoinHint_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTSelectAsEnums_AsMode_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[4];
}
bool ASTSelectAsEnums_AsMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTSelectAsEnums_AsMode ASTSelectAsEnums::NOT_SET;
const ASTSelectAsEnums_AsMode ASTSelectAsEnums::STRUCT;
const ASTSelectAsEnums_AsMode ASTSelectAsEnums::VALUE;
const ASTSelectAsEnums_AsMode ASTSelectAsEnums::TYPE_NAME;
const ASTSelectAsEnums_AsMode ASTSelectAsEnums::AsMode_MIN;
const ASTSelectAsEnums_AsMode ASTSelectAsEnums::AsMode_MAX;
const int ASTSelectAsEnums::AsMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTFunctionCallEnums_NullHandlingModifier_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[5];
}
bool ASTFunctionCallEnums_NullHandlingModifier_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTFunctionCallEnums_NullHandlingModifier ASTFunctionCallEnums::DEFAULT_NULL_HANDLING;
const ASTFunctionCallEnums_NullHandlingModifier ASTFunctionCallEnums::IGNORE_NULLS;
const ASTFunctionCallEnums_NullHandlingModifier ASTFunctionCallEnums::RESPECT_NULLS;
const ASTFunctionCallEnums_NullHandlingModifier ASTFunctionCallEnums::NullHandlingModifier_MIN;
const ASTFunctionCallEnums_NullHandlingModifier ASTFunctionCallEnums::NullHandlingModifier_MAX;
const int ASTFunctionCallEnums::NullHandlingModifier_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTExpressionSubqueryEnums_Modifier_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[6];
}
bool ASTExpressionSubqueryEnums_Modifier_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTExpressionSubqueryEnums_Modifier ASTExpressionSubqueryEnums::NONE;
const ASTExpressionSubqueryEnums_Modifier ASTExpressionSubqueryEnums::ARRAY;
const ASTExpressionSubqueryEnums_Modifier ASTExpressionSubqueryEnums::EXISTS;
const ASTExpressionSubqueryEnums_Modifier ASTExpressionSubqueryEnums::Modifier_MIN;
const ASTExpressionSubqueryEnums_Modifier ASTExpressionSubqueryEnums::Modifier_MAX;
const int ASTExpressionSubqueryEnums::Modifier_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTHavingModifierEnums_ModifierKind_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[7];
}
bool ASTHavingModifierEnums_ModifierKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTHavingModifierEnums_ModifierKind ASTHavingModifierEnums::NOT_SET;
const ASTHavingModifierEnums_ModifierKind ASTHavingModifierEnums::MIN;
const ASTHavingModifierEnums_ModifierKind ASTHavingModifierEnums::MAX;
const ASTHavingModifierEnums_ModifierKind ASTHavingModifierEnums::ModifierKind_MIN;
const ASTHavingModifierEnums_ModifierKind ASTHavingModifierEnums::ModifierKind_MAX;
const int ASTHavingModifierEnums::ModifierKind_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTSetOperationEnums_OperationType_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[8];
}
bool ASTSetOperationEnums_OperationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTSetOperationEnums_OperationType ASTSetOperationEnums::NOT_SET;
const ASTSetOperationEnums_OperationType ASTSetOperationEnums::UNION;
const ASTSetOperationEnums_OperationType ASTSetOperationEnums::EXCEPT;
const ASTSetOperationEnums_OperationType ASTSetOperationEnums::INTERSECT;
const ASTSetOperationEnums_OperationType ASTSetOperationEnums::OperationType_MIN;
const ASTSetOperationEnums_OperationType ASTSetOperationEnums::OperationType_MAX;
const int ASTSetOperationEnums::OperationType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTUnaryExpressionEnums_Op_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[9];
}
bool ASTUnaryExpressionEnums_Op_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTUnaryExpressionEnums_Op ASTUnaryExpressionEnums::NOT_SET;
const ASTUnaryExpressionEnums_Op ASTUnaryExpressionEnums::NOT;
const ASTUnaryExpressionEnums_Op ASTUnaryExpressionEnums::BITWISE_NOT;
const ASTUnaryExpressionEnums_Op ASTUnaryExpressionEnums::MINUS;
const ASTUnaryExpressionEnums_Op ASTUnaryExpressionEnums::PLUS;
const ASTUnaryExpressionEnums_Op ASTUnaryExpressionEnums::IS_UNKNOWN;
const ASTUnaryExpressionEnums_Op ASTUnaryExpressionEnums::IS_NOT_UNKNOWN;
const ASTUnaryExpressionEnums_Op ASTUnaryExpressionEnums::Op_MIN;
const ASTUnaryExpressionEnums_Op ASTUnaryExpressionEnums::Op_MAX;
const int ASTUnaryExpressionEnums::Op_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTWindowFrameEnums_FrameUnit_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[10];
}
bool ASTWindowFrameEnums_FrameUnit_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTWindowFrameEnums_FrameUnit ASTWindowFrameEnums::ROWS;
const ASTWindowFrameEnums_FrameUnit ASTWindowFrameEnums::RANGE;
const ASTWindowFrameEnums_FrameUnit ASTWindowFrameEnums::FrameUnit_MIN;
const ASTWindowFrameEnums_FrameUnit ASTWindowFrameEnums::FrameUnit_MAX;
const int ASTWindowFrameEnums::FrameUnit_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTWindowFrameExprEnums_BoundaryType_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[11];
}
bool ASTWindowFrameExprEnums_BoundaryType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTWindowFrameExprEnums_BoundaryType ASTWindowFrameExprEnums::UNBOUNDED_PRECEDING;
const ASTWindowFrameExprEnums_BoundaryType ASTWindowFrameExprEnums::OFFSET_PRECEDING;
const ASTWindowFrameExprEnums_BoundaryType ASTWindowFrameExprEnums::CURRENT_ROW;
const ASTWindowFrameExprEnums_BoundaryType ASTWindowFrameExprEnums::OFFSET_FOLLOWING;
const ASTWindowFrameExprEnums_BoundaryType ASTWindowFrameExprEnums::UNBOUNDED_FOLLOWING;
const ASTWindowFrameExprEnums_BoundaryType ASTWindowFrameExprEnums::BoundaryType_MIN;
const ASTWindowFrameExprEnums_BoundaryType ASTWindowFrameExprEnums::BoundaryType_MAX;
const int ASTWindowFrameExprEnums::BoundaryType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTAnySomeAllOpEnums_Op_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[12];
}
bool ASTAnySomeAllOpEnums_Op_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTAnySomeAllOpEnums_Op ASTAnySomeAllOpEnums::kUninitialized;
const ASTAnySomeAllOpEnums_Op ASTAnySomeAllOpEnums::kAny;
const ASTAnySomeAllOpEnums_Op ASTAnySomeAllOpEnums::kSome;
const ASTAnySomeAllOpEnums_Op ASTAnySomeAllOpEnums::kAll;
const ASTAnySomeAllOpEnums_Op ASTAnySomeAllOpEnums::Op_MIN;
const ASTAnySomeAllOpEnums_Op ASTAnySomeAllOpEnums::Op_MAX;
const int ASTAnySomeAllOpEnums::Op_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTTransactionReadWriteModeEnums_Mode_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[13];
}
bool ASTTransactionReadWriteModeEnums_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTTransactionReadWriteModeEnums_Mode ASTTransactionReadWriteModeEnums::INVALID;
const ASTTransactionReadWriteModeEnums_Mode ASTTransactionReadWriteModeEnums::READ_ONLY;
const ASTTransactionReadWriteModeEnums_Mode ASTTransactionReadWriteModeEnums::READ_WRITE;
const ASTTransactionReadWriteModeEnums_Mode ASTTransactionReadWriteModeEnums::Mode_MIN;
const ASTTransactionReadWriteModeEnums_Mode ASTTransactionReadWriteModeEnums::Mode_MAX;
const int ASTTransactionReadWriteModeEnums::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTImportStatementEnums_ImportKind_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[14];
}
bool ASTImportStatementEnums_ImportKind_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTImportStatementEnums_ImportKind ASTImportStatementEnums::MODULE;
const ASTImportStatementEnums_ImportKind ASTImportStatementEnums::PROTO;
const ASTImportStatementEnums_ImportKind ASTImportStatementEnums::ImportKind_MIN;
const ASTImportStatementEnums_ImportKind ASTImportStatementEnums::ImportKind_MAX;
const int ASTImportStatementEnums::ImportKind_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTUnpivotClauseEnums_NullFilter_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[15];
}
bool ASTUnpivotClauseEnums_NullFilter_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTUnpivotClauseEnums_NullFilter ASTUnpivotClauseEnums::kUnspecified;
const ASTUnpivotClauseEnums_NullFilter ASTUnpivotClauseEnums::kInclude;
const ASTUnpivotClauseEnums_NullFilter ASTUnpivotClauseEnums::kExclude;
const ASTUnpivotClauseEnums_NullFilter ASTUnpivotClauseEnums::NullFilter_MIN;
const ASTUnpivotClauseEnums_NullFilter ASTUnpivotClauseEnums::NullFilter_MAX;
const int ASTUnpivotClauseEnums::NullFilter_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTCreateStatementEnums_Scope_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[16];
}
bool ASTCreateStatementEnums_Scope_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTCreateStatementEnums_Scope ASTCreateStatementEnums::DEFAULT_SCOPE;
const ASTCreateStatementEnums_Scope ASTCreateStatementEnums::PRIVATE;
const ASTCreateStatementEnums_Scope ASTCreateStatementEnums::PUBLIC;
const ASTCreateStatementEnums_Scope ASTCreateStatementEnums::TEMPORARY;
const ASTCreateStatementEnums_Scope ASTCreateStatementEnums::Scope_MIN;
const ASTCreateStatementEnums_Scope ASTCreateStatementEnums::Scope_MAX;
const int ASTCreateStatementEnums::Scope_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTCreateStatementEnums_SqlSecurity_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[17];
}
bool ASTCreateStatementEnums_SqlSecurity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTCreateStatementEnums_SqlSecurity ASTCreateStatementEnums::SQL_SECURITY_UNSPECIFIED;
const ASTCreateStatementEnums_SqlSecurity ASTCreateStatementEnums::SQL_SECURITY_DEFINER;
const ASTCreateStatementEnums_SqlSecurity ASTCreateStatementEnums::SQL_SECURITY_INVOKER;
const ASTCreateStatementEnums_SqlSecurity ASTCreateStatementEnums::SqlSecurity_MIN;
const ASTCreateStatementEnums_SqlSecurity ASTCreateStatementEnums::SqlSecurity_MAX;
const int ASTCreateStatementEnums::SqlSecurity_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTFunctionParameterEnums_ProcedureParameterMode_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[18];
}
bool ASTFunctionParameterEnums_ProcedureParameterMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTFunctionParameterEnums_ProcedureParameterMode ASTFunctionParameterEnums::NOT_SET;
const ASTFunctionParameterEnums_ProcedureParameterMode ASTFunctionParameterEnums::IN;
const ASTFunctionParameterEnums_ProcedureParameterMode ASTFunctionParameterEnums::OUT;
const ASTFunctionParameterEnums_ProcedureParameterMode ASTFunctionParameterEnums::INOUT;
const ASTFunctionParameterEnums_ProcedureParameterMode ASTFunctionParameterEnums::ProcedureParameterMode_MIN;
const ASTFunctionParameterEnums_ProcedureParameterMode ASTFunctionParameterEnums::ProcedureParameterMode_MAX;
const int ASTFunctionParameterEnums::ProcedureParameterMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTTemplatedParameterTypeEnums_TemplatedTypeKind_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[19];
}
bool ASTTemplatedParameterTypeEnums_TemplatedTypeKind_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTTemplatedParameterTypeEnums_TemplatedTypeKind ASTTemplatedParameterTypeEnums::UNINITIALIZED;
const ASTTemplatedParameterTypeEnums_TemplatedTypeKind ASTTemplatedParameterTypeEnums::ANY_TYPE;
const ASTTemplatedParameterTypeEnums_TemplatedTypeKind ASTTemplatedParameterTypeEnums::ANY_PROTO;
const ASTTemplatedParameterTypeEnums_TemplatedTypeKind ASTTemplatedParameterTypeEnums::ANY_ENUM;
const ASTTemplatedParameterTypeEnums_TemplatedTypeKind ASTTemplatedParameterTypeEnums::ANY_STRUCT;
const ASTTemplatedParameterTypeEnums_TemplatedTypeKind ASTTemplatedParameterTypeEnums::ANY_ARRAY;
const ASTTemplatedParameterTypeEnums_TemplatedTypeKind ASTTemplatedParameterTypeEnums::ANY_TABLE;
const ASTTemplatedParameterTypeEnums_TemplatedTypeKind ASTTemplatedParameterTypeEnums::TemplatedTypeKind_MIN;
const ASTTemplatedParameterTypeEnums_TemplatedTypeKind ASTTemplatedParameterTypeEnums::TemplatedTypeKind_MAX;
const int ASTTemplatedParameterTypeEnums::TemplatedTypeKind_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTGeneratedColumnInfoEnums_StoredMode_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[20];
}
bool ASTGeneratedColumnInfoEnums_StoredMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTGeneratedColumnInfoEnums_StoredMode ASTGeneratedColumnInfoEnums::NON_STORED;
const ASTGeneratedColumnInfoEnums_StoredMode ASTGeneratedColumnInfoEnums::STORED;
const ASTGeneratedColumnInfoEnums_StoredMode ASTGeneratedColumnInfoEnums::STORED_VOLATILE;
const ASTGeneratedColumnInfoEnums_StoredMode ASTGeneratedColumnInfoEnums::StoredMode_MIN;
const ASTGeneratedColumnInfoEnums_StoredMode ASTGeneratedColumnInfoEnums::StoredMode_MAX;
const int ASTGeneratedColumnInfoEnums::StoredMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTColumnPositionEnums_RelativePositionType_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[21];
}
bool ASTColumnPositionEnums_RelativePositionType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTColumnPositionEnums_RelativePositionType ASTColumnPositionEnums::PRECEDING;
const ASTColumnPositionEnums_RelativePositionType ASTColumnPositionEnums::FOLLOWING;
const ASTColumnPositionEnums_RelativePositionType ASTColumnPositionEnums::RelativePositionType_MIN;
const ASTColumnPositionEnums_RelativePositionType ASTColumnPositionEnums::RelativePositionType_MAX;
const int ASTColumnPositionEnums::RelativePositionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTInsertStatementEnums_InsertMode_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[22];
}
bool ASTInsertStatementEnums_InsertMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTInsertStatementEnums_InsertMode ASTInsertStatementEnums::DEFAULT_MODE;
const ASTInsertStatementEnums_InsertMode ASTInsertStatementEnums::REPLACE;
const ASTInsertStatementEnums_InsertMode ASTInsertStatementEnums::UPDATE;
const ASTInsertStatementEnums_InsertMode ASTInsertStatementEnums::IGNORE;
const ASTInsertStatementEnums_InsertMode ASTInsertStatementEnums::InsertMode_MIN;
const ASTInsertStatementEnums_InsertMode ASTInsertStatementEnums::InsertMode_MAX;
const int ASTInsertStatementEnums::InsertMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTInsertStatementEnums_ParseProgress_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[23];
}
bool ASTInsertStatementEnums_ParseProgress_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTInsertStatementEnums_ParseProgress ASTInsertStatementEnums::kInitial;
const ASTInsertStatementEnums_ParseProgress ASTInsertStatementEnums::kSeenOrIgnoreReplaceUpdate;
const ASTInsertStatementEnums_ParseProgress ASTInsertStatementEnums::kSeenTargetPath;
const ASTInsertStatementEnums_ParseProgress ASTInsertStatementEnums::kSeenColumnList;
const ASTInsertStatementEnums_ParseProgress ASTInsertStatementEnums::kSeenValuesList;
const ASTInsertStatementEnums_ParseProgress ASTInsertStatementEnums::ParseProgress_MIN;
const ASTInsertStatementEnums_ParseProgress ASTInsertStatementEnums::ParseProgress_MAX;
const int ASTInsertStatementEnums::ParseProgress_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTMergeActionEnums_ActionType_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[24];
}
bool ASTMergeActionEnums_ActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTMergeActionEnums_ActionType ASTMergeActionEnums::NOT_SET;
const ASTMergeActionEnums_ActionType ASTMergeActionEnums::INSERT;
const ASTMergeActionEnums_ActionType ASTMergeActionEnums::UPDATE;
const ASTMergeActionEnums_ActionType ASTMergeActionEnums::DELETE;
const ASTMergeActionEnums_ActionType ASTMergeActionEnums::ActionType_MIN;
const ASTMergeActionEnums_ActionType ASTMergeActionEnums::ActionType_MAX;
const int ASTMergeActionEnums::ActionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTMergeWhenClauseEnums_MatchType_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[25];
}
bool ASTMergeWhenClauseEnums_MatchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTMergeWhenClauseEnums_MatchType ASTMergeWhenClauseEnums::NOT_SET;
const ASTMergeWhenClauseEnums_MatchType ASTMergeWhenClauseEnums::MATCHED;
const ASTMergeWhenClauseEnums_MatchType ASTMergeWhenClauseEnums::NOT_MATCHED_BY_SOURCE;
const ASTMergeWhenClauseEnums_MatchType ASTMergeWhenClauseEnums::NOT_MATCHED_BY_TARGET;
const ASTMergeWhenClauseEnums_MatchType ASTMergeWhenClauseEnums::MatchType_MIN;
const ASTMergeWhenClauseEnums_MatchType ASTMergeWhenClauseEnums::MatchType_MAX;
const int ASTMergeWhenClauseEnums::MatchType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTFilterFieldsArgEnums_FilterType_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[26];
}
bool ASTFilterFieldsArgEnums_FilterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTFilterFieldsArgEnums_FilterType ASTFilterFieldsArgEnums::NOT_SET;
const ASTFilterFieldsArgEnums_FilterType ASTFilterFieldsArgEnums::INCLUDE;
const ASTFilterFieldsArgEnums_FilterType ASTFilterFieldsArgEnums::EXCLUDE;
const ASTFilterFieldsArgEnums_FilterType ASTFilterFieldsArgEnums::FilterType_MIN;
const ASTFilterFieldsArgEnums_FilterType ASTFilterFieldsArgEnums::FilterType_MAX;
const int ASTFilterFieldsArgEnums::FilterType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTSampleSizeEnums_Unit_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[27];
}
bool ASTSampleSizeEnums_Unit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTSampleSizeEnums_Unit ASTSampleSizeEnums::NOT_SET;
const ASTSampleSizeEnums_Unit ASTSampleSizeEnums::ROWS;
const ASTSampleSizeEnums_Unit ASTSampleSizeEnums::PERCENT;
const ASTSampleSizeEnums_Unit ASTSampleSizeEnums::Unit_MIN;
const ASTSampleSizeEnums_Unit ASTSampleSizeEnums::Unit_MAX;
const int ASTSampleSizeEnums::Unit_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTForeignKeyActionsEnums_Action_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[28];
}
bool ASTForeignKeyActionsEnums_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTForeignKeyActionsEnums_Action ASTForeignKeyActionsEnums::NO_ACTION;
const ASTForeignKeyActionsEnums_Action ASTForeignKeyActionsEnums::RESTRICT;
const ASTForeignKeyActionsEnums_Action ASTForeignKeyActionsEnums::CASCADE;
const ASTForeignKeyActionsEnums_Action ASTForeignKeyActionsEnums::SET_NULL;
const ASTForeignKeyActionsEnums_Action ASTForeignKeyActionsEnums::Action_MIN;
const ASTForeignKeyActionsEnums_Action ASTForeignKeyActionsEnums::Action_MAX;
const int ASTForeignKeyActionsEnums::Action_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTForeignKeyReferenceEnums_Match_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[29];
}
bool ASTForeignKeyReferenceEnums_Match_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTForeignKeyReferenceEnums_Match ASTForeignKeyReferenceEnums::SIMPLE;
const ASTForeignKeyReferenceEnums_Match ASTForeignKeyReferenceEnums::FULL;
const ASTForeignKeyReferenceEnums_Match ASTForeignKeyReferenceEnums::NOT_DISTINCT;
const ASTForeignKeyReferenceEnums_Match ASTForeignKeyReferenceEnums::Match_MIN;
const ASTForeignKeyReferenceEnums_Match ASTForeignKeyReferenceEnums::Match_MAX;
const int ASTForeignKeyReferenceEnums::Match_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTBreakContinueStatementEnums_BreakContinueKeyword_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[30];
}
bool ASTBreakContinueStatementEnums_BreakContinueKeyword_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTBreakContinueStatementEnums_BreakContinueKeyword ASTBreakContinueStatementEnums::BREAK;
const ASTBreakContinueStatementEnums_BreakContinueKeyword ASTBreakContinueStatementEnums::LEAVE;
const ASTBreakContinueStatementEnums_BreakContinueKeyword ASTBreakContinueStatementEnums::CONTINUE;
const ASTBreakContinueStatementEnums_BreakContinueKeyword ASTBreakContinueStatementEnums::ITERATE;
const ASTBreakContinueStatementEnums_BreakContinueKeyword ASTBreakContinueStatementEnums::BreakContinueKeyword_MIN;
const ASTBreakContinueStatementEnums_BreakContinueKeyword ASTBreakContinueStatementEnums::BreakContinueKeyword_MAX;
const int ASTBreakContinueStatementEnums::BreakContinueKeyword_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTDropStatementEnums_DropMode_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[31];
}
bool ASTDropStatementEnums_DropMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTDropStatementEnums_DropMode ASTDropStatementEnums::DROP_MODE_UNSPECIFIED;
const ASTDropStatementEnums_DropMode ASTDropStatementEnums::RESTRICT;
const ASTDropStatementEnums_DropMode ASTDropStatementEnums::CASCADE;
const ASTDropStatementEnums_DropMode ASTDropStatementEnums::DropMode_MIN;
const ASTDropStatementEnums_DropMode ASTDropStatementEnums::DropMode_MAX;
const int ASTDropStatementEnums::DropMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTCreateFunctionStmtBaseEnums_DeterminismLevel_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[32];
}
bool ASTCreateFunctionStmtBaseEnums_DeterminismLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTCreateFunctionStmtBaseEnums_DeterminismLevel ASTCreateFunctionStmtBaseEnums::DETERMINISM_UNSPECIFIED;
const ASTCreateFunctionStmtBaseEnums_DeterminismLevel ASTCreateFunctionStmtBaseEnums::DETERMINISTIC;
const ASTCreateFunctionStmtBaseEnums_DeterminismLevel ASTCreateFunctionStmtBaseEnums::NOT_DETERMINISTIC;
const ASTCreateFunctionStmtBaseEnums_DeterminismLevel ASTCreateFunctionStmtBaseEnums::IMMUTABLE;
const ASTCreateFunctionStmtBaseEnums_DeterminismLevel ASTCreateFunctionStmtBaseEnums::STABLE;
const ASTCreateFunctionStmtBaseEnums_DeterminismLevel ASTCreateFunctionStmtBaseEnums::VOLATILE;
const ASTCreateFunctionStmtBaseEnums_DeterminismLevel ASTCreateFunctionStmtBaseEnums::DeterminismLevel_MIN;
const ASTCreateFunctionStmtBaseEnums_DeterminismLevel ASTCreateFunctionStmtBaseEnums::DeterminismLevel_MAX;
const int ASTCreateFunctionStmtBaseEnums::DeterminismLevel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ASTAuxLoadDataStatementEnums_InsertionMode_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[33];
}
bool ASTAuxLoadDataStatementEnums_InsertionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ASTAuxLoadDataStatementEnums_InsertionMode ASTAuxLoadDataStatementEnums::NOT_SET;
const ASTAuxLoadDataStatementEnums_InsertionMode ASTAuxLoadDataStatementEnums::APPEND;
const ASTAuxLoadDataStatementEnums_InsertionMode ASTAuxLoadDataStatementEnums::OVERWRITE;
const ASTAuxLoadDataStatementEnums_InsertionMode ASTAuxLoadDataStatementEnums::InsertionMode_MIN;
const ASTAuxLoadDataStatementEnums_InsertionMode ASTAuxLoadDataStatementEnums::InsertionMode_MAX;
const int ASTAuxLoadDataStatementEnums::InsertionMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SchemaObjectKind_descriptor() {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_enum_descriptors[34];
}
bool SchemaObjectKind_IsValid(int value) {
  switch (value) {
    case -1:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ASTBinaryExpressionEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTBinaryExpressionEnums::ASTBinaryExpressionEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTBinaryExpressionEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTBinaryExpressionEnums)
}
ASTBinaryExpressionEnums::ASTBinaryExpressionEnums(const ASTBinaryExpressionEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTBinaryExpressionEnums)
}

void ASTBinaryExpressionEnums::SharedCtor() {
}

ASTBinaryExpressionEnums::~ASTBinaryExpressionEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTBinaryExpressionEnums)
  SharedDtor();
}

void ASTBinaryExpressionEnums::SharedDtor() {
}

void ASTBinaryExpressionEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTBinaryExpressionEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTBinaryExpressionEnums& ASTBinaryExpressionEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTBinaryExpressionEnums.base);
  return *internal_default_instance();
}


void ASTBinaryExpressionEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTBinaryExpressionEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTBinaryExpressionEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTBinaryExpressionEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTBinaryExpressionEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTBinaryExpressionEnums)
  return false;
#undef DO_
}

void ASTBinaryExpressionEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTBinaryExpressionEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTBinaryExpressionEnums)
}

::google::protobuf::uint8* ASTBinaryExpressionEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTBinaryExpressionEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTBinaryExpressionEnums)
  return target;
}

size_t ASTBinaryExpressionEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTBinaryExpressionEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTBinaryExpressionEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTBinaryExpressionEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTBinaryExpressionEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTBinaryExpressionEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTBinaryExpressionEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTBinaryExpressionEnums)
    MergeFrom(*source);
  }
}

void ASTBinaryExpressionEnums::MergeFrom(const ASTBinaryExpressionEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTBinaryExpressionEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTBinaryExpressionEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTBinaryExpressionEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTBinaryExpressionEnums::CopyFrom(const ASTBinaryExpressionEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTBinaryExpressionEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTBinaryExpressionEnums::IsInitialized() const {
  return true;
}

void ASTBinaryExpressionEnums::Swap(ASTBinaryExpressionEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTBinaryExpressionEnums::InternalSwap(ASTBinaryExpressionEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTBinaryExpressionEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTOrderingExpressionEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTOrderingExpressionEnums::ASTOrderingExpressionEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTOrderingExpressionEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTOrderingExpressionEnums)
}
ASTOrderingExpressionEnums::ASTOrderingExpressionEnums(const ASTOrderingExpressionEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTOrderingExpressionEnums)
}

void ASTOrderingExpressionEnums::SharedCtor() {
}

ASTOrderingExpressionEnums::~ASTOrderingExpressionEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTOrderingExpressionEnums)
  SharedDtor();
}

void ASTOrderingExpressionEnums::SharedDtor() {
}

void ASTOrderingExpressionEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTOrderingExpressionEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTOrderingExpressionEnums& ASTOrderingExpressionEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTOrderingExpressionEnums.base);
  return *internal_default_instance();
}


void ASTOrderingExpressionEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTOrderingExpressionEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTOrderingExpressionEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTOrderingExpressionEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTOrderingExpressionEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTOrderingExpressionEnums)
  return false;
#undef DO_
}

void ASTOrderingExpressionEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTOrderingExpressionEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTOrderingExpressionEnums)
}

::google::protobuf::uint8* ASTOrderingExpressionEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTOrderingExpressionEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTOrderingExpressionEnums)
  return target;
}

size_t ASTOrderingExpressionEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTOrderingExpressionEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTOrderingExpressionEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTOrderingExpressionEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTOrderingExpressionEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTOrderingExpressionEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTOrderingExpressionEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTOrderingExpressionEnums)
    MergeFrom(*source);
  }
}

void ASTOrderingExpressionEnums::MergeFrom(const ASTOrderingExpressionEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTOrderingExpressionEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTOrderingExpressionEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTOrderingExpressionEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTOrderingExpressionEnums::CopyFrom(const ASTOrderingExpressionEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTOrderingExpressionEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTOrderingExpressionEnums::IsInitialized() const {
  return true;
}

void ASTOrderingExpressionEnums::Swap(ASTOrderingExpressionEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTOrderingExpressionEnums::InternalSwap(ASTOrderingExpressionEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTOrderingExpressionEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTJoinEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTJoinEnums::ASTJoinEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTJoinEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTJoinEnums)
}
ASTJoinEnums::ASTJoinEnums(const ASTJoinEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTJoinEnums)
}

void ASTJoinEnums::SharedCtor() {
}

ASTJoinEnums::~ASTJoinEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTJoinEnums)
  SharedDtor();
}

void ASTJoinEnums::SharedDtor() {
}

void ASTJoinEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTJoinEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTJoinEnums& ASTJoinEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTJoinEnums.base);
  return *internal_default_instance();
}


void ASTJoinEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTJoinEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTJoinEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTJoinEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTJoinEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTJoinEnums)
  return false;
#undef DO_
}

void ASTJoinEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTJoinEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTJoinEnums)
}

::google::protobuf::uint8* ASTJoinEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTJoinEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTJoinEnums)
  return target;
}

size_t ASTJoinEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTJoinEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTJoinEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTJoinEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTJoinEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTJoinEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTJoinEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTJoinEnums)
    MergeFrom(*source);
  }
}

void ASTJoinEnums::MergeFrom(const ASTJoinEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTJoinEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTJoinEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTJoinEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTJoinEnums::CopyFrom(const ASTJoinEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTJoinEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTJoinEnums::IsInitialized() const {
  return true;
}

void ASTJoinEnums::Swap(ASTJoinEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTJoinEnums::InternalSwap(ASTJoinEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTJoinEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTSelectAsEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTSelectAsEnums::ASTSelectAsEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTSelectAsEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTSelectAsEnums)
}
ASTSelectAsEnums::ASTSelectAsEnums(const ASTSelectAsEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTSelectAsEnums)
}

void ASTSelectAsEnums::SharedCtor() {
}

ASTSelectAsEnums::~ASTSelectAsEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTSelectAsEnums)
  SharedDtor();
}

void ASTSelectAsEnums::SharedDtor() {
}

void ASTSelectAsEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTSelectAsEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTSelectAsEnums& ASTSelectAsEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTSelectAsEnums.base);
  return *internal_default_instance();
}


void ASTSelectAsEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTSelectAsEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTSelectAsEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTSelectAsEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTSelectAsEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTSelectAsEnums)
  return false;
#undef DO_
}

void ASTSelectAsEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTSelectAsEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTSelectAsEnums)
}

::google::protobuf::uint8* ASTSelectAsEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTSelectAsEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTSelectAsEnums)
  return target;
}

size_t ASTSelectAsEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTSelectAsEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTSelectAsEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTSelectAsEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTSelectAsEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTSelectAsEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTSelectAsEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTSelectAsEnums)
    MergeFrom(*source);
  }
}

void ASTSelectAsEnums::MergeFrom(const ASTSelectAsEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTSelectAsEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTSelectAsEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTSelectAsEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTSelectAsEnums::CopyFrom(const ASTSelectAsEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTSelectAsEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTSelectAsEnums::IsInitialized() const {
  return true;
}

void ASTSelectAsEnums::Swap(ASTSelectAsEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTSelectAsEnums::InternalSwap(ASTSelectAsEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTSelectAsEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTFunctionCallEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTFunctionCallEnums::ASTFunctionCallEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTFunctionCallEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTFunctionCallEnums)
}
ASTFunctionCallEnums::ASTFunctionCallEnums(const ASTFunctionCallEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTFunctionCallEnums)
}

void ASTFunctionCallEnums::SharedCtor() {
}

ASTFunctionCallEnums::~ASTFunctionCallEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTFunctionCallEnums)
  SharedDtor();
}

void ASTFunctionCallEnums::SharedDtor() {
}

void ASTFunctionCallEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTFunctionCallEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTFunctionCallEnums& ASTFunctionCallEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTFunctionCallEnums.base);
  return *internal_default_instance();
}


void ASTFunctionCallEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTFunctionCallEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTFunctionCallEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTFunctionCallEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTFunctionCallEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTFunctionCallEnums)
  return false;
#undef DO_
}

void ASTFunctionCallEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTFunctionCallEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTFunctionCallEnums)
}

::google::protobuf::uint8* ASTFunctionCallEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTFunctionCallEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTFunctionCallEnums)
  return target;
}

size_t ASTFunctionCallEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTFunctionCallEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTFunctionCallEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTFunctionCallEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTFunctionCallEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTFunctionCallEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTFunctionCallEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTFunctionCallEnums)
    MergeFrom(*source);
  }
}

void ASTFunctionCallEnums::MergeFrom(const ASTFunctionCallEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTFunctionCallEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTFunctionCallEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTFunctionCallEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTFunctionCallEnums::CopyFrom(const ASTFunctionCallEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTFunctionCallEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTFunctionCallEnums::IsInitialized() const {
  return true;
}

void ASTFunctionCallEnums::Swap(ASTFunctionCallEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTFunctionCallEnums::InternalSwap(ASTFunctionCallEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTFunctionCallEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTExpressionSubqueryEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTExpressionSubqueryEnums::ASTExpressionSubqueryEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTExpressionSubqueryEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTExpressionSubqueryEnums)
}
ASTExpressionSubqueryEnums::ASTExpressionSubqueryEnums(const ASTExpressionSubqueryEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTExpressionSubqueryEnums)
}

void ASTExpressionSubqueryEnums::SharedCtor() {
}

ASTExpressionSubqueryEnums::~ASTExpressionSubqueryEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTExpressionSubqueryEnums)
  SharedDtor();
}

void ASTExpressionSubqueryEnums::SharedDtor() {
}

void ASTExpressionSubqueryEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTExpressionSubqueryEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTExpressionSubqueryEnums& ASTExpressionSubqueryEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTExpressionSubqueryEnums.base);
  return *internal_default_instance();
}


void ASTExpressionSubqueryEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTExpressionSubqueryEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTExpressionSubqueryEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTExpressionSubqueryEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTExpressionSubqueryEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTExpressionSubqueryEnums)
  return false;
#undef DO_
}

void ASTExpressionSubqueryEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTExpressionSubqueryEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTExpressionSubqueryEnums)
}

::google::protobuf::uint8* ASTExpressionSubqueryEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTExpressionSubqueryEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTExpressionSubqueryEnums)
  return target;
}

size_t ASTExpressionSubqueryEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTExpressionSubqueryEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTExpressionSubqueryEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTExpressionSubqueryEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTExpressionSubqueryEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTExpressionSubqueryEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTExpressionSubqueryEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTExpressionSubqueryEnums)
    MergeFrom(*source);
  }
}

void ASTExpressionSubqueryEnums::MergeFrom(const ASTExpressionSubqueryEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTExpressionSubqueryEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTExpressionSubqueryEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTExpressionSubqueryEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTExpressionSubqueryEnums::CopyFrom(const ASTExpressionSubqueryEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTExpressionSubqueryEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTExpressionSubqueryEnums::IsInitialized() const {
  return true;
}

void ASTExpressionSubqueryEnums::Swap(ASTExpressionSubqueryEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTExpressionSubqueryEnums::InternalSwap(ASTExpressionSubqueryEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTExpressionSubqueryEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTHavingModifierEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTHavingModifierEnums::ASTHavingModifierEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTHavingModifierEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTHavingModifierEnums)
}
ASTHavingModifierEnums::ASTHavingModifierEnums(const ASTHavingModifierEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTHavingModifierEnums)
}

void ASTHavingModifierEnums::SharedCtor() {
}

ASTHavingModifierEnums::~ASTHavingModifierEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTHavingModifierEnums)
  SharedDtor();
}

void ASTHavingModifierEnums::SharedDtor() {
}

void ASTHavingModifierEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTHavingModifierEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTHavingModifierEnums& ASTHavingModifierEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTHavingModifierEnums.base);
  return *internal_default_instance();
}


void ASTHavingModifierEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTHavingModifierEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTHavingModifierEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTHavingModifierEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTHavingModifierEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTHavingModifierEnums)
  return false;
#undef DO_
}

void ASTHavingModifierEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTHavingModifierEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTHavingModifierEnums)
}

::google::protobuf::uint8* ASTHavingModifierEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTHavingModifierEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTHavingModifierEnums)
  return target;
}

size_t ASTHavingModifierEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTHavingModifierEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTHavingModifierEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTHavingModifierEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTHavingModifierEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTHavingModifierEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTHavingModifierEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTHavingModifierEnums)
    MergeFrom(*source);
  }
}

void ASTHavingModifierEnums::MergeFrom(const ASTHavingModifierEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTHavingModifierEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTHavingModifierEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTHavingModifierEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTHavingModifierEnums::CopyFrom(const ASTHavingModifierEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTHavingModifierEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTHavingModifierEnums::IsInitialized() const {
  return true;
}

void ASTHavingModifierEnums::Swap(ASTHavingModifierEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTHavingModifierEnums::InternalSwap(ASTHavingModifierEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTHavingModifierEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTSetOperationEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTSetOperationEnums::ASTSetOperationEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTSetOperationEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTSetOperationEnums)
}
ASTSetOperationEnums::ASTSetOperationEnums(const ASTSetOperationEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTSetOperationEnums)
}

void ASTSetOperationEnums::SharedCtor() {
}

ASTSetOperationEnums::~ASTSetOperationEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTSetOperationEnums)
  SharedDtor();
}

void ASTSetOperationEnums::SharedDtor() {
}

void ASTSetOperationEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTSetOperationEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTSetOperationEnums& ASTSetOperationEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTSetOperationEnums.base);
  return *internal_default_instance();
}


void ASTSetOperationEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTSetOperationEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTSetOperationEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTSetOperationEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTSetOperationEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTSetOperationEnums)
  return false;
#undef DO_
}

void ASTSetOperationEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTSetOperationEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTSetOperationEnums)
}

::google::protobuf::uint8* ASTSetOperationEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTSetOperationEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTSetOperationEnums)
  return target;
}

size_t ASTSetOperationEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTSetOperationEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTSetOperationEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTSetOperationEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTSetOperationEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTSetOperationEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTSetOperationEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTSetOperationEnums)
    MergeFrom(*source);
  }
}

void ASTSetOperationEnums::MergeFrom(const ASTSetOperationEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTSetOperationEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTSetOperationEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTSetOperationEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTSetOperationEnums::CopyFrom(const ASTSetOperationEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTSetOperationEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTSetOperationEnums::IsInitialized() const {
  return true;
}

void ASTSetOperationEnums::Swap(ASTSetOperationEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTSetOperationEnums::InternalSwap(ASTSetOperationEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTSetOperationEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTUnaryExpressionEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTUnaryExpressionEnums::ASTUnaryExpressionEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTUnaryExpressionEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTUnaryExpressionEnums)
}
ASTUnaryExpressionEnums::ASTUnaryExpressionEnums(const ASTUnaryExpressionEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTUnaryExpressionEnums)
}

void ASTUnaryExpressionEnums::SharedCtor() {
}

ASTUnaryExpressionEnums::~ASTUnaryExpressionEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTUnaryExpressionEnums)
  SharedDtor();
}

void ASTUnaryExpressionEnums::SharedDtor() {
}

void ASTUnaryExpressionEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTUnaryExpressionEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTUnaryExpressionEnums& ASTUnaryExpressionEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTUnaryExpressionEnums.base);
  return *internal_default_instance();
}


void ASTUnaryExpressionEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTUnaryExpressionEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTUnaryExpressionEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTUnaryExpressionEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTUnaryExpressionEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTUnaryExpressionEnums)
  return false;
#undef DO_
}

void ASTUnaryExpressionEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTUnaryExpressionEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTUnaryExpressionEnums)
}

::google::protobuf::uint8* ASTUnaryExpressionEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTUnaryExpressionEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTUnaryExpressionEnums)
  return target;
}

size_t ASTUnaryExpressionEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTUnaryExpressionEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTUnaryExpressionEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTUnaryExpressionEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTUnaryExpressionEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTUnaryExpressionEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTUnaryExpressionEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTUnaryExpressionEnums)
    MergeFrom(*source);
  }
}

void ASTUnaryExpressionEnums::MergeFrom(const ASTUnaryExpressionEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTUnaryExpressionEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTUnaryExpressionEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTUnaryExpressionEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTUnaryExpressionEnums::CopyFrom(const ASTUnaryExpressionEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTUnaryExpressionEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTUnaryExpressionEnums::IsInitialized() const {
  return true;
}

void ASTUnaryExpressionEnums::Swap(ASTUnaryExpressionEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTUnaryExpressionEnums::InternalSwap(ASTUnaryExpressionEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTUnaryExpressionEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTWindowFrameEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTWindowFrameEnums::ASTWindowFrameEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTWindowFrameEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTWindowFrameEnums)
}
ASTWindowFrameEnums::ASTWindowFrameEnums(const ASTWindowFrameEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTWindowFrameEnums)
}

void ASTWindowFrameEnums::SharedCtor() {
}

ASTWindowFrameEnums::~ASTWindowFrameEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTWindowFrameEnums)
  SharedDtor();
}

void ASTWindowFrameEnums::SharedDtor() {
}

void ASTWindowFrameEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTWindowFrameEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTWindowFrameEnums& ASTWindowFrameEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTWindowFrameEnums.base);
  return *internal_default_instance();
}


void ASTWindowFrameEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTWindowFrameEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTWindowFrameEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTWindowFrameEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTWindowFrameEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTWindowFrameEnums)
  return false;
#undef DO_
}

void ASTWindowFrameEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTWindowFrameEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTWindowFrameEnums)
}

::google::protobuf::uint8* ASTWindowFrameEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTWindowFrameEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTWindowFrameEnums)
  return target;
}

size_t ASTWindowFrameEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTWindowFrameEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTWindowFrameEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTWindowFrameEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTWindowFrameEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTWindowFrameEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTWindowFrameEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTWindowFrameEnums)
    MergeFrom(*source);
  }
}

void ASTWindowFrameEnums::MergeFrom(const ASTWindowFrameEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTWindowFrameEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTWindowFrameEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTWindowFrameEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTWindowFrameEnums::CopyFrom(const ASTWindowFrameEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTWindowFrameEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTWindowFrameEnums::IsInitialized() const {
  return true;
}

void ASTWindowFrameEnums::Swap(ASTWindowFrameEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTWindowFrameEnums::InternalSwap(ASTWindowFrameEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTWindowFrameEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTWindowFrameExprEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTWindowFrameExprEnums::ASTWindowFrameExprEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTWindowFrameExprEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTWindowFrameExprEnums)
}
ASTWindowFrameExprEnums::ASTWindowFrameExprEnums(const ASTWindowFrameExprEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTWindowFrameExprEnums)
}

void ASTWindowFrameExprEnums::SharedCtor() {
}

ASTWindowFrameExprEnums::~ASTWindowFrameExprEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTWindowFrameExprEnums)
  SharedDtor();
}

void ASTWindowFrameExprEnums::SharedDtor() {
}

void ASTWindowFrameExprEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTWindowFrameExprEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTWindowFrameExprEnums& ASTWindowFrameExprEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTWindowFrameExprEnums.base);
  return *internal_default_instance();
}


void ASTWindowFrameExprEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTWindowFrameExprEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTWindowFrameExprEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTWindowFrameExprEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTWindowFrameExprEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTWindowFrameExprEnums)
  return false;
#undef DO_
}

void ASTWindowFrameExprEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTWindowFrameExprEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTWindowFrameExprEnums)
}

::google::protobuf::uint8* ASTWindowFrameExprEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTWindowFrameExprEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTWindowFrameExprEnums)
  return target;
}

size_t ASTWindowFrameExprEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTWindowFrameExprEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTWindowFrameExprEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTWindowFrameExprEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTWindowFrameExprEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTWindowFrameExprEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTWindowFrameExprEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTWindowFrameExprEnums)
    MergeFrom(*source);
  }
}

void ASTWindowFrameExprEnums::MergeFrom(const ASTWindowFrameExprEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTWindowFrameExprEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTWindowFrameExprEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTWindowFrameExprEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTWindowFrameExprEnums::CopyFrom(const ASTWindowFrameExprEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTWindowFrameExprEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTWindowFrameExprEnums::IsInitialized() const {
  return true;
}

void ASTWindowFrameExprEnums::Swap(ASTWindowFrameExprEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTWindowFrameExprEnums::InternalSwap(ASTWindowFrameExprEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTWindowFrameExprEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTAnySomeAllOpEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTAnySomeAllOpEnums::ASTAnySomeAllOpEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTAnySomeAllOpEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTAnySomeAllOpEnums)
}
ASTAnySomeAllOpEnums::ASTAnySomeAllOpEnums(const ASTAnySomeAllOpEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTAnySomeAllOpEnums)
}

void ASTAnySomeAllOpEnums::SharedCtor() {
}

ASTAnySomeAllOpEnums::~ASTAnySomeAllOpEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTAnySomeAllOpEnums)
  SharedDtor();
}

void ASTAnySomeAllOpEnums::SharedDtor() {
}

void ASTAnySomeAllOpEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTAnySomeAllOpEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTAnySomeAllOpEnums& ASTAnySomeAllOpEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTAnySomeAllOpEnums.base);
  return *internal_default_instance();
}


void ASTAnySomeAllOpEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTAnySomeAllOpEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTAnySomeAllOpEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTAnySomeAllOpEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTAnySomeAllOpEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTAnySomeAllOpEnums)
  return false;
#undef DO_
}

void ASTAnySomeAllOpEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTAnySomeAllOpEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTAnySomeAllOpEnums)
}

::google::protobuf::uint8* ASTAnySomeAllOpEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTAnySomeAllOpEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTAnySomeAllOpEnums)
  return target;
}

size_t ASTAnySomeAllOpEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTAnySomeAllOpEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTAnySomeAllOpEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTAnySomeAllOpEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTAnySomeAllOpEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTAnySomeAllOpEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTAnySomeAllOpEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTAnySomeAllOpEnums)
    MergeFrom(*source);
  }
}

void ASTAnySomeAllOpEnums::MergeFrom(const ASTAnySomeAllOpEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTAnySomeAllOpEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTAnySomeAllOpEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTAnySomeAllOpEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTAnySomeAllOpEnums::CopyFrom(const ASTAnySomeAllOpEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTAnySomeAllOpEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTAnySomeAllOpEnums::IsInitialized() const {
  return true;
}

void ASTAnySomeAllOpEnums::Swap(ASTAnySomeAllOpEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTAnySomeAllOpEnums::InternalSwap(ASTAnySomeAllOpEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTAnySomeAllOpEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTTransactionReadWriteModeEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTTransactionReadWriteModeEnums::ASTTransactionReadWriteModeEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTTransactionReadWriteModeEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTTransactionReadWriteModeEnums)
}
ASTTransactionReadWriteModeEnums::ASTTransactionReadWriteModeEnums(const ASTTransactionReadWriteModeEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTTransactionReadWriteModeEnums)
}

void ASTTransactionReadWriteModeEnums::SharedCtor() {
}

ASTTransactionReadWriteModeEnums::~ASTTransactionReadWriteModeEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTTransactionReadWriteModeEnums)
  SharedDtor();
}

void ASTTransactionReadWriteModeEnums::SharedDtor() {
}

void ASTTransactionReadWriteModeEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTTransactionReadWriteModeEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTTransactionReadWriteModeEnums& ASTTransactionReadWriteModeEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTTransactionReadWriteModeEnums.base);
  return *internal_default_instance();
}


void ASTTransactionReadWriteModeEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTTransactionReadWriteModeEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTTransactionReadWriteModeEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTTransactionReadWriteModeEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTTransactionReadWriteModeEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTTransactionReadWriteModeEnums)
  return false;
#undef DO_
}

void ASTTransactionReadWriteModeEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTTransactionReadWriteModeEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTTransactionReadWriteModeEnums)
}

::google::protobuf::uint8* ASTTransactionReadWriteModeEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTTransactionReadWriteModeEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTTransactionReadWriteModeEnums)
  return target;
}

size_t ASTTransactionReadWriteModeEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTTransactionReadWriteModeEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTTransactionReadWriteModeEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTTransactionReadWriteModeEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTTransactionReadWriteModeEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTTransactionReadWriteModeEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTTransactionReadWriteModeEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTTransactionReadWriteModeEnums)
    MergeFrom(*source);
  }
}

void ASTTransactionReadWriteModeEnums::MergeFrom(const ASTTransactionReadWriteModeEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTTransactionReadWriteModeEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTTransactionReadWriteModeEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTTransactionReadWriteModeEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTTransactionReadWriteModeEnums::CopyFrom(const ASTTransactionReadWriteModeEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTTransactionReadWriteModeEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTTransactionReadWriteModeEnums::IsInitialized() const {
  return true;
}

void ASTTransactionReadWriteModeEnums::Swap(ASTTransactionReadWriteModeEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTTransactionReadWriteModeEnums::InternalSwap(ASTTransactionReadWriteModeEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTTransactionReadWriteModeEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTImportStatementEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTImportStatementEnums::ASTImportStatementEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTImportStatementEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTImportStatementEnums)
}
ASTImportStatementEnums::ASTImportStatementEnums(const ASTImportStatementEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTImportStatementEnums)
}

void ASTImportStatementEnums::SharedCtor() {
}

ASTImportStatementEnums::~ASTImportStatementEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTImportStatementEnums)
  SharedDtor();
}

void ASTImportStatementEnums::SharedDtor() {
}

void ASTImportStatementEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTImportStatementEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTImportStatementEnums& ASTImportStatementEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTImportStatementEnums.base);
  return *internal_default_instance();
}


void ASTImportStatementEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTImportStatementEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTImportStatementEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTImportStatementEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTImportStatementEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTImportStatementEnums)
  return false;
#undef DO_
}

void ASTImportStatementEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTImportStatementEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTImportStatementEnums)
}

::google::protobuf::uint8* ASTImportStatementEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTImportStatementEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTImportStatementEnums)
  return target;
}

size_t ASTImportStatementEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTImportStatementEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTImportStatementEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTImportStatementEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTImportStatementEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTImportStatementEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTImportStatementEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTImportStatementEnums)
    MergeFrom(*source);
  }
}

void ASTImportStatementEnums::MergeFrom(const ASTImportStatementEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTImportStatementEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTImportStatementEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTImportStatementEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTImportStatementEnums::CopyFrom(const ASTImportStatementEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTImportStatementEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTImportStatementEnums::IsInitialized() const {
  return true;
}

void ASTImportStatementEnums::Swap(ASTImportStatementEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTImportStatementEnums::InternalSwap(ASTImportStatementEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTImportStatementEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTUnpivotClauseEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTUnpivotClauseEnums::ASTUnpivotClauseEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTUnpivotClauseEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTUnpivotClauseEnums)
}
ASTUnpivotClauseEnums::ASTUnpivotClauseEnums(const ASTUnpivotClauseEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTUnpivotClauseEnums)
}

void ASTUnpivotClauseEnums::SharedCtor() {
}

ASTUnpivotClauseEnums::~ASTUnpivotClauseEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTUnpivotClauseEnums)
  SharedDtor();
}

void ASTUnpivotClauseEnums::SharedDtor() {
}

void ASTUnpivotClauseEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTUnpivotClauseEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTUnpivotClauseEnums& ASTUnpivotClauseEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTUnpivotClauseEnums.base);
  return *internal_default_instance();
}


void ASTUnpivotClauseEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTUnpivotClauseEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTUnpivotClauseEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTUnpivotClauseEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTUnpivotClauseEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTUnpivotClauseEnums)
  return false;
#undef DO_
}

void ASTUnpivotClauseEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTUnpivotClauseEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTUnpivotClauseEnums)
}

::google::protobuf::uint8* ASTUnpivotClauseEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTUnpivotClauseEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTUnpivotClauseEnums)
  return target;
}

size_t ASTUnpivotClauseEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTUnpivotClauseEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTUnpivotClauseEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTUnpivotClauseEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTUnpivotClauseEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTUnpivotClauseEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTUnpivotClauseEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTUnpivotClauseEnums)
    MergeFrom(*source);
  }
}

void ASTUnpivotClauseEnums::MergeFrom(const ASTUnpivotClauseEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTUnpivotClauseEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTUnpivotClauseEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTUnpivotClauseEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTUnpivotClauseEnums::CopyFrom(const ASTUnpivotClauseEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTUnpivotClauseEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTUnpivotClauseEnums::IsInitialized() const {
  return true;
}

void ASTUnpivotClauseEnums::Swap(ASTUnpivotClauseEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTUnpivotClauseEnums::InternalSwap(ASTUnpivotClauseEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTUnpivotClauseEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTCreateStatementEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTCreateStatementEnums::ASTCreateStatementEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTCreateStatementEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTCreateStatementEnums)
}
ASTCreateStatementEnums::ASTCreateStatementEnums(const ASTCreateStatementEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTCreateStatementEnums)
}

void ASTCreateStatementEnums::SharedCtor() {
}

ASTCreateStatementEnums::~ASTCreateStatementEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTCreateStatementEnums)
  SharedDtor();
}

void ASTCreateStatementEnums::SharedDtor() {
}

void ASTCreateStatementEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTCreateStatementEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTCreateStatementEnums& ASTCreateStatementEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTCreateStatementEnums.base);
  return *internal_default_instance();
}


void ASTCreateStatementEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTCreateStatementEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTCreateStatementEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTCreateStatementEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTCreateStatementEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTCreateStatementEnums)
  return false;
#undef DO_
}

void ASTCreateStatementEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTCreateStatementEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTCreateStatementEnums)
}

::google::protobuf::uint8* ASTCreateStatementEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTCreateStatementEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTCreateStatementEnums)
  return target;
}

size_t ASTCreateStatementEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTCreateStatementEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTCreateStatementEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTCreateStatementEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTCreateStatementEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTCreateStatementEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTCreateStatementEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTCreateStatementEnums)
    MergeFrom(*source);
  }
}

void ASTCreateStatementEnums::MergeFrom(const ASTCreateStatementEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTCreateStatementEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTCreateStatementEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTCreateStatementEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTCreateStatementEnums::CopyFrom(const ASTCreateStatementEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTCreateStatementEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTCreateStatementEnums::IsInitialized() const {
  return true;
}

void ASTCreateStatementEnums::Swap(ASTCreateStatementEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTCreateStatementEnums::InternalSwap(ASTCreateStatementEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTCreateStatementEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTFunctionParameterEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTFunctionParameterEnums::ASTFunctionParameterEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTFunctionParameterEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTFunctionParameterEnums)
}
ASTFunctionParameterEnums::ASTFunctionParameterEnums(const ASTFunctionParameterEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTFunctionParameterEnums)
}

void ASTFunctionParameterEnums::SharedCtor() {
}

ASTFunctionParameterEnums::~ASTFunctionParameterEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTFunctionParameterEnums)
  SharedDtor();
}

void ASTFunctionParameterEnums::SharedDtor() {
}

void ASTFunctionParameterEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTFunctionParameterEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTFunctionParameterEnums& ASTFunctionParameterEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTFunctionParameterEnums.base);
  return *internal_default_instance();
}


void ASTFunctionParameterEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTFunctionParameterEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTFunctionParameterEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTFunctionParameterEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTFunctionParameterEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTFunctionParameterEnums)
  return false;
#undef DO_
}

void ASTFunctionParameterEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTFunctionParameterEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTFunctionParameterEnums)
}

::google::protobuf::uint8* ASTFunctionParameterEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTFunctionParameterEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTFunctionParameterEnums)
  return target;
}

size_t ASTFunctionParameterEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTFunctionParameterEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTFunctionParameterEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTFunctionParameterEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTFunctionParameterEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTFunctionParameterEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTFunctionParameterEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTFunctionParameterEnums)
    MergeFrom(*source);
  }
}

void ASTFunctionParameterEnums::MergeFrom(const ASTFunctionParameterEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTFunctionParameterEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTFunctionParameterEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTFunctionParameterEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTFunctionParameterEnums::CopyFrom(const ASTFunctionParameterEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTFunctionParameterEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTFunctionParameterEnums::IsInitialized() const {
  return true;
}

void ASTFunctionParameterEnums::Swap(ASTFunctionParameterEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTFunctionParameterEnums::InternalSwap(ASTFunctionParameterEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTFunctionParameterEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTTemplatedParameterTypeEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTTemplatedParameterTypeEnums::ASTTemplatedParameterTypeEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTTemplatedParameterTypeEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTTemplatedParameterTypeEnums)
}
ASTTemplatedParameterTypeEnums::ASTTemplatedParameterTypeEnums(const ASTTemplatedParameterTypeEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTTemplatedParameterTypeEnums)
}

void ASTTemplatedParameterTypeEnums::SharedCtor() {
}

ASTTemplatedParameterTypeEnums::~ASTTemplatedParameterTypeEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTTemplatedParameterTypeEnums)
  SharedDtor();
}

void ASTTemplatedParameterTypeEnums::SharedDtor() {
}

void ASTTemplatedParameterTypeEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTTemplatedParameterTypeEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTTemplatedParameterTypeEnums& ASTTemplatedParameterTypeEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTTemplatedParameterTypeEnums.base);
  return *internal_default_instance();
}


void ASTTemplatedParameterTypeEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTTemplatedParameterTypeEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTTemplatedParameterTypeEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTTemplatedParameterTypeEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTTemplatedParameterTypeEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTTemplatedParameterTypeEnums)
  return false;
#undef DO_
}

void ASTTemplatedParameterTypeEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTTemplatedParameterTypeEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTTemplatedParameterTypeEnums)
}

::google::protobuf::uint8* ASTTemplatedParameterTypeEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTTemplatedParameterTypeEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTTemplatedParameterTypeEnums)
  return target;
}

size_t ASTTemplatedParameterTypeEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTTemplatedParameterTypeEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTTemplatedParameterTypeEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTTemplatedParameterTypeEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTTemplatedParameterTypeEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTTemplatedParameterTypeEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTTemplatedParameterTypeEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTTemplatedParameterTypeEnums)
    MergeFrom(*source);
  }
}

void ASTTemplatedParameterTypeEnums::MergeFrom(const ASTTemplatedParameterTypeEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTTemplatedParameterTypeEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTTemplatedParameterTypeEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTTemplatedParameterTypeEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTTemplatedParameterTypeEnums::CopyFrom(const ASTTemplatedParameterTypeEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTTemplatedParameterTypeEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTTemplatedParameterTypeEnums::IsInitialized() const {
  return true;
}

void ASTTemplatedParameterTypeEnums::Swap(ASTTemplatedParameterTypeEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTTemplatedParameterTypeEnums::InternalSwap(ASTTemplatedParameterTypeEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTTemplatedParameterTypeEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTGeneratedColumnInfoEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTGeneratedColumnInfoEnums::ASTGeneratedColumnInfoEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTGeneratedColumnInfoEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTGeneratedColumnInfoEnums)
}
ASTGeneratedColumnInfoEnums::ASTGeneratedColumnInfoEnums(const ASTGeneratedColumnInfoEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTGeneratedColumnInfoEnums)
}

void ASTGeneratedColumnInfoEnums::SharedCtor() {
}

ASTGeneratedColumnInfoEnums::~ASTGeneratedColumnInfoEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTGeneratedColumnInfoEnums)
  SharedDtor();
}

void ASTGeneratedColumnInfoEnums::SharedDtor() {
}

void ASTGeneratedColumnInfoEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTGeneratedColumnInfoEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTGeneratedColumnInfoEnums& ASTGeneratedColumnInfoEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTGeneratedColumnInfoEnums.base);
  return *internal_default_instance();
}


void ASTGeneratedColumnInfoEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTGeneratedColumnInfoEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTGeneratedColumnInfoEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTGeneratedColumnInfoEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTGeneratedColumnInfoEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTGeneratedColumnInfoEnums)
  return false;
#undef DO_
}

void ASTGeneratedColumnInfoEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTGeneratedColumnInfoEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTGeneratedColumnInfoEnums)
}

::google::protobuf::uint8* ASTGeneratedColumnInfoEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTGeneratedColumnInfoEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTGeneratedColumnInfoEnums)
  return target;
}

size_t ASTGeneratedColumnInfoEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTGeneratedColumnInfoEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTGeneratedColumnInfoEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTGeneratedColumnInfoEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTGeneratedColumnInfoEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTGeneratedColumnInfoEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTGeneratedColumnInfoEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTGeneratedColumnInfoEnums)
    MergeFrom(*source);
  }
}

void ASTGeneratedColumnInfoEnums::MergeFrom(const ASTGeneratedColumnInfoEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTGeneratedColumnInfoEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTGeneratedColumnInfoEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTGeneratedColumnInfoEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTGeneratedColumnInfoEnums::CopyFrom(const ASTGeneratedColumnInfoEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTGeneratedColumnInfoEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTGeneratedColumnInfoEnums::IsInitialized() const {
  return true;
}

void ASTGeneratedColumnInfoEnums::Swap(ASTGeneratedColumnInfoEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTGeneratedColumnInfoEnums::InternalSwap(ASTGeneratedColumnInfoEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTGeneratedColumnInfoEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTColumnPositionEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTColumnPositionEnums::ASTColumnPositionEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTColumnPositionEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTColumnPositionEnums)
}
ASTColumnPositionEnums::ASTColumnPositionEnums(const ASTColumnPositionEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTColumnPositionEnums)
}

void ASTColumnPositionEnums::SharedCtor() {
}

ASTColumnPositionEnums::~ASTColumnPositionEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTColumnPositionEnums)
  SharedDtor();
}

void ASTColumnPositionEnums::SharedDtor() {
}

void ASTColumnPositionEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTColumnPositionEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTColumnPositionEnums& ASTColumnPositionEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTColumnPositionEnums.base);
  return *internal_default_instance();
}


void ASTColumnPositionEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTColumnPositionEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTColumnPositionEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTColumnPositionEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTColumnPositionEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTColumnPositionEnums)
  return false;
#undef DO_
}

void ASTColumnPositionEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTColumnPositionEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTColumnPositionEnums)
}

::google::protobuf::uint8* ASTColumnPositionEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTColumnPositionEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTColumnPositionEnums)
  return target;
}

size_t ASTColumnPositionEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTColumnPositionEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTColumnPositionEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTColumnPositionEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTColumnPositionEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTColumnPositionEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTColumnPositionEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTColumnPositionEnums)
    MergeFrom(*source);
  }
}

void ASTColumnPositionEnums::MergeFrom(const ASTColumnPositionEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTColumnPositionEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTColumnPositionEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTColumnPositionEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTColumnPositionEnums::CopyFrom(const ASTColumnPositionEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTColumnPositionEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTColumnPositionEnums::IsInitialized() const {
  return true;
}

void ASTColumnPositionEnums::Swap(ASTColumnPositionEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTColumnPositionEnums::InternalSwap(ASTColumnPositionEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTColumnPositionEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTInsertStatementEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTInsertStatementEnums::ASTInsertStatementEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTInsertStatementEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTInsertStatementEnums)
}
ASTInsertStatementEnums::ASTInsertStatementEnums(const ASTInsertStatementEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTInsertStatementEnums)
}

void ASTInsertStatementEnums::SharedCtor() {
}

ASTInsertStatementEnums::~ASTInsertStatementEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTInsertStatementEnums)
  SharedDtor();
}

void ASTInsertStatementEnums::SharedDtor() {
}

void ASTInsertStatementEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTInsertStatementEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTInsertStatementEnums& ASTInsertStatementEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTInsertStatementEnums.base);
  return *internal_default_instance();
}


void ASTInsertStatementEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTInsertStatementEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTInsertStatementEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTInsertStatementEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTInsertStatementEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTInsertStatementEnums)
  return false;
#undef DO_
}

void ASTInsertStatementEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTInsertStatementEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTInsertStatementEnums)
}

::google::protobuf::uint8* ASTInsertStatementEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTInsertStatementEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTInsertStatementEnums)
  return target;
}

size_t ASTInsertStatementEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTInsertStatementEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTInsertStatementEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTInsertStatementEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTInsertStatementEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTInsertStatementEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTInsertStatementEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTInsertStatementEnums)
    MergeFrom(*source);
  }
}

void ASTInsertStatementEnums::MergeFrom(const ASTInsertStatementEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTInsertStatementEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTInsertStatementEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTInsertStatementEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTInsertStatementEnums::CopyFrom(const ASTInsertStatementEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTInsertStatementEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTInsertStatementEnums::IsInitialized() const {
  return true;
}

void ASTInsertStatementEnums::Swap(ASTInsertStatementEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTInsertStatementEnums::InternalSwap(ASTInsertStatementEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTInsertStatementEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTMergeActionEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTMergeActionEnums::ASTMergeActionEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTMergeActionEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTMergeActionEnums)
}
ASTMergeActionEnums::ASTMergeActionEnums(const ASTMergeActionEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTMergeActionEnums)
}

void ASTMergeActionEnums::SharedCtor() {
}

ASTMergeActionEnums::~ASTMergeActionEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTMergeActionEnums)
  SharedDtor();
}

void ASTMergeActionEnums::SharedDtor() {
}

void ASTMergeActionEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTMergeActionEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTMergeActionEnums& ASTMergeActionEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTMergeActionEnums.base);
  return *internal_default_instance();
}


void ASTMergeActionEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTMergeActionEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTMergeActionEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTMergeActionEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTMergeActionEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTMergeActionEnums)
  return false;
#undef DO_
}

void ASTMergeActionEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTMergeActionEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTMergeActionEnums)
}

::google::protobuf::uint8* ASTMergeActionEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTMergeActionEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTMergeActionEnums)
  return target;
}

size_t ASTMergeActionEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTMergeActionEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTMergeActionEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTMergeActionEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTMergeActionEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTMergeActionEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTMergeActionEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTMergeActionEnums)
    MergeFrom(*source);
  }
}

void ASTMergeActionEnums::MergeFrom(const ASTMergeActionEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTMergeActionEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTMergeActionEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTMergeActionEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTMergeActionEnums::CopyFrom(const ASTMergeActionEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTMergeActionEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTMergeActionEnums::IsInitialized() const {
  return true;
}

void ASTMergeActionEnums::Swap(ASTMergeActionEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTMergeActionEnums::InternalSwap(ASTMergeActionEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTMergeActionEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTMergeWhenClauseEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTMergeWhenClauseEnums::ASTMergeWhenClauseEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTMergeWhenClauseEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTMergeWhenClauseEnums)
}
ASTMergeWhenClauseEnums::ASTMergeWhenClauseEnums(const ASTMergeWhenClauseEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTMergeWhenClauseEnums)
}

void ASTMergeWhenClauseEnums::SharedCtor() {
}

ASTMergeWhenClauseEnums::~ASTMergeWhenClauseEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTMergeWhenClauseEnums)
  SharedDtor();
}

void ASTMergeWhenClauseEnums::SharedDtor() {
}

void ASTMergeWhenClauseEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTMergeWhenClauseEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTMergeWhenClauseEnums& ASTMergeWhenClauseEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTMergeWhenClauseEnums.base);
  return *internal_default_instance();
}


void ASTMergeWhenClauseEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTMergeWhenClauseEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTMergeWhenClauseEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTMergeWhenClauseEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTMergeWhenClauseEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTMergeWhenClauseEnums)
  return false;
#undef DO_
}

void ASTMergeWhenClauseEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTMergeWhenClauseEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTMergeWhenClauseEnums)
}

::google::protobuf::uint8* ASTMergeWhenClauseEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTMergeWhenClauseEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTMergeWhenClauseEnums)
  return target;
}

size_t ASTMergeWhenClauseEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTMergeWhenClauseEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTMergeWhenClauseEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTMergeWhenClauseEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTMergeWhenClauseEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTMergeWhenClauseEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTMergeWhenClauseEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTMergeWhenClauseEnums)
    MergeFrom(*source);
  }
}

void ASTMergeWhenClauseEnums::MergeFrom(const ASTMergeWhenClauseEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTMergeWhenClauseEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTMergeWhenClauseEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTMergeWhenClauseEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTMergeWhenClauseEnums::CopyFrom(const ASTMergeWhenClauseEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTMergeWhenClauseEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTMergeWhenClauseEnums::IsInitialized() const {
  return true;
}

void ASTMergeWhenClauseEnums::Swap(ASTMergeWhenClauseEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTMergeWhenClauseEnums::InternalSwap(ASTMergeWhenClauseEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTMergeWhenClauseEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTFilterFieldsArgEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTFilterFieldsArgEnums::ASTFilterFieldsArgEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTFilterFieldsArgEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTFilterFieldsArgEnums)
}
ASTFilterFieldsArgEnums::ASTFilterFieldsArgEnums(const ASTFilterFieldsArgEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTFilterFieldsArgEnums)
}

void ASTFilterFieldsArgEnums::SharedCtor() {
}

ASTFilterFieldsArgEnums::~ASTFilterFieldsArgEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTFilterFieldsArgEnums)
  SharedDtor();
}

void ASTFilterFieldsArgEnums::SharedDtor() {
}

void ASTFilterFieldsArgEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTFilterFieldsArgEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTFilterFieldsArgEnums& ASTFilterFieldsArgEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTFilterFieldsArgEnums.base);
  return *internal_default_instance();
}


void ASTFilterFieldsArgEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTFilterFieldsArgEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTFilterFieldsArgEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTFilterFieldsArgEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTFilterFieldsArgEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTFilterFieldsArgEnums)
  return false;
#undef DO_
}

void ASTFilterFieldsArgEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTFilterFieldsArgEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTFilterFieldsArgEnums)
}

::google::protobuf::uint8* ASTFilterFieldsArgEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTFilterFieldsArgEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTFilterFieldsArgEnums)
  return target;
}

size_t ASTFilterFieldsArgEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTFilterFieldsArgEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTFilterFieldsArgEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTFilterFieldsArgEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTFilterFieldsArgEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTFilterFieldsArgEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTFilterFieldsArgEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTFilterFieldsArgEnums)
    MergeFrom(*source);
  }
}

void ASTFilterFieldsArgEnums::MergeFrom(const ASTFilterFieldsArgEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTFilterFieldsArgEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTFilterFieldsArgEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTFilterFieldsArgEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTFilterFieldsArgEnums::CopyFrom(const ASTFilterFieldsArgEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTFilterFieldsArgEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTFilterFieldsArgEnums::IsInitialized() const {
  return true;
}

void ASTFilterFieldsArgEnums::Swap(ASTFilterFieldsArgEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTFilterFieldsArgEnums::InternalSwap(ASTFilterFieldsArgEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTFilterFieldsArgEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTSampleSizeEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTSampleSizeEnums::ASTSampleSizeEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTSampleSizeEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTSampleSizeEnums)
}
ASTSampleSizeEnums::ASTSampleSizeEnums(const ASTSampleSizeEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTSampleSizeEnums)
}

void ASTSampleSizeEnums::SharedCtor() {
}

ASTSampleSizeEnums::~ASTSampleSizeEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTSampleSizeEnums)
  SharedDtor();
}

void ASTSampleSizeEnums::SharedDtor() {
}

void ASTSampleSizeEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTSampleSizeEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTSampleSizeEnums& ASTSampleSizeEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTSampleSizeEnums.base);
  return *internal_default_instance();
}


void ASTSampleSizeEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTSampleSizeEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTSampleSizeEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTSampleSizeEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTSampleSizeEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTSampleSizeEnums)
  return false;
#undef DO_
}

void ASTSampleSizeEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTSampleSizeEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTSampleSizeEnums)
}

::google::protobuf::uint8* ASTSampleSizeEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTSampleSizeEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTSampleSizeEnums)
  return target;
}

size_t ASTSampleSizeEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTSampleSizeEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTSampleSizeEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTSampleSizeEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTSampleSizeEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTSampleSizeEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTSampleSizeEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTSampleSizeEnums)
    MergeFrom(*source);
  }
}

void ASTSampleSizeEnums::MergeFrom(const ASTSampleSizeEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTSampleSizeEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTSampleSizeEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTSampleSizeEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTSampleSizeEnums::CopyFrom(const ASTSampleSizeEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTSampleSizeEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTSampleSizeEnums::IsInitialized() const {
  return true;
}

void ASTSampleSizeEnums::Swap(ASTSampleSizeEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTSampleSizeEnums::InternalSwap(ASTSampleSizeEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTSampleSizeEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTForeignKeyActionsEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTForeignKeyActionsEnums::ASTForeignKeyActionsEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTForeignKeyActionsEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTForeignKeyActionsEnums)
}
ASTForeignKeyActionsEnums::ASTForeignKeyActionsEnums(const ASTForeignKeyActionsEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTForeignKeyActionsEnums)
}

void ASTForeignKeyActionsEnums::SharedCtor() {
}

ASTForeignKeyActionsEnums::~ASTForeignKeyActionsEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTForeignKeyActionsEnums)
  SharedDtor();
}

void ASTForeignKeyActionsEnums::SharedDtor() {
}

void ASTForeignKeyActionsEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTForeignKeyActionsEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTForeignKeyActionsEnums& ASTForeignKeyActionsEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTForeignKeyActionsEnums.base);
  return *internal_default_instance();
}


void ASTForeignKeyActionsEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTForeignKeyActionsEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTForeignKeyActionsEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTForeignKeyActionsEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTForeignKeyActionsEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTForeignKeyActionsEnums)
  return false;
#undef DO_
}

void ASTForeignKeyActionsEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTForeignKeyActionsEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTForeignKeyActionsEnums)
}

::google::protobuf::uint8* ASTForeignKeyActionsEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTForeignKeyActionsEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTForeignKeyActionsEnums)
  return target;
}

size_t ASTForeignKeyActionsEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTForeignKeyActionsEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTForeignKeyActionsEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTForeignKeyActionsEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTForeignKeyActionsEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTForeignKeyActionsEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTForeignKeyActionsEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTForeignKeyActionsEnums)
    MergeFrom(*source);
  }
}

void ASTForeignKeyActionsEnums::MergeFrom(const ASTForeignKeyActionsEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTForeignKeyActionsEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTForeignKeyActionsEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTForeignKeyActionsEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTForeignKeyActionsEnums::CopyFrom(const ASTForeignKeyActionsEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTForeignKeyActionsEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTForeignKeyActionsEnums::IsInitialized() const {
  return true;
}

void ASTForeignKeyActionsEnums::Swap(ASTForeignKeyActionsEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTForeignKeyActionsEnums::InternalSwap(ASTForeignKeyActionsEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTForeignKeyActionsEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTForeignKeyReferenceEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTForeignKeyReferenceEnums::ASTForeignKeyReferenceEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTForeignKeyReferenceEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTForeignKeyReferenceEnums)
}
ASTForeignKeyReferenceEnums::ASTForeignKeyReferenceEnums(const ASTForeignKeyReferenceEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTForeignKeyReferenceEnums)
}

void ASTForeignKeyReferenceEnums::SharedCtor() {
}

ASTForeignKeyReferenceEnums::~ASTForeignKeyReferenceEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTForeignKeyReferenceEnums)
  SharedDtor();
}

void ASTForeignKeyReferenceEnums::SharedDtor() {
}

void ASTForeignKeyReferenceEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTForeignKeyReferenceEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTForeignKeyReferenceEnums& ASTForeignKeyReferenceEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTForeignKeyReferenceEnums.base);
  return *internal_default_instance();
}


void ASTForeignKeyReferenceEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTForeignKeyReferenceEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTForeignKeyReferenceEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTForeignKeyReferenceEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTForeignKeyReferenceEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTForeignKeyReferenceEnums)
  return false;
#undef DO_
}

void ASTForeignKeyReferenceEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTForeignKeyReferenceEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTForeignKeyReferenceEnums)
}

::google::protobuf::uint8* ASTForeignKeyReferenceEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTForeignKeyReferenceEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTForeignKeyReferenceEnums)
  return target;
}

size_t ASTForeignKeyReferenceEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTForeignKeyReferenceEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTForeignKeyReferenceEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTForeignKeyReferenceEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTForeignKeyReferenceEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTForeignKeyReferenceEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTForeignKeyReferenceEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTForeignKeyReferenceEnums)
    MergeFrom(*source);
  }
}

void ASTForeignKeyReferenceEnums::MergeFrom(const ASTForeignKeyReferenceEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTForeignKeyReferenceEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTForeignKeyReferenceEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTForeignKeyReferenceEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTForeignKeyReferenceEnums::CopyFrom(const ASTForeignKeyReferenceEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTForeignKeyReferenceEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTForeignKeyReferenceEnums::IsInitialized() const {
  return true;
}

void ASTForeignKeyReferenceEnums::Swap(ASTForeignKeyReferenceEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTForeignKeyReferenceEnums::InternalSwap(ASTForeignKeyReferenceEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTForeignKeyReferenceEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTBreakContinueStatementEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTBreakContinueStatementEnums::ASTBreakContinueStatementEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTBreakContinueStatementEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTBreakContinueStatementEnums)
}
ASTBreakContinueStatementEnums::ASTBreakContinueStatementEnums(const ASTBreakContinueStatementEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTBreakContinueStatementEnums)
}

void ASTBreakContinueStatementEnums::SharedCtor() {
}

ASTBreakContinueStatementEnums::~ASTBreakContinueStatementEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTBreakContinueStatementEnums)
  SharedDtor();
}

void ASTBreakContinueStatementEnums::SharedDtor() {
}

void ASTBreakContinueStatementEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTBreakContinueStatementEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTBreakContinueStatementEnums& ASTBreakContinueStatementEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTBreakContinueStatementEnums.base);
  return *internal_default_instance();
}


void ASTBreakContinueStatementEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTBreakContinueStatementEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTBreakContinueStatementEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTBreakContinueStatementEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTBreakContinueStatementEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTBreakContinueStatementEnums)
  return false;
#undef DO_
}

void ASTBreakContinueStatementEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTBreakContinueStatementEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTBreakContinueStatementEnums)
}

::google::protobuf::uint8* ASTBreakContinueStatementEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTBreakContinueStatementEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTBreakContinueStatementEnums)
  return target;
}

size_t ASTBreakContinueStatementEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTBreakContinueStatementEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTBreakContinueStatementEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTBreakContinueStatementEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTBreakContinueStatementEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTBreakContinueStatementEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTBreakContinueStatementEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTBreakContinueStatementEnums)
    MergeFrom(*source);
  }
}

void ASTBreakContinueStatementEnums::MergeFrom(const ASTBreakContinueStatementEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTBreakContinueStatementEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTBreakContinueStatementEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTBreakContinueStatementEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTBreakContinueStatementEnums::CopyFrom(const ASTBreakContinueStatementEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTBreakContinueStatementEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTBreakContinueStatementEnums::IsInitialized() const {
  return true;
}

void ASTBreakContinueStatementEnums::Swap(ASTBreakContinueStatementEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTBreakContinueStatementEnums::InternalSwap(ASTBreakContinueStatementEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTBreakContinueStatementEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTDropStatementEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTDropStatementEnums::ASTDropStatementEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTDropStatementEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTDropStatementEnums)
}
ASTDropStatementEnums::ASTDropStatementEnums(const ASTDropStatementEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTDropStatementEnums)
}

void ASTDropStatementEnums::SharedCtor() {
}

ASTDropStatementEnums::~ASTDropStatementEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTDropStatementEnums)
  SharedDtor();
}

void ASTDropStatementEnums::SharedDtor() {
}

void ASTDropStatementEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTDropStatementEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTDropStatementEnums& ASTDropStatementEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTDropStatementEnums.base);
  return *internal_default_instance();
}


void ASTDropStatementEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTDropStatementEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTDropStatementEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTDropStatementEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTDropStatementEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTDropStatementEnums)
  return false;
#undef DO_
}

void ASTDropStatementEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTDropStatementEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTDropStatementEnums)
}

::google::protobuf::uint8* ASTDropStatementEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTDropStatementEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTDropStatementEnums)
  return target;
}

size_t ASTDropStatementEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTDropStatementEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTDropStatementEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTDropStatementEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTDropStatementEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTDropStatementEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTDropStatementEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTDropStatementEnums)
    MergeFrom(*source);
  }
}

void ASTDropStatementEnums::MergeFrom(const ASTDropStatementEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTDropStatementEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTDropStatementEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTDropStatementEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTDropStatementEnums::CopyFrom(const ASTDropStatementEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTDropStatementEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTDropStatementEnums::IsInitialized() const {
  return true;
}

void ASTDropStatementEnums::Swap(ASTDropStatementEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTDropStatementEnums::InternalSwap(ASTDropStatementEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTDropStatementEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTCreateFunctionStmtBaseEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTCreateFunctionStmtBaseEnums::ASTCreateFunctionStmtBaseEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTCreateFunctionStmtBaseEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTCreateFunctionStmtBaseEnums)
}
ASTCreateFunctionStmtBaseEnums::ASTCreateFunctionStmtBaseEnums(const ASTCreateFunctionStmtBaseEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTCreateFunctionStmtBaseEnums)
}

void ASTCreateFunctionStmtBaseEnums::SharedCtor() {
}

ASTCreateFunctionStmtBaseEnums::~ASTCreateFunctionStmtBaseEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTCreateFunctionStmtBaseEnums)
  SharedDtor();
}

void ASTCreateFunctionStmtBaseEnums::SharedDtor() {
}

void ASTCreateFunctionStmtBaseEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTCreateFunctionStmtBaseEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTCreateFunctionStmtBaseEnums& ASTCreateFunctionStmtBaseEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTCreateFunctionStmtBaseEnums.base);
  return *internal_default_instance();
}


void ASTCreateFunctionStmtBaseEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTCreateFunctionStmtBaseEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTCreateFunctionStmtBaseEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTCreateFunctionStmtBaseEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTCreateFunctionStmtBaseEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTCreateFunctionStmtBaseEnums)
  return false;
#undef DO_
}

void ASTCreateFunctionStmtBaseEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTCreateFunctionStmtBaseEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTCreateFunctionStmtBaseEnums)
}

::google::protobuf::uint8* ASTCreateFunctionStmtBaseEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTCreateFunctionStmtBaseEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTCreateFunctionStmtBaseEnums)
  return target;
}

size_t ASTCreateFunctionStmtBaseEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTCreateFunctionStmtBaseEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTCreateFunctionStmtBaseEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTCreateFunctionStmtBaseEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTCreateFunctionStmtBaseEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTCreateFunctionStmtBaseEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTCreateFunctionStmtBaseEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTCreateFunctionStmtBaseEnums)
    MergeFrom(*source);
  }
}

void ASTCreateFunctionStmtBaseEnums::MergeFrom(const ASTCreateFunctionStmtBaseEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTCreateFunctionStmtBaseEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTCreateFunctionStmtBaseEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTCreateFunctionStmtBaseEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTCreateFunctionStmtBaseEnums::CopyFrom(const ASTCreateFunctionStmtBaseEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTCreateFunctionStmtBaseEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTCreateFunctionStmtBaseEnums::IsInitialized() const {
  return true;
}

void ASTCreateFunctionStmtBaseEnums::Swap(ASTCreateFunctionStmtBaseEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTCreateFunctionStmtBaseEnums::InternalSwap(ASTCreateFunctionStmtBaseEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTCreateFunctionStmtBaseEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ASTAuxLoadDataStatementEnums::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASTAuxLoadDataStatementEnums::ASTAuxLoadDataStatementEnums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTAuxLoadDataStatementEnums.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ASTAuxLoadDataStatementEnums)
}
ASTAuxLoadDataStatementEnums::ASTAuxLoadDataStatementEnums(const ASTAuxLoadDataStatementEnums& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ASTAuxLoadDataStatementEnums)
}

void ASTAuxLoadDataStatementEnums::SharedCtor() {
}

ASTAuxLoadDataStatementEnums::~ASTAuxLoadDataStatementEnums() {
  // @@protoc_insertion_point(destructor:zetasql.ASTAuxLoadDataStatementEnums)
  SharedDtor();
}

void ASTAuxLoadDataStatementEnums::SharedDtor() {
}

void ASTAuxLoadDataStatementEnums::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ASTAuxLoadDataStatementEnums::descriptor() {
  ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ASTAuxLoadDataStatementEnums& ASTAuxLoadDataStatementEnums::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fparser_2fast_5fenums_2eproto::scc_info_ASTAuxLoadDataStatementEnums.base);
  return *internal_default_instance();
}


void ASTAuxLoadDataStatementEnums::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ASTAuxLoadDataStatementEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ASTAuxLoadDataStatementEnums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ASTAuxLoadDataStatementEnums)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ASTAuxLoadDataStatementEnums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ASTAuxLoadDataStatementEnums)
  return false;
#undef DO_
}

void ASTAuxLoadDataStatementEnums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ASTAuxLoadDataStatementEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ASTAuxLoadDataStatementEnums)
}

::google::protobuf::uint8* ASTAuxLoadDataStatementEnums::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ASTAuxLoadDataStatementEnums)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ASTAuxLoadDataStatementEnums)
  return target;
}

size_t ASTAuxLoadDataStatementEnums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ASTAuxLoadDataStatementEnums)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTAuxLoadDataStatementEnums::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ASTAuxLoadDataStatementEnums)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTAuxLoadDataStatementEnums* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASTAuxLoadDataStatementEnums>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ASTAuxLoadDataStatementEnums)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ASTAuxLoadDataStatementEnums)
    MergeFrom(*source);
  }
}

void ASTAuxLoadDataStatementEnums::MergeFrom(const ASTAuxLoadDataStatementEnums& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ASTAuxLoadDataStatementEnums)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ASTAuxLoadDataStatementEnums::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ASTAuxLoadDataStatementEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTAuxLoadDataStatementEnums::CopyFrom(const ASTAuxLoadDataStatementEnums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ASTAuxLoadDataStatementEnums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTAuxLoadDataStatementEnums::IsInitialized() const {
  return true;
}

void ASTAuxLoadDataStatementEnums::Swap(ASTAuxLoadDataStatementEnums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASTAuxLoadDataStatementEnums::InternalSwap(ASTAuxLoadDataStatementEnums* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ASTAuxLoadDataStatementEnums::GetMetadata() const {
  protobuf_zetasql_2fparser_2fast_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fparser_2fast_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace zetasql
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTBinaryExpressionEnums* Arena::CreateMaybeMessage< ::zetasql::ASTBinaryExpressionEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTBinaryExpressionEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTOrderingExpressionEnums* Arena::CreateMaybeMessage< ::zetasql::ASTOrderingExpressionEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTOrderingExpressionEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTJoinEnums* Arena::CreateMaybeMessage< ::zetasql::ASTJoinEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTJoinEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTSelectAsEnums* Arena::CreateMaybeMessage< ::zetasql::ASTSelectAsEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTSelectAsEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTFunctionCallEnums* Arena::CreateMaybeMessage< ::zetasql::ASTFunctionCallEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTFunctionCallEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTExpressionSubqueryEnums* Arena::CreateMaybeMessage< ::zetasql::ASTExpressionSubqueryEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTExpressionSubqueryEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTHavingModifierEnums* Arena::CreateMaybeMessage< ::zetasql::ASTHavingModifierEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTHavingModifierEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTSetOperationEnums* Arena::CreateMaybeMessage< ::zetasql::ASTSetOperationEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTSetOperationEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTUnaryExpressionEnums* Arena::CreateMaybeMessage< ::zetasql::ASTUnaryExpressionEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTUnaryExpressionEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTWindowFrameEnums* Arena::CreateMaybeMessage< ::zetasql::ASTWindowFrameEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTWindowFrameEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTWindowFrameExprEnums* Arena::CreateMaybeMessage< ::zetasql::ASTWindowFrameExprEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTWindowFrameExprEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTAnySomeAllOpEnums* Arena::CreateMaybeMessage< ::zetasql::ASTAnySomeAllOpEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTAnySomeAllOpEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTTransactionReadWriteModeEnums* Arena::CreateMaybeMessage< ::zetasql::ASTTransactionReadWriteModeEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTTransactionReadWriteModeEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTImportStatementEnums* Arena::CreateMaybeMessage< ::zetasql::ASTImportStatementEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTImportStatementEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTUnpivotClauseEnums* Arena::CreateMaybeMessage< ::zetasql::ASTUnpivotClauseEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTUnpivotClauseEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTCreateStatementEnums* Arena::CreateMaybeMessage< ::zetasql::ASTCreateStatementEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTCreateStatementEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTFunctionParameterEnums* Arena::CreateMaybeMessage< ::zetasql::ASTFunctionParameterEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTFunctionParameterEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTTemplatedParameterTypeEnums* Arena::CreateMaybeMessage< ::zetasql::ASTTemplatedParameterTypeEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTTemplatedParameterTypeEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTGeneratedColumnInfoEnums* Arena::CreateMaybeMessage< ::zetasql::ASTGeneratedColumnInfoEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTGeneratedColumnInfoEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTColumnPositionEnums* Arena::CreateMaybeMessage< ::zetasql::ASTColumnPositionEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTColumnPositionEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTInsertStatementEnums* Arena::CreateMaybeMessage< ::zetasql::ASTInsertStatementEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTInsertStatementEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTMergeActionEnums* Arena::CreateMaybeMessage< ::zetasql::ASTMergeActionEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTMergeActionEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTMergeWhenClauseEnums* Arena::CreateMaybeMessage< ::zetasql::ASTMergeWhenClauseEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTMergeWhenClauseEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTFilterFieldsArgEnums* Arena::CreateMaybeMessage< ::zetasql::ASTFilterFieldsArgEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTFilterFieldsArgEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTSampleSizeEnums* Arena::CreateMaybeMessage< ::zetasql::ASTSampleSizeEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTSampleSizeEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTForeignKeyActionsEnums* Arena::CreateMaybeMessage< ::zetasql::ASTForeignKeyActionsEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTForeignKeyActionsEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTForeignKeyReferenceEnums* Arena::CreateMaybeMessage< ::zetasql::ASTForeignKeyReferenceEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTForeignKeyReferenceEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTBreakContinueStatementEnums* Arena::CreateMaybeMessage< ::zetasql::ASTBreakContinueStatementEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTBreakContinueStatementEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTDropStatementEnums* Arena::CreateMaybeMessage< ::zetasql::ASTDropStatementEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTDropStatementEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTCreateFunctionStmtBaseEnums* Arena::CreateMaybeMessage< ::zetasql::ASTCreateFunctionStmtBaseEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTCreateFunctionStmtBaseEnums >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ASTAuxLoadDataStatementEnums* Arena::CreateMaybeMessage< ::zetasql::ASTAuxLoadDataStatementEnums >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ASTAuxLoadDataStatementEnums >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
