// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/proto/options.proto

#ifndef PROTOBUF_INCLUDED_zetasql_2fproto_2foptions_2eproto
#define PROTOBUF_INCLUDED_zetasql_2fproto_2foptions_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "zetasql/public/builtin_function.pb.h"
#include "zetasql/public/options.pb.h"
#include "zetasql/public/type.pb.h"
#include "zetasql/resolved_ast/resolved_node_kind.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_zetasql_2fproto_2foptions_2eproto 

namespace protobuf_zetasql_2fproto_2foptions_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_zetasql_2fproto_2foptions_2eproto
namespace zetasql {
class AllowedHintsAndOptionsProto;
class AllowedHintsAndOptionsProtoDefaultTypeInternal;
extern AllowedHintsAndOptionsProtoDefaultTypeInternal _AllowedHintsAndOptionsProto_default_instance_;
class AllowedHintsAndOptionsProto_HintProto;
class AllowedHintsAndOptionsProto_HintProtoDefaultTypeInternal;
extern AllowedHintsAndOptionsProto_HintProtoDefaultTypeInternal _AllowedHintsAndOptionsProto_HintProto_default_instance_;
class AllowedHintsAndOptionsProto_OptionProto;
class AllowedHintsAndOptionsProto_OptionProtoDefaultTypeInternal;
extern AllowedHintsAndOptionsProto_OptionProtoDefaultTypeInternal _AllowedHintsAndOptionsProto_OptionProto_default_instance_;
class AnalyzerOptionsProto;
class AnalyzerOptionsProtoDefaultTypeInternal;
extern AnalyzerOptionsProtoDefaultTypeInternal _AnalyzerOptionsProto_default_instance_;
class AnalyzerOptionsProto_QueryParameterProto;
class AnalyzerOptionsProto_QueryParameterProtoDefaultTypeInternal;
extern AnalyzerOptionsProto_QueryParameterProtoDefaultTypeInternal _AnalyzerOptionsProto_QueryParameterProto_default_instance_;
class AnalyzerOptionsProto_SystemVariableProto;
class AnalyzerOptionsProto_SystemVariableProtoDefaultTypeInternal;
extern AnalyzerOptionsProto_SystemVariableProtoDefaultTypeInternal _AnalyzerOptionsProto_SystemVariableProto_default_instance_;
class LanguageOptionsProto;
class LanguageOptionsProtoDefaultTypeInternal;
extern LanguageOptionsProtoDefaultTypeInternal _LanguageOptionsProto_default_instance_;
class ZetaSQLBuiltinFunctionOptionsProto;
class ZetaSQLBuiltinFunctionOptionsProtoDefaultTypeInternal;
extern ZetaSQLBuiltinFunctionOptionsProtoDefaultTypeInternal _ZetaSQLBuiltinFunctionOptionsProto_default_instance_;
}  // namespace zetasql
namespace google {
namespace protobuf {
template<> ::zetasql::AllowedHintsAndOptionsProto* Arena::CreateMaybeMessage<::zetasql::AllowedHintsAndOptionsProto>(Arena*);
template<> ::zetasql::AllowedHintsAndOptionsProto_HintProto* Arena::CreateMaybeMessage<::zetasql::AllowedHintsAndOptionsProto_HintProto>(Arena*);
template<> ::zetasql::AllowedHintsAndOptionsProto_OptionProto* Arena::CreateMaybeMessage<::zetasql::AllowedHintsAndOptionsProto_OptionProto>(Arena*);
template<> ::zetasql::AnalyzerOptionsProto* Arena::CreateMaybeMessage<::zetasql::AnalyzerOptionsProto>(Arena*);
template<> ::zetasql::AnalyzerOptionsProto_QueryParameterProto* Arena::CreateMaybeMessage<::zetasql::AnalyzerOptionsProto_QueryParameterProto>(Arena*);
template<> ::zetasql::AnalyzerOptionsProto_SystemVariableProto* Arena::CreateMaybeMessage<::zetasql::AnalyzerOptionsProto_SystemVariableProto>(Arena*);
template<> ::zetasql::LanguageOptionsProto* Arena::CreateMaybeMessage<::zetasql::LanguageOptionsProto>(Arena*);
template<> ::zetasql::ZetaSQLBuiltinFunctionOptionsProto* Arena::CreateMaybeMessage<::zetasql::ZetaSQLBuiltinFunctionOptionsProto>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace zetasql {

// ===================================================================

class ZetaSQLBuiltinFunctionOptionsProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ZetaSQLBuiltinFunctionOptionsProto) */ {
 public:
  ZetaSQLBuiltinFunctionOptionsProto();
  virtual ~ZetaSQLBuiltinFunctionOptionsProto();

  ZetaSQLBuiltinFunctionOptionsProto(const ZetaSQLBuiltinFunctionOptionsProto& from);

  inline ZetaSQLBuiltinFunctionOptionsProto& operator=(const ZetaSQLBuiltinFunctionOptionsProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ZetaSQLBuiltinFunctionOptionsProto(ZetaSQLBuiltinFunctionOptionsProto&& from) noexcept
    : ZetaSQLBuiltinFunctionOptionsProto() {
    *this = ::std::move(from);
  }

  inline ZetaSQLBuiltinFunctionOptionsProto& operator=(ZetaSQLBuiltinFunctionOptionsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZetaSQLBuiltinFunctionOptionsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ZetaSQLBuiltinFunctionOptionsProto* internal_default_instance() {
    return reinterpret_cast<const ZetaSQLBuiltinFunctionOptionsProto*>(
               &_ZetaSQLBuiltinFunctionOptionsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ZetaSQLBuiltinFunctionOptionsProto* other);
  friend void swap(ZetaSQLBuiltinFunctionOptionsProto& a, ZetaSQLBuiltinFunctionOptionsProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ZetaSQLBuiltinFunctionOptionsProto* New() const final {
    return CreateMaybeMessage<ZetaSQLBuiltinFunctionOptionsProto>(NULL);
  }

  ZetaSQLBuiltinFunctionOptionsProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ZetaSQLBuiltinFunctionOptionsProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ZetaSQLBuiltinFunctionOptionsProto& from);
  void MergeFrom(const ZetaSQLBuiltinFunctionOptionsProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZetaSQLBuiltinFunctionOptionsProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.FunctionSignatureId include_function_ids = 2;
  int include_function_ids_size() const;
  void clear_include_function_ids();
  static const int kIncludeFunctionIdsFieldNumber = 2;
  ::zetasql::FunctionSignatureId include_function_ids(int index) const;
  void set_include_function_ids(int index, ::zetasql::FunctionSignatureId value);
  void add_include_function_ids(::zetasql::FunctionSignatureId value);
  const ::google::protobuf::RepeatedField<int>& include_function_ids() const;
  ::google::protobuf::RepeatedField<int>* mutable_include_function_ids();

  // repeated .zetasql.FunctionSignatureId exclude_function_ids = 3;
  int exclude_function_ids_size() const;
  void clear_exclude_function_ids();
  static const int kExcludeFunctionIdsFieldNumber = 3;
  ::zetasql::FunctionSignatureId exclude_function_ids(int index) const;
  void set_exclude_function_ids(int index, ::zetasql::FunctionSignatureId value);
  void add_exclude_function_ids(::zetasql::FunctionSignatureId value);
  const ::google::protobuf::RepeatedField<int>& exclude_function_ids() const;
  ::google::protobuf::RepeatedField<int>* mutable_exclude_function_ids();

  // optional .zetasql.LanguageOptionsProto language_options = 1;
  bool has_language_options() const;
  void clear_language_options();
  static const int kLanguageOptionsFieldNumber = 1;
  private:
  const ::zetasql::LanguageOptionsProto& _internal_language_options() const;
  public:
  const ::zetasql::LanguageOptionsProto& language_options() const;
  ::zetasql::LanguageOptionsProto* release_language_options();
  ::zetasql::LanguageOptionsProto* mutable_language_options();
  void set_allocated_language_options(::zetasql::LanguageOptionsProto* language_options);

  // @@protoc_insertion_point(class_scope:zetasql.ZetaSQLBuiltinFunctionOptionsProto)
 private:
  void set_has_language_options();
  void clear_has_language_options();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField<int> include_function_ids_;
  ::google::protobuf::RepeatedField<int> exclude_function_ids_;
  ::zetasql::LanguageOptionsProto* language_options_;
  friend struct ::protobuf_zetasql_2fproto_2foptions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LanguageOptionsProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.LanguageOptionsProto) */ {
 public:
  LanguageOptionsProto();
  virtual ~LanguageOptionsProto();

  LanguageOptionsProto(const LanguageOptionsProto& from);

  inline LanguageOptionsProto& operator=(const LanguageOptionsProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LanguageOptionsProto(LanguageOptionsProto&& from) noexcept
    : LanguageOptionsProto() {
    *this = ::std::move(from);
  }

  inline LanguageOptionsProto& operator=(LanguageOptionsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LanguageOptionsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LanguageOptionsProto* internal_default_instance() {
    return reinterpret_cast<const LanguageOptionsProto*>(
               &_LanguageOptionsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LanguageOptionsProto* other);
  friend void swap(LanguageOptionsProto& a, LanguageOptionsProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LanguageOptionsProto* New() const final {
    return CreateMaybeMessage<LanguageOptionsProto>(NULL);
  }

  LanguageOptionsProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LanguageOptionsProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LanguageOptionsProto& from);
  void MergeFrom(const LanguageOptionsProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LanguageOptionsProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.LanguageFeature enabled_language_features = 5;
  int enabled_language_features_size() const;
  void clear_enabled_language_features();
  static const int kEnabledLanguageFeaturesFieldNumber = 5;
  ::zetasql::LanguageFeature enabled_language_features(int index) const;
  void set_enabled_language_features(int index, ::zetasql::LanguageFeature value);
  void add_enabled_language_features(::zetasql::LanguageFeature value);
  const ::google::protobuf::RepeatedField<int>& enabled_language_features() const;
  ::google::protobuf::RepeatedField<int>* mutable_enabled_language_features();

  // repeated .zetasql.ResolvedNodeKind supported_statement_kinds = 6;
  int supported_statement_kinds_size() const;
  void clear_supported_statement_kinds();
  static const int kSupportedStatementKindsFieldNumber = 6;
  ::zetasql::ResolvedNodeKind supported_statement_kinds(int index) const;
  void set_supported_statement_kinds(int index, ::zetasql::ResolvedNodeKind value);
  void add_supported_statement_kinds(::zetasql::ResolvedNodeKind value);
  const ::google::protobuf::RepeatedField<int>& supported_statement_kinds() const;
  ::google::protobuf::RepeatedField<int>* mutable_supported_statement_kinds();

  // repeated string supported_generic_entity_types = 7;
  int supported_generic_entity_types_size() const;
  void clear_supported_generic_entity_types();
  static const int kSupportedGenericEntityTypesFieldNumber = 7;
  const ::std::string& supported_generic_entity_types(int index) const;
  ::std::string* mutable_supported_generic_entity_types(int index);
  void set_supported_generic_entity_types(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_supported_generic_entity_types(int index, ::std::string&& value);
  #endif
  void set_supported_generic_entity_types(int index, const char* value);
  void set_supported_generic_entity_types(int index, const char* value, size_t size);
  ::std::string* add_supported_generic_entity_types();
  void add_supported_generic_entity_types(const ::std::string& value);
  #if LANG_CXX11
  void add_supported_generic_entity_types(::std::string&& value);
  #endif
  void add_supported_generic_entity_types(const char* value);
  void add_supported_generic_entity_types(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& supported_generic_entity_types() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_supported_generic_entity_types();

  // repeated string reserved_keywords = 8;
  int reserved_keywords_size() const;
  void clear_reserved_keywords();
  static const int kReservedKeywordsFieldNumber = 8;
  const ::std::string& reserved_keywords(int index) const;
  ::std::string* mutable_reserved_keywords(int index);
  void set_reserved_keywords(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_reserved_keywords(int index, ::std::string&& value);
  #endif
  void set_reserved_keywords(int index, const char* value);
  void set_reserved_keywords(int index, const char* value, size_t size);
  ::std::string* add_reserved_keywords();
  void add_reserved_keywords(const ::std::string& value);
  #if LANG_CXX11
  void add_reserved_keywords(::std::string&& value);
  #endif
  void add_reserved_keywords(const char* value);
  void add_reserved_keywords(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& reserved_keywords() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_reserved_keywords();

  // optional .zetasql.NameResolutionMode name_resolution_mode = 2;
  bool has_name_resolution_mode() const;
  void clear_name_resolution_mode();
  static const int kNameResolutionModeFieldNumber = 2;
  ::zetasql::NameResolutionMode name_resolution_mode() const;
  void set_name_resolution_mode(::zetasql::NameResolutionMode value);

  // optional .zetasql.ProductMode product_mode = 3;
  bool has_product_mode() const;
  void clear_product_mode();
  static const int kProductModeFieldNumber = 3;
  ::zetasql::ProductMode product_mode() const;
  void set_product_mode(::zetasql::ProductMode value);

  // optional bool error_on_deprecated_syntax = 4;
  bool has_error_on_deprecated_syntax() const;
  void clear_error_on_deprecated_syntax();
  static const int kErrorOnDeprecatedSyntaxFieldNumber = 4;
  bool error_on_deprecated_syntax() const;
  void set_error_on_deprecated_syntax(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.LanguageOptionsProto)
 private:
  void set_has_name_resolution_mode();
  void clear_has_name_resolution_mode();
  void set_has_product_mode();
  void clear_has_product_mode();
  void set_has_error_on_deprecated_syntax();
  void clear_has_error_on_deprecated_syntax();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField<int> enabled_language_features_;
  ::google::protobuf::RepeatedField<int> supported_statement_kinds_;
  ::google::protobuf::RepeatedPtrField< ::std::string> supported_generic_entity_types_;
  ::google::protobuf::RepeatedPtrField< ::std::string> reserved_keywords_;
  int name_resolution_mode_;
  int product_mode_;
  bool error_on_deprecated_syntax_;
  friend struct ::protobuf_zetasql_2fproto_2foptions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllowedHintsAndOptionsProto_HintProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.AllowedHintsAndOptionsProto.HintProto) */ {
 public:
  AllowedHintsAndOptionsProto_HintProto();
  virtual ~AllowedHintsAndOptionsProto_HintProto();

  AllowedHintsAndOptionsProto_HintProto(const AllowedHintsAndOptionsProto_HintProto& from);

  inline AllowedHintsAndOptionsProto_HintProto& operator=(const AllowedHintsAndOptionsProto_HintProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllowedHintsAndOptionsProto_HintProto(AllowedHintsAndOptionsProto_HintProto&& from) noexcept
    : AllowedHintsAndOptionsProto_HintProto() {
    *this = ::std::move(from);
  }

  inline AllowedHintsAndOptionsProto_HintProto& operator=(AllowedHintsAndOptionsProto_HintProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllowedHintsAndOptionsProto_HintProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllowedHintsAndOptionsProto_HintProto* internal_default_instance() {
    return reinterpret_cast<const AllowedHintsAndOptionsProto_HintProto*>(
               &_AllowedHintsAndOptionsProto_HintProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(AllowedHintsAndOptionsProto_HintProto* other);
  friend void swap(AllowedHintsAndOptionsProto_HintProto& a, AllowedHintsAndOptionsProto_HintProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllowedHintsAndOptionsProto_HintProto* New() const final {
    return CreateMaybeMessage<AllowedHintsAndOptionsProto_HintProto>(NULL);
  }

  AllowedHintsAndOptionsProto_HintProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AllowedHintsAndOptionsProto_HintProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AllowedHintsAndOptionsProto_HintProto& from);
  void MergeFrom(const AllowedHintsAndOptionsProto_HintProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllowedHintsAndOptionsProto_HintProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string qualifier = 1;
  bool has_qualifier() const;
  void clear_qualifier();
  static const int kQualifierFieldNumber = 1;
  const ::std::string& qualifier() const;
  void set_qualifier(const ::std::string& value);
  #if LANG_CXX11
  void set_qualifier(::std::string&& value);
  #endif
  void set_qualifier(const char* value);
  void set_qualifier(const char* value, size_t size);
  ::std::string* mutable_qualifier();
  ::std::string* release_qualifier();
  void set_allocated_qualifier(::std::string* qualifier);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .zetasql.TypeProto type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  private:
  const ::zetasql::TypeProto& _internal_type() const;
  public:
  const ::zetasql::TypeProto& type() const;
  ::zetasql::TypeProto* release_type();
  ::zetasql::TypeProto* mutable_type();
  void set_allocated_type(::zetasql::TypeProto* type);

  // optional bool allow_unqualified = 4;
  bool has_allow_unqualified() const;
  void clear_allow_unqualified();
  static const int kAllowUnqualifiedFieldNumber = 4;
  bool allow_unqualified() const;
  void set_allow_unqualified(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.AllowedHintsAndOptionsProto.HintProto)
 private:
  void set_has_qualifier();
  void clear_has_qualifier();
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_allow_unqualified();
  void clear_has_allow_unqualified();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr qualifier_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::zetasql::TypeProto* type_;
  bool allow_unqualified_;
  friend struct ::protobuf_zetasql_2fproto_2foptions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllowedHintsAndOptionsProto_OptionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.AllowedHintsAndOptionsProto.OptionProto) */ {
 public:
  AllowedHintsAndOptionsProto_OptionProto();
  virtual ~AllowedHintsAndOptionsProto_OptionProto();

  AllowedHintsAndOptionsProto_OptionProto(const AllowedHintsAndOptionsProto_OptionProto& from);

  inline AllowedHintsAndOptionsProto_OptionProto& operator=(const AllowedHintsAndOptionsProto_OptionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllowedHintsAndOptionsProto_OptionProto(AllowedHintsAndOptionsProto_OptionProto&& from) noexcept
    : AllowedHintsAndOptionsProto_OptionProto() {
    *this = ::std::move(from);
  }

  inline AllowedHintsAndOptionsProto_OptionProto& operator=(AllowedHintsAndOptionsProto_OptionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllowedHintsAndOptionsProto_OptionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllowedHintsAndOptionsProto_OptionProto* internal_default_instance() {
    return reinterpret_cast<const AllowedHintsAndOptionsProto_OptionProto*>(
               &_AllowedHintsAndOptionsProto_OptionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AllowedHintsAndOptionsProto_OptionProto* other);
  friend void swap(AllowedHintsAndOptionsProto_OptionProto& a, AllowedHintsAndOptionsProto_OptionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllowedHintsAndOptionsProto_OptionProto* New() const final {
    return CreateMaybeMessage<AllowedHintsAndOptionsProto_OptionProto>(NULL);
  }

  AllowedHintsAndOptionsProto_OptionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AllowedHintsAndOptionsProto_OptionProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AllowedHintsAndOptionsProto_OptionProto& from);
  void MergeFrom(const AllowedHintsAndOptionsProto_OptionProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllowedHintsAndOptionsProto_OptionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .zetasql.TypeProto type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  private:
  const ::zetasql::TypeProto& _internal_type() const;
  public:
  const ::zetasql::TypeProto& type() const;
  ::zetasql::TypeProto* release_type();
  ::zetasql::TypeProto* mutable_type();
  void set_allocated_type(::zetasql::TypeProto* type);

  // @@protoc_insertion_point(class_scope:zetasql.AllowedHintsAndOptionsProto.OptionProto)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::zetasql::TypeProto* type_;
  friend struct ::protobuf_zetasql_2fproto_2foptions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllowedHintsAndOptionsProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.AllowedHintsAndOptionsProto) */ {
 public:
  AllowedHintsAndOptionsProto();
  virtual ~AllowedHintsAndOptionsProto();

  AllowedHintsAndOptionsProto(const AllowedHintsAndOptionsProto& from);

  inline AllowedHintsAndOptionsProto& operator=(const AllowedHintsAndOptionsProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllowedHintsAndOptionsProto(AllowedHintsAndOptionsProto&& from) noexcept
    : AllowedHintsAndOptionsProto() {
    *this = ::std::move(from);
  }

  inline AllowedHintsAndOptionsProto& operator=(AllowedHintsAndOptionsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllowedHintsAndOptionsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllowedHintsAndOptionsProto* internal_default_instance() {
    return reinterpret_cast<const AllowedHintsAndOptionsProto*>(
               &_AllowedHintsAndOptionsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(AllowedHintsAndOptionsProto* other);
  friend void swap(AllowedHintsAndOptionsProto& a, AllowedHintsAndOptionsProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllowedHintsAndOptionsProto* New() const final {
    return CreateMaybeMessage<AllowedHintsAndOptionsProto>(NULL);
  }

  AllowedHintsAndOptionsProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AllowedHintsAndOptionsProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AllowedHintsAndOptionsProto& from);
  void MergeFrom(const AllowedHintsAndOptionsProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllowedHintsAndOptionsProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AllowedHintsAndOptionsProto_HintProto HintProto;
  typedef AllowedHintsAndOptionsProto_OptionProto OptionProto;

  // accessors -------------------------------------------------------

  // repeated string disallow_unknown_hints_with_qualifier = 2;
  int disallow_unknown_hints_with_qualifier_size() const;
  void clear_disallow_unknown_hints_with_qualifier();
  static const int kDisallowUnknownHintsWithQualifierFieldNumber = 2;
  const ::std::string& disallow_unknown_hints_with_qualifier(int index) const;
  ::std::string* mutable_disallow_unknown_hints_with_qualifier(int index);
  void set_disallow_unknown_hints_with_qualifier(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_disallow_unknown_hints_with_qualifier(int index, ::std::string&& value);
  #endif
  void set_disallow_unknown_hints_with_qualifier(int index, const char* value);
  void set_disallow_unknown_hints_with_qualifier(int index, const char* value, size_t size);
  ::std::string* add_disallow_unknown_hints_with_qualifier();
  void add_disallow_unknown_hints_with_qualifier(const ::std::string& value);
  #if LANG_CXX11
  void add_disallow_unknown_hints_with_qualifier(::std::string&& value);
  #endif
  void add_disallow_unknown_hints_with_qualifier(const char* value);
  void add_disallow_unknown_hints_with_qualifier(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& disallow_unknown_hints_with_qualifier() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_disallow_unknown_hints_with_qualifier();

  // repeated .zetasql.AllowedHintsAndOptionsProto.HintProto hint = 3;
  int hint_size() const;
  void clear_hint();
  static const int kHintFieldNumber = 3;
  ::zetasql::AllowedHintsAndOptionsProto_HintProto* mutable_hint(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AllowedHintsAndOptionsProto_HintProto >*
      mutable_hint();
  const ::zetasql::AllowedHintsAndOptionsProto_HintProto& hint(int index) const;
  ::zetasql::AllowedHintsAndOptionsProto_HintProto* add_hint();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AllowedHintsAndOptionsProto_HintProto >&
      hint() const;

  // repeated .zetasql.AllowedHintsAndOptionsProto.OptionProto option = 4;
  int option_size() const;
  void clear_option();
  static const int kOptionFieldNumber = 4;
  ::zetasql::AllowedHintsAndOptionsProto_OptionProto* mutable_option(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AllowedHintsAndOptionsProto_OptionProto >*
      mutable_option();
  const ::zetasql::AllowedHintsAndOptionsProto_OptionProto& option(int index) const;
  ::zetasql::AllowedHintsAndOptionsProto_OptionProto* add_option();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AllowedHintsAndOptionsProto_OptionProto >&
      option() const;

  // optional bool disallow_unknown_options = 1;
  bool has_disallow_unknown_options() const;
  void clear_disallow_unknown_options();
  static const int kDisallowUnknownOptionsFieldNumber = 1;
  bool disallow_unknown_options() const;
  void set_disallow_unknown_options(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.AllowedHintsAndOptionsProto)
 private:
  void set_has_disallow_unknown_options();
  void clear_has_disallow_unknown_options();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> disallow_unknown_hints_with_qualifier_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AllowedHintsAndOptionsProto_HintProto > hint_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AllowedHintsAndOptionsProto_OptionProto > option_;
  bool disallow_unknown_options_;
  friend struct ::protobuf_zetasql_2fproto_2foptions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnalyzerOptionsProto_QueryParameterProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.AnalyzerOptionsProto.QueryParameterProto) */ {
 public:
  AnalyzerOptionsProto_QueryParameterProto();
  virtual ~AnalyzerOptionsProto_QueryParameterProto();

  AnalyzerOptionsProto_QueryParameterProto(const AnalyzerOptionsProto_QueryParameterProto& from);

  inline AnalyzerOptionsProto_QueryParameterProto& operator=(const AnalyzerOptionsProto_QueryParameterProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnalyzerOptionsProto_QueryParameterProto(AnalyzerOptionsProto_QueryParameterProto&& from) noexcept
    : AnalyzerOptionsProto_QueryParameterProto() {
    *this = ::std::move(from);
  }

  inline AnalyzerOptionsProto_QueryParameterProto& operator=(AnalyzerOptionsProto_QueryParameterProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalyzerOptionsProto_QueryParameterProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalyzerOptionsProto_QueryParameterProto* internal_default_instance() {
    return reinterpret_cast<const AnalyzerOptionsProto_QueryParameterProto*>(
               &_AnalyzerOptionsProto_QueryParameterProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(AnalyzerOptionsProto_QueryParameterProto* other);
  friend void swap(AnalyzerOptionsProto_QueryParameterProto& a, AnalyzerOptionsProto_QueryParameterProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnalyzerOptionsProto_QueryParameterProto* New() const final {
    return CreateMaybeMessage<AnalyzerOptionsProto_QueryParameterProto>(NULL);
  }

  AnalyzerOptionsProto_QueryParameterProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnalyzerOptionsProto_QueryParameterProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnalyzerOptionsProto_QueryParameterProto& from);
  void MergeFrom(const AnalyzerOptionsProto_QueryParameterProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalyzerOptionsProto_QueryParameterProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .zetasql.TypeProto type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  private:
  const ::zetasql::TypeProto& _internal_type() const;
  public:
  const ::zetasql::TypeProto& type() const;
  ::zetasql::TypeProto* release_type();
  ::zetasql::TypeProto* mutable_type();
  void set_allocated_type(::zetasql::TypeProto* type);

  // @@protoc_insertion_point(class_scope:zetasql.AnalyzerOptionsProto.QueryParameterProto)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::zetasql::TypeProto* type_;
  friend struct ::protobuf_zetasql_2fproto_2foptions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnalyzerOptionsProto_SystemVariableProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.AnalyzerOptionsProto.SystemVariableProto) */ {
 public:
  AnalyzerOptionsProto_SystemVariableProto();
  virtual ~AnalyzerOptionsProto_SystemVariableProto();

  AnalyzerOptionsProto_SystemVariableProto(const AnalyzerOptionsProto_SystemVariableProto& from);

  inline AnalyzerOptionsProto_SystemVariableProto& operator=(const AnalyzerOptionsProto_SystemVariableProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnalyzerOptionsProto_SystemVariableProto(AnalyzerOptionsProto_SystemVariableProto&& from) noexcept
    : AnalyzerOptionsProto_SystemVariableProto() {
    *this = ::std::move(from);
  }

  inline AnalyzerOptionsProto_SystemVariableProto& operator=(AnalyzerOptionsProto_SystemVariableProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalyzerOptionsProto_SystemVariableProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalyzerOptionsProto_SystemVariableProto* internal_default_instance() {
    return reinterpret_cast<const AnalyzerOptionsProto_SystemVariableProto*>(
               &_AnalyzerOptionsProto_SystemVariableProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(AnalyzerOptionsProto_SystemVariableProto* other);
  friend void swap(AnalyzerOptionsProto_SystemVariableProto& a, AnalyzerOptionsProto_SystemVariableProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnalyzerOptionsProto_SystemVariableProto* New() const final {
    return CreateMaybeMessage<AnalyzerOptionsProto_SystemVariableProto>(NULL);
  }

  AnalyzerOptionsProto_SystemVariableProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnalyzerOptionsProto_SystemVariableProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnalyzerOptionsProto_SystemVariableProto& from);
  void MergeFrom(const AnalyzerOptionsProto_SystemVariableProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalyzerOptionsProto_SystemVariableProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name_path = 1;
  int name_path_size() const;
  void clear_name_path();
  static const int kNamePathFieldNumber = 1;
  const ::std::string& name_path(int index) const;
  ::std::string* mutable_name_path(int index);
  void set_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name_path(int index, ::std::string&& value);
  #endif
  void set_name_path(int index, const char* value);
  void set_name_path(int index, const char* value, size_t size);
  ::std::string* add_name_path();
  void add_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_name_path(::std::string&& value);
  #endif
  void add_name_path(const char* value);
  void add_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_path();

  // optional .zetasql.TypeProto type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  private:
  const ::zetasql::TypeProto& _internal_type() const;
  public:
  const ::zetasql::TypeProto& type() const;
  ::zetasql::TypeProto* release_type();
  ::zetasql::TypeProto* mutable_type();
  void set_allocated_type(::zetasql::TypeProto* type);

  // @@protoc_insertion_point(class_scope:zetasql.AnalyzerOptionsProto.SystemVariableProto)
 private:
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_path_;
  ::zetasql::TypeProto* type_;
  friend struct ::protobuf_zetasql_2fproto_2foptions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnalyzerOptionsProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.AnalyzerOptionsProto) */ {
 public:
  AnalyzerOptionsProto();
  virtual ~AnalyzerOptionsProto();

  AnalyzerOptionsProto(const AnalyzerOptionsProto& from);

  inline AnalyzerOptionsProto& operator=(const AnalyzerOptionsProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnalyzerOptionsProto(AnalyzerOptionsProto&& from) noexcept
    : AnalyzerOptionsProto() {
    *this = ::std::move(from);
  }

  inline AnalyzerOptionsProto& operator=(AnalyzerOptionsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalyzerOptionsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalyzerOptionsProto* internal_default_instance() {
    return reinterpret_cast<const AnalyzerOptionsProto*>(
               &_AnalyzerOptionsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(AnalyzerOptionsProto* other);
  friend void swap(AnalyzerOptionsProto& a, AnalyzerOptionsProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnalyzerOptionsProto* New() const final {
    return CreateMaybeMessage<AnalyzerOptionsProto>(NULL);
  }

  AnalyzerOptionsProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnalyzerOptionsProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnalyzerOptionsProto& from);
  void MergeFrom(const AnalyzerOptionsProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalyzerOptionsProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AnalyzerOptionsProto_QueryParameterProto QueryParameterProto;
  typedef AnalyzerOptionsProto_SystemVariableProto SystemVariableProto;

  // accessors -------------------------------------------------------

  // repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto query_parameters = 2;
  int query_parameters_size() const;
  void clear_query_parameters();
  static const int kQueryParametersFieldNumber = 2;
  ::zetasql::AnalyzerOptionsProto_QueryParameterProto* mutable_query_parameters(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto >*
      mutable_query_parameters();
  const ::zetasql::AnalyzerOptionsProto_QueryParameterProto& query_parameters(int index) const;
  ::zetasql::AnalyzerOptionsProto_QueryParameterProto* add_query_parameters();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto >&
      query_parameters() const;

  // repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto expression_columns = 3;
  int expression_columns_size() const;
  void clear_expression_columns();
  static const int kExpressionColumnsFieldNumber = 3;
  ::zetasql::AnalyzerOptionsProto_QueryParameterProto* mutable_expression_columns(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto >*
      mutable_expression_columns();
  const ::zetasql::AnalyzerOptionsProto_QueryParameterProto& expression_columns(int index) const;
  ::zetasql::AnalyzerOptionsProto_QueryParameterProto* add_expression_columns();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto >&
      expression_columns() const;

  // repeated .zetasql.TypeProto positional_query_parameters = 12;
  int positional_query_parameters_size() const;
  void clear_positional_query_parameters();
  static const int kPositionalQueryParametersFieldNumber = 12;
  ::zetasql::TypeProto* mutable_positional_query_parameters(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::TypeProto >*
      mutable_positional_query_parameters();
  const ::zetasql::TypeProto& positional_query_parameters(int index) const;
  ::zetasql::TypeProto* add_positional_query_parameters();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::TypeProto >&
      positional_query_parameters() const;

  // repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto ddl_pseudo_columns = 15;
  int ddl_pseudo_columns_size() const;
  void clear_ddl_pseudo_columns();
  static const int kDdlPseudoColumnsFieldNumber = 15;
  ::zetasql::AnalyzerOptionsProto_QueryParameterProto* mutable_ddl_pseudo_columns(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto >*
      mutable_ddl_pseudo_columns();
  const ::zetasql::AnalyzerOptionsProto_QueryParameterProto& ddl_pseudo_columns(int index) const;
  ::zetasql::AnalyzerOptionsProto_QueryParameterProto* add_ddl_pseudo_columns();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto >&
      ddl_pseudo_columns() const;

  // repeated .zetasql.AnalyzerOptionsProto.SystemVariableProto system_variables = 18;
  int system_variables_size() const;
  void clear_system_variables();
  static const int kSystemVariablesFieldNumber = 18;
  ::zetasql::AnalyzerOptionsProto_SystemVariableProto* mutable_system_variables(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_SystemVariableProto >*
      mutable_system_variables();
  const ::zetasql::AnalyzerOptionsProto_SystemVariableProto& system_variables(int index) const;
  ::zetasql::AnalyzerOptionsProto_SystemVariableProto* add_system_variables();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_SystemVariableProto >&
      system_variables() const;

  // repeated .zetasql.TypeProto target_column_types = 19;
  int target_column_types_size() const;
  void clear_target_column_types();
  static const int kTargetColumnTypesFieldNumber = 19;
  ::zetasql::TypeProto* mutable_target_column_types(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::TypeProto >*
      mutable_target_column_types();
  const ::zetasql::TypeProto& target_column_types(int index) const;
  ::zetasql::TypeProto* add_target_column_types();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::TypeProto >&
      target_column_types() const;

  // repeated .zetasql.ResolvedASTRewrite enabled_rewrites = 21;
  int enabled_rewrites_size() const;
  void clear_enabled_rewrites();
  static const int kEnabledRewritesFieldNumber = 21;
  ::zetasql::ResolvedASTRewrite enabled_rewrites(int index) const;
  void set_enabled_rewrites(int index, ::zetasql::ResolvedASTRewrite value);
  void add_enabled_rewrites(::zetasql::ResolvedASTRewrite value);
  const ::google::protobuf::RepeatedField<int>& enabled_rewrites() const;
  ::google::protobuf::RepeatedField<int>* mutable_enabled_rewrites();

  // optional string default_timezone = 7;
  bool has_default_timezone() const;
  void clear_default_timezone();
  static const int kDefaultTimezoneFieldNumber = 7;
  const ::std::string& default_timezone() const;
  void set_default_timezone(const ::std::string& value);
  #if LANG_CXX11
  void set_default_timezone(::std::string&& value);
  #endif
  void set_default_timezone(const char* value);
  void set_default_timezone(const char* value, size_t size);
  ::std::string* mutable_default_timezone();
  ::std::string* release_default_timezone();
  void set_allocated_default_timezone(::std::string* default_timezone);

  // optional .zetasql.LanguageOptionsProto language_options = 1;
  bool has_language_options() const;
  void clear_language_options();
  static const int kLanguageOptionsFieldNumber = 1;
  private:
  const ::zetasql::LanguageOptionsProto& _internal_language_options() const;
  public:
  const ::zetasql::LanguageOptionsProto& language_options() const;
  ::zetasql::LanguageOptionsProto* release_language_options();
  ::zetasql::LanguageOptionsProto* mutable_language_options();
  void set_allocated_language_options(::zetasql::LanguageOptionsProto* language_options);

  // optional .zetasql.AnalyzerOptionsProto.QueryParameterProto in_scope_expression_column = 4;
  bool has_in_scope_expression_column() const;
  void clear_in_scope_expression_column();
  static const int kInScopeExpressionColumnFieldNumber = 4;
  private:
  const ::zetasql::AnalyzerOptionsProto_QueryParameterProto& _internal_in_scope_expression_column() const;
  public:
  const ::zetasql::AnalyzerOptionsProto_QueryParameterProto& in_scope_expression_column() const;
  ::zetasql::AnalyzerOptionsProto_QueryParameterProto* release_in_scope_expression_column();
  ::zetasql::AnalyzerOptionsProto_QueryParameterProto* mutable_in_scope_expression_column();
  void set_allocated_in_scope_expression_column(::zetasql::AnalyzerOptionsProto_QueryParameterProto* in_scope_expression_column);

  // optional .zetasql.AllowedHintsAndOptionsProto allowed_hints_and_options = 11;
  bool has_allowed_hints_and_options() const;
  void clear_allowed_hints_and_options();
  static const int kAllowedHintsAndOptionsFieldNumber = 11;
  private:
  const ::zetasql::AllowedHintsAndOptionsProto& _internal_allowed_hints_and_options() const;
  public:
  const ::zetasql::AllowedHintsAndOptionsProto& allowed_hints_and_options() const;
  ::zetasql::AllowedHintsAndOptionsProto* release_allowed_hints_and_options();
  ::zetasql::AllowedHintsAndOptionsProto* mutable_allowed_hints_and_options();
  void set_allocated_allowed_hints_and_options(::zetasql::AllowedHintsAndOptionsProto* allowed_hints_and_options);

  // optional .zetasql.ErrorMessageMode error_message_mode = 6;
  bool has_error_message_mode() const;
  void clear_error_message_mode();
  static const int kErrorMessageModeFieldNumber = 6;
  ::zetasql::ErrorMessageMode error_message_mode() const;
  void set_error_message_mode(::zetasql::ErrorMessageMode value);

  // optional .zetasql.ParameterMode parameter_mode = 13;
  bool has_parameter_mode() const;
  void clear_parameter_mode();
  static const int kParameterModeFieldNumber = 13;
  ::zetasql::ParameterMode parameter_mode() const;
  void set_parameter_mode(::zetasql::ParameterMode value);

  // optional .zetasql.StatementContext statement_context = 14;
  bool has_statement_context() const;
  void clear_statement_context();
  static const int kStatementContextFieldNumber = 14;
  ::zetasql::StatementContext statement_context() const;
  void set_statement_context(::zetasql::StatementContext value);

  // optional bool create_new_column_for_each_projected_output = 20;
  bool has_create_new_column_for_each_projected_output() const;
  void clear_create_new_column_for_each_projected_output();
  static const int kCreateNewColumnForEachProjectedOutputFieldNumber = 20;
  bool create_new_column_for_each_projected_output() const;
  void set_create_new_column_for_each_projected_output(bool value);

  // optional bool prune_unused_columns = 9;
  bool has_prune_unused_columns() const;
  void clear_prune_unused_columns();
  static const int kPruneUnusedColumnsFieldNumber = 9;
  bool prune_unused_columns() const;
  void set_prune_unused_columns(bool value);

  // optional bool allow_undeclared_parameters = 10;
  bool has_allow_undeclared_parameters() const;
  void clear_allow_undeclared_parameters();
  static const int kAllowUndeclaredParametersFieldNumber = 10;
  bool allow_undeclared_parameters() const;
  void set_allow_undeclared_parameters(bool value);

  // optional bool preserve_column_aliases = 17;
  bool has_preserve_column_aliases() const;
  void clear_preserve_column_aliases();
  static const int kPreserveColumnAliasesFieldNumber = 17;
  bool preserve_column_aliases() const;
  void set_preserve_column_aliases(bool value);

  // optional .zetasql.ParseLocationRecordType parse_location_record_type = 23;
  bool has_parse_location_record_type() const;
  void clear_parse_location_record_type();
  static const int kParseLocationRecordTypeFieldNumber = 23;
  ::zetasql::ParseLocationRecordType parse_location_record_type() const;
  void set_parse_location_record_type(::zetasql::ParseLocationRecordType value);

  // @@protoc_insertion_point(class_scope:zetasql.AnalyzerOptionsProto)
 private:
  void set_has_language_options();
  void clear_has_language_options();
  void set_has_in_scope_expression_column();
  void clear_has_in_scope_expression_column();
  void set_has_error_message_mode();
  void clear_has_error_message_mode();
  void set_has_default_timezone();
  void clear_has_default_timezone();
  void set_has_create_new_column_for_each_projected_output();
  void clear_has_create_new_column_for_each_projected_output();
  void set_has_prune_unused_columns();
  void clear_has_prune_unused_columns();
  void set_has_allow_undeclared_parameters();
  void clear_has_allow_undeclared_parameters();
  void set_has_parameter_mode();
  void clear_has_parameter_mode();
  void set_has_allowed_hints_and_options();
  void clear_has_allowed_hints_and_options();
  void set_has_statement_context();
  void clear_has_statement_context();
  void set_has_preserve_column_aliases();
  void clear_has_preserve_column_aliases();
  void set_has_parse_location_record_type();
  void clear_has_parse_location_record_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto > query_parameters_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto > expression_columns_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::TypeProto > positional_query_parameters_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto > ddl_pseudo_columns_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_SystemVariableProto > system_variables_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::TypeProto > target_column_types_;
  ::google::protobuf::RepeatedField<int> enabled_rewrites_;
  ::google::protobuf::internal::ArenaStringPtr default_timezone_;
  ::zetasql::LanguageOptionsProto* language_options_;
  ::zetasql::AnalyzerOptionsProto_QueryParameterProto* in_scope_expression_column_;
  ::zetasql::AllowedHintsAndOptionsProto* allowed_hints_and_options_;
  int error_message_mode_;
  int parameter_mode_;
  int statement_context_;
  bool create_new_column_for_each_projected_output_;
  bool prune_unused_columns_;
  bool allow_undeclared_parameters_;
  bool preserve_column_aliases_;
  int parse_location_record_type_;
  friend struct ::protobuf_zetasql_2fproto_2foptions_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ZetaSQLBuiltinFunctionOptionsProto

// optional .zetasql.LanguageOptionsProto language_options = 1;
inline bool ZetaSQLBuiltinFunctionOptionsProto::has_language_options() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZetaSQLBuiltinFunctionOptionsProto::set_has_language_options() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZetaSQLBuiltinFunctionOptionsProto::clear_has_language_options() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZetaSQLBuiltinFunctionOptionsProto::clear_language_options() {
  if (language_options_ != NULL) language_options_->Clear();
  clear_has_language_options();
}
inline const ::zetasql::LanguageOptionsProto& ZetaSQLBuiltinFunctionOptionsProto::_internal_language_options() const {
  return *language_options_;
}
inline const ::zetasql::LanguageOptionsProto& ZetaSQLBuiltinFunctionOptionsProto::language_options() const {
  const ::zetasql::LanguageOptionsProto* p = language_options_;
  // @@protoc_insertion_point(field_get:zetasql.ZetaSQLBuiltinFunctionOptionsProto.language_options)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::LanguageOptionsProto*>(
      &::zetasql::_LanguageOptionsProto_default_instance_);
}
inline ::zetasql::LanguageOptionsProto* ZetaSQLBuiltinFunctionOptionsProto::release_language_options() {
  // @@protoc_insertion_point(field_release:zetasql.ZetaSQLBuiltinFunctionOptionsProto.language_options)
  clear_has_language_options();
  ::zetasql::LanguageOptionsProto* temp = language_options_;
  language_options_ = NULL;
  return temp;
}
inline ::zetasql::LanguageOptionsProto* ZetaSQLBuiltinFunctionOptionsProto::mutable_language_options() {
  set_has_language_options();
  if (language_options_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::LanguageOptionsProto>(GetArenaNoVirtual());
    language_options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ZetaSQLBuiltinFunctionOptionsProto.language_options)
  return language_options_;
}
inline void ZetaSQLBuiltinFunctionOptionsProto::set_allocated_language_options(::zetasql::LanguageOptionsProto* language_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete language_options_;
  }
  if (language_options) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      language_options = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, language_options, submessage_arena);
    }
    set_has_language_options();
  } else {
    clear_has_language_options();
  }
  language_options_ = language_options;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ZetaSQLBuiltinFunctionOptionsProto.language_options)
}

// repeated .zetasql.FunctionSignatureId include_function_ids = 2;
inline int ZetaSQLBuiltinFunctionOptionsProto::include_function_ids_size() const {
  return include_function_ids_.size();
}
inline void ZetaSQLBuiltinFunctionOptionsProto::clear_include_function_ids() {
  include_function_ids_.Clear();
}
inline ::zetasql::FunctionSignatureId ZetaSQLBuiltinFunctionOptionsProto::include_function_ids(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ZetaSQLBuiltinFunctionOptionsProto.include_function_ids)
  return static_cast< ::zetasql::FunctionSignatureId >(include_function_ids_.Get(index));
}
inline void ZetaSQLBuiltinFunctionOptionsProto::set_include_function_ids(int index, ::zetasql::FunctionSignatureId value) {
  assert(::zetasql::FunctionSignatureId_IsValid(value));
  include_function_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:zetasql.ZetaSQLBuiltinFunctionOptionsProto.include_function_ids)
}
inline void ZetaSQLBuiltinFunctionOptionsProto::add_include_function_ids(::zetasql::FunctionSignatureId value) {
  assert(::zetasql::FunctionSignatureId_IsValid(value));
  include_function_ids_.Add(value);
  // @@protoc_insertion_point(field_add:zetasql.ZetaSQLBuiltinFunctionOptionsProto.include_function_ids)
}
inline const ::google::protobuf::RepeatedField<int>&
ZetaSQLBuiltinFunctionOptionsProto::include_function_ids() const {
  // @@protoc_insertion_point(field_list:zetasql.ZetaSQLBuiltinFunctionOptionsProto.include_function_ids)
  return include_function_ids_;
}
inline ::google::protobuf::RepeatedField<int>*
ZetaSQLBuiltinFunctionOptionsProto::mutable_include_function_ids() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ZetaSQLBuiltinFunctionOptionsProto.include_function_ids)
  return &include_function_ids_;
}

// repeated .zetasql.FunctionSignatureId exclude_function_ids = 3;
inline int ZetaSQLBuiltinFunctionOptionsProto::exclude_function_ids_size() const {
  return exclude_function_ids_.size();
}
inline void ZetaSQLBuiltinFunctionOptionsProto::clear_exclude_function_ids() {
  exclude_function_ids_.Clear();
}
inline ::zetasql::FunctionSignatureId ZetaSQLBuiltinFunctionOptionsProto::exclude_function_ids(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ZetaSQLBuiltinFunctionOptionsProto.exclude_function_ids)
  return static_cast< ::zetasql::FunctionSignatureId >(exclude_function_ids_.Get(index));
}
inline void ZetaSQLBuiltinFunctionOptionsProto::set_exclude_function_ids(int index, ::zetasql::FunctionSignatureId value) {
  assert(::zetasql::FunctionSignatureId_IsValid(value));
  exclude_function_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:zetasql.ZetaSQLBuiltinFunctionOptionsProto.exclude_function_ids)
}
inline void ZetaSQLBuiltinFunctionOptionsProto::add_exclude_function_ids(::zetasql::FunctionSignatureId value) {
  assert(::zetasql::FunctionSignatureId_IsValid(value));
  exclude_function_ids_.Add(value);
  // @@protoc_insertion_point(field_add:zetasql.ZetaSQLBuiltinFunctionOptionsProto.exclude_function_ids)
}
inline const ::google::protobuf::RepeatedField<int>&
ZetaSQLBuiltinFunctionOptionsProto::exclude_function_ids() const {
  // @@protoc_insertion_point(field_list:zetasql.ZetaSQLBuiltinFunctionOptionsProto.exclude_function_ids)
  return exclude_function_ids_;
}
inline ::google::protobuf::RepeatedField<int>*
ZetaSQLBuiltinFunctionOptionsProto::mutable_exclude_function_ids() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ZetaSQLBuiltinFunctionOptionsProto.exclude_function_ids)
  return &exclude_function_ids_;
}

// -------------------------------------------------------------------

// LanguageOptionsProto

// optional .zetasql.NameResolutionMode name_resolution_mode = 2;
inline bool LanguageOptionsProto::has_name_resolution_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LanguageOptionsProto::set_has_name_resolution_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LanguageOptionsProto::clear_has_name_resolution_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LanguageOptionsProto::clear_name_resolution_mode() {
  name_resolution_mode_ = 0;
  clear_has_name_resolution_mode();
}
inline ::zetasql::NameResolutionMode LanguageOptionsProto::name_resolution_mode() const {
  // @@protoc_insertion_point(field_get:zetasql.LanguageOptionsProto.name_resolution_mode)
  return static_cast< ::zetasql::NameResolutionMode >(name_resolution_mode_);
}
inline void LanguageOptionsProto::set_name_resolution_mode(::zetasql::NameResolutionMode value) {
  assert(::zetasql::NameResolutionMode_IsValid(value));
  set_has_name_resolution_mode();
  name_resolution_mode_ = value;
  // @@protoc_insertion_point(field_set:zetasql.LanguageOptionsProto.name_resolution_mode)
}

// optional .zetasql.ProductMode product_mode = 3;
inline bool LanguageOptionsProto::has_product_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LanguageOptionsProto::set_has_product_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LanguageOptionsProto::clear_has_product_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LanguageOptionsProto::clear_product_mode() {
  product_mode_ = 0;
  clear_has_product_mode();
}
inline ::zetasql::ProductMode LanguageOptionsProto::product_mode() const {
  // @@protoc_insertion_point(field_get:zetasql.LanguageOptionsProto.product_mode)
  return static_cast< ::zetasql::ProductMode >(product_mode_);
}
inline void LanguageOptionsProto::set_product_mode(::zetasql::ProductMode value) {
  assert(::zetasql::ProductMode_IsValid(value));
  set_has_product_mode();
  product_mode_ = value;
  // @@protoc_insertion_point(field_set:zetasql.LanguageOptionsProto.product_mode)
}

// optional bool error_on_deprecated_syntax = 4;
inline bool LanguageOptionsProto::has_error_on_deprecated_syntax() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LanguageOptionsProto::set_has_error_on_deprecated_syntax() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LanguageOptionsProto::clear_has_error_on_deprecated_syntax() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LanguageOptionsProto::clear_error_on_deprecated_syntax() {
  error_on_deprecated_syntax_ = false;
  clear_has_error_on_deprecated_syntax();
}
inline bool LanguageOptionsProto::error_on_deprecated_syntax() const {
  // @@protoc_insertion_point(field_get:zetasql.LanguageOptionsProto.error_on_deprecated_syntax)
  return error_on_deprecated_syntax_;
}
inline void LanguageOptionsProto::set_error_on_deprecated_syntax(bool value) {
  set_has_error_on_deprecated_syntax();
  error_on_deprecated_syntax_ = value;
  // @@protoc_insertion_point(field_set:zetasql.LanguageOptionsProto.error_on_deprecated_syntax)
}

// repeated .zetasql.LanguageFeature enabled_language_features = 5;
inline int LanguageOptionsProto::enabled_language_features_size() const {
  return enabled_language_features_.size();
}
inline void LanguageOptionsProto::clear_enabled_language_features() {
  enabled_language_features_.Clear();
}
inline ::zetasql::LanguageFeature LanguageOptionsProto::enabled_language_features(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.LanguageOptionsProto.enabled_language_features)
  return static_cast< ::zetasql::LanguageFeature >(enabled_language_features_.Get(index));
}
inline void LanguageOptionsProto::set_enabled_language_features(int index, ::zetasql::LanguageFeature value) {
  assert(::zetasql::LanguageFeature_IsValid(value));
  enabled_language_features_.Set(index, value);
  // @@protoc_insertion_point(field_set:zetasql.LanguageOptionsProto.enabled_language_features)
}
inline void LanguageOptionsProto::add_enabled_language_features(::zetasql::LanguageFeature value) {
  assert(::zetasql::LanguageFeature_IsValid(value));
  enabled_language_features_.Add(value);
  // @@protoc_insertion_point(field_add:zetasql.LanguageOptionsProto.enabled_language_features)
}
inline const ::google::protobuf::RepeatedField<int>&
LanguageOptionsProto::enabled_language_features() const {
  // @@protoc_insertion_point(field_list:zetasql.LanguageOptionsProto.enabled_language_features)
  return enabled_language_features_;
}
inline ::google::protobuf::RepeatedField<int>*
LanguageOptionsProto::mutable_enabled_language_features() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.LanguageOptionsProto.enabled_language_features)
  return &enabled_language_features_;
}

// repeated .zetasql.ResolvedNodeKind supported_statement_kinds = 6;
inline int LanguageOptionsProto::supported_statement_kinds_size() const {
  return supported_statement_kinds_.size();
}
inline void LanguageOptionsProto::clear_supported_statement_kinds() {
  supported_statement_kinds_.Clear();
}
inline ::zetasql::ResolvedNodeKind LanguageOptionsProto::supported_statement_kinds(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.LanguageOptionsProto.supported_statement_kinds)
  return static_cast< ::zetasql::ResolvedNodeKind >(supported_statement_kinds_.Get(index));
}
inline void LanguageOptionsProto::set_supported_statement_kinds(int index, ::zetasql::ResolvedNodeKind value) {
  assert(::zetasql::ResolvedNodeKind_IsValid(value));
  supported_statement_kinds_.Set(index, value);
  // @@protoc_insertion_point(field_set:zetasql.LanguageOptionsProto.supported_statement_kinds)
}
inline void LanguageOptionsProto::add_supported_statement_kinds(::zetasql::ResolvedNodeKind value) {
  assert(::zetasql::ResolvedNodeKind_IsValid(value));
  supported_statement_kinds_.Add(value);
  // @@protoc_insertion_point(field_add:zetasql.LanguageOptionsProto.supported_statement_kinds)
}
inline const ::google::protobuf::RepeatedField<int>&
LanguageOptionsProto::supported_statement_kinds() const {
  // @@protoc_insertion_point(field_list:zetasql.LanguageOptionsProto.supported_statement_kinds)
  return supported_statement_kinds_;
}
inline ::google::protobuf::RepeatedField<int>*
LanguageOptionsProto::mutable_supported_statement_kinds() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.LanguageOptionsProto.supported_statement_kinds)
  return &supported_statement_kinds_;
}

// repeated string supported_generic_entity_types = 7;
inline int LanguageOptionsProto::supported_generic_entity_types_size() const {
  return supported_generic_entity_types_.size();
}
inline void LanguageOptionsProto::clear_supported_generic_entity_types() {
  supported_generic_entity_types_.Clear();
}
inline const ::std::string& LanguageOptionsProto::supported_generic_entity_types(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.LanguageOptionsProto.supported_generic_entity_types)
  return supported_generic_entity_types_.Get(index);
}
inline ::std::string* LanguageOptionsProto::mutable_supported_generic_entity_types(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.LanguageOptionsProto.supported_generic_entity_types)
  return supported_generic_entity_types_.Mutable(index);
}
inline void LanguageOptionsProto::set_supported_generic_entity_types(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.LanguageOptionsProto.supported_generic_entity_types)
  supported_generic_entity_types_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void LanguageOptionsProto::set_supported_generic_entity_types(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.LanguageOptionsProto.supported_generic_entity_types)
  supported_generic_entity_types_.Mutable(index)->assign(std::move(value));
}
#endif
inline void LanguageOptionsProto::set_supported_generic_entity_types(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  supported_generic_entity_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.LanguageOptionsProto.supported_generic_entity_types)
}
inline void LanguageOptionsProto::set_supported_generic_entity_types(int index, const char* value, size_t size) {
  supported_generic_entity_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.LanguageOptionsProto.supported_generic_entity_types)
}
inline ::std::string* LanguageOptionsProto::add_supported_generic_entity_types() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.LanguageOptionsProto.supported_generic_entity_types)
  return supported_generic_entity_types_.Add();
}
inline void LanguageOptionsProto::add_supported_generic_entity_types(const ::std::string& value) {
  supported_generic_entity_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.LanguageOptionsProto.supported_generic_entity_types)
}
#if LANG_CXX11
inline void LanguageOptionsProto::add_supported_generic_entity_types(::std::string&& value) {
  supported_generic_entity_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.LanguageOptionsProto.supported_generic_entity_types)
}
#endif
inline void LanguageOptionsProto::add_supported_generic_entity_types(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  supported_generic_entity_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.LanguageOptionsProto.supported_generic_entity_types)
}
inline void LanguageOptionsProto::add_supported_generic_entity_types(const char* value, size_t size) {
  supported_generic_entity_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.LanguageOptionsProto.supported_generic_entity_types)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LanguageOptionsProto::supported_generic_entity_types() const {
  // @@protoc_insertion_point(field_list:zetasql.LanguageOptionsProto.supported_generic_entity_types)
  return supported_generic_entity_types_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LanguageOptionsProto::mutable_supported_generic_entity_types() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.LanguageOptionsProto.supported_generic_entity_types)
  return &supported_generic_entity_types_;
}

// repeated string reserved_keywords = 8;
inline int LanguageOptionsProto::reserved_keywords_size() const {
  return reserved_keywords_.size();
}
inline void LanguageOptionsProto::clear_reserved_keywords() {
  reserved_keywords_.Clear();
}
inline const ::std::string& LanguageOptionsProto::reserved_keywords(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.LanguageOptionsProto.reserved_keywords)
  return reserved_keywords_.Get(index);
}
inline ::std::string* LanguageOptionsProto::mutable_reserved_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.LanguageOptionsProto.reserved_keywords)
  return reserved_keywords_.Mutable(index);
}
inline void LanguageOptionsProto::set_reserved_keywords(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.LanguageOptionsProto.reserved_keywords)
  reserved_keywords_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void LanguageOptionsProto::set_reserved_keywords(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.LanguageOptionsProto.reserved_keywords)
  reserved_keywords_.Mutable(index)->assign(std::move(value));
}
#endif
inline void LanguageOptionsProto::set_reserved_keywords(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  reserved_keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.LanguageOptionsProto.reserved_keywords)
}
inline void LanguageOptionsProto::set_reserved_keywords(int index, const char* value, size_t size) {
  reserved_keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.LanguageOptionsProto.reserved_keywords)
}
inline ::std::string* LanguageOptionsProto::add_reserved_keywords() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.LanguageOptionsProto.reserved_keywords)
  return reserved_keywords_.Add();
}
inline void LanguageOptionsProto::add_reserved_keywords(const ::std::string& value) {
  reserved_keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.LanguageOptionsProto.reserved_keywords)
}
#if LANG_CXX11
inline void LanguageOptionsProto::add_reserved_keywords(::std::string&& value) {
  reserved_keywords_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.LanguageOptionsProto.reserved_keywords)
}
#endif
inline void LanguageOptionsProto::add_reserved_keywords(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  reserved_keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.LanguageOptionsProto.reserved_keywords)
}
inline void LanguageOptionsProto::add_reserved_keywords(const char* value, size_t size) {
  reserved_keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.LanguageOptionsProto.reserved_keywords)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LanguageOptionsProto::reserved_keywords() const {
  // @@protoc_insertion_point(field_list:zetasql.LanguageOptionsProto.reserved_keywords)
  return reserved_keywords_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LanguageOptionsProto::mutable_reserved_keywords() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.LanguageOptionsProto.reserved_keywords)
  return &reserved_keywords_;
}

// -------------------------------------------------------------------

// AllowedHintsAndOptionsProto_HintProto

// optional string qualifier = 1;
inline bool AllowedHintsAndOptionsProto_HintProto::has_qualifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllowedHintsAndOptionsProto_HintProto::set_has_qualifier() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllowedHintsAndOptionsProto_HintProto::clear_has_qualifier() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllowedHintsAndOptionsProto_HintProto::clear_qualifier() {
  qualifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qualifier();
}
inline const ::std::string& AllowedHintsAndOptionsProto_HintProto::qualifier() const {
  // @@protoc_insertion_point(field_get:zetasql.AllowedHintsAndOptionsProto.HintProto.qualifier)
  return qualifier_.GetNoArena();
}
inline void AllowedHintsAndOptionsProto_HintProto::set_qualifier(const ::std::string& value) {
  set_has_qualifier();
  qualifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.AllowedHintsAndOptionsProto.HintProto.qualifier)
}
#if LANG_CXX11
inline void AllowedHintsAndOptionsProto_HintProto::set_qualifier(::std::string&& value) {
  set_has_qualifier();
  qualifier_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.AllowedHintsAndOptionsProto.HintProto.qualifier)
}
#endif
inline void AllowedHintsAndOptionsProto_HintProto::set_qualifier(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qualifier();
  qualifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.AllowedHintsAndOptionsProto.HintProto.qualifier)
}
inline void AllowedHintsAndOptionsProto_HintProto::set_qualifier(const char* value, size_t size) {
  set_has_qualifier();
  qualifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.AllowedHintsAndOptionsProto.HintProto.qualifier)
}
inline ::std::string* AllowedHintsAndOptionsProto_HintProto::mutable_qualifier() {
  set_has_qualifier();
  // @@protoc_insertion_point(field_mutable:zetasql.AllowedHintsAndOptionsProto.HintProto.qualifier)
  return qualifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AllowedHintsAndOptionsProto_HintProto::release_qualifier() {
  // @@protoc_insertion_point(field_release:zetasql.AllowedHintsAndOptionsProto.HintProto.qualifier)
  if (!has_qualifier()) {
    return NULL;
  }
  clear_has_qualifier();
  return qualifier_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AllowedHintsAndOptionsProto_HintProto::set_allocated_qualifier(::std::string* qualifier) {
  if (qualifier != NULL) {
    set_has_qualifier();
  } else {
    clear_has_qualifier();
  }
  qualifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qualifier);
  // @@protoc_insertion_point(field_set_allocated:zetasql.AllowedHintsAndOptionsProto.HintProto.qualifier)
}

// optional string name = 2;
inline bool AllowedHintsAndOptionsProto_HintProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllowedHintsAndOptionsProto_HintProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllowedHintsAndOptionsProto_HintProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllowedHintsAndOptionsProto_HintProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& AllowedHintsAndOptionsProto_HintProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.AllowedHintsAndOptionsProto.HintProto.name)
  return name_.GetNoArena();
}
inline void AllowedHintsAndOptionsProto_HintProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.AllowedHintsAndOptionsProto.HintProto.name)
}
#if LANG_CXX11
inline void AllowedHintsAndOptionsProto_HintProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.AllowedHintsAndOptionsProto.HintProto.name)
}
#endif
inline void AllowedHintsAndOptionsProto_HintProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.AllowedHintsAndOptionsProto.HintProto.name)
}
inline void AllowedHintsAndOptionsProto_HintProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.AllowedHintsAndOptionsProto.HintProto.name)
}
inline ::std::string* AllowedHintsAndOptionsProto_HintProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.AllowedHintsAndOptionsProto.HintProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AllowedHintsAndOptionsProto_HintProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.AllowedHintsAndOptionsProto.HintProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AllowedHintsAndOptionsProto_HintProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.AllowedHintsAndOptionsProto.HintProto.name)
}

// optional .zetasql.TypeProto type = 3;
inline bool AllowedHintsAndOptionsProto_HintProto::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AllowedHintsAndOptionsProto_HintProto::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AllowedHintsAndOptionsProto_HintProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasql::TypeProto& AllowedHintsAndOptionsProto_HintProto::_internal_type() const {
  return *type_;
}
inline const ::zetasql::TypeProto& AllowedHintsAndOptionsProto_HintProto::type() const {
  const ::zetasql::TypeProto* p = type_;
  // @@protoc_insertion_point(field_get:zetasql.AllowedHintsAndOptionsProto.HintProto.type)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TypeProto*>(
      &::zetasql::_TypeProto_default_instance_);
}
inline ::zetasql::TypeProto* AllowedHintsAndOptionsProto_HintProto::release_type() {
  // @@protoc_insertion_point(field_release:zetasql.AllowedHintsAndOptionsProto.HintProto.type)
  clear_has_type();
  ::zetasql::TypeProto* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::zetasql::TypeProto* AllowedHintsAndOptionsProto_HintProto::mutable_type() {
  set_has_type();
  if (type_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AllowedHintsAndOptionsProto.HintProto.type)
  return type_;
}
inline void AllowedHintsAndOptionsProto_HintProto::set_allocated_type(::zetasql::TypeProto* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_);
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(type)->GetArena();
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    set_has_type();
  } else {
    clear_has_type();
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.AllowedHintsAndOptionsProto.HintProto.type)
}

// optional bool allow_unqualified = 4;
inline bool AllowedHintsAndOptionsProto_HintProto::has_allow_unqualified() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AllowedHintsAndOptionsProto_HintProto::set_has_allow_unqualified() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AllowedHintsAndOptionsProto_HintProto::clear_has_allow_unqualified() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AllowedHintsAndOptionsProto_HintProto::clear_allow_unqualified() {
  allow_unqualified_ = false;
  clear_has_allow_unqualified();
}
inline bool AllowedHintsAndOptionsProto_HintProto::allow_unqualified() const {
  // @@protoc_insertion_point(field_get:zetasql.AllowedHintsAndOptionsProto.HintProto.allow_unqualified)
  return allow_unqualified_;
}
inline void AllowedHintsAndOptionsProto_HintProto::set_allow_unqualified(bool value) {
  set_has_allow_unqualified();
  allow_unqualified_ = value;
  // @@protoc_insertion_point(field_set:zetasql.AllowedHintsAndOptionsProto.HintProto.allow_unqualified)
}

// -------------------------------------------------------------------

// AllowedHintsAndOptionsProto_OptionProto

// optional string name = 1;
inline bool AllowedHintsAndOptionsProto_OptionProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllowedHintsAndOptionsProto_OptionProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllowedHintsAndOptionsProto_OptionProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllowedHintsAndOptionsProto_OptionProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& AllowedHintsAndOptionsProto_OptionProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.AllowedHintsAndOptionsProto.OptionProto.name)
  return name_.GetNoArena();
}
inline void AllowedHintsAndOptionsProto_OptionProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.AllowedHintsAndOptionsProto.OptionProto.name)
}
#if LANG_CXX11
inline void AllowedHintsAndOptionsProto_OptionProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.AllowedHintsAndOptionsProto.OptionProto.name)
}
#endif
inline void AllowedHintsAndOptionsProto_OptionProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.AllowedHintsAndOptionsProto.OptionProto.name)
}
inline void AllowedHintsAndOptionsProto_OptionProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.AllowedHintsAndOptionsProto.OptionProto.name)
}
inline ::std::string* AllowedHintsAndOptionsProto_OptionProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.AllowedHintsAndOptionsProto.OptionProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AllowedHintsAndOptionsProto_OptionProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.AllowedHintsAndOptionsProto.OptionProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AllowedHintsAndOptionsProto_OptionProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.AllowedHintsAndOptionsProto.OptionProto.name)
}

// optional .zetasql.TypeProto type = 2;
inline bool AllowedHintsAndOptionsProto_OptionProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllowedHintsAndOptionsProto_OptionProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllowedHintsAndOptionsProto_OptionProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::TypeProto& AllowedHintsAndOptionsProto_OptionProto::_internal_type() const {
  return *type_;
}
inline const ::zetasql::TypeProto& AllowedHintsAndOptionsProto_OptionProto::type() const {
  const ::zetasql::TypeProto* p = type_;
  // @@protoc_insertion_point(field_get:zetasql.AllowedHintsAndOptionsProto.OptionProto.type)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TypeProto*>(
      &::zetasql::_TypeProto_default_instance_);
}
inline ::zetasql::TypeProto* AllowedHintsAndOptionsProto_OptionProto::release_type() {
  // @@protoc_insertion_point(field_release:zetasql.AllowedHintsAndOptionsProto.OptionProto.type)
  clear_has_type();
  ::zetasql::TypeProto* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::zetasql::TypeProto* AllowedHintsAndOptionsProto_OptionProto::mutable_type() {
  set_has_type();
  if (type_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AllowedHintsAndOptionsProto.OptionProto.type)
  return type_;
}
inline void AllowedHintsAndOptionsProto_OptionProto::set_allocated_type(::zetasql::TypeProto* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_);
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(type)->GetArena();
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    set_has_type();
  } else {
    clear_has_type();
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.AllowedHintsAndOptionsProto.OptionProto.type)
}

// -------------------------------------------------------------------

// AllowedHintsAndOptionsProto

// optional bool disallow_unknown_options = 1;
inline bool AllowedHintsAndOptionsProto::has_disallow_unknown_options() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllowedHintsAndOptionsProto::set_has_disallow_unknown_options() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllowedHintsAndOptionsProto::clear_has_disallow_unknown_options() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllowedHintsAndOptionsProto::clear_disallow_unknown_options() {
  disallow_unknown_options_ = false;
  clear_has_disallow_unknown_options();
}
inline bool AllowedHintsAndOptionsProto::disallow_unknown_options() const {
  // @@protoc_insertion_point(field_get:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_options)
  return disallow_unknown_options_;
}
inline void AllowedHintsAndOptionsProto::set_disallow_unknown_options(bool value) {
  set_has_disallow_unknown_options();
  disallow_unknown_options_ = value;
  // @@protoc_insertion_point(field_set:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_options)
}

// repeated string disallow_unknown_hints_with_qualifier = 2;
inline int AllowedHintsAndOptionsProto::disallow_unknown_hints_with_qualifier_size() const {
  return disallow_unknown_hints_with_qualifier_.size();
}
inline void AllowedHintsAndOptionsProto::clear_disallow_unknown_hints_with_qualifier() {
  disallow_unknown_hints_with_qualifier_.Clear();
}
inline const ::std::string& AllowedHintsAndOptionsProto::disallow_unknown_hints_with_qualifier(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier)
  return disallow_unknown_hints_with_qualifier_.Get(index);
}
inline ::std::string* AllowedHintsAndOptionsProto::mutable_disallow_unknown_hints_with_qualifier(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier)
  return disallow_unknown_hints_with_qualifier_.Mutable(index);
}
inline void AllowedHintsAndOptionsProto::set_disallow_unknown_hints_with_qualifier(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier)
  disallow_unknown_hints_with_qualifier_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AllowedHintsAndOptionsProto::set_disallow_unknown_hints_with_qualifier(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier)
  disallow_unknown_hints_with_qualifier_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AllowedHintsAndOptionsProto::set_disallow_unknown_hints_with_qualifier(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  disallow_unknown_hints_with_qualifier_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier)
}
inline void AllowedHintsAndOptionsProto::set_disallow_unknown_hints_with_qualifier(int index, const char* value, size_t size) {
  disallow_unknown_hints_with_qualifier_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier)
}
inline ::std::string* AllowedHintsAndOptionsProto::add_disallow_unknown_hints_with_qualifier() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier)
  return disallow_unknown_hints_with_qualifier_.Add();
}
inline void AllowedHintsAndOptionsProto::add_disallow_unknown_hints_with_qualifier(const ::std::string& value) {
  disallow_unknown_hints_with_qualifier_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier)
}
#if LANG_CXX11
inline void AllowedHintsAndOptionsProto::add_disallow_unknown_hints_with_qualifier(::std::string&& value) {
  disallow_unknown_hints_with_qualifier_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier)
}
#endif
inline void AllowedHintsAndOptionsProto::add_disallow_unknown_hints_with_qualifier(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  disallow_unknown_hints_with_qualifier_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier)
}
inline void AllowedHintsAndOptionsProto::add_disallow_unknown_hints_with_qualifier(const char* value, size_t size) {
  disallow_unknown_hints_with_qualifier_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AllowedHintsAndOptionsProto::disallow_unknown_hints_with_qualifier() const {
  // @@protoc_insertion_point(field_list:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier)
  return disallow_unknown_hints_with_qualifier_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AllowedHintsAndOptionsProto::mutable_disallow_unknown_hints_with_qualifier() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier)
  return &disallow_unknown_hints_with_qualifier_;
}

// repeated .zetasql.AllowedHintsAndOptionsProto.HintProto hint = 3;
inline int AllowedHintsAndOptionsProto::hint_size() const {
  return hint_.size();
}
inline void AllowedHintsAndOptionsProto::clear_hint() {
  hint_.Clear();
}
inline ::zetasql::AllowedHintsAndOptionsProto_HintProto* AllowedHintsAndOptionsProto::mutable_hint(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.AllowedHintsAndOptionsProto.hint)
  return hint_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AllowedHintsAndOptionsProto_HintProto >*
AllowedHintsAndOptionsProto::mutable_hint() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.AllowedHintsAndOptionsProto.hint)
  return &hint_;
}
inline const ::zetasql::AllowedHintsAndOptionsProto_HintProto& AllowedHintsAndOptionsProto::hint(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.AllowedHintsAndOptionsProto.hint)
  return hint_.Get(index);
}
inline ::zetasql::AllowedHintsAndOptionsProto_HintProto* AllowedHintsAndOptionsProto::add_hint() {
  // @@protoc_insertion_point(field_add:zetasql.AllowedHintsAndOptionsProto.hint)
  return hint_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AllowedHintsAndOptionsProto_HintProto >&
AllowedHintsAndOptionsProto::hint() const {
  // @@protoc_insertion_point(field_list:zetasql.AllowedHintsAndOptionsProto.hint)
  return hint_;
}

// repeated .zetasql.AllowedHintsAndOptionsProto.OptionProto option = 4;
inline int AllowedHintsAndOptionsProto::option_size() const {
  return option_.size();
}
inline void AllowedHintsAndOptionsProto::clear_option() {
  option_.Clear();
}
inline ::zetasql::AllowedHintsAndOptionsProto_OptionProto* AllowedHintsAndOptionsProto::mutable_option(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.AllowedHintsAndOptionsProto.option)
  return option_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AllowedHintsAndOptionsProto_OptionProto >*
AllowedHintsAndOptionsProto::mutable_option() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.AllowedHintsAndOptionsProto.option)
  return &option_;
}
inline const ::zetasql::AllowedHintsAndOptionsProto_OptionProto& AllowedHintsAndOptionsProto::option(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.AllowedHintsAndOptionsProto.option)
  return option_.Get(index);
}
inline ::zetasql::AllowedHintsAndOptionsProto_OptionProto* AllowedHintsAndOptionsProto::add_option() {
  // @@protoc_insertion_point(field_add:zetasql.AllowedHintsAndOptionsProto.option)
  return option_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AllowedHintsAndOptionsProto_OptionProto >&
AllowedHintsAndOptionsProto::option() const {
  // @@protoc_insertion_point(field_list:zetasql.AllowedHintsAndOptionsProto.option)
  return option_;
}

// -------------------------------------------------------------------

// AnalyzerOptionsProto_QueryParameterProto

// optional string name = 1;
inline bool AnalyzerOptionsProto_QueryParameterProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnalyzerOptionsProto_QueryParameterProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnalyzerOptionsProto_QueryParameterProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnalyzerOptionsProto_QueryParameterProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& AnalyzerOptionsProto_QueryParameterProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.QueryParameterProto.name)
  return name_.GetNoArena();
}
inline void AnalyzerOptionsProto_QueryParameterProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.QueryParameterProto.name)
}
#if LANG_CXX11
inline void AnalyzerOptionsProto_QueryParameterProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.AnalyzerOptionsProto.QueryParameterProto.name)
}
#endif
inline void AnalyzerOptionsProto_QueryParameterProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.AnalyzerOptionsProto.QueryParameterProto.name)
}
inline void AnalyzerOptionsProto_QueryParameterProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.AnalyzerOptionsProto.QueryParameterProto.name)
}
inline ::std::string* AnalyzerOptionsProto_QueryParameterProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.QueryParameterProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnalyzerOptionsProto_QueryParameterProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.AnalyzerOptionsProto.QueryParameterProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalyzerOptionsProto_QueryParameterProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnalyzerOptionsProto.QueryParameterProto.name)
}

// optional .zetasql.TypeProto type = 2;
inline bool AnalyzerOptionsProto_QueryParameterProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnalyzerOptionsProto_QueryParameterProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnalyzerOptionsProto_QueryParameterProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::TypeProto& AnalyzerOptionsProto_QueryParameterProto::_internal_type() const {
  return *type_;
}
inline const ::zetasql::TypeProto& AnalyzerOptionsProto_QueryParameterProto::type() const {
  const ::zetasql::TypeProto* p = type_;
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.QueryParameterProto.type)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TypeProto*>(
      &::zetasql::_TypeProto_default_instance_);
}
inline ::zetasql::TypeProto* AnalyzerOptionsProto_QueryParameterProto::release_type() {
  // @@protoc_insertion_point(field_release:zetasql.AnalyzerOptionsProto.QueryParameterProto.type)
  clear_has_type();
  ::zetasql::TypeProto* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::zetasql::TypeProto* AnalyzerOptionsProto_QueryParameterProto::mutable_type() {
  set_has_type();
  if (type_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.QueryParameterProto.type)
  return type_;
}
inline void AnalyzerOptionsProto_QueryParameterProto::set_allocated_type(::zetasql::TypeProto* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_);
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(type)->GetArena();
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    set_has_type();
  } else {
    clear_has_type();
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnalyzerOptionsProto.QueryParameterProto.type)
}

// -------------------------------------------------------------------

// AnalyzerOptionsProto_SystemVariableProto

// repeated string name_path = 1;
inline int AnalyzerOptionsProto_SystemVariableProto::name_path_size() const {
  return name_path_.size();
}
inline void AnalyzerOptionsProto_SystemVariableProto::clear_name_path() {
  name_path_.Clear();
}
inline const ::std::string& AnalyzerOptionsProto_SystemVariableProto::name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path)
  return name_path_.Get(index);
}
inline ::std::string* AnalyzerOptionsProto_SystemVariableProto::mutable_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path)
  return name_path_.Mutable(index);
}
inline void AnalyzerOptionsProto_SystemVariableProto::set_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path)
  name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AnalyzerOptionsProto_SystemVariableProto::set_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path)
  name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AnalyzerOptionsProto_SystemVariableProto::set_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path)
}
inline void AnalyzerOptionsProto_SystemVariableProto::set_name_path(int index, const char* value, size_t size) {
  name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path)
}
inline ::std::string* AnalyzerOptionsProto_SystemVariableProto::add_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path)
  return name_path_.Add();
}
inline void AnalyzerOptionsProto_SystemVariableProto::add_name_path(const ::std::string& value) {
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path)
}
#if LANG_CXX11
inline void AnalyzerOptionsProto_SystemVariableProto::add_name_path(::std::string&& value) {
  name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path)
}
#endif
inline void AnalyzerOptionsProto_SystemVariableProto::add_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path)
}
inline void AnalyzerOptionsProto_SystemVariableProto::add_name_path(const char* value, size_t size) {
  name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AnalyzerOptionsProto_SystemVariableProto::name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path)
  return name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AnalyzerOptionsProto_SystemVariableProto::mutable_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path)
  return &name_path_;
}

// optional .zetasql.TypeProto type = 2;
inline bool AnalyzerOptionsProto_SystemVariableProto::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnalyzerOptionsProto_SystemVariableProto::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnalyzerOptionsProto_SystemVariableProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::zetasql::TypeProto& AnalyzerOptionsProto_SystemVariableProto::_internal_type() const {
  return *type_;
}
inline const ::zetasql::TypeProto& AnalyzerOptionsProto_SystemVariableProto::type() const {
  const ::zetasql::TypeProto* p = type_;
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.SystemVariableProto.type)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TypeProto*>(
      &::zetasql::_TypeProto_default_instance_);
}
inline ::zetasql::TypeProto* AnalyzerOptionsProto_SystemVariableProto::release_type() {
  // @@protoc_insertion_point(field_release:zetasql.AnalyzerOptionsProto.SystemVariableProto.type)
  clear_has_type();
  ::zetasql::TypeProto* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::zetasql::TypeProto* AnalyzerOptionsProto_SystemVariableProto::mutable_type() {
  set_has_type();
  if (type_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.SystemVariableProto.type)
  return type_;
}
inline void AnalyzerOptionsProto_SystemVariableProto::set_allocated_type(::zetasql::TypeProto* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_);
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(type)->GetArena();
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    set_has_type();
  } else {
    clear_has_type();
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnalyzerOptionsProto.SystemVariableProto.type)
}

// -------------------------------------------------------------------

// AnalyzerOptionsProto

// optional .zetasql.LanguageOptionsProto language_options = 1;
inline bool AnalyzerOptionsProto::has_language_options() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnalyzerOptionsProto::set_has_language_options() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnalyzerOptionsProto::clear_has_language_options() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnalyzerOptionsProto::clear_language_options() {
  if (language_options_ != NULL) language_options_->Clear();
  clear_has_language_options();
}
inline const ::zetasql::LanguageOptionsProto& AnalyzerOptionsProto::_internal_language_options() const {
  return *language_options_;
}
inline const ::zetasql::LanguageOptionsProto& AnalyzerOptionsProto::language_options() const {
  const ::zetasql::LanguageOptionsProto* p = language_options_;
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.language_options)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::LanguageOptionsProto*>(
      &::zetasql::_LanguageOptionsProto_default_instance_);
}
inline ::zetasql::LanguageOptionsProto* AnalyzerOptionsProto::release_language_options() {
  // @@protoc_insertion_point(field_release:zetasql.AnalyzerOptionsProto.language_options)
  clear_has_language_options();
  ::zetasql::LanguageOptionsProto* temp = language_options_;
  language_options_ = NULL;
  return temp;
}
inline ::zetasql::LanguageOptionsProto* AnalyzerOptionsProto::mutable_language_options() {
  set_has_language_options();
  if (language_options_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::LanguageOptionsProto>(GetArenaNoVirtual());
    language_options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.language_options)
  return language_options_;
}
inline void AnalyzerOptionsProto::set_allocated_language_options(::zetasql::LanguageOptionsProto* language_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete language_options_;
  }
  if (language_options) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      language_options = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, language_options, submessage_arena);
    }
    set_has_language_options();
  } else {
    clear_has_language_options();
  }
  language_options_ = language_options;
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnalyzerOptionsProto.language_options)
}

// repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto query_parameters = 2;
inline int AnalyzerOptionsProto::query_parameters_size() const {
  return query_parameters_.size();
}
inline void AnalyzerOptionsProto::clear_query_parameters() {
  query_parameters_.Clear();
}
inline ::zetasql::AnalyzerOptionsProto_QueryParameterProto* AnalyzerOptionsProto::mutable_query_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.query_parameters)
  return query_parameters_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto >*
AnalyzerOptionsProto::mutable_query_parameters() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.AnalyzerOptionsProto.query_parameters)
  return &query_parameters_;
}
inline const ::zetasql::AnalyzerOptionsProto_QueryParameterProto& AnalyzerOptionsProto::query_parameters(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.query_parameters)
  return query_parameters_.Get(index);
}
inline ::zetasql::AnalyzerOptionsProto_QueryParameterProto* AnalyzerOptionsProto::add_query_parameters() {
  // @@protoc_insertion_point(field_add:zetasql.AnalyzerOptionsProto.query_parameters)
  return query_parameters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto >&
AnalyzerOptionsProto::query_parameters() const {
  // @@protoc_insertion_point(field_list:zetasql.AnalyzerOptionsProto.query_parameters)
  return query_parameters_;
}

// repeated .zetasql.TypeProto positional_query_parameters = 12;
inline int AnalyzerOptionsProto::positional_query_parameters_size() const {
  return positional_query_parameters_.size();
}
inline ::zetasql::TypeProto* AnalyzerOptionsProto::mutable_positional_query_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.positional_query_parameters)
  return positional_query_parameters_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::TypeProto >*
AnalyzerOptionsProto::mutable_positional_query_parameters() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.AnalyzerOptionsProto.positional_query_parameters)
  return &positional_query_parameters_;
}
inline const ::zetasql::TypeProto& AnalyzerOptionsProto::positional_query_parameters(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.positional_query_parameters)
  return positional_query_parameters_.Get(index);
}
inline ::zetasql::TypeProto* AnalyzerOptionsProto::add_positional_query_parameters() {
  // @@protoc_insertion_point(field_add:zetasql.AnalyzerOptionsProto.positional_query_parameters)
  return positional_query_parameters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::TypeProto >&
AnalyzerOptionsProto::positional_query_parameters() const {
  // @@protoc_insertion_point(field_list:zetasql.AnalyzerOptionsProto.positional_query_parameters)
  return positional_query_parameters_;
}

// repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto expression_columns = 3;
inline int AnalyzerOptionsProto::expression_columns_size() const {
  return expression_columns_.size();
}
inline void AnalyzerOptionsProto::clear_expression_columns() {
  expression_columns_.Clear();
}
inline ::zetasql::AnalyzerOptionsProto_QueryParameterProto* AnalyzerOptionsProto::mutable_expression_columns(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.expression_columns)
  return expression_columns_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto >*
AnalyzerOptionsProto::mutable_expression_columns() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.AnalyzerOptionsProto.expression_columns)
  return &expression_columns_;
}
inline const ::zetasql::AnalyzerOptionsProto_QueryParameterProto& AnalyzerOptionsProto::expression_columns(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.expression_columns)
  return expression_columns_.Get(index);
}
inline ::zetasql::AnalyzerOptionsProto_QueryParameterProto* AnalyzerOptionsProto::add_expression_columns() {
  // @@protoc_insertion_point(field_add:zetasql.AnalyzerOptionsProto.expression_columns)
  return expression_columns_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto >&
AnalyzerOptionsProto::expression_columns() const {
  // @@protoc_insertion_point(field_list:zetasql.AnalyzerOptionsProto.expression_columns)
  return expression_columns_;
}

// optional .zetasql.AnalyzerOptionsProto.QueryParameterProto in_scope_expression_column = 4;
inline bool AnalyzerOptionsProto::has_in_scope_expression_column() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AnalyzerOptionsProto::set_has_in_scope_expression_column() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AnalyzerOptionsProto::clear_has_in_scope_expression_column() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AnalyzerOptionsProto::clear_in_scope_expression_column() {
  if (in_scope_expression_column_ != NULL) in_scope_expression_column_->Clear();
  clear_has_in_scope_expression_column();
}
inline const ::zetasql::AnalyzerOptionsProto_QueryParameterProto& AnalyzerOptionsProto::_internal_in_scope_expression_column() const {
  return *in_scope_expression_column_;
}
inline const ::zetasql::AnalyzerOptionsProto_QueryParameterProto& AnalyzerOptionsProto::in_scope_expression_column() const {
  const ::zetasql::AnalyzerOptionsProto_QueryParameterProto* p = in_scope_expression_column_;
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.in_scope_expression_column)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnalyzerOptionsProto_QueryParameterProto*>(
      &::zetasql::_AnalyzerOptionsProto_QueryParameterProto_default_instance_);
}
inline ::zetasql::AnalyzerOptionsProto_QueryParameterProto* AnalyzerOptionsProto::release_in_scope_expression_column() {
  // @@protoc_insertion_point(field_release:zetasql.AnalyzerOptionsProto.in_scope_expression_column)
  clear_has_in_scope_expression_column();
  ::zetasql::AnalyzerOptionsProto_QueryParameterProto* temp = in_scope_expression_column_;
  in_scope_expression_column_ = NULL;
  return temp;
}
inline ::zetasql::AnalyzerOptionsProto_QueryParameterProto* AnalyzerOptionsProto::mutable_in_scope_expression_column() {
  set_has_in_scope_expression_column();
  if (in_scope_expression_column_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnalyzerOptionsProto_QueryParameterProto>(GetArenaNoVirtual());
    in_scope_expression_column_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.in_scope_expression_column)
  return in_scope_expression_column_;
}
inline void AnalyzerOptionsProto::set_allocated_in_scope_expression_column(::zetasql::AnalyzerOptionsProto_QueryParameterProto* in_scope_expression_column) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete in_scope_expression_column_;
  }
  if (in_scope_expression_column) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      in_scope_expression_column = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, in_scope_expression_column, submessage_arena);
    }
    set_has_in_scope_expression_column();
  } else {
    clear_has_in_scope_expression_column();
  }
  in_scope_expression_column_ = in_scope_expression_column;
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnalyzerOptionsProto.in_scope_expression_column)
}

// repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto ddl_pseudo_columns = 15;
inline int AnalyzerOptionsProto::ddl_pseudo_columns_size() const {
  return ddl_pseudo_columns_.size();
}
inline void AnalyzerOptionsProto::clear_ddl_pseudo_columns() {
  ddl_pseudo_columns_.Clear();
}
inline ::zetasql::AnalyzerOptionsProto_QueryParameterProto* AnalyzerOptionsProto::mutable_ddl_pseudo_columns(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.ddl_pseudo_columns)
  return ddl_pseudo_columns_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto >*
AnalyzerOptionsProto::mutable_ddl_pseudo_columns() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.AnalyzerOptionsProto.ddl_pseudo_columns)
  return &ddl_pseudo_columns_;
}
inline const ::zetasql::AnalyzerOptionsProto_QueryParameterProto& AnalyzerOptionsProto::ddl_pseudo_columns(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.ddl_pseudo_columns)
  return ddl_pseudo_columns_.Get(index);
}
inline ::zetasql::AnalyzerOptionsProto_QueryParameterProto* AnalyzerOptionsProto::add_ddl_pseudo_columns() {
  // @@protoc_insertion_point(field_add:zetasql.AnalyzerOptionsProto.ddl_pseudo_columns)
  return ddl_pseudo_columns_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto >&
AnalyzerOptionsProto::ddl_pseudo_columns() const {
  // @@protoc_insertion_point(field_list:zetasql.AnalyzerOptionsProto.ddl_pseudo_columns)
  return ddl_pseudo_columns_;
}

// optional .zetasql.ErrorMessageMode error_message_mode = 6;
inline bool AnalyzerOptionsProto::has_error_message_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AnalyzerOptionsProto::set_has_error_message_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AnalyzerOptionsProto::clear_has_error_message_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AnalyzerOptionsProto::clear_error_message_mode() {
  error_message_mode_ = 0;
  clear_has_error_message_mode();
}
inline ::zetasql::ErrorMessageMode AnalyzerOptionsProto::error_message_mode() const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.error_message_mode)
  return static_cast< ::zetasql::ErrorMessageMode >(error_message_mode_);
}
inline void AnalyzerOptionsProto::set_error_message_mode(::zetasql::ErrorMessageMode value) {
  assert(::zetasql::ErrorMessageMode_IsValid(value));
  set_has_error_message_mode();
  error_message_mode_ = value;
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.error_message_mode)
}

// optional string default_timezone = 7;
inline bool AnalyzerOptionsProto::has_default_timezone() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnalyzerOptionsProto::set_has_default_timezone() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnalyzerOptionsProto::clear_has_default_timezone() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnalyzerOptionsProto::clear_default_timezone() {
  default_timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_default_timezone();
}
inline const ::std::string& AnalyzerOptionsProto::default_timezone() const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.default_timezone)
  return default_timezone_.GetNoArena();
}
inline void AnalyzerOptionsProto::set_default_timezone(const ::std::string& value) {
  set_has_default_timezone();
  default_timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.default_timezone)
}
#if LANG_CXX11
inline void AnalyzerOptionsProto::set_default_timezone(::std::string&& value) {
  set_has_default_timezone();
  default_timezone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.AnalyzerOptionsProto.default_timezone)
}
#endif
inline void AnalyzerOptionsProto::set_default_timezone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_default_timezone();
  default_timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.AnalyzerOptionsProto.default_timezone)
}
inline void AnalyzerOptionsProto::set_default_timezone(const char* value, size_t size) {
  set_has_default_timezone();
  default_timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.AnalyzerOptionsProto.default_timezone)
}
inline ::std::string* AnalyzerOptionsProto::mutable_default_timezone() {
  set_has_default_timezone();
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.default_timezone)
  return default_timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnalyzerOptionsProto::release_default_timezone() {
  // @@protoc_insertion_point(field_release:zetasql.AnalyzerOptionsProto.default_timezone)
  if (!has_default_timezone()) {
    return NULL;
  }
  clear_has_default_timezone();
  return default_timezone_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalyzerOptionsProto::set_allocated_default_timezone(::std::string* default_timezone) {
  if (default_timezone != NULL) {
    set_has_default_timezone();
  } else {
    clear_has_default_timezone();
  }
  default_timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_timezone);
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnalyzerOptionsProto.default_timezone)
}

// optional bool create_new_column_for_each_projected_output = 20;
inline bool AnalyzerOptionsProto::has_create_new_column_for_each_projected_output() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AnalyzerOptionsProto::set_has_create_new_column_for_each_projected_output() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AnalyzerOptionsProto::clear_has_create_new_column_for_each_projected_output() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AnalyzerOptionsProto::clear_create_new_column_for_each_projected_output() {
  create_new_column_for_each_projected_output_ = false;
  clear_has_create_new_column_for_each_projected_output();
}
inline bool AnalyzerOptionsProto::create_new_column_for_each_projected_output() const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.create_new_column_for_each_projected_output)
  return create_new_column_for_each_projected_output_;
}
inline void AnalyzerOptionsProto::set_create_new_column_for_each_projected_output(bool value) {
  set_has_create_new_column_for_each_projected_output();
  create_new_column_for_each_projected_output_ = value;
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.create_new_column_for_each_projected_output)
}

// optional bool prune_unused_columns = 9;
inline bool AnalyzerOptionsProto::has_prune_unused_columns() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AnalyzerOptionsProto::set_has_prune_unused_columns() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AnalyzerOptionsProto::clear_has_prune_unused_columns() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AnalyzerOptionsProto::clear_prune_unused_columns() {
  prune_unused_columns_ = false;
  clear_has_prune_unused_columns();
}
inline bool AnalyzerOptionsProto::prune_unused_columns() const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.prune_unused_columns)
  return prune_unused_columns_;
}
inline void AnalyzerOptionsProto::set_prune_unused_columns(bool value) {
  set_has_prune_unused_columns();
  prune_unused_columns_ = value;
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.prune_unused_columns)
}

// optional bool allow_undeclared_parameters = 10;
inline bool AnalyzerOptionsProto::has_allow_undeclared_parameters() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AnalyzerOptionsProto::set_has_allow_undeclared_parameters() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AnalyzerOptionsProto::clear_has_allow_undeclared_parameters() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AnalyzerOptionsProto::clear_allow_undeclared_parameters() {
  allow_undeclared_parameters_ = false;
  clear_has_allow_undeclared_parameters();
}
inline bool AnalyzerOptionsProto::allow_undeclared_parameters() const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.allow_undeclared_parameters)
  return allow_undeclared_parameters_;
}
inline void AnalyzerOptionsProto::set_allow_undeclared_parameters(bool value) {
  set_has_allow_undeclared_parameters();
  allow_undeclared_parameters_ = value;
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.allow_undeclared_parameters)
}

// optional .zetasql.ParameterMode parameter_mode = 13;
inline bool AnalyzerOptionsProto::has_parameter_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AnalyzerOptionsProto::set_has_parameter_mode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AnalyzerOptionsProto::clear_has_parameter_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AnalyzerOptionsProto::clear_parameter_mode() {
  parameter_mode_ = 0;
  clear_has_parameter_mode();
}
inline ::zetasql::ParameterMode AnalyzerOptionsProto::parameter_mode() const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.parameter_mode)
  return static_cast< ::zetasql::ParameterMode >(parameter_mode_);
}
inline void AnalyzerOptionsProto::set_parameter_mode(::zetasql::ParameterMode value) {
  assert(::zetasql::ParameterMode_IsValid(value));
  set_has_parameter_mode();
  parameter_mode_ = value;
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.parameter_mode)
}

// optional .zetasql.AllowedHintsAndOptionsProto allowed_hints_and_options = 11;
inline bool AnalyzerOptionsProto::has_allowed_hints_and_options() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AnalyzerOptionsProto::set_has_allowed_hints_and_options() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AnalyzerOptionsProto::clear_has_allowed_hints_and_options() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AnalyzerOptionsProto::clear_allowed_hints_and_options() {
  if (allowed_hints_and_options_ != NULL) allowed_hints_and_options_->Clear();
  clear_has_allowed_hints_and_options();
}
inline const ::zetasql::AllowedHintsAndOptionsProto& AnalyzerOptionsProto::_internal_allowed_hints_and_options() const {
  return *allowed_hints_and_options_;
}
inline const ::zetasql::AllowedHintsAndOptionsProto& AnalyzerOptionsProto::allowed_hints_and_options() const {
  const ::zetasql::AllowedHintsAndOptionsProto* p = allowed_hints_and_options_;
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.allowed_hints_and_options)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AllowedHintsAndOptionsProto*>(
      &::zetasql::_AllowedHintsAndOptionsProto_default_instance_);
}
inline ::zetasql::AllowedHintsAndOptionsProto* AnalyzerOptionsProto::release_allowed_hints_and_options() {
  // @@protoc_insertion_point(field_release:zetasql.AnalyzerOptionsProto.allowed_hints_and_options)
  clear_has_allowed_hints_and_options();
  ::zetasql::AllowedHintsAndOptionsProto* temp = allowed_hints_and_options_;
  allowed_hints_and_options_ = NULL;
  return temp;
}
inline ::zetasql::AllowedHintsAndOptionsProto* AnalyzerOptionsProto::mutable_allowed_hints_and_options() {
  set_has_allowed_hints_and_options();
  if (allowed_hints_and_options_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AllowedHintsAndOptionsProto>(GetArenaNoVirtual());
    allowed_hints_and_options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.allowed_hints_and_options)
  return allowed_hints_and_options_;
}
inline void AnalyzerOptionsProto::set_allocated_allowed_hints_and_options(::zetasql::AllowedHintsAndOptionsProto* allowed_hints_and_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete allowed_hints_and_options_;
  }
  if (allowed_hints_and_options) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      allowed_hints_and_options = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, allowed_hints_and_options, submessage_arena);
    }
    set_has_allowed_hints_and_options();
  } else {
    clear_has_allowed_hints_and_options();
  }
  allowed_hints_and_options_ = allowed_hints_and_options;
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnalyzerOptionsProto.allowed_hints_and_options)
}

// optional .zetasql.StatementContext statement_context = 14;
inline bool AnalyzerOptionsProto::has_statement_context() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AnalyzerOptionsProto::set_has_statement_context() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AnalyzerOptionsProto::clear_has_statement_context() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AnalyzerOptionsProto::clear_statement_context() {
  statement_context_ = 0;
  clear_has_statement_context();
}
inline ::zetasql::StatementContext AnalyzerOptionsProto::statement_context() const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.statement_context)
  return static_cast< ::zetasql::StatementContext >(statement_context_);
}
inline void AnalyzerOptionsProto::set_statement_context(::zetasql::StatementContext value) {
  assert(::zetasql::StatementContext_IsValid(value));
  set_has_statement_context();
  statement_context_ = value;
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.statement_context)
}

// optional bool preserve_column_aliases = 17;
inline bool AnalyzerOptionsProto::has_preserve_column_aliases() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AnalyzerOptionsProto::set_has_preserve_column_aliases() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AnalyzerOptionsProto::clear_has_preserve_column_aliases() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AnalyzerOptionsProto::clear_preserve_column_aliases() {
  preserve_column_aliases_ = false;
  clear_has_preserve_column_aliases();
}
inline bool AnalyzerOptionsProto::preserve_column_aliases() const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.preserve_column_aliases)
  return preserve_column_aliases_;
}
inline void AnalyzerOptionsProto::set_preserve_column_aliases(bool value) {
  set_has_preserve_column_aliases();
  preserve_column_aliases_ = value;
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.preserve_column_aliases)
}

// repeated .zetasql.AnalyzerOptionsProto.SystemVariableProto system_variables = 18;
inline int AnalyzerOptionsProto::system_variables_size() const {
  return system_variables_.size();
}
inline void AnalyzerOptionsProto::clear_system_variables() {
  system_variables_.Clear();
}
inline ::zetasql::AnalyzerOptionsProto_SystemVariableProto* AnalyzerOptionsProto::mutable_system_variables(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.system_variables)
  return system_variables_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_SystemVariableProto >*
AnalyzerOptionsProto::mutable_system_variables() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.AnalyzerOptionsProto.system_variables)
  return &system_variables_;
}
inline const ::zetasql::AnalyzerOptionsProto_SystemVariableProto& AnalyzerOptionsProto::system_variables(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.system_variables)
  return system_variables_.Get(index);
}
inline ::zetasql::AnalyzerOptionsProto_SystemVariableProto* AnalyzerOptionsProto::add_system_variables() {
  // @@protoc_insertion_point(field_add:zetasql.AnalyzerOptionsProto.system_variables)
  return system_variables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_SystemVariableProto >&
AnalyzerOptionsProto::system_variables() const {
  // @@protoc_insertion_point(field_list:zetasql.AnalyzerOptionsProto.system_variables)
  return system_variables_;
}

// repeated .zetasql.TypeProto target_column_types = 19;
inline int AnalyzerOptionsProto::target_column_types_size() const {
  return target_column_types_.size();
}
inline ::zetasql::TypeProto* AnalyzerOptionsProto::mutable_target_column_types(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.target_column_types)
  return target_column_types_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::TypeProto >*
AnalyzerOptionsProto::mutable_target_column_types() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.AnalyzerOptionsProto.target_column_types)
  return &target_column_types_;
}
inline const ::zetasql::TypeProto& AnalyzerOptionsProto::target_column_types(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.target_column_types)
  return target_column_types_.Get(index);
}
inline ::zetasql::TypeProto* AnalyzerOptionsProto::add_target_column_types() {
  // @@protoc_insertion_point(field_add:zetasql.AnalyzerOptionsProto.target_column_types)
  return target_column_types_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::TypeProto >&
AnalyzerOptionsProto::target_column_types() const {
  // @@protoc_insertion_point(field_list:zetasql.AnalyzerOptionsProto.target_column_types)
  return target_column_types_;
}

// repeated .zetasql.ResolvedASTRewrite enabled_rewrites = 21;
inline int AnalyzerOptionsProto::enabled_rewrites_size() const {
  return enabled_rewrites_.size();
}
inline void AnalyzerOptionsProto::clear_enabled_rewrites() {
  enabled_rewrites_.Clear();
}
inline ::zetasql::ResolvedASTRewrite AnalyzerOptionsProto::enabled_rewrites(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.enabled_rewrites)
  return static_cast< ::zetasql::ResolvedASTRewrite >(enabled_rewrites_.Get(index));
}
inline void AnalyzerOptionsProto::set_enabled_rewrites(int index, ::zetasql::ResolvedASTRewrite value) {
  assert(::zetasql::ResolvedASTRewrite_IsValid(value));
  enabled_rewrites_.Set(index, value);
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.enabled_rewrites)
}
inline void AnalyzerOptionsProto::add_enabled_rewrites(::zetasql::ResolvedASTRewrite value) {
  assert(::zetasql::ResolvedASTRewrite_IsValid(value));
  enabled_rewrites_.Add(value);
  // @@protoc_insertion_point(field_add:zetasql.AnalyzerOptionsProto.enabled_rewrites)
}
inline const ::google::protobuf::RepeatedField<int>&
AnalyzerOptionsProto::enabled_rewrites() const {
  // @@protoc_insertion_point(field_list:zetasql.AnalyzerOptionsProto.enabled_rewrites)
  return enabled_rewrites_;
}
inline ::google::protobuf::RepeatedField<int>*
AnalyzerOptionsProto::mutable_enabled_rewrites() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.AnalyzerOptionsProto.enabled_rewrites)
  return &enabled_rewrites_;
}

// optional .zetasql.ParseLocationRecordType parse_location_record_type = 23;
inline bool AnalyzerOptionsProto::has_parse_location_record_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AnalyzerOptionsProto::set_has_parse_location_record_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AnalyzerOptionsProto::clear_has_parse_location_record_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AnalyzerOptionsProto::clear_parse_location_record_type() {
  parse_location_record_type_ = 0;
  clear_has_parse_location_record_type();
}
inline ::zetasql::ParseLocationRecordType AnalyzerOptionsProto::parse_location_record_type() const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.parse_location_record_type)
  return static_cast< ::zetasql::ParseLocationRecordType >(parse_location_record_type_);
}
inline void AnalyzerOptionsProto::set_parse_location_record_type(::zetasql::ParseLocationRecordType value) {
  assert(::zetasql::ParseLocationRecordType_IsValid(value));
  set_has_parse_location_record_type();
  parse_location_record_type_ = value;
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.parse_location_record_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_zetasql_2fproto_2foptions_2eproto
