// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/proto/simple_catalog.proto

#ifndef PROTOBUF_INCLUDED_zetasql_2fproto_2fsimple_5fcatalog_2eproto
#define PROTOBUF_INCLUDED_zetasql_2fproto_2fsimple_5fcatalog_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "zetasql/proto/function.pb.h"
#include "zetasql/proto/options.pb.h"
#include "zetasql/public/simple_constant.pb.h"
#include "zetasql/public/simple_table.pb.h"
#include "zetasql/public/type.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_zetasql_2fproto_2fsimple_5fcatalog_2eproto 

namespace protobuf_zetasql_2fproto_2fsimple_5fcatalog_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_zetasql_2fproto_2fsimple_5fcatalog_2eproto
namespace zetasql {
class SimpleCatalogProto;
class SimpleCatalogProtoDefaultTypeInternal;
extern SimpleCatalogProtoDefaultTypeInternal _SimpleCatalogProto_default_instance_;
class SimpleCatalogProto_NamedTypeProto;
class SimpleCatalogProto_NamedTypeProtoDefaultTypeInternal;
extern SimpleCatalogProto_NamedTypeProtoDefaultTypeInternal _SimpleCatalogProto_NamedTypeProto_default_instance_;
}  // namespace zetasql
namespace google {
namespace protobuf {
template<> ::zetasql::SimpleCatalogProto* Arena::CreateMaybeMessage<::zetasql::SimpleCatalogProto>(Arena*);
template<> ::zetasql::SimpleCatalogProto_NamedTypeProto* Arena::CreateMaybeMessage<::zetasql::SimpleCatalogProto_NamedTypeProto>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace zetasql {

// ===================================================================

class SimpleCatalogProto_NamedTypeProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.SimpleCatalogProto.NamedTypeProto) */ {
 public:
  SimpleCatalogProto_NamedTypeProto();
  virtual ~SimpleCatalogProto_NamedTypeProto();

  SimpleCatalogProto_NamedTypeProto(const SimpleCatalogProto_NamedTypeProto& from);

  inline SimpleCatalogProto_NamedTypeProto& operator=(const SimpleCatalogProto_NamedTypeProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimpleCatalogProto_NamedTypeProto(SimpleCatalogProto_NamedTypeProto&& from) noexcept
    : SimpleCatalogProto_NamedTypeProto() {
    *this = ::std::move(from);
  }

  inline SimpleCatalogProto_NamedTypeProto& operator=(SimpleCatalogProto_NamedTypeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleCatalogProto_NamedTypeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleCatalogProto_NamedTypeProto* internal_default_instance() {
    return reinterpret_cast<const SimpleCatalogProto_NamedTypeProto*>(
               &_SimpleCatalogProto_NamedTypeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SimpleCatalogProto_NamedTypeProto* other);
  friend void swap(SimpleCatalogProto_NamedTypeProto& a, SimpleCatalogProto_NamedTypeProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimpleCatalogProto_NamedTypeProto* New() const final {
    return CreateMaybeMessage<SimpleCatalogProto_NamedTypeProto>(NULL);
  }

  SimpleCatalogProto_NamedTypeProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimpleCatalogProto_NamedTypeProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimpleCatalogProto_NamedTypeProto& from);
  void MergeFrom(const SimpleCatalogProto_NamedTypeProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleCatalogProto_NamedTypeProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .zetasql.TypeProto type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  private:
  const ::zetasql::TypeProto& _internal_type() const;
  public:
  const ::zetasql::TypeProto& type() const;
  ::zetasql::TypeProto* release_type();
  ::zetasql::TypeProto* mutable_type();
  void set_allocated_type(::zetasql::TypeProto* type);

  // @@protoc_insertion_point(class_scope:zetasql.SimpleCatalogProto.NamedTypeProto)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::zetasql::TypeProto* type_;
  friend struct ::protobuf_zetasql_2fproto_2fsimple_5fcatalog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimpleCatalogProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.SimpleCatalogProto) */ {
 public:
  SimpleCatalogProto();
  virtual ~SimpleCatalogProto();

  SimpleCatalogProto(const SimpleCatalogProto& from);

  inline SimpleCatalogProto& operator=(const SimpleCatalogProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimpleCatalogProto(SimpleCatalogProto&& from) noexcept
    : SimpleCatalogProto() {
    *this = ::std::move(from);
  }

  inline SimpleCatalogProto& operator=(SimpleCatalogProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleCatalogProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleCatalogProto* internal_default_instance() {
    return reinterpret_cast<const SimpleCatalogProto*>(
               &_SimpleCatalogProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SimpleCatalogProto* other);
  friend void swap(SimpleCatalogProto& a, SimpleCatalogProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimpleCatalogProto* New() const final {
    return CreateMaybeMessage<SimpleCatalogProto>(NULL);
  }

  SimpleCatalogProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimpleCatalogProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimpleCatalogProto& from);
  void MergeFrom(const SimpleCatalogProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleCatalogProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SimpleCatalogProto_NamedTypeProto NamedTypeProto;

  // accessors -------------------------------------------------------

  // repeated .zetasql.SimpleTableProto table = 2;
  int table_size() const;
  void clear_table();
  static const int kTableFieldNumber = 2;
  ::zetasql::SimpleTableProto* mutable_table(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::SimpleTableProto >*
      mutable_table();
  const ::zetasql::SimpleTableProto& table(int index) const;
  ::zetasql::SimpleTableProto* add_table();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::SimpleTableProto >&
      table() const;

  // repeated .zetasql.SimpleCatalogProto.NamedTypeProto named_type = 3;
  int named_type_size() const;
  void clear_named_type();
  static const int kNamedTypeFieldNumber = 3;
  ::zetasql::SimpleCatalogProto_NamedTypeProto* mutable_named_type(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::SimpleCatalogProto_NamedTypeProto >*
      mutable_named_type();
  const ::zetasql::SimpleCatalogProto_NamedTypeProto& named_type(int index) const;
  ::zetasql::SimpleCatalogProto_NamedTypeProto* add_named_type();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::SimpleCatalogProto_NamedTypeProto >&
      named_type() const;

  // repeated .zetasql.SimpleCatalogProto catalog = 4;
  int catalog_size() const;
  void clear_catalog();
  static const int kCatalogFieldNumber = 4;
  ::zetasql::SimpleCatalogProto* mutable_catalog(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::SimpleCatalogProto >*
      mutable_catalog();
  const ::zetasql::SimpleCatalogProto& catalog(int index) const;
  ::zetasql::SimpleCatalogProto* add_catalog();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::SimpleCatalogProto >&
      catalog() const;

  // repeated .zetasql.FunctionProto custom_function = 6;
  int custom_function_size() const;
  void clear_custom_function();
  static const int kCustomFunctionFieldNumber = 6;
  ::zetasql::FunctionProto* mutable_custom_function(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::FunctionProto >*
      mutable_custom_function();
  const ::zetasql::FunctionProto& custom_function(int index) const;
  ::zetasql::FunctionProto* add_custom_function();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::FunctionProto >&
      custom_function() const;

  // repeated .zetasql.ProcedureProto procedure = 8;
  int procedure_size() const;
  void clear_procedure();
  static const int kProcedureFieldNumber = 8;
  ::zetasql::ProcedureProto* mutable_procedure(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ProcedureProto >*
      mutable_procedure();
  const ::zetasql::ProcedureProto& procedure(int index) const;
  ::zetasql::ProcedureProto* add_procedure();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ProcedureProto >&
      procedure() const;

  // repeated .zetasql.TableValuedFunctionProto custom_tvf = 9;
  int custom_tvf_size() const;
  void clear_custom_tvf();
  static const int kCustomTvfFieldNumber = 9;
  ::zetasql::TableValuedFunctionProto* mutable_custom_tvf(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::TableValuedFunctionProto >*
      mutable_custom_tvf();
  const ::zetasql::TableValuedFunctionProto& custom_tvf(int index) const;
  ::zetasql::TableValuedFunctionProto* add_custom_tvf();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::TableValuedFunctionProto >&
      custom_tvf() const;

  // repeated .zetasql.SimpleConstantProto constant = 10;
  int constant_size() const;
  void clear_constant();
  static const int kConstantFieldNumber = 10;
  ::zetasql::SimpleConstantProto* mutable_constant(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::SimpleConstantProto >*
      mutable_constant();
  const ::zetasql::SimpleConstantProto& constant(int index) const;
  ::zetasql::SimpleConstantProto* add_constant();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::SimpleConstantProto >&
      constant() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .zetasql.ZetaSQLBuiltinFunctionOptionsProto builtin_function_options = 5;
  bool has_builtin_function_options() const;
  void clear_builtin_function_options();
  static const int kBuiltinFunctionOptionsFieldNumber = 5;
  private:
  const ::zetasql::ZetaSQLBuiltinFunctionOptionsProto& _internal_builtin_function_options() const;
  public:
  const ::zetasql::ZetaSQLBuiltinFunctionOptionsProto& builtin_function_options() const;
  ::zetasql::ZetaSQLBuiltinFunctionOptionsProto* release_builtin_function_options();
  ::zetasql::ZetaSQLBuiltinFunctionOptionsProto* mutable_builtin_function_options();
  void set_allocated_builtin_function_options(::zetasql::ZetaSQLBuiltinFunctionOptionsProto* builtin_function_options);

  // optional int32 file_descriptor_set_index = 7 [default = -1];
  bool has_file_descriptor_set_index() const;
  void clear_file_descriptor_set_index();
  static const int kFileDescriptorSetIndexFieldNumber = 7;
  ::google::protobuf::int32 file_descriptor_set_index() const;
  void set_file_descriptor_set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zetasql.SimpleCatalogProto)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_builtin_function_options();
  void clear_has_builtin_function_options();
  void set_has_file_descriptor_set_index();
  void clear_has_file_descriptor_set_index();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::SimpleTableProto > table_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::SimpleCatalogProto_NamedTypeProto > named_type_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::SimpleCatalogProto > catalog_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::FunctionProto > custom_function_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ProcedureProto > procedure_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::TableValuedFunctionProto > custom_tvf_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::SimpleConstantProto > constant_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::zetasql::ZetaSQLBuiltinFunctionOptionsProto* builtin_function_options_;
  ::google::protobuf::int32 file_descriptor_set_index_;
  friend struct ::protobuf_zetasql_2fproto_2fsimple_5fcatalog_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SimpleCatalogProto_NamedTypeProto

// optional string name = 1;
inline bool SimpleCatalogProto_NamedTypeProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimpleCatalogProto_NamedTypeProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimpleCatalogProto_NamedTypeProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SimpleCatalogProto_NamedTypeProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SimpleCatalogProto_NamedTypeProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleCatalogProto.NamedTypeProto.name)
  return name_.GetNoArena();
}
inline void SimpleCatalogProto_NamedTypeProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.SimpleCatalogProto.NamedTypeProto.name)
}
#if LANG_CXX11
inline void SimpleCatalogProto_NamedTypeProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.SimpleCatalogProto.NamedTypeProto.name)
}
#endif
inline void SimpleCatalogProto_NamedTypeProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.SimpleCatalogProto.NamedTypeProto.name)
}
inline void SimpleCatalogProto_NamedTypeProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.SimpleCatalogProto.NamedTypeProto.name)
}
inline ::std::string* SimpleCatalogProto_NamedTypeProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleCatalogProto.NamedTypeProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SimpleCatalogProto_NamedTypeProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.SimpleCatalogProto.NamedTypeProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SimpleCatalogProto_NamedTypeProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.SimpleCatalogProto.NamedTypeProto.name)
}

// optional .zetasql.TypeProto type = 2;
inline bool SimpleCatalogProto_NamedTypeProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SimpleCatalogProto_NamedTypeProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SimpleCatalogProto_NamedTypeProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::TypeProto& SimpleCatalogProto_NamedTypeProto::_internal_type() const {
  return *type_;
}
inline const ::zetasql::TypeProto& SimpleCatalogProto_NamedTypeProto::type() const {
  const ::zetasql::TypeProto* p = type_;
  // @@protoc_insertion_point(field_get:zetasql.SimpleCatalogProto.NamedTypeProto.type)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TypeProto*>(
      &::zetasql::_TypeProto_default_instance_);
}
inline ::zetasql::TypeProto* SimpleCatalogProto_NamedTypeProto::release_type() {
  // @@protoc_insertion_point(field_release:zetasql.SimpleCatalogProto.NamedTypeProto.type)
  clear_has_type();
  ::zetasql::TypeProto* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::zetasql::TypeProto* SimpleCatalogProto_NamedTypeProto::mutable_type() {
  set_has_type();
  if (type_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleCatalogProto.NamedTypeProto.type)
  return type_;
}
inline void SimpleCatalogProto_NamedTypeProto::set_allocated_type(::zetasql::TypeProto* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_);
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(type)->GetArena();
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    set_has_type();
  } else {
    clear_has_type();
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.SimpleCatalogProto.NamedTypeProto.type)
}

// -------------------------------------------------------------------

// SimpleCatalogProto

// optional string name = 1;
inline bool SimpleCatalogProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimpleCatalogProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimpleCatalogProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SimpleCatalogProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SimpleCatalogProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleCatalogProto.name)
  return name_.GetNoArena();
}
inline void SimpleCatalogProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.SimpleCatalogProto.name)
}
#if LANG_CXX11
inline void SimpleCatalogProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.SimpleCatalogProto.name)
}
#endif
inline void SimpleCatalogProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.SimpleCatalogProto.name)
}
inline void SimpleCatalogProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.SimpleCatalogProto.name)
}
inline ::std::string* SimpleCatalogProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleCatalogProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SimpleCatalogProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.SimpleCatalogProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SimpleCatalogProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.SimpleCatalogProto.name)
}

// repeated .zetasql.SimpleTableProto table = 2;
inline int SimpleCatalogProto::table_size() const {
  return table_.size();
}
inline ::zetasql::SimpleTableProto* SimpleCatalogProto::mutable_table(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleCatalogProto.table)
  return table_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::SimpleTableProto >*
SimpleCatalogProto::mutable_table() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.SimpleCatalogProto.table)
  return &table_;
}
inline const ::zetasql::SimpleTableProto& SimpleCatalogProto::table(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleCatalogProto.table)
  return table_.Get(index);
}
inline ::zetasql::SimpleTableProto* SimpleCatalogProto::add_table() {
  // @@protoc_insertion_point(field_add:zetasql.SimpleCatalogProto.table)
  return table_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::SimpleTableProto >&
SimpleCatalogProto::table() const {
  // @@protoc_insertion_point(field_list:zetasql.SimpleCatalogProto.table)
  return table_;
}

// repeated .zetasql.SimpleCatalogProto.NamedTypeProto named_type = 3;
inline int SimpleCatalogProto::named_type_size() const {
  return named_type_.size();
}
inline void SimpleCatalogProto::clear_named_type() {
  named_type_.Clear();
}
inline ::zetasql::SimpleCatalogProto_NamedTypeProto* SimpleCatalogProto::mutable_named_type(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleCatalogProto.named_type)
  return named_type_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::SimpleCatalogProto_NamedTypeProto >*
SimpleCatalogProto::mutable_named_type() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.SimpleCatalogProto.named_type)
  return &named_type_;
}
inline const ::zetasql::SimpleCatalogProto_NamedTypeProto& SimpleCatalogProto::named_type(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleCatalogProto.named_type)
  return named_type_.Get(index);
}
inline ::zetasql::SimpleCatalogProto_NamedTypeProto* SimpleCatalogProto::add_named_type() {
  // @@protoc_insertion_point(field_add:zetasql.SimpleCatalogProto.named_type)
  return named_type_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::SimpleCatalogProto_NamedTypeProto >&
SimpleCatalogProto::named_type() const {
  // @@protoc_insertion_point(field_list:zetasql.SimpleCatalogProto.named_type)
  return named_type_;
}

// repeated .zetasql.SimpleCatalogProto catalog = 4;
inline int SimpleCatalogProto::catalog_size() const {
  return catalog_.size();
}
inline void SimpleCatalogProto::clear_catalog() {
  catalog_.Clear();
}
inline ::zetasql::SimpleCatalogProto* SimpleCatalogProto::mutable_catalog(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleCatalogProto.catalog)
  return catalog_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::SimpleCatalogProto >*
SimpleCatalogProto::mutable_catalog() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.SimpleCatalogProto.catalog)
  return &catalog_;
}
inline const ::zetasql::SimpleCatalogProto& SimpleCatalogProto::catalog(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleCatalogProto.catalog)
  return catalog_.Get(index);
}
inline ::zetasql::SimpleCatalogProto* SimpleCatalogProto::add_catalog() {
  // @@protoc_insertion_point(field_add:zetasql.SimpleCatalogProto.catalog)
  return catalog_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::SimpleCatalogProto >&
SimpleCatalogProto::catalog() const {
  // @@protoc_insertion_point(field_list:zetasql.SimpleCatalogProto.catalog)
  return catalog_;
}

// optional .zetasql.ZetaSQLBuiltinFunctionOptionsProto builtin_function_options = 5;
inline bool SimpleCatalogProto::has_builtin_function_options() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SimpleCatalogProto::set_has_builtin_function_options() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SimpleCatalogProto::clear_has_builtin_function_options() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::ZetaSQLBuiltinFunctionOptionsProto& SimpleCatalogProto::_internal_builtin_function_options() const {
  return *builtin_function_options_;
}
inline const ::zetasql::ZetaSQLBuiltinFunctionOptionsProto& SimpleCatalogProto::builtin_function_options() const {
  const ::zetasql::ZetaSQLBuiltinFunctionOptionsProto* p = builtin_function_options_;
  // @@protoc_insertion_point(field_get:zetasql.SimpleCatalogProto.builtin_function_options)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ZetaSQLBuiltinFunctionOptionsProto*>(
      &::zetasql::_ZetaSQLBuiltinFunctionOptionsProto_default_instance_);
}
inline ::zetasql::ZetaSQLBuiltinFunctionOptionsProto* SimpleCatalogProto::release_builtin_function_options() {
  // @@protoc_insertion_point(field_release:zetasql.SimpleCatalogProto.builtin_function_options)
  clear_has_builtin_function_options();
  ::zetasql::ZetaSQLBuiltinFunctionOptionsProto* temp = builtin_function_options_;
  builtin_function_options_ = NULL;
  return temp;
}
inline ::zetasql::ZetaSQLBuiltinFunctionOptionsProto* SimpleCatalogProto::mutable_builtin_function_options() {
  set_has_builtin_function_options();
  if (builtin_function_options_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ZetaSQLBuiltinFunctionOptionsProto>(GetArenaNoVirtual());
    builtin_function_options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleCatalogProto.builtin_function_options)
  return builtin_function_options_;
}
inline void SimpleCatalogProto::set_allocated_builtin_function_options(::zetasql::ZetaSQLBuiltinFunctionOptionsProto* builtin_function_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(builtin_function_options_);
  }
  if (builtin_function_options) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      builtin_function_options = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, builtin_function_options, submessage_arena);
    }
    set_has_builtin_function_options();
  } else {
    clear_has_builtin_function_options();
  }
  builtin_function_options_ = builtin_function_options;
  // @@protoc_insertion_point(field_set_allocated:zetasql.SimpleCatalogProto.builtin_function_options)
}

// repeated .zetasql.FunctionProto custom_function = 6;
inline int SimpleCatalogProto::custom_function_size() const {
  return custom_function_.size();
}
inline ::zetasql::FunctionProto* SimpleCatalogProto::mutable_custom_function(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleCatalogProto.custom_function)
  return custom_function_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::FunctionProto >*
SimpleCatalogProto::mutable_custom_function() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.SimpleCatalogProto.custom_function)
  return &custom_function_;
}
inline const ::zetasql::FunctionProto& SimpleCatalogProto::custom_function(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleCatalogProto.custom_function)
  return custom_function_.Get(index);
}
inline ::zetasql::FunctionProto* SimpleCatalogProto::add_custom_function() {
  // @@protoc_insertion_point(field_add:zetasql.SimpleCatalogProto.custom_function)
  return custom_function_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::FunctionProto >&
SimpleCatalogProto::custom_function() const {
  // @@protoc_insertion_point(field_list:zetasql.SimpleCatalogProto.custom_function)
  return custom_function_;
}

// repeated .zetasql.TableValuedFunctionProto custom_tvf = 9;
inline int SimpleCatalogProto::custom_tvf_size() const {
  return custom_tvf_.size();
}
inline ::zetasql::TableValuedFunctionProto* SimpleCatalogProto::mutable_custom_tvf(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleCatalogProto.custom_tvf)
  return custom_tvf_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::TableValuedFunctionProto >*
SimpleCatalogProto::mutable_custom_tvf() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.SimpleCatalogProto.custom_tvf)
  return &custom_tvf_;
}
inline const ::zetasql::TableValuedFunctionProto& SimpleCatalogProto::custom_tvf(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleCatalogProto.custom_tvf)
  return custom_tvf_.Get(index);
}
inline ::zetasql::TableValuedFunctionProto* SimpleCatalogProto::add_custom_tvf() {
  // @@protoc_insertion_point(field_add:zetasql.SimpleCatalogProto.custom_tvf)
  return custom_tvf_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::TableValuedFunctionProto >&
SimpleCatalogProto::custom_tvf() const {
  // @@protoc_insertion_point(field_list:zetasql.SimpleCatalogProto.custom_tvf)
  return custom_tvf_;
}

// optional int32 file_descriptor_set_index = 7 [default = -1];
inline bool SimpleCatalogProto::has_file_descriptor_set_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SimpleCatalogProto::set_has_file_descriptor_set_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SimpleCatalogProto::clear_has_file_descriptor_set_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SimpleCatalogProto::clear_file_descriptor_set_index() {
  file_descriptor_set_index_ = -1;
  clear_has_file_descriptor_set_index();
}
inline ::google::protobuf::int32 SimpleCatalogProto::file_descriptor_set_index() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleCatalogProto.file_descriptor_set_index)
  return file_descriptor_set_index_;
}
inline void SimpleCatalogProto::set_file_descriptor_set_index(::google::protobuf::int32 value) {
  set_has_file_descriptor_set_index();
  file_descriptor_set_index_ = value;
  // @@protoc_insertion_point(field_set:zetasql.SimpleCatalogProto.file_descriptor_set_index)
}

// repeated .zetasql.ProcedureProto procedure = 8;
inline int SimpleCatalogProto::procedure_size() const {
  return procedure_.size();
}
inline ::zetasql::ProcedureProto* SimpleCatalogProto::mutable_procedure(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleCatalogProto.procedure)
  return procedure_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ProcedureProto >*
SimpleCatalogProto::mutable_procedure() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.SimpleCatalogProto.procedure)
  return &procedure_;
}
inline const ::zetasql::ProcedureProto& SimpleCatalogProto::procedure(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleCatalogProto.procedure)
  return procedure_.Get(index);
}
inline ::zetasql::ProcedureProto* SimpleCatalogProto::add_procedure() {
  // @@protoc_insertion_point(field_add:zetasql.SimpleCatalogProto.procedure)
  return procedure_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ProcedureProto >&
SimpleCatalogProto::procedure() const {
  // @@protoc_insertion_point(field_list:zetasql.SimpleCatalogProto.procedure)
  return procedure_;
}

// repeated .zetasql.SimpleConstantProto constant = 10;
inline int SimpleCatalogProto::constant_size() const {
  return constant_.size();
}
inline ::zetasql::SimpleConstantProto* SimpleCatalogProto::mutable_constant(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleCatalogProto.constant)
  return constant_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::SimpleConstantProto >*
SimpleCatalogProto::mutable_constant() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.SimpleCatalogProto.constant)
  return &constant_;
}
inline const ::zetasql::SimpleConstantProto& SimpleCatalogProto::constant(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleCatalogProto.constant)
  return constant_.Get(index);
}
inline ::zetasql::SimpleConstantProto* SimpleCatalogProto::add_constant() {
  // @@protoc_insertion_point(field_add:zetasql.SimpleCatalogProto.constant)
  return constant_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::SimpleConstantProto >&
SimpleCatalogProto::constant() const {
  // @@protoc_insertion_point(field_list:zetasql.SimpleCatalogProto.constant)
  return constant_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_zetasql_2fproto_2fsimple_5fcatalog_2eproto
