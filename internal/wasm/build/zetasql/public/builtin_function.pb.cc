// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/builtin_function.proto

#include "zetasql/public/builtin_function.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace zetasql {
}  // namespace zetasql
namespace protobuf_zetasql_2fpublic_2fbuiltin_5ffunction_2eproto {
void InitDefaults() {
}

const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];
const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "zetasql/public/builtin_function.proto", schemas, file_default_instances, TableStruct::offsets,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n%zetasql/public/builtin_function.proto\022"
      "\007zetasql*\215\245\001\n\023FunctionSignatureId\022@\n3__F"
      "unctionSignatureId__switch_must_have_a_d"
      "efault__\020\377\377\377\377\377\377\377\377\377\001\022\032\n\026FN_INVALID_FUNCTI"
      "ON_ID\020\001\022\021\n\rFN_ADD_DOUBLE\020\002\022\020\n\014FN_ADD_INT"
      "64\020\004\022\021\n\rFN_ADD_UINT64\020w\022\023\n\016FN_ADD_NUMERI"
      "C\020\370\001\022\026\n\021FN_ADD_BIGNUMERIC\020\205\002\022\026\n\021FN_ADD_D"
      "ATE_INT64\020\212\002\022\026\n\021FN_ADD_INT64_DATE\020\213\002\022\036\n\031"
      "FN_ADD_TIMESTAMP_INTERVAL\020\230\002\022\036\n\031FN_ADD_I"
      "NTERVAL_TIMESTAMP\020\231\002\022\031\n\024FN_ADD_DATE_INTE"
      "RVAL\020\232\002\022\031\n\024FN_ADD_INTERVAL_DATE\020\233\002\022\035\n\030FN"
      "_ADD_DATETIME_INTERVAL\020\234\002\022\035\n\030FN_ADD_INTE"
      "RVAL_DATETIME\020\235\002\022\035\n\030FN_ADD_INTERVAL_INTE"
      "RVAL\020\241\002\022\n\n\006FN_AND\020\005\022\024\n\020FN_CASE_NO_VALUE\020"
      "\006\022\026\n\022FN_CASE_WITH_VALUE\020\007\022\024\n\020FN_DIVIDE_D"
      "OUBLE\020(\022\026\n\021FN_DIVIDE_NUMERIC\020\372\001\022\031\n\024FN_DI"
      "VIDE_BIGNUMERIC\020\207\002\022\035\n\030FN_DIVIDE_INTERVAL"
      "_INT64\020\255\002\022\016\n\nFN_GREATER\020k\022\034\n\027FN_GREATER_"
      "INT64_UINT64\020\336\001\022\034\n\027FN_GREATER_UINT64_INT"
      "64\020\337\001\022\027\n\023FN_GREATER_OR_EQUAL\020l\022%\n FN_GRE"
      "ATER_OR_EQUAL_INT64_UINT64\020\340\001\022%\n FN_GREA"
      "TER_OR_EQUAL_UINT64_INT64\020\341\001\022\013\n\007FN_LESS\020"
      "i\022\031\n\024FN_LESS_INT64_UINT64\020\342\001\022\031\n\024FN_LESS_"
      "UINT64_INT64\020\343\001\022\024\n\020FN_LESS_OR_EQUAL\020j\022\"\n"
      "\035FN_LESS_OR_EQUAL_INT64_UINT64\020\344\001\022\"\n\035FN_"
      "LESS_OR_EQUAL_UINT64_INT64\020\345\001\022\014\n\010FN_EQUA"
      "L\020*\022\032\n\025FN_EQUAL_INT64_UINT64\020\346\001\022\032\n\025FN_EQ"
      "UAL_UINT64_INT64\020\347\001\022\035\n\030FN_STRING_ARRAY_L"
      "IKE_ANY\020\243\002\022\035\n\030FN_STRING_ARRAY_LIKE_ALL\020\244"
      "\002\022\022\n\016FN_STRING_LIKE\020a\022\027\n\022FN_STRING_LIKE_"
      "ANY\020\245\002\022\027\n\022FN_STRING_LIKE_ALL\020\246\002\022\033\n\026FN_BY"
      "TE_ARRAY_LIKE_ANY\020\247\002\022\033\n\026FN_BYTE_ARRAY_LI"
      "KE_ALL\020\250\002\022\020\n\014FN_BYTE_LIKE\020b\022\025\n\020FN_BYTE_L"
      "IKE_ANY\020\251\002\022\025\n\020FN_BYTE_LIKE_ALL\020\252\002\022\t\n\005FN_"
      "IN\020d\022\020\n\013FN_IN_ARRAY\020\333\001\022\016\n\nFN_BETWEEN\020n\022#"
      "\n\036FN_BETWEEN_INT64_UINT64_UINT64\020\376\001\022\"\n\035F"
      "N_BETWEEN_INT64_UINT64_INT64\020\377\001\022\"\n\035FN_BE"
      "TWEEN_INT64_INT64_UINT64\020\200\002\022\"\n\035FN_BETWEE"
      "N_UINT64_INT64_INT64\020\201\002\022#\n\036FN_BETWEEN_UI"
      "NT64_UINT64_INT64\020\202\002\022#\n\036FN_BETWEEN_UINT6"
      "4_INT64_UINT64\020\203\002\022\016\n\nFN_IS_NULL\020e\022\016\n\nFN_"
      "IS_TRUE\020f\022\017\n\013FN_IS_FALSE\020g\022\026\n\022FN_MULTIPL"
      "Y_DOUBLE\020)\022\025\n\021FN_MULTIPLY_INT64\020,\022\026\n\022FN_"
      "MULTIPLY_UINT64\020r\022\030\n\023FN_MULTIPLY_NUMERIC"
      "\020\373\001\022\033\n\026FN_MULTIPLY_BIGNUMERIC\020\210\002\022\037\n\032FN_M"
      "ULTIPLY_INTERVAL_INT64\020\253\002\022\037\n\032FN_MULTIPLY"
      "_INT64_INTERVAL\020\254\002\022\n\n\006FN_NOT\020-\022\020\n\014FN_NOT"
      "_EQUAL\020m\022\036\n\031FN_NOT_EQUAL_INT64_UINT64\020\350\001"
      "\022\036\n\031FN_NOT_EQUAL_UINT64_INT64\020\351\001\022\t\n\005FN_O"
      "R\020.\022\026\n\022FN_SUBTRACT_DOUBLE\020s\022\025\n\021FN_SUBTRA"
      "CT_INT64\0200\022\026\n\022FN_SUBTRACT_UINT64\020u\022\030\n\023FN"
      "_SUBTRACT_NUMERIC\020\371\001\022\033\n\026FN_SUBTRACT_BIGN"
      "UMERIC\020\206\002\022\033\n\026FN_SUBTRACT_DATE_INT64\020\214\002\022\025"
      "\n\020FN_SUBTRACT_DATE\020\224\002\022\032\n\025FN_SUBTRACT_TIM"
      "ESTAMP\020\225\002\022\031\n\024FN_SUBTRACT_DATETIME\020\226\002\022\025\n\020"
      "FN_SUBTRACT_TIME\020\227\002\022#\n\036FN_SUBTRACT_TIMES"
      "TAMP_INTERVAL\020\236\002\022\036\n\031FN_SUBTRACT_DATE_INT"
      "ERVAL\020\237\002\022\"\n\035FN_SUBTRACT_DATETIME_INTERVA"
      "L\020\240\002\022\"\n\035FN_SUBTRACT_INTERVAL_INTERVAL\020\242\002"
      "\022\030\n\024FN_UNARY_MINUS_INT32\020S\022\030\n\024FN_UNARY_M"
      "INUS_INT64\020T\022\030\n\024FN_UNARY_MINUS_FLOAT\020W\022\031"
      "\n\025FN_UNARY_MINUS_DOUBLE\020X\022\033\n\026FN_UNARY_MI"
      "NUS_NUMERIC\020\374\001\022\036\n\031FN_UNARY_MINUS_BIGNUME"
      "RIC\020\211\002\022\034\n\027FN_UNARY_MINUS_INTERVAL\020\223\002\022\020\n\013"
      "FN_DISTINCT\020\215\002\022\035\n\030FN_DISTINCT_INT64_UINT"
      "64\020\216\002\022\035\n\030FN_DISTINCT_UINT64_INT64\020\217\002\022\024\n\017"
      "FN_NOT_DISTINCT\020\220\002\022!\n\034FN_NOT_DISTINCT_IN"
      "T64_UINT64\020\221\002\022!\n\034FN_NOT_DISTINCT_UINT64_"
      "INT64\020\222\002\022\030\n\024FN_BITWISE_NOT_INT32\020x\022\030\n\024FN"
      "_BITWISE_NOT_INT64\020y\022\031\n\025FN_BITWISE_NOT_U"
      "INT32\020z\022\031\n\025FN_BITWISE_NOT_UINT64\020{\022\031\n\024FN"
      "_BITWISE_NOT_BYTES\020\361\001\022\027\n\023FN_BITWISE_OR_I"
      "NT32\020|\022\027\n\023FN_BITWISE_OR_INT64\020}\022\030\n\024FN_BI"
      "TWISE_OR_UINT32\020~\022\030\n\024FN_BITWISE_OR_UINT6"
      "4\020\177\022\030\n\023FN_BITWISE_OR_BYTES\020\362\001\022\031\n\024FN_BITW"
      "ISE_XOR_INT32\020\200\001\022\031\n\024FN_BITWISE_XOR_INT64"
      "\020\201\001\022\032\n\025FN_BITWISE_XOR_UINT32\020\202\001\022\032\n\025FN_BI"
      "TWISE_XOR_UINT64\020\203\001\022\031\n\024FN_BITWISE_XOR_BY"
      "TES\020\363\001\022\031\n\024FN_BITWISE_AND_INT32\020\204\001\022\031\n\024FN_"
      "BITWISE_AND_INT64\020\205\001\022\032\n\025FN_BITWISE_AND_U"
      "INT32\020\206\001\022\032\n\025FN_BITWISE_AND_UINT64\020\207\001\022\031\n\024"
      "FN_BITWISE_AND_BYTES\020\364\001\022 \n\033FN_BITWISE_LE"
      "FT_SHIFT_INT32\020\210\001\022 \n\033FN_BITWISE_LEFT_SHI"
      "FT_INT64\020\211\001\022!\n\034FN_BITWISE_LEFT_SHIFT_UIN"
      "T32\020\212\001\022!\n\034FN_BITWISE_LEFT_SHIFT_UINT64\020\213"
      "\001\022 \n\033FN_BITWISE_LEFT_SHIFT_BYTES\020\365\001\022!\n\034F"
      "N_BITWISE_RIGHT_SHIFT_INT32\020\214\001\022!\n\034FN_BIT"
      "WISE_RIGHT_SHIFT_INT64\020\215\001\022\"\n\035FN_BITWISE_"
      "RIGHT_SHIFT_UINT32\020\216\001\022\"\n\035FN_BITWISE_RIGH"
      "T_SHIFT_UINT64\020\217\001\022!\n\034FN_BITWISE_RIGHT_SH"
      "IFT_BYTES\020\366\001\022\027\n\022FN_BIT_COUNT_INT32\020\220\001\022\027\n"
      "\022FN_BIT_COUNT_INT64\020\221\001\022\030\n\023FN_BIT_COUNT_U"
      "INT64\020\222\001\022\027\n\022FN_BIT_COUNT_BYTES\020\367\001\022\016\n\tFN_"
      "TYPEOF\020\243\r\022\r\n\010FN_ERROR\020\375\001\022\021\n\rFN_COUNT_STA"
      "R\0209\022\025\n\020FN_CONCAT_STRING\020\350\007\022\024\n\017FN_CONCAT_"
      "BYTES\020\351\007\022\030\n\023FN_CONCAT_OP_STRING\020\247\010\022\027\n\022FN"
      "_CONCAT_OP_BYTES\020\250\010\022\025\n\020FN_STRPOS_STRING\020"
      "\352\007\022\024\n\017FN_STRPOS_BYTES\020\353\007\022\024\n\017FN_INSTR_STR"
      "ING\020\256\010\022\023\n\016FN_INSTR_BYTES\020\257\010\022\024\n\017FN_LOWER_"
      "STRING\020\356\007\022\023\n\016FN_LOWER_BYTES\020\357\007\022\024\n\017FN_UPP"
      "ER_STRING\020\360\007\022\023\n\016FN_UPPER_BYTES\020\361\007\022\025\n\020FN_"
      "LENGTH_STRING\020\362\007\022\024\n\017FN_LENGTH_BYTES\020\363\007\022\032"
      "\n\025FN_STARTS_WITH_STRING\020\364\007\022\031\n\024FN_STARTS_"
      "WITH_BYTES\020\365\007\022\030\n\023FN_ENDS_WITH_STRING\020\366\007\022"
      "\027\n\022FN_ENDS_WITH_BYTES\020\367\007\022\025\n\020FN_SUBSTR_ST"
      "RING\020\370\007\022\024\n\017FN_SUBSTR_BYTES\020\371\007\022\023\n\016FN_TRIM"
      "_STRING\020\372\007\022\022\n\rFN_TRIM_BYTES\020\373\007\022\024\n\017FN_LTR"
      "IM_STRING\020\374\007\022\023\n\016FN_LTRIM_BYTES\020\375\007\022\024\n\017FN_"
      "RTRIM_STRING\020\376\007\022\023\n\016FN_RTRIM_BYTES\020\377\007\022\026\n\021"
      "FN_REPLACE_STRING\020\200\010\022\025\n\020FN_REPLACE_BYTES"
      "\020\201\010\022\033\n\026FN_REGEXP_MATCH_STRING\020\202\010\022\032\n\025FN_R"
      "EGEXP_MATCH_BYTES\020\203\010\022\035\n\030FN_REGEXP_EXTRAC"
      "T_STRING\020\204\010\022\034\n\027FN_REGEXP_EXTRACT_BYTES\020\205"
      "\010\022\035\n\030FN_REGEXP_REPLACE_STRING\020\206\010\022\034\n\027FN_R"
      "EGEXP_REPLACE_BYTES\020\207\010\022!\n\034FN_REGEXP_EXTR"
      "ACT_ALL_STRING\020\210\010\022 \n\033FN_REGEXP_EXTRACT_A"
      "LL_BYTES\020\211\010\022\032\n\025FN_BYTE_LENGTH_STRING\020\212\010\022"
      "\031\n\024FN_BYTE_LENGTH_BYTES\020\213\010\022\032\n\025FN_CHAR_LE"
      "NGTH_STRING\020\214\010\022\025\n\020FN_FORMAT_STRING\020\215\010\022\024\n"
      "\017FN_SPLIT_STRING\020\216\010\022\023\n\016FN_SPLIT_BYTES\020\217\010"
      "\022\036\n\031FN_REGEXP_CONTAINS_STRING\020\220\010\022\035\n\030FN_R"
      "EGEXP_CONTAINS_BYTES\020\221\010\022$\n\037FN_SAFE_CONVE"
      "RT_BYTES_TO_STRING\020\222\010\022\030\n\023FN_NORMALIZE_ST"
      "RING\020\223\010\022%\n FN_NORMALIZE_AND_CASEFOLD_STR"
      "ING\020\224\010\022\021\n\014FN_TO_BASE64\020\225\010\022\023\n\016FN_FROM_BAS"
      "E64\020\226\010\022\016\n\tFN_TO_HEX\020\243\010\022\020\n\013FN_FROM_HEX\020\244\010"
      "\022\021\n\014FN_TO_BASE32\020\245\010\022\023\n\016FN_FROM_BASE32\020\246\010"
      "\022\035\n\030FN_TO_CODE_POINTS_STRING\020\227\010\022\034\n\027FN_TO"
      "_CODE_POINTS_BYTES\020\230\010\022\035\n\030FN_CODE_POINTS_"
      "TO_STRING\020\231\010\022\034\n\027FN_CODE_POINTS_TO_BYTES\020"
      "\232\010\022\022\n\rFN_LPAD_BYTES\020\233\010\022\023\n\016FN_LPAD_STRING"
      "\020\234\010\022\022\n\rFN_RPAD_BYTES\020\235\010\022\023\n\016FN_RPAD_STRIN"
      "G\020\236\010\022\023\n\016FN_LEFT_STRING\020\251\010\022\022\n\rFN_LEFT_BYT"
      "ES\020\252\010\022\024\n\017FN_RIGHT_STRING\020\253\010\022\023\n\016FN_RIGHT_"
      "BYTES\020\254\010\022\024\n\017FN_REPEAT_BYTES\020\237\010\022\025\n\020FN_REP"
      "EAT_STRING\020\240\010\022\026\n\021FN_REVERSE_STRING\020\241\010\022\025\n"
      "\020FN_REVERSE_BYTES\020\242\010\022\026\n\021FN_SOUNDEX_STRIN"
      "G\020\255\010\022\024\n\017FN_ASCII_STRING\020\260\010\022\023\n\016FN_ASCII_B"
      "YTES\020\261\010\022\030\n\023FN_TRANSLATE_STRING\020\262\010\022\027\n\022FN_"
      "TRANSLATE_BYTES\020\263\010\022\026\n\021FN_INITCAP_STRING\020"
      "\264\010\022\026\n\021FN_UNICODE_STRING\020\265\010\022\022\n\rFN_CHR_STR"
      "ING\020\266\010\022\017\n\nFN_COLLATE\020\272\010\022\033\n\026FN_REGEXP_INS"
      "TR_STRING\020\267\010\022\032\n\025FN_REGEXP_INSTR_BYTES\020\270\010"
      "\022\n\n\005FN_IF\020\314\010\022\020\n\013FN_COALESCE\020\315\010\022\016\n\tFN_IFN"
      "ULL\020\316\010\022\016\n\tFN_NULLIF\020\317\010\022\024\n\017FN_CURRENT_DAT"
      "E\020\260\t\022\030\n\023FN_CURRENT_DATETIME\020\214\016\022\024\n\017FN_CUR"
      "RENT_TIME\020\215\016\022\031\n\024FN_CURRENT_TIMESTAMP\020\354\t\022"
      "\025\n\020FN_DATE_ADD_DATE\020\265\t\022\024\n\017FN_DATETIME_AD"
      "D\020\224\016\022\020\n\013FN_TIME_ADD\020\225\016\022\025\n\020FN_TIMESTAMP_A"
      "DD\020\355\t\022\026\n\021FN_DATE_DIFF_DATE\020\272\t\022\025\n\020FN_DATE"
      "TIME_DIFF\020\230\016\022\021\n\014FN_TIME_DIFF\020\231\016\022\026\n\021FN_TI"
      "MESTAMP_DIFF\020\356\t\022\025\n\020FN_DATE_SUB_DATE\020\277\t\022\024"
      "\n\017FN_DATETIME_SUB\020\226\016\022\020\n\013FN_TIME_SUB\020\227\016\022\025"
      "\n\020FN_TIMESTAMP_SUB\020\357\t\022\027\n\022FN_DATE_TRUNC_D"
      "ATE\020\304\t\022\026\n\021FN_DATETIME_TRUNC\020\232\016\022\022\n\rFN_TIM"
      "E_TRUNC\020\233\016\022\027\n\022FN_TIMESTAMP_TRUNC\020\360\t\022\033\n\026F"
      "N_DATE_FROM_UNIX_DATE\020\311\t\022$\n\037FN_TIMESTAMP"
      "_FROM_INT64_SECONDS\020\211\n\022#\n\036FN_TIMESTAMP_F"
      "ROM_INT64_MILLIS\020\212\n\022#\n\036FN_TIMESTAMP_FROM"
      "_INT64_MICROS\020\213\n\022)\n$FN_TIMESTAMP_FROM_UN"
      "IX_SECONDS_INT64\020\243\016\022-\n(FN_TIMESTAMP_FROM"
      "_UNIX_SECONDS_TIMESTAMP\020\244\016\022(\n#FN_TIMESTA"
      "MP_FROM_UNIX_MILLIS_INT64\020\245\016\022,\n\'FN_TIMES"
      "TAMP_FROM_UNIX_MILLIS_TIMESTAMP\020\246\016\022(\n#FN"
      "_TIMESTAMP_FROM_UNIX_MICROS_INT64\020\247\016\022,\n\'"
      "FN_TIMESTAMP_FROM_UNIX_MICROS_TIMESTAMP\020"
      "\250\016\022\021\n\014FN_UNIX_DATE\020\316\t\022#\n\036FN_UNIX_SECONDS"
      "_FROM_TIMESTAMP\020\364\t\022\"\n\035FN_UNIX_MILLIS_FRO"
      "M_TIMESTAMP\020\365\t\022\"\n\035FN_UNIX_MICROS_FROM_TI"
      "MESTAMP\020\366\t\022\033\n\026FN_DATE_FROM_TIMESTAMP\020\367\t\022"
      "\032\n\025FN_DATE_FROM_DATETIME\020\242\016\022\026\n\021FN_DATE_F"
      "ROM_DATE\020\251\016\022\030\n\023FN_DATE_FROM_STRING\020\255\016\022 \n"
      "\033FN_DATE_FROM_YEAR_MONTH_DAY\020\221\n\022\035\n\030FN_TI"
      "MESTAMP_FROM_STRING\020\370\t\022\033\n\026FN_TIMESTAMP_F"
      "ROM_DATE\020\371\t\022\037\n\032FN_TIMESTAMP_FROM_DATETIM"
      "E\020\211\016\022 \n\033FN_TIMESTAMP_FROM_TIMESTAMP\020\252\016\022$"
      "\n\037FN_TIME_FROM_HOUR_MINUTE_SECOND\020\222\n\022\033\n\026"
      "FN_TIME_FROM_TIMESTAMP\020\212\016\022\032\n\025FN_TIME_FRO"
      "M_DATETIME\020\241\016\022\026\n\021FN_TIME_FROM_TIME\020\254\016\022\030\n"
      "\023FN_TIME_FROM_STRING\020\256\016\022#\n\036FN_DATETIME_F"
      "ROM_DATE_AND_TIME\020\223\n\0227\n2FN_DATETIME_FROM"
      "_YEAR_MONTH_DAY_HOUR_MINUTE_SECOND\020\210\016\022\037\n"
      "\032FN_DATETIME_FROM_TIMESTAMP\020\213\016\022\032\n\025FN_DAT"
      "ETIME_FROM_DATE\020\240\016\022\036\n\031FN_DATETIME_FROM_D"
      "ATETIME\020\253\016\022\034\n\027FN_DATETIME_FROM_STRING\020\257\016"
      "\022\030\n\023FN_STRING_FROM_DATE\020\260\016\022\035\n\030FN_STRING_"
      "FROM_TIMESTAMP\020\372\t\022\034\n\027FN_STRING_FROM_DATE"
      "TIME\020\261\016\022\030\n\023FN_STRING_FROM_TIME\020\262\016\022\031\n\024FN_"
      "EXTRACT_FROM_DATE\020\343\t\022\035\n\030FN_EXTRACT_FROM_"
      "DATETIME\020\216\016\022\031\n\024FN_EXTRACT_FROM_TIME\020\217\016\022\036"
      "\n\031FN_EXTRACT_FROM_TIMESTAMP\020\373\t\022\035\n\030FN_EXT"
      "RACT_FROM_INTERVAL\020\301\016\022\"\n\035FN_EXTRACT_DATE"
      "_FROM_DATETIME\020\220\016\022#\n\036FN_EXTRACT_DATE_FRO"
      "M_TIMESTAMP\020\374\t\022\"\n\035FN_EXTRACT_TIME_FROM_D"
      "ATETIME\020\221\016\022#\n\036FN_EXTRACT_TIME_FROM_TIMES"
      "TAMP\020\222\016\022\'\n\"FN_EXTRACT_DATETIME_FROM_TIME"
      "STAMP\020\223\016\022\023\n\016FN_FORMAT_DATE\020\215\n\022\027\n\022FN_FORM"
      "AT_DATETIME\020\234\016\022\023\n\016FN_FORMAT_TIME\020\235\016\022\030\n\023F"
      "N_FORMAT_TIMESTAMP\020\216\n\022\022\n\rFN_PARSE_DATE\020\217"
      "\n\022\026\n\021FN_PARSE_DATETIME\020\236\016\022\022\n\rFN_PARSE_TI"
      "ME\020\237\016\022\027\n\022FN_PARSE_TIMESTAMP\020\220\n\022\025\n\020FN_LAS"
      "T_DAY_DATE\020\263\016\022\031\n\024FN_LAST_DAY_DATETIME\020\264\016"
      "\022\034\n\027FN_INTERVAL_CONSTRUCTOR\020\277\016\022\025\n\020FN_MAK"
      "E_INTERVAL\020\300\016\022\025\n\020FN_JUSTIFY_HOURS\020\302\016\022\024\n\017"
      "FN_JUSTIFY_DAYS\020\303\016\022\030\n\023FN_JUSTIFY_INTERVA"
      "L\020\304\016\022\021\n\014FN_ABS_INT32\020\224\n\022\021\n\014FN_ABS_INT64\020"
      "\225\n\022\022\n\rFN_ABS_UINT32\020\302\n\022\022\n\rFN_ABS_UINT64\020"
      "\303\n\022\021\n\014FN_ABS_FLOAT\020\226\n\022\022\n\rFN_ABS_DOUBLE\020\227"
      "\n\022\023\n\016FN_ABS_NUMERIC\020\317\n\022\026\n\021FN_ABS_BIGNUME"
      "RIC\020\363\n\022\022\n\rFN_SIGN_INT32\020\275\n\022\022\n\rFN_SIGN_IN"
      "T64\020\276\n\022\023\n\016FN_SIGN_UINT32\020\314\n\022\023\n\016FN_SIGN_U"
      "INT64\020\315\n\022\022\n\rFN_SIGN_FLOAT\020\277\n\022\023\n\016FN_SIGN_"
      "DOUBLE\020\300\n\022\024\n\017FN_SIGN_NUMERIC\020\320\n\022\027\n\022FN_SI"
      "GN_BIGNUMERIC\020\364\n\022\024\n\017FN_ROUND_DOUBLE\020\231\n\022\023"
      "\n\016FN_ROUND_FLOAT\020\232\n\022\025\n\020FN_ROUND_NUMERIC\020"
      "\323\n\022\030\n\023FN_ROUND_BIGNUMERIC\020\365\n\022 \n\033FN_ROUND"
      "_WITH_DIGITS_DOUBLE\020\233\n\022\037\n\032FN_ROUND_WITH_"
      "DIGITS_FLOAT\020\234\n\022!\n\034FN_ROUND_WITH_DIGITS_"
      "NUMERIC\020\324\n\022$\n\037FN_ROUND_WITH_DIGITS_BIGNU"
      "MERIC\020\366\n\022\024\n\017FN_TRUNC_DOUBLE\020\235\n\022\023\n\016FN_TRU"
      "NC_FLOAT\020\236\n\022\025\n\020FN_TRUNC_NUMERIC\020\325\n\022\030\n\023FN"
      "_TRUNC_BIGNUMERIC\020\367\n\022 \n\033FN_TRUNC_WITH_DI"
      "GITS_DOUBLE\020\237\n\022\037\n\032FN_TRUNC_WITH_DIGITS_F"
      "LOAT\020\240\n\022!\n\034FN_TRUNC_WITH_DIGITS_NUMERIC\020"
      "\326\n\022$\n\037FN_TRUNC_WITH_DIGITS_BIGNUMERIC\020\374\021"
      "\022\023\n\016FN_CEIL_DOUBLE\020\241\n\022\022\n\rFN_CEIL_FLOAT\020\242"
      "\n\022\024\n\017FN_CEIL_NUMERIC\020\330\n\022\027\n\022FN_CEIL_BIGNU"
      "MERIC\020\361\n\022\024\n\017FN_FLOOR_DOUBLE\020\243\n\022\023\n\016FN_FLO"
      "OR_FLOAT\020\244\n\022\025\n\020FN_FLOOR_NUMERIC\020\331\n\022\030\n\023FN"
      "_FLOOR_BIGNUMERIC\020\362\n\022\021\n\014FN_MOD_INT64\020\305\n\022"
      "\022\n\rFN_MOD_UINT64\020\307\n\022\023\n\016FN_MOD_NUMERIC\020\327\n"
      "\022\026\n\021FN_MOD_BIGNUMERIC\020\375\021\022\021\n\014FN_DIV_INT64"
      "\020\311\n\022\022\n\rFN_DIV_UINT64\020\313\n\022\023\n\016FN_DIV_NUMERI"
      "C\020\322\n\022\026\n\021FN_DIV_BIGNUMERIC\020\376\021\022\016\n\tFN_IS_IN"
      "F\020\245\n\022\016\n\tFN_IS_NAN\020\246\n\022\032\n\025FN_IEEE_DIVIDE_D"
      "OUBLE\020\247\n\022\031\n\024FN_IEEE_DIVIDE_FLOAT\020\250\n\022\032\n\025F"
      "N_SAFE_DIVIDE_DOUBLE\020\316\n\022\033\n\026FN_SAFE_DIVID"
      "E_NUMERIC\020\321\n\022\036\n\031FN_SAFE_DIVIDE_BIGNUMERI"
      "C\020\354\n\022\026\n\021FN_SAFE_ADD_INT64\020\333\n\022\027\n\022FN_SAFE_"
      "ADD_UINT64\020\334\n\022\027\n\022FN_SAFE_ADD_DOUBLE\020\335\n\022\030"
      "\n\023FN_SAFE_ADD_NUMERIC\020\336\n\022\033\n\026FN_SAFE_ADD_"
      "BIGNUMERIC\020\355\n\022\033\n\026FN_SAFE_SUBTRACT_INT64\020"
      "\337\n\022\034\n\027FN_SAFE_SUBTRACT_UINT64\020\340\n\022\034\n\027FN_S"
      "AFE_SUBTRACT_DOUBLE\020\341\n\022\035\n\030FN_SAFE_SUBTRA"
      "CT_NUMERIC\020\342\n\022 \n\033FN_SAFE_SUBTRACT_BIGNUM"
      "ERIC\020\356\n\022\033\n\026FN_SAFE_MULTIPLY_INT64\020\343\n\022\034\n\027"
      "FN_SAFE_MULTIPLY_UINT64\020\344\n\022\034\n\027FN_SAFE_MU"
      "LTIPLY_DOUBLE\020\345\n\022\035\n\030FN_SAFE_MULTIPLY_NUM"
      "ERIC\020\346\n\022 \n\033FN_SAFE_MULTIPLY_BIGNUMERIC\020\357"
      "\n\022\036\n\031FN_SAFE_UNARY_MINUS_INT32\020\347\n\022\036\n\031FN_"
      "SAFE_UNARY_MINUS_INT64\020\350\n\022\036\n\031FN_SAFE_UNA"
      "RY_MINUS_FLOAT\020\351\n\022\037\n\032FN_SAFE_UNARY_MINUS"
      "_DOUBLE\020\352\n\022 \n\033FN_SAFE_UNARY_MINUS_NUMERI"
      "C\020\353\n\022#\n\036FN_SAFE_UNARY_MINUS_BIGNUMERIC\020\360"
      "\n\022\020\n\013FN_GREATEST\020\251\n\022\r\n\010FN_LEAST\020\252\n\022\023\n\016FN"
      "_SQRT_DOUBLE\020\253\n\022\024\n\017FN_SQRT_NUMERIC\020\204\022\022\027\n"
      "\022FN_SQRT_BIGNUMERIC\020\205\022\022\022\n\rFN_POW_DOUBLE\020"
      "\254\n\022\023\n\016FN_POW_NUMERIC\020\332\n\022\026\n\021FN_POW_BIGNUM"
      "ERIC\020\377\021\022\022\n\rFN_EXP_DOUBLE\020\255\n\022\023\n\016FN_EXP_NU"
      "MERIC\020\200\022\022\026\n\021FN_EXP_BIGNUMERIC\020\201\022\022 \n\033FN_N"
      "ATURAL_LOGARITHM_DOUBLE\020\256\n\022!\n\034FN_NATURAL"
      "_LOGARITHM_NUMERIC\020\202\022\022$\n\037FN_NATURAL_LOGA"
      "RITHM_BIGNUMERIC\020\203\022\022 \n\033FN_DECIMAL_LOGARI"
      "THM_DOUBLE\020\301\n\022!\n\034FN_DECIMAL_LOGARITHM_NU"
      "MERIC\020\206\022\022$\n\037FN_DECIMAL_LOGARITHM_BIGNUME"
      "RIC\020\207\022\022\030\n\023FN_LOGARITHM_DOUBLE\020\257\n\022\031\n\024FN_L"
      "OGARITHM_NUMERIC\020\210\022\022\034\n\027FN_LOGARITHM_BIGN"
      "UMERIC\020\211\022\022\025\n\020FN_PARSE_NUMERIC\020\212\022\022\030\n\023FN_P"
      "ARSE_BIGNUMERIC\020\213\022\022\022\n\rFN_COS_DOUBLE\020\260\n\022\023"
      "\n\016FN_COSH_DOUBLE\020\261\n\022\023\n\016FN_ACOS_DOUBLE\020\262\n"
      "\022\024\n\017FN_ACOSH_DOUBLE\020\263\n\022\022\n\rFN_SIN_DOUBLE\020"
      "\264\n\022\023\n\016FN_SINH_DOUBLE\020\265\n\022\023\n\016FN_ASIN_DOUBL"
      "E\020\266\n\022\024\n\017FN_ASINH_DOUBLE\020\267\n\022\022\n\rFN_TAN_DOU"
      "BLE\020\270\n\022\023\n\016FN_TANH_DOUBLE\020\271\n\022\023\n\016FN_ATAN_D"
      "OUBLE\020\272\n\022\024\n\017FN_ATANH_DOUBLE\020\273\n\022\024\n\017FN_ATA"
      "N2_DOUBLE\020\274\n\022\021\n\014FN_ANY_VALUE\020\370\n\022\021\n\014FN_AR"
      "RAY_AGG\020\371\n\022\030\n\023FN_ARRAY_CONCAT_AGG\020\242\013\022\021\n\014"
      "FN_AVG_INT64\020\372\n\022\022\n\rFN_AVG_UINT64\020\373\n\022\022\n\rF"
      "N_AVG_DOUBLE\020\374\n\022\023\n\016FN_AVG_NUMERIC\020\274\013\022\026\n\021"
      "FN_AVG_BIGNUMERIC\020\307\013\022\024\n\017FN_AVG_INTERVAL\020"
      "\322\013\022\r\n\010FN_COUNT\020\375\n\022\013\n\006FN_MAX\020\376\n\022\013\n\006FN_MIN"
      "\020\377\n\022\031\n\024FN_STRING_AGG_STRING\020\200\013\022\037\n\032FN_STR"
      "ING_AGG_DELIM_STRING\020\201\013\022\030\n\023FN_STRING_AGG"
      "_BYTES\020\205\013\022\036\n\031FN_STRING_AGG_DELIM_BYTES\020\206"
      "\013\022\021\n\014FN_SUM_INT64\020\202\013\022\022\n\rFN_SUM_UINT64\020\203\013"
      "\022\022\n\rFN_SUM_DOUBLE\020\204\013\022\023\n\016FN_SUM_NUMERIC\020\273"
      "\013\022\026\n\021FN_SUM_BIGNUMERIC\020\306\013\022\024\n\017FN_SUM_INTE"
      "RVAL\020\321\013\022\025\n\020FN_BIT_AND_INT32\020\207\013\022\025\n\020FN_BIT"
      "_AND_INT64\020\210\013\022\026\n\021FN_BIT_AND_UINT32\020\211\013\022\026\n"
      "\021FN_BIT_AND_UINT64\020\212\013\022\024\n\017FN_BIT_OR_INT32"
      "\020\213\013\022\024\n\017FN_BIT_OR_INT64\020\214\013\022\025\n\020FN_BIT_OR_U"
      "INT32\020\215\013\022\025\n\020FN_BIT_OR_UINT64\020\216\013\022\025\n\020FN_BI"
      "T_XOR_INT32\020\217\013\022\025\n\020FN_BIT_XOR_INT64\020\220\013\022\026\n"
      "\021FN_BIT_XOR_UINT32\020\221\013\022\026\n\021FN_BIT_XOR_UINT"
      "64\020\222\013\022\023\n\016FN_LOGICAL_AND\020\223\013\022\022\n\rFN_LOGICAL"
      "_OR\020\224\013\022\035\n\030FN_APPROX_COUNT_DISTINCT\020\225\013\022\030\n"
      "\023FN_APPROX_QUANTILES\020\226\013\022\030\n\023FN_APPROX_TOP"
      "_COUNT\020\227\013\022\034\n\027FN_APPROX_TOP_SUM_INT64\020\230\013\022"
      "\035\n\030FN_APPROX_TOP_SUM_UINT64\020\231\013\022\035\n\030FN_APP"
      "ROX_TOP_SUM_DOUBLE\020\232\013\022\036\n\031FN_APPROX_TOP_S"
      "UM_NUMERIC\020\275\013\022!\n\034FN_APPROX_TOP_SUM_BIGNU"
      "MERIC\020\310\013\022\027\n\022FN_HLL_COUNT_MERGE\020\244\013\022\031\n\024FN_"
      "HLL_COUNT_EXTRACT\020\245\013\022\034\n\027FN_HLL_COUNT_INI"
      "T_INT64\020\246\013\022\035\n\030FN_HLL_COUNT_INIT_UINT64\020\247"
      "\013\022\036\n\031FN_HLL_COUNT_INIT_NUMERIC\020\276\013\022!\n\034FN_"
      "HLL_COUNT_INIT_BIGNUMERIC\020\311\013\022\035\n\030FN_HLL_C"
      "OUNT_INIT_STRING\020\250\013\022\034\n\027FN_HLL_COUNT_INIT"
      "_BYTES\020\251\013\022\037\n\032FN_HLL_COUNT_MERGE_PARTIAL\020"
      "\252\013\022\014\n\007FN_CORR\020\233\013\022\024\n\017FN_CORR_NUMERIC\020\277\013\022\027"
      "\n\022FN_CORR_BIGNUMERIC\020\320\013\022\021\n\014FN_COVAR_POP\020"
      "\234\013\022\031\n\024FN_COVAR_POP_NUMERIC\020\300\013\022\034\n\027FN_COVA"
      "R_POP_BIGNUMERIC\020\316\013\022\022\n\rFN_COVAR_SAMP\020\235\013\022"
      "\032\n\025FN_COVAR_SAMP_NUMERIC\020\301\013\022\035\n\030FN_COVAR_"
      "SAMP_BIGNUMERIC\020\317\013\022\022\n\rFN_STDDEV_POP\020\236\013\022\032"
      "\n\025FN_STDDEV_POP_NUMERIC\020\302\013\022\035\n\030FN_STDDEV_"
      "POP_BIGNUMERIC\020\312\013\022\023\n\016FN_STDDEV_SAMP\020\237\013\022\033"
      "\n\026FN_STDDEV_SAMP_NUMERIC\020\303\013\022\036\n\031FN_STDDEV"
      "_SAMP_BIGNUMERIC\020\313\013\022\017\n\nFN_VAR_POP\020\240\013\022\027\n\022"
      "FN_VAR_POP_NUMERIC\020\304\013\022\032\n\025FN_VAR_POP_BIGN"
      "UMERIC\020\314\013\022\020\n\013FN_VAR_SAMP\020\241\013\022\030\n\023FN_VAR_SA"
      "MP_NUMERIC\020\305\013\022\033\n\026FN_VAR_SAMP_BIGNUMERIC\020"
      "\315\013\022\017\n\nFN_COUNTIF\020\243\013\022 \n\033FN_KLL_QUANTILES_"
      "INIT_INT64\020\253\013\022!\n\034FN_KLL_QUANTILES_INIT_U"
      "INT64\020\254\013\022!\n\034FN_KLL_QUANTILES_INIT_DOUBLE"
      "\020\255\013\022#\n\036FN_KLL_QUANTILES_MERGE_PARTIAL\020\256\013"
      "\022!\n\034FN_KLL_QUANTILES_MERGE_INT64\020\257\013\022\"\n\035F"
      "N_KLL_QUANTILES_MERGE_UINT64\020\260\013\022\"\n\035FN_KL"
      "L_QUANTILES_MERGE_DOUBLE\020\261\013\022#\n\036FN_KLL_QU"
      "ANTILES_EXTRACT_INT64\020\262\013\022$\n\037FN_KLL_QUANT"
      "ILES_EXTRACT_UINT64\020\263\013\022$\n\037FN_KLL_QUANTIL"
      "ES_EXTRACT_DOUBLE\020\264\013\022\'\n\"FN_KLL_QUANTILES"
      "_MERGE_POINT_INT64\020\265\013\022(\n#FN_KLL_QUANTILE"
      "S_MERGE_POINT_UINT64\020\266\013\022(\n#FN_KLL_QUANTI"
      "LES_MERGE_POINT_DOUBLE\020\267\013\022)\n$FN_KLL_QUAN"
      "TILES_EXTRACT_POINT_INT64\020\270\013\022*\n%FN_KLL_Q"
      "UANTILES_EXTRACT_POINT_UINT64\020\271\013\022*\n%FN_K"
      "LL_QUANTILES_EXTRACT_POINT_DOUBLE\020\272\013\022\022\n\r"
      "FN_DENSE_RANK\020\334\013\022\014\n\007FN_RANK\020\335\013\022\022\n\rFN_ROW"
      "_NUMBER\020\336\013\022\024\n\017FN_PERCENT_RANK\020\337\013\022\021\n\014FN_C"
      "UME_DIST\020\340\013\022\r\n\010FN_NTILE\020\341\013\022\014\n\007FN_LEAD\020\342\013"
      "\022\013\n\006FN_LAG\020\343\013\022\023\n\016FN_FIRST_VALUE\020\344\013\022\022\n\rFN"
      "_LAST_VALUE\020\345\013\022\021\n\014FN_NTH_VALUE\020\346\013\022\027\n\022FN_"
      "PERCENTILE_CONT\020\347\013\022\037\n\032FN_PERCENTILE_CONT"
      "_NUMERIC\020\351\013\022\"\n\035FN_PERCENTILE_CONT_BIGNUM"
      "ERIC\020\353\013\022\027\n\022FN_PERCENTILE_DISC\020\350\013\022\037\n\032FN_P"
      "ERCENTILE_DISC_NUMERIC\020\352\013\022\"\n\035FN_PERCENTI"
      "LE_DISC_BIGNUMERIC\020\354\013\022\037\n\032FN_BIT_CAST_INT"
      "32_TO_INT32\020\304\014\022 \n\033FN_BIT_CAST_UINT32_TO_"
      "INT32\020\305\014\022\037\n\032FN_BIT_CAST_INT64_TO_INT64\020\306"
      "\014\022 \n\033FN_BIT_CAST_UINT64_TO_INT64\020\307\014\022!\n\034F"
      "N_BIT_CAST_UINT32_TO_UINT32\020\310\014\022 \n\033FN_BIT"
      "_CAST_INT32_TO_UINT32\020\311\014\022!\n\034FN_BIT_CAST_"
      "UINT64_TO_UINT64\020\312\014\022 \n\033FN_BIT_CAST_INT64"
      "_TO_UINT64\020\313\014\022\024\n\017FN_SESSION_USER\020\314\014\022\034\n\027F"
      "N_GENERATE_ARRAY_INT64\020\315\014\022\035\n\030FN_GENERATE"
      "_ARRAY_UINT64\020\316\014\022\036\n\031FN_GENERATE_ARRAY_NU"
      "MERIC\020\331\014\022!\n\034FN_GENERATE_ARRAY_BIGNUMERIC"
      "\020\223\r\022\035\n\030FN_GENERATE_ARRAY_DOUBLE\020\317\014\022\033\n\026FN"
      "_GENERATE_DATE_ARRAY\020\320\014\022 \n\033FN_GENERATE_T"
      "IMESTAMP_ARRAY\020\321\014\022\025\n\020FN_ARRAY_REVERSE\020\325\014"
      "\022\024\n\017FN_RANGE_BUCKET\020\220\r\022\014\n\007FN_RAND\020\322\014\022\025\n\020"
      "FN_GENERATE_UUID\020\217\r\022\024\n\017FN_JSON_EXTRACT\020\323"
      "\014\022\031\n\024FN_JSON_EXTRACT_JSON\020\224\r\022\033\n\026FN_JSON_"
      "EXTRACT_SCALAR\020\324\014\022 \n\033FN_JSON_EXTRACT_SCA"
      "LAR_JSON\020\225\r\022\032\n\025FN_JSON_EXTRACT_ARRAY\020\221\r\022"
      "\037\n\032FN_JSON_EXTRACT_ARRAY_JSON\020\233\r\022!\n\034FN_J"
      "SON_EXTRACT_STRING_ARRAY\020\230\r\022&\n!FN_JSON_E"
      "XTRACT_STRING_ARRAY_JSON\020\234\r\022\030\n\023FN_JSON_Q"
      "UERY_ARRAY\020\235\r\022\035\n\030FN_JSON_QUERY_ARRAY_JSO"
      "N\020\236\r\022\030\n\023FN_JSON_VALUE_ARRAY\020\237\r\022\035\n\030FN_JSO"
      "N_VALUE_ARRAY_JSON\020\240\r\022\034\n\027FN_JSON_SUBSCRI"
      "PT_INT64\020\231\r\022\035\n\030FN_JSON_SUBSCRIPT_STRING\020"
      "\232\r\022\026\n\021FN_TO_JSON_STRING\020\326\014\022\017\n\nFN_TO_JSON"
      "\020\241\r\022\022\n\rFN_JSON_QUERY\020\327\014\022\027\n\022FN_JSON_QUERY"
      "_JSON\020\226\r\022\022\n\rFN_JSON_VALUE\020\330\014\022\027\n\022FN_JSON_"
      "VALUE_JSON\020\227\r\022\022\n\rFN_PARSE_JSON\020\242\r\022\034\n\027FN_"
      "FROM_PROTO_TIMESTAMP\020\332\014\022\027\n\022FN_FROM_PROTO"
      "_DATE\020\333\014\022\036\n\031FN_FROM_PROTO_TIME_OF_DAY\020\334\014"
      "\022\031\n\024FN_FROM_PROTO_DOUBLE\020\336\014\022\030\n\023FN_FROM_P"
      "ROTO_FLOAT\020\337\014\022\030\n\023FN_FROM_PROTO_INT64\020\340\014\022"
      "\031\n\024FN_FROM_PROTO_UINT64\020\341\014\022\030\n\023FN_FROM_PR"
      "OTO_INT32\020\342\014\022\031\n\024FN_FROM_PROTO_UINT32\020\343\014\022"
      "\027\n\022FN_FROM_PROTO_BOOL\020\344\014\022\030\n\023FN_FROM_PROT"
      "O_BYTES\020\345\014\022\031\n\024FN_FROM_PROTO_STRING\020\346\014\022\'\n"
      "\"FN_FROM_PROTO_IDEMPOTENT_TIMESTAMP\020\347\014\022\""
      "\n\035FN_FROM_PROTO_IDEMPOTENT_DATE\020\350\014\022\"\n\035FN"
      "_FROM_PROTO_IDEMPOTENT_TIME\020\351\014\022$\n\037FN_FRO"
      "M_PROTO_IDEMPOTENT_DOUBLE\020\353\014\022#\n\036FN_FROM_"
      "PROTO_IDEMPOTENT_FLOAT\020\354\014\022#\n\036FN_FROM_PRO"
      "TO_IDEMPOTENT_INT64\020\355\014\022$\n\037FN_FROM_PROTO_"
      "IDEMPOTENT_UINT64\020\356\014\022#\n\036FN_FROM_PROTO_ID"
      "EMPOTENT_INT32\020\357\014\022$\n\037FN_FROM_PROTO_IDEMP"
      "OTENT_UINT32\020\360\014\022\"\n\035FN_FROM_PROTO_IDEMPOT"
      "ENT_BOOL\020\361\014\022#\n\036FN_FROM_PROTO_IDEMPOTENT_"
      "BYTES\020\362\014\022$\n\037FN_FROM_PROTO_IDEMPOTENT_STR"
      "ING\020\363\014\022\032\n\025FN_TO_PROTO_TIMESTAMP\020\364\014\022\025\n\020FN"
      "_TO_PROTO_DATE\020\365\014\022\025\n\020FN_TO_PROTO_TIME\020\366\014"
      "\022\027\n\022FN_TO_PROTO_DOUBLE\020\370\014\022\026\n\021FN_TO_PROTO"
      "_FLOAT\020\371\014\022\026\n\021FN_TO_PROTO_INT64\020\372\014\022\027\n\022FN_"
      "TO_PROTO_UINT64\020\373\014\022\026\n\021FN_TO_PROTO_INT32\020"
      "\374\014\022\027\n\022FN_TO_PROTO_UINT32\020\375\014\022\025\n\020FN_TO_PRO"
      "TO_BOOL\020\376\014\022\026\n\021FN_TO_PROTO_BYTES\020\377\014\022\027\n\022FN"
      "_TO_PROTO_STRING\020\200\r\022%\n FN_TO_PROTO_IDEMP"
      "OTENT_TIMESTAMP\020\201\r\022 \n\033FN_TO_PROTO_IDEMPO"
      "TENT_DATE\020\202\r\022\'\n\"FN_TO_PROTO_IDEMPOTENT_T"
      "IME_OF_DAY\020\203\r\022\"\n\035FN_TO_PROTO_IDEMPOTENT_"
      "DOUBLE\020\205\r\022!\n\034FN_TO_PROTO_IDEMPOTENT_FLOA"
      "T\020\206\r\022!\n\034FN_TO_PROTO_IDEMPOTENT_INT64\020\207\r\022"
      "\"\n\035FN_TO_PROTO_IDEMPOTENT_UINT64\020\210\r\022!\n\034F"
      "N_TO_PROTO_IDEMPOTENT_INT32\020\211\r\022\"\n\035FN_TO_"
      "PROTO_IDEMPOTENT_UINT32\020\212\r\022 \n\033FN_TO_PROT"
      "O_IDEMPOTENT_BOOL\020\213\r\022!\n\034FN_TO_PROTO_IDEM"
      "POTENT_BYTES\020\214\r\022\"\n\035FN_TO_PROTO_IDEMPOTEN"
      "T_STRING\020\215\r\022\035\n\030FN_PROTO_DEFAULT_IF_NULL\020"
      "\216\r\022#\n\036FN_ENUM_VALUE_DESCRIPTOR_PROTO\020\222\r\022"
      "\025\n\020FN_NET_FORMAT_IP\020\244\r\022\024\n\017FN_NET_PARSE_I"
      "P\020\245\r\022\034\n\027FN_NET_FORMAT_PACKED_IP\020\246\r\022\033\n\026FN"
      "_NET_PARSE_PACKED_IP\020\247\r\022\025\n\020FN_NET_IP_IN_"
      "NET\020\250\r\022\024\n\017FN_NET_MAKE_NET\020\251\r\022\020\n\013FN_NET_H"
      "OST\020\252\r\022\026\n\021FN_NET_REG_DOMAIN\020\253\r\022\031\n\024FN_NET"
      "_PUBLIC_SUFFIX\020\254\r\022\032\n\025FN_NET_IP_FROM_STRI"
      "NG\020\255\r\022\037\n\032FN_NET_SAFE_IP_FROM_STRING\020\256\r\022\030"
      "\n\023FN_NET_IP_TO_STRING\020\257\r\022\027\n\022FN_NET_IP_NE"
      "T_MASK\020\260\r\022\024\n\017FN_NET_IP_TRUNC\020\261\r\022\033\n\026FN_NE"
      "T_IPV4_FROM_INT64\020\262\r\022\031\n\024FN_NET_IPV4_TO_I"
      "NT64\020\263\r\022\021\n\014FN_MD5_BYTES\020\354\016\022\022\n\rFN_MD5_STR"
      "ING\020\355\016\022\022\n\rFN_SHA1_BYTES\020\356\016\022\023\n\016FN_SHA1_ST"
      "RING\020\357\016\022\024\n\017FN_SHA256_BYTES\020\360\016\022\025\n\020FN_SHA2"
      "56_STRING\020\361\016\022\024\n\017FN_SHA512_BYTES\020\362\016\022\025\n\020FN"
      "_SHA512_STRING\020\363\016\022\036\n\031FN_FARM_FINGERPRINT"
      "_BYTES\020\364\016\022\037\n\032FN_FARM_FINGERPRINT_STRING\020"
      "\365\016\022\027\n\022FN_KEYS_NEW_KEYSET\020\366\016\022#\n\036FN_KEYS_A"
      "DD_KEY_FROM_RAW_BYTES\020\367\016\022\032\n\025FN_KEYS_ROTA"
      "TE_KEYSET\020\370\016\022\032\n\025FN_KEYS_KEYSET_LENGTH\020\371\016"
      "\022\033\n\026FN_KEYS_KEYSET_TO_JSON\020\372\016\022\035\n\030FN_KEYS"
      "_KEYSET_FROM_JSON\020\373\016\022,\n\'FN_KEYS_KEYSET_C"
      "HAIN_STRING_BYTES_BYTES\020\210\017\022&\n!FN_KEYS_KE"
      "YSET_CHAIN_STRING_BYTES\020\211\017\022\032\n\025FN_KMS_ENC"
      "RYPT_STRING\020\200\017\022\031\n\024FN_KMS_ENCRYPT_BYTES\020\201"
      "\017\022\032\n\025FN_KMS_DECRYPT_STRING\020\202\017\022\031\n\024FN_KMS_"
      "DECRYPT_BYTES\020\203\017\022$\n\037FN_AEAD_ENVELOPE_ENC"
      "RYPT_STRING\020\204\017\022#\n\036FN_AEAD_ENVELOPE_ENCRY"
      "PT_BYTES\020\205\017\022$\n\037FN_AEAD_ENVELOPE_DECRYPT_"
      "STRING\020\206\017\022#\n\036FN_AEAD_ENVELOPE_DECRYPT_BY"
      "TES\020\207\017\022\033\n\026FN_AEAD_ENCRYPT_STRING\020\374\016\022\032\n\025F"
      "N_AEAD_ENCRYPT_BYTES\020\375\016\022\"\n\035FN_AEAD_ENCRY"
      "PT_STRUCT_STRING\020\212\017\022!\n\034FN_AEAD_ENCRYPT_S"
      "TRUCT_BYTES\020\213\017\022\033\n\026FN_AEAD_DECRYPT_STRING"
      "\020\376\016\022\032\n\025FN_AEAD_DECRYPT_BYTES\020\377\016\022\"\n\035FN_AE"
      "AD_DECRYPT_STRUCT_STRING\020\214\017\022!\n\034FN_AEAD_D"
      "ECRYPT_STRUCT_BYTES\020\215\017\022$\n\037FN_DETERMINIST"
      "IC_ENCRYPT_STRING\020\216\017\022#\n\036FN_DETERMINISTIC"
      "_ENCRYPT_BYTES\020\217\017\022$\n\037FN_DETERMINISTIC_DE"
      "CRYPT_STRING\020\220\017\022#\n\036FN_DETERMINISTIC_DECR"
      "YPT_BYTES\020\221\017\022+\n&FN_DETERMINISTIC_ENCRYPT"
      "_STRUCT_STRING\020\222\017\022*\n%FN_DETERMINISTIC_EN"
      "CRYPT_STRUCT_BYTES\020\223\017\022+\n&FN_DETERMINISTI"
      "C_DECRYPT_STRUCT_STRING\020\224\017\022*\n%FN_DETERMI"
      "NISTIC_DECRYPT_STRUCT_BYTES\020\225\017\022\025\n\020FN_ST_"
      "GEOG_POINT\020\320\017\022\024\n\017FN_ST_MAKE_LINE\020\321\017\022\032\n\025F"
      "N_ST_MAKE_LINE_ARRAY\020\322\017\022\027\n\022FN_ST_MAKE_PO"
      "LYGON\020\323\017\022 \n\033FN_ST_MAKE_POLYGON_ORIENTED\020"
      "\324\017\022\027\n\022FN_ST_INTERSECTION\020\327\017\022\020\n\013FN_ST_UNI"
      "ON\020\330\017\022\026\n\021FN_ST_UNION_ARRAY\020\331\017\022\025\n\020FN_ST_D"
      "IFFERENCE\020\332\017\022\026\n\021FN_ST_UNARY_UNION\020\333\017\022\023\n\016"
      "FN_ST_CENTROID\020\334\017\022\021\n\014FN_ST_BUFFER\020\335\017\022 \n\033"
      "FN_ST_BUFFER_WITH_TOLERANCE\020\336\017\022\023\n\016FN_ST_"
      "SIMPLIFY\020\337\017\022\027\n\022FN_ST_SNAP_TO_GRID\020\340\017\022\030\n\023"
      "FN_ST_CLOSEST_POINT\020\341\017\022\023\n\016FN_ST_BOUNDARY"
      "\020\342\017\022\025\n\020FN_ST_CONVEXHULL\020\221\020\022\027\n\022FN_ST_EXTE"
      "RIORRING\020\236\020\022\030\n\023FN_ST_INTERIORRINGS\020\237\020\022\021\n"
      "\014FN_ST_EQUALS\020\344\017\022\025\n\020FN_ST_INTERSECTS\020\345\017\022"
      "\023\n\016FN_ST_CONTAINS\020\346\017\022\021\n\014FN_ST_COVERS\020\347\017\022"
      "\023\n\016FN_ST_DISJOINT\020\350\017\022\031\n\024FN_ST_INTERSECTS"
      "_BOX\020\351\017\022\022\n\rFN_ST_DWITHIN\020\352\017\022\021\n\014FN_ST_WIT"
      "HIN\020\353\017\022\024\n\017FN_ST_COVEREDBY\020\354\017\022\022\n\rFN_ST_TO"
      "UCHES\020\355\017\022\023\n\016FN_ST_IS_EMPTY\020\356\017\022\030\n\023FN_ST_I"
      "S_COLLECTION\020\357\017\022\024\n\017FN_ST_DIMENSION\020\360\017\022\025\n"
      "\020FN_ST_NUM_POINTS\020\361\017\022\031\n\024FN_ST_NUM_GEOMET"
      "RIES\020\362\017\022\030\n\023FN_ST_GEOMETRY_TYPE\020\363\017\022\017\n\nFN_"
      "ST_DUMP\020\220\020\022\022\n\rFN_ST_POINT_N\020\233\020\022\026\n\021FN_ST_"
      "START_POINT\020\234\020\022\024\n\017FN_ST_END_POINT\020\235\020\022\021\n\014"
      "FN_ST_LENGTH\020\370\017\022\024\n\017FN_ST_PERIMETER\020\371\017\022\017\n"
      "\nFN_ST_AREA\020\372\017\022\023\n\016FN_ST_DISTANCE\020\373\017\022\027\n\022F"
      "N_ST_MAX_DISTANCE\020\374\017\022\022\n\rFN_ST_AZIMUTH\020\240\020"
      "\022\020\n\013FN_ST_ANGLE\020\241\020\022\031\n\024FN_ST_GEOG_FROM_TE"
      "XT\020\202\020\022\035\n\030FN_ST_GEOG_FROM_TEXT_EXT\020\214\020\022\030\n\023"
      "FN_ST_GEOG_FROM_KML\020\203\020\022\035\n\030FN_ST_GEOG_FRO"
      "M_GEO_JSON\020\204\020\022!\n\034FN_ST_GEOG_FROM_GEO_JSO"
      "N_EXT\020\224\020\022\030\n\023FN_ST_GEOG_FROM_WKB\020\210\020\022\034\n\027FN"
      "_ST_GEOG_FROM_WKB_HEX\020\230\020\022\033\n\026FN_ST_GEOG_F"
      "ROM_STRING\020\231\020\022\032\n\025FN_ST_GEOG_FROM_BYTES\020\232"
      "\020\022\022\n\rFN_ST_AS_TEXT\020\205\020\022\021\n\014FN_ST_AS_KML\020\206\020"
      "\022\026\n\021FN_ST_AS_GEO_JSON\020\207\020\022\024\n\017FN_ST_AS_BIN"
      "ARY\020\211\020\022\022\n\rFN_ST_GEOHASH\020\212\020\022\"\n\035FN_ST_GEOG"
      "_POINT_FROM_GEOHASH\020\213\020\022\024\n\017FN_ST_UNION_AG"
      "G\020\215\020\022\020\n\013FN_ST_ACCUM\020\216\020\022\027\n\022FN_ST_CENTROID"
      "_AGG\020\217\020\022\034\n\027FN_ST_NEAREST_NEIGHBORS\020\223\020\022\021\n"
      "\014FN_ST_EXTENT\020\243\020\022\032\n\025FN_S2_COVERINGCELLID"
      "S\020\242\020\022\032\n\025FN_S2_CELLIDFROMPOINT\020\245\020\022\014\n\007FN_S"
      "T_X\020\226\020\022\014\n\007FN_ST_Y\020\227\020\022\030\n\023FN_ST_CLUSTERDBS"
      "CAN\020\222\020\022\027\n\022FN_ST_BOUNDING_BOX\020\244\020\022\022\n\rFN_AN"
      "ON_COUNT\020\230\021\022\027\n\022FN_ANON_COUNT_STAR\020\231\021\022\026\n\021"
      "FN_ANON_SUM_INT64\020\232\021\022\027\n\022FN_ANON_SUM_UINT"
      "64\020\233\021\022\027\n\022FN_ANON_SUM_DOUBLE\020\234\021\022\030\n\023FN_ANO"
      "N_SUM_NUMERIC\020\235\021\022\027\n\022FN_ANON_AVG_DOUBLE\020\236"
      "\021\022\030\n\023FN_ANON_AVG_NUMERIC\020\237\021\022\033\n\026FN_ANON_V"
      "AR_POP_DOUBLE\020\240\021\022!\n\034FN_ANON_VAR_POP_DOUB"
      "LE_ARRAY\020\241\021\022\036\n\031FN_ANON_STDDEV_POP_DOUBLE"
      "\020\242\021\022$\n\037FN_ANON_STDDEV_POP_DOUBLE_ARRAY\020\243"
      "\021\022#\n\036FN_ANON_PERCENTILE_CONT_DOUBLE\020\244\021\022)"
      "\n$FN_ANON_PERCENTILE_CONT_DOUBLE_ARRAY\020\245"
      "\021\022\017\n\nFN_FLATTEN\020\304\023\022\027\n\022FN_ARRAY_AT_OFFSET"
      "\020\352\001\022\030\n\023FN_ARRAY_AT_ORDINAL\020\353\001\022\024\n\017FN_ARRA"
      "Y_CONCAT\020\354\001\022\027\n\022FN_ARRAY_CONCAT_OP\020\204\002\022\024\n\017"
      "FN_ARRAY_LENGTH\020\334\001\022\026\n\021FN_ARRAY_TO_BYTES\020"
      "\356\001\022\027\n\022FN_ARRAY_TO_STRING\020\355\001\022\022\n\rFN_MAKE_A"
      "RRAY\020\332\001\022\034\n\027FN_SAFE_ARRAY_AT_OFFSET\020\357\001\022\035\n"
      "\030FN_SAFE_ARRAY_AT_ORDINAL\020\360\001\022\031\n\024FN_ARRAY"
      "_IS_DISTINCT\020\305\023\022\030\n\023FN_PROTO_MAP_AT_KEY\020\306"
      "\023\022\035\n\030FN_SAFE_PROTO_MAP_AT_KEY\020\307\023\022\022\n\rFN_M"
      "ODIFY_MAP\020\316\023\022\024\n\017FN_ARRAY_FILTER\020\310\023\022\037\n\032FN"
      "_ARRAY_FILTER_WITH_INDEX\020\311\023\022\027\n\022FN_ARRAY_"
      "TRANSFORM\020\312\023\022\"\n\035FN_ARRAY_TRANSFORM_WITH_"
      "INDEX\020\313\023\022\024\n\017FN_CONTAINS_KEY\020\314\023\022\026\n\021FN_ARR"
      "AY_INCLUDES\020\317\023\022\035\n\030FN_ARRAY_INCLUDES_LAMB"
      "DA\020\320\023\022\032\n\025FN_ARRAY_INCLUDES_ANY\020\321\023\022\025\n\020FN_"
      "JSON_TO_INT64\020\250\024\022\024\n\017FN_JSON_TO_BOOL\020\251\024\022\026"
      "\n\021FN_JSON_TO_STRING\020\252\024\022\021\n\014FN_JSON_TYPE\020\253"
      "\024\022\026\n\021FN_JSON_TO_DOUBLE\020\254\024B%\n\022com.google."
      "zetasqlB\017ZetaSQLFunction"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 21224);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zetasql/public/builtin_function.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_zetasql_2fpublic_2fbuiltin_5ffunction_2eproto
namespace zetasql {
const ::google::protobuf::EnumDescriptor* FunctionSignatureId_descriptor() {
  protobuf_zetasql_2fpublic_2fbuiltin_5ffunction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fpublic_2fbuiltin_5ffunction_2eproto::file_level_enum_descriptors[0];
}
bool FunctionSignatureId_IsValid(int value) {
  switch (value) {
    case -1:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 40:
    case 41:
    case 42:
    case 44:
    case 45:
    case 46:
    case 48:
    case 57:
    case 83:
    case 84:
    case 87:
    case 88:
    case 97:
    case 98:
    case 100:
    case 101:
    case 102:
    case 103:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 114:
    case 115:
    case 117:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 218:
    case 219:
    case 220:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 296:
    case 297:
    case 298:
    case 299:
    case 300:
    case 301:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1020:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1035:
    case 1036:
    case 1037:
    case 1038:
    case 1039:
    case 1040:
    case 1041:
    case 1042:
    case 1043:
    case 1044:
    case 1045:
    case 1046:
    case 1047:
    case 1048:
    case 1049:
    case 1050:
    case 1051:
    case 1052:
    case 1053:
    case 1054:
    case 1055:
    case 1056:
    case 1057:
    case 1058:
    case 1059:
    case 1060:
    case 1061:
    case 1062:
    case 1063:
    case 1064:
    case 1065:
    case 1066:
    case 1067:
    case 1068:
    case 1069:
    case 1070:
    case 1071:
    case 1072:
    case 1073:
    case 1074:
    case 1075:
    case 1076:
    case 1077:
    case 1078:
    case 1079:
    case 1080:
    case 1082:
    case 1100:
    case 1101:
    case 1102:
    case 1103:
    case 1200:
    case 1205:
    case 1210:
    case 1215:
    case 1220:
    case 1225:
    case 1230:
    case 1251:
    case 1260:
    case 1261:
    case 1262:
    case 1263:
    case 1264:
    case 1268:
    case 1269:
    case 1270:
    case 1271:
    case 1272:
    case 1273:
    case 1274:
    case 1275:
    case 1276:
    case 1289:
    case 1290:
    case 1291:
    case 1293:
    case 1294:
    case 1295:
    case 1296:
    case 1297:
    case 1298:
    case 1299:
    case 1300:
    case 1301:
    case 1302:
    case 1303:
    case 1305:
    case 1306:
    case 1307:
    case 1308:
    case 1309:
    case 1310:
    case 1311:
    case 1312:
    case 1313:
    case 1314:
    case 1315:
    case 1316:
    case 1317:
    case 1318:
    case 1319:
    case 1320:
    case 1321:
    case 1322:
    case 1323:
    case 1324:
    case 1325:
    case 1326:
    case 1327:
    case 1328:
    case 1329:
    case 1330:
    case 1331:
    case 1332:
    case 1333:
    case 1334:
    case 1335:
    case 1336:
    case 1337:
    case 1338:
    case 1339:
    case 1340:
    case 1341:
    case 1342:
    case 1343:
    case 1344:
    case 1345:
    case 1346:
    case 1347:
    case 1349:
    case 1351:
    case 1353:
    case 1355:
    case 1356:
    case 1357:
    case 1358:
    case 1359:
    case 1360:
    case 1361:
    case 1362:
    case 1363:
    case 1364:
    case 1365:
    case 1366:
    case 1367:
    case 1368:
    case 1369:
    case 1370:
    case 1371:
    case 1372:
    case 1373:
    case 1374:
    case 1375:
    case 1376:
    case 1377:
    case 1378:
    case 1379:
    case 1380:
    case 1381:
    case 1382:
    case 1383:
    case 1384:
    case 1385:
    case 1386:
    case 1387:
    case 1388:
    case 1389:
    case 1390:
    case 1391:
    case 1392:
    case 1393:
    case 1394:
    case 1395:
    case 1396:
    case 1397:
    case 1398:
    case 1399:
    case 1400:
    case 1401:
    case 1402:
    case 1403:
    case 1404:
    case 1405:
    case 1406:
    case 1407:
    case 1408:
    case 1409:
    case 1410:
    case 1411:
    case 1412:
    case 1413:
    case 1414:
    case 1415:
    case 1416:
    case 1417:
    case 1418:
    case 1419:
    case 1420:
    case 1421:
    case 1422:
    case 1423:
    case 1424:
    case 1425:
    case 1426:
    case 1427:
    case 1428:
    case 1429:
    case 1430:
    case 1431:
    case 1432:
    case 1433:
    case 1434:
    case 1435:
    case 1436:
    case 1437:
    case 1438:
    case 1439:
    case 1440:
    case 1441:
    case 1442:
    case 1443:
    case 1444:
    case 1445:
    case 1446:
    case 1447:
    case 1448:
    case 1449:
    case 1450:
    case 1451:
    case 1452:
    case 1453:
    case 1454:
    case 1455:
    case 1456:
    case 1457:
    case 1458:
    case 1459:
    case 1460:
    case 1461:
    case 1462:
    case 1463:
    case 1464:
    case 1465:
    case 1466:
    case 1467:
    case 1468:
    case 1469:
    case 1470:
    case 1471:
    case 1472:
    case 1473:
    case 1474:
    case 1475:
    case 1476:
    case 1477:
    case 1478:
    case 1479:
    case 1480:
    case 1481:
    case 1482:
    case 1483:
    case 1484:
    case 1485:
    case 1486:
    case 1487:
    case 1488:
    case 1489:
    case 1490:
    case 1500:
    case 1501:
    case 1502:
    case 1503:
    case 1504:
    case 1505:
    case 1506:
    case 1507:
    case 1508:
    case 1509:
    case 1510:
    case 1511:
    case 1512:
    case 1513:
    case 1514:
    case 1515:
    case 1516:
    case 1604:
    case 1605:
    case 1606:
    case 1607:
    case 1608:
    case 1609:
    case 1610:
    case 1611:
    case 1612:
    case 1613:
    case 1614:
    case 1615:
    case 1616:
    case 1617:
    case 1618:
    case 1619:
    case 1620:
    case 1621:
    case 1622:
    case 1623:
    case 1624:
    case 1625:
    case 1626:
    case 1627:
    case 1628:
    case 1630:
    case 1631:
    case 1632:
    case 1633:
    case 1634:
    case 1635:
    case 1636:
    case 1637:
    case 1638:
    case 1639:
    case 1640:
    case 1641:
    case 1643:
    case 1644:
    case 1645:
    case 1646:
    case 1647:
    case 1648:
    case 1649:
    case 1650:
    case 1651:
    case 1652:
    case 1653:
    case 1654:
    case 1656:
    case 1657:
    case 1658:
    case 1659:
    case 1660:
    case 1661:
    case 1662:
    case 1663:
    case 1664:
    case 1665:
    case 1666:
    case 1667:
    case 1669:
    case 1670:
    case 1671:
    case 1672:
    case 1673:
    case 1674:
    case 1675:
    case 1676:
    case 1677:
    case 1678:
    case 1679:
    case 1680:
    case 1681:
    case 1682:
    case 1683:
    case 1684:
    case 1685:
    case 1686:
    case 1687:
    case 1688:
    case 1689:
    case 1690:
    case 1691:
    case 1692:
    case 1693:
    case 1694:
    case 1695:
    case 1696:
    case 1697:
    case 1698:
    case 1699:
    case 1700:
    case 1701:
    case 1702:
    case 1703:
    case 1704:
    case 1705:
    case 1706:
    case 1707:
    case 1708:
    case 1709:
    case 1710:
    case 1711:
    case 1712:
    case 1713:
    case 1714:
    case 1715:
    case 1800:
    case 1801:
    case 1802:
    case 1803:
    case 1804:
    case 1805:
    case 1806:
    case 1807:
    case 1808:
    case 1809:
    case 1810:
    case 1811:
    case 1812:
    case 1813:
    case 1814:
    case 1815:
    case 1816:
    case 1817:
    case 1818:
    case 1819:
    case 1820:
    case 1821:
    case 1822:
    case 1823:
    case 1824:
    case 1825:
    case 1826:
    case 1827:
    case 1828:
    case 1829:
    case 1830:
    case 1831:
    case 1832:
    case 1833:
    case 1834:
    case 1835:
    case 1836:
    case 1837:
    case 1838:
    case 1839:
    case 1840:
    case 1841:
    case 1842:
    case 1843:
    case 1844:
    case 1855:
    case 1856:
    case 1857:
    case 1858:
    case 1859:
    case 1860:
    case 1900:
    case 1901:
    case 1902:
    case 1903:
    case 1904:
    case 1905:
    case 1906:
    case 1907:
    case 1908:
    case 1909:
    case 1910:
    case 1911:
    case 1912:
    case 1913:
    case 1914:
    case 1915:
    case 1916:
    case 1917:
    case 1918:
    case 1919:
    case 1920:
    case 1921:
    case 1922:
    case 1923:
    case 1924:
    case 1925:
    case 1926:
    case 1927:
    case 1928:
    case 1929:
    case 1930:
    case 1931:
    case 1932:
    case 1933:
    case 1934:
    case 1935:
    case 1936:
    case 1937:
    case 1938:
    case 1939:
    case 1940:
    case 1941:
    case 2000:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2007:
    case 2008:
    case 2009:
    case 2010:
    case 2011:
    case 2012:
    case 2013:
    case 2014:
    case 2015:
    case 2016:
    case 2017:
    case 2018:
    case 2020:
    case 2021:
    case 2022:
    case 2023:
    case 2024:
    case 2025:
    case 2026:
    case 2027:
    case 2028:
    case 2029:
    case 2030:
    case 2031:
    case 2032:
    case 2033:
    case 2034:
    case 2035:
    case 2040:
    case 2041:
    case 2042:
    case 2043:
    case 2044:
    case 2050:
    case 2051:
    case 2052:
    case 2053:
    case 2054:
    case 2055:
    case 2056:
    case 2057:
    case 2058:
    case 2059:
    case 2060:
    case 2061:
    case 2062:
    case 2063:
    case 2064:
    case 2065:
    case 2066:
    case 2067:
    case 2068:
    case 2070:
    case 2071:
    case 2072:
    case 2073:
    case 2074:
    case 2075:
    case 2076:
    case 2077:
    case 2078:
    case 2079:
    case 2080:
    case 2081:
    case 2082:
    case 2083:
    case 2084:
    case 2085:
    case 2200:
    case 2201:
    case 2202:
    case 2203:
    case 2204:
    case 2205:
    case 2206:
    case 2207:
    case 2208:
    case 2209:
    case 2210:
    case 2211:
    case 2212:
    case 2213:
    case 2300:
    case 2301:
    case 2302:
    case 2303:
    case 2304:
    case 2305:
    case 2306:
    case 2307:
    case 2308:
    case 2309:
    case 2310:
    case 2311:
    case 2312:
    case 2313:
    case 2314:
    case 2315:
    case 2500:
    case 2501:
    case 2502:
    case 2503:
    case 2504:
    case 2505:
    case 2506:
    case 2507:
    case 2508:
    case 2510:
    case 2511:
    case 2512:
    case 2513:
    case 2600:
    case 2601:
    case 2602:
    case 2603:
    case 2604:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace zetasql
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
