// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/deprecation_warning.proto

#ifndef PROTOBUF_INCLUDED_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto
#define PROTOBUF_INCLUDED_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "zetasql/public/error_location.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto 

namespace protobuf_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto
namespace zetasql {
class DeprecationWarning;
class DeprecationWarningDefaultTypeInternal;
extern DeprecationWarningDefaultTypeInternal _DeprecationWarning_default_instance_;
class FreestandingDeprecationWarning;
class FreestandingDeprecationWarningDefaultTypeInternal;
extern FreestandingDeprecationWarningDefaultTypeInternal _FreestandingDeprecationWarning_default_instance_;
}  // namespace zetasql
namespace google {
namespace protobuf {
template<> ::zetasql::DeprecationWarning* Arena::CreateMaybeMessage<::zetasql::DeprecationWarning>(Arena*);
template<> ::zetasql::FreestandingDeprecationWarning* Arena::CreateMaybeMessage<::zetasql::FreestandingDeprecationWarning>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace zetasql {

enum DeprecationWarning_Kind {
  DeprecationWarning_Kind___Kind__switch_must_have_a_default__ = -1,
  DeprecationWarning_Kind_UNKNOWN = 0,
  DeprecationWarning_Kind_DEPRECATED_FUNCTION = 1,
  DeprecationWarning_Kind_DEPRECATED_FUNCTION_SIGNATURE = 2,
  DeprecationWarning_Kind_PROTO3_FIELD_PRESENCE = 3
};
bool DeprecationWarning_Kind_IsValid(int value);
const DeprecationWarning_Kind DeprecationWarning_Kind_Kind_MIN = DeprecationWarning_Kind___Kind__switch_must_have_a_default__;
const DeprecationWarning_Kind DeprecationWarning_Kind_Kind_MAX = DeprecationWarning_Kind_PROTO3_FIELD_PRESENCE;
const int DeprecationWarning_Kind_Kind_ARRAYSIZE = DeprecationWarning_Kind_Kind_MAX + 1;

const ::google::protobuf::EnumDescriptor* DeprecationWarning_Kind_descriptor();
inline const ::std::string& DeprecationWarning_Kind_Name(DeprecationWarning_Kind value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeprecationWarning_Kind_descriptor(), value);
}
inline bool DeprecationWarning_Kind_Parse(
    const ::std::string& name, DeprecationWarning_Kind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeprecationWarning_Kind>(
    DeprecationWarning_Kind_descriptor(), name, value);
}
// ===================================================================

class DeprecationWarning : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.DeprecationWarning) */ {
 public:
  DeprecationWarning();
  virtual ~DeprecationWarning();

  DeprecationWarning(const DeprecationWarning& from);

  inline DeprecationWarning& operator=(const DeprecationWarning& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeprecationWarning(DeprecationWarning&& from) noexcept
    : DeprecationWarning() {
    *this = ::std::move(from);
  }

  inline DeprecationWarning& operator=(DeprecationWarning&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeprecationWarning& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeprecationWarning* internal_default_instance() {
    return reinterpret_cast<const DeprecationWarning*>(
               &_DeprecationWarning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DeprecationWarning* other);
  friend void swap(DeprecationWarning& a, DeprecationWarning& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeprecationWarning* New() const final {
    return CreateMaybeMessage<DeprecationWarning>(NULL);
  }

  DeprecationWarning* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeprecationWarning>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeprecationWarning& from);
  void MergeFrom(const DeprecationWarning& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeprecationWarning* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DeprecationWarning_Kind Kind;
  static const Kind __Kind__switch_must_have_a_default__ =
    DeprecationWarning_Kind___Kind__switch_must_have_a_default__;
  static const Kind UNKNOWN =
    DeprecationWarning_Kind_UNKNOWN;
  static const Kind DEPRECATED_FUNCTION =
    DeprecationWarning_Kind_DEPRECATED_FUNCTION;
  static const Kind DEPRECATED_FUNCTION_SIGNATURE =
    DeprecationWarning_Kind_DEPRECATED_FUNCTION_SIGNATURE;
  static const Kind PROTO3_FIELD_PRESENCE =
    DeprecationWarning_Kind_PROTO3_FIELD_PRESENCE;
  static inline bool Kind_IsValid(int value) {
    return DeprecationWarning_Kind_IsValid(value);
  }
  static const Kind Kind_MIN =
    DeprecationWarning_Kind_Kind_MIN;
  static const Kind Kind_MAX =
    DeprecationWarning_Kind_Kind_MAX;
  static const int Kind_ARRAYSIZE =
    DeprecationWarning_Kind_Kind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Kind_descriptor() {
    return DeprecationWarning_Kind_descriptor();
  }
  static inline const ::std::string& Kind_Name(Kind value) {
    return DeprecationWarning_Kind_Name(value);
  }
  static inline bool Kind_Parse(const ::std::string& name,
      Kind* value) {
    return DeprecationWarning_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .zetasql.DeprecationWarning.Kind kind = 1;
  bool has_kind() const;
  void clear_kind();
  static const int kKindFieldNumber = 1;
  ::zetasql::DeprecationWarning_Kind kind() const;
  void set_kind(::zetasql::DeprecationWarning_Kind value);

  // @@protoc_insertion_point(class_scope:zetasql.DeprecationWarning)
 private:
  void set_has_kind();
  void clear_has_kind();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int kind_;
  friend struct ::protobuf_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FreestandingDeprecationWarning : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.FreestandingDeprecationWarning) */ {
 public:
  FreestandingDeprecationWarning();
  virtual ~FreestandingDeprecationWarning();

  FreestandingDeprecationWarning(const FreestandingDeprecationWarning& from);

  inline FreestandingDeprecationWarning& operator=(const FreestandingDeprecationWarning& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FreestandingDeprecationWarning(FreestandingDeprecationWarning&& from) noexcept
    : FreestandingDeprecationWarning() {
    *this = ::std::move(from);
  }

  inline FreestandingDeprecationWarning& operator=(FreestandingDeprecationWarning&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FreestandingDeprecationWarning& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FreestandingDeprecationWarning* internal_default_instance() {
    return reinterpret_cast<const FreestandingDeprecationWarning*>(
               &_FreestandingDeprecationWarning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FreestandingDeprecationWarning* other);
  friend void swap(FreestandingDeprecationWarning& a, FreestandingDeprecationWarning& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FreestandingDeprecationWarning* New() const final {
    return CreateMaybeMessage<FreestandingDeprecationWarning>(NULL);
  }

  FreestandingDeprecationWarning* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FreestandingDeprecationWarning>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FreestandingDeprecationWarning& from);
  void MergeFrom(const FreestandingDeprecationWarning& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FreestandingDeprecationWarning* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional string caret_string = 2;
  bool has_caret_string() const;
  void clear_caret_string();
  static const int kCaretStringFieldNumber = 2;
  const ::std::string& caret_string() const;
  void set_caret_string(const ::std::string& value);
  #if LANG_CXX11
  void set_caret_string(::std::string&& value);
  #endif
  void set_caret_string(const char* value);
  void set_caret_string(const char* value, size_t size);
  ::std::string* mutable_caret_string();
  ::std::string* release_caret_string();
  void set_allocated_caret_string(::std::string* caret_string);

  // optional .zetasql.ErrorLocation error_location = 3;
  bool has_error_location() const;
  void clear_error_location();
  static const int kErrorLocationFieldNumber = 3;
  private:
  const ::zetasql::ErrorLocation& _internal_error_location() const;
  public:
  const ::zetasql::ErrorLocation& error_location() const;
  ::zetasql::ErrorLocation* release_error_location();
  ::zetasql::ErrorLocation* mutable_error_location();
  void set_allocated_error_location(::zetasql::ErrorLocation* error_location);

  // optional .zetasql.DeprecationWarning deprecation_warning = 4;
  bool has_deprecation_warning() const;
  void clear_deprecation_warning();
  static const int kDeprecationWarningFieldNumber = 4;
  private:
  const ::zetasql::DeprecationWarning& _internal_deprecation_warning() const;
  public:
  const ::zetasql::DeprecationWarning& deprecation_warning() const;
  ::zetasql::DeprecationWarning* release_deprecation_warning();
  ::zetasql::DeprecationWarning* mutable_deprecation_warning();
  void set_allocated_deprecation_warning(::zetasql::DeprecationWarning* deprecation_warning);

  // @@protoc_insertion_point(class_scope:zetasql.FreestandingDeprecationWarning)
 private:
  void set_has_message();
  void clear_has_message();
  void set_has_caret_string();
  void clear_has_caret_string();
  void set_has_error_location();
  void clear_has_error_location();
  void set_has_deprecation_warning();
  void clear_has_deprecation_warning();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr caret_string_;
  ::zetasql::ErrorLocation* error_location_;
  ::zetasql::DeprecationWarning* deprecation_warning_;
  friend struct ::protobuf_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeprecationWarning

// optional .zetasql.DeprecationWarning.Kind kind = 1;
inline bool DeprecationWarning::has_kind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeprecationWarning::set_has_kind() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeprecationWarning::clear_has_kind() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeprecationWarning::clear_kind() {
  kind_ = -1;
  clear_has_kind();
}
inline ::zetasql::DeprecationWarning_Kind DeprecationWarning::kind() const {
  // @@protoc_insertion_point(field_get:zetasql.DeprecationWarning.kind)
  return static_cast< ::zetasql::DeprecationWarning_Kind >(kind_);
}
inline void DeprecationWarning::set_kind(::zetasql::DeprecationWarning_Kind value) {
  assert(::zetasql::DeprecationWarning_Kind_IsValid(value));
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:zetasql.DeprecationWarning.kind)
}

// -------------------------------------------------------------------

// FreestandingDeprecationWarning

// optional string message = 1;
inline bool FreestandingDeprecationWarning::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FreestandingDeprecationWarning::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FreestandingDeprecationWarning::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FreestandingDeprecationWarning::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& FreestandingDeprecationWarning::message() const {
  // @@protoc_insertion_point(field_get:zetasql.FreestandingDeprecationWarning.message)
  return message_.GetNoArena();
}
inline void FreestandingDeprecationWarning::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.FreestandingDeprecationWarning.message)
}
#if LANG_CXX11
inline void FreestandingDeprecationWarning::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.FreestandingDeprecationWarning.message)
}
#endif
inline void FreestandingDeprecationWarning::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.FreestandingDeprecationWarning.message)
}
inline void FreestandingDeprecationWarning::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.FreestandingDeprecationWarning.message)
}
inline ::std::string* FreestandingDeprecationWarning::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:zetasql.FreestandingDeprecationWarning.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FreestandingDeprecationWarning::release_message() {
  // @@protoc_insertion_point(field_release:zetasql.FreestandingDeprecationWarning.message)
  if (!has_message()) {
    return NULL;
  }
  clear_has_message();
  return message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FreestandingDeprecationWarning::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:zetasql.FreestandingDeprecationWarning.message)
}

// optional string caret_string = 2;
inline bool FreestandingDeprecationWarning::has_caret_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FreestandingDeprecationWarning::set_has_caret_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FreestandingDeprecationWarning::clear_has_caret_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FreestandingDeprecationWarning::clear_caret_string() {
  caret_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_caret_string();
}
inline const ::std::string& FreestandingDeprecationWarning::caret_string() const {
  // @@protoc_insertion_point(field_get:zetasql.FreestandingDeprecationWarning.caret_string)
  return caret_string_.GetNoArena();
}
inline void FreestandingDeprecationWarning::set_caret_string(const ::std::string& value) {
  set_has_caret_string();
  caret_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.FreestandingDeprecationWarning.caret_string)
}
#if LANG_CXX11
inline void FreestandingDeprecationWarning::set_caret_string(::std::string&& value) {
  set_has_caret_string();
  caret_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.FreestandingDeprecationWarning.caret_string)
}
#endif
inline void FreestandingDeprecationWarning::set_caret_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_caret_string();
  caret_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.FreestandingDeprecationWarning.caret_string)
}
inline void FreestandingDeprecationWarning::set_caret_string(const char* value, size_t size) {
  set_has_caret_string();
  caret_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.FreestandingDeprecationWarning.caret_string)
}
inline ::std::string* FreestandingDeprecationWarning::mutable_caret_string() {
  set_has_caret_string();
  // @@protoc_insertion_point(field_mutable:zetasql.FreestandingDeprecationWarning.caret_string)
  return caret_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FreestandingDeprecationWarning::release_caret_string() {
  // @@protoc_insertion_point(field_release:zetasql.FreestandingDeprecationWarning.caret_string)
  if (!has_caret_string()) {
    return NULL;
  }
  clear_has_caret_string();
  return caret_string_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FreestandingDeprecationWarning::set_allocated_caret_string(::std::string* caret_string) {
  if (caret_string != NULL) {
    set_has_caret_string();
  } else {
    clear_has_caret_string();
  }
  caret_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), caret_string);
  // @@protoc_insertion_point(field_set_allocated:zetasql.FreestandingDeprecationWarning.caret_string)
}

// optional .zetasql.ErrorLocation error_location = 3;
inline bool FreestandingDeprecationWarning::has_error_location() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FreestandingDeprecationWarning::set_has_error_location() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FreestandingDeprecationWarning::clear_has_error_location() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasql::ErrorLocation& FreestandingDeprecationWarning::_internal_error_location() const {
  return *error_location_;
}
inline const ::zetasql::ErrorLocation& FreestandingDeprecationWarning::error_location() const {
  const ::zetasql::ErrorLocation* p = error_location_;
  // @@protoc_insertion_point(field_get:zetasql.FreestandingDeprecationWarning.error_location)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ErrorLocation*>(
      &::zetasql::_ErrorLocation_default_instance_);
}
inline ::zetasql::ErrorLocation* FreestandingDeprecationWarning::release_error_location() {
  // @@protoc_insertion_point(field_release:zetasql.FreestandingDeprecationWarning.error_location)
  clear_has_error_location();
  ::zetasql::ErrorLocation* temp = error_location_;
  error_location_ = NULL;
  return temp;
}
inline ::zetasql::ErrorLocation* FreestandingDeprecationWarning::mutable_error_location() {
  set_has_error_location();
  if (error_location_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ErrorLocation>(GetArenaNoVirtual());
    error_location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.FreestandingDeprecationWarning.error_location)
  return error_location_;
}
inline void FreestandingDeprecationWarning::set_allocated_error_location(::zetasql::ErrorLocation* error_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_location_);
  }
  if (error_location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error_location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error_location, submessage_arena);
    }
    set_has_error_location();
  } else {
    clear_has_error_location();
  }
  error_location_ = error_location;
  // @@protoc_insertion_point(field_set_allocated:zetasql.FreestandingDeprecationWarning.error_location)
}

// optional .zetasql.DeprecationWarning deprecation_warning = 4;
inline bool FreestandingDeprecationWarning::has_deprecation_warning() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FreestandingDeprecationWarning::set_has_deprecation_warning() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FreestandingDeprecationWarning::clear_has_deprecation_warning() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FreestandingDeprecationWarning::clear_deprecation_warning() {
  if (deprecation_warning_ != NULL) deprecation_warning_->Clear();
  clear_has_deprecation_warning();
}
inline const ::zetasql::DeprecationWarning& FreestandingDeprecationWarning::_internal_deprecation_warning() const {
  return *deprecation_warning_;
}
inline const ::zetasql::DeprecationWarning& FreestandingDeprecationWarning::deprecation_warning() const {
  const ::zetasql::DeprecationWarning* p = deprecation_warning_;
  // @@protoc_insertion_point(field_get:zetasql.FreestandingDeprecationWarning.deprecation_warning)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::DeprecationWarning*>(
      &::zetasql::_DeprecationWarning_default_instance_);
}
inline ::zetasql::DeprecationWarning* FreestandingDeprecationWarning::release_deprecation_warning() {
  // @@protoc_insertion_point(field_release:zetasql.FreestandingDeprecationWarning.deprecation_warning)
  clear_has_deprecation_warning();
  ::zetasql::DeprecationWarning* temp = deprecation_warning_;
  deprecation_warning_ = NULL;
  return temp;
}
inline ::zetasql::DeprecationWarning* FreestandingDeprecationWarning::mutable_deprecation_warning() {
  set_has_deprecation_warning();
  if (deprecation_warning_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::DeprecationWarning>(GetArenaNoVirtual());
    deprecation_warning_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.FreestandingDeprecationWarning.deprecation_warning)
  return deprecation_warning_;
}
inline void FreestandingDeprecationWarning::set_allocated_deprecation_warning(::zetasql::DeprecationWarning* deprecation_warning) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete deprecation_warning_;
  }
  if (deprecation_warning) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deprecation_warning = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deprecation_warning, submessage_arena);
    }
    set_has_deprecation_warning();
  } else {
    clear_has_deprecation_warning();
  }
  deprecation_warning_ = deprecation_warning;
  // @@protoc_insertion_point(field_set_allocated:zetasql.FreestandingDeprecationWarning.deprecation_warning)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::zetasql::DeprecationWarning_Kind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::DeprecationWarning_Kind>() {
  return ::zetasql::DeprecationWarning_Kind_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto
