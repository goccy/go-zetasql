// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/error_location.proto

#ifndef PROTOBUF_INCLUDED_zetasql_2fpublic_2ferror_5flocation_2eproto
#define PROTOBUF_INCLUDED_zetasql_2fpublic_2ferror_5flocation_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_zetasql_2fpublic_2ferror_5flocation_2eproto 

namespace protobuf_zetasql_2fpublic_2ferror_5flocation_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_zetasql_2fpublic_2ferror_5flocation_2eproto
namespace zetasql {
class ErrorLocation;
class ErrorLocationDefaultTypeInternal;
extern ErrorLocationDefaultTypeInternal _ErrorLocation_default_instance_;
class ErrorSource;
class ErrorSourceDefaultTypeInternal;
extern ErrorSourceDefaultTypeInternal _ErrorSource_default_instance_;
}  // namespace zetasql
namespace google {
namespace protobuf {
template<> ::zetasql::ErrorLocation* Arena::CreateMaybeMessage<::zetasql::ErrorLocation>(Arena*);
template<> ::zetasql::ErrorSource* Arena::CreateMaybeMessage<::zetasql::ErrorSource>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace zetasql {

// ===================================================================

class ErrorLocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ErrorLocation) */ {
 public:
  ErrorLocation();
  virtual ~ErrorLocation();

  ErrorLocation(const ErrorLocation& from);

  inline ErrorLocation& operator=(const ErrorLocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ErrorLocation(ErrorLocation&& from) noexcept
    : ErrorLocation() {
    *this = ::std::move(from);
  }

  inline ErrorLocation& operator=(ErrorLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrorLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ErrorLocation* internal_default_instance() {
    return reinterpret_cast<const ErrorLocation*>(
               &_ErrorLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ErrorLocation* other);
  friend void swap(ErrorLocation& a, ErrorLocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ErrorLocation* New() const final {
    return CreateMaybeMessage<ErrorLocation>(NULL);
  }

  ErrorLocation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ErrorLocation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ErrorLocation& from);
  void MergeFrom(const ErrorLocation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorLocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ErrorSource error_source = 4;
  int error_source_size() const;
  void clear_error_source();
  static const int kErrorSourceFieldNumber = 4;
  ::zetasql::ErrorSource* mutable_error_source(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ErrorSource >*
      mutable_error_source();
  const ::zetasql::ErrorSource& error_source(int index) const;
  ::zetasql::ErrorSource* add_error_source();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ErrorSource >&
      error_source() const;

  // optional string filename = 3;
  bool has_filename() const;
  void clear_filename();
  static const int kFilenameFieldNumber = 3;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // optional int32 line = 1 [default = 1];
  bool has_line() const;
  void clear_line();
  static const int kLineFieldNumber = 1;
  ::google::protobuf::int32 line() const;
  void set_line(::google::protobuf::int32 value);

  // optional int32 column = 2 [default = 1];
  bool has_column() const;
  void clear_column();
  static const int kColumnFieldNumber = 2;
  ::google::protobuf::int32 column() const;
  void set_column(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zetasql.ErrorLocation)
 private:
  void set_has_line();
  void clear_has_line();
  void set_has_column();
  void clear_has_column();
  void set_has_filename();
  void clear_has_filename();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ErrorSource > error_source_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::int32 line_;
  ::google::protobuf::int32 column_;
  friend struct ::protobuf_zetasql_2fpublic_2ferror_5flocation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ErrorSource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ErrorSource) */ {
 public:
  ErrorSource();
  virtual ~ErrorSource();

  ErrorSource(const ErrorSource& from);

  inline ErrorSource& operator=(const ErrorSource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ErrorSource(ErrorSource&& from) noexcept
    : ErrorSource() {
    *this = ::std::move(from);
  }

  inline ErrorSource& operator=(ErrorSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrorSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ErrorSource* internal_default_instance() {
    return reinterpret_cast<const ErrorSource*>(
               &_ErrorSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ErrorSource* other);
  friend void swap(ErrorSource& a, ErrorSource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ErrorSource* New() const final {
    return CreateMaybeMessage<ErrorSource>(NULL);
  }

  ErrorSource* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ErrorSource>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ErrorSource& from);
  void MergeFrom(const ErrorSource& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorSource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string error_message = 1;
  bool has_error_message() const;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 1;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // optional string error_message_caret_string = 2;
  bool has_error_message_caret_string() const;
  void clear_error_message_caret_string();
  static const int kErrorMessageCaretStringFieldNumber = 2;
  const ::std::string& error_message_caret_string() const;
  void set_error_message_caret_string(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message_caret_string(::std::string&& value);
  #endif
  void set_error_message_caret_string(const char* value);
  void set_error_message_caret_string(const char* value, size_t size);
  ::std::string* mutable_error_message_caret_string();
  ::std::string* release_error_message_caret_string();
  void set_allocated_error_message_caret_string(::std::string* error_message_caret_string);

  // optional .zetasql.ErrorLocation error_location = 3;
  bool has_error_location() const;
  void clear_error_location();
  static const int kErrorLocationFieldNumber = 3;
  private:
  const ::zetasql::ErrorLocation& _internal_error_location() const;
  public:
  const ::zetasql::ErrorLocation& error_location() const;
  ::zetasql::ErrorLocation* release_error_location();
  ::zetasql::ErrorLocation* mutable_error_location();
  void set_allocated_error_location(::zetasql::ErrorLocation* error_location);

  // @@protoc_insertion_point(class_scope:zetasql.ErrorSource)
 private:
  void set_has_error_message();
  void clear_has_error_message();
  void set_has_error_message_caret_string();
  void clear_has_error_message_caret_string();
  void set_has_error_location();
  void clear_has_error_location();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  ::google::protobuf::internal::ArenaStringPtr error_message_caret_string_;
  ::zetasql::ErrorLocation* error_location_;
  friend struct ::protobuf_zetasql_2fpublic_2ferror_5flocation_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ErrorLocation

// optional int32 line = 1 [default = 1];
inline bool ErrorLocation::has_line() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ErrorLocation::set_has_line() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ErrorLocation::clear_has_line() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ErrorLocation::clear_line() {
  line_ = 1;
  clear_has_line();
}
inline ::google::protobuf::int32 ErrorLocation::line() const {
  // @@protoc_insertion_point(field_get:zetasql.ErrorLocation.line)
  return line_;
}
inline void ErrorLocation::set_line(::google::protobuf::int32 value) {
  set_has_line();
  line_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ErrorLocation.line)
}

// optional int32 column = 2 [default = 1];
inline bool ErrorLocation::has_column() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ErrorLocation::set_has_column() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ErrorLocation::clear_has_column() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ErrorLocation::clear_column() {
  column_ = 1;
  clear_has_column();
}
inline ::google::protobuf::int32 ErrorLocation::column() const {
  // @@protoc_insertion_point(field_get:zetasql.ErrorLocation.column)
  return column_;
}
inline void ErrorLocation::set_column(::google::protobuf::int32 value) {
  set_has_column();
  column_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ErrorLocation.column)
}

// optional string filename = 3;
inline bool ErrorLocation::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ErrorLocation::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ErrorLocation::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ErrorLocation::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
inline const ::std::string& ErrorLocation::filename() const {
  // @@protoc_insertion_point(field_get:zetasql.ErrorLocation.filename)
  return filename_.GetNoArena();
}
inline void ErrorLocation::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ErrorLocation.filename)
}
#if LANG_CXX11
inline void ErrorLocation::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ErrorLocation.filename)
}
#endif
inline void ErrorLocation::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ErrorLocation.filename)
}
inline void ErrorLocation::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ErrorLocation.filename)
}
inline ::std::string* ErrorLocation::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:zetasql.ErrorLocation.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ErrorLocation::release_filename() {
  // @@protoc_insertion_point(field_release:zetasql.ErrorLocation.filename)
  if (!has_filename()) {
    return NULL;
  }
  clear_has_filename();
  return filename_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ErrorLocation::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ErrorLocation.filename)
}

// repeated .zetasql.ErrorSource error_source = 4;
inline int ErrorLocation::error_source_size() const {
  return error_source_.size();
}
inline void ErrorLocation::clear_error_source() {
  error_source_.Clear();
}
inline ::zetasql::ErrorSource* ErrorLocation::mutable_error_source(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ErrorLocation.error_source)
  return error_source_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ErrorSource >*
ErrorLocation::mutable_error_source() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ErrorLocation.error_source)
  return &error_source_;
}
inline const ::zetasql::ErrorSource& ErrorLocation::error_source(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ErrorLocation.error_source)
  return error_source_.Get(index);
}
inline ::zetasql::ErrorSource* ErrorLocation::add_error_source() {
  // @@protoc_insertion_point(field_add:zetasql.ErrorLocation.error_source)
  return error_source_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ErrorSource >&
ErrorLocation::error_source() const {
  // @@protoc_insertion_point(field_list:zetasql.ErrorLocation.error_source)
  return error_source_;
}

// -------------------------------------------------------------------

// ErrorSource

// optional string error_message = 1;
inline bool ErrorSource::has_error_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ErrorSource::set_has_error_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ErrorSource::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ErrorSource::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_message();
}
inline const ::std::string& ErrorSource::error_message() const {
  // @@protoc_insertion_point(field_get:zetasql.ErrorSource.error_message)
  return error_message_.GetNoArena();
}
inline void ErrorSource::set_error_message(const ::std::string& value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ErrorSource.error_message)
}
#if LANG_CXX11
inline void ErrorSource::set_error_message(::std::string&& value) {
  set_has_error_message();
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ErrorSource.error_message)
}
#endif
inline void ErrorSource::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ErrorSource.error_message)
}
inline void ErrorSource::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ErrorSource.error_message)
}
inline ::std::string* ErrorSource::mutable_error_message() {
  set_has_error_message();
  // @@protoc_insertion_point(field_mutable:zetasql.ErrorSource.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ErrorSource::release_error_message() {
  // @@protoc_insertion_point(field_release:zetasql.ErrorSource.error_message)
  if (!has_error_message()) {
    return NULL;
  }
  clear_has_error_message();
  return error_message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ErrorSource::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    set_has_error_message();
  } else {
    clear_has_error_message();
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ErrorSource.error_message)
}

// optional string error_message_caret_string = 2;
inline bool ErrorSource::has_error_message_caret_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ErrorSource::set_has_error_message_caret_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ErrorSource::clear_has_error_message_caret_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ErrorSource::clear_error_message_caret_string() {
  error_message_caret_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_message_caret_string();
}
inline const ::std::string& ErrorSource::error_message_caret_string() const {
  // @@protoc_insertion_point(field_get:zetasql.ErrorSource.error_message_caret_string)
  return error_message_caret_string_.GetNoArena();
}
inline void ErrorSource::set_error_message_caret_string(const ::std::string& value) {
  set_has_error_message_caret_string();
  error_message_caret_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ErrorSource.error_message_caret_string)
}
#if LANG_CXX11
inline void ErrorSource::set_error_message_caret_string(::std::string&& value) {
  set_has_error_message_caret_string();
  error_message_caret_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ErrorSource.error_message_caret_string)
}
#endif
inline void ErrorSource::set_error_message_caret_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_message_caret_string();
  error_message_caret_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ErrorSource.error_message_caret_string)
}
inline void ErrorSource::set_error_message_caret_string(const char* value, size_t size) {
  set_has_error_message_caret_string();
  error_message_caret_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ErrorSource.error_message_caret_string)
}
inline ::std::string* ErrorSource::mutable_error_message_caret_string() {
  set_has_error_message_caret_string();
  // @@protoc_insertion_point(field_mutable:zetasql.ErrorSource.error_message_caret_string)
  return error_message_caret_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ErrorSource::release_error_message_caret_string() {
  // @@protoc_insertion_point(field_release:zetasql.ErrorSource.error_message_caret_string)
  if (!has_error_message_caret_string()) {
    return NULL;
  }
  clear_has_error_message_caret_string();
  return error_message_caret_string_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ErrorSource::set_allocated_error_message_caret_string(::std::string* error_message_caret_string) {
  if (error_message_caret_string != NULL) {
    set_has_error_message_caret_string();
  } else {
    clear_has_error_message_caret_string();
  }
  error_message_caret_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message_caret_string);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ErrorSource.error_message_caret_string)
}

// optional .zetasql.ErrorLocation error_location = 3;
inline bool ErrorSource::has_error_location() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ErrorSource::set_has_error_location() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ErrorSource::clear_has_error_location() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ErrorSource::clear_error_location() {
  if (error_location_ != NULL) error_location_->Clear();
  clear_has_error_location();
}
inline const ::zetasql::ErrorLocation& ErrorSource::_internal_error_location() const {
  return *error_location_;
}
inline const ::zetasql::ErrorLocation& ErrorSource::error_location() const {
  const ::zetasql::ErrorLocation* p = error_location_;
  // @@protoc_insertion_point(field_get:zetasql.ErrorSource.error_location)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ErrorLocation*>(
      &::zetasql::_ErrorLocation_default_instance_);
}
inline ::zetasql::ErrorLocation* ErrorSource::release_error_location() {
  // @@protoc_insertion_point(field_release:zetasql.ErrorSource.error_location)
  clear_has_error_location();
  ::zetasql::ErrorLocation* temp = error_location_;
  error_location_ = NULL;
  return temp;
}
inline ::zetasql::ErrorLocation* ErrorSource::mutable_error_location() {
  set_has_error_location();
  if (error_location_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ErrorLocation>(GetArenaNoVirtual());
    error_location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ErrorSource.error_location)
  return error_location_;
}
inline void ErrorSource::set_allocated_error_location(::zetasql::ErrorLocation* error_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete error_location_;
  }
  if (error_location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error_location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error_location, submessage_arena);
    }
    set_has_error_location();
  } else {
    clear_has_error_location();
  }
  error_location_ = error_location;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ErrorSource.error_location)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_zetasql_2fpublic_2ferror_5flocation_2eproto
