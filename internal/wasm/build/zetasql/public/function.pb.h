// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/function.proto

#ifndef PROTOBUF_INCLUDED_zetasql_2fpublic_2ffunction_2eproto
#define PROTOBUF_INCLUDED_zetasql_2fpublic_2ffunction_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_zetasql_2fpublic_2ffunction_2eproto 

namespace protobuf_zetasql_2fpublic_2ffunction_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_zetasql_2fpublic_2ffunction_2eproto
namespace zetasql {
class FunctionEnums;
class FunctionEnumsDefaultTypeInternal;
extern FunctionEnumsDefaultTypeInternal _FunctionEnums_default_instance_;
}  // namespace zetasql
namespace google {
namespace protobuf {
template<> ::zetasql::FunctionEnums* Arena::CreateMaybeMessage<::zetasql::FunctionEnums>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace zetasql {

enum FunctionEnums_ArgumentCardinality {
  FunctionEnums_ArgumentCardinality_REQUIRED = 0,
  FunctionEnums_ArgumentCardinality_REPEATED = 1,
  FunctionEnums_ArgumentCardinality_OPTIONAL = 2
};
bool FunctionEnums_ArgumentCardinality_IsValid(int value);
const FunctionEnums_ArgumentCardinality FunctionEnums_ArgumentCardinality_ArgumentCardinality_MIN = FunctionEnums_ArgumentCardinality_REQUIRED;
const FunctionEnums_ArgumentCardinality FunctionEnums_ArgumentCardinality_ArgumentCardinality_MAX = FunctionEnums_ArgumentCardinality_OPTIONAL;
const int FunctionEnums_ArgumentCardinality_ArgumentCardinality_ARRAYSIZE = FunctionEnums_ArgumentCardinality_ArgumentCardinality_MAX + 1;

const ::google::protobuf::EnumDescriptor* FunctionEnums_ArgumentCardinality_descriptor();
inline const ::std::string& FunctionEnums_ArgumentCardinality_Name(FunctionEnums_ArgumentCardinality value) {
  return ::google::protobuf::internal::NameOfEnum(
    FunctionEnums_ArgumentCardinality_descriptor(), value);
}
inline bool FunctionEnums_ArgumentCardinality_Parse(
    const ::std::string& name, FunctionEnums_ArgumentCardinality* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FunctionEnums_ArgumentCardinality>(
    FunctionEnums_ArgumentCardinality_descriptor(), name, value);
}
enum FunctionEnums_ProcedureArgumentMode {
  FunctionEnums_ProcedureArgumentMode_NOT_SET = 0,
  FunctionEnums_ProcedureArgumentMode_IN = 1,
  FunctionEnums_ProcedureArgumentMode_OUT = 2,
  FunctionEnums_ProcedureArgumentMode_INOUT = 3
};
bool FunctionEnums_ProcedureArgumentMode_IsValid(int value);
const FunctionEnums_ProcedureArgumentMode FunctionEnums_ProcedureArgumentMode_ProcedureArgumentMode_MIN = FunctionEnums_ProcedureArgumentMode_NOT_SET;
const FunctionEnums_ProcedureArgumentMode FunctionEnums_ProcedureArgumentMode_ProcedureArgumentMode_MAX = FunctionEnums_ProcedureArgumentMode_INOUT;
const int FunctionEnums_ProcedureArgumentMode_ProcedureArgumentMode_ARRAYSIZE = FunctionEnums_ProcedureArgumentMode_ProcedureArgumentMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* FunctionEnums_ProcedureArgumentMode_descriptor();
inline const ::std::string& FunctionEnums_ProcedureArgumentMode_Name(FunctionEnums_ProcedureArgumentMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    FunctionEnums_ProcedureArgumentMode_descriptor(), value);
}
inline bool FunctionEnums_ProcedureArgumentMode_Parse(
    const ::std::string& name, FunctionEnums_ProcedureArgumentMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FunctionEnums_ProcedureArgumentMode>(
    FunctionEnums_ProcedureArgumentMode_descriptor(), name, value);
}
enum FunctionEnums_WindowOrderSupport {
  FunctionEnums_WindowOrderSupport_ORDER_UNSUPPORTED = 0,
  FunctionEnums_WindowOrderSupport_ORDER_OPTIONAL = 1,
  FunctionEnums_WindowOrderSupport_ORDER_REQUIRED = 2
};
bool FunctionEnums_WindowOrderSupport_IsValid(int value);
const FunctionEnums_WindowOrderSupport FunctionEnums_WindowOrderSupport_WindowOrderSupport_MIN = FunctionEnums_WindowOrderSupport_ORDER_UNSUPPORTED;
const FunctionEnums_WindowOrderSupport FunctionEnums_WindowOrderSupport_WindowOrderSupport_MAX = FunctionEnums_WindowOrderSupport_ORDER_REQUIRED;
const int FunctionEnums_WindowOrderSupport_WindowOrderSupport_ARRAYSIZE = FunctionEnums_WindowOrderSupport_WindowOrderSupport_MAX + 1;

const ::google::protobuf::EnumDescriptor* FunctionEnums_WindowOrderSupport_descriptor();
inline const ::std::string& FunctionEnums_WindowOrderSupport_Name(FunctionEnums_WindowOrderSupport value) {
  return ::google::protobuf::internal::NameOfEnum(
    FunctionEnums_WindowOrderSupport_descriptor(), value);
}
inline bool FunctionEnums_WindowOrderSupport_Parse(
    const ::std::string& name, FunctionEnums_WindowOrderSupport* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FunctionEnums_WindowOrderSupport>(
    FunctionEnums_WindowOrderSupport_descriptor(), name, value);
}
enum FunctionEnums_Mode {
  FunctionEnums_Mode_SCALAR = 1,
  FunctionEnums_Mode_AGGREGATE = 2,
  FunctionEnums_Mode_ANALYTIC = 3
};
bool FunctionEnums_Mode_IsValid(int value);
const FunctionEnums_Mode FunctionEnums_Mode_Mode_MIN = FunctionEnums_Mode_SCALAR;
const FunctionEnums_Mode FunctionEnums_Mode_Mode_MAX = FunctionEnums_Mode_ANALYTIC;
const int FunctionEnums_Mode_Mode_ARRAYSIZE = FunctionEnums_Mode_Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* FunctionEnums_Mode_descriptor();
inline const ::std::string& FunctionEnums_Mode_Name(FunctionEnums_Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    FunctionEnums_Mode_descriptor(), value);
}
inline bool FunctionEnums_Mode_Parse(
    const ::std::string& name, FunctionEnums_Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FunctionEnums_Mode>(
    FunctionEnums_Mode_descriptor(), name, value);
}
enum FunctionEnums_Volatility {
  FunctionEnums_Volatility_IMMUTABLE = 0,
  FunctionEnums_Volatility_STABLE = 1,
  FunctionEnums_Volatility_VOLATILE = 2
};
bool FunctionEnums_Volatility_IsValid(int value);
const FunctionEnums_Volatility FunctionEnums_Volatility_Volatility_MIN = FunctionEnums_Volatility_IMMUTABLE;
const FunctionEnums_Volatility FunctionEnums_Volatility_Volatility_MAX = FunctionEnums_Volatility_VOLATILE;
const int FunctionEnums_Volatility_Volatility_ARRAYSIZE = FunctionEnums_Volatility_Volatility_MAX + 1;

const ::google::protobuf::EnumDescriptor* FunctionEnums_Volatility_descriptor();
inline const ::std::string& FunctionEnums_Volatility_Name(FunctionEnums_Volatility value) {
  return ::google::protobuf::internal::NameOfEnum(
    FunctionEnums_Volatility_descriptor(), value);
}
inline bool FunctionEnums_Volatility_Parse(
    const ::std::string& name, FunctionEnums_Volatility* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FunctionEnums_Volatility>(
    FunctionEnums_Volatility_descriptor(), name, value);
}
enum FunctionEnums_TableValuedFunctionType {
  FunctionEnums_TableValuedFunctionType_INVALID = 0,
  FunctionEnums_TableValuedFunctionType_FIXED_OUTPUT_SCHEMA_TVF = 1,
  FunctionEnums_TableValuedFunctionType_FORWARD_INPUT_SCHEMA_TO_OUTPUT_SCHEMA_TVF = 2,
  FunctionEnums_TableValuedFunctionType_TEMPLATED_SQL_TVF = 3,
  FunctionEnums_TableValuedFunctionType_FORWARD_INPUT_SCHEMA_TO_OUTPUT_SCHEMA_WITH_APPENDED_COLUMNS = 7
};
bool FunctionEnums_TableValuedFunctionType_IsValid(int value);
const FunctionEnums_TableValuedFunctionType FunctionEnums_TableValuedFunctionType_TableValuedFunctionType_MIN = FunctionEnums_TableValuedFunctionType_INVALID;
const FunctionEnums_TableValuedFunctionType FunctionEnums_TableValuedFunctionType_TableValuedFunctionType_MAX = FunctionEnums_TableValuedFunctionType_FORWARD_INPUT_SCHEMA_TO_OUTPUT_SCHEMA_WITH_APPENDED_COLUMNS;
const int FunctionEnums_TableValuedFunctionType_TableValuedFunctionType_ARRAYSIZE = FunctionEnums_TableValuedFunctionType_TableValuedFunctionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FunctionEnums_TableValuedFunctionType_descriptor();
inline const ::std::string& FunctionEnums_TableValuedFunctionType_Name(FunctionEnums_TableValuedFunctionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FunctionEnums_TableValuedFunctionType_descriptor(), value);
}
inline bool FunctionEnums_TableValuedFunctionType_Parse(
    const ::std::string& name, FunctionEnums_TableValuedFunctionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FunctionEnums_TableValuedFunctionType>(
    FunctionEnums_TableValuedFunctionType_descriptor(), name, value);
}
enum FunctionEnums_ArgumentCollationMode {
  FunctionEnums_ArgumentCollationMode_AFFECTS_NONE = 0,
  FunctionEnums_ArgumentCollationMode_AFFECTS_OPERATION = 1,
  FunctionEnums_ArgumentCollationMode_AFFECTS_PROPAGATION = 2,
  FunctionEnums_ArgumentCollationMode_AFFECTS_OPERATION_AND_PROPAGATION = 3
};
bool FunctionEnums_ArgumentCollationMode_IsValid(int value);
const FunctionEnums_ArgumentCollationMode FunctionEnums_ArgumentCollationMode_ArgumentCollationMode_MIN = FunctionEnums_ArgumentCollationMode_AFFECTS_NONE;
const FunctionEnums_ArgumentCollationMode FunctionEnums_ArgumentCollationMode_ArgumentCollationMode_MAX = FunctionEnums_ArgumentCollationMode_AFFECTS_OPERATION_AND_PROPAGATION;
const int FunctionEnums_ArgumentCollationMode_ArgumentCollationMode_ARRAYSIZE = FunctionEnums_ArgumentCollationMode_ArgumentCollationMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* FunctionEnums_ArgumentCollationMode_descriptor();
inline const ::std::string& FunctionEnums_ArgumentCollationMode_Name(FunctionEnums_ArgumentCollationMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    FunctionEnums_ArgumentCollationMode_descriptor(), value);
}
inline bool FunctionEnums_ArgumentCollationMode_Parse(
    const ::std::string& name, FunctionEnums_ArgumentCollationMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FunctionEnums_ArgumentCollationMode>(
    FunctionEnums_ArgumentCollationMode_descriptor(), name, value);
}
enum SignatureArgumentKind {
  ARG_TYPE_FIXED = 0,
  ARG_TYPE_ANY_1 = 1,
  ARG_TYPE_ANY_2 = 2,
  ARG_ARRAY_TYPE_ANY_1 = 3,
  ARG_ARRAY_TYPE_ANY_2 = 4,
  ARG_PROTO_MAP_ANY = 14,
  ARG_PROTO_MAP_KEY_ANY = 15,
  ARG_PROTO_MAP_VALUE_ANY = 16,
  ARG_PROTO_ANY = 5,
  ARG_STRUCT_ANY = 6,
  ARG_ENUM_ANY = 7,
  ARG_TYPE_ARBITRARY = 8,
  ARG_TYPE_RELATION = 9,
  ARG_TYPE_VOID = 10,
  ARG_TYPE_MODEL = 11,
  ARG_TYPE_CONNECTION = 12,
  ARG_TYPE_DESCRIPTOR = 13,
  ARG_TYPE_LAMBDA = 17,
  __SignatureArgumentKind__switch_must_have_a_default__ = -1
};
bool SignatureArgumentKind_IsValid(int value);
const SignatureArgumentKind SignatureArgumentKind_MIN = __SignatureArgumentKind__switch_must_have_a_default__;
const SignatureArgumentKind SignatureArgumentKind_MAX = ARG_TYPE_LAMBDA;
const int SignatureArgumentKind_ARRAYSIZE = SignatureArgumentKind_MAX + 1;

const ::google::protobuf::EnumDescriptor* SignatureArgumentKind_descriptor();
inline const ::std::string& SignatureArgumentKind_Name(SignatureArgumentKind value) {
  return ::google::protobuf::internal::NameOfEnum(
    SignatureArgumentKind_descriptor(), value);
}
inline bool SignatureArgumentKind_Parse(
    const ::std::string& name, SignatureArgumentKind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SignatureArgumentKind>(
    SignatureArgumentKind_descriptor(), name, value);
}
// ===================================================================

class FunctionEnums : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.FunctionEnums) */ {
 public:
  FunctionEnums();
  virtual ~FunctionEnums();

  FunctionEnums(const FunctionEnums& from);

  inline FunctionEnums& operator=(const FunctionEnums& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FunctionEnums(FunctionEnums&& from) noexcept
    : FunctionEnums() {
    *this = ::std::move(from);
  }

  inline FunctionEnums& operator=(FunctionEnums&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FunctionEnums& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FunctionEnums* internal_default_instance() {
    return reinterpret_cast<const FunctionEnums*>(
               &_FunctionEnums_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FunctionEnums* other);
  friend void swap(FunctionEnums& a, FunctionEnums& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FunctionEnums* New() const final {
    return CreateMaybeMessage<FunctionEnums>(NULL);
  }

  FunctionEnums* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FunctionEnums>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FunctionEnums& from);
  void MergeFrom(const FunctionEnums& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionEnums* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FunctionEnums_ArgumentCardinality ArgumentCardinality;
  static const ArgumentCardinality REQUIRED =
    FunctionEnums_ArgumentCardinality_REQUIRED;
  static const ArgumentCardinality REPEATED =
    FunctionEnums_ArgumentCardinality_REPEATED;
  static const ArgumentCardinality OPTIONAL =
    FunctionEnums_ArgumentCardinality_OPTIONAL;
  static inline bool ArgumentCardinality_IsValid(int value) {
    return FunctionEnums_ArgumentCardinality_IsValid(value);
  }
  static const ArgumentCardinality ArgumentCardinality_MIN =
    FunctionEnums_ArgumentCardinality_ArgumentCardinality_MIN;
  static const ArgumentCardinality ArgumentCardinality_MAX =
    FunctionEnums_ArgumentCardinality_ArgumentCardinality_MAX;
  static const int ArgumentCardinality_ARRAYSIZE =
    FunctionEnums_ArgumentCardinality_ArgumentCardinality_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ArgumentCardinality_descriptor() {
    return FunctionEnums_ArgumentCardinality_descriptor();
  }
  static inline const ::std::string& ArgumentCardinality_Name(ArgumentCardinality value) {
    return FunctionEnums_ArgumentCardinality_Name(value);
  }
  static inline bool ArgumentCardinality_Parse(const ::std::string& name,
      ArgumentCardinality* value) {
    return FunctionEnums_ArgumentCardinality_Parse(name, value);
  }

  typedef FunctionEnums_ProcedureArgumentMode ProcedureArgumentMode;
  static const ProcedureArgumentMode NOT_SET =
    FunctionEnums_ProcedureArgumentMode_NOT_SET;
  static const ProcedureArgumentMode IN =
    FunctionEnums_ProcedureArgumentMode_IN;
  static const ProcedureArgumentMode OUT =
    FunctionEnums_ProcedureArgumentMode_OUT;
  static const ProcedureArgumentMode INOUT =
    FunctionEnums_ProcedureArgumentMode_INOUT;
  static inline bool ProcedureArgumentMode_IsValid(int value) {
    return FunctionEnums_ProcedureArgumentMode_IsValid(value);
  }
  static const ProcedureArgumentMode ProcedureArgumentMode_MIN =
    FunctionEnums_ProcedureArgumentMode_ProcedureArgumentMode_MIN;
  static const ProcedureArgumentMode ProcedureArgumentMode_MAX =
    FunctionEnums_ProcedureArgumentMode_ProcedureArgumentMode_MAX;
  static const int ProcedureArgumentMode_ARRAYSIZE =
    FunctionEnums_ProcedureArgumentMode_ProcedureArgumentMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProcedureArgumentMode_descriptor() {
    return FunctionEnums_ProcedureArgumentMode_descriptor();
  }
  static inline const ::std::string& ProcedureArgumentMode_Name(ProcedureArgumentMode value) {
    return FunctionEnums_ProcedureArgumentMode_Name(value);
  }
  static inline bool ProcedureArgumentMode_Parse(const ::std::string& name,
      ProcedureArgumentMode* value) {
    return FunctionEnums_ProcedureArgumentMode_Parse(name, value);
  }

  typedef FunctionEnums_WindowOrderSupport WindowOrderSupport;
  static const WindowOrderSupport ORDER_UNSUPPORTED =
    FunctionEnums_WindowOrderSupport_ORDER_UNSUPPORTED;
  static const WindowOrderSupport ORDER_OPTIONAL =
    FunctionEnums_WindowOrderSupport_ORDER_OPTIONAL;
  static const WindowOrderSupport ORDER_REQUIRED =
    FunctionEnums_WindowOrderSupport_ORDER_REQUIRED;
  static inline bool WindowOrderSupport_IsValid(int value) {
    return FunctionEnums_WindowOrderSupport_IsValid(value);
  }
  static const WindowOrderSupport WindowOrderSupport_MIN =
    FunctionEnums_WindowOrderSupport_WindowOrderSupport_MIN;
  static const WindowOrderSupport WindowOrderSupport_MAX =
    FunctionEnums_WindowOrderSupport_WindowOrderSupport_MAX;
  static const int WindowOrderSupport_ARRAYSIZE =
    FunctionEnums_WindowOrderSupport_WindowOrderSupport_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WindowOrderSupport_descriptor() {
    return FunctionEnums_WindowOrderSupport_descriptor();
  }
  static inline const ::std::string& WindowOrderSupport_Name(WindowOrderSupport value) {
    return FunctionEnums_WindowOrderSupport_Name(value);
  }
  static inline bool WindowOrderSupport_Parse(const ::std::string& name,
      WindowOrderSupport* value) {
    return FunctionEnums_WindowOrderSupport_Parse(name, value);
  }

  typedef FunctionEnums_Mode Mode;
  static const Mode SCALAR =
    FunctionEnums_Mode_SCALAR;
  static const Mode AGGREGATE =
    FunctionEnums_Mode_AGGREGATE;
  static const Mode ANALYTIC =
    FunctionEnums_Mode_ANALYTIC;
  static inline bool Mode_IsValid(int value) {
    return FunctionEnums_Mode_IsValid(value);
  }
  static const Mode Mode_MIN =
    FunctionEnums_Mode_Mode_MIN;
  static const Mode Mode_MAX =
    FunctionEnums_Mode_Mode_MAX;
  static const int Mode_ARRAYSIZE =
    FunctionEnums_Mode_Mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mode_descriptor() {
    return FunctionEnums_Mode_descriptor();
  }
  static inline const ::std::string& Mode_Name(Mode value) {
    return FunctionEnums_Mode_Name(value);
  }
  static inline bool Mode_Parse(const ::std::string& name,
      Mode* value) {
    return FunctionEnums_Mode_Parse(name, value);
  }

  typedef FunctionEnums_Volatility Volatility;
  static const Volatility IMMUTABLE =
    FunctionEnums_Volatility_IMMUTABLE;
  static const Volatility STABLE =
    FunctionEnums_Volatility_STABLE;
  static const Volatility VOLATILE =
    FunctionEnums_Volatility_VOLATILE;
  static inline bool Volatility_IsValid(int value) {
    return FunctionEnums_Volatility_IsValid(value);
  }
  static const Volatility Volatility_MIN =
    FunctionEnums_Volatility_Volatility_MIN;
  static const Volatility Volatility_MAX =
    FunctionEnums_Volatility_Volatility_MAX;
  static const int Volatility_ARRAYSIZE =
    FunctionEnums_Volatility_Volatility_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Volatility_descriptor() {
    return FunctionEnums_Volatility_descriptor();
  }
  static inline const ::std::string& Volatility_Name(Volatility value) {
    return FunctionEnums_Volatility_Name(value);
  }
  static inline bool Volatility_Parse(const ::std::string& name,
      Volatility* value) {
    return FunctionEnums_Volatility_Parse(name, value);
  }

  typedef FunctionEnums_TableValuedFunctionType TableValuedFunctionType;
  static const TableValuedFunctionType INVALID =
    FunctionEnums_TableValuedFunctionType_INVALID;
  static const TableValuedFunctionType FIXED_OUTPUT_SCHEMA_TVF =
    FunctionEnums_TableValuedFunctionType_FIXED_OUTPUT_SCHEMA_TVF;
  static const TableValuedFunctionType FORWARD_INPUT_SCHEMA_TO_OUTPUT_SCHEMA_TVF =
    FunctionEnums_TableValuedFunctionType_FORWARD_INPUT_SCHEMA_TO_OUTPUT_SCHEMA_TVF;
  static const TableValuedFunctionType TEMPLATED_SQL_TVF =
    FunctionEnums_TableValuedFunctionType_TEMPLATED_SQL_TVF;
  static const TableValuedFunctionType FORWARD_INPUT_SCHEMA_TO_OUTPUT_SCHEMA_WITH_APPENDED_COLUMNS =
    FunctionEnums_TableValuedFunctionType_FORWARD_INPUT_SCHEMA_TO_OUTPUT_SCHEMA_WITH_APPENDED_COLUMNS;
  static inline bool TableValuedFunctionType_IsValid(int value) {
    return FunctionEnums_TableValuedFunctionType_IsValid(value);
  }
  static const TableValuedFunctionType TableValuedFunctionType_MIN =
    FunctionEnums_TableValuedFunctionType_TableValuedFunctionType_MIN;
  static const TableValuedFunctionType TableValuedFunctionType_MAX =
    FunctionEnums_TableValuedFunctionType_TableValuedFunctionType_MAX;
  static const int TableValuedFunctionType_ARRAYSIZE =
    FunctionEnums_TableValuedFunctionType_TableValuedFunctionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TableValuedFunctionType_descriptor() {
    return FunctionEnums_TableValuedFunctionType_descriptor();
  }
  static inline const ::std::string& TableValuedFunctionType_Name(TableValuedFunctionType value) {
    return FunctionEnums_TableValuedFunctionType_Name(value);
  }
  static inline bool TableValuedFunctionType_Parse(const ::std::string& name,
      TableValuedFunctionType* value) {
    return FunctionEnums_TableValuedFunctionType_Parse(name, value);
  }

  typedef FunctionEnums_ArgumentCollationMode ArgumentCollationMode;
  static const ArgumentCollationMode AFFECTS_NONE =
    FunctionEnums_ArgumentCollationMode_AFFECTS_NONE;
  static const ArgumentCollationMode AFFECTS_OPERATION =
    FunctionEnums_ArgumentCollationMode_AFFECTS_OPERATION;
  static const ArgumentCollationMode AFFECTS_PROPAGATION =
    FunctionEnums_ArgumentCollationMode_AFFECTS_PROPAGATION;
  static const ArgumentCollationMode AFFECTS_OPERATION_AND_PROPAGATION =
    FunctionEnums_ArgumentCollationMode_AFFECTS_OPERATION_AND_PROPAGATION;
  static inline bool ArgumentCollationMode_IsValid(int value) {
    return FunctionEnums_ArgumentCollationMode_IsValid(value);
  }
  static const ArgumentCollationMode ArgumentCollationMode_MIN =
    FunctionEnums_ArgumentCollationMode_ArgumentCollationMode_MIN;
  static const ArgumentCollationMode ArgumentCollationMode_MAX =
    FunctionEnums_ArgumentCollationMode_ArgumentCollationMode_MAX;
  static const int ArgumentCollationMode_ARRAYSIZE =
    FunctionEnums_ArgumentCollationMode_ArgumentCollationMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ArgumentCollationMode_descriptor() {
    return FunctionEnums_ArgumentCollationMode_descriptor();
  }
  static inline const ::std::string& ArgumentCollationMode_Name(ArgumentCollationMode value) {
    return FunctionEnums_ArgumentCollationMode_Name(value);
  }
  static inline bool ArgumentCollationMode_Parse(const ::std::string& name,
      ArgumentCollationMode* value) {
    return FunctionEnums_ArgumentCollationMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:zetasql.FunctionEnums)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_zetasql_2fpublic_2ffunction_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FunctionEnums

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::zetasql::FunctionEnums_ArgumentCardinality> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::FunctionEnums_ArgumentCardinality>() {
  return ::zetasql::FunctionEnums_ArgumentCardinality_descriptor();
}
template <> struct is_proto_enum< ::zetasql::FunctionEnums_ProcedureArgumentMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::FunctionEnums_ProcedureArgumentMode>() {
  return ::zetasql::FunctionEnums_ProcedureArgumentMode_descriptor();
}
template <> struct is_proto_enum< ::zetasql::FunctionEnums_WindowOrderSupport> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::FunctionEnums_WindowOrderSupport>() {
  return ::zetasql::FunctionEnums_WindowOrderSupport_descriptor();
}
template <> struct is_proto_enum< ::zetasql::FunctionEnums_Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::FunctionEnums_Mode>() {
  return ::zetasql::FunctionEnums_Mode_descriptor();
}
template <> struct is_proto_enum< ::zetasql::FunctionEnums_Volatility> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::FunctionEnums_Volatility>() {
  return ::zetasql::FunctionEnums_Volatility_descriptor();
}
template <> struct is_proto_enum< ::zetasql::FunctionEnums_TableValuedFunctionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::FunctionEnums_TableValuedFunctionType>() {
  return ::zetasql::FunctionEnums_TableValuedFunctionType_descriptor();
}
template <> struct is_proto_enum< ::zetasql::FunctionEnums_ArgumentCollationMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::FunctionEnums_ArgumentCollationMode>() {
  return ::zetasql::FunctionEnums_ArgumentCollationMode_descriptor();
}
template <> struct is_proto_enum< ::zetasql::SignatureArgumentKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::SignatureArgumentKind>() {
  return ::zetasql::SignatureArgumentKind_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_zetasql_2fpublic_2ffunction_2eproto
