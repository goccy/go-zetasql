// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/options.proto

#include "zetasql/public/options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_zetasql_2fpublic_2foptions_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_zetasql_2fpublic_2foptions_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LanguageFeatureOptions;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_zetasql_2fpublic_2foptions_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResolvedASTRewriteOptions;
}  // namespace protobuf_zetasql_2fpublic_2foptions_2eproto
namespace zetasql {
class LanguageFeatureOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LanguageFeatureOptions>
      _instance;
} _LanguageFeatureOptions_default_instance_;
class ResolvedASTRewriteOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResolvedASTRewriteOptions>
      _instance;
} _ResolvedASTRewriteOptions_default_instance_;
}  // namespace zetasql
namespace protobuf_zetasql_2fpublic_2foptions_2eproto {
static void InitDefaultsLanguageFeatureOptions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_LanguageFeatureOptions_default_instance_;
    new (ptr) ::zetasql::LanguageFeatureOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::LanguageFeatureOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LanguageFeatureOptions =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLanguageFeatureOptions}, {}};

static void InitDefaultsResolvedASTRewriteOptions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ResolvedASTRewriteOptions_default_instance_;
    new (ptr) ::zetasql::ResolvedASTRewriteOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ResolvedASTRewriteOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResolvedASTRewriteOptions =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResolvedASTRewriteOptions}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LanguageFeatureOptions.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResolvedASTRewriteOptions.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[9];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::LanguageFeatureOptions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::LanguageFeatureOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::LanguageFeatureOptions, ideally_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::LanguageFeatureOptions, in_development_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ResolvedASTRewriteOptions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ResolvedASTRewriteOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ResolvedASTRewriteOptions, default_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ResolvedASTRewriteOptions, in_development_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::zetasql::LanguageFeatureOptions)},
  { 9, 16, sizeof(::zetasql::ResolvedASTRewriteOptions)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_LanguageFeatureOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ResolvedASTRewriteOptions_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "zetasql/public/options.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\034zetasql/public/options.proto\022\007zetasql\032"
      " google/protobuf/descriptor.proto\"V\n\026Lan"
      "guageFeatureOptions\022\035\n\017ideally_enabled\030\001"
      " \001(\010:\004true\022\035\n\016in_development\030\002 \001(\010:\005fals"
      "e\"S\n\031ResolvedASTRewriteOptions\022\027\n\017defaul"
      "t_enabled\030\001 \001(\010\022\035\n\016in_development\030\002 \001(\010:"
      "\005false*\254\001\n\017LanguageVersion\022\023\n\017VERSION_CU"
      "RRENT\020\001\022\020\n\013VERSION_1_0\020\220N\022\020\n\013VERSION_1_1"
      "\020\370U\022\020\n\013VERSION_1_2\020\340]\022\020\n\013VERSION_1_3\020\310e\022"
      "<\n/__LanguageVersion__switch_must_have_a"
      "_default__\020\377\377\377\377\377\377\377\377\377\001*\216+\n\017LanguageFeatur"
      "e\022\036\n\032FEATURE_ANALYTIC_FUNCTIONS\020\001\022\027\n\023FEA"
      "TURE_TABLESAMPLE\020\002\022-\n\037FEATURE_DISALLOW_G"
      "ROUP_BY_FLOAT\020\003\032\010\332\361\252\211\005\002\010\000\022\033\n\027FEATURE_TIM"
      "ESTAMP_NANOS\020\005\022 \n\034FEATURE_DML_UPDATE_WIT"
      "H_JOIN\020\006\022\"\n\036FEATURE_TABLE_VALUED_FUNCTIO"
      "NS\020\010\022%\n!FEATURE_CREATE_AGGREGATE_FUNCTIO"
      "N\020\t\022!\n\035FEATURE_CREATE_TABLE_FUNCTION\020\n\022\033"
      "\n\027FEATURE_GROUP_BY_ROLLUP\020\014\022\036\n\032FEATURE_T"
      "EMPLATE_FUNCTIONS\020\r\022%\n!FEATURE_CREATE_TA"
      "BLE_PARTITION_BY\020\016\022#\n\037FEATURE_CREATE_TAB"
      "LE_CLUSTER_BY\020\017\022\030\n\024FEATURE_NUMERIC_TYPE\020"
      "\020\022!\n\035FEATURE_CREATE_TABLE_NOT_NULL\020\021\022*\n&"
      "FEATURE_CREATE_TABLE_FIELD_ANNOTATIONS\020\022"
      "\022.\n*FEATURE_CREATE_TABLE_AS_SELECT_COLUM"
      "N_LIST\020\023\0220\n\"FEATURE_DISALLOW_NULL_PRIMAR"
      "Y_KEYS\020\024\032\010\332\361\252\211\005\002\010\000\0222\n$FEATURE_DISALLOW_P"
      "RIMARY_KEY_UPDATES\020\025\032\010\332\361\252\211\005\002\010\000\0223\n/FEATUR"
      "E_TABLESAMPLE_FROM_TABLE_VALUED_FUNCTION"
      "S\020\026\022\026\n\022FEATURE_ENCRYPTION\020\027\022#\n\025FEATURE_A"
      "NONYMIZATION\020\030\032\010\332\361\252\211\005\002\020\001\022\025\n\021FEATURE_GEOG"
      "RAPHY\020\031\022,\n(FEATURE_STRATIFIED_RESERVOIR_"
      "TABLESAMPLE\020\032\022\030\n\024FEATURE_FOREIGN_KEYS\020\033\022"
      "*\n\034FEATURE_BETWEEN_UINT64_INT64\020\034\032\010\332\361\252\211\005"
      "\002\020\001\022\034\n\030FEATURE_CHECK_CONSTRAINT\020\035\022&\n\"FEA"
      "TURE_PARAMETERS_IN_GRANTEE_LIST\020\036\022\033\n\027FEA"
      "TURE_NAMED_ARGUMENTS\020\037\0221\n-FEATURE_ALLOW_"
      "LEGACY_ROW_ACCESS_POLICY_SYNTAX\020 \0221\n-FEA"
      "TURE_CREATE_MATERIALIZED_VIEW_PARTITION_"
      "BY\020!\022/\n+FEATURE_CREATE_MATERIALIZED_VIEW"
      "_CLUSTER_BY\020\"\0229\n5FEATURE_CREATE_EXTERNAL"
      "_TABLE_WITH_TABLE_ELEMENT_LIST\020#\022#\n\037FEAT"
      "URE_UNENFORCED_PRIMARY_KEYS\020(\022\033\n\027FEATURE"
      "_BIGNUMERIC_TYPE\020)\022$\n\026FEATURE_EXTENDED_T"
      "YPES\020*\032\010\332\361\252\211\005\002\020\001\022\037\n\021FEATURE_JSON_TYPE\020+\032"
      "\010\332\361\252\211\005\002\020\001\0220\n\032FEATURE_JSON_NO_VALIDATION\020"
      ",\032\020\332\361\252\211\005\002\010\000\332\361\252\211\005\002\020\001\022/\n\031FEATURE_JSON_LEGA"
      "CY_PARSE\020.\032\020\332\361\252\211\005\002\010\000\332\361\252\211\005\002\020\001\022B\n4FEATURE_"
      "CREATE_EXTERNAL_TABLE_WITH_PARTITION_COL"
      "UMNS\020/\032\010\332\361\252\211\005\002\020\001\022#\n\025FEATURE_INTERVAL_TYP"
      "E\0201\032\010\332\361\252\211\005\002\020\001\0228\n\"FEATURE_JSON_STRICT_NUM"
      "BER_PARSING\0204\032\020\332\361\252\211\005\002\010\000\332\361\252\211\005\002\020\001\0224\n0FEATU"
      "RE_FUNCTION_ARGUMENT_NAMES_HIDE_LOCAL_NA"
      "MES\0207\022)\n\033FEATURE_PARAMETERIZED_TYPES\0208\032\010"
      "\332\361\252\211\005\002\020\001\022\'\n\031FEATURE_CREATE_TABLE_LIKE\0209\032"
      "\010\332\361\252\211\005\002\020\001\022*\n\034FEATURE_JSON_ARRAY_FUNCTION"
      "S\020:\032\010\332\361\252\211\005\002\020\001\0222\n$FEATURE_CREATE_VIEW_WIT"
      "H_COLUMN_LIST\020;\032\010\332\361\252\211\005\002\020\001\022(\n\032FEATURE_CRE"
      "ATE_TABLE_CLONE\020<\032\010\332\361\252\211\005\002\020\001\022 \n\022FEATURE_C"
      "LONE_DATA\020=\032\010\332\361\252\211\005\002\020\001\0220\n\"FEATURE_ALTER_C"
      "OLUMN_SET_DATA_TYPE\020>\032\010\332\361\252\211\005\002\020\001\022+\n\035FEATU"
      "RE_CREATE_SNAPSHOT_TABLE\020\?\032\010\332\361\252\211\005\002\020\001\022,\n("
      "FEATURE_FUNCTION_ARGUMENTS_WITH_DEFAULTS"
      "\020@\022;\n-FEATURE_CREATE_EXTERNAL_TABLE_WITH"
      "_CONNECTION\020A\032\010\332\361\252\211\005\002\020\001\022\'\n\031FEATURE_CREAT"
      "E_TABLE_COPY\020B\032\010\332\361\252\211\005\002\020\001\022%\n!FEATURE_ALTE"
      "R_TABLE_RENAME_COLUMN\020C\0225\n\'FEATURE_JSON_"
      "VALUE_EXTRACTION_FUNCTIONS\020D\032\010\332\361\252\211\005\002\020\001\022\?"
      "\n)FEATURE_DISALLOW_LEGACY_UNICODE_COLLAT"
      "ION\020E\032\020\332\361\252\211\005\002\020\001\332\361\252\211\005\002\010\000\0226\n2FEATURE_ALLOW"
      "_MISSING_PATH_EXPRESSION_IN_ALTER_DDL\020F\022"
      "#\n\036FEATURE_V_1_1_ORDER_BY_COLLATE\020\371U\022#\n\036"
      "FEATURE_V_1_1_WITH_ON_SUBQUERY\020\372U\022-\n(FEA"
      "TURE_V_1_1_SELECT_STAR_EXCEPT_REPLACE\020\373U"
      "\022(\n#FEATURE_V_1_1_ORDER_BY_IN_AGGREGATE\020"
      "\374U\022-\n(FEATURE_V_1_1_CAST_DIFFERENT_ARRAY"
      "_TYPES\020\375U\022!\n\034FEATURE_V_1_1_ARRAY_EQUALIT"
      "Y\020\376U\022%\n FEATURE_V_1_1_LIMIT_IN_AGGREGATE"
      "\020\377U\022&\n!FEATURE_V_1_1_HAVING_IN_AGGREGATE"
      "\020\200V\0225\n0FEATURE_V_1_1_NULL_HANDLING_MODIF"
      "IER_IN_ANALYTIC\020\201V\0226\n1FEATURE_V_1_1_NULL"
      "_HANDLING_MODIFIER_IN_AGGREGATE\020\202V\022(\n#FE"
      "ATURE_V_1_1_FOR_SYSTEM_TIME_AS_OF\020\203V\022\035\n\030"
      "FEATURE_V_1_2_CIVIL_TIME\020\341]\022%\n FEATURE_V"
      "_1_2_SAFE_FUNCTION_CALL\020\342]\022\"\n\035FEATURE_V_"
      "1_2_GROUP_BY_STRUCT\020\343]\022,\n\'FEATURE_V_1_2_"
      "PROTO_EXTENSIONS_WITH_NEW\020\344]\022!\n\034FEATURE_"
      "V_1_2_GROUP_BY_ARRAY\020\345]\022,\n\'FEATURE_V_1_2"
      "_PROTO_EXTENSIONS_WITH_SET\020\346]\0220\n+FEATURE"
      "_V_1_2_CORRELATED_REFS_IN_NESTED_DML\020\347]\022"
      "$\n\037FEATURE_V_1_2_WEEK_WITH_WEEKDAY\020\350]\022*\n"
      "%FEATURE_V_1_2_ARRAY_ELEMENTS_WITH_SET\020\351"
      "]\0223\n.FEATURE_V_1_2_NESTED_UPDATE_DELETE_"
      "WITH_OFFSET\020\352]\022$\n\037FEATURE_V_1_2_GENERATE"
      "D_COLUMNS\020\353]\022(\n#FEATURE_V_1_3_PROTO_DEFA"
      "ULT_IF_NULL\020\311e\022%\n FEATURE_V_1_3_EXTRACT_"
      "FROM_PROTO\020\312e\022B\n3FEATURE_DEPRECATED_DISA"
      "LLOW_PROTO3_HAS_SCALAR_FIELD\020\313e\032\010\332\361\252\211\005\002\010"
      "\000\022!\n\034FEATURE_V_1_3_ARRAY_ORDERING\020\314e\022*\n%"
      "FEATURE_V_1_3_OMIT_INSERT_COLUMN_LIST\020\315e"
      "\022-\n(FEATURE_V_1_3_IGNORE_PROTO3_USE_DEFA"
      "ULTS\020\316e\022+\n\034FEATURE_V_1_3_REPLACE_FIELDS\020"
      "\317e\032\010\332\361\252\211\005\002\020\001\022/\n*FEATURE_V_1_3_NULLS_FIRS"
      "T_LAST_IN_ORDER_BY\020\320e\022-\n(FEATURE_V_1_3_A"
      "LLOW_DASHES_IN_TABLE_NAME\020\321e\022%\n FEATURE_"
      "V_1_3_CONCAT_MIXED_TYPES\020\322e\022+\n\034FEATURE_V"
      "_1_3_WITH_RECURSIVE\020\323e\032\010\332\361\252\211\005\002\020\001\022\'\n\030FEAT"
      "URE_V_1_3_PROTO_MAPS\020\324e\032\010\332\361\252\211\005\002\020\000\022.\n)FEA"
      "TURE_V_1_3_ENUM_VALUE_DESCRIPTOR_PROTO\020\325"
      "e\022 \n\033FEATURE_V_1_3_DECIMAL_ALIAS\020\326e\022,\n\'F"
      "EATURE_V_1_3_UNNEST_AND_FLATTEN_ARRAYS\020\327"
      "e\022\'\n\"FEATURE_V_1_3_ALLOW_CONSECUTIVE_ON\020"
      "\330e\022;\n,FEATURE_V_1_3_ALLOW_REGEXP_EXTRACT"
      "_OPTIONALS\020\331e\032\010\332\361\252\211\005\002\020\001\022)\n$FEATURE_V_1_3"
      "_DATE_TIME_CONSTRUCTORS\020\332e\022#\n\036FEATURE_V_"
      "1_3_DATE_ARITHMETICS\020\333e\022.\n)FEATURE_V_1_3"
      "_ADDITIONAL_STRING_FUNCTIONS\020\334e\022\"\n\035FEATU"
      "RE_V_1_3_WITH_GROUP_ROWS\020\335e\0220\n+FEATURE_V"
      "_1_3_EXTENDED_DATE_TIME_SIGNATURES\020\336e\022-\n"
      "(FEATURE_V_1_3_EXTENDED_GEOGRAPHY_PARSER"
      "S\020\337e\022)\n$FEATURE_V_1_3_INLINE_LAMBDA_ARGU"
      "MENT\020\340e\022\030\n\023FEATURE_V_1_3_PIVOT\020\341e\022\'\n\"FEA"
      "TURE_V_1_3_ANNOTATION_FRAMEWORK\020\342e\022.\n\037FE"
      "ATURE_V_1_3_COLLATION_SUPPORT\020\343e\032\010\332\361\252\211\005\002"
      "\020\001\022\036\n\031FEATURE_V_1_3_IS_DISTINCT\020\344e\022+\n\034FE"
      "ATURE_V_1_3_FORMAT_IN_CAST\020\345e\032\010\332\361\252\211\005\002\020\001\022"
      "\032\n\025FEATURE_V_1_3_UNPIVOT\020\346e\022*\n\033FEATURE_V"
      "_1_3_DML_RETURNING\020\347e\032\010\332\361\252\211\005\002\020\001\022*\n\033FEATU"
      "RE_V_1_3_FILTER_FIELDS\020\350e\032\010\332\361\252\211\005\002\020\001\022$\n\025F"
      "EATURE_V_1_3_QUALIFY\020\351e\032\010\332\361\252\211\005\002\020\001\022#\n\024FEA"
      "TURE_V_1_3_REPEAT\020\352e\032\010\332\361\252\211\005\002\020\001\0221\n\"FEATUR"
      "E_V_1_3_COLUMN_DEFAULT_VALUE\020\353e\032\010\332\361\252\211\005\002\020"
      "\001\022#\n\024FEATURE_V_1_3_FOR_IN\020\354e\032\010\332\361\252\211\005\002\020\001\022\030"
      "\n\023FEATURE_KLL_WEIGHTS\020\355e\022.\n\037FEATURE_V_1_"
      "3_LIKE_ANY_SOME_ALL\020\356e\032\010\332\361\252\211\005\002\020\001\022&\n\027FEAT"
      "URE_V_1_3_CASE_STMT\020\357e\032\010\332\361\252\211\005\002\020\001\022$\n\037FEAT"
      "URE_V_1_3_ALLOW_SLASH_PATHS\020\360e\022\"\n\035FEATUR"
      "E_V_1_3_TYPEOF_FUNCTION\020\361e\022)\n\032FEATURE_V_"
      "1_3_SCRIPT_LABEL\020\362e\032\010\332\361\252\211\005\002\020\001\022,\n\035FEATURE"
      "_V_1_3_REMOTE_FUNCTION\020\363e\032\010\332\361\252\211\005\002\020\001\022\'\n\"F"
      "EATURE_V_1_3_ARRAY_GREATEST_LEAST\020\364e\022,\n\034"
      "FEATURE_EXPERIMENTAL_MODULES\020\332\374<\032\010\332\361\252\211\005\002"
      "\020\001\022\?\n/FEATURE_TEST_IDEALLY_ENABLED_BUT_I"
      "N_DEVELOPMENT\020\267\204=\032\010\332\361\252\211\005\002\020\001\022-\n\035FEATURE_T"
      "EST_IDEALLY_DISABLED\020\270\204=\032\010\332\361\252\211\005\002\010\000\022B\n0FE"
      "ATURE_TEST_IDEALLY_DISABLED_AND_IN_DEVEL"
      "OPMENT\020\271\204=\032\n\332\361\252\211\005\004\010\000\020\001\022<\n/__LanguageFeat"
      "ure__switch_must_have_a_default__\020\377\377\377\377\377\377"
      "\377\377\377\001\"\004\010$\020\'\"\004\010-\020-\"\004\0100\0200*\250\003\n\022ResolvedASTRe"
      "write\022\036\n\032REWRITE_INVALID_DO_NOT_USE\020\000\022\035\n"
      "\017REWRITE_FLATTEN\020\001\032\010\202\207\335\204\n\002\010\001\022#\n\025REWRITE_"
      "ANONYMIZATION\020\002\032\010\202\207\335\204\n\002\010\000\022#\n\025REWRITE_PRO"
      "TO_MAP_FNS\020\003\032\010\202\207\335\204\n\002\010\001\022,\n\036REWRITE_ARRAY_"
      "FILTER_TRANSFORM\020\004\032\010\202\207\335\204\n\002\010\001\022\035\n\017REWRITE_"
      "UNPIVOT\020\005\032\010\202\207\335\204\n\002\010\001\022\033\n\rREWRITE_PIVOT\020\006\032\010"
      "\202\207\335\204\n\002\010\001\022$\n\026REWRITE_ARRAY_INCLUDES\020\007\032\010\202\207"
      "\335\204\n\002\010\001\022%\n\027REWRITE_TYPEOF_FUNCTION\020\010\032\010\202\207\335"
      "\204\n\002\010\001\022\036\n\020REWRITE_LET_EXPR\020\t\032\010\202\207\335\204\n\002\010\001\0222\n"
      "\034REWRITE_INLINE_SQL_FUNCTIONS\020\n\032\020\202\207\335\204\n\002\010"
      "\000\202\207\335\204\n\002\020\001*M\n\022NameResolutionMode\022\033\n\027NAME_"
      "RESOLUTION_DEFAULT\020\000\022\032\n\026NAME_RESOLUTION_"
      "STRICT\020\001*9\n\013ProductMode\022\024\n\020PRODUCT_INTER"
      "NAL\020\000\022\024\n\020PRODUCT_EXTERNAL\020\001*;\n\020Statement"
      "Context\022\023\n\017CONTEXT_DEFAULT\020\000\022\022\n\016CONTEXT_"
      "MODULE\020\001*w\n\020ErrorMessageMode\022\036\n\032ERROR_ME"
      "SSAGE_WITH_PAYLOAD\020\000\022\032\n\026ERROR_MESSAGE_ON"
      "E_LINE\020\001\022\'\n#ERROR_MESSAGE_MULTI_LINE_WIT"
      "H_CARET\020\002*R\n\rParameterMode\022\023\n\017PARAMETER_"
      "NAMED\020\000\022\030\n\024PARAMETER_POSITIONAL\020\001\022\022\n\016PAR"
      "AMETER_NONE\020\002*\213\001\n\027ParseLocationRecordTyp"
      "e\022\036\n\032PARSE_LOCATION_RECORD_NONE\020\000\022)\n%PAR"
      "SE_LOCATION_RECORD_FULL_NODE_SCOPE\020\001\022%\n!"
      "PARSE_LOCATION_RECORD_CODE_SEARCH\020\002:g\n\030l"
      "anguage_feature_options\022!.google.protobu"
      "f.EnumValueOptions\030\233\256\225Q \001(\0132\037.zetasql.La"
      "nguageFeatureOptions:b\n\017rewrite_options\022"
      "!.google.protobuf.EnumValueOptions\030\360\320\313\240\001"
      " \001(\0132\".zetasql.ResolvedASTRewriteOptions"
      "B$\n\022com.google.zetasqlB\016ZetaSQLOptions"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 7158);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zetasql/public/options.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fdescriptor_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_zetasql_2fpublic_2foptions_2eproto
namespace zetasql {
const ::google::protobuf::EnumDescriptor* LanguageVersion_descriptor() {
  protobuf_zetasql_2fpublic_2foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fpublic_2foptions_2eproto::file_level_enum_descriptors[0];
}
bool LanguageVersion_IsValid(int value) {
  switch (value) {
    case -1:
    case 1:
    case 10000:
    case 11000:
    case 12000:
    case 13000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LanguageFeature_descriptor() {
  protobuf_zetasql_2fpublic_2foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fpublic_2foptions_2eproto::file_level_enum_descriptors[1];
}
bool LanguageFeature_IsValid(int value) {
  switch (value) {
    case -1:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 46:
    case 47:
    case 49:
    case 52:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 11001:
    case 11002:
    case 11003:
    case 11004:
    case 11005:
    case 11006:
    case 11007:
    case 11008:
    case 11009:
    case 11010:
    case 11011:
    case 12001:
    case 12002:
    case 12003:
    case 12004:
    case 12005:
    case 12006:
    case 12007:
    case 12008:
    case 12009:
    case 12010:
    case 12011:
    case 13001:
    case 13002:
    case 13003:
    case 13004:
    case 13005:
    case 13006:
    case 13007:
    case 13008:
    case 13009:
    case 13010:
    case 13011:
    case 13012:
    case 13013:
    case 13014:
    case 13015:
    case 13016:
    case 13017:
    case 13018:
    case 13019:
    case 13020:
    case 13021:
    case 13022:
    case 13023:
    case 13024:
    case 13025:
    case 13026:
    case 13027:
    case 13028:
    case 13029:
    case 13030:
    case 13031:
    case 13032:
    case 13033:
    case 13034:
    case 13035:
    case 13036:
    case 13037:
    case 13038:
    case 13039:
    case 13040:
    case 13041:
    case 13042:
    case 13043:
    case 13044:
    case 999002:
    case 999991:
    case 999992:
    case 999993:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResolvedASTRewrite_descriptor() {
  protobuf_zetasql_2fpublic_2foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fpublic_2foptions_2eproto::file_level_enum_descriptors[2];
}
bool ResolvedASTRewrite_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NameResolutionMode_descriptor() {
  protobuf_zetasql_2fpublic_2foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fpublic_2foptions_2eproto::file_level_enum_descriptors[3];
}
bool NameResolutionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ProductMode_descriptor() {
  protobuf_zetasql_2fpublic_2foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fpublic_2foptions_2eproto::file_level_enum_descriptors[4];
}
bool ProductMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StatementContext_descriptor() {
  protobuf_zetasql_2fpublic_2foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fpublic_2foptions_2eproto::file_level_enum_descriptors[5];
}
bool StatementContext_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ErrorMessageMode_descriptor() {
  protobuf_zetasql_2fpublic_2foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fpublic_2foptions_2eproto::file_level_enum_descriptors[6];
}
bool ErrorMessageMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ParameterMode_descriptor() {
  protobuf_zetasql_2fpublic_2foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fpublic_2foptions_2eproto::file_level_enum_descriptors[7];
}
bool ParameterMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ParseLocationRecordType_descriptor() {
  protobuf_zetasql_2fpublic_2foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fpublic_2foptions_2eproto::file_level_enum_descriptors[8];
}
bool ParseLocationRecordType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LanguageFeatureOptions::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LanguageFeatureOptions::kIdeallyEnabledFieldNumber;
const int LanguageFeatureOptions::kInDevelopmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LanguageFeatureOptions::LanguageFeatureOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fpublic_2foptions_2eproto::scc_info_LanguageFeatureOptions.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.LanguageFeatureOptions)
}
LanguageFeatureOptions::LanguageFeatureOptions(const LanguageFeatureOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&in_development_, &from.in_development_,
    static_cast<size_t>(reinterpret_cast<char*>(&ideally_enabled_) -
    reinterpret_cast<char*>(&in_development_)) + sizeof(ideally_enabled_));
  // @@protoc_insertion_point(copy_constructor:zetasql.LanguageFeatureOptions)
}

void LanguageFeatureOptions::SharedCtor() {
  in_development_ = false;
  ideally_enabled_ = true;
}

LanguageFeatureOptions::~LanguageFeatureOptions() {
  // @@protoc_insertion_point(destructor:zetasql.LanguageFeatureOptions)
  SharedDtor();
}

void LanguageFeatureOptions::SharedDtor() {
}

void LanguageFeatureOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LanguageFeatureOptions::descriptor() {
  ::protobuf_zetasql_2fpublic_2foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fpublic_2foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LanguageFeatureOptions& LanguageFeatureOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fpublic_2foptions_2eproto::scc_info_LanguageFeatureOptions.base);
  return *internal_default_instance();
}


void LanguageFeatureOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.LanguageFeatureOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    in_development_ = false;
    ideally_enabled_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LanguageFeatureOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.LanguageFeatureOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool ideally_enabled = 1 [default = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ideally_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ideally_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool in_development = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_in_development();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_development_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.LanguageFeatureOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.LanguageFeatureOptions)
  return false;
#undef DO_
}

void LanguageFeatureOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.LanguageFeatureOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool ideally_enabled = 1 [default = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ideally_enabled(), output);
  }

  // optional bool in_development = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->in_development(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.LanguageFeatureOptions)
}

::google::protobuf::uint8* LanguageFeatureOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.LanguageFeatureOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool ideally_enabled = 1 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ideally_enabled(), target);
  }

  // optional bool in_development = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->in_development(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.LanguageFeatureOptions)
  return target;
}

size_t LanguageFeatureOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.LanguageFeatureOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bool in_development = 2 [default = false];
    if (has_in_development()) {
      total_size += 1 + 1;
    }

    // optional bool ideally_enabled = 1 [default = true];
    if (has_ideally_enabled()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LanguageFeatureOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.LanguageFeatureOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const LanguageFeatureOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LanguageFeatureOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.LanguageFeatureOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.LanguageFeatureOptions)
    MergeFrom(*source);
  }
}

void LanguageFeatureOptions::MergeFrom(const LanguageFeatureOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.LanguageFeatureOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      in_development_ = from.in_development_;
    }
    if (cached_has_bits & 0x00000002u) {
      ideally_enabled_ = from.ideally_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LanguageFeatureOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.LanguageFeatureOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LanguageFeatureOptions::CopyFrom(const LanguageFeatureOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.LanguageFeatureOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanguageFeatureOptions::IsInitialized() const {
  return true;
}

void LanguageFeatureOptions::Swap(LanguageFeatureOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LanguageFeatureOptions::InternalSwap(LanguageFeatureOptions* other) {
  using std::swap;
  swap(in_development_, other->in_development_);
  swap(ideally_enabled_, other->ideally_enabled_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LanguageFeatureOptions::GetMetadata() const {
  protobuf_zetasql_2fpublic_2foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fpublic_2foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResolvedASTRewriteOptions::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResolvedASTRewriteOptions::kDefaultEnabledFieldNumber;
const int ResolvedASTRewriteOptions::kInDevelopmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResolvedASTRewriteOptions::ResolvedASTRewriteOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fpublic_2foptions_2eproto::scc_info_ResolvedASTRewriteOptions.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ResolvedASTRewriteOptions)
}
ResolvedASTRewriteOptions::ResolvedASTRewriteOptions(const ResolvedASTRewriteOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&default_enabled_, &from.default_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&in_development_) -
    reinterpret_cast<char*>(&default_enabled_)) + sizeof(in_development_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedASTRewriteOptions)
}

void ResolvedASTRewriteOptions::SharedCtor() {
  ::memset(&default_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_development_) -
      reinterpret_cast<char*>(&default_enabled_)) + sizeof(in_development_));
}

ResolvedASTRewriteOptions::~ResolvedASTRewriteOptions() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedASTRewriteOptions)
  SharedDtor();
}

void ResolvedASTRewriteOptions::SharedDtor() {
}

void ResolvedASTRewriteOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResolvedASTRewriteOptions::descriptor() {
  ::protobuf_zetasql_2fpublic_2foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fpublic_2foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResolvedASTRewriteOptions& ResolvedASTRewriteOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fpublic_2foptions_2eproto::scc_info_ResolvedASTRewriteOptions.base);
  return *internal_default_instance();
}


void ResolvedASTRewriteOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ResolvedASTRewriteOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&default_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_development_) -
      reinterpret_cast<char*>(&default_enabled_)) + sizeof(in_development_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResolvedASTRewriteOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ResolvedASTRewriteOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool default_enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_default_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &default_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool in_development = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_in_development();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_development_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ResolvedASTRewriteOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ResolvedASTRewriteOptions)
  return false;
#undef DO_
}

void ResolvedASTRewriteOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ResolvedASTRewriteOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool default_enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->default_enabled(), output);
  }

  // optional bool in_development = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->in_development(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ResolvedASTRewriteOptions)
}

::google::protobuf::uint8* ResolvedASTRewriteOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ResolvedASTRewriteOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool default_enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->default_enabled(), target);
  }

  // optional bool in_development = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->in_development(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ResolvedASTRewriteOptions)
  return target;
}

size_t ResolvedASTRewriteOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ResolvedASTRewriteOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bool default_enabled = 1;
    if (has_default_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool in_development = 2 [default = false];
    if (has_in_development()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResolvedASTRewriteOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ResolvedASTRewriteOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ResolvedASTRewriteOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResolvedASTRewriteOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ResolvedASTRewriteOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ResolvedASTRewriteOptions)
    MergeFrom(*source);
  }
}

void ResolvedASTRewriteOptions::MergeFrom(const ResolvedASTRewriteOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ResolvedASTRewriteOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      default_enabled_ = from.default_enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      in_development_ = from.in_development_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResolvedASTRewriteOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ResolvedASTRewriteOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolvedASTRewriteOptions::CopyFrom(const ResolvedASTRewriteOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ResolvedASTRewriteOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolvedASTRewriteOptions::IsInitialized() const {
  return true;
}

void ResolvedASTRewriteOptions::Swap(ResolvedASTRewriteOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResolvedASTRewriteOptions::InternalSwap(ResolvedASTRewriteOptions* other) {
  using std::swap;
  swap(default_enabled_, other->default_enabled_);
  swap(in_development_, other->in_development_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResolvedASTRewriteOptions::GetMetadata() const {
  protobuf_zetasql_2fpublic_2foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fpublic_2foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}

::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::EnumValueOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::zetasql::LanguageFeatureOptions >, 11, false >
  language_feature_options(kLanguageFeatureOptionsFieldNumber, *::zetasql::LanguageFeatureOptions::internal_default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::EnumValueOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::zetasql::ResolvedASTRewriteOptions >, 11, false >
  rewrite_options(kRewriteOptionsFieldNumber, *::zetasql::ResolvedASTRewriteOptions::internal_default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace zetasql
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::LanguageFeatureOptions* Arena::CreateMaybeMessage< ::zetasql::LanguageFeatureOptions >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::LanguageFeatureOptions >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ResolvedASTRewriteOptions* Arena::CreateMaybeMessage< ::zetasql::ResolvedASTRewriteOptions >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::ResolvedASTRewriteOptions >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
