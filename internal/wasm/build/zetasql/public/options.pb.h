// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/options.proto

#ifndef PROTOBUF_INCLUDED_zetasql_2fpublic_2foptions_2eproto
#define PROTOBUF_INCLUDED_zetasql_2fpublic_2foptions_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_zetasql_2fpublic_2foptions_2eproto 

namespace protobuf_zetasql_2fpublic_2foptions_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_zetasql_2fpublic_2foptions_2eproto
namespace zetasql {
class LanguageFeatureOptions;
class LanguageFeatureOptionsDefaultTypeInternal;
extern LanguageFeatureOptionsDefaultTypeInternal _LanguageFeatureOptions_default_instance_;
class ResolvedASTRewriteOptions;
class ResolvedASTRewriteOptionsDefaultTypeInternal;
extern ResolvedASTRewriteOptionsDefaultTypeInternal _ResolvedASTRewriteOptions_default_instance_;
}  // namespace zetasql
namespace google {
namespace protobuf {
template<> ::zetasql::LanguageFeatureOptions* Arena::CreateMaybeMessage<::zetasql::LanguageFeatureOptions>(Arena*);
template<> ::zetasql::ResolvedASTRewriteOptions* Arena::CreateMaybeMessage<::zetasql::ResolvedASTRewriteOptions>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace zetasql {

enum LanguageVersion {
  VERSION_CURRENT = 1,
  VERSION_1_0 = 10000,
  VERSION_1_1 = 11000,
  VERSION_1_2 = 12000,
  VERSION_1_3 = 13000,
  __LanguageVersion__switch_must_have_a_default__ = -1
};
bool LanguageVersion_IsValid(int value);
const LanguageVersion LanguageVersion_MIN = __LanguageVersion__switch_must_have_a_default__;
const LanguageVersion LanguageVersion_MAX = VERSION_1_3;
const int LanguageVersion_ARRAYSIZE = LanguageVersion_MAX + 1;

const ::google::protobuf::EnumDescriptor* LanguageVersion_descriptor();
inline const ::std::string& LanguageVersion_Name(LanguageVersion value) {
  return ::google::protobuf::internal::NameOfEnum(
    LanguageVersion_descriptor(), value);
}
inline bool LanguageVersion_Parse(
    const ::std::string& name, LanguageVersion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LanguageVersion>(
    LanguageVersion_descriptor(), name, value);
}
enum LanguageFeature {
  FEATURE_ANALYTIC_FUNCTIONS = 1,
  FEATURE_TABLESAMPLE = 2,
  FEATURE_DISALLOW_GROUP_BY_FLOAT = 3,
  FEATURE_TIMESTAMP_NANOS = 5,
  FEATURE_DML_UPDATE_WITH_JOIN = 6,
  FEATURE_TABLE_VALUED_FUNCTIONS = 8,
  FEATURE_CREATE_AGGREGATE_FUNCTION = 9,
  FEATURE_CREATE_TABLE_FUNCTION = 10,
  FEATURE_GROUP_BY_ROLLUP = 12,
  FEATURE_TEMPLATE_FUNCTIONS = 13,
  FEATURE_CREATE_TABLE_PARTITION_BY = 14,
  FEATURE_CREATE_TABLE_CLUSTER_BY = 15,
  FEATURE_NUMERIC_TYPE = 16,
  FEATURE_CREATE_TABLE_NOT_NULL = 17,
  FEATURE_CREATE_TABLE_FIELD_ANNOTATIONS = 18,
  FEATURE_CREATE_TABLE_AS_SELECT_COLUMN_LIST = 19,
  FEATURE_DISALLOW_NULL_PRIMARY_KEYS = 20,
  FEATURE_DISALLOW_PRIMARY_KEY_UPDATES = 21,
  FEATURE_TABLESAMPLE_FROM_TABLE_VALUED_FUNCTIONS = 22,
  FEATURE_ENCRYPTION = 23,
  FEATURE_ANONYMIZATION = 24,
  FEATURE_GEOGRAPHY = 25,
  FEATURE_STRATIFIED_RESERVOIR_TABLESAMPLE = 26,
  FEATURE_FOREIGN_KEYS = 27,
  FEATURE_BETWEEN_UINT64_INT64 = 28,
  FEATURE_CHECK_CONSTRAINT = 29,
  FEATURE_PARAMETERS_IN_GRANTEE_LIST = 30,
  FEATURE_NAMED_ARGUMENTS = 31,
  FEATURE_ALLOW_LEGACY_ROW_ACCESS_POLICY_SYNTAX = 32,
  FEATURE_CREATE_MATERIALIZED_VIEW_PARTITION_BY = 33,
  FEATURE_CREATE_MATERIALIZED_VIEW_CLUSTER_BY = 34,
  FEATURE_CREATE_EXTERNAL_TABLE_WITH_TABLE_ELEMENT_LIST = 35,
  FEATURE_UNENFORCED_PRIMARY_KEYS = 40,
  FEATURE_BIGNUMERIC_TYPE = 41,
  FEATURE_EXTENDED_TYPES = 42,
  FEATURE_JSON_TYPE = 43,
  FEATURE_JSON_NO_VALIDATION = 44,
  FEATURE_JSON_LEGACY_PARSE = 46,
  FEATURE_CREATE_EXTERNAL_TABLE_WITH_PARTITION_COLUMNS = 47,
  FEATURE_INTERVAL_TYPE = 49,
  FEATURE_JSON_STRICT_NUMBER_PARSING = 52,
  FEATURE_FUNCTION_ARGUMENT_NAMES_HIDE_LOCAL_NAMES = 55,
  FEATURE_PARAMETERIZED_TYPES = 56,
  FEATURE_CREATE_TABLE_LIKE = 57,
  FEATURE_JSON_ARRAY_FUNCTIONS = 58,
  FEATURE_CREATE_VIEW_WITH_COLUMN_LIST = 59,
  FEATURE_CREATE_TABLE_CLONE = 60,
  FEATURE_CLONE_DATA = 61,
  FEATURE_ALTER_COLUMN_SET_DATA_TYPE = 62,
  FEATURE_CREATE_SNAPSHOT_TABLE = 63,
  FEATURE_FUNCTION_ARGUMENTS_WITH_DEFAULTS = 64,
  FEATURE_CREATE_EXTERNAL_TABLE_WITH_CONNECTION = 65,
  FEATURE_CREATE_TABLE_COPY = 66,
  FEATURE_ALTER_TABLE_RENAME_COLUMN = 67,
  FEATURE_JSON_VALUE_EXTRACTION_FUNCTIONS = 68,
  FEATURE_DISALLOW_LEGACY_UNICODE_COLLATION = 69,
  FEATURE_ALLOW_MISSING_PATH_EXPRESSION_IN_ALTER_DDL = 70,
  FEATURE_V_1_1_ORDER_BY_COLLATE = 11001,
  FEATURE_V_1_1_WITH_ON_SUBQUERY = 11002,
  FEATURE_V_1_1_SELECT_STAR_EXCEPT_REPLACE = 11003,
  FEATURE_V_1_1_ORDER_BY_IN_AGGREGATE = 11004,
  FEATURE_V_1_1_CAST_DIFFERENT_ARRAY_TYPES = 11005,
  FEATURE_V_1_1_ARRAY_EQUALITY = 11006,
  FEATURE_V_1_1_LIMIT_IN_AGGREGATE = 11007,
  FEATURE_V_1_1_HAVING_IN_AGGREGATE = 11008,
  FEATURE_V_1_1_NULL_HANDLING_MODIFIER_IN_ANALYTIC = 11009,
  FEATURE_V_1_1_NULL_HANDLING_MODIFIER_IN_AGGREGATE = 11010,
  FEATURE_V_1_1_FOR_SYSTEM_TIME_AS_OF = 11011,
  FEATURE_V_1_2_CIVIL_TIME = 12001,
  FEATURE_V_1_2_SAFE_FUNCTION_CALL = 12002,
  FEATURE_V_1_2_GROUP_BY_STRUCT = 12003,
  FEATURE_V_1_2_PROTO_EXTENSIONS_WITH_NEW = 12004,
  FEATURE_V_1_2_GROUP_BY_ARRAY = 12005,
  FEATURE_V_1_2_PROTO_EXTENSIONS_WITH_SET = 12006,
  FEATURE_V_1_2_CORRELATED_REFS_IN_NESTED_DML = 12007,
  FEATURE_V_1_2_WEEK_WITH_WEEKDAY = 12008,
  FEATURE_V_1_2_ARRAY_ELEMENTS_WITH_SET = 12009,
  FEATURE_V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET = 12010,
  FEATURE_V_1_2_GENERATED_COLUMNS = 12011,
  FEATURE_V_1_3_PROTO_DEFAULT_IF_NULL = 13001,
  FEATURE_V_1_3_EXTRACT_FROM_PROTO = 13002,
  FEATURE_DEPRECATED_DISALLOW_PROTO3_HAS_SCALAR_FIELD = 13003,
  FEATURE_V_1_3_ARRAY_ORDERING = 13004,
  FEATURE_V_1_3_OMIT_INSERT_COLUMN_LIST = 13005,
  FEATURE_V_1_3_IGNORE_PROTO3_USE_DEFAULTS = 13006,
  FEATURE_V_1_3_REPLACE_FIELDS = 13007,
  FEATURE_V_1_3_NULLS_FIRST_LAST_IN_ORDER_BY = 13008,
  FEATURE_V_1_3_ALLOW_DASHES_IN_TABLE_NAME = 13009,
  FEATURE_V_1_3_CONCAT_MIXED_TYPES = 13010,
  FEATURE_V_1_3_WITH_RECURSIVE = 13011,
  FEATURE_V_1_3_PROTO_MAPS = 13012,
  FEATURE_V_1_3_ENUM_VALUE_DESCRIPTOR_PROTO = 13013,
  FEATURE_V_1_3_DECIMAL_ALIAS = 13014,
  FEATURE_V_1_3_UNNEST_AND_FLATTEN_ARRAYS = 13015,
  FEATURE_V_1_3_ALLOW_CONSECUTIVE_ON = 13016,
  FEATURE_V_1_3_ALLOW_REGEXP_EXTRACT_OPTIONALS = 13017,
  FEATURE_V_1_3_DATE_TIME_CONSTRUCTORS = 13018,
  FEATURE_V_1_3_DATE_ARITHMETICS = 13019,
  FEATURE_V_1_3_ADDITIONAL_STRING_FUNCTIONS = 13020,
  FEATURE_V_1_3_WITH_GROUP_ROWS = 13021,
  FEATURE_V_1_3_EXTENDED_DATE_TIME_SIGNATURES = 13022,
  FEATURE_V_1_3_EXTENDED_GEOGRAPHY_PARSERS = 13023,
  FEATURE_V_1_3_INLINE_LAMBDA_ARGUMENT = 13024,
  FEATURE_V_1_3_PIVOT = 13025,
  FEATURE_V_1_3_ANNOTATION_FRAMEWORK = 13026,
  FEATURE_V_1_3_COLLATION_SUPPORT = 13027,
  FEATURE_V_1_3_IS_DISTINCT = 13028,
  FEATURE_V_1_3_FORMAT_IN_CAST = 13029,
  FEATURE_V_1_3_UNPIVOT = 13030,
  FEATURE_V_1_3_DML_RETURNING = 13031,
  FEATURE_V_1_3_FILTER_FIELDS = 13032,
  FEATURE_V_1_3_QUALIFY = 13033,
  FEATURE_V_1_3_REPEAT = 13034,
  FEATURE_V_1_3_COLUMN_DEFAULT_VALUE = 13035,
  FEATURE_V_1_3_FOR_IN = 13036,
  FEATURE_KLL_WEIGHTS = 13037,
  FEATURE_V_1_3_LIKE_ANY_SOME_ALL = 13038,
  FEATURE_V_1_3_CASE_STMT = 13039,
  FEATURE_V_1_3_ALLOW_SLASH_PATHS = 13040,
  FEATURE_V_1_3_TYPEOF_FUNCTION = 13041,
  FEATURE_V_1_3_SCRIPT_LABEL = 13042,
  FEATURE_V_1_3_REMOTE_FUNCTION = 13043,
  FEATURE_V_1_3_ARRAY_GREATEST_LEAST = 13044,
  FEATURE_EXPERIMENTAL_MODULES = 999002,
  FEATURE_TEST_IDEALLY_ENABLED_BUT_IN_DEVELOPMENT = 999991,
  FEATURE_TEST_IDEALLY_DISABLED = 999992,
  FEATURE_TEST_IDEALLY_DISABLED_AND_IN_DEVELOPMENT = 999993,
  __LanguageFeature__switch_must_have_a_default__ = -1
};
bool LanguageFeature_IsValid(int value);
const LanguageFeature LanguageFeature_MIN = __LanguageFeature__switch_must_have_a_default__;
const LanguageFeature LanguageFeature_MAX = FEATURE_TEST_IDEALLY_DISABLED_AND_IN_DEVELOPMENT;
const int LanguageFeature_ARRAYSIZE = LanguageFeature_MAX + 1;

const ::google::protobuf::EnumDescriptor* LanguageFeature_descriptor();
inline const ::std::string& LanguageFeature_Name(LanguageFeature value) {
  return ::google::protobuf::internal::NameOfEnum(
    LanguageFeature_descriptor(), value);
}
inline bool LanguageFeature_Parse(
    const ::std::string& name, LanguageFeature* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LanguageFeature>(
    LanguageFeature_descriptor(), name, value);
}
enum ResolvedASTRewrite {
  REWRITE_INVALID_DO_NOT_USE = 0,
  REWRITE_FLATTEN = 1,
  REWRITE_ANONYMIZATION = 2,
  REWRITE_PROTO_MAP_FNS = 3,
  REWRITE_ARRAY_FILTER_TRANSFORM = 4,
  REWRITE_UNPIVOT = 5,
  REWRITE_PIVOT = 6,
  REWRITE_ARRAY_INCLUDES = 7,
  REWRITE_TYPEOF_FUNCTION = 8,
  REWRITE_LET_EXPR = 9,
  REWRITE_INLINE_SQL_FUNCTIONS = 10
};
bool ResolvedASTRewrite_IsValid(int value);
const ResolvedASTRewrite ResolvedASTRewrite_MIN = REWRITE_INVALID_DO_NOT_USE;
const ResolvedASTRewrite ResolvedASTRewrite_MAX = REWRITE_INLINE_SQL_FUNCTIONS;
const int ResolvedASTRewrite_ARRAYSIZE = ResolvedASTRewrite_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResolvedASTRewrite_descriptor();
inline const ::std::string& ResolvedASTRewrite_Name(ResolvedASTRewrite value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResolvedASTRewrite_descriptor(), value);
}
inline bool ResolvedASTRewrite_Parse(
    const ::std::string& name, ResolvedASTRewrite* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResolvedASTRewrite>(
    ResolvedASTRewrite_descriptor(), name, value);
}
enum NameResolutionMode {
  NAME_RESOLUTION_DEFAULT = 0,
  NAME_RESOLUTION_STRICT = 1
};
bool NameResolutionMode_IsValid(int value);
const NameResolutionMode NameResolutionMode_MIN = NAME_RESOLUTION_DEFAULT;
const NameResolutionMode NameResolutionMode_MAX = NAME_RESOLUTION_STRICT;
const int NameResolutionMode_ARRAYSIZE = NameResolutionMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* NameResolutionMode_descriptor();
inline const ::std::string& NameResolutionMode_Name(NameResolutionMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    NameResolutionMode_descriptor(), value);
}
inline bool NameResolutionMode_Parse(
    const ::std::string& name, NameResolutionMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NameResolutionMode>(
    NameResolutionMode_descriptor(), name, value);
}
enum ProductMode {
  PRODUCT_INTERNAL = 0,
  PRODUCT_EXTERNAL = 1
};
bool ProductMode_IsValid(int value);
const ProductMode ProductMode_MIN = PRODUCT_INTERNAL;
const ProductMode ProductMode_MAX = PRODUCT_EXTERNAL;
const int ProductMode_ARRAYSIZE = ProductMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProductMode_descriptor();
inline const ::std::string& ProductMode_Name(ProductMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProductMode_descriptor(), value);
}
inline bool ProductMode_Parse(
    const ::std::string& name, ProductMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProductMode>(
    ProductMode_descriptor(), name, value);
}
enum StatementContext {
  CONTEXT_DEFAULT = 0,
  CONTEXT_MODULE = 1
};
bool StatementContext_IsValid(int value);
const StatementContext StatementContext_MIN = CONTEXT_DEFAULT;
const StatementContext StatementContext_MAX = CONTEXT_MODULE;
const int StatementContext_ARRAYSIZE = StatementContext_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatementContext_descriptor();
inline const ::std::string& StatementContext_Name(StatementContext value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatementContext_descriptor(), value);
}
inline bool StatementContext_Parse(
    const ::std::string& name, StatementContext* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatementContext>(
    StatementContext_descriptor(), name, value);
}
enum ErrorMessageMode {
  ERROR_MESSAGE_WITH_PAYLOAD = 0,
  ERROR_MESSAGE_ONE_LINE = 1,
  ERROR_MESSAGE_MULTI_LINE_WITH_CARET = 2
};
bool ErrorMessageMode_IsValid(int value);
const ErrorMessageMode ErrorMessageMode_MIN = ERROR_MESSAGE_WITH_PAYLOAD;
const ErrorMessageMode ErrorMessageMode_MAX = ERROR_MESSAGE_MULTI_LINE_WITH_CARET;
const int ErrorMessageMode_ARRAYSIZE = ErrorMessageMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorMessageMode_descriptor();
inline const ::std::string& ErrorMessageMode_Name(ErrorMessageMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorMessageMode_descriptor(), value);
}
inline bool ErrorMessageMode_Parse(
    const ::std::string& name, ErrorMessageMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorMessageMode>(
    ErrorMessageMode_descriptor(), name, value);
}
enum ParameterMode {
  PARAMETER_NAMED = 0,
  PARAMETER_POSITIONAL = 1,
  PARAMETER_NONE = 2
};
bool ParameterMode_IsValid(int value);
const ParameterMode ParameterMode_MIN = PARAMETER_NAMED;
const ParameterMode ParameterMode_MAX = PARAMETER_NONE;
const int ParameterMode_ARRAYSIZE = ParameterMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParameterMode_descriptor();
inline const ::std::string& ParameterMode_Name(ParameterMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParameterMode_descriptor(), value);
}
inline bool ParameterMode_Parse(
    const ::std::string& name, ParameterMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParameterMode>(
    ParameterMode_descriptor(), name, value);
}
enum ParseLocationRecordType {
  PARSE_LOCATION_RECORD_NONE = 0,
  PARSE_LOCATION_RECORD_FULL_NODE_SCOPE = 1,
  PARSE_LOCATION_RECORD_CODE_SEARCH = 2
};
bool ParseLocationRecordType_IsValid(int value);
const ParseLocationRecordType ParseLocationRecordType_MIN = PARSE_LOCATION_RECORD_NONE;
const ParseLocationRecordType ParseLocationRecordType_MAX = PARSE_LOCATION_RECORD_CODE_SEARCH;
const int ParseLocationRecordType_ARRAYSIZE = ParseLocationRecordType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParseLocationRecordType_descriptor();
inline const ::std::string& ParseLocationRecordType_Name(ParseLocationRecordType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParseLocationRecordType_descriptor(), value);
}
inline bool ParseLocationRecordType_Parse(
    const ::std::string& name, ParseLocationRecordType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParseLocationRecordType>(
    ParseLocationRecordType_descriptor(), name, value);
}
// ===================================================================

class LanguageFeatureOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.LanguageFeatureOptions) */ {
 public:
  LanguageFeatureOptions();
  virtual ~LanguageFeatureOptions();

  LanguageFeatureOptions(const LanguageFeatureOptions& from);

  inline LanguageFeatureOptions& operator=(const LanguageFeatureOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LanguageFeatureOptions(LanguageFeatureOptions&& from) noexcept
    : LanguageFeatureOptions() {
    *this = ::std::move(from);
  }

  inline LanguageFeatureOptions& operator=(LanguageFeatureOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LanguageFeatureOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LanguageFeatureOptions* internal_default_instance() {
    return reinterpret_cast<const LanguageFeatureOptions*>(
               &_LanguageFeatureOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LanguageFeatureOptions* other);
  friend void swap(LanguageFeatureOptions& a, LanguageFeatureOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LanguageFeatureOptions* New() const final {
    return CreateMaybeMessage<LanguageFeatureOptions>(NULL);
  }

  LanguageFeatureOptions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LanguageFeatureOptions>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LanguageFeatureOptions& from);
  void MergeFrom(const LanguageFeatureOptions& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LanguageFeatureOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool in_development = 2 [default = false];
  bool has_in_development() const;
  void clear_in_development();
  static const int kInDevelopmentFieldNumber = 2;
  bool in_development() const;
  void set_in_development(bool value);

  // optional bool ideally_enabled = 1 [default = true];
  bool has_ideally_enabled() const;
  void clear_ideally_enabled();
  static const int kIdeallyEnabledFieldNumber = 1;
  bool ideally_enabled() const;
  void set_ideally_enabled(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.LanguageFeatureOptions)
 private:
  void set_has_ideally_enabled();
  void clear_has_ideally_enabled();
  void set_has_in_development();
  void clear_has_in_development();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool in_development_;
  bool ideally_enabled_;
  friend struct ::protobuf_zetasql_2fpublic_2foptions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedASTRewriteOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedASTRewriteOptions) */ {
 public:
  ResolvedASTRewriteOptions();
  virtual ~ResolvedASTRewriteOptions();

  ResolvedASTRewriteOptions(const ResolvedASTRewriteOptions& from);

  inline ResolvedASTRewriteOptions& operator=(const ResolvedASTRewriteOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedASTRewriteOptions(ResolvedASTRewriteOptions&& from) noexcept
    : ResolvedASTRewriteOptions() {
    *this = ::std::move(from);
  }

  inline ResolvedASTRewriteOptions& operator=(ResolvedASTRewriteOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedASTRewriteOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedASTRewriteOptions* internal_default_instance() {
    return reinterpret_cast<const ResolvedASTRewriteOptions*>(
               &_ResolvedASTRewriteOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ResolvedASTRewriteOptions* other);
  friend void swap(ResolvedASTRewriteOptions& a, ResolvedASTRewriteOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedASTRewriteOptions* New() const final {
    return CreateMaybeMessage<ResolvedASTRewriteOptions>(NULL);
  }

  ResolvedASTRewriteOptions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedASTRewriteOptions>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResolvedASTRewriteOptions& from);
  void MergeFrom(const ResolvedASTRewriteOptions& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedASTRewriteOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool default_enabled = 1;
  bool has_default_enabled() const;
  void clear_default_enabled();
  static const int kDefaultEnabledFieldNumber = 1;
  bool default_enabled() const;
  void set_default_enabled(bool value);

  // optional bool in_development = 2 [default = false];
  bool has_in_development() const;
  void clear_in_development();
  static const int kInDevelopmentFieldNumber = 2;
  bool in_development() const;
  void set_in_development(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedASTRewriteOptions)
 private:
  void set_has_default_enabled();
  void clear_has_default_enabled();
  void set_has_in_development();
  void clear_has_in_development();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool default_enabled_;
  bool in_development_;
  friend struct ::protobuf_zetasql_2fpublic_2foptions_2eproto::TableStruct;
};
// ===================================================================

static const int kLanguageFeatureOptionsFieldNumber = 170219291;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::EnumValueOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::zetasql::LanguageFeatureOptions >, 11, false >
  language_feature_options;
static const int kRewriteOptionsFieldNumber = 336783472;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::EnumValueOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::zetasql::ResolvedASTRewriteOptions >, 11, false >
  rewrite_options;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LanguageFeatureOptions

// optional bool ideally_enabled = 1 [default = true];
inline bool LanguageFeatureOptions::has_ideally_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LanguageFeatureOptions::set_has_ideally_enabled() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LanguageFeatureOptions::clear_has_ideally_enabled() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LanguageFeatureOptions::clear_ideally_enabled() {
  ideally_enabled_ = true;
  clear_has_ideally_enabled();
}
inline bool LanguageFeatureOptions::ideally_enabled() const {
  // @@protoc_insertion_point(field_get:zetasql.LanguageFeatureOptions.ideally_enabled)
  return ideally_enabled_;
}
inline void LanguageFeatureOptions::set_ideally_enabled(bool value) {
  set_has_ideally_enabled();
  ideally_enabled_ = value;
  // @@protoc_insertion_point(field_set:zetasql.LanguageFeatureOptions.ideally_enabled)
}

// optional bool in_development = 2 [default = false];
inline bool LanguageFeatureOptions::has_in_development() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LanguageFeatureOptions::set_has_in_development() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LanguageFeatureOptions::clear_has_in_development() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LanguageFeatureOptions::clear_in_development() {
  in_development_ = false;
  clear_has_in_development();
}
inline bool LanguageFeatureOptions::in_development() const {
  // @@protoc_insertion_point(field_get:zetasql.LanguageFeatureOptions.in_development)
  return in_development_;
}
inline void LanguageFeatureOptions::set_in_development(bool value) {
  set_has_in_development();
  in_development_ = value;
  // @@protoc_insertion_point(field_set:zetasql.LanguageFeatureOptions.in_development)
}

// -------------------------------------------------------------------

// ResolvedASTRewriteOptions

// optional bool default_enabled = 1;
inline bool ResolvedASTRewriteOptions::has_default_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedASTRewriteOptions::set_has_default_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedASTRewriteOptions::clear_has_default_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedASTRewriteOptions::clear_default_enabled() {
  default_enabled_ = false;
  clear_has_default_enabled();
}
inline bool ResolvedASTRewriteOptions::default_enabled() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedASTRewriteOptions.default_enabled)
  return default_enabled_;
}
inline void ResolvedASTRewriteOptions::set_default_enabled(bool value) {
  set_has_default_enabled();
  default_enabled_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedASTRewriteOptions.default_enabled)
}

// optional bool in_development = 2 [default = false];
inline bool ResolvedASTRewriteOptions::has_in_development() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedASTRewriteOptions::set_has_in_development() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedASTRewriteOptions::clear_has_in_development() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedASTRewriteOptions::clear_in_development() {
  in_development_ = false;
  clear_has_in_development();
}
inline bool ResolvedASTRewriteOptions::in_development() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedASTRewriteOptions.in_development)
  return in_development_;
}
inline void ResolvedASTRewriteOptions::set_in_development(bool value) {
  set_has_in_development();
  in_development_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedASTRewriteOptions.in_development)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::zetasql::LanguageVersion> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::LanguageVersion>() {
  return ::zetasql::LanguageVersion_descriptor();
}
template <> struct is_proto_enum< ::zetasql::LanguageFeature> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::LanguageFeature>() {
  return ::zetasql::LanguageFeature_descriptor();
}
template <> struct is_proto_enum< ::zetasql::ResolvedASTRewrite> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::ResolvedASTRewrite>() {
  return ::zetasql::ResolvedASTRewrite_descriptor();
}
template <> struct is_proto_enum< ::zetasql::NameResolutionMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::NameResolutionMode>() {
  return ::zetasql::NameResolutionMode_descriptor();
}
template <> struct is_proto_enum< ::zetasql::ProductMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::ProductMode>() {
  return ::zetasql::ProductMode_descriptor();
}
template <> struct is_proto_enum< ::zetasql::StatementContext> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::StatementContext>() {
  return ::zetasql::StatementContext_descriptor();
}
template <> struct is_proto_enum< ::zetasql::ErrorMessageMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::ErrorMessageMode>() {
  return ::zetasql::ErrorMessageMode_descriptor();
}
template <> struct is_proto_enum< ::zetasql::ParameterMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::ParameterMode>() {
  return ::zetasql::ParameterMode_descriptor();
}
template <> struct is_proto_enum< ::zetasql::ParseLocationRecordType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::ParseLocationRecordType>() {
  return ::zetasql::ParseLocationRecordType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_zetasql_2fpublic_2foptions_2eproto
