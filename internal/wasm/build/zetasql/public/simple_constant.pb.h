// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/simple_constant.proto

#ifndef PROTOBUF_INCLUDED_zetasql_2fpublic_2fsimple_5fconstant_2eproto
#define PROTOBUF_INCLUDED_zetasql_2fpublic_2fsimple_5fconstant_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "zetasql/public/type.pb.h"
#include "zetasql/public/value.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_zetasql_2fpublic_2fsimple_5fconstant_2eproto 

namespace protobuf_zetasql_2fpublic_2fsimple_5fconstant_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_zetasql_2fpublic_2fsimple_5fconstant_2eproto
namespace zetasql {
class SimpleConstantProto;
class SimpleConstantProtoDefaultTypeInternal;
extern SimpleConstantProtoDefaultTypeInternal _SimpleConstantProto_default_instance_;
}  // namespace zetasql
namespace google {
namespace protobuf {
template<> ::zetasql::SimpleConstantProto* Arena::CreateMaybeMessage<::zetasql::SimpleConstantProto>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace zetasql {

// ===================================================================

class SimpleConstantProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.SimpleConstantProto) */ {
 public:
  SimpleConstantProto();
  virtual ~SimpleConstantProto();

  SimpleConstantProto(const SimpleConstantProto& from);

  inline SimpleConstantProto& operator=(const SimpleConstantProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimpleConstantProto(SimpleConstantProto&& from) noexcept
    : SimpleConstantProto() {
    *this = ::std::move(from);
  }

  inline SimpleConstantProto& operator=(SimpleConstantProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleConstantProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleConstantProto* internal_default_instance() {
    return reinterpret_cast<const SimpleConstantProto*>(
               &_SimpleConstantProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SimpleConstantProto* other);
  friend void swap(SimpleConstantProto& a, SimpleConstantProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimpleConstantProto* New() const final {
    return CreateMaybeMessage<SimpleConstantProto>(NULL);
  }

  SimpleConstantProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimpleConstantProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimpleConstantProto& from);
  void MergeFrom(const SimpleConstantProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleConstantProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name_path = 1;
  int name_path_size() const;
  void clear_name_path();
  static const int kNamePathFieldNumber = 1;
  const ::std::string& name_path(int index) const;
  ::std::string* mutable_name_path(int index);
  void set_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name_path(int index, ::std::string&& value);
  #endif
  void set_name_path(int index, const char* value);
  void set_name_path(int index, const char* value, size_t size);
  ::std::string* add_name_path();
  void add_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_name_path(::std::string&& value);
  #endif
  void add_name_path(const char* value);
  void add_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_path();

  // optional .zetasql.TypeProto type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  private:
  const ::zetasql::TypeProto& _internal_type() const;
  public:
  const ::zetasql::TypeProto& type() const;
  ::zetasql::TypeProto* release_type();
  ::zetasql::TypeProto* mutable_type();
  void set_allocated_type(::zetasql::TypeProto* type);

  // optional .zetasql.ValueProto value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::zetasql::ValueProto& _internal_value() const;
  public:
  const ::zetasql::ValueProto& value() const;
  ::zetasql::ValueProto* release_value();
  ::zetasql::ValueProto* mutable_value();
  void set_allocated_value(::zetasql::ValueProto* value);

  // @@protoc_insertion_point(class_scope:zetasql.SimpleConstantProto)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_path_;
  ::zetasql::TypeProto* type_;
  ::zetasql::ValueProto* value_;
  friend struct ::protobuf_zetasql_2fpublic_2fsimple_5fconstant_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SimpleConstantProto

// repeated string name_path = 1;
inline int SimpleConstantProto::name_path_size() const {
  return name_path_.size();
}
inline void SimpleConstantProto::clear_name_path() {
  name_path_.Clear();
}
inline const ::std::string& SimpleConstantProto::name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleConstantProto.name_path)
  return name_path_.Get(index);
}
inline ::std::string* SimpleConstantProto::mutable_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleConstantProto.name_path)
  return name_path_.Mutable(index);
}
inline void SimpleConstantProto::set_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.SimpleConstantProto.name_path)
  name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SimpleConstantProto::set_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.SimpleConstantProto.name_path)
  name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SimpleConstantProto::set_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.SimpleConstantProto.name_path)
}
inline void SimpleConstantProto::set_name_path(int index, const char* value, size_t size) {
  name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.SimpleConstantProto.name_path)
}
inline ::std::string* SimpleConstantProto::add_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.SimpleConstantProto.name_path)
  return name_path_.Add();
}
inline void SimpleConstantProto::add_name_path(const ::std::string& value) {
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.SimpleConstantProto.name_path)
}
#if LANG_CXX11
inline void SimpleConstantProto::add_name_path(::std::string&& value) {
  name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.SimpleConstantProto.name_path)
}
#endif
inline void SimpleConstantProto::add_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.SimpleConstantProto.name_path)
}
inline void SimpleConstantProto::add_name_path(const char* value, size_t size) {
  name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.SimpleConstantProto.name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SimpleConstantProto::name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.SimpleConstantProto.name_path)
  return name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SimpleConstantProto::mutable_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.SimpleConstantProto.name_path)
  return &name_path_;
}

// optional .zetasql.TypeProto type = 2;
inline bool SimpleConstantProto::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimpleConstantProto::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimpleConstantProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::zetasql::TypeProto& SimpleConstantProto::_internal_type() const {
  return *type_;
}
inline const ::zetasql::TypeProto& SimpleConstantProto::type() const {
  const ::zetasql::TypeProto* p = type_;
  // @@protoc_insertion_point(field_get:zetasql.SimpleConstantProto.type)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TypeProto*>(
      &::zetasql::_TypeProto_default_instance_);
}
inline ::zetasql::TypeProto* SimpleConstantProto::release_type() {
  // @@protoc_insertion_point(field_release:zetasql.SimpleConstantProto.type)
  clear_has_type();
  ::zetasql::TypeProto* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::zetasql::TypeProto* SimpleConstantProto::mutable_type() {
  set_has_type();
  if (type_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleConstantProto.type)
  return type_;
}
inline void SimpleConstantProto::set_allocated_type(::zetasql::TypeProto* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_);
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(type)->GetArena();
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    set_has_type();
  } else {
    clear_has_type();
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.SimpleConstantProto.type)
}

// optional .zetasql.ValueProto value = 3;
inline bool SimpleConstantProto::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SimpleConstantProto::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SimpleConstantProto::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::ValueProto& SimpleConstantProto::_internal_value() const {
  return *value_;
}
inline const ::zetasql::ValueProto& SimpleConstantProto::value() const {
  const ::zetasql::ValueProto* p = value_;
  // @@protoc_insertion_point(field_get:zetasql.SimpleConstantProto.value)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ValueProto*>(
      &::zetasql::_ValueProto_default_instance_);
}
inline ::zetasql::ValueProto* SimpleConstantProto::release_value() {
  // @@protoc_insertion_point(field_release:zetasql.SimpleConstantProto.value)
  clear_has_value();
  ::zetasql::ValueProto* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::zetasql::ValueProto* SimpleConstantProto::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ValueProto>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleConstantProto.value)
  return value_;
}
inline void SimpleConstantProto::set_allocated_value(::zetasql::ValueProto* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_);
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    set_has_value();
  } else {
    clear_has_value();
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:zetasql.SimpleConstantProto.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_zetasql_2fpublic_2fsimple_5fconstant_2eproto
