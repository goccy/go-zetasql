// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/simple_table.proto

#ifndef PROTOBUF_INCLUDED_zetasql_2fpublic_2fsimple_5ftable_2eproto
#define PROTOBUF_INCLUDED_zetasql_2fpublic_2fsimple_5ftable_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "zetasql/public/annotation.pb.h"
#include "zetasql/public/type.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_zetasql_2fpublic_2fsimple_5ftable_2eproto 

namespace protobuf_zetasql_2fpublic_2fsimple_5ftable_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_zetasql_2fpublic_2fsimple_5ftable_2eproto
namespace zetasql {
class SimpleAnonymizationInfoProto;
class SimpleAnonymizationInfoProtoDefaultTypeInternal;
extern SimpleAnonymizationInfoProtoDefaultTypeInternal _SimpleAnonymizationInfoProto_default_instance_;
class SimpleColumnProto;
class SimpleColumnProtoDefaultTypeInternal;
extern SimpleColumnProtoDefaultTypeInternal _SimpleColumnProto_default_instance_;
class SimpleTableProto;
class SimpleTableProtoDefaultTypeInternal;
extern SimpleTableProtoDefaultTypeInternal _SimpleTableProto_default_instance_;
}  // namespace zetasql
namespace google {
namespace protobuf {
template<> ::zetasql::SimpleAnonymizationInfoProto* Arena::CreateMaybeMessage<::zetasql::SimpleAnonymizationInfoProto>(Arena*);
template<> ::zetasql::SimpleColumnProto* Arena::CreateMaybeMessage<::zetasql::SimpleColumnProto>(Arena*);
template<> ::zetasql::SimpleTableProto* Arena::CreateMaybeMessage<::zetasql::SimpleTableProto>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace zetasql {

// ===================================================================

class SimpleAnonymizationInfoProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.SimpleAnonymizationInfoProto) */ {
 public:
  SimpleAnonymizationInfoProto();
  virtual ~SimpleAnonymizationInfoProto();

  SimpleAnonymizationInfoProto(const SimpleAnonymizationInfoProto& from);

  inline SimpleAnonymizationInfoProto& operator=(const SimpleAnonymizationInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimpleAnonymizationInfoProto(SimpleAnonymizationInfoProto&& from) noexcept
    : SimpleAnonymizationInfoProto() {
    *this = ::std::move(from);
  }

  inline SimpleAnonymizationInfoProto& operator=(SimpleAnonymizationInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleAnonymizationInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleAnonymizationInfoProto* internal_default_instance() {
    return reinterpret_cast<const SimpleAnonymizationInfoProto*>(
               &_SimpleAnonymizationInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SimpleAnonymizationInfoProto* other);
  friend void swap(SimpleAnonymizationInfoProto& a, SimpleAnonymizationInfoProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimpleAnonymizationInfoProto* New() const final {
    return CreateMaybeMessage<SimpleAnonymizationInfoProto>(NULL);
  }

  SimpleAnonymizationInfoProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimpleAnonymizationInfoProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimpleAnonymizationInfoProto& from);
  void MergeFrom(const SimpleAnonymizationInfoProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleAnonymizationInfoProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string userid_column_name = 1;
  int userid_column_name_size() const;
  void clear_userid_column_name();
  static const int kUseridColumnNameFieldNumber = 1;
  const ::std::string& userid_column_name(int index) const;
  ::std::string* mutable_userid_column_name(int index);
  void set_userid_column_name(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_userid_column_name(int index, ::std::string&& value);
  #endif
  void set_userid_column_name(int index, const char* value);
  void set_userid_column_name(int index, const char* value, size_t size);
  ::std::string* add_userid_column_name();
  void add_userid_column_name(const ::std::string& value);
  #if LANG_CXX11
  void add_userid_column_name(::std::string&& value);
  #endif
  void add_userid_column_name(const char* value);
  void add_userid_column_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& userid_column_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_userid_column_name();

  // @@protoc_insertion_point(class_scope:zetasql.SimpleAnonymizationInfoProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> userid_column_name_;
  friend struct ::protobuf_zetasql_2fpublic_2fsimple_5ftable_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimpleTableProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.SimpleTableProto) */ {
 public:
  SimpleTableProto();
  virtual ~SimpleTableProto();

  SimpleTableProto(const SimpleTableProto& from);

  inline SimpleTableProto& operator=(const SimpleTableProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimpleTableProto(SimpleTableProto&& from) noexcept
    : SimpleTableProto() {
    *this = ::std::move(from);
  }

  inline SimpleTableProto& operator=(SimpleTableProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleTableProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleTableProto* internal_default_instance() {
    return reinterpret_cast<const SimpleTableProto*>(
               &_SimpleTableProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SimpleTableProto* other);
  friend void swap(SimpleTableProto& a, SimpleTableProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimpleTableProto* New() const final {
    return CreateMaybeMessage<SimpleTableProto>(NULL);
  }

  SimpleTableProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimpleTableProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimpleTableProto& from);
  void MergeFrom(const SimpleTableProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleTableProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.SimpleColumnProto column = 4;
  int column_size() const;
  void clear_column();
  static const int kColumnFieldNumber = 4;
  ::zetasql::SimpleColumnProto* mutable_column(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::SimpleColumnProto >*
      mutable_column();
  const ::zetasql::SimpleColumnProto& column(int index) const;
  ::zetasql::SimpleColumnProto* add_column();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::SimpleColumnProto >&
      column() const;

  // repeated int32 primary_key_column_index = 9;
  int primary_key_column_index_size() const;
  void clear_primary_key_column_index();
  static const int kPrimaryKeyColumnIndexFieldNumber = 9;
  ::google::protobuf::int32 primary_key_column_index(int index) const;
  void set_primary_key_column_index(int index, ::google::protobuf::int32 value);
  void add_primary_key_column_index(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      primary_key_column_index() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_primary_key_column_index();

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string name_in_catalog = 5;
  bool has_name_in_catalog() const;
  void clear_name_in_catalog();
  static const int kNameInCatalogFieldNumber = 5;
  const ::std::string& name_in_catalog() const;
  void set_name_in_catalog(const ::std::string& value);
  #if LANG_CXX11
  void set_name_in_catalog(::std::string&& value);
  #endif
  void set_name_in_catalog(const char* value);
  void set_name_in_catalog(const char* value, size_t size);
  ::std::string* mutable_name_in_catalog();
  ::std::string* release_name_in_catalog();
  void set_allocated_name_in_catalog(::std::string* name_in_catalog);

  // optional string full_name = 10;
  bool has_full_name() const;
  void clear_full_name();
  static const int kFullNameFieldNumber = 10;
  const ::std::string& full_name() const;
  void set_full_name(const ::std::string& value);
  #if LANG_CXX11
  void set_full_name(::std::string&& value);
  #endif
  void set_full_name(const char* value);
  void set_full_name(const char* value, size_t size);
  ::std::string* mutable_full_name();
  ::std::string* release_full_name();
  void set_allocated_full_name(::std::string* full_name);

  // optional .zetasql.SimpleAnonymizationInfoProto anonymization_info = 8;
  bool has_anonymization_info() const;
  void clear_anonymization_info();
  static const int kAnonymizationInfoFieldNumber = 8;
  private:
  const ::zetasql::SimpleAnonymizationInfoProto& _internal_anonymization_info() const;
  public:
  const ::zetasql::SimpleAnonymizationInfoProto& anonymization_info() const;
  ::zetasql::SimpleAnonymizationInfoProto* release_anonymization_info();
  ::zetasql::SimpleAnonymizationInfoProto* mutable_anonymization_info();
  void set_allocated_anonymization_info(::zetasql::SimpleAnonymizationInfoProto* anonymization_info);

  // optional int64 serialization_id = 2;
  bool has_serialization_id() const;
  void clear_serialization_id();
  static const int kSerializationIdFieldNumber = 2;
  ::google::protobuf::int64 serialization_id() const;
  void set_serialization_id(::google::protobuf::int64 value);

  // optional bool is_value_table = 3;
  bool has_is_value_table() const;
  void clear_is_value_table();
  static const int kIsValueTableFieldNumber = 3;
  bool is_value_table() const;
  void set_is_value_table(bool value);

  // optional bool allow_anonymous_column_name = 6;
  bool has_allow_anonymous_column_name() const;
  void clear_allow_anonymous_column_name();
  static const int kAllowAnonymousColumnNameFieldNumber = 6;
  bool allow_anonymous_column_name() const;
  void set_allow_anonymous_column_name(bool value);

  // optional bool allow_duplicate_column_names = 7;
  bool has_allow_duplicate_column_names() const;
  void clear_allow_duplicate_column_names();
  static const int kAllowDuplicateColumnNamesFieldNumber = 7;
  bool allow_duplicate_column_names() const;
  void set_allow_duplicate_column_names(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.SimpleTableProto)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_serialization_id();
  void clear_has_serialization_id();
  void set_has_is_value_table();
  void clear_has_is_value_table();
  void set_has_name_in_catalog();
  void clear_has_name_in_catalog();
  void set_has_allow_anonymous_column_name();
  void clear_has_allow_anonymous_column_name();
  void set_has_allow_duplicate_column_names();
  void clear_has_allow_duplicate_column_names();
  void set_has_anonymization_info();
  void clear_has_anonymization_info();
  void set_has_full_name();
  void clear_has_full_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::SimpleColumnProto > column_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > primary_key_column_index_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr name_in_catalog_;
  ::google::protobuf::internal::ArenaStringPtr full_name_;
  ::zetasql::SimpleAnonymizationInfoProto* anonymization_info_;
  ::google::protobuf::int64 serialization_id_;
  bool is_value_table_;
  bool allow_anonymous_column_name_;
  bool allow_duplicate_column_names_;
  friend struct ::protobuf_zetasql_2fpublic_2fsimple_5ftable_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimpleColumnProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.SimpleColumnProto) */ {
 public:
  SimpleColumnProto();
  virtual ~SimpleColumnProto();

  SimpleColumnProto(const SimpleColumnProto& from);

  inline SimpleColumnProto& operator=(const SimpleColumnProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimpleColumnProto(SimpleColumnProto&& from) noexcept
    : SimpleColumnProto() {
    *this = ::std::move(from);
  }

  inline SimpleColumnProto& operator=(SimpleColumnProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleColumnProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleColumnProto* internal_default_instance() {
    return reinterpret_cast<const SimpleColumnProto*>(
               &_SimpleColumnProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SimpleColumnProto* other);
  friend void swap(SimpleColumnProto& a, SimpleColumnProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimpleColumnProto* New() const final {
    return CreateMaybeMessage<SimpleColumnProto>(NULL);
  }

  SimpleColumnProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimpleColumnProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimpleColumnProto& from);
  void MergeFrom(const SimpleColumnProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleColumnProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .zetasql.TypeProto type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  private:
  const ::zetasql::TypeProto& _internal_type() const;
  public:
  const ::zetasql::TypeProto& type() const;
  ::zetasql::TypeProto* release_type();
  ::zetasql::TypeProto* mutable_type();
  void set_allocated_type(::zetasql::TypeProto* type);

  // optional .zetasql.AnnotationMapProto annotation_map = 5;
  bool has_annotation_map() const;
  void clear_annotation_map();
  static const int kAnnotationMapFieldNumber = 5;
  private:
  const ::zetasql::AnnotationMapProto& _internal_annotation_map() const;
  public:
  const ::zetasql::AnnotationMapProto& annotation_map() const;
  ::zetasql::AnnotationMapProto* release_annotation_map();
  ::zetasql::AnnotationMapProto* mutable_annotation_map();
  void set_allocated_annotation_map(::zetasql::AnnotationMapProto* annotation_map);

  // optional bool is_pseudo_column = 3;
  bool has_is_pseudo_column() const;
  void clear_is_pseudo_column();
  static const int kIsPseudoColumnFieldNumber = 3;
  bool is_pseudo_column() const;
  void set_is_pseudo_column(bool value);

  // optional bool is_writable_column = 4 [default = true];
  bool has_is_writable_column() const;
  void clear_is_writable_column();
  static const int kIsWritableColumnFieldNumber = 4;
  bool is_writable_column() const;
  void set_is_writable_column(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.SimpleColumnProto)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_is_pseudo_column();
  void clear_has_is_pseudo_column();
  void set_has_is_writable_column();
  void clear_has_is_writable_column();
  void set_has_annotation_map();
  void clear_has_annotation_map();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::zetasql::TypeProto* type_;
  ::zetasql::AnnotationMapProto* annotation_map_;
  bool is_pseudo_column_;
  bool is_writable_column_;
  friend struct ::protobuf_zetasql_2fpublic_2fsimple_5ftable_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SimpleAnonymizationInfoProto

// repeated string userid_column_name = 1;
inline int SimpleAnonymizationInfoProto::userid_column_name_size() const {
  return userid_column_name_.size();
}
inline void SimpleAnonymizationInfoProto::clear_userid_column_name() {
  userid_column_name_.Clear();
}
inline const ::std::string& SimpleAnonymizationInfoProto::userid_column_name(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleAnonymizationInfoProto.userid_column_name)
  return userid_column_name_.Get(index);
}
inline ::std::string* SimpleAnonymizationInfoProto::mutable_userid_column_name(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleAnonymizationInfoProto.userid_column_name)
  return userid_column_name_.Mutable(index);
}
inline void SimpleAnonymizationInfoProto::set_userid_column_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.SimpleAnonymizationInfoProto.userid_column_name)
  userid_column_name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SimpleAnonymizationInfoProto::set_userid_column_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.SimpleAnonymizationInfoProto.userid_column_name)
  userid_column_name_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SimpleAnonymizationInfoProto::set_userid_column_name(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  userid_column_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.SimpleAnonymizationInfoProto.userid_column_name)
}
inline void SimpleAnonymizationInfoProto::set_userid_column_name(int index, const char* value, size_t size) {
  userid_column_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.SimpleAnonymizationInfoProto.userid_column_name)
}
inline ::std::string* SimpleAnonymizationInfoProto::add_userid_column_name() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.SimpleAnonymizationInfoProto.userid_column_name)
  return userid_column_name_.Add();
}
inline void SimpleAnonymizationInfoProto::add_userid_column_name(const ::std::string& value) {
  userid_column_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.SimpleAnonymizationInfoProto.userid_column_name)
}
#if LANG_CXX11
inline void SimpleAnonymizationInfoProto::add_userid_column_name(::std::string&& value) {
  userid_column_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.SimpleAnonymizationInfoProto.userid_column_name)
}
#endif
inline void SimpleAnonymizationInfoProto::add_userid_column_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  userid_column_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.SimpleAnonymizationInfoProto.userid_column_name)
}
inline void SimpleAnonymizationInfoProto::add_userid_column_name(const char* value, size_t size) {
  userid_column_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.SimpleAnonymizationInfoProto.userid_column_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SimpleAnonymizationInfoProto::userid_column_name() const {
  // @@protoc_insertion_point(field_list:zetasql.SimpleAnonymizationInfoProto.userid_column_name)
  return userid_column_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SimpleAnonymizationInfoProto::mutable_userid_column_name() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.SimpleAnonymizationInfoProto.userid_column_name)
  return &userid_column_name_;
}

// -------------------------------------------------------------------

// SimpleTableProto

// optional string name = 1;
inline bool SimpleTableProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimpleTableProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimpleTableProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SimpleTableProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SimpleTableProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleTableProto.name)
  return name_.GetNoArena();
}
inline void SimpleTableProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.SimpleTableProto.name)
}
#if LANG_CXX11
inline void SimpleTableProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.SimpleTableProto.name)
}
#endif
inline void SimpleTableProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.SimpleTableProto.name)
}
inline void SimpleTableProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.SimpleTableProto.name)
}
inline ::std::string* SimpleTableProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleTableProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SimpleTableProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.SimpleTableProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SimpleTableProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.SimpleTableProto.name)
}

// optional int64 serialization_id = 2;
inline bool SimpleTableProto::has_serialization_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SimpleTableProto::set_has_serialization_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SimpleTableProto::clear_has_serialization_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SimpleTableProto::clear_serialization_id() {
  serialization_id_ = GOOGLE_LONGLONG(0);
  clear_has_serialization_id();
}
inline ::google::protobuf::int64 SimpleTableProto::serialization_id() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleTableProto.serialization_id)
  return serialization_id_;
}
inline void SimpleTableProto::set_serialization_id(::google::protobuf::int64 value) {
  set_has_serialization_id();
  serialization_id_ = value;
  // @@protoc_insertion_point(field_set:zetasql.SimpleTableProto.serialization_id)
}

// optional bool is_value_table = 3;
inline bool SimpleTableProto::has_is_value_table() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SimpleTableProto::set_has_is_value_table() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SimpleTableProto::clear_has_is_value_table() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SimpleTableProto::clear_is_value_table() {
  is_value_table_ = false;
  clear_has_is_value_table();
}
inline bool SimpleTableProto::is_value_table() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleTableProto.is_value_table)
  return is_value_table_;
}
inline void SimpleTableProto::set_is_value_table(bool value) {
  set_has_is_value_table();
  is_value_table_ = value;
  // @@protoc_insertion_point(field_set:zetasql.SimpleTableProto.is_value_table)
}

// repeated .zetasql.SimpleColumnProto column = 4;
inline int SimpleTableProto::column_size() const {
  return column_.size();
}
inline void SimpleTableProto::clear_column() {
  column_.Clear();
}
inline ::zetasql::SimpleColumnProto* SimpleTableProto::mutable_column(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleTableProto.column)
  return column_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::SimpleColumnProto >*
SimpleTableProto::mutable_column() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.SimpleTableProto.column)
  return &column_;
}
inline const ::zetasql::SimpleColumnProto& SimpleTableProto::column(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleTableProto.column)
  return column_.Get(index);
}
inline ::zetasql::SimpleColumnProto* SimpleTableProto::add_column() {
  // @@protoc_insertion_point(field_add:zetasql.SimpleTableProto.column)
  return column_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::SimpleColumnProto >&
SimpleTableProto::column() const {
  // @@protoc_insertion_point(field_list:zetasql.SimpleTableProto.column)
  return column_;
}

// repeated int32 primary_key_column_index = 9;
inline int SimpleTableProto::primary_key_column_index_size() const {
  return primary_key_column_index_.size();
}
inline void SimpleTableProto::clear_primary_key_column_index() {
  primary_key_column_index_.Clear();
}
inline ::google::protobuf::int32 SimpleTableProto::primary_key_column_index(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleTableProto.primary_key_column_index)
  return primary_key_column_index_.Get(index);
}
inline void SimpleTableProto::set_primary_key_column_index(int index, ::google::protobuf::int32 value) {
  primary_key_column_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:zetasql.SimpleTableProto.primary_key_column_index)
}
inline void SimpleTableProto::add_primary_key_column_index(::google::protobuf::int32 value) {
  primary_key_column_index_.Add(value);
  // @@protoc_insertion_point(field_add:zetasql.SimpleTableProto.primary_key_column_index)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SimpleTableProto::primary_key_column_index() const {
  // @@protoc_insertion_point(field_list:zetasql.SimpleTableProto.primary_key_column_index)
  return primary_key_column_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SimpleTableProto::mutable_primary_key_column_index() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.SimpleTableProto.primary_key_column_index)
  return &primary_key_column_index_;
}

// optional string name_in_catalog = 5;
inline bool SimpleTableProto::has_name_in_catalog() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SimpleTableProto::set_has_name_in_catalog() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SimpleTableProto::clear_has_name_in_catalog() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SimpleTableProto::clear_name_in_catalog() {
  name_in_catalog_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name_in_catalog();
}
inline const ::std::string& SimpleTableProto::name_in_catalog() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleTableProto.name_in_catalog)
  return name_in_catalog_.GetNoArena();
}
inline void SimpleTableProto::set_name_in_catalog(const ::std::string& value) {
  set_has_name_in_catalog();
  name_in_catalog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.SimpleTableProto.name_in_catalog)
}
#if LANG_CXX11
inline void SimpleTableProto::set_name_in_catalog(::std::string&& value) {
  set_has_name_in_catalog();
  name_in_catalog_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.SimpleTableProto.name_in_catalog)
}
#endif
inline void SimpleTableProto::set_name_in_catalog(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name_in_catalog();
  name_in_catalog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.SimpleTableProto.name_in_catalog)
}
inline void SimpleTableProto::set_name_in_catalog(const char* value, size_t size) {
  set_has_name_in_catalog();
  name_in_catalog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.SimpleTableProto.name_in_catalog)
}
inline ::std::string* SimpleTableProto::mutable_name_in_catalog() {
  set_has_name_in_catalog();
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleTableProto.name_in_catalog)
  return name_in_catalog_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SimpleTableProto::release_name_in_catalog() {
  // @@protoc_insertion_point(field_release:zetasql.SimpleTableProto.name_in_catalog)
  if (!has_name_in_catalog()) {
    return NULL;
  }
  clear_has_name_in_catalog();
  return name_in_catalog_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SimpleTableProto::set_allocated_name_in_catalog(::std::string* name_in_catalog) {
  if (name_in_catalog != NULL) {
    set_has_name_in_catalog();
  } else {
    clear_has_name_in_catalog();
  }
  name_in_catalog_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name_in_catalog);
  // @@protoc_insertion_point(field_set_allocated:zetasql.SimpleTableProto.name_in_catalog)
}

// optional bool allow_anonymous_column_name = 6;
inline bool SimpleTableProto::has_allow_anonymous_column_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SimpleTableProto::set_has_allow_anonymous_column_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SimpleTableProto::clear_has_allow_anonymous_column_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SimpleTableProto::clear_allow_anonymous_column_name() {
  allow_anonymous_column_name_ = false;
  clear_has_allow_anonymous_column_name();
}
inline bool SimpleTableProto::allow_anonymous_column_name() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleTableProto.allow_anonymous_column_name)
  return allow_anonymous_column_name_;
}
inline void SimpleTableProto::set_allow_anonymous_column_name(bool value) {
  set_has_allow_anonymous_column_name();
  allow_anonymous_column_name_ = value;
  // @@protoc_insertion_point(field_set:zetasql.SimpleTableProto.allow_anonymous_column_name)
}

// optional bool allow_duplicate_column_names = 7;
inline bool SimpleTableProto::has_allow_duplicate_column_names() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SimpleTableProto::set_has_allow_duplicate_column_names() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SimpleTableProto::clear_has_allow_duplicate_column_names() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SimpleTableProto::clear_allow_duplicate_column_names() {
  allow_duplicate_column_names_ = false;
  clear_has_allow_duplicate_column_names();
}
inline bool SimpleTableProto::allow_duplicate_column_names() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleTableProto.allow_duplicate_column_names)
  return allow_duplicate_column_names_;
}
inline void SimpleTableProto::set_allow_duplicate_column_names(bool value) {
  set_has_allow_duplicate_column_names();
  allow_duplicate_column_names_ = value;
  // @@protoc_insertion_point(field_set:zetasql.SimpleTableProto.allow_duplicate_column_names)
}

// optional .zetasql.SimpleAnonymizationInfoProto anonymization_info = 8;
inline bool SimpleTableProto::has_anonymization_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SimpleTableProto::set_has_anonymization_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SimpleTableProto::clear_has_anonymization_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SimpleTableProto::clear_anonymization_info() {
  if (anonymization_info_ != NULL) anonymization_info_->Clear();
  clear_has_anonymization_info();
}
inline const ::zetasql::SimpleAnonymizationInfoProto& SimpleTableProto::_internal_anonymization_info() const {
  return *anonymization_info_;
}
inline const ::zetasql::SimpleAnonymizationInfoProto& SimpleTableProto::anonymization_info() const {
  const ::zetasql::SimpleAnonymizationInfoProto* p = anonymization_info_;
  // @@protoc_insertion_point(field_get:zetasql.SimpleTableProto.anonymization_info)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::SimpleAnonymizationInfoProto*>(
      &::zetasql::_SimpleAnonymizationInfoProto_default_instance_);
}
inline ::zetasql::SimpleAnonymizationInfoProto* SimpleTableProto::release_anonymization_info() {
  // @@protoc_insertion_point(field_release:zetasql.SimpleTableProto.anonymization_info)
  clear_has_anonymization_info();
  ::zetasql::SimpleAnonymizationInfoProto* temp = anonymization_info_;
  anonymization_info_ = NULL;
  return temp;
}
inline ::zetasql::SimpleAnonymizationInfoProto* SimpleTableProto::mutable_anonymization_info() {
  set_has_anonymization_info();
  if (anonymization_info_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::SimpleAnonymizationInfoProto>(GetArenaNoVirtual());
    anonymization_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleTableProto.anonymization_info)
  return anonymization_info_;
}
inline void SimpleTableProto::set_allocated_anonymization_info(::zetasql::SimpleAnonymizationInfoProto* anonymization_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete anonymization_info_;
  }
  if (anonymization_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      anonymization_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, anonymization_info, submessage_arena);
    }
    set_has_anonymization_info();
  } else {
    clear_has_anonymization_info();
  }
  anonymization_info_ = anonymization_info;
  // @@protoc_insertion_point(field_set_allocated:zetasql.SimpleTableProto.anonymization_info)
}

// optional string full_name = 10;
inline bool SimpleTableProto::has_full_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SimpleTableProto::set_has_full_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SimpleTableProto::clear_has_full_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SimpleTableProto::clear_full_name() {
  full_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_full_name();
}
inline const ::std::string& SimpleTableProto::full_name() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleTableProto.full_name)
  return full_name_.GetNoArena();
}
inline void SimpleTableProto::set_full_name(const ::std::string& value) {
  set_has_full_name();
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.SimpleTableProto.full_name)
}
#if LANG_CXX11
inline void SimpleTableProto::set_full_name(::std::string&& value) {
  set_has_full_name();
  full_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.SimpleTableProto.full_name)
}
#endif
inline void SimpleTableProto::set_full_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_full_name();
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.SimpleTableProto.full_name)
}
inline void SimpleTableProto::set_full_name(const char* value, size_t size) {
  set_has_full_name();
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.SimpleTableProto.full_name)
}
inline ::std::string* SimpleTableProto::mutable_full_name() {
  set_has_full_name();
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleTableProto.full_name)
  return full_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SimpleTableProto::release_full_name() {
  // @@protoc_insertion_point(field_release:zetasql.SimpleTableProto.full_name)
  if (!has_full_name()) {
    return NULL;
  }
  clear_has_full_name();
  return full_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SimpleTableProto::set_allocated_full_name(::std::string* full_name) {
  if (full_name != NULL) {
    set_has_full_name();
  } else {
    clear_has_full_name();
  }
  full_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.SimpleTableProto.full_name)
}

// -------------------------------------------------------------------

// SimpleColumnProto

// optional string name = 1;
inline bool SimpleColumnProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimpleColumnProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimpleColumnProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SimpleColumnProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SimpleColumnProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleColumnProto.name)
  return name_.GetNoArena();
}
inline void SimpleColumnProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.SimpleColumnProto.name)
}
#if LANG_CXX11
inline void SimpleColumnProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.SimpleColumnProto.name)
}
#endif
inline void SimpleColumnProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.SimpleColumnProto.name)
}
inline void SimpleColumnProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.SimpleColumnProto.name)
}
inline ::std::string* SimpleColumnProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleColumnProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SimpleColumnProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.SimpleColumnProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SimpleColumnProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.SimpleColumnProto.name)
}

// optional .zetasql.TypeProto type = 2;
inline bool SimpleColumnProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SimpleColumnProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SimpleColumnProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::TypeProto& SimpleColumnProto::_internal_type() const {
  return *type_;
}
inline const ::zetasql::TypeProto& SimpleColumnProto::type() const {
  const ::zetasql::TypeProto* p = type_;
  // @@protoc_insertion_point(field_get:zetasql.SimpleColumnProto.type)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TypeProto*>(
      &::zetasql::_TypeProto_default_instance_);
}
inline ::zetasql::TypeProto* SimpleColumnProto::release_type() {
  // @@protoc_insertion_point(field_release:zetasql.SimpleColumnProto.type)
  clear_has_type();
  ::zetasql::TypeProto* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::zetasql::TypeProto* SimpleColumnProto::mutable_type() {
  set_has_type();
  if (type_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleColumnProto.type)
  return type_;
}
inline void SimpleColumnProto::set_allocated_type(::zetasql::TypeProto* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_);
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(type)->GetArena();
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    set_has_type();
  } else {
    clear_has_type();
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.SimpleColumnProto.type)
}

// optional bool is_pseudo_column = 3;
inline bool SimpleColumnProto::has_is_pseudo_column() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SimpleColumnProto::set_has_is_pseudo_column() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SimpleColumnProto::clear_has_is_pseudo_column() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SimpleColumnProto::clear_is_pseudo_column() {
  is_pseudo_column_ = false;
  clear_has_is_pseudo_column();
}
inline bool SimpleColumnProto::is_pseudo_column() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleColumnProto.is_pseudo_column)
  return is_pseudo_column_;
}
inline void SimpleColumnProto::set_is_pseudo_column(bool value) {
  set_has_is_pseudo_column();
  is_pseudo_column_ = value;
  // @@protoc_insertion_point(field_set:zetasql.SimpleColumnProto.is_pseudo_column)
}

// optional bool is_writable_column = 4 [default = true];
inline bool SimpleColumnProto::has_is_writable_column() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SimpleColumnProto::set_has_is_writable_column() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SimpleColumnProto::clear_has_is_writable_column() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SimpleColumnProto::clear_is_writable_column() {
  is_writable_column_ = true;
  clear_has_is_writable_column();
}
inline bool SimpleColumnProto::is_writable_column() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleColumnProto.is_writable_column)
  return is_writable_column_;
}
inline void SimpleColumnProto::set_is_writable_column(bool value) {
  set_has_is_writable_column();
  is_writable_column_ = value;
  // @@protoc_insertion_point(field_set:zetasql.SimpleColumnProto.is_writable_column)
}

// optional .zetasql.AnnotationMapProto annotation_map = 5;
inline bool SimpleColumnProto::has_annotation_map() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SimpleColumnProto::set_has_annotation_map() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SimpleColumnProto::clear_has_annotation_map() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasql::AnnotationMapProto& SimpleColumnProto::_internal_annotation_map() const {
  return *annotation_map_;
}
inline const ::zetasql::AnnotationMapProto& SimpleColumnProto::annotation_map() const {
  const ::zetasql::AnnotationMapProto* p = annotation_map_;
  // @@protoc_insertion_point(field_get:zetasql.SimpleColumnProto.annotation_map)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnnotationMapProto*>(
      &::zetasql::_AnnotationMapProto_default_instance_);
}
inline ::zetasql::AnnotationMapProto* SimpleColumnProto::release_annotation_map() {
  // @@protoc_insertion_point(field_release:zetasql.SimpleColumnProto.annotation_map)
  clear_has_annotation_map();
  ::zetasql::AnnotationMapProto* temp = annotation_map_;
  annotation_map_ = NULL;
  return temp;
}
inline ::zetasql::AnnotationMapProto* SimpleColumnProto::mutable_annotation_map() {
  set_has_annotation_map();
  if (annotation_map_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnnotationMapProto>(GetArenaNoVirtual());
    annotation_map_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleColumnProto.annotation_map)
  return annotation_map_;
}
inline void SimpleColumnProto::set_allocated_annotation_map(::zetasql::AnnotationMapProto* annotation_map) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(annotation_map_);
  }
  if (annotation_map) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(annotation_map)->GetArena();
    if (message_arena != submessage_arena) {
      annotation_map = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, annotation_map, submessage_arena);
    }
    set_has_annotation_map();
  } else {
    clear_has_annotation_map();
  }
  annotation_map_ = annotation_map;
  // @@protoc_insertion_point(field_set_allocated:zetasql.SimpleColumnProto.annotation_map)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_zetasql_2fpublic_2fsimple_5ftable_2eproto
