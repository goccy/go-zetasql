// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/simple_value.proto

#include "zetasql/public/simple_value.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace zetasql {
class SimpleValueProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SimpleValueProto>
      _instance;
  ::google::protobuf::int64 int64_value_;
  ::google::protobuf::internal::ArenaStringPtr string_value_;
  bool bool_value_;
  double double_value_;
  ::google::protobuf::internal::ArenaStringPtr bytes_value_;
  bool __simplevalueproto__switch_must_have_a_default_;
} _SimpleValueProto_default_instance_;
}  // namespace zetasql
namespace protobuf_zetasql_2fpublic_2fsimple_5fvalue_2eproto {
static void InitDefaultsSimpleValueProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_SimpleValueProto_default_instance_;
    new (ptr) ::zetasql::SimpleValueProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::SimpleValueProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SimpleValueProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSimpleValueProto}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SimpleValueProto.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::SimpleValueProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::SimpleValueProto, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::SimpleValueProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::zetasql::SimpleValueProtoDefaultTypeInternal, int64_value_),
  offsetof(::zetasql::SimpleValueProtoDefaultTypeInternal, string_value_),
  offsetof(::zetasql::SimpleValueProtoDefaultTypeInternal, bool_value_),
  offsetof(::zetasql::SimpleValueProtoDefaultTypeInternal, double_value_),
  offsetof(::zetasql::SimpleValueProtoDefaultTypeInternal, bytes_value_),
  offsetof(::zetasql::SimpleValueProtoDefaultTypeInternal, __simplevalueproto__switch_must_have_a_default_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::SimpleValueProto, value_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::zetasql::SimpleValueProto)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_SimpleValueProto_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "zetasql/public/simple_value.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n!zetasql/public/simple_value.proto\022\007zet"
      "asql\"\312\001\n\020SimpleValueProto\022\025\n\013int64_value"
      "\030\001 \001(\003H\000\022\026\n\014string_value\030\002 \001(\tH\000\022\024\n\nbool"
      "_value\030\003 \001(\010H\000\022\026\n\014double_value\030\004 \001(\001H\000\022\025"
      "\n\013bytes_value\030\005 \001(\014H\000\0229\n.__SimpleValuePr"
      "oto__switch_must_have_a_default\030\377\001 \001(\010H\000"
      "B\007\n\005valueB+\n\022com.google.zetasqlB\022ZetaSQL"
      "SimpleValue\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 294);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zetasql/public/simple_value.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_zetasql_2fpublic_2fsimple_5fvalue_2eproto
namespace zetasql {

// ===================================================================

void SimpleValueProto::InitAsDefaultInstance() {
  ::zetasql::_SimpleValueProto_default_instance_.int64_value_ = GOOGLE_LONGLONG(0);
  ::zetasql::_SimpleValueProto_default_instance_.string_value_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::zetasql::_SimpleValueProto_default_instance_.bool_value_ = false;
  ::zetasql::_SimpleValueProto_default_instance_.double_value_ = 0;
  ::zetasql::_SimpleValueProto_default_instance_.bytes_value_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::zetasql::_SimpleValueProto_default_instance_.__simplevalueproto__switch_must_have_a_default_ = false;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleValueProto::kInt64ValueFieldNumber;
const int SimpleValueProto::kStringValueFieldNumber;
const int SimpleValueProto::kBoolValueFieldNumber;
const int SimpleValueProto::kDoubleValueFieldNumber;
const int SimpleValueProto::kBytesValueFieldNumber;
const int SimpleValueProto::kSimpleValueProtoSwitchMustHaveADefaultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleValueProto::SimpleValueProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fpublic_2fsimple_5fvalue_2eproto::scc_info_SimpleValueProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.SimpleValueProto)
}
SimpleValueProto::SimpleValueProto(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fpublic_2fsimple_5fvalue_2eproto::scc_info_SimpleValueProto.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zetasql.SimpleValueProto)
}
SimpleValueProto::SimpleValueProto(const SimpleValueProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kInt64Value: {
      set_int64_value(from.int64_value());
      break;
    }
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case kBoolValue: {
      set_bool_value(from.bool_value());
      break;
    }
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case kBytesValue: {
      set_bytes_value(from.bytes_value());
      break;
    }
    case kSimpleValueProtoSwitchMustHaveADefault: {
      set___simplevalueproto__switch_must_have_a_default(from.__simplevalueproto__switch_must_have_a_default());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.SimpleValueProto)
}

void SimpleValueProto::SharedCtor() {
  clear_has_value();
}

SimpleValueProto::~SimpleValueProto() {
  // @@protoc_insertion_point(destructor:zetasql.SimpleValueProto)
  SharedDtor();
}

void SimpleValueProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (has_value()) {
    clear_value();
  }
}

void SimpleValueProto::ArenaDtor(void* object) {
  SimpleValueProto* _this = reinterpret_cast< SimpleValueProto* >(object);
  (void)_this;
}
void SimpleValueProto::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SimpleValueProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SimpleValueProto::descriptor() {
  ::protobuf_zetasql_2fpublic_2fsimple_5fvalue_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fpublic_2fsimple_5fvalue_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimpleValueProto& SimpleValueProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fpublic_2fsimple_5fvalue_2eproto::scc_info_SimpleValueProto.base);
  return *internal_default_instance();
}


void SimpleValueProto::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.SimpleValueProto)
  switch (value_case()) {
    case kInt64Value: {
      // No need to clear
      break;
    }
    case kStringValue: {
      value_.string_value_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kBytesValue: {
      value_.bytes_value_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kSimpleValueProtoSwitchMustHaveADefault: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void SimpleValueProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.SimpleValueProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SimpleValueProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.SimpleValueProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 int64_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_.int64_value_)));
          set_has_int64_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string string_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string_value().data(), static_cast<int>(this->string_value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zetasql.SimpleValueProto.string_value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bool_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_.bool_value_)));
          set_has_bool_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double double_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_.double_value_)));
          set_has_double_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes bytes_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool __SimpleValueProto__switch_must_have_a_default = 255;
      case 255: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 2040 & 0xFF */)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_.__simplevalueproto__switch_must_have_a_default_)));
          set_has___simplevalueproto__switch_must_have_a_default();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.SimpleValueProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.SimpleValueProto)
  return false;
#undef DO_
}

void SimpleValueProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.SimpleValueProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (value_case()) {
    case kInt64Value:
      ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->int64_value(), output);
      break;
    case kStringValue:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->string_value().data(), static_cast<int>(this->string_value().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "zetasql.SimpleValueProto.string_value");
      ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        2, this->string_value(), output);
      break;
    case kBoolValue:
      ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bool_value(), output);
      break;
    case kDoubleValue:
      ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->double_value(), output);
      break;
    case kBytesValue:
      ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
        5, this->bytes_value(), output);
      break;
    case kSimpleValueProtoSwitchMustHaveADefault:
      ::google::protobuf::internal::WireFormatLite::WriteBool(255, this->__simplevalueproto__switch_must_have_a_default(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.SimpleValueProto)
}

::google::protobuf::uint8* SimpleValueProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.SimpleValueProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (value_case()) {
    case kInt64Value:
      target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->int64_value(), target);
      break;
    case kStringValue:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->string_value().data(), static_cast<int>(this->string_value().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "zetasql.SimpleValueProto.string_value");
      target =
        ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
          2, this->string_value(), target);
      break;
    case kBoolValue:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bool_value(), target);
      break;
    case kDoubleValue:
      target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->double_value(), target);
      break;
    case kBytesValue:
      target =
        ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
          5, this->bytes_value(), target);
      break;
    case kSimpleValueProtoSwitchMustHaveADefault:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(255, this->__simplevalueproto__switch_must_have_a_default(), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.SimpleValueProto)
  return target;
}

size_t SimpleValueProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.SimpleValueProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (value_case()) {
    // optional int64 int64_value = 1;
    case kInt64Value: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int64_value());
      break;
    }
    // optional string string_value = 2;
    case kStringValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
      break;
    }
    // optional bool bool_value = 3;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // optional double double_value = 4;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // optional bytes bytes_value = 5;
    case kBytesValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytes_value());
      break;
    }
    // optional bool __SimpleValueProto__switch_must_have_a_default = 255;
    case kSimpleValueProtoSwitchMustHaveADefault: {
      total_size += 2 + 1;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleValueProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.SimpleValueProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleValueProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleValueProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.SimpleValueProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.SimpleValueProto)
    MergeFrom(*source);
  }
}

void SimpleValueProto::MergeFrom(const SimpleValueProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.SimpleValueProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kInt64Value: {
      set_int64_value(from.int64_value());
      break;
    }
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case kBoolValue: {
      set_bool_value(from.bool_value());
      break;
    }
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case kBytesValue: {
      set_bytes_value(from.bytes_value());
      break;
    }
    case kSimpleValueProtoSwitchMustHaveADefault: {
      set___simplevalueproto__switch_must_have_a_default(from.__simplevalueproto__switch_must_have_a_default());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void SimpleValueProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.SimpleValueProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleValueProto::CopyFrom(const SimpleValueProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.SimpleValueProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleValueProto::IsInitialized() const {
  return true;
}

void SimpleValueProto::Swap(SimpleValueProto* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SimpleValueProto* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SimpleValueProto::UnsafeArenaSwap(SimpleValueProto* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SimpleValueProto::InternalSwap(SimpleValueProto* other) {
  using std::swap;
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SimpleValueProto::GetMetadata() const {
  protobuf_zetasql_2fpublic_2fsimple_5fvalue_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fpublic_2fsimple_5fvalue_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace zetasql
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::SimpleValueProto* Arena::CreateMaybeMessage< ::zetasql::SimpleValueProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::SimpleValueProto >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
