// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/simple_value.proto

#ifndef PROTOBUF_INCLUDED_zetasql_2fpublic_2fsimple_5fvalue_2eproto
#define PROTOBUF_INCLUDED_zetasql_2fpublic_2fsimple_5fvalue_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_zetasql_2fpublic_2fsimple_5fvalue_2eproto 

namespace protobuf_zetasql_2fpublic_2fsimple_5fvalue_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_zetasql_2fpublic_2fsimple_5fvalue_2eproto
namespace zetasql {
class SimpleValueProto;
class SimpleValueProtoDefaultTypeInternal;
extern SimpleValueProtoDefaultTypeInternal _SimpleValueProto_default_instance_;
}  // namespace zetasql
namespace google {
namespace protobuf {
template<> ::zetasql::SimpleValueProto* Arena::CreateMaybeMessage<::zetasql::SimpleValueProto>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace zetasql {

// ===================================================================

class SimpleValueProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.SimpleValueProto) */ {
 public:
  SimpleValueProto();
  virtual ~SimpleValueProto();

  SimpleValueProto(const SimpleValueProto& from);

  inline SimpleValueProto& operator=(const SimpleValueProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimpleValueProto(SimpleValueProto&& from) noexcept
    : SimpleValueProto() {
    *this = ::std::move(from);
  }

  inline SimpleValueProto& operator=(SimpleValueProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleValueProto& default_instance();

  enum ValueCase {
    kInt64Value = 1,
    kStringValue = 2,
    kBoolValue = 3,
    kDoubleValue = 4,
    kBytesValue = 5,
    kSimpleValueProtoSwitchMustHaveADefault = 255,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleValueProto* internal_default_instance() {
    return reinterpret_cast<const SimpleValueProto*>(
               &_SimpleValueProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(SimpleValueProto* other);
  void Swap(SimpleValueProto* other);
  friend void swap(SimpleValueProto& a, SimpleValueProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimpleValueProto* New() const final {
    return CreateMaybeMessage<SimpleValueProto>(NULL);
  }

  SimpleValueProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimpleValueProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimpleValueProto& from);
  void MergeFrom(const SimpleValueProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleValueProto* other);
  protected:
  explicit SimpleValueProto(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 int64_value = 1;
  bool has_int64_value() const;
  void clear_int64_value();
  static const int kInt64ValueFieldNumber = 1;
  ::google::protobuf::int64 int64_value() const;
  void set_int64_value(::google::protobuf::int64 value);

  // optional string string_value = 2;
  bool has_string_value() const;
  void clear_string_value();
  static const int kStringValueFieldNumber = 2;
  const ::std::string& string_value() const;
  void set_string_value(const ::std::string& value);
  #if LANG_CXX11
  void set_string_value(::std::string&& value);
  #endif
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  ::std::string* mutable_string_value();
  ::std::string* release_string_value();
  void set_allocated_string_value(::std::string* string_value);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_string_value();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_string_value(
      ::std::string* string_value);

  // optional bool bool_value = 3;
  bool has_bool_value() const;
  void clear_bool_value();
  static const int kBoolValueFieldNumber = 3;
  bool bool_value() const;
  void set_bool_value(bool value);

  // optional double double_value = 4;
  bool has_double_value() const;
  void clear_double_value();
  static const int kDoubleValueFieldNumber = 4;
  double double_value() const;
  void set_double_value(double value);

  // optional bytes bytes_value = 5;
  bool has_bytes_value() const;
  void clear_bytes_value();
  static const int kBytesValueFieldNumber = 5;
  const ::std::string& bytes_value() const;
  void set_bytes_value(const ::std::string& value);
  #if LANG_CXX11
  void set_bytes_value(::std::string&& value);
  #endif
  void set_bytes_value(const char* value);
  void set_bytes_value(const void* value, size_t size);
  ::std::string* mutable_bytes_value();
  ::std::string* release_bytes_value();
  void set_allocated_bytes_value(::std::string* bytes_value);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_bytes_value();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bytes_value(
      ::std::string* bytes_value);

  // optional bool __SimpleValueProto__switch_must_have_a_default = 255;
  bool has___simplevalueproto__switch_must_have_a_default() const;
  void clear___simplevalueproto__switch_must_have_a_default();
  static const int kSimpleValueProtoSwitchMustHaveADefaultFieldNumber = 255;
  bool __simplevalueproto__switch_must_have_a_default() const;
  void set___simplevalueproto__switch_must_have_a_default(bool value);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:zetasql.SimpleValueProto)
 private:
  void set_has_int64_value();
  void set_has_string_value();
  void set_has_bool_value();
  void set_has_double_value();
  void set_has_bytes_value();
  void set_has___simplevalueproto__switch_must_have_a_default();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union ValueUnion {
    ValueUnion() {}
    ::google::protobuf::int64 int64_value_;
    ::google::protobuf::internal::ArenaStringPtr string_value_;
    bool bool_value_;
    double double_value_;
    ::google::protobuf::internal::ArenaStringPtr bytes_value_;
    bool __simplevalueproto__switch_must_have_a_default_;
  } value_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_zetasql_2fpublic_2fsimple_5fvalue_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SimpleValueProto

// optional int64 int64_value = 1;
inline bool SimpleValueProto::has_int64_value() const {
  return value_case() == kInt64Value;
}
inline void SimpleValueProto::set_has_int64_value() {
  _oneof_case_[0] = kInt64Value;
}
inline void SimpleValueProto::clear_int64_value() {
  if (has_int64_value()) {
    value_.int64_value_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::int64 SimpleValueProto::int64_value() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleValueProto.int64_value)
  if (has_int64_value()) {
    return value_.int64_value_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void SimpleValueProto::set_int64_value(::google::protobuf::int64 value) {
  if (!has_int64_value()) {
    clear_value();
    set_has_int64_value();
  }
  value_.int64_value_ = value;
  // @@protoc_insertion_point(field_set:zetasql.SimpleValueProto.int64_value)
}

// optional string string_value = 2;
inline bool SimpleValueProto::has_string_value() const {
  return value_case() == kStringValue;
}
inline void SimpleValueProto::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void SimpleValueProto::clear_string_value() {
  if (has_string_value()) {
    value_.string_value_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_value();
  }
}
inline const ::std::string& SimpleValueProto::string_value() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleValueProto.string_value)
  if (has_string_value()) {
    return value_.string_value_.Get();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void SimpleValueProto::set_string_value(const ::std::string& value) {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:zetasql.SimpleValueProto.string_value)
}
#if LANG_CXX11
inline void SimpleValueProto::set_string_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.SimpleValueProto.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:zetasql.SimpleValueProto.string_value)
}
#endif
inline void SimpleValueProto::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:zetasql.SimpleValueProto.string_value)
}
inline void SimpleValueProto::set_string_value(const char* value,
                             size_t size) {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:zetasql.SimpleValueProto.string_value)
}
inline ::std::string* SimpleValueProto::mutable_string_value() {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return value_.string_value_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleValueProto.string_value)
}
inline ::std::string* SimpleValueProto::release_string_value() {
  // @@protoc_insertion_point(field_release:zetasql.SimpleValueProto.string_value)
  if (has_string_value()) {
    clear_has_value();
    return value_.string_value_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void SimpleValueProto::set_allocated_string_value(::std::string* string_value) {
  if (!has_string_value()) {
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (string_value != NULL) {
    set_has_string_value();
    value_.string_value_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_value,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.SimpleValueProto.string_value)
}
inline ::std::string* SimpleValueProto::unsafe_arena_release_string_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.SimpleValueProto.string_value)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_string_value()) {
    clear_has_value();
    return value_.string_value_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void SimpleValueProto::unsafe_arena_set_allocated_string_value(::std::string* string_value) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_string_value()) {
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (string_value) {
    set_has_string_value();
    value_.string_value_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_value, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.SimpleValueProto.string_value)
}

// optional bool bool_value = 3;
inline bool SimpleValueProto::has_bool_value() const {
  return value_case() == kBoolValue;
}
inline void SimpleValueProto::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void SimpleValueProto::clear_bool_value() {
  if (has_bool_value()) {
    value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool SimpleValueProto::bool_value() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleValueProto.bool_value)
  if (has_bool_value()) {
    return value_.bool_value_;
  }
  return false;
}
inline void SimpleValueProto::set_bool_value(bool value) {
  if (!has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  value_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:zetasql.SimpleValueProto.bool_value)
}

// optional double double_value = 4;
inline bool SimpleValueProto::has_double_value() const {
  return value_case() == kDoubleValue;
}
inline void SimpleValueProto::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void SimpleValueProto::clear_double_value() {
  if (has_double_value()) {
    value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double SimpleValueProto::double_value() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleValueProto.double_value)
  if (has_double_value()) {
    return value_.double_value_;
  }
  return 0;
}
inline void SimpleValueProto::set_double_value(double value) {
  if (!has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  value_.double_value_ = value;
  // @@protoc_insertion_point(field_set:zetasql.SimpleValueProto.double_value)
}

// optional bytes bytes_value = 5;
inline bool SimpleValueProto::has_bytes_value() const {
  return value_case() == kBytesValue;
}
inline void SimpleValueProto::set_has_bytes_value() {
  _oneof_case_[0] = kBytesValue;
}
inline void SimpleValueProto::clear_bytes_value() {
  if (has_bytes_value()) {
    value_.bytes_value_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_value();
  }
}
inline const ::std::string& SimpleValueProto::bytes_value() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleValueProto.bytes_value)
  if (has_bytes_value()) {
    return value_.bytes_value_.Get();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void SimpleValueProto::set_bytes_value(const ::std::string& value) {
  if (!has_bytes_value()) {
    clear_value();
    set_has_bytes_value();
    value_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.bytes_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:zetasql.SimpleValueProto.bytes_value)
}
#if LANG_CXX11
inline void SimpleValueProto::set_bytes_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.SimpleValueProto.bytes_value)
  if (!has_bytes_value()) {
    clear_value();
    set_has_bytes_value();
    value_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.bytes_value_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:zetasql.SimpleValueProto.bytes_value)
}
#endif
inline void SimpleValueProto::set_bytes_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_bytes_value()) {
    clear_value();
    set_has_bytes_value();
    value_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.bytes_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:zetasql.SimpleValueProto.bytes_value)
}
inline void SimpleValueProto::set_bytes_value(const void* value,
                             size_t size) {
  if (!has_bytes_value()) {
    clear_value();
    set_has_bytes_value();
    value_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.bytes_value_.Set(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:zetasql.SimpleValueProto.bytes_value)
}
inline ::std::string* SimpleValueProto::mutable_bytes_value() {
  if (!has_bytes_value()) {
    clear_value();
    set_has_bytes_value();
    value_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return value_.bytes_value_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleValueProto.bytes_value)
}
inline ::std::string* SimpleValueProto::release_bytes_value() {
  // @@protoc_insertion_point(field_release:zetasql.SimpleValueProto.bytes_value)
  if (has_bytes_value()) {
    clear_has_value();
    return value_.bytes_value_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void SimpleValueProto::set_allocated_bytes_value(::std::string* bytes_value) {
  if (!has_bytes_value()) {
    value_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (bytes_value != NULL) {
    set_has_bytes_value();
    value_.bytes_value_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytes_value,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.SimpleValueProto.bytes_value)
}
inline ::std::string* SimpleValueProto::unsafe_arena_release_bytes_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.SimpleValueProto.bytes_value)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_bytes_value()) {
    clear_has_value();
    return value_.bytes_value_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void SimpleValueProto::unsafe_arena_set_allocated_bytes_value(::std::string* bytes_value) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_bytes_value()) {
    value_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (bytes_value) {
    set_has_bytes_value();
    value_.bytes_value_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytes_value, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.SimpleValueProto.bytes_value)
}

// optional bool __SimpleValueProto__switch_must_have_a_default = 255;
inline bool SimpleValueProto::has___simplevalueproto__switch_must_have_a_default() const {
  return value_case() == kSimpleValueProtoSwitchMustHaveADefault;
}
inline void SimpleValueProto::set_has___simplevalueproto__switch_must_have_a_default() {
  _oneof_case_[0] = kSimpleValueProtoSwitchMustHaveADefault;
}
inline void SimpleValueProto::clear___simplevalueproto__switch_must_have_a_default() {
  if (has___simplevalueproto__switch_must_have_a_default()) {
    value_.__simplevalueproto__switch_must_have_a_default_ = false;
    clear_has_value();
  }
}
inline bool SimpleValueProto::__simplevalueproto__switch_must_have_a_default() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleValueProto.__SimpleValueProto__switch_must_have_a_default)
  if (has___simplevalueproto__switch_must_have_a_default()) {
    return value_.__simplevalueproto__switch_must_have_a_default_;
  }
  return false;
}
inline void SimpleValueProto::set___simplevalueproto__switch_must_have_a_default(bool value) {
  if (!has___simplevalueproto__switch_must_have_a_default()) {
    clear_value();
    set_has___simplevalueproto__switch_must_have_a_default();
  }
  value_.__simplevalueproto__switch_must_have_a_default_ = value;
  // @@protoc_insertion_point(field_set:zetasql.SimpleValueProto.__SimpleValueProto__switch_must_have_a_default)
}

inline bool SimpleValueProto::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void SimpleValueProto::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline SimpleValueProto::ValueCase SimpleValueProto::value_case() const {
  return SimpleValueProto::ValueCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_zetasql_2fpublic_2fsimple_5fvalue_2eproto
