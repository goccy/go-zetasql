// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/type.proto

#include "zetasql/public/type.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2fdescriptor_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fdescriptor_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FileDescriptorSet;
}  // namespace protobuf_google_2fprotobuf_2fdescriptor_2eproto
namespace protobuf_zetasql_2fpublic_2ftype_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_zetasql_2fpublic_2ftype_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EnumTypeProto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_zetasql_2fpublic_2ftype_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ProtoTypeProto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_zetasql_2fpublic_2ftype_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_ArrayTypeProto;
}  // namespace protobuf_zetasql_2fpublic_2ftype_2eproto
namespace zetasql {
class TypeProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TypeProto>
      _instance;
} _TypeProto_default_instance_;
class ArrayTypeProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ArrayTypeProto>
      _instance;
} _ArrayTypeProto_default_instance_;
class StructFieldProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StructFieldProto>
      _instance;
} _StructFieldProto_default_instance_;
class StructTypeProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StructTypeProto>
      _instance;
} _StructTypeProto_default_instance_;
class ProtoTypeProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtoTypeProto>
      _instance;
} _ProtoTypeProto_default_instance_;
class EnumTypeProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnumTypeProto>
      _instance;
} _EnumTypeProto_default_instance_;
}  // namespace zetasql
namespace protobuf_zetasql_2fpublic_2ftype_2eproto {
static void InitDefaultsArrayTypeProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_TypeProto_default_instance_;
    new (ptr) ::zetasql::TypeProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::zetasql::_ArrayTypeProto_default_instance_;
    new (ptr) ::zetasql::ArrayTypeProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::zetasql::_StructFieldProto_default_instance_;
    new (ptr) ::zetasql::StructFieldProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::zetasql::_StructTypeProto_default_instance_;
    new (ptr) ::zetasql::StructTypeProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::TypeProto::InitAsDefaultInstance();
  ::zetasql::ArrayTypeProto::InitAsDefaultInstance();
  ::zetasql::StructFieldProto::InitAsDefaultInstance();
  ::zetasql::StructTypeProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ArrayTypeProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsArrayTypeProto}, {
      &protobuf_zetasql_2fpublic_2ftype_2eproto::scc_info_ProtoTypeProto.base,
      &protobuf_zetasql_2fpublic_2ftype_2eproto::scc_info_EnumTypeProto.base,
      &protobuf_google_2fprotobuf_2fdescriptor_2eproto::scc_info_FileDescriptorSet.base,}};

static void InitDefaultsProtoTypeProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_ProtoTypeProto_default_instance_;
    new (ptr) ::zetasql::ProtoTypeProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::ProtoTypeProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProtoTypeProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtoTypeProto}, {}};

static void InitDefaultsEnumTypeProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_EnumTypeProto_default_instance_;
    new (ptr) ::zetasql::EnumTypeProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::EnumTypeProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EnumTypeProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEnumTypeProto}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ArrayTypeProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProtoTypeProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EnumTypeProto.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TypeProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TypeProto, _internal_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TypeProto, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TypeProto, type_kind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TypeProto, array_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TypeProto, struct_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TypeProto, proto_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TypeProto, enum_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TypeProto, file_descriptor_set_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TypeProto, extended_type_name_),
  5,
  1,
  2,
  3,
  4,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ArrayTypeProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ArrayTypeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ArrayTypeProto, element_type_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::StructFieldProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::StructFieldProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::StructFieldProto, field_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::StructFieldProto, field_type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::StructTypeProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::StructTypeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::StructTypeProto, field_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ProtoTypeProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ProtoTypeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ProtoTypeProto, proto_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ProtoTypeProto, proto_file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ProtoTypeProto, file_descriptor_set_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::ProtoTypeProto, catalog_name_path_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::EnumTypeProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::EnumTypeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::EnumTypeProto, enum_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::EnumTypeProto, enum_file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::EnumTypeProto, file_descriptor_set_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::EnumTypeProto, catalog_name_path_),
  0,
  1,
  2,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::zetasql::TypeProto)},
  { 19, 25, sizeof(::zetasql::ArrayTypeProto)},
  { 26, 33, sizeof(::zetasql::StructFieldProto)},
  { 35, 41, sizeof(::zetasql::StructTypeProto)},
  { 42, 51, sizeof(::zetasql::ProtoTypeProto)},
  { 55, 64, sizeof(::zetasql::EnumTypeProto)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_TypeProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ArrayTypeProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_StructFieldProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_StructTypeProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_ProtoTypeProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_EnumTypeProto_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "zetasql/public/type.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031zetasql/public/type.proto\022\007zetasql\032 go"
      "ogle/protobuf/descriptor.proto\"\316\002\n\tTypeP"
      "roto\022$\n\ttype_kind\030\001 \001(\0162\021.zetasql.TypeKi"
      "nd\022+\n\narray_type\030\002 \001(\0132\027.zetasql.ArrayTy"
      "peProto\022-\n\013struct_type\030\003 \001(\0132\030.zetasql.S"
      "tructTypeProto\022+\n\nproto_type\030\004 \001(\0132\027.zet"
      "asql.ProtoTypeProto\022)\n\tenum_type\030\005 \001(\0132\026"
      ".zetasql.EnumTypeProto\022\?\n\023file_descripto"
      "r_set\030\006 \003(\0132\".google.protobuf.FileDescri"
      "ptorSet\022\032\n\022extended_type_name\030\007 \001(\t*\n\010\240\215"
      "\006\020\200\200\200\200\002\":\n\016ArrayTypeProto\022(\n\014element_typ"
      "e\030\001 \001(\0132\022.zetasql.TypeProto\"N\n\020StructFie"
      "ldProto\022\022\n\nfield_name\030\001 \001(\t\022&\n\nfield_typ"
      "e\030\002 \001(\0132\022.zetasql.TypeProto\";\n\017StructTyp"
      "eProto\022(\n\005field\030\001 \003(\0132\031.zetasql.StructFi"
      "eldProto\"~\n\016ProtoTypeProto\022\022\n\nproto_name"
      "\030\001 \001(\t\022\027\n\017proto_file_name\030\002 \001(\t\022$\n\031file_"
      "descriptor_set_index\030\003 \001(\005:\0010\022\031\n\021catalog"
      "_name_path\030\004 \003(\t\"{\n\rEnumTypeProto\022\021\n\tenu"
      "m_name\030\001 \001(\t\022\026\n\016enum_file_name\030\002 \001(\t\022$\n\031"
      "file_descriptor_set_index\030\003 \001(\005:\0010\022\031\n\021ca"
      "talog_name_path\030\004 \003(\t*\333\003\n\010TypeKind\0225\n(__"
      "TypeKind__switch_must_have_a_default__\020\377"
      "\377\377\377\377\377\377\377\377\001\022\020\n\014TYPE_UNKNOWN\020\000\022\016\n\nTYPE_INT3"
      "2\020\001\022\016\n\nTYPE_INT64\020\002\022\017\n\013TYPE_UINT32\020\003\022\017\n\013"
      "TYPE_UINT64\020\004\022\r\n\tTYPE_BOOL\020\005\022\016\n\nTYPE_FLO"
      "AT\020\006\022\017\n\013TYPE_DOUBLE\020\007\022\017\n\013TYPE_STRING\020\010\022\016"
      "\n\nTYPE_BYTES\020\t\022\r\n\tTYPE_DATE\020\n\022\022\n\016TYPE_TI"
      "MESTAMP\020\023\022\r\n\tTYPE_ENUM\020\017\022\016\n\nTYPE_ARRAY\020\020"
      "\022\017\n\013TYPE_STRUCT\020\021\022\016\n\nTYPE_PROTO\020\022\022\r\n\tTYP"
      "E_TIME\020\024\022\021\n\rTYPE_DATETIME\020\025\022\022\n\016TYPE_GEOG"
      "RAPHY\020\026\022\020\n\014TYPE_NUMERIC\020\027\022\023\n\017TYPE_BIGNUM"
      "ERIC\020\030\022\021\n\rTYPE_EXTENDED\020\031\022\r\n\tTYPE_JSON\020\032"
      "\022\021\n\rTYPE_INTERVAL\020\033B$\n\022com.google.zetasq"
      "lB\013ZetaSQLType\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1377);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zetasql/public/type.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fdescriptor_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_zetasql_2fpublic_2ftype_2eproto
namespace zetasql {
const ::google::protobuf::EnumDescriptor* TypeKind_descriptor() {
  protobuf_zetasql_2fpublic_2ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fpublic_2ftype_2eproto::file_level_enum_descriptors[0];
}
bool TypeKind_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TypeProto::InitAsDefaultInstance() {
  ::zetasql::_TypeProto_default_instance_._instance.get_mutable()->array_type_ = const_cast< ::zetasql::ArrayTypeProto*>(
      ::zetasql::ArrayTypeProto::internal_default_instance());
  ::zetasql::_TypeProto_default_instance_._instance.get_mutable()->struct_type_ = const_cast< ::zetasql::StructTypeProto*>(
      ::zetasql::StructTypeProto::internal_default_instance());
  ::zetasql::_TypeProto_default_instance_._instance.get_mutable()->proto_type_ = const_cast< ::zetasql::ProtoTypeProto*>(
      ::zetasql::ProtoTypeProto::internal_default_instance());
  ::zetasql::_TypeProto_default_instance_._instance.get_mutable()->enum_type_ = const_cast< ::zetasql::EnumTypeProto*>(
      ::zetasql::EnumTypeProto::internal_default_instance());
}
void TypeProto::unsafe_arena_set_allocated_array_type(
    ::zetasql::ArrayTypeProto* array_type) {
  if (GetArenaNoVirtual() == NULL) {
    delete array_type_;
  }
  array_type_ = array_type;
  if (array_type) {
    set_has_array_type();
  } else {
    clear_has_array_type();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TypeProto.array_type)
}
void TypeProto::unsafe_arena_set_allocated_struct_type(
    ::zetasql::StructTypeProto* struct_type) {
  if (GetArenaNoVirtual() == NULL) {
    delete struct_type_;
  }
  struct_type_ = struct_type;
  if (struct_type) {
    set_has_struct_type();
  } else {
    clear_has_struct_type();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TypeProto.struct_type)
}
void TypeProto::unsafe_arena_set_allocated_proto_type(
    ::zetasql::ProtoTypeProto* proto_type) {
  if (GetArenaNoVirtual() == NULL) {
    delete proto_type_;
  }
  proto_type_ = proto_type;
  if (proto_type) {
    set_has_proto_type();
  } else {
    clear_has_proto_type();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TypeProto.proto_type)
}
void TypeProto::unsafe_arena_set_allocated_enum_type(
    ::zetasql::EnumTypeProto* enum_type) {
  if (GetArenaNoVirtual() == NULL) {
    delete enum_type_;
  }
  enum_type_ = enum_type;
  if (enum_type) {
    set_has_enum_type();
  } else {
    clear_has_enum_type();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TypeProto.enum_type)
}
void TypeProto::clear_file_descriptor_set() {
  file_descriptor_set_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TypeProto::kTypeKindFieldNumber;
const int TypeProto::kArrayTypeFieldNumber;
const int TypeProto::kStructTypeFieldNumber;
const int TypeProto::kProtoTypeFieldNumber;
const int TypeProto::kEnumTypeFieldNumber;
const int TypeProto::kFileDescriptorSetFieldNumber;
const int TypeProto::kExtendedTypeNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TypeProto::TypeProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fpublic_2ftype_2eproto::scc_info_ArrayTypeProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.TypeProto)
}
TypeProto::TypeProto(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _extensions_(arena),
  _internal_metadata_(arena),
  file_descriptor_set_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fpublic_2ftype_2eproto::scc_info_ArrayTypeProto.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zetasql.TypeProto)
}
TypeProto::TypeProto(const TypeProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      file_descriptor_set_(from.file_descriptor_set_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  extended_type_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extended_type_name()) {
    extended_type_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extended_type_name(),
      GetArenaNoVirtual());
  }
  if (from.has_array_type()) {
    array_type_ = new ::zetasql::ArrayTypeProto(*from.array_type_);
  } else {
    array_type_ = NULL;
  }
  if (from.has_struct_type()) {
    struct_type_ = new ::zetasql::StructTypeProto(*from.struct_type_);
  } else {
    struct_type_ = NULL;
  }
  if (from.has_proto_type()) {
    proto_type_ = new ::zetasql::ProtoTypeProto(*from.proto_type_);
  } else {
    proto_type_ = NULL;
  }
  if (from.has_enum_type()) {
    enum_type_ = new ::zetasql::EnumTypeProto(*from.enum_type_);
  } else {
    enum_type_ = NULL;
  }
  type_kind_ = from.type_kind_;
  // @@protoc_insertion_point(copy_constructor:zetasql.TypeProto)
}

void TypeProto::SharedCtor() {
  extended_type_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&array_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enum_type_) -
      reinterpret_cast<char*>(&array_type_)) + sizeof(enum_type_));
  type_kind_ = -1;
}

TypeProto::~TypeProto() {
  // @@protoc_insertion_point(destructor:zetasql.TypeProto)
  SharedDtor();
}

void TypeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  extended_type_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete array_type_;
  if (this != internal_default_instance()) delete struct_type_;
  if (this != internal_default_instance()) delete proto_type_;
  if (this != internal_default_instance()) delete enum_type_;
}

void TypeProto::ArenaDtor(void* object) {
  TypeProto* _this = reinterpret_cast< TypeProto* >(object);
  (void)_this;
}
void TypeProto::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TypeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TypeProto::descriptor() {
  ::protobuf_zetasql_2fpublic_2ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fpublic_2ftype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TypeProto& TypeProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fpublic_2ftype_2eproto::scc_info_ArrayTypeProto.base);
  return *internal_default_instance();
}


void TypeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.TypeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  file_descriptor_set_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      extended_type_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(array_type_ != NULL);
      array_type_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(struct_type_ != NULL);
      struct_type_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(proto_type_ != NULL);
      proto_type_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(enum_type_ != NULL);
      enum_type_->Clear();
    }
    type_kind_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TypeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.TypeProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .zetasql.TypeKind type_kind = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zetasql::TypeKind_IsValid(value)) {
            set_type_kind(static_cast< ::zetasql::TypeKind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zetasql.ArrayTypeProto array_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_array_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zetasql.StructTypeProto struct_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_struct_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zetasql.ProtoTypeProto proto_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_proto_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zetasql.EnumTypeProto enum_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_enum_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.FileDescriptorSet file_descriptor_set = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_file_descriptor_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string extended_type_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extended_type_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extended_type_name().data(), static_cast<int>(this->extended_type_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zetasql.TypeProto.extended_type_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((800000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.TypeProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.TypeProto)
  return false;
#undef DO_
}

void TypeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.TypeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zetasql.TypeKind type_kind = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type_kind(), output);
  }

  // optional .zetasql.ArrayTypeProto array_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_array_type(), output);
  }

  // optional .zetasql.StructTypeProto struct_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_struct_type(), output);
  }

  // optional .zetasql.ProtoTypeProto proto_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_proto_type(), output);
  }

  // optional .zetasql.EnumTypeProto enum_type = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_enum_type(), output);
  }

  // repeated .google.protobuf.FileDescriptorSet file_descriptor_set = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->file_descriptor_set_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->file_descriptor_set(static_cast<int>(i)),
      output);
  }

  // optional string extended_type_name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extended_type_name().data(), static_cast<int>(this->extended_type_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zetasql.TypeProto.extended_type_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->extended_type_name(), output);
  }

  // Extension range [100000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100000, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.TypeProto)
}

::google::protobuf::uint8* TypeProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.TypeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zetasql.TypeKind type_kind = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type_kind(), target);
  }

  // optional .zetasql.ArrayTypeProto array_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_array_type(), deterministic, target);
  }

  // optional .zetasql.StructTypeProto struct_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_struct_type(), deterministic, target);
  }

  // optional .zetasql.ProtoTypeProto proto_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_proto_type(), deterministic, target);
  }

  // optional .zetasql.EnumTypeProto enum_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_enum_type(), deterministic, target);
  }

  // repeated .google.protobuf.FileDescriptorSet file_descriptor_set = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->file_descriptor_set_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->file_descriptor_set(static_cast<int>(i)), deterministic, target);
  }

  // optional string extended_type_name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extended_type_name().data(), static_cast<int>(this->extended_type_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zetasql.TypeProto.extended_type_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->extended_type_name(), target);
  }

  // Extension range [100000, 536870912)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100000, 536870912, deterministic, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.TypeProto)
  return target;
}

size_t TypeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.TypeProto)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .google.protobuf.FileDescriptorSet file_descriptor_set = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->file_descriptor_set_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->file_descriptor_set(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional string extended_type_name = 7;
    if (has_extended_type_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extended_type_name());
    }

    // optional .zetasql.ArrayTypeProto array_type = 2;
    if (has_array_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *array_type_);
    }

    // optional .zetasql.StructTypeProto struct_type = 3;
    if (has_struct_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *struct_type_);
    }

    // optional .zetasql.ProtoTypeProto proto_type = 4;
    if (has_proto_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *proto_type_);
    }

    // optional .zetasql.EnumTypeProto enum_type = 5;
    if (has_enum_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *enum_type_);
    }

    // optional .zetasql.TypeKind type_kind = 1;
    if (has_type_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type_kind());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TypeProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.TypeProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TypeProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TypeProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.TypeProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.TypeProto)
    MergeFrom(*source);
  }
}

void TypeProto::MergeFrom(const TypeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.TypeProto)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  file_descriptor_set_.MergeFrom(from.file_descriptor_set_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_extended_type_name(from.extended_type_name());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_array_type()->::zetasql::ArrayTypeProto::MergeFrom(from.array_type());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_struct_type()->::zetasql::StructTypeProto::MergeFrom(from.struct_type());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_proto_type()->::zetasql::ProtoTypeProto::MergeFrom(from.proto_type());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_enum_type()->::zetasql::EnumTypeProto::MergeFrom(from.enum_type());
    }
    if (cached_has_bits & 0x00000020u) {
      type_kind_ = from.type_kind_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TypeProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.TypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TypeProto::CopyFrom(const TypeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.TypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeProto::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::google::protobuf::internal::AllAreInitialized(this->file_descriptor_set())) return false;
  if (has_array_type()) {
    if (!this->array_type_->IsInitialized()) return false;
  }
  if (has_struct_type()) {
    if (!this->struct_type_->IsInitialized()) return false;
  }
  return true;
}

void TypeProto::Swap(TypeProto* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TypeProto* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TypeProto::UnsafeArenaSwap(TypeProto* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TypeProto::InternalSwap(TypeProto* other) {
  using std::swap;
  CastToBase(&file_descriptor_set_)->InternalSwap(CastToBase(&other->file_descriptor_set_));
  extended_type_name_.Swap(&other->extended_type_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(array_type_, other->array_type_);
  swap(struct_type_, other->struct_type_);
  swap(proto_type_, other->proto_type_);
  swap(enum_type_, other->enum_type_);
  swap(type_kind_, other->type_kind_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata TypeProto::GetMetadata() const {
  protobuf_zetasql_2fpublic_2ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fpublic_2ftype_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ArrayTypeProto::InitAsDefaultInstance() {
  ::zetasql::_ArrayTypeProto_default_instance_._instance.get_mutable()->element_type_ = const_cast< ::zetasql::TypeProto*>(
      ::zetasql::TypeProto::internal_default_instance());
}
void ArrayTypeProto::unsafe_arena_set_allocated_element_type(
    ::zetasql::TypeProto* element_type) {
  if (GetArenaNoVirtual() == NULL) {
    delete element_type_;
  }
  element_type_ = element_type;
  if (element_type) {
    set_has_element_type();
  } else {
    clear_has_element_type();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.ArrayTypeProto.element_type)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArrayTypeProto::kElementTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArrayTypeProto::ArrayTypeProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fpublic_2ftype_2eproto::scc_info_ArrayTypeProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ArrayTypeProto)
}
ArrayTypeProto::ArrayTypeProto(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fpublic_2ftype_2eproto::scc_info_ArrayTypeProto.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zetasql.ArrayTypeProto)
}
ArrayTypeProto::ArrayTypeProto(const ArrayTypeProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_element_type()) {
    element_type_ = new ::zetasql::TypeProto(*from.element_type_);
  } else {
    element_type_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ArrayTypeProto)
}

void ArrayTypeProto::SharedCtor() {
  element_type_ = NULL;
}

ArrayTypeProto::~ArrayTypeProto() {
  // @@protoc_insertion_point(destructor:zetasql.ArrayTypeProto)
  SharedDtor();
}

void ArrayTypeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete element_type_;
}

void ArrayTypeProto::ArenaDtor(void* object) {
  ArrayTypeProto* _this = reinterpret_cast< ArrayTypeProto* >(object);
  (void)_this;
}
void ArrayTypeProto::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ArrayTypeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ArrayTypeProto::descriptor() {
  ::protobuf_zetasql_2fpublic_2ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fpublic_2ftype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ArrayTypeProto& ArrayTypeProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fpublic_2ftype_2eproto::scc_info_ArrayTypeProto.base);
  return *internal_default_instance();
}


void ArrayTypeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ArrayTypeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(element_type_ != NULL);
    element_type_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ArrayTypeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ArrayTypeProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .zetasql.TypeProto element_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_element_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ArrayTypeProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ArrayTypeProto)
  return false;
#undef DO_
}

void ArrayTypeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ArrayTypeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zetasql.TypeProto element_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_element_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ArrayTypeProto)
}

::google::protobuf::uint8* ArrayTypeProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ArrayTypeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zetasql.TypeProto element_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_element_type(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ArrayTypeProto)
  return target;
}

size_t ArrayTypeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ArrayTypeProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .zetasql.TypeProto element_type = 1;
  if (has_element_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *element_type_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArrayTypeProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ArrayTypeProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ArrayTypeProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ArrayTypeProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ArrayTypeProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ArrayTypeProto)
    MergeFrom(*source);
  }
}

void ArrayTypeProto::MergeFrom(const ArrayTypeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ArrayTypeProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_element_type()) {
    mutable_element_type()->::zetasql::TypeProto::MergeFrom(from.element_type());
  }
}

void ArrayTypeProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ArrayTypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayTypeProto::CopyFrom(const ArrayTypeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ArrayTypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayTypeProto::IsInitialized() const {
  if (has_element_type()) {
    if (!this->element_type_->IsInitialized()) return false;
  }
  return true;
}

void ArrayTypeProto::Swap(ArrayTypeProto* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ArrayTypeProto* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ArrayTypeProto::UnsafeArenaSwap(ArrayTypeProto* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ArrayTypeProto::InternalSwap(ArrayTypeProto* other) {
  using std::swap;
  swap(element_type_, other->element_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ArrayTypeProto::GetMetadata() const {
  protobuf_zetasql_2fpublic_2ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fpublic_2ftype_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StructFieldProto::InitAsDefaultInstance() {
  ::zetasql::_StructFieldProto_default_instance_._instance.get_mutable()->field_type_ = const_cast< ::zetasql::TypeProto*>(
      ::zetasql::TypeProto::internal_default_instance());
}
void StructFieldProto::unsafe_arena_set_allocated_field_type(
    ::zetasql::TypeProto* field_type) {
  if (GetArenaNoVirtual() == NULL) {
    delete field_type_;
  }
  field_type_ = field_type;
  if (field_type) {
    set_has_field_type();
  } else {
    clear_has_field_type();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.StructFieldProto.field_type)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StructFieldProto::kFieldNameFieldNumber;
const int StructFieldProto::kFieldTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StructFieldProto::StructFieldProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fpublic_2ftype_2eproto::scc_info_ArrayTypeProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.StructFieldProto)
}
StructFieldProto::StructFieldProto(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fpublic_2ftype_2eproto::scc_info_ArrayTypeProto.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zetasql.StructFieldProto)
}
StructFieldProto::StructFieldProto(const StructFieldProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_field_name()) {
    field_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_name(),
      GetArenaNoVirtual());
  }
  if (from.has_field_type()) {
    field_type_ = new ::zetasql::TypeProto(*from.field_type_);
  } else {
    field_type_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.StructFieldProto)
}

void StructFieldProto::SharedCtor() {
  field_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_type_ = NULL;
}

StructFieldProto::~StructFieldProto() {
  // @@protoc_insertion_point(destructor:zetasql.StructFieldProto)
  SharedDtor();
}

void StructFieldProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  field_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete field_type_;
}

void StructFieldProto::ArenaDtor(void* object) {
  StructFieldProto* _this = reinterpret_cast< StructFieldProto* >(object);
  (void)_this;
}
void StructFieldProto::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StructFieldProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StructFieldProto::descriptor() {
  ::protobuf_zetasql_2fpublic_2ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fpublic_2ftype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StructFieldProto& StructFieldProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fpublic_2ftype_2eproto::scc_info_ArrayTypeProto.base);
  return *internal_default_instance();
}


void StructFieldProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.StructFieldProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      field_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(field_type_ != NULL);
      field_type_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StructFieldProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.StructFieldProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string field_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->field_name().data(), static_cast<int>(this->field_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zetasql.StructFieldProto.field_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zetasql.TypeProto field_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_field_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.StructFieldProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.StructFieldProto)
  return false;
#undef DO_
}

void StructFieldProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.StructFieldProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string field_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field_name().data(), static_cast<int>(this->field_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zetasql.StructFieldProto.field_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->field_name(), output);
  }

  // optional .zetasql.TypeProto field_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_field_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.StructFieldProto)
}

::google::protobuf::uint8* StructFieldProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.StructFieldProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string field_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field_name().data(), static_cast<int>(this->field_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zetasql.StructFieldProto.field_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->field_name(), target);
  }

  // optional .zetasql.TypeProto field_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_field_type(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.StructFieldProto)
  return target;
}

size_t StructFieldProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.StructFieldProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string field_name = 1;
    if (has_field_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field_name());
    }

    // optional .zetasql.TypeProto field_type = 2;
    if (has_field_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *field_type_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StructFieldProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.StructFieldProto)
  GOOGLE_DCHECK_NE(&from, this);
  const StructFieldProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StructFieldProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.StructFieldProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.StructFieldProto)
    MergeFrom(*source);
  }
}

void StructFieldProto::MergeFrom(const StructFieldProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.StructFieldProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_field_name(from.field_name());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_field_type()->::zetasql::TypeProto::MergeFrom(from.field_type());
    }
  }
}

void StructFieldProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.StructFieldProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StructFieldProto::CopyFrom(const StructFieldProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.StructFieldProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructFieldProto::IsInitialized() const {
  if (has_field_type()) {
    if (!this->field_type_->IsInitialized()) return false;
  }
  return true;
}

void StructFieldProto::Swap(StructFieldProto* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StructFieldProto* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StructFieldProto::UnsafeArenaSwap(StructFieldProto* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StructFieldProto::InternalSwap(StructFieldProto* other) {
  using std::swap;
  field_name_.Swap(&other->field_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(field_type_, other->field_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StructFieldProto::GetMetadata() const {
  protobuf_zetasql_2fpublic_2ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fpublic_2ftype_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StructTypeProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StructTypeProto::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StructTypeProto::StructTypeProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fpublic_2ftype_2eproto::scc_info_ArrayTypeProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.StructTypeProto)
}
StructTypeProto::StructTypeProto(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  field_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fpublic_2ftype_2eproto::scc_info_ArrayTypeProto.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zetasql.StructTypeProto)
}
StructTypeProto::StructTypeProto(const StructTypeProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      field_(from.field_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.StructTypeProto)
}

void StructTypeProto::SharedCtor() {
}

StructTypeProto::~StructTypeProto() {
  // @@protoc_insertion_point(destructor:zetasql.StructTypeProto)
  SharedDtor();
}

void StructTypeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void StructTypeProto::ArenaDtor(void* object) {
  StructTypeProto* _this = reinterpret_cast< StructTypeProto* >(object);
  (void)_this;
}
void StructTypeProto::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StructTypeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StructTypeProto::descriptor() {
  ::protobuf_zetasql_2fpublic_2ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fpublic_2ftype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StructTypeProto& StructTypeProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fpublic_2ftype_2eproto::scc_info_ArrayTypeProto.base);
  return *internal_default_instance();
}


void StructTypeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.StructTypeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StructTypeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.StructTypeProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .zetasql.StructFieldProto field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.StructTypeProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.StructTypeProto)
  return false;
#undef DO_
}

void StructTypeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.StructTypeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zetasql.StructFieldProto field = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->field(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.StructTypeProto)
}

::google::protobuf::uint8* StructTypeProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.StructTypeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zetasql.StructFieldProto field = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->field(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.StructTypeProto)
  return target;
}

size_t StructTypeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.StructTypeProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .zetasql.StructFieldProto field = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->field_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->field(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StructTypeProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.StructTypeProto)
  GOOGLE_DCHECK_NE(&from, this);
  const StructTypeProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StructTypeProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.StructTypeProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.StructTypeProto)
    MergeFrom(*source);
  }
}

void StructTypeProto::MergeFrom(const StructTypeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.StructTypeProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
}

void StructTypeProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.StructTypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StructTypeProto::CopyFrom(const StructTypeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.StructTypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructTypeProto::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->field())) return false;
  return true;
}

void StructTypeProto::Swap(StructTypeProto* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StructTypeProto* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StructTypeProto::UnsafeArenaSwap(StructTypeProto* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StructTypeProto::InternalSwap(StructTypeProto* other) {
  using std::swap;
  CastToBase(&field_)->InternalSwap(CastToBase(&other->field_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StructTypeProto::GetMetadata() const {
  protobuf_zetasql_2fpublic_2ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fpublic_2ftype_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProtoTypeProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoTypeProto::kProtoNameFieldNumber;
const int ProtoTypeProto::kProtoFileNameFieldNumber;
const int ProtoTypeProto::kFileDescriptorSetIndexFieldNumber;
const int ProtoTypeProto::kCatalogNamePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoTypeProto::ProtoTypeProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fpublic_2ftype_2eproto::scc_info_ProtoTypeProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.ProtoTypeProto)
}
ProtoTypeProto::ProtoTypeProto(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  catalog_name_path_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fpublic_2ftype_2eproto::scc_info_ProtoTypeProto.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zetasql.ProtoTypeProto)
}
ProtoTypeProto::ProtoTypeProto(const ProtoTypeProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      catalog_name_path_(from.catalog_name_path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proto_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_proto_name()) {
    proto_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proto_name(),
      GetArenaNoVirtual());
  }
  proto_file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_proto_file_name()) {
    proto_file_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proto_file_name(),
      GetArenaNoVirtual());
  }
  file_descriptor_set_index_ = from.file_descriptor_set_index_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ProtoTypeProto)
}

void ProtoTypeProto::SharedCtor() {
  proto_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proto_file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_descriptor_set_index_ = 0;
}

ProtoTypeProto::~ProtoTypeProto() {
  // @@protoc_insertion_point(destructor:zetasql.ProtoTypeProto)
  SharedDtor();
}

void ProtoTypeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  proto_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proto_file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProtoTypeProto::ArenaDtor(void* object) {
  ProtoTypeProto* _this = reinterpret_cast< ProtoTypeProto* >(object);
  (void)_this;
}
void ProtoTypeProto::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ProtoTypeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProtoTypeProto::descriptor() {
  ::protobuf_zetasql_2fpublic_2ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fpublic_2ftype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProtoTypeProto& ProtoTypeProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fpublic_2ftype_2eproto::scc_info_ProtoTypeProto.base);
  return *internal_default_instance();
}


void ProtoTypeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ProtoTypeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  catalog_name_path_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      proto_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      proto_file_name_.ClearNonDefaultToEmpty();
    }
  }
  file_descriptor_set_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoTypeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.ProtoTypeProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string proto_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proto_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proto_name().data(), static_cast<int>(this->proto_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zetasql.ProtoTypeProto.proto_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string proto_file_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proto_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proto_file_name().data(), static_cast<int>(this->proto_file_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zetasql.ProtoTypeProto.proto_file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 file_descriptor_set_index = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_file_descriptor_set_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_descriptor_set_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string catalog_name_path = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_catalog_name_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->catalog_name_path(this->catalog_name_path_size() - 1).data(),
            static_cast<int>(this->catalog_name_path(this->catalog_name_path_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zetasql.ProtoTypeProto.catalog_name_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.ProtoTypeProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.ProtoTypeProto)
  return false;
#undef DO_
}

void ProtoTypeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.ProtoTypeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string proto_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proto_name().data(), static_cast<int>(this->proto_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zetasql.ProtoTypeProto.proto_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->proto_name(), output);
  }

  // optional string proto_file_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proto_file_name().data(), static_cast<int>(this->proto_file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zetasql.ProtoTypeProto.proto_file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->proto_file_name(), output);
  }

  // optional int32 file_descriptor_set_index = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->file_descriptor_set_index(), output);
  }

  // repeated string catalog_name_path = 4;
  for (int i = 0, n = this->catalog_name_path_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->catalog_name_path(i).data(), static_cast<int>(this->catalog_name_path(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zetasql.ProtoTypeProto.catalog_name_path");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->catalog_name_path(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.ProtoTypeProto)
}

::google::protobuf::uint8* ProtoTypeProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ProtoTypeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string proto_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proto_name().data(), static_cast<int>(this->proto_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zetasql.ProtoTypeProto.proto_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->proto_name(), target);
  }

  // optional string proto_file_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proto_file_name().data(), static_cast<int>(this->proto_file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zetasql.ProtoTypeProto.proto_file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->proto_file_name(), target);
  }

  // optional int32 file_descriptor_set_index = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->file_descriptor_set_index(), target);
  }

  // repeated string catalog_name_path = 4;
  for (int i = 0, n = this->catalog_name_path_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->catalog_name_path(i).data(), static_cast<int>(this->catalog_name_path(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zetasql.ProtoTypeProto.catalog_name_path");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->catalog_name_path(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ProtoTypeProto)
  return target;
}

size_t ProtoTypeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ProtoTypeProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string catalog_name_path = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->catalog_name_path_size());
  for (int i = 0, n = this->catalog_name_path_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->catalog_name_path(i));
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string proto_name = 1;
    if (has_proto_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proto_name());
    }

    // optional string proto_file_name = 2;
    if (has_proto_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proto_file_name());
    }

    // optional int32 file_descriptor_set_index = 3 [default = 0];
    if (has_file_descriptor_set_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_descriptor_set_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoTypeProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.ProtoTypeProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoTypeProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoTypeProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.ProtoTypeProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.ProtoTypeProto)
    MergeFrom(*source);
  }
}

void ProtoTypeProto::MergeFrom(const ProtoTypeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ProtoTypeProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  catalog_name_path_.MergeFrom(from.catalog_name_path_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_proto_name(from.proto_name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_proto_file_name(from.proto_file_name());
    }
    if (cached_has_bits & 0x00000004u) {
      file_descriptor_set_index_ = from.file_descriptor_set_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoTypeProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.ProtoTypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTypeProto::CopyFrom(const ProtoTypeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ProtoTypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTypeProto::IsInitialized() const {
  return true;
}

void ProtoTypeProto::Swap(ProtoTypeProto* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ProtoTypeProto* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ProtoTypeProto::UnsafeArenaSwap(ProtoTypeProto* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ProtoTypeProto::InternalSwap(ProtoTypeProto* other) {
  using std::swap;
  catalog_name_path_.InternalSwap(CastToBase(&other->catalog_name_path_));
  proto_name_.Swap(&other->proto_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  proto_file_name_.Swap(&other->proto_file_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_descriptor_set_index_, other->file_descriptor_set_index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProtoTypeProto::GetMetadata() const {
  protobuf_zetasql_2fpublic_2ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fpublic_2ftype_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EnumTypeProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnumTypeProto::kEnumNameFieldNumber;
const int EnumTypeProto::kEnumFileNameFieldNumber;
const int EnumTypeProto::kFileDescriptorSetIndexFieldNumber;
const int EnumTypeProto::kCatalogNamePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnumTypeProto::EnumTypeProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fpublic_2ftype_2eproto::scc_info_EnumTypeProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.EnumTypeProto)
}
EnumTypeProto::EnumTypeProto(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  catalog_name_path_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fpublic_2ftype_2eproto::scc_info_EnumTypeProto.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zetasql.EnumTypeProto)
}
EnumTypeProto::EnumTypeProto(const EnumTypeProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      catalog_name_path_(from.catalog_name_path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enum_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_enum_name()) {
    enum_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enum_name(),
      GetArenaNoVirtual());
  }
  enum_file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_enum_file_name()) {
    enum_file_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enum_file_name(),
      GetArenaNoVirtual());
  }
  file_descriptor_set_index_ = from.file_descriptor_set_index_;
  // @@protoc_insertion_point(copy_constructor:zetasql.EnumTypeProto)
}

void EnumTypeProto::SharedCtor() {
  enum_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enum_file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_descriptor_set_index_ = 0;
}

EnumTypeProto::~EnumTypeProto() {
  // @@protoc_insertion_point(destructor:zetasql.EnumTypeProto)
  SharedDtor();
}

void EnumTypeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  enum_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enum_file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EnumTypeProto::ArenaDtor(void* object) {
  EnumTypeProto* _this = reinterpret_cast< EnumTypeProto* >(object);
  (void)_this;
}
void EnumTypeProto::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void EnumTypeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EnumTypeProto::descriptor() {
  ::protobuf_zetasql_2fpublic_2ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fpublic_2ftype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnumTypeProto& EnumTypeProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fpublic_2ftype_2eproto::scc_info_EnumTypeProto.base);
  return *internal_default_instance();
}


void EnumTypeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.EnumTypeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  catalog_name_path_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      enum_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      enum_file_name_.ClearNonDefaultToEmpty();
    }
  }
  file_descriptor_set_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EnumTypeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.EnumTypeProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string enum_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enum_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->enum_name().data(), static_cast<int>(this->enum_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zetasql.EnumTypeProto.enum_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string enum_file_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enum_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->enum_file_name().data(), static_cast<int>(this->enum_file_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zetasql.EnumTypeProto.enum_file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 file_descriptor_set_index = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_file_descriptor_set_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_descriptor_set_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string catalog_name_path = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_catalog_name_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->catalog_name_path(this->catalog_name_path_size() - 1).data(),
            static_cast<int>(this->catalog_name_path(this->catalog_name_path_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zetasql.EnumTypeProto.catalog_name_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.EnumTypeProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.EnumTypeProto)
  return false;
#undef DO_
}

void EnumTypeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.EnumTypeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enum_name().data(), static_cast<int>(this->enum_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zetasql.EnumTypeProto.enum_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->enum_name(), output);
  }

  // optional string enum_file_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enum_file_name().data(), static_cast<int>(this->enum_file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zetasql.EnumTypeProto.enum_file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->enum_file_name(), output);
  }

  // optional int32 file_descriptor_set_index = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->file_descriptor_set_index(), output);
  }

  // repeated string catalog_name_path = 4;
  for (int i = 0, n = this->catalog_name_path_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->catalog_name_path(i).data(), static_cast<int>(this->catalog_name_path(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zetasql.EnumTypeProto.catalog_name_path");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->catalog_name_path(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.EnumTypeProto)
}

::google::protobuf::uint8* EnumTypeProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.EnumTypeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enum_name().data(), static_cast<int>(this->enum_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zetasql.EnumTypeProto.enum_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->enum_name(), target);
  }

  // optional string enum_file_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enum_file_name().data(), static_cast<int>(this->enum_file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zetasql.EnumTypeProto.enum_file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->enum_file_name(), target);
  }

  // optional int32 file_descriptor_set_index = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->file_descriptor_set_index(), target);
  }

  // repeated string catalog_name_path = 4;
  for (int i = 0, n = this->catalog_name_path_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->catalog_name_path(i).data(), static_cast<int>(this->catalog_name_path(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zetasql.EnumTypeProto.catalog_name_path");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->catalog_name_path(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.EnumTypeProto)
  return target;
}

size_t EnumTypeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.EnumTypeProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string catalog_name_path = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->catalog_name_path_size());
  for (int i = 0, n = this->catalog_name_path_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->catalog_name_path(i));
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string enum_name = 1;
    if (has_enum_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enum_name());
    }

    // optional string enum_file_name = 2;
    if (has_enum_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enum_file_name());
    }

    // optional int32 file_descriptor_set_index = 3 [default = 0];
    if (has_file_descriptor_set_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_descriptor_set_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnumTypeProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.EnumTypeProto)
  GOOGLE_DCHECK_NE(&from, this);
  const EnumTypeProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnumTypeProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.EnumTypeProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.EnumTypeProto)
    MergeFrom(*source);
  }
}

void EnumTypeProto::MergeFrom(const EnumTypeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.EnumTypeProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  catalog_name_path_.MergeFrom(from.catalog_name_path_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_enum_name(from.enum_name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_enum_file_name(from.enum_file_name());
    }
    if (cached_has_bits & 0x00000004u) {
      file_descriptor_set_index_ = from.file_descriptor_set_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EnumTypeProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.EnumTypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnumTypeProto::CopyFrom(const EnumTypeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.EnumTypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnumTypeProto::IsInitialized() const {
  return true;
}

void EnumTypeProto::Swap(EnumTypeProto* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    EnumTypeProto* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void EnumTypeProto::UnsafeArenaSwap(EnumTypeProto* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void EnumTypeProto::InternalSwap(EnumTypeProto* other) {
  using std::swap;
  catalog_name_path_.InternalSwap(CastToBase(&other->catalog_name_path_));
  enum_name_.Swap(&other->enum_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  enum_file_name_.Swap(&other->enum_file_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_descriptor_set_index_, other->file_descriptor_set_index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EnumTypeProto::GetMetadata() const {
  protobuf_zetasql_2fpublic_2ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fpublic_2ftype_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace zetasql
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::TypeProto* Arena::CreateMaybeMessage< ::zetasql::TypeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::TypeProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ArrayTypeProto* Arena::CreateMaybeMessage< ::zetasql::ArrayTypeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ArrayTypeProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::StructFieldProto* Arena::CreateMaybeMessage< ::zetasql::StructFieldProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::StructFieldProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::StructTypeProto* Arena::CreateMaybeMessage< ::zetasql::StructTypeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::StructTypeProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::ProtoTypeProto* Arena::CreateMaybeMessage< ::zetasql::ProtoTypeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ProtoTypeProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::EnumTypeProto* Arena::CreateMaybeMessage< ::zetasql::EnumTypeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::EnumTypeProto >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
