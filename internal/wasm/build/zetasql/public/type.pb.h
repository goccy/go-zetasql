// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/type.proto

#ifndef PROTOBUF_INCLUDED_zetasql_2fpublic_2ftype_2eproto
#define PROTOBUF_INCLUDED_zetasql_2fpublic_2ftype_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_zetasql_2fpublic_2ftype_2eproto 

namespace protobuf_zetasql_2fpublic_2ftype_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_zetasql_2fpublic_2ftype_2eproto
namespace zetasql {
class ArrayTypeProto;
class ArrayTypeProtoDefaultTypeInternal;
extern ArrayTypeProtoDefaultTypeInternal _ArrayTypeProto_default_instance_;
class EnumTypeProto;
class EnumTypeProtoDefaultTypeInternal;
extern EnumTypeProtoDefaultTypeInternal _EnumTypeProto_default_instance_;
class ProtoTypeProto;
class ProtoTypeProtoDefaultTypeInternal;
extern ProtoTypeProtoDefaultTypeInternal _ProtoTypeProto_default_instance_;
class StructFieldProto;
class StructFieldProtoDefaultTypeInternal;
extern StructFieldProtoDefaultTypeInternal _StructFieldProto_default_instance_;
class StructTypeProto;
class StructTypeProtoDefaultTypeInternal;
extern StructTypeProtoDefaultTypeInternal _StructTypeProto_default_instance_;
class TypeProto;
class TypeProtoDefaultTypeInternal;
extern TypeProtoDefaultTypeInternal _TypeProto_default_instance_;
}  // namespace zetasql
namespace google {
namespace protobuf {
template<> ::zetasql::ArrayTypeProto* Arena::CreateMaybeMessage<::zetasql::ArrayTypeProto>(Arena*);
template<> ::zetasql::EnumTypeProto* Arena::CreateMaybeMessage<::zetasql::EnumTypeProto>(Arena*);
template<> ::zetasql::ProtoTypeProto* Arena::CreateMaybeMessage<::zetasql::ProtoTypeProto>(Arena*);
template<> ::zetasql::StructFieldProto* Arena::CreateMaybeMessage<::zetasql::StructFieldProto>(Arena*);
template<> ::zetasql::StructTypeProto* Arena::CreateMaybeMessage<::zetasql::StructTypeProto>(Arena*);
template<> ::zetasql::TypeProto* Arena::CreateMaybeMessage<::zetasql::TypeProto>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace zetasql {

enum TypeKind {
  __TypeKind__switch_must_have_a_default__ = -1,
  TYPE_UNKNOWN = 0,
  TYPE_INT32 = 1,
  TYPE_INT64 = 2,
  TYPE_UINT32 = 3,
  TYPE_UINT64 = 4,
  TYPE_BOOL = 5,
  TYPE_FLOAT = 6,
  TYPE_DOUBLE = 7,
  TYPE_STRING = 8,
  TYPE_BYTES = 9,
  TYPE_DATE = 10,
  TYPE_TIMESTAMP = 19,
  TYPE_ENUM = 15,
  TYPE_ARRAY = 16,
  TYPE_STRUCT = 17,
  TYPE_PROTO = 18,
  TYPE_TIME = 20,
  TYPE_DATETIME = 21,
  TYPE_GEOGRAPHY = 22,
  TYPE_NUMERIC = 23,
  TYPE_BIGNUMERIC = 24,
  TYPE_EXTENDED = 25,
  TYPE_JSON = 26,
  TYPE_INTERVAL = 27
};
bool TypeKind_IsValid(int value);
const TypeKind TypeKind_MIN = __TypeKind__switch_must_have_a_default__;
const TypeKind TypeKind_MAX = TYPE_INTERVAL;
const int TypeKind_ARRAYSIZE = TypeKind_MAX + 1;

const ::google::protobuf::EnumDescriptor* TypeKind_descriptor();
inline const ::std::string& TypeKind_Name(TypeKind value) {
  return ::google::protobuf::internal::NameOfEnum(
    TypeKind_descriptor(), value);
}
inline bool TypeKind_Parse(
    const ::std::string& name, TypeKind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TypeKind>(
    TypeKind_descriptor(), name, value);
}
// ===================================================================

class TypeProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.TypeProto) */ {
 public:
  TypeProto();
  virtual ~TypeProto();

  TypeProto(const TypeProto& from);

  inline TypeProto& operator=(const TypeProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TypeProto(TypeProto&& from) noexcept
    : TypeProto() {
    *this = ::std::move(from);
  }

  inline TypeProto& operator=(TypeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TypeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TypeProto* internal_default_instance() {
    return reinterpret_cast<const TypeProto*>(
               &_TypeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(TypeProto* other);
  void Swap(TypeProto* other);
  friend void swap(TypeProto& a, TypeProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TypeProto* New() const final {
    return CreateMaybeMessage<TypeProto>(NULL);
  }

  TypeProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TypeProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TypeProto& from);
  void MergeFrom(const TypeProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TypeProto* other);
  protected:
  explicit TypeProto(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.FileDescriptorSet file_descriptor_set = 6;
  int file_descriptor_set_size() const;
  void clear_file_descriptor_set();
  static const int kFileDescriptorSetFieldNumber = 6;
  ::google::protobuf::FileDescriptorSet* mutable_file_descriptor_set(int index);
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::FileDescriptorSet >*
      mutable_file_descriptor_set();
  const ::google::protobuf::FileDescriptorSet& file_descriptor_set(int index) const;
  ::google::protobuf::FileDescriptorSet* add_file_descriptor_set();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::FileDescriptorSet >&
      file_descriptor_set() const;

  // optional string extended_type_name = 7;
  bool has_extended_type_name() const;
  void clear_extended_type_name();
  static const int kExtendedTypeNameFieldNumber = 7;
  const ::std::string& extended_type_name() const;
  void set_extended_type_name(const ::std::string& value);
  #if LANG_CXX11
  void set_extended_type_name(::std::string&& value);
  #endif
  void set_extended_type_name(const char* value);
  void set_extended_type_name(const char* value, size_t size);
  ::std::string* mutable_extended_type_name();
  ::std::string* release_extended_type_name();
  void set_allocated_extended_type_name(::std::string* extended_type_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_extended_type_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_extended_type_name(
      ::std::string* extended_type_name);

  // optional .zetasql.ArrayTypeProto array_type = 2;
  bool has_array_type() const;
  void clear_array_type();
  static const int kArrayTypeFieldNumber = 2;
  private:
  const ::zetasql::ArrayTypeProto& _internal_array_type() const;
  public:
  const ::zetasql::ArrayTypeProto& array_type() const;
  ::zetasql::ArrayTypeProto* release_array_type();
  ::zetasql::ArrayTypeProto* mutable_array_type();
  void set_allocated_array_type(::zetasql::ArrayTypeProto* array_type);
  void unsafe_arena_set_allocated_array_type(
      ::zetasql::ArrayTypeProto* array_type);
  ::zetasql::ArrayTypeProto* unsafe_arena_release_array_type();

  // optional .zetasql.StructTypeProto struct_type = 3;
  bool has_struct_type() const;
  void clear_struct_type();
  static const int kStructTypeFieldNumber = 3;
  private:
  const ::zetasql::StructTypeProto& _internal_struct_type() const;
  public:
  const ::zetasql::StructTypeProto& struct_type() const;
  ::zetasql::StructTypeProto* release_struct_type();
  ::zetasql::StructTypeProto* mutable_struct_type();
  void set_allocated_struct_type(::zetasql::StructTypeProto* struct_type);
  void unsafe_arena_set_allocated_struct_type(
      ::zetasql::StructTypeProto* struct_type);
  ::zetasql::StructTypeProto* unsafe_arena_release_struct_type();

  // optional .zetasql.ProtoTypeProto proto_type = 4;
  bool has_proto_type() const;
  void clear_proto_type();
  static const int kProtoTypeFieldNumber = 4;
  private:
  const ::zetasql::ProtoTypeProto& _internal_proto_type() const;
  public:
  const ::zetasql::ProtoTypeProto& proto_type() const;
  ::zetasql::ProtoTypeProto* release_proto_type();
  ::zetasql::ProtoTypeProto* mutable_proto_type();
  void set_allocated_proto_type(::zetasql::ProtoTypeProto* proto_type);
  void unsafe_arena_set_allocated_proto_type(
      ::zetasql::ProtoTypeProto* proto_type);
  ::zetasql::ProtoTypeProto* unsafe_arena_release_proto_type();

  // optional .zetasql.EnumTypeProto enum_type = 5;
  bool has_enum_type() const;
  void clear_enum_type();
  static const int kEnumTypeFieldNumber = 5;
  private:
  const ::zetasql::EnumTypeProto& _internal_enum_type() const;
  public:
  const ::zetasql::EnumTypeProto& enum_type() const;
  ::zetasql::EnumTypeProto* release_enum_type();
  ::zetasql::EnumTypeProto* mutable_enum_type();
  void set_allocated_enum_type(::zetasql::EnumTypeProto* enum_type);
  void unsafe_arena_set_allocated_enum_type(
      ::zetasql::EnumTypeProto* enum_type);
  ::zetasql::EnumTypeProto* unsafe_arena_release_enum_type();

  // optional .zetasql.TypeKind type_kind = 1;
  bool has_type_kind() const;
  void clear_type_kind();
  static const int kTypeKindFieldNumber = 1;
  ::zetasql::TypeKind type_kind() const;
  void set_type_kind(::zetasql::TypeKind value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TypeProto)
  // @@protoc_insertion_point(class_scope:zetasql.TypeProto)
 private:
  void set_has_type_kind();
  void clear_has_type_kind();
  void set_has_array_type();
  void clear_has_array_type();
  void set_has_struct_type();
  void clear_has_struct_type();
  void set_has_proto_type();
  void clear_has_proto_type();
  void set_has_enum_type();
  void clear_has_enum_type();
  void set_has_extended_type_name();
  void clear_has_extended_type_name();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::FileDescriptorSet > file_descriptor_set_;
  ::google::protobuf::internal::ArenaStringPtr extended_type_name_;
  ::zetasql::ArrayTypeProto* array_type_;
  ::zetasql::StructTypeProto* struct_type_;
  ::zetasql::ProtoTypeProto* proto_type_;
  ::zetasql::EnumTypeProto* enum_type_;
  int type_kind_;
  friend struct ::protobuf_zetasql_2fpublic_2ftype_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ArrayTypeProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ArrayTypeProto) */ {
 public:
  ArrayTypeProto();
  virtual ~ArrayTypeProto();

  ArrayTypeProto(const ArrayTypeProto& from);

  inline ArrayTypeProto& operator=(const ArrayTypeProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArrayTypeProto(ArrayTypeProto&& from) noexcept
    : ArrayTypeProto() {
    *this = ::std::move(from);
  }

  inline ArrayTypeProto& operator=(ArrayTypeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ArrayTypeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArrayTypeProto* internal_default_instance() {
    return reinterpret_cast<const ArrayTypeProto*>(
               &_ArrayTypeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(ArrayTypeProto* other);
  void Swap(ArrayTypeProto* other);
  friend void swap(ArrayTypeProto& a, ArrayTypeProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArrayTypeProto* New() const final {
    return CreateMaybeMessage<ArrayTypeProto>(NULL);
  }

  ArrayTypeProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ArrayTypeProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ArrayTypeProto& from);
  void MergeFrom(const ArrayTypeProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayTypeProto* other);
  protected:
  explicit ArrayTypeProto(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.TypeProto element_type = 1;
  bool has_element_type() const;
  void clear_element_type();
  static const int kElementTypeFieldNumber = 1;
  private:
  const ::zetasql::TypeProto& _internal_element_type() const;
  public:
  const ::zetasql::TypeProto& element_type() const;
  ::zetasql::TypeProto* release_element_type();
  ::zetasql::TypeProto* mutable_element_type();
  void set_allocated_element_type(::zetasql::TypeProto* element_type);
  void unsafe_arena_set_allocated_element_type(
      ::zetasql::TypeProto* element_type);
  ::zetasql::TypeProto* unsafe_arena_release_element_type();

  // @@protoc_insertion_point(class_scope:zetasql.ArrayTypeProto)
 private:
  void set_has_element_type();
  void clear_has_element_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::TypeProto* element_type_;
  friend struct ::protobuf_zetasql_2fpublic_2ftype_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StructFieldProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.StructFieldProto) */ {
 public:
  StructFieldProto();
  virtual ~StructFieldProto();

  StructFieldProto(const StructFieldProto& from);

  inline StructFieldProto& operator=(const StructFieldProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StructFieldProto(StructFieldProto&& from) noexcept
    : StructFieldProto() {
    *this = ::std::move(from);
  }

  inline StructFieldProto& operator=(StructFieldProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const StructFieldProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StructFieldProto* internal_default_instance() {
    return reinterpret_cast<const StructFieldProto*>(
               &_StructFieldProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(StructFieldProto* other);
  void Swap(StructFieldProto* other);
  friend void swap(StructFieldProto& a, StructFieldProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StructFieldProto* New() const final {
    return CreateMaybeMessage<StructFieldProto>(NULL);
  }

  StructFieldProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StructFieldProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StructFieldProto& from);
  void MergeFrom(const StructFieldProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StructFieldProto* other);
  protected:
  explicit StructFieldProto(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string field_name = 1;
  bool has_field_name() const;
  void clear_field_name();
  static const int kFieldNameFieldNumber = 1;
  const ::std::string& field_name() const;
  void set_field_name(const ::std::string& value);
  #if LANG_CXX11
  void set_field_name(::std::string&& value);
  #endif
  void set_field_name(const char* value);
  void set_field_name(const char* value, size_t size);
  ::std::string* mutable_field_name();
  ::std::string* release_field_name();
  void set_allocated_field_name(::std::string* field_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_field_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_field_name(
      ::std::string* field_name);

  // optional .zetasql.TypeProto field_type = 2;
  bool has_field_type() const;
  void clear_field_type();
  static const int kFieldTypeFieldNumber = 2;
  private:
  const ::zetasql::TypeProto& _internal_field_type() const;
  public:
  const ::zetasql::TypeProto& field_type() const;
  ::zetasql::TypeProto* release_field_type();
  ::zetasql::TypeProto* mutable_field_type();
  void set_allocated_field_type(::zetasql::TypeProto* field_type);
  void unsafe_arena_set_allocated_field_type(
      ::zetasql::TypeProto* field_type);
  ::zetasql::TypeProto* unsafe_arena_release_field_type();

  // @@protoc_insertion_point(class_scope:zetasql.StructFieldProto)
 private:
  void set_has_field_name();
  void clear_has_field_name();
  void set_has_field_type();
  void clear_has_field_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr field_name_;
  ::zetasql::TypeProto* field_type_;
  friend struct ::protobuf_zetasql_2fpublic_2ftype_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StructTypeProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.StructTypeProto) */ {
 public:
  StructTypeProto();
  virtual ~StructTypeProto();

  StructTypeProto(const StructTypeProto& from);

  inline StructTypeProto& operator=(const StructTypeProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StructTypeProto(StructTypeProto&& from) noexcept
    : StructTypeProto() {
    *this = ::std::move(from);
  }

  inline StructTypeProto& operator=(StructTypeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const StructTypeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StructTypeProto* internal_default_instance() {
    return reinterpret_cast<const StructTypeProto*>(
               &_StructTypeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(StructTypeProto* other);
  void Swap(StructTypeProto* other);
  friend void swap(StructTypeProto& a, StructTypeProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StructTypeProto* New() const final {
    return CreateMaybeMessage<StructTypeProto>(NULL);
  }

  StructTypeProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StructTypeProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StructTypeProto& from);
  void MergeFrom(const StructTypeProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StructTypeProto* other);
  protected:
  explicit StructTypeProto(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.StructFieldProto field = 1;
  int field_size() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  ::zetasql::StructFieldProto* mutable_field(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::StructFieldProto >*
      mutable_field();
  const ::zetasql::StructFieldProto& field(int index) const;
  ::zetasql::StructFieldProto* add_field();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::StructFieldProto >&
      field() const;

  // @@protoc_insertion_point(class_scope:zetasql.StructTypeProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::StructFieldProto > field_;
  friend struct ::protobuf_zetasql_2fpublic_2ftype_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProtoTypeProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ProtoTypeProto) */ {
 public:
  ProtoTypeProto();
  virtual ~ProtoTypeProto();

  ProtoTypeProto(const ProtoTypeProto& from);

  inline ProtoTypeProto& operator=(const ProtoTypeProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProtoTypeProto(ProtoTypeProto&& from) noexcept
    : ProtoTypeProto() {
    *this = ::std::move(from);
  }

  inline ProtoTypeProto& operator=(ProtoTypeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoTypeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoTypeProto* internal_default_instance() {
    return reinterpret_cast<const ProtoTypeProto*>(
               &_ProtoTypeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(ProtoTypeProto* other);
  void Swap(ProtoTypeProto* other);
  friend void swap(ProtoTypeProto& a, ProtoTypeProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProtoTypeProto* New() const final {
    return CreateMaybeMessage<ProtoTypeProto>(NULL);
  }

  ProtoTypeProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProtoTypeProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProtoTypeProto& from);
  void MergeFrom(const ProtoTypeProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoTypeProto* other);
  protected:
  explicit ProtoTypeProto(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string catalog_name_path = 4;
  int catalog_name_path_size() const;
  void clear_catalog_name_path();
  static const int kCatalogNamePathFieldNumber = 4;
  const ::std::string& catalog_name_path(int index) const;
  ::std::string* mutable_catalog_name_path(int index);
  void set_catalog_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_catalog_name_path(int index, ::std::string&& value);
  #endif
  void set_catalog_name_path(int index, const char* value);
  void set_catalog_name_path(int index, const char* value, size_t size);
  ::std::string* add_catalog_name_path();
  void add_catalog_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_catalog_name_path(::std::string&& value);
  #endif
  void add_catalog_name_path(const char* value);
  void add_catalog_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& catalog_name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_catalog_name_path();

  // optional string proto_name = 1;
  bool has_proto_name() const;
  void clear_proto_name();
  static const int kProtoNameFieldNumber = 1;
  const ::std::string& proto_name() const;
  void set_proto_name(const ::std::string& value);
  #if LANG_CXX11
  void set_proto_name(::std::string&& value);
  #endif
  void set_proto_name(const char* value);
  void set_proto_name(const char* value, size_t size);
  ::std::string* mutable_proto_name();
  ::std::string* release_proto_name();
  void set_allocated_proto_name(::std::string* proto_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_proto_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_proto_name(
      ::std::string* proto_name);

  // optional string proto_file_name = 2;
  bool has_proto_file_name() const;
  void clear_proto_file_name();
  static const int kProtoFileNameFieldNumber = 2;
  const ::std::string& proto_file_name() const;
  void set_proto_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_proto_file_name(::std::string&& value);
  #endif
  void set_proto_file_name(const char* value);
  void set_proto_file_name(const char* value, size_t size);
  ::std::string* mutable_proto_file_name();
  ::std::string* release_proto_file_name();
  void set_allocated_proto_file_name(::std::string* proto_file_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_proto_file_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_proto_file_name(
      ::std::string* proto_file_name);

  // optional int32 file_descriptor_set_index = 3 [default = 0];
  bool has_file_descriptor_set_index() const;
  void clear_file_descriptor_set_index();
  static const int kFileDescriptorSetIndexFieldNumber = 3;
  ::google::protobuf::int32 file_descriptor_set_index() const;
  void set_file_descriptor_set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zetasql.ProtoTypeProto)
 private:
  void set_has_proto_name();
  void clear_has_proto_name();
  void set_has_proto_file_name();
  void clear_has_proto_file_name();
  void set_has_file_descriptor_set_index();
  void clear_has_file_descriptor_set_index();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> catalog_name_path_;
  ::google::protobuf::internal::ArenaStringPtr proto_name_;
  ::google::protobuf::internal::ArenaStringPtr proto_file_name_;
  ::google::protobuf::int32 file_descriptor_set_index_;
  friend struct ::protobuf_zetasql_2fpublic_2ftype_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EnumTypeProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.EnumTypeProto) */ {
 public:
  EnumTypeProto();
  virtual ~EnumTypeProto();

  EnumTypeProto(const EnumTypeProto& from);

  inline EnumTypeProto& operator=(const EnumTypeProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnumTypeProto(EnumTypeProto&& from) noexcept
    : EnumTypeProto() {
    *this = ::std::move(from);
  }

  inline EnumTypeProto& operator=(EnumTypeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnumTypeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnumTypeProto* internal_default_instance() {
    return reinterpret_cast<const EnumTypeProto*>(
               &_EnumTypeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(EnumTypeProto* other);
  void Swap(EnumTypeProto* other);
  friend void swap(EnumTypeProto& a, EnumTypeProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnumTypeProto* New() const final {
    return CreateMaybeMessage<EnumTypeProto>(NULL);
  }

  EnumTypeProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EnumTypeProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EnumTypeProto& from);
  void MergeFrom(const EnumTypeProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnumTypeProto* other);
  protected:
  explicit EnumTypeProto(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string catalog_name_path = 4;
  int catalog_name_path_size() const;
  void clear_catalog_name_path();
  static const int kCatalogNamePathFieldNumber = 4;
  const ::std::string& catalog_name_path(int index) const;
  ::std::string* mutable_catalog_name_path(int index);
  void set_catalog_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_catalog_name_path(int index, ::std::string&& value);
  #endif
  void set_catalog_name_path(int index, const char* value);
  void set_catalog_name_path(int index, const char* value, size_t size);
  ::std::string* add_catalog_name_path();
  void add_catalog_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_catalog_name_path(::std::string&& value);
  #endif
  void add_catalog_name_path(const char* value);
  void add_catalog_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& catalog_name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_catalog_name_path();

  // optional string enum_name = 1;
  bool has_enum_name() const;
  void clear_enum_name();
  static const int kEnumNameFieldNumber = 1;
  const ::std::string& enum_name() const;
  void set_enum_name(const ::std::string& value);
  #if LANG_CXX11
  void set_enum_name(::std::string&& value);
  #endif
  void set_enum_name(const char* value);
  void set_enum_name(const char* value, size_t size);
  ::std::string* mutable_enum_name();
  ::std::string* release_enum_name();
  void set_allocated_enum_name(::std::string* enum_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_enum_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_enum_name(
      ::std::string* enum_name);

  // optional string enum_file_name = 2;
  bool has_enum_file_name() const;
  void clear_enum_file_name();
  static const int kEnumFileNameFieldNumber = 2;
  const ::std::string& enum_file_name() const;
  void set_enum_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_enum_file_name(::std::string&& value);
  #endif
  void set_enum_file_name(const char* value);
  void set_enum_file_name(const char* value, size_t size);
  ::std::string* mutable_enum_file_name();
  ::std::string* release_enum_file_name();
  void set_allocated_enum_file_name(::std::string* enum_file_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_enum_file_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_enum_file_name(
      ::std::string* enum_file_name);

  // optional int32 file_descriptor_set_index = 3 [default = 0];
  bool has_file_descriptor_set_index() const;
  void clear_file_descriptor_set_index();
  static const int kFileDescriptorSetIndexFieldNumber = 3;
  ::google::protobuf::int32 file_descriptor_set_index() const;
  void set_file_descriptor_set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zetasql.EnumTypeProto)
 private:
  void set_has_enum_name();
  void clear_has_enum_name();
  void set_has_enum_file_name();
  void clear_has_enum_file_name();
  void set_has_file_descriptor_set_index();
  void clear_has_file_descriptor_set_index();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> catalog_name_path_;
  ::google::protobuf::internal::ArenaStringPtr enum_name_;
  ::google::protobuf::internal::ArenaStringPtr enum_file_name_;
  ::google::protobuf::int32 file_descriptor_set_index_;
  friend struct ::protobuf_zetasql_2fpublic_2ftype_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TypeProto

// optional .zetasql.TypeKind type_kind = 1;
inline bool TypeProto::has_type_kind() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TypeProto::set_has_type_kind() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TypeProto::clear_has_type_kind() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TypeProto::clear_type_kind() {
  type_kind_ = -1;
  clear_has_type_kind();
}
inline ::zetasql::TypeKind TypeProto::type_kind() const {
  // @@protoc_insertion_point(field_get:zetasql.TypeProto.type_kind)
  return static_cast< ::zetasql::TypeKind >(type_kind_);
}
inline void TypeProto::set_type_kind(::zetasql::TypeKind value) {
  assert(::zetasql::TypeKind_IsValid(value));
  set_has_type_kind();
  type_kind_ = value;
  // @@protoc_insertion_point(field_set:zetasql.TypeProto.type_kind)
}

// optional .zetasql.ArrayTypeProto array_type = 2;
inline bool TypeProto::has_array_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TypeProto::set_has_array_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TypeProto::clear_has_array_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TypeProto::clear_array_type() {
  if (array_type_ != NULL) array_type_->Clear();
  clear_has_array_type();
}
inline const ::zetasql::ArrayTypeProto& TypeProto::_internal_array_type() const {
  return *array_type_;
}
inline const ::zetasql::ArrayTypeProto& TypeProto::array_type() const {
  const ::zetasql::ArrayTypeProto* p = array_type_;
  // @@protoc_insertion_point(field_get:zetasql.TypeProto.array_type)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ArrayTypeProto*>(
      &::zetasql::_ArrayTypeProto_default_instance_);
}
inline ::zetasql::ArrayTypeProto* TypeProto::release_array_type() {
  // @@protoc_insertion_point(field_release:zetasql.TypeProto.array_type)
  clear_has_array_type();
  ::zetasql::ArrayTypeProto* temp = array_type_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  array_type_ = NULL;
  return temp;
}
inline ::zetasql::ArrayTypeProto* TypeProto::unsafe_arena_release_array_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.TypeProto.array_type)
  clear_has_array_type();
  ::zetasql::ArrayTypeProto* temp = array_type_;
  array_type_ = NULL;
  return temp;
}
inline ::zetasql::ArrayTypeProto* TypeProto::mutable_array_type() {
  set_has_array_type();
  if (array_type_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ArrayTypeProto>(GetArenaNoVirtual());
    array_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.TypeProto.array_type)
  return array_type_;
}
inline void TypeProto::set_allocated_array_type(::zetasql::ArrayTypeProto* array_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete array_type_;
  }
  if (array_type) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(array_type);
    if (message_arena != submessage_arena) {
      array_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, array_type, submessage_arena);
    }
    set_has_array_type();
  } else {
    clear_has_array_type();
  }
  array_type_ = array_type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.TypeProto.array_type)
}

// optional .zetasql.StructTypeProto struct_type = 3;
inline bool TypeProto::has_struct_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TypeProto::set_has_struct_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TypeProto::clear_has_struct_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TypeProto::clear_struct_type() {
  if (struct_type_ != NULL) struct_type_->Clear();
  clear_has_struct_type();
}
inline const ::zetasql::StructTypeProto& TypeProto::_internal_struct_type() const {
  return *struct_type_;
}
inline const ::zetasql::StructTypeProto& TypeProto::struct_type() const {
  const ::zetasql::StructTypeProto* p = struct_type_;
  // @@protoc_insertion_point(field_get:zetasql.TypeProto.struct_type)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::StructTypeProto*>(
      &::zetasql::_StructTypeProto_default_instance_);
}
inline ::zetasql::StructTypeProto* TypeProto::release_struct_type() {
  // @@protoc_insertion_point(field_release:zetasql.TypeProto.struct_type)
  clear_has_struct_type();
  ::zetasql::StructTypeProto* temp = struct_type_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  struct_type_ = NULL;
  return temp;
}
inline ::zetasql::StructTypeProto* TypeProto::unsafe_arena_release_struct_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.TypeProto.struct_type)
  clear_has_struct_type();
  ::zetasql::StructTypeProto* temp = struct_type_;
  struct_type_ = NULL;
  return temp;
}
inline ::zetasql::StructTypeProto* TypeProto::mutable_struct_type() {
  set_has_struct_type();
  if (struct_type_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::StructTypeProto>(GetArenaNoVirtual());
    struct_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.TypeProto.struct_type)
  return struct_type_;
}
inline void TypeProto::set_allocated_struct_type(::zetasql::StructTypeProto* struct_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete struct_type_;
  }
  if (struct_type) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(struct_type);
    if (message_arena != submessage_arena) {
      struct_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, struct_type, submessage_arena);
    }
    set_has_struct_type();
  } else {
    clear_has_struct_type();
  }
  struct_type_ = struct_type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.TypeProto.struct_type)
}

// optional .zetasql.ProtoTypeProto proto_type = 4;
inline bool TypeProto::has_proto_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TypeProto::set_has_proto_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TypeProto::clear_has_proto_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TypeProto::clear_proto_type() {
  if (proto_type_ != NULL) proto_type_->Clear();
  clear_has_proto_type();
}
inline const ::zetasql::ProtoTypeProto& TypeProto::_internal_proto_type() const {
  return *proto_type_;
}
inline const ::zetasql::ProtoTypeProto& TypeProto::proto_type() const {
  const ::zetasql::ProtoTypeProto* p = proto_type_;
  // @@protoc_insertion_point(field_get:zetasql.TypeProto.proto_type)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ProtoTypeProto*>(
      &::zetasql::_ProtoTypeProto_default_instance_);
}
inline ::zetasql::ProtoTypeProto* TypeProto::release_proto_type() {
  // @@protoc_insertion_point(field_release:zetasql.TypeProto.proto_type)
  clear_has_proto_type();
  ::zetasql::ProtoTypeProto* temp = proto_type_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  proto_type_ = NULL;
  return temp;
}
inline ::zetasql::ProtoTypeProto* TypeProto::unsafe_arena_release_proto_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.TypeProto.proto_type)
  clear_has_proto_type();
  ::zetasql::ProtoTypeProto* temp = proto_type_;
  proto_type_ = NULL;
  return temp;
}
inline ::zetasql::ProtoTypeProto* TypeProto::mutable_proto_type() {
  set_has_proto_type();
  if (proto_type_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ProtoTypeProto>(GetArenaNoVirtual());
    proto_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.TypeProto.proto_type)
  return proto_type_;
}
inline void TypeProto::set_allocated_proto_type(::zetasql::ProtoTypeProto* proto_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete proto_type_;
  }
  if (proto_type) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(proto_type);
    if (message_arena != submessage_arena) {
      proto_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, proto_type, submessage_arena);
    }
    set_has_proto_type();
  } else {
    clear_has_proto_type();
  }
  proto_type_ = proto_type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.TypeProto.proto_type)
}

// optional .zetasql.EnumTypeProto enum_type = 5;
inline bool TypeProto::has_enum_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TypeProto::set_has_enum_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TypeProto::clear_has_enum_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TypeProto::clear_enum_type() {
  if (enum_type_ != NULL) enum_type_->Clear();
  clear_has_enum_type();
}
inline const ::zetasql::EnumTypeProto& TypeProto::_internal_enum_type() const {
  return *enum_type_;
}
inline const ::zetasql::EnumTypeProto& TypeProto::enum_type() const {
  const ::zetasql::EnumTypeProto* p = enum_type_;
  // @@protoc_insertion_point(field_get:zetasql.TypeProto.enum_type)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::EnumTypeProto*>(
      &::zetasql::_EnumTypeProto_default_instance_);
}
inline ::zetasql::EnumTypeProto* TypeProto::release_enum_type() {
  // @@protoc_insertion_point(field_release:zetasql.TypeProto.enum_type)
  clear_has_enum_type();
  ::zetasql::EnumTypeProto* temp = enum_type_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  enum_type_ = NULL;
  return temp;
}
inline ::zetasql::EnumTypeProto* TypeProto::unsafe_arena_release_enum_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.TypeProto.enum_type)
  clear_has_enum_type();
  ::zetasql::EnumTypeProto* temp = enum_type_;
  enum_type_ = NULL;
  return temp;
}
inline ::zetasql::EnumTypeProto* TypeProto::mutable_enum_type() {
  set_has_enum_type();
  if (enum_type_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::EnumTypeProto>(GetArenaNoVirtual());
    enum_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.TypeProto.enum_type)
  return enum_type_;
}
inline void TypeProto::set_allocated_enum_type(::zetasql::EnumTypeProto* enum_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete enum_type_;
  }
  if (enum_type) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(enum_type);
    if (message_arena != submessage_arena) {
      enum_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, enum_type, submessage_arena);
    }
    set_has_enum_type();
  } else {
    clear_has_enum_type();
  }
  enum_type_ = enum_type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.TypeProto.enum_type)
}

// repeated .google.protobuf.FileDescriptorSet file_descriptor_set = 6;
inline int TypeProto::file_descriptor_set_size() const {
  return file_descriptor_set_.size();
}
inline ::google::protobuf::FileDescriptorSet* TypeProto::mutable_file_descriptor_set(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.TypeProto.file_descriptor_set)
  return file_descriptor_set_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::FileDescriptorSet >*
TypeProto::mutable_file_descriptor_set() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.TypeProto.file_descriptor_set)
  return &file_descriptor_set_;
}
inline const ::google::protobuf::FileDescriptorSet& TypeProto::file_descriptor_set(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.TypeProto.file_descriptor_set)
  return file_descriptor_set_.Get(index);
}
inline ::google::protobuf::FileDescriptorSet* TypeProto::add_file_descriptor_set() {
  // @@protoc_insertion_point(field_add:zetasql.TypeProto.file_descriptor_set)
  return file_descriptor_set_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::FileDescriptorSet >&
TypeProto::file_descriptor_set() const {
  // @@protoc_insertion_point(field_list:zetasql.TypeProto.file_descriptor_set)
  return file_descriptor_set_;
}

// optional string extended_type_name = 7;
inline bool TypeProto::has_extended_type_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TypeProto::set_has_extended_type_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TypeProto::clear_has_extended_type_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TypeProto::clear_extended_type_name() {
  extended_type_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_extended_type_name();
}
inline const ::std::string& TypeProto::extended_type_name() const {
  // @@protoc_insertion_point(field_get:zetasql.TypeProto.extended_type_name)
  return extended_type_name_.Get();
}
inline void TypeProto::set_extended_type_name(const ::std::string& value) {
  set_has_extended_type_name();
  extended_type_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:zetasql.TypeProto.extended_type_name)
}
#if LANG_CXX11
inline void TypeProto::set_extended_type_name(::std::string&& value) {
  set_has_extended_type_name();
  extended_type_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:zetasql.TypeProto.extended_type_name)
}
#endif
inline void TypeProto::set_extended_type_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extended_type_name();
  extended_type_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:zetasql.TypeProto.extended_type_name)
}
inline void TypeProto::set_extended_type_name(const char* value,
    size_t size) {
  set_has_extended_type_name();
  extended_type_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:zetasql.TypeProto.extended_type_name)
}
inline ::std::string* TypeProto::mutable_extended_type_name() {
  set_has_extended_type_name();
  // @@protoc_insertion_point(field_mutable:zetasql.TypeProto.extended_type_name)
  return extended_type_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* TypeProto::release_extended_type_name() {
  // @@protoc_insertion_point(field_release:zetasql.TypeProto.extended_type_name)
  if (!has_extended_type_name()) {
    return NULL;
  }
  clear_has_extended_type_name();
  return extended_type_name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void TypeProto::set_allocated_extended_type_name(::std::string* extended_type_name) {
  if (extended_type_name != NULL) {
    set_has_extended_type_name();
  } else {
    clear_has_extended_type_name();
  }
  extended_type_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extended_type_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:zetasql.TypeProto.extended_type_name)
}
inline ::std::string* TypeProto::unsafe_arena_release_extended_type_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.TypeProto.extended_type_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_extended_type_name();
  return extended_type_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void TypeProto::unsafe_arena_set_allocated_extended_type_name(
    ::std::string* extended_type_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (extended_type_name != NULL) {
    set_has_extended_type_name();
  } else {
    clear_has_extended_type_name();
  }
  extended_type_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      extended_type_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TypeProto.extended_type_name)
}

// -------------------------------------------------------------------

// ArrayTypeProto

// optional .zetasql.TypeProto element_type = 1;
inline bool ArrayTypeProto::has_element_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArrayTypeProto::set_has_element_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArrayTypeProto::clear_has_element_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArrayTypeProto::clear_element_type() {
  if (element_type_ != NULL) element_type_->Clear();
  clear_has_element_type();
}
inline const ::zetasql::TypeProto& ArrayTypeProto::_internal_element_type() const {
  return *element_type_;
}
inline const ::zetasql::TypeProto& ArrayTypeProto::element_type() const {
  const ::zetasql::TypeProto* p = element_type_;
  // @@protoc_insertion_point(field_get:zetasql.ArrayTypeProto.element_type)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TypeProto*>(
      &::zetasql::_TypeProto_default_instance_);
}
inline ::zetasql::TypeProto* ArrayTypeProto::release_element_type() {
  // @@protoc_insertion_point(field_release:zetasql.ArrayTypeProto.element_type)
  clear_has_element_type();
  ::zetasql::TypeProto* temp = element_type_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  element_type_ = NULL;
  return temp;
}
inline ::zetasql::TypeProto* ArrayTypeProto::unsafe_arena_release_element_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.ArrayTypeProto.element_type)
  clear_has_element_type();
  ::zetasql::TypeProto* temp = element_type_;
  element_type_ = NULL;
  return temp;
}
inline ::zetasql::TypeProto* ArrayTypeProto::mutable_element_type() {
  set_has_element_type();
  if (element_type_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaNoVirtual());
    element_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ArrayTypeProto.element_type)
  return element_type_;
}
inline void ArrayTypeProto::set_allocated_element_type(::zetasql::TypeProto* element_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete element_type_;
  }
  if (element_type) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(element_type);
    if (message_arena != submessage_arena) {
      element_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, element_type, submessage_arena);
    }
    set_has_element_type();
  } else {
    clear_has_element_type();
  }
  element_type_ = element_type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ArrayTypeProto.element_type)
}

// -------------------------------------------------------------------

// StructFieldProto

// optional string field_name = 1;
inline bool StructFieldProto::has_field_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StructFieldProto::set_has_field_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StructFieldProto::clear_has_field_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StructFieldProto::clear_field_name() {
  field_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_field_name();
}
inline const ::std::string& StructFieldProto::field_name() const {
  // @@protoc_insertion_point(field_get:zetasql.StructFieldProto.field_name)
  return field_name_.Get();
}
inline void StructFieldProto::set_field_name(const ::std::string& value) {
  set_has_field_name();
  field_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:zetasql.StructFieldProto.field_name)
}
#if LANG_CXX11
inline void StructFieldProto::set_field_name(::std::string&& value) {
  set_has_field_name();
  field_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:zetasql.StructFieldProto.field_name)
}
#endif
inline void StructFieldProto::set_field_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_field_name();
  field_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:zetasql.StructFieldProto.field_name)
}
inline void StructFieldProto::set_field_name(const char* value,
    size_t size) {
  set_has_field_name();
  field_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:zetasql.StructFieldProto.field_name)
}
inline ::std::string* StructFieldProto::mutable_field_name() {
  set_has_field_name();
  // @@protoc_insertion_point(field_mutable:zetasql.StructFieldProto.field_name)
  return field_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StructFieldProto::release_field_name() {
  // @@protoc_insertion_point(field_release:zetasql.StructFieldProto.field_name)
  if (!has_field_name()) {
    return NULL;
  }
  clear_has_field_name();
  return field_name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void StructFieldProto::set_allocated_field_name(::std::string* field_name) {
  if (field_name != NULL) {
    set_has_field_name();
  } else {
    clear_has_field_name();
  }
  field_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:zetasql.StructFieldProto.field_name)
}
inline ::std::string* StructFieldProto::unsafe_arena_release_field_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.StructFieldProto.field_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_field_name();
  return field_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StructFieldProto::unsafe_arena_set_allocated_field_name(
    ::std::string* field_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (field_name != NULL) {
    set_has_field_name();
  } else {
    clear_has_field_name();
  }
  field_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      field_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.StructFieldProto.field_name)
}

// optional .zetasql.TypeProto field_type = 2;
inline bool StructFieldProto::has_field_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StructFieldProto::set_has_field_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StructFieldProto::clear_has_field_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StructFieldProto::clear_field_type() {
  if (field_type_ != NULL) field_type_->Clear();
  clear_has_field_type();
}
inline const ::zetasql::TypeProto& StructFieldProto::_internal_field_type() const {
  return *field_type_;
}
inline const ::zetasql::TypeProto& StructFieldProto::field_type() const {
  const ::zetasql::TypeProto* p = field_type_;
  // @@protoc_insertion_point(field_get:zetasql.StructFieldProto.field_type)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TypeProto*>(
      &::zetasql::_TypeProto_default_instance_);
}
inline ::zetasql::TypeProto* StructFieldProto::release_field_type() {
  // @@protoc_insertion_point(field_release:zetasql.StructFieldProto.field_type)
  clear_has_field_type();
  ::zetasql::TypeProto* temp = field_type_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  field_type_ = NULL;
  return temp;
}
inline ::zetasql::TypeProto* StructFieldProto::unsafe_arena_release_field_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.StructFieldProto.field_type)
  clear_has_field_type();
  ::zetasql::TypeProto* temp = field_type_;
  field_type_ = NULL;
  return temp;
}
inline ::zetasql::TypeProto* StructFieldProto::mutable_field_type() {
  set_has_field_type();
  if (field_type_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaNoVirtual());
    field_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.StructFieldProto.field_type)
  return field_type_;
}
inline void StructFieldProto::set_allocated_field_type(::zetasql::TypeProto* field_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete field_type_;
  }
  if (field_type) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(field_type);
    if (message_arena != submessage_arena) {
      field_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, field_type, submessage_arena);
    }
    set_has_field_type();
  } else {
    clear_has_field_type();
  }
  field_type_ = field_type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.StructFieldProto.field_type)
}

// -------------------------------------------------------------------

// StructTypeProto

// repeated .zetasql.StructFieldProto field = 1;
inline int StructTypeProto::field_size() const {
  return field_.size();
}
inline void StructTypeProto::clear_field() {
  field_.Clear();
}
inline ::zetasql::StructFieldProto* StructTypeProto::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.StructTypeProto.field)
  return field_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::StructFieldProto >*
StructTypeProto::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.StructTypeProto.field)
  return &field_;
}
inline const ::zetasql::StructFieldProto& StructTypeProto::field(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.StructTypeProto.field)
  return field_.Get(index);
}
inline ::zetasql::StructFieldProto* StructTypeProto::add_field() {
  // @@protoc_insertion_point(field_add:zetasql.StructTypeProto.field)
  return field_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::StructFieldProto >&
StructTypeProto::field() const {
  // @@protoc_insertion_point(field_list:zetasql.StructTypeProto.field)
  return field_;
}

// -------------------------------------------------------------------

// ProtoTypeProto

// optional string proto_name = 1;
inline bool ProtoTypeProto::has_proto_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoTypeProto::set_has_proto_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoTypeProto::clear_has_proto_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoTypeProto::clear_proto_name() {
  proto_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_proto_name();
}
inline const ::std::string& ProtoTypeProto::proto_name() const {
  // @@protoc_insertion_point(field_get:zetasql.ProtoTypeProto.proto_name)
  return proto_name_.Get();
}
inline void ProtoTypeProto::set_proto_name(const ::std::string& value) {
  set_has_proto_name();
  proto_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:zetasql.ProtoTypeProto.proto_name)
}
#if LANG_CXX11
inline void ProtoTypeProto::set_proto_name(::std::string&& value) {
  set_has_proto_name();
  proto_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ProtoTypeProto.proto_name)
}
#endif
inline void ProtoTypeProto::set_proto_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_proto_name();
  proto_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:zetasql.ProtoTypeProto.proto_name)
}
inline void ProtoTypeProto::set_proto_name(const char* value,
    size_t size) {
  set_has_proto_name();
  proto_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:zetasql.ProtoTypeProto.proto_name)
}
inline ::std::string* ProtoTypeProto::mutable_proto_name() {
  set_has_proto_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ProtoTypeProto.proto_name)
  return proto_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ProtoTypeProto::release_proto_name() {
  // @@protoc_insertion_point(field_release:zetasql.ProtoTypeProto.proto_name)
  if (!has_proto_name()) {
    return NULL;
  }
  clear_has_proto_name();
  return proto_name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ProtoTypeProto::set_allocated_proto_name(::std::string* proto_name) {
  if (proto_name != NULL) {
    set_has_proto_name();
  } else {
    clear_has_proto_name();
  }
  proto_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proto_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:zetasql.ProtoTypeProto.proto_name)
}
inline ::std::string* ProtoTypeProto::unsafe_arena_release_proto_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.ProtoTypeProto.proto_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_proto_name();
  return proto_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ProtoTypeProto::unsafe_arena_set_allocated_proto_name(
    ::std::string* proto_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (proto_name != NULL) {
    set_has_proto_name();
  } else {
    clear_has_proto_name();
  }
  proto_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      proto_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.ProtoTypeProto.proto_name)
}

// optional string proto_file_name = 2;
inline bool ProtoTypeProto::has_proto_file_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoTypeProto::set_has_proto_file_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoTypeProto::clear_has_proto_file_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoTypeProto::clear_proto_file_name() {
  proto_file_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_proto_file_name();
}
inline const ::std::string& ProtoTypeProto::proto_file_name() const {
  // @@protoc_insertion_point(field_get:zetasql.ProtoTypeProto.proto_file_name)
  return proto_file_name_.Get();
}
inline void ProtoTypeProto::set_proto_file_name(const ::std::string& value) {
  set_has_proto_file_name();
  proto_file_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:zetasql.ProtoTypeProto.proto_file_name)
}
#if LANG_CXX11
inline void ProtoTypeProto::set_proto_file_name(::std::string&& value) {
  set_has_proto_file_name();
  proto_file_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ProtoTypeProto.proto_file_name)
}
#endif
inline void ProtoTypeProto::set_proto_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_proto_file_name();
  proto_file_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:zetasql.ProtoTypeProto.proto_file_name)
}
inline void ProtoTypeProto::set_proto_file_name(const char* value,
    size_t size) {
  set_has_proto_file_name();
  proto_file_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:zetasql.ProtoTypeProto.proto_file_name)
}
inline ::std::string* ProtoTypeProto::mutable_proto_file_name() {
  set_has_proto_file_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ProtoTypeProto.proto_file_name)
  return proto_file_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ProtoTypeProto::release_proto_file_name() {
  // @@protoc_insertion_point(field_release:zetasql.ProtoTypeProto.proto_file_name)
  if (!has_proto_file_name()) {
    return NULL;
  }
  clear_has_proto_file_name();
  return proto_file_name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ProtoTypeProto::set_allocated_proto_file_name(::std::string* proto_file_name) {
  if (proto_file_name != NULL) {
    set_has_proto_file_name();
  } else {
    clear_has_proto_file_name();
  }
  proto_file_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proto_file_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:zetasql.ProtoTypeProto.proto_file_name)
}
inline ::std::string* ProtoTypeProto::unsafe_arena_release_proto_file_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.ProtoTypeProto.proto_file_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_proto_file_name();
  return proto_file_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ProtoTypeProto::unsafe_arena_set_allocated_proto_file_name(
    ::std::string* proto_file_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (proto_file_name != NULL) {
    set_has_proto_file_name();
  } else {
    clear_has_proto_file_name();
  }
  proto_file_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      proto_file_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.ProtoTypeProto.proto_file_name)
}

// optional int32 file_descriptor_set_index = 3 [default = 0];
inline bool ProtoTypeProto::has_file_descriptor_set_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoTypeProto::set_has_file_descriptor_set_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoTypeProto::clear_has_file_descriptor_set_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoTypeProto::clear_file_descriptor_set_index() {
  file_descriptor_set_index_ = 0;
  clear_has_file_descriptor_set_index();
}
inline ::google::protobuf::int32 ProtoTypeProto::file_descriptor_set_index() const {
  // @@protoc_insertion_point(field_get:zetasql.ProtoTypeProto.file_descriptor_set_index)
  return file_descriptor_set_index_;
}
inline void ProtoTypeProto::set_file_descriptor_set_index(::google::protobuf::int32 value) {
  set_has_file_descriptor_set_index();
  file_descriptor_set_index_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ProtoTypeProto.file_descriptor_set_index)
}

// repeated string catalog_name_path = 4;
inline int ProtoTypeProto::catalog_name_path_size() const {
  return catalog_name_path_.size();
}
inline void ProtoTypeProto::clear_catalog_name_path() {
  catalog_name_path_.Clear();
}
inline const ::std::string& ProtoTypeProto::catalog_name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ProtoTypeProto.catalog_name_path)
  return catalog_name_path_.Get(index);
}
inline ::std::string* ProtoTypeProto::mutable_catalog_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ProtoTypeProto.catalog_name_path)
  return catalog_name_path_.Mutable(index);
}
inline void ProtoTypeProto::set_catalog_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ProtoTypeProto.catalog_name_path)
  catalog_name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ProtoTypeProto::set_catalog_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ProtoTypeProto.catalog_name_path)
  catalog_name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ProtoTypeProto::set_catalog_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  catalog_name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ProtoTypeProto.catalog_name_path)
}
inline void ProtoTypeProto::set_catalog_name_path(int index, const char* value, size_t size) {
  catalog_name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ProtoTypeProto.catalog_name_path)
}
inline ::std::string* ProtoTypeProto::add_catalog_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ProtoTypeProto.catalog_name_path)
  return catalog_name_path_.Add();
}
inline void ProtoTypeProto::add_catalog_name_path(const ::std::string& value) {
  catalog_name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ProtoTypeProto.catalog_name_path)
}
#if LANG_CXX11
inline void ProtoTypeProto::add_catalog_name_path(::std::string&& value) {
  catalog_name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ProtoTypeProto.catalog_name_path)
}
#endif
inline void ProtoTypeProto::add_catalog_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  catalog_name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ProtoTypeProto.catalog_name_path)
}
inline void ProtoTypeProto::add_catalog_name_path(const char* value, size_t size) {
  catalog_name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ProtoTypeProto.catalog_name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProtoTypeProto::catalog_name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ProtoTypeProto.catalog_name_path)
  return catalog_name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProtoTypeProto::mutable_catalog_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ProtoTypeProto.catalog_name_path)
  return &catalog_name_path_;
}

// -------------------------------------------------------------------

// EnumTypeProto

// optional string enum_name = 1;
inline bool EnumTypeProto::has_enum_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnumTypeProto::set_has_enum_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnumTypeProto::clear_has_enum_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnumTypeProto::clear_enum_name() {
  enum_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_enum_name();
}
inline const ::std::string& EnumTypeProto::enum_name() const {
  // @@protoc_insertion_point(field_get:zetasql.EnumTypeProto.enum_name)
  return enum_name_.Get();
}
inline void EnumTypeProto::set_enum_name(const ::std::string& value) {
  set_has_enum_name();
  enum_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:zetasql.EnumTypeProto.enum_name)
}
#if LANG_CXX11
inline void EnumTypeProto::set_enum_name(::std::string&& value) {
  set_has_enum_name();
  enum_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:zetasql.EnumTypeProto.enum_name)
}
#endif
inline void EnumTypeProto::set_enum_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_enum_name();
  enum_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:zetasql.EnumTypeProto.enum_name)
}
inline void EnumTypeProto::set_enum_name(const char* value,
    size_t size) {
  set_has_enum_name();
  enum_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:zetasql.EnumTypeProto.enum_name)
}
inline ::std::string* EnumTypeProto::mutable_enum_name() {
  set_has_enum_name();
  // @@protoc_insertion_point(field_mutable:zetasql.EnumTypeProto.enum_name)
  return enum_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* EnumTypeProto::release_enum_name() {
  // @@protoc_insertion_point(field_release:zetasql.EnumTypeProto.enum_name)
  if (!has_enum_name()) {
    return NULL;
  }
  clear_has_enum_name();
  return enum_name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void EnumTypeProto::set_allocated_enum_name(::std::string* enum_name) {
  if (enum_name != NULL) {
    set_has_enum_name();
  } else {
    clear_has_enum_name();
  }
  enum_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enum_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:zetasql.EnumTypeProto.enum_name)
}
inline ::std::string* EnumTypeProto::unsafe_arena_release_enum_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.EnumTypeProto.enum_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_enum_name();
  return enum_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void EnumTypeProto::unsafe_arena_set_allocated_enum_name(
    ::std::string* enum_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (enum_name != NULL) {
    set_has_enum_name();
  } else {
    clear_has_enum_name();
  }
  enum_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      enum_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.EnumTypeProto.enum_name)
}

// optional string enum_file_name = 2;
inline bool EnumTypeProto::has_enum_file_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnumTypeProto::set_has_enum_file_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnumTypeProto::clear_has_enum_file_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnumTypeProto::clear_enum_file_name() {
  enum_file_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_enum_file_name();
}
inline const ::std::string& EnumTypeProto::enum_file_name() const {
  // @@protoc_insertion_point(field_get:zetasql.EnumTypeProto.enum_file_name)
  return enum_file_name_.Get();
}
inline void EnumTypeProto::set_enum_file_name(const ::std::string& value) {
  set_has_enum_file_name();
  enum_file_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:zetasql.EnumTypeProto.enum_file_name)
}
#if LANG_CXX11
inline void EnumTypeProto::set_enum_file_name(::std::string&& value) {
  set_has_enum_file_name();
  enum_file_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:zetasql.EnumTypeProto.enum_file_name)
}
#endif
inline void EnumTypeProto::set_enum_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_enum_file_name();
  enum_file_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:zetasql.EnumTypeProto.enum_file_name)
}
inline void EnumTypeProto::set_enum_file_name(const char* value,
    size_t size) {
  set_has_enum_file_name();
  enum_file_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:zetasql.EnumTypeProto.enum_file_name)
}
inline ::std::string* EnumTypeProto::mutable_enum_file_name() {
  set_has_enum_file_name();
  // @@protoc_insertion_point(field_mutable:zetasql.EnumTypeProto.enum_file_name)
  return enum_file_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* EnumTypeProto::release_enum_file_name() {
  // @@protoc_insertion_point(field_release:zetasql.EnumTypeProto.enum_file_name)
  if (!has_enum_file_name()) {
    return NULL;
  }
  clear_has_enum_file_name();
  return enum_file_name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void EnumTypeProto::set_allocated_enum_file_name(::std::string* enum_file_name) {
  if (enum_file_name != NULL) {
    set_has_enum_file_name();
  } else {
    clear_has_enum_file_name();
  }
  enum_file_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enum_file_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:zetasql.EnumTypeProto.enum_file_name)
}
inline ::std::string* EnumTypeProto::unsafe_arena_release_enum_file_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.EnumTypeProto.enum_file_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_enum_file_name();
  return enum_file_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void EnumTypeProto::unsafe_arena_set_allocated_enum_file_name(
    ::std::string* enum_file_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (enum_file_name != NULL) {
    set_has_enum_file_name();
  } else {
    clear_has_enum_file_name();
  }
  enum_file_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      enum_file_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.EnumTypeProto.enum_file_name)
}

// optional int32 file_descriptor_set_index = 3 [default = 0];
inline bool EnumTypeProto::has_file_descriptor_set_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnumTypeProto::set_has_file_descriptor_set_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnumTypeProto::clear_has_file_descriptor_set_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnumTypeProto::clear_file_descriptor_set_index() {
  file_descriptor_set_index_ = 0;
  clear_has_file_descriptor_set_index();
}
inline ::google::protobuf::int32 EnumTypeProto::file_descriptor_set_index() const {
  // @@protoc_insertion_point(field_get:zetasql.EnumTypeProto.file_descriptor_set_index)
  return file_descriptor_set_index_;
}
inline void EnumTypeProto::set_file_descriptor_set_index(::google::protobuf::int32 value) {
  set_has_file_descriptor_set_index();
  file_descriptor_set_index_ = value;
  // @@protoc_insertion_point(field_set:zetasql.EnumTypeProto.file_descriptor_set_index)
}

// repeated string catalog_name_path = 4;
inline int EnumTypeProto::catalog_name_path_size() const {
  return catalog_name_path_.size();
}
inline void EnumTypeProto::clear_catalog_name_path() {
  catalog_name_path_.Clear();
}
inline const ::std::string& EnumTypeProto::catalog_name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.EnumTypeProto.catalog_name_path)
  return catalog_name_path_.Get(index);
}
inline ::std::string* EnumTypeProto::mutable_catalog_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.EnumTypeProto.catalog_name_path)
  return catalog_name_path_.Mutable(index);
}
inline void EnumTypeProto::set_catalog_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.EnumTypeProto.catalog_name_path)
  catalog_name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void EnumTypeProto::set_catalog_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.EnumTypeProto.catalog_name_path)
  catalog_name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void EnumTypeProto::set_catalog_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  catalog_name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.EnumTypeProto.catalog_name_path)
}
inline void EnumTypeProto::set_catalog_name_path(int index, const char* value, size_t size) {
  catalog_name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.EnumTypeProto.catalog_name_path)
}
inline ::std::string* EnumTypeProto::add_catalog_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.EnumTypeProto.catalog_name_path)
  return catalog_name_path_.Add();
}
inline void EnumTypeProto::add_catalog_name_path(const ::std::string& value) {
  catalog_name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.EnumTypeProto.catalog_name_path)
}
#if LANG_CXX11
inline void EnumTypeProto::add_catalog_name_path(::std::string&& value) {
  catalog_name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.EnumTypeProto.catalog_name_path)
}
#endif
inline void EnumTypeProto::add_catalog_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  catalog_name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.EnumTypeProto.catalog_name_path)
}
inline void EnumTypeProto::add_catalog_name_path(const char* value, size_t size) {
  catalog_name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.EnumTypeProto.catalog_name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EnumTypeProto::catalog_name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.EnumTypeProto.catalog_name_path)
  return catalog_name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EnumTypeProto::mutable_catalog_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.EnumTypeProto.catalog_name_path)
  return &catalog_name_path_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::zetasql::TypeKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::TypeKind>() {
  return ::zetasql::TypeKind_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_zetasql_2fpublic_2ftype_2eproto
