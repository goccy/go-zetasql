// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/type_modifiers.proto

#include "zetasql/public/type_modifiers.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace zetasql {
constexpr TypeModifiersProto::TypeModifiersProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_parameters_(nullptr)
  , collation_(nullptr){}
struct TypeModifiersProtoDefaultTypeInternal {
  constexpr TypeModifiersProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TypeModifiersProtoDefaultTypeInternal() {}
  union {
    TypeModifiersProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TypeModifiersProtoDefaultTypeInternal _TypeModifiersProto_default_instance_;
}  // namespace zetasql
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_zetasql_2fpublic_2ftype_5fmodifiers_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_zetasql_2fpublic_2ftype_5fmodifiers_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_zetasql_2fpublic_2ftype_5fmodifiers_2eproto = nullptr;

const uint32_t TableStruct_zetasql_2fpublic_2ftype_5fmodifiers_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::zetasql::TypeModifiersProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TypeModifiersProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::TypeModifiersProto, type_parameters_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TypeModifiersProto, collation_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::zetasql::TypeModifiersProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_TypeModifiersProto_default_instance_),
};

const char descriptor_table_protodef_zetasql_2fpublic_2ftype_5fmodifiers_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#zetasql/public/type_modifiers.proto\022\007z"
  "etasql\032\036zetasql/public/collation.proto\032$"
  "zetasql/public/type_parameters.proto\"w\n\022"
  "TypeModifiersProto\0225\n\017type_parameters\030\001 "
  "\001(\0132\034.zetasql.TypeParametersProto\022*\n\tcol"
  "lation\030\002 \001(\0132\027.zetasql.CollationProtoB#\n"
  "\022com.google.zetasqlB\rTypeModifiers"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_zetasql_2fpublic_2ftype_5fmodifiers_2eproto_deps[2] = {
  &::descriptor_table_zetasql_2fpublic_2fcollation_2eproto,
  &::descriptor_table_zetasql_2fpublic_2ftype_5fparameters_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_zetasql_2fpublic_2ftype_5fmodifiers_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zetasql_2fpublic_2ftype_5fmodifiers_2eproto = {
  false, false, 274, descriptor_table_protodef_zetasql_2fpublic_2ftype_5fmodifiers_2eproto, "zetasql/public/type_modifiers.proto", 
  &descriptor_table_zetasql_2fpublic_2ftype_5fmodifiers_2eproto_once, descriptor_table_zetasql_2fpublic_2ftype_5fmodifiers_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_zetasql_2fpublic_2ftype_5fmodifiers_2eproto::offsets,
  file_level_metadata_zetasql_2fpublic_2ftype_5fmodifiers_2eproto, file_level_enum_descriptors_zetasql_2fpublic_2ftype_5fmodifiers_2eproto, file_level_service_descriptors_zetasql_2fpublic_2ftype_5fmodifiers_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_zetasql_2fpublic_2ftype_5fmodifiers_2eproto_getter() {
  return &descriptor_table_zetasql_2fpublic_2ftype_5fmodifiers_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_zetasql_2fpublic_2ftype_5fmodifiers_2eproto(&descriptor_table_zetasql_2fpublic_2ftype_5fmodifiers_2eproto);
namespace zetasql {

// ===================================================================

class TypeModifiersProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TypeModifiersProto>()._has_bits_);
  static const ::zetasql::TypeParametersProto& type_parameters(const TypeModifiersProto* msg);
  static void set_has_type_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::CollationProto& collation(const TypeModifiersProto* msg);
  static void set_has_collation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::TypeParametersProto&
TypeModifiersProto::_Internal::type_parameters(const TypeModifiersProto* msg) {
  return *msg->type_parameters_;
}
const ::zetasql::CollationProto&
TypeModifiersProto::_Internal::collation(const TypeModifiersProto* msg) {
  return *msg->collation_;
}
void TypeModifiersProto::clear_type_parameters() {
  if (type_parameters_ != nullptr) type_parameters_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TypeModifiersProto::clear_collation() {
  if (collation_ != nullptr) collation_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
TypeModifiersProto::TypeModifiersProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.TypeModifiersProto)
}
TypeModifiersProto::TypeModifiersProto(const TypeModifiersProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_type_parameters()) {
    type_parameters_ = new ::zetasql::TypeParametersProto(*from.type_parameters_);
  } else {
    type_parameters_ = nullptr;
  }
  if (from._internal_has_collation()) {
    collation_ = new ::zetasql::CollationProto(*from.collation_);
  } else {
    collation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.TypeModifiersProto)
}

inline void TypeModifiersProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_parameters_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&collation_) -
    reinterpret_cast<char*>(&type_parameters_)) + sizeof(collation_));
}

TypeModifiersProto::~TypeModifiersProto() {
  // @@protoc_insertion_point(destructor:zetasql.TypeModifiersProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TypeModifiersProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete type_parameters_;
  if (this != internal_default_instance()) delete collation_;
}

void TypeModifiersProto::ArenaDtor(void* object) {
  TypeModifiersProto* _this = reinterpret_cast< TypeModifiersProto* >(object);
  (void)_this;
}
void TypeModifiersProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TypeModifiersProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TypeModifiersProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.TypeModifiersProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(type_parameters_ != nullptr);
      type_parameters_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(collation_ != nullptr);
      collation_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TypeModifiersProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zetasql.TypeParametersProto type_parameters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_type_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.CollationProto collation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_collation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TypeModifiersProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.TypeModifiersProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zetasql.TypeParametersProto type_parameters = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::type_parameters(this), target, stream);
  }

  // optional .zetasql.CollationProto collation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::collation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.TypeModifiersProto)
  return target;
}

size_t TypeModifiersProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.TypeModifiersProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .zetasql.TypeParametersProto type_parameters = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_parameters_);
    }

    // optional .zetasql.CollationProto collation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *collation_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TypeModifiersProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TypeModifiersProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TypeModifiersProto::GetClassData() const { return &_class_data_; }

void TypeModifiersProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TypeModifiersProto *>(to)->MergeFrom(
      static_cast<const TypeModifiersProto &>(from));
}


void TypeModifiersProto::MergeFrom(const TypeModifiersProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.TypeModifiersProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_type_parameters()->::zetasql::TypeParametersProto::MergeFrom(from._internal_type_parameters());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_collation()->::zetasql::CollationProto::MergeFrom(from._internal_collation());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TypeModifiersProto::CopyFrom(const TypeModifiersProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.TypeModifiersProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeModifiersProto::IsInitialized() const {
  return true;
}

void TypeModifiersProto::InternalSwap(TypeModifiersProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TypeModifiersProto, collation_)
      + sizeof(TypeModifiersProto::collation_)
      - PROTOBUF_FIELD_OFFSET(TypeModifiersProto, type_parameters_)>(
          reinterpret_cast<char*>(&type_parameters_),
          reinterpret_cast<char*>(&other->type_parameters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TypeModifiersProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fpublic_2ftype_5fmodifiers_2eproto_getter, &descriptor_table_zetasql_2fpublic_2ftype_5fmodifiers_2eproto_once,
      file_level_metadata_zetasql_2fpublic_2ftype_5fmodifiers_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zetasql::TypeModifiersProto* Arena::CreateMaybeMessage< ::zetasql::TypeModifiersProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::TypeModifiersProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
