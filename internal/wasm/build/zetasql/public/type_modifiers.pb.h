// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/type_modifiers.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2ftype_5fmodifiers_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2ftype_5fmodifiers_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "zetasql/public/collation.pb.h"
#include "zetasql/public/type_parameters.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zetasql_2fpublic_2ftype_5fmodifiers_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zetasql_2fpublic_2ftype_5fmodifiers_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zetasql_2fpublic_2ftype_5fmodifiers_2eproto;
namespace zetasql {
class TypeModifiersProto;
struct TypeModifiersProtoDefaultTypeInternal;
extern TypeModifiersProtoDefaultTypeInternal _TypeModifiersProto_default_instance_;
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> ::zetasql::TypeModifiersProto* Arena::CreateMaybeMessage<::zetasql::TypeModifiersProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zetasql {

// ===================================================================

class TypeModifiersProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.TypeModifiersProto) */ {
 public:
  inline TypeModifiersProto() : TypeModifiersProto(nullptr) {}
  ~TypeModifiersProto() override;
  explicit constexpr TypeModifiersProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TypeModifiersProto(const TypeModifiersProto& from);
  TypeModifiersProto(TypeModifiersProto&& from) noexcept
    : TypeModifiersProto() {
    *this = ::std::move(from);
  }

  inline TypeModifiersProto& operator=(const TypeModifiersProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypeModifiersProto& operator=(TypeModifiersProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TypeModifiersProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TypeModifiersProto* internal_default_instance() {
    return reinterpret_cast<const TypeModifiersProto*>(
               &_TypeModifiersProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TypeModifiersProto& a, TypeModifiersProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TypeModifiersProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TypeModifiersProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TypeModifiersProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TypeModifiersProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TypeModifiersProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TypeModifiersProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TypeModifiersProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.TypeModifiersProto";
  }
  protected:
  explicit TypeModifiersProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeParametersFieldNumber = 1,
    kCollationFieldNumber = 2,
  };
  // optional .zetasql.TypeParametersProto type_parameters = 1;
  bool has_type_parameters() const;
  private:
  bool _internal_has_type_parameters() const;
  public:
  void clear_type_parameters();
  const ::zetasql::TypeParametersProto& type_parameters() const;
  PROTOBUF_NODISCARD ::zetasql::TypeParametersProto* release_type_parameters();
  ::zetasql::TypeParametersProto* mutable_type_parameters();
  void set_allocated_type_parameters(::zetasql::TypeParametersProto* type_parameters);
  private:
  const ::zetasql::TypeParametersProto& _internal_type_parameters() const;
  ::zetasql::TypeParametersProto* _internal_mutable_type_parameters();
  public:
  void unsafe_arena_set_allocated_type_parameters(
      ::zetasql::TypeParametersProto* type_parameters);
  ::zetasql::TypeParametersProto* unsafe_arena_release_type_parameters();

  // optional .zetasql.CollationProto collation = 2;
  bool has_collation() const;
  private:
  bool _internal_has_collation() const;
  public:
  void clear_collation();
  const ::zetasql::CollationProto& collation() const;
  PROTOBUF_NODISCARD ::zetasql::CollationProto* release_collation();
  ::zetasql::CollationProto* mutable_collation();
  void set_allocated_collation(::zetasql::CollationProto* collation);
  private:
  const ::zetasql::CollationProto& _internal_collation() const;
  ::zetasql::CollationProto* _internal_mutable_collation();
  public:
  void unsafe_arena_set_allocated_collation(
      ::zetasql::CollationProto* collation);
  ::zetasql::CollationProto* unsafe_arena_release_collation();

  // @@protoc_insertion_point(class_scope:zetasql.TypeModifiersProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::zetasql::TypeParametersProto* type_parameters_;
  ::zetasql::CollationProto* collation_;
  friend struct ::TableStruct_zetasql_2fpublic_2ftype_5fmodifiers_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TypeModifiersProto

// optional .zetasql.TypeParametersProto type_parameters = 1;
inline bool TypeModifiersProto::_internal_has_type_parameters() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || type_parameters_ != nullptr);
  return value;
}
inline bool TypeModifiersProto::has_type_parameters() const {
  return _internal_has_type_parameters();
}
inline const ::zetasql::TypeParametersProto& TypeModifiersProto::_internal_type_parameters() const {
  const ::zetasql::TypeParametersProto* p = type_parameters_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::TypeParametersProto&>(
      ::zetasql::_TypeParametersProto_default_instance_);
}
inline const ::zetasql::TypeParametersProto& TypeModifiersProto::type_parameters() const {
  // @@protoc_insertion_point(field_get:zetasql.TypeModifiersProto.type_parameters)
  return _internal_type_parameters();
}
inline void TypeModifiersProto::unsafe_arena_set_allocated_type_parameters(
    ::zetasql::TypeParametersProto* type_parameters) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_parameters_);
  }
  type_parameters_ = type_parameters;
  if (type_parameters) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TypeModifiersProto.type_parameters)
}
inline ::zetasql::TypeParametersProto* TypeModifiersProto::release_type_parameters() {
  _has_bits_[0] &= ~0x00000001u;
  ::zetasql::TypeParametersProto* temp = type_parameters_;
  type_parameters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::TypeParametersProto* TypeModifiersProto::unsafe_arena_release_type_parameters() {
  // @@protoc_insertion_point(field_release:zetasql.TypeModifiersProto.type_parameters)
  _has_bits_[0] &= ~0x00000001u;
  ::zetasql::TypeParametersProto* temp = type_parameters_;
  type_parameters_ = nullptr;
  return temp;
}
inline ::zetasql::TypeParametersProto* TypeModifiersProto::_internal_mutable_type_parameters() {
  _has_bits_[0] |= 0x00000001u;
  if (type_parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::TypeParametersProto>(GetArenaForAllocation());
    type_parameters_ = p;
  }
  return type_parameters_;
}
inline ::zetasql::TypeParametersProto* TypeModifiersProto::mutable_type_parameters() {
  ::zetasql::TypeParametersProto* _msg = _internal_mutable_type_parameters();
  // @@protoc_insertion_point(field_mutable:zetasql.TypeModifiersProto.type_parameters)
  return _msg;
}
inline void TypeModifiersProto::set_allocated_type_parameters(::zetasql::TypeParametersProto* type_parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_parameters_);
  }
  if (type_parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_parameters));
    if (message_arena != submessage_arena) {
      type_parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type_parameters, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_parameters_ = type_parameters;
  // @@protoc_insertion_point(field_set_allocated:zetasql.TypeModifiersProto.type_parameters)
}

// optional .zetasql.CollationProto collation = 2;
inline bool TypeModifiersProto::_internal_has_collation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || collation_ != nullptr);
  return value;
}
inline bool TypeModifiersProto::has_collation() const {
  return _internal_has_collation();
}
inline const ::zetasql::CollationProto& TypeModifiersProto::_internal_collation() const {
  const ::zetasql::CollationProto* p = collation_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::CollationProto&>(
      ::zetasql::_CollationProto_default_instance_);
}
inline const ::zetasql::CollationProto& TypeModifiersProto::collation() const {
  // @@protoc_insertion_point(field_get:zetasql.TypeModifiersProto.collation)
  return _internal_collation();
}
inline void TypeModifiersProto::unsafe_arena_set_allocated_collation(
    ::zetasql::CollationProto* collation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(collation_);
  }
  collation_ = collation;
  if (collation) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TypeModifiersProto.collation)
}
inline ::zetasql::CollationProto* TypeModifiersProto::release_collation() {
  _has_bits_[0] &= ~0x00000002u;
  ::zetasql::CollationProto* temp = collation_;
  collation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::CollationProto* TypeModifiersProto::unsafe_arena_release_collation() {
  // @@protoc_insertion_point(field_release:zetasql.TypeModifiersProto.collation)
  _has_bits_[0] &= ~0x00000002u;
  ::zetasql::CollationProto* temp = collation_;
  collation_ = nullptr;
  return temp;
}
inline ::zetasql::CollationProto* TypeModifiersProto::_internal_mutable_collation() {
  _has_bits_[0] |= 0x00000002u;
  if (collation_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::CollationProto>(GetArenaForAllocation());
    collation_ = p;
  }
  return collation_;
}
inline ::zetasql::CollationProto* TypeModifiersProto::mutable_collation() {
  ::zetasql::CollationProto* _msg = _internal_mutable_collation();
  // @@protoc_insertion_point(field_mutable:zetasql.TypeModifiersProto.collation)
  return _msg;
}
inline void TypeModifiersProto::set_allocated_collation(::zetasql::CollationProto* collation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(collation_);
  }
  if (collation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(collation));
    if (message_arena != submessage_arena) {
      collation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  collation_ = collation;
  // @@protoc_insertion_point(field_set_allocated:zetasql.TypeModifiersProto.collation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2ftype_5fmodifiers_2eproto
