// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/value.proto

#ifndef PROTOBUF_INCLUDED_zetasql_2fpublic_2fvalue_2eproto
#define PROTOBUF_INCLUDED_zetasql_2fpublic_2fvalue_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_zetasql_2fpublic_2fvalue_2eproto 

namespace protobuf_zetasql_2fpublic_2fvalue_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_zetasql_2fpublic_2fvalue_2eproto
namespace zetasql {
class ValueProto;
class ValueProtoDefaultTypeInternal;
extern ValueProtoDefaultTypeInternal _ValueProto_default_instance_;
class ValueProto_Array;
class ValueProto_ArrayDefaultTypeInternal;
extern ValueProto_ArrayDefaultTypeInternal _ValueProto_Array_default_instance_;
class ValueProto_Datetime;
class ValueProto_DatetimeDefaultTypeInternal;
extern ValueProto_DatetimeDefaultTypeInternal _ValueProto_Datetime_default_instance_;
class ValueProto_Struct;
class ValueProto_StructDefaultTypeInternal;
extern ValueProto_StructDefaultTypeInternal _ValueProto_Struct_default_instance_;
}  // namespace zetasql
namespace google {
namespace protobuf {
template<> ::zetasql::ValueProto* Arena::CreateMaybeMessage<::zetasql::ValueProto>(Arena*);
template<> ::zetasql::ValueProto_Array* Arena::CreateMaybeMessage<::zetasql::ValueProto_Array>(Arena*);
template<> ::zetasql::ValueProto_Datetime* Arena::CreateMaybeMessage<::zetasql::ValueProto_Datetime>(Arena*);
template<> ::zetasql::ValueProto_Struct* Arena::CreateMaybeMessage<::zetasql::ValueProto_Struct>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace zetasql {

// ===================================================================

class ValueProto_Array : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ValueProto.Array) */ {
 public:
  ValueProto_Array();
  virtual ~ValueProto_Array();

  ValueProto_Array(const ValueProto_Array& from);

  inline ValueProto_Array& operator=(const ValueProto_Array& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueProto_Array(ValueProto_Array&& from) noexcept
    : ValueProto_Array() {
    *this = ::std::move(from);
  }

  inline ValueProto_Array& operator=(ValueProto_Array&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueProto_Array& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueProto_Array* internal_default_instance() {
    return reinterpret_cast<const ValueProto_Array*>(
               &_ValueProto_Array_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(ValueProto_Array* other);
  void Swap(ValueProto_Array* other);
  friend void swap(ValueProto_Array& a, ValueProto_Array& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueProto_Array* New() const final {
    return CreateMaybeMessage<ValueProto_Array>(NULL);
  }

  ValueProto_Array* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueProto_Array>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueProto_Array& from);
  void MergeFrom(const ValueProto_Array& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueProto_Array* other);
  protected:
  explicit ValueProto_Array(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ValueProto element = 1;
  int element_size() const;
  void clear_element();
  static const int kElementFieldNumber = 1;
  ::zetasql::ValueProto* mutable_element(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ValueProto >*
      mutable_element();
  const ::zetasql::ValueProto& element(int index) const;
  ::zetasql::ValueProto* add_element();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ValueProto >&
      element() const;

  // @@protoc_insertion_point(class_scope:zetasql.ValueProto.Array)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ValueProto > element_;
  friend struct ::protobuf_zetasql_2fpublic_2fvalue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueProto_Struct : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ValueProto.Struct) */ {
 public:
  ValueProto_Struct();
  virtual ~ValueProto_Struct();

  ValueProto_Struct(const ValueProto_Struct& from);

  inline ValueProto_Struct& operator=(const ValueProto_Struct& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueProto_Struct(ValueProto_Struct&& from) noexcept
    : ValueProto_Struct() {
    *this = ::std::move(from);
  }

  inline ValueProto_Struct& operator=(ValueProto_Struct&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueProto_Struct& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueProto_Struct* internal_default_instance() {
    return reinterpret_cast<const ValueProto_Struct*>(
               &_ValueProto_Struct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(ValueProto_Struct* other);
  void Swap(ValueProto_Struct* other);
  friend void swap(ValueProto_Struct& a, ValueProto_Struct& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueProto_Struct* New() const final {
    return CreateMaybeMessage<ValueProto_Struct>(NULL);
  }

  ValueProto_Struct* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueProto_Struct>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueProto_Struct& from);
  void MergeFrom(const ValueProto_Struct& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueProto_Struct* other);
  protected:
  explicit ValueProto_Struct(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ValueProto field = 1;
  int field_size() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  ::zetasql::ValueProto* mutable_field(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ValueProto >*
      mutable_field();
  const ::zetasql::ValueProto& field(int index) const;
  ::zetasql::ValueProto* add_field();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ValueProto >&
      field() const;

  // @@protoc_insertion_point(class_scope:zetasql.ValueProto.Struct)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ValueProto > field_;
  friend struct ::protobuf_zetasql_2fpublic_2fvalue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueProto_Datetime : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ValueProto.Datetime) */ {
 public:
  ValueProto_Datetime();
  virtual ~ValueProto_Datetime();

  ValueProto_Datetime(const ValueProto_Datetime& from);

  inline ValueProto_Datetime& operator=(const ValueProto_Datetime& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueProto_Datetime(ValueProto_Datetime&& from) noexcept
    : ValueProto_Datetime() {
    *this = ::std::move(from);
  }

  inline ValueProto_Datetime& operator=(ValueProto_Datetime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueProto_Datetime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueProto_Datetime* internal_default_instance() {
    return reinterpret_cast<const ValueProto_Datetime*>(
               &_ValueProto_Datetime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(ValueProto_Datetime* other);
  void Swap(ValueProto_Datetime* other);
  friend void swap(ValueProto_Datetime& a, ValueProto_Datetime& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueProto_Datetime* New() const final {
    return CreateMaybeMessage<ValueProto_Datetime>(NULL);
  }

  ValueProto_Datetime* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueProto_Datetime>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueProto_Datetime& from);
  void MergeFrom(const ValueProto_Datetime& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueProto_Datetime* other);
  protected:
  explicit ValueProto_Datetime(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 bit_field_datetime_seconds = 1;
  bool has_bit_field_datetime_seconds() const;
  void clear_bit_field_datetime_seconds();
  static const int kBitFieldDatetimeSecondsFieldNumber = 1;
  ::google::protobuf::int64 bit_field_datetime_seconds() const;
  void set_bit_field_datetime_seconds(::google::protobuf::int64 value);

  // optional int32 nanos = 2;
  bool has_nanos() const;
  void clear_nanos();
  static const int kNanosFieldNumber = 2;
  ::google::protobuf::int32 nanos() const;
  void set_nanos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zetasql.ValueProto.Datetime)
 private:
  void set_has_bit_field_datetime_seconds();
  void clear_has_bit_field_datetime_seconds();
  void set_has_nanos();
  void clear_has_nanos();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 bit_field_datetime_seconds_;
  ::google::protobuf::int32 nanos_;
  friend struct ::protobuf_zetasql_2fpublic_2fvalue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ValueProto) */ {
 public:
  ValueProto();
  virtual ~ValueProto();

  ValueProto(const ValueProto& from);

  inline ValueProto& operator=(const ValueProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueProto(ValueProto&& from) noexcept
    : ValueProto() {
    *this = ::std::move(from);
  }

  inline ValueProto& operator=(ValueProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueProto& default_instance();

  enum ValueCase {
    kInt32Value = 1,
    kInt64Value = 2,
    kUint32Value = 3,
    kUint64Value = 4,
    kBoolValue = 5,
    kFloatValue = 6,
    kDoubleValue = 7,
    kStringValue = 8,
    kBytesValue = 9,
    kDateValue = 10,
    kEnumValue = 12,
    kArrayValue = 13,
    kStructValue = 14,
    kProtoValue = 15,
    kTimestampValue = 16,
    kDatetimeValue = 17,
    kTimeValue = 18,
    kGeographyValue = 19,
    kNumericValue = 20,
    kBignumericValue = 21,
    kJsonValue = 23,
    kIntervalValue = 24,
    kValueProtoSwitchMustHaveADefault = 255,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueProto* internal_default_instance() {
    return reinterpret_cast<const ValueProto*>(
               &_ValueProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(ValueProto* other);
  void Swap(ValueProto* other);
  friend void swap(ValueProto& a, ValueProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueProto* New() const final {
    return CreateMaybeMessage<ValueProto>(NULL);
  }

  ValueProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueProto& from);
  void MergeFrom(const ValueProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueProto* other);
  protected:
  explicit ValueProto(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ValueProto_Array Array;
  typedef ValueProto_Struct Struct;
  typedef ValueProto_Datetime Datetime;

  // accessors -------------------------------------------------------

  // optional int32 int32_value = 1;
  bool has_int32_value() const;
  void clear_int32_value();
  static const int kInt32ValueFieldNumber = 1;
  ::google::protobuf::int32 int32_value() const;
  void set_int32_value(::google::protobuf::int32 value);

  // optional int64 int64_value = 2;
  bool has_int64_value() const;
  void clear_int64_value();
  static const int kInt64ValueFieldNumber = 2;
  ::google::protobuf::int64 int64_value() const;
  void set_int64_value(::google::protobuf::int64 value);

  // optional uint32 uint32_value = 3;
  bool has_uint32_value() const;
  void clear_uint32_value();
  static const int kUint32ValueFieldNumber = 3;
  ::google::protobuf::uint32 uint32_value() const;
  void set_uint32_value(::google::protobuf::uint32 value);

  // optional uint64 uint64_value = 4;
  bool has_uint64_value() const;
  void clear_uint64_value();
  static const int kUint64ValueFieldNumber = 4;
  ::google::protobuf::uint64 uint64_value() const;
  void set_uint64_value(::google::protobuf::uint64 value);

  // optional bool bool_value = 5;
  bool has_bool_value() const;
  void clear_bool_value();
  static const int kBoolValueFieldNumber = 5;
  bool bool_value() const;
  void set_bool_value(bool value);

  // optional float float_value = 6;
  bool has_float_value() const;
  void clear_float_value();
  static const int kFloatValueFieldNumber = 6;
  float float_value() const;
  void set_float_value(float value);

  // optional double double_value = 7;
  bool has_double_value() const;
  void clear_double_value();
  static const int kDoubleValueFieldNumber = 7;
  double double_value() const;
  void set_double_value(double value);

  // optional string string_value = 8;
  bool has_string_value() const;
  void clear_string_value();
  static const int kStringValueFieldNumber = 8;
  const ::std::string& string_value() const;
  void set_string_value(const ::std::string& value);
  #if LANG_CXX11
  void set_string_value(::std::string&& value);
  #endif
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  ::std::string* mutable_string_value();
  ::std::string* release_string_value();
  void set_allocated_string_value(::std::string* string_value);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_string_value();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_string_value(
      ::std::string* string_value);

  // optional bytes bytes_value = 9;
  bool has_bytes_value() const;
  void clear_bytes_value();
  static const int kBytesValueFieldNumber = 9;
  const ::std::string& bytes_value() const;
  void set_bytes_value(const ::std::string& value);
  #if LANG_CXX11
  void set_bytes_value(::std::string&& value);
  #endif
  void set_bytes_value(const char* value);
  void set_bytes_value(const void* value, size_t size);
  ::std::string* mutable_bytes_value();
  ::std::string* release_bytes_value();
  void set_allocated_bytes_value(::std::string* bytes_value);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_bytes_value();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bytes_value(
      ::std::string* bytes_value);

  // optional int32 date_value = 10;
  bool has_date_value() const;
  void clear_date_value();
  static const int kDateValueFieldNumber = 10;
  ::google::protobuf::int32 date_value() const;
  void set_date_value(::google::protobuf::int32 value);

  // optional int32 enum_value = 12;
  bool has_enum_value() const;
  void clear_enum_value();
  static const int kEnumValueFieldNumber = 12;
  ::google::protobuf::int32 enum_value() const;
  void set_enum_value(::google::protobuf::int32 value);

  // optional .zetasql.ValueProto.Array array_value = 13;
  bool has_array_value() const;
  void clear_array_value();
  static const int kArrayValueFieldNumber = 13;
  private:
  const ::zetasql::ValueProto_Array& _internal_array_value() const;
  public:
  const ::zetasql::ValueProto_Array& array_value() const;
  ::zetasql::ValueProto_Array* release_array_value();
  ::zetasql::ValueProto_Array* mutable_array_value();
  void set_allocated_array_value(::zetasql::ValueProto_Array* array_value);
  void unsafe_arena_set_allocated_array_value(
      ::zetasql::ValueProto_Array* array_value);
  ::zetasql::ValueProto_Array* unsafe_arena_release_array_value();

  // optional .zetasql.ValueProto.Struct struct_value = 14;
  bool has_struct_value() const;
  void clear_struct_value();
  static const int kStructValueFieldNumber = 14;
  private:
  const ::zetasql::ValueProto_Struct& _internal_struct_value() const;
  public:
  const ::zetasql::ValueProto_Struct& struct_value() const;
  ::zetasql::ValueProto_Struct* release_struct_value();
  ::zetasql::ValueProto_Struct* mutable_struct_value();
  void set_allocated_struct_value(::zetasql::ValueProto_Struct* struct_value);
  void unsafe_arena_set_allocated_struct_value(
      ::zetasql::ValueProto_Struct* struct_value);
  ::zetasql::ValueProto_Struct* unsafe_arena_release_struct_value();

  // optional bytes proto_value = 15;
  bool has_proto_value() const;
  void clear_proto_value();
  static const int kProtoValueFieldNumber = 15;
  const ::std::string& proto_value() const;
  void set_proto_value(const ::std::string& value);
  #if LANG_CXX11
  void set_proto_value(::std::string&& value);
  #endif
  void set_proto_value(const char* value);
  void set_proto_value(const void* value, size_t size);
  ::std::string* mutable_proto_value();
  ::std::string* release_proto_value();
  void set_allocated_proto_value(::std::string* proto_value);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_proto_value();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_proto_value(
      ::std::string* proto_value);

  // optional .google.protobuf.Timestamp timestamp_value = 16;
  bool has_timestamp_value() const;
  void clear_timestamp_value();
  static const int kTimestampValueFieldNumber = 16;
  private:
  const ::google::protobuf::Timestamp& _internal_timestamp_value() const;
  public:
  const ::google::protobuf::Timestamp& timestamp_value() const;
  ::google::protobuf::Timestamp* release_timestamp_value();
  ::google::protobuf::Timestamp* mutable_timestamp_value();
  void set_allocated_timestamp_value(::google::protobuf::Timestamp* timestamp_value);
  void unsafe_arena_set_allocated_timestamp_value(
      ::google::protobuf::Timestamp* timestamp_value);
  ::google::protobuf::Timestamp* unsafe_arena_release_timestamp_value();

  // optional .zetasql.ValueProto.Datetime datetime_value = 17;
  bool has_datetime_value() const;
  void clear_datetime_value();
  static const int kDatetimeValueFieldNumber = 17;
  private:
  const ::zetasql::ValueProto_Datetime& _internal_datetime_value() const;
  public:
  const ::zetasql::ValueProto_Datetime& datetime_value() const;
  ::zetasql::ValueProto_Datetime* release_datetime_value();
  ::zetasql::ValueProto_Datetime* mutable_datetime_value();
  void set_allocated_datetime_value(::zetasql::ValueProto_Datetime* datetime_value);
  void unsafe_arena_set_allocated_datetime_value(
      ::zetasql::ValueProto_Datetime* datetime_value);
  ::zetasql::ValueProto_Datetime* unsafe_arena_release_datetime_value();

  // optional int64 time_value = 18;
  bool has_time_value() const;
  void clear_time_value();
  static const int kTimeValueFieldNumber = 18;
  ::google::protobuf::int64 time_value() const;
  void set_time_value(::google::protobuf::int64 value);

  // optional bytes geography_value = 19;
  bool has_geography_value() const;
  void clear_geography_value();
  static const int kGeographyValueFieldNumber = 19;
  const ::std::string& geography_value() const;
  void set_geography_value(const ::std::string& value);
  #if LANG_CXX11
  void set_geography_value(::std::string&& value);
  #endif
  void set_geography_value(const char* value);
  void set_geography_value(const void* value, size_t size);
  ::std::string* mutable_geography_value();
  ::std::string* release_geography_value();
  void set_allocated_geography_value(::std::string* geography_value);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_geography_value();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_geography_value(
      ::std::string* geography_value);

  // optional bytes numeric_value = 20;
  bool has_numeric_value() const;
  void clear_numeric_value();
  static const int kNumericValueFieldNumber = 20;
  const ::std::string& numeric_value() const;
  void set_numeric_value(const ::std::string& value);
  #if LANG_CXX11
  void set_numeric_value(::std::string&& value);
  #endif
  void set_numeric_value(const char* value);
  void set_numeric_value(const void* value, size_t size);
  ::std::string* mutable_numeric_value();
  ::std::string* release_numeric_value();
  void set_allocated_numeric_value(::std::string* numeric_value);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_numeric_value();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_numeric_value(
      ::std::string* numeric_value);

  // optional bytes bignumeric_value = 21;
  bool has_bignumeric_value() const;
  void clear_bignumeric_value();
  static const int kBignumericValueFieldNumber = 21;
  const ::std::string& bignumeric_value() const;
  void set_bignumeric_value(const ::std::string& value);
  #if LANG_CXX11
  void set_bignumeric_value(::std::string&& value);
  #endif
  void set_bignumeric_value(const char* value);
  void set_bignumeric_value(const void* value, size_t size);
  ::std::string* mutable_bignumeric_value();
  ::std::string* release_bignumeric_value();
  void set_allocated_bignumeric_value(::std::string* bignumeric_value);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_bignumeric_value();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bignumeric_value(
      ::std::string* bignumeric_value);

  // optional string json_value = 23;
  bool has_json_value() const;
  void clear_json_value();
  static const int kJsonValueFieldNumber = 23;
  const ::std::string& json_value() const;
  void set_json_value(const ::std::string& value);
  #if LANG_CXX11
  void set_json_value(::std::string&& value);
  #endif
  void set_json_value(const char* value);
  void set_json_value(const char* value, size_t size);
  ::std::string* mutable_json_value();
  ::std::string* release_json_value();
  void set_allocated_json_value(::std::string* json_value);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_json_value();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_json_value(
      ::std::string* json_value);

  // optional bytes interval_value = 24;
  bool has_interval_value() const;
  void clear_interval_value();
  static const int kIntervalValueFieldNumber = 24;
  const ::std::string& interval_value() const;
  void set_interval_value(const ::std::string& value);
  #if LANG_CXX11
  void set_interval_value(::std::string&& value);
  #endif
  void set_interval_value(const char* value);
  void set_interval_value(const void* value, size_t size);
  ::std::string* mutable_interval_value();
  ::std::string* release_interval_value();
  void set_allocated_interval_value(::std::string* interval_value);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_interval_value();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_interval_value(
      ::std::string* interval_value);

  // optional bool __ValueProto__switch_must_have_a_default = 255;
  bool has___valueproto__switch_must_have_a_default() const;
  void clear___valueproto__switch_must_have_a_default();
  static const int kValueProtoSwitchMustHaveADefaultFieldNumber = 255;
  bool __valueproto__switch_must_have_a_default() const;
  void set___valueproto__switch_must_have_a_default(bool value);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:zetasql.ValueProto)
 private:
  void set_has_int32_value();
  void set_has_int64_value();
  void set_has_uint32_value();
  void set_has_uint64_value();
  void set_has_bool_value();
  void set_has_float_value();
  void set_has_double_value();
  void set_has_string_value();
  void set_has_bytes_value();
  void set_has_date_value();
  void set_has_enum_value();
  void set_has_array_value();
  void set_has_struct_value();
  void set_has_proto_value();
  void set_has_timestamp_value();
  void set_has_datetime_value();
  void set_has_time_value();
  void set_has_geography_value();
  void set_has_numeric_value();
  void set_has_bignumeric_value();
  void set_has_json_value();
  void set_has_interval_value();
  void set_has___valueproto__switch_must_have_a_default();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union ValueUnion {
    ValueUnion() {}
    ::google::protobuf::int32 int32_value_;
    ::google::protobuf::int64 int64_value_;
    ::google::protobuf::uint32 uint32_value_;
    ::google::protobuf::uint64 uint64_value_;
    bool bool_value_;
    float float_value_;
    double double_value_;
    ::google::protobuf::internal::ArenaStringPtr string_value_;
    ::google::protobuf::internal::ArenaStringPtr bytes_value_;
    ::google::protobuf::int32 date_value_;
    ::google::protobuf::int32 enum_value_;
    ::zetasql::ValueProto_Array* array_value_;
    ::zetasql::ValueProto_Struct* struct_value_;
    ::google::protobuf::internal::ArenaStringPtr proto_value_;
    ::google::protobuf::Timestamp* timestamp_value_;
    ::zetasql::ValueProto_Datetime* datetime_value_;
    ::google::protobuf::int64 time_value_;
    ::google::protobuf::internal::ArenaStringPtr geography_value_;
    ::google::protobuf::internal::ArenaStringPtr numeric_value_;
    ::google::protobuf::internal::ArenaStringPtr bignumeric_value_;
    ::google::protobuf::internal::ArenaStringPtr json_value_;
    ::google::protobuf::internal::ArenaStringPtr interval_value_;
    bool __valueproto__switch_must_have_a_default_;
  } value_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_zetasql_2fpublic_2fvalue_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ValueProto_Array

// repeated .zetasql.ValueProto element = 1;
inline int ValueProto_Array::element_size() const {
  return element_.size();
}
inline void ValueProto_Array::clear_element() {
  element_.Clear();
}
inline ::zetasql::ValueProto* ValueProto_Array::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.Array.element)
  return element_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ValueProto >*
ValueProto_Array::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ValueProto.Array.element)
  return &element_;
}
inline const ::zetasql::ValueProto& ValueProto_Array::element(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.Array.element)
  return element_.Get(index);
}
inline ::zetasql::ValueProto* ValueProto_Array::add_element() {
  // @@protoc_insertion_point(field_add:zetasql.ValueProto.Array.element)
  return element_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ValueProto >&
ValueProto_Array::element() const {
  // @@protoc_insertion_point(field_list:zetasql.ValueProto.Array.element)
  return element_;
}

// -------------------------------------------------------------------

// ValueProto_Struct

// repeated .zetasql.ValueProto field = 1;
inline int ValueProto_Struct::field_size() const {
  return field_.size();
}
inline void ValueProto_Struct::clear_field() {
  field_.Clear();
}
inline ::zetasql::ValueProto* ValueProto_Struct::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.Struct.field)
  return field_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ValueProto >*
ValueProto_Struct::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ValueProto.Struct.field)
  return &field_;
}
inline const ::zetasql::ValueProto& ValueProto_Struct::field(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.Struct.field)
  return field_.Get(index);
}
inline ::zetasql::ValueProto* ValueProto_Struct::add_field() {
  // @@protoc_insertion_point(field_add:zetasql.ValueProto.Struct.field)
  return field_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ValueProto >&
ValueProto_Struct::field() const {
  // @@protoc_insertion_point(field_list:zetasql.ValueProto.Struct.field)
  return field_;
}

// -------------------------------------------------------------------

// ValueProto_Datetime

// optional int64 bit_field_datetime_seconds = 1;
inline bool ValueProto_Datetime::has_bit_field_datetime_seconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ValueProto_Datetime::set_has_bit_field_datetime_seconds() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ValueProto_Datetime::clear_has_bit_field_datetime_seconds() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ValueProto_Datetime::clear_bit_field_datetime_seconds() {
  bit_field_datetime_seconds_ = GOOGLE_LONGLONG(0);
  clear_has_bit_field_datetime_seconds();
}
inline ::google::protobuf::int64 ValueProto_Datetime::bit_field_datetime_seconds() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.Datetime.bit_field_datetime_seconds)
  return bit_field_datetime_seconds_;
}
inline void ValueProto_Datetime::set_bit_field_datetime_seconds(::google::protobuf::int64 value) {
  set_has_bit_field_datetime_seconds();
  bit_field_datetime_seconds_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.Datetime.bit_field_datetime_seconds)
}

// optional int32 nanos = 2;
inline bool ValueProto_Datetime::has_nanos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ValueProto_Datetime::set_has_nanos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ValueProto_Datetime::clear_has_nanos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ValueProto_Datetime::clear_nanos() {
  nanos_ = 0;
  clear_has_nanos();
}
inline ::google::protobuf::int32 ValueProto_Datetime::nanos() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.Datetime.nanos)
  return nanos_;
}
inline void ValueProto_Datetime::set_nanos(::google::protobuf::int32 value) {
  set_has_nanos();
  nanos_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.Datetime.nanos)
}

// -------------------------------------------------------------------

// ValueProto

// optional int32 int32_value = 1;
inline bool ValueProto::has_int32_value() const {
  return value_case() == kInt32Value;
}
inline void ValueProto::set_has_int32_value() {
  _oneof_case_[0] = kInt32Value;
}
inline void ValueProto::clear_int32_value() {
  if (has_int32_value()) {
    value_.int32_value_ = 0;
    clear_has_value();
  }
}
inline ::google::protobuf::int32 ValueProto::int32_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.int32_value)
  if (has_int32_value()) {
    return value_.int32_value_;
  }
  return 0;
}
inline void ValueProto::set_int32_value(::google::protobuf::int32 value) {
  if (!has_int32_value()) {
    clear_value();
    set_has_int32_value();
  }
  value_.int32_value_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.int32_value)
}

// optional int64 int64_value = 2;
inline bool ValueProto::has_int64_value() const {
  return value_case() == kInt64Value;
}
inline void ValueProto::set_has_int64_value() {
  _oneof_case_[0] = kInt64Value;
}
inline void ValueProto::clear_int64_value() {
  if (has_int64_value()) {
    value_.int64_value_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::int64 ValueProto::int64_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.int64_value)
  if (has_int64_value()) {
    return value_.int64_value_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void ValueProto::set_int64_value(::google::protobuf::int64 value) {
  if (!has_int64_value()) {
    clear_value();
    set_has_int64_value();
  }
  value_.int64_value_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.int64_value)
}

// optional uint32 uint32_value = 3;
inline bool ValueProto::has_uint32_value() const {
  return value_case() == kUint32Value;
}
inline void ValueProto::set_has_uint32_value() {
  _oneof_case_[0] = kUint32Value;
}
inline void ValueProto::clear_uint32_value() {
  if (has_uint32_value()) {
    value_.uint32_value_ = 0u;
    clear_has_value();
  }
}
inline ::google::protobuf::uint32 ValueProto::uint32_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.uint32_value)
  if (has_uint32_value()) {
    return value_.uint32_value_;
  }
  return 0u;
}
inline void ValueProto::set_uint32_value(::google::protobuf::uint32 value) {
  if (!has_uint32_value()) {
    clear_value();
    set_has_uint32_value();
  }
  value_.uint32_value_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.uint32_value)
}

// optional uint64 uint64_value = 4;
inline bool ValueProto::has_uint64_value() const {
  return value_case() == kUint64Value;
}
inline void ValueProto::set_has_uint64_value() {
  _oneof_case_[0] = kUint64Value;
}
inline void ValueProto::clear_uint64_value() {
  if (has_uint64_value()) {
    value_.uint64_value_ = GOOGLE_ULONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::uint64 ValueProto::uint64_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.uint64_value)
  if (has_uint64_value()) {
    return value_.uint64_value_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ValueProto::set_uint64_value(::google::protobuf::uint64 value) {
  if (!has_uint64_value()) {
    clear_value();
    set_has_uint64_value();
  }
  value_.uint64_value_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.uint64_value)
}

// optional bool bool_value = 5;
inline bool ValueProto::has_bool_value() const {
  return value_case() == kBoolValue;
}
inline void ValueProto::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void ValueProto::clear_bool_value() {
  if (has_bool_value()) {
    value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool ValueProto::bool_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.bool_value)
  if (has_bool_value()) {
    return value_.bool_value_;
  }
  return false;
}
inline void ValueProto::set_bool_value(bool value) {
  if (!has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  value_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.bool_value)
}

// optional float float_value = 6;
inline bool ValueProto::has_float_value() const {
  return value_case() == kFloatValue;
}
inline void ValueProto::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void ValueProto::clear_float_value() {
  if (has_float_value()) {
    value_.float_value_ = 0;
    clear_has_value();
  }
}
inline float ValueProto::float_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.float_value)
  if (has_float_value()) {
    return value_.float_value_;
  }
  return 0;
}
inline void ValueProto::set_float_value(float value) {
  if (!has_float_value()) {
    clear_value();
    set_has_float_value();
  }
  value_.float_value_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.float_value)
}

// optional double double_value = 7;
inline bool ValueProto::has_double_value() const {
  return value_case() == kDoubleValue;
}
inline void ValueProto::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void ValueProto::clear_double_value() {
  if (has_double_value()) {
    value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double ValueProto::double_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.double_value)
  if (has_double_value()) {
    return value_.double_value_;
  }
  return 0;
}
inline void ValueProto::set_double_value(double value) {
  if (!has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  value_.double_value_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.double_value)
}

// optional string string_value = 8;
inline bool ValueProto::has_string_value() const {
  return value_case() == kStringValue;
}
inline void ValueProto::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void ValueProto::clear_string_value() {
  if (has_string_value()) {
    value_.string_value_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_value();
  }
}
inline const ::std::string& ValueProto::string_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.string_value)
  if (has_string_value()) {
    return value_.string_value_.Get();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ValueProto::set_string_value(const ::std::string& value) {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.string_value)
}
#if LANG_CXX11
inline void ValueProto::set_string_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ValueProto.string_value)
}
#endif
inline void ValueProto::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:zetasql.ValueProto.string_value)
}
inline void ValueProto::set_string_value(const char* value,
                             size_t size) {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:zetasql.ValueProto.string_value)
}
inline ::std::string* ValueProto::mutable_string_value() {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return value_.string_value_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.string_value)
}
inline ::std::string* ValueProto::release_string_value() {
  // @@protoc_insertion_point(field_release:zetasql.ValueProto.string_value)
  if (has_string_value()) {
    clear_has_value();
    return value_.string_value_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void ValueProto::set_allocated_string_value(::std::string* string_value) {
  if (!has_string_value()) {
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (string_value != NULL) {
    set_has_string_value();
    value_.string_value_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_value,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.ValueProto.string_value)
}
inline ::std::string* ValueProto::unsafe_arena_release_string_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.ValueProto.string_value)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_string_value()) {
    clear_has_value();
    return value_.string_value_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void ValueProto::unsafe_arena_set_allocated_string_value(::std::string* string_value) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_string_value()) {
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (string_value) {
    set_has_string_value();
    value_.string_value_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_value, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.ValueProto.string_value)
}

// optional bytes bytes_value = 9;
inline bool ValueProto::has_bytes_value() const {
  return value_case() == kBytesValue;
}
inline void ValueProto::set_has_bytes_value() {
  _oneof_case_[0] = kBytesValue;
}
inline void ValueProto::clear_bytes_value() {
  if (has_bytes_value()) {
    value_.bytes_value_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_value();
  }
}
inline const ::std::string& ValueProto::bytes_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.bytes_value)
  if (has_bytes_value()) {
    return value_.bytes_value_.Get();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ValueProto::set_bytes_value(const ::std::string& value) {
  if (!has_bytes_value()) {
    clear_value();
    set_has_bytes_value();
    value_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.bytes_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.bytes_value)
}
#if LANG_CXX11
inline void ValueProto::set_bytes_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.bytes_value)
  if (!has_bytes_value()) {
    clear_value();
    set_has_bytes_value();
    value_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.bytes_value_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ValueProto.bytes_value)
}
#endif
inline void ValueProto::set_bytes_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_bytes_value()) {
    clear_value();
    set_has_bytes_value();
    value_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.bytes_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:zetasql.ValueProto.bytes_value)
}
inline void ValueProto::set_bytes_value(const void* value,
                             size_t size) {
  if (!has_bytes_value()) {
    clear_value();
    set_has_bytes_value();
    value_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.bytes_value_.Set(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:zetasql.ValueProto.bytes_value)
}
inline ::std::string* ValueProto::mutable_bytes_value() {
  if (!has_bytes_value()) {
    clear_value();
    set_has_bytes_value();
    value_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return value_.bytes_value_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.bytes_value)
}
inline ::std::string* ValueProto::release_bytes_value() {
  // @@protoc_insertion_point(field_release:zetasql.ValueProto.bytes_value)
  if (has_bytes_value()) {
    clear_has_value();
    return value_.bytes_value_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void ValueProto::set_allocated_bytes_value(::std::string* bytes_value) {
  if (!has_bytes_value()) {
    value_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (bytes_value != NULL) {
    set_has_bytes_value();
    value_.bytes_value_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytes_value,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.ValueProto.bytes_value)
}
inline ::std::string* ValueProto::unsafe_arena_release_bytes_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.ValueProto.bytes_value)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_bytes_value()) {
    clear_has_value();
    return value_.bytes_value_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void ValueProto::unsafe_arena_set_allocated_bytes_value(::std::string* bytes_value) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_bytes_value()) {
    value_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (bytes_value) {
    set_has_bytes_value();
    value_.bytes_value_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytes_value, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.ValueProto.bytes_value)
}

// optional int32 date_value = 10;
inline bool ValueProto::has_date_value() const {
  return value_case() == kDateValue;
}
inline void ValueProto::set_has_date_value() {
  _oneof_case_[0] = kDateValue;
}
inline void ValueProto::clear_date_value() {
  if (has_date_value()) {
    value_.date_value_ = 0;
    clear_has_value();
  }
}
inline ::google::protobuf::int32 ValueProto::date_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.date_value)
  if (has_date_value()) {
    return value_.date_value_;
  }
  return 0;
}
inline void ValueProto::set_date_value(::google::protobuf::int32 value) {
  if (!has_date_value()) {
    clear_value();
    set_has_date_value();
  }
  value_.date_value_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.date_value)
}

// optional int32 enum_value = 12;
inline bool ValueProto::has_enum_value() const {
  return value_case() == kEnumValue;
}
inline void ValueProto::set_has_enum_value() {
  _oneof_case_[0] = kEnumValue;
}
inline void ValueProto::clear_enum_value() {
  if (has_enum_value()) {
    value_.enum_value_ = 0;
    clear_has_value();
  }
}
inline ::google::protobuf::int32 ValueProto::enum_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.enum_value)
  if (has_enum_value()) {
    return value_.enum_value_;
  }
  return 0;
}
inline void ValueProto::set_enum_value(::google::protobuf::int32 value) {
  if (!has_enum_value()) {
    clear_value();
    set_has_enum_value();
  }
  value_.enum_value_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.enum_value)
}

// optional .zetasql.ValueProto.Array array_value = 13;
inline bool ValueProto::has_array_value() const {
  return value_case() == kArrayValue;
}
inline void ValueProto::set_has_array_value() {
  _oneof_case_[0] = kArrayValue;
}
inline void ValueProto::clear_array_value() {
  if (has_array_value()) {
    if (GetArenaNoVirtual() == NULL) {
      delete value_.array_value_;
    }
    clear_has_value();
  }
}
inline const ::zetasql::ValueProto_Array& ValueProto::_internal_array_value() const {
  return *value_.array_value_;
}
inline ::zetasql::ValueProto_Array* ValueProto::release_array_value() {
  // @@protoc_insertion_point(field_release:zetasql.ValueProto.array_value)
  if (has_array_value()) {
    clear_has_value();
      ::zetasql::ValueProto_Array* temp = value_.array_value_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    value_.array_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ValueProto_Array& ValueProto::array_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.array_value)
  return has_array_value()
      ? *value_.array_value_
      : *reinterpret_cast< ::zetasql::ValueProto_Array*>(&::zetasql::_ValueProto_Array_default_instance_);
}
inline ::zetasql::ValueProto_Array* ValueProto::unsafe_arena_release_array_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.ValueProto.array_value)
  if (has_array_value()) {
    clear_has_value();
    ::zetasql::ValueProto_Array* temp = value_.array_value_;
    value_.array_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ValueProto::unsafe_arena_set_allocated_array_value(::zetasql::ValueProto_Array* array_value) {
  clear_value();
  if (array_value) {
    set_has_array_value();
    value_.array_value_ = array_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.ValueProto.array_value)
}
inline ::zetasql::ValueProto_Array* ValueProto::mutable_array_value() {
  if (!has_array_value()) {
    clear_value();
    set_has_array_value();
    value_.array_value_ = CreateMaybeMessage< ::zetasql::ValueProto_Array >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.array_value)
  return value_.array_value_;
}

// optional .zetasql.ValueProto.Struct struct_value = 14;
inline bool ValueProto::has_struct_value() const {
  return value_case() == kStructValue;
}
inline void ValueProto::set_has_struct_value() {
  _oneof_case_[0] = kStructValue;
}
inline void ValueProto::clear_struct_value() {
  if (has_struct_value()) {
    if (GetArenaNoVirtual() == NULL) {
      delete value_.struct_value_;
    }
    clear_has_value();
  }
}
inline const ::zetasql::ValueProto_Struct& ValueProto::_internal_struct_value() const {
  return *value_.struct_value_;
}
inline ::zetasql::ValueProto_Struct* ValueProto::release_struct_value() {
  // @@protoc_insertion_point(field_release:zetasql.ValueProto.struct_value)
  if (has_struct_value()) {
    clear_has_value();
      ::zetasql::ValueProto_Struct* temp = value_.struct_value_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    value_.struct_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ValueProto_Struct& ValueProto::struct_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.struct_value)
  return has_struct_value()
      ? *value_.struct_value_
      : *reinterpret_cast< ::zetasql::ValueProto_Struct*>(&::zetasql::_ValueProto_Struct_default_instance_);
}
inline ::zetasql::ValueProto_Struct* ValueProto::unsafe_arena_release_struct_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.ValueProto.struct_value)
  if (has_struct_value()) {
    clear_has_value();
    ::zetasql::ValueProto_Struct* temp = value_.struct_value_;
    value_.struct_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ValueProto::unsafe_arena_set_allocated_struct_value(::zetasql::ValueProto_Struct* struct_value) {
  clear_value();
  if (struct_value) {
    set_has_struct_value();
    value_.struct_value_ = struct_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.ValueProto.struct_value)
}
inline ::zetasql::ValueProto_Struct* ValueProto::mutable_struct_value() {
  if (!has_struct_value()) {
    clear_value();
    set_has_struct_value();
    value_.struct_value_ = CreateMaybeMessage< ::zetasql::ValueProto_Struct >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.struct_value)
  return value_.struct_value_;
}

// optional bytes proto_value = 15;
inline bool ValueProto::has_proto_value() const {
  return value_case() == kProtoValue;
}
inline void ValueProto::set_has_proto_value() {
  _oneof_case_[0] = kProtoValue;
}
inline void ValueProto::clear_proto_value() {
  if (has_proto_value()) {
    value_.proto_value_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_value();
  }
}
inline const ::std::string& ValueProto::proto_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.proto_value)
  if (has_proto_value()) {
    return value_.proto_value_.Get();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ValueProto::set_proto_value(const ::std::string& value) {
  if (!has_proto_value()) {
    clear_value();
    set_has_proto_value();
    value_.proto_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.proto_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.proto_value)
}
#if LANG_CXX11
inline void ValueProto::set_proto_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.proto_value)
  if (!has_proto_value()) {
    clear_value();
    set_has_proto_value();
    value_.proto_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.proto_value_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ValueProto.proto_value)
}
#endif
inline void ValueProto::set_proto_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_proto_value()) {
    clear_value();
    set_has_proto_value();
    value_.proto_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.proto_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:zetasql.ValueProto.proto_value)
}
inline void ValueProto::set_proto_value(const void* value,
                             size_t size) {
  if (!has_proto_value()) {
    clear_value();
    set_has_proto_value();
    value_.proto_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.proto_value_.Set(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:zetasql.ValueProto.proto_value)
}
inline ::std::string* ValueProto::mutable_proto_value() {
  if (!has_proto_value()) {
    clear_value();
    set_has_proto_value();
    value_.proto_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return value_.proto_value_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.proto_value)
}
inline ::std::string* ValueProto::release_proto_value() {
  // @@protoc_insertion_point(field_release:zetasql.ValueProto.proto_value)
  if (has_proto_value()) {
    clear_has_value();
    return value_.proto_value_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void ValueProto::set_allocated_proto_value(::std::string* proto_value) {
  if (!has_proto_value()) {
    value_.proto_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (proto_value != NULL) {
    set_has_proto_value();
    value_.proto_value_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proto_value,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.ValueProto.proto_value)
}
inline ::std::string* ValueProto::unsafe_arena_release_proto_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.ValueProto.proto_value)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_proto_value()) {
    clear_has_value();
    return value_.proto_value_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void ValueProto::unsafe_arena_set_allocated_proto_value(::std::string* proto_value) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_proto_value()) {
    value_.proto_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (proto_value) {
    set_has_proto_value();
    value_.proto_value_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proto_value, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.ValueProto.proto_value)
}

// optional .google.protobuf.Timestamp timestamp_value = 16;
inline bool ValueProto::has_timestamp_value() const {
  return value_case() == kTimestampValue;
}
inline void ValueProto::set_has_timestamp_value() {
  _oneof_case_[0] = kTimestampValue;
}
inline const ::google::protobuf::Timestamp& ValueProto::_internal_timestamp_value() const {
  return *value_.timestamp_value_;
}
inline ::google::protobuf::Timestamp* ValueProto::release_timestamp_value() {
  // @@protoc_insertion_point(field_release:zetasql.ValueProto.timestamp_value)
  if (has_timestamp_value()) {
    clear_has_value();
      ::google::protobuf::Timestamp* temp = value_.timestamp_value_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    value_.timestamp_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::protobuf::Timestamp& ValueProto::timestamp_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.timestamp_value)
  return has_timestamp_value()
      ? *value_.timestamp_value_
      : *reinterpret_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ValueProto::unsafe_arena_release_timestamp_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.ValueProto.timestamp_value)
  if (has_timestamp_value()) {
    clear_has_value();
    ::google::protobuf::Timestamp* temp = value_.timestamp_value_;
    value_.timestamp_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ValueProto::unsafe_arena_set_allocated_timestamp_value(::google::protobuf::Timestamp* timestamp_value) {
  clear_value();
  if (timestamp_value) {
    set_has_timestamp_value();
    value_.timestamp_value_ = timestamp_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.ValueProto.timestamp_value)
}
inline ::google::protobuf::Timestamp* ValueProto::mutable_timestamp_value() {
  if (!has_timestamp_value()) {
    clear_value();
    set_has_timestamp_value();
    value_.timestamp_value_ = CreateMaybeMessage< ::google::protobuf::Timestamp >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.timestamp_value)
  return value_.timestamp_value_;
}

// optional .zetasql.ValueProto.Datetime datetime_value = 17;
inline bool ValueProto::has_datetime_value() const {
  return value_case() == kDatetimeValue;
}
inline void ValueProto::set_has_datetime_value() {
  _oneof_case_[0] = kDatetimeValue;
}
inline void ValueProto::clear_datetime_value() {
  if (has_datetime_value()) {
    if (GetArenaNoVirtual() == NULL) {
      delete value_.datetime_value_;
    }
    clear_has_value();
  }
}
inline const ::zetasql::ValueProto_Datetime& ValueProto::_internal_datetime_value() const {
  return *value_.datetime_value_;
}
inline ::zetasql::ValueProto_Datetime* ValueProto::release_datetime_value() {
  // @@protoc_insertion_point(field_release:zetasql.ValueProto.datetime_value)
  if (has_datetime_value()) {
    clear_has_value();
      ::zetasql::ValueProto_Datetime* temp = value_.datetime_value_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    value_.datetime_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ValueProto_Datetime& ValueProto::datetime_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.datetime_value)
  return has_datetime_value()
      ? *value_.datetime_value_
      : *reinterpret_cast< ::zetasql::ValueProto_Datetime*>(&::zetasql::_ValueProto_Datetime_default_instance_);
}
inline ::zetasql::ValueProto_Datetime* ValueProto::unsafe_arena_release_datetime_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.ValueProto.datetime_value)
  if (has_datetime_value()) {
    clear_has_value();
    ::zetasql::ValueProto_Datetime* temp = value_.datetime_value_;
    value_.datetime_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ValueProto::unsafe_arena_set_allocated_datetime_value(::zetasql::ValueProto_Datetime* datetime_value) {
  clear_value();
  if (datetime_value) {
    set_has_datetime_value();
    value_.datetime_value_ = datetime_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.ValueProto.datetime_value)
}
inline ::zetasql::ValueProto_Datetime* ValueProto::mutable_datetime_value() {
  if (!has_datetime_value()) {
    clear_value();
    set_has_datetime_value();
    value_.datetime_value_ = CreateMaybeMessage< ::zetasql::ValueProto_Datetime >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.datetime_value)
  return value_.datetime_value_;
}

// optional int64 time_value = 18;
inline bool ValueProto::has_time_value() const {
  return value_case() == kTimeValue;
}
inline void ValueProto::set_has_time_value() {
  _oneof_case_[0] = kTimeValue;
}
inline void ValueProto::clear_time_value() {
  if (has_time_value()) {
    value_.time_value_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::int64 ValueProto::time_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.time_value)
  if (has_time_value()) {
    return value_.time_value_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void ValueProto::set_time_value(::google::protobuf::int64 value) {
  if (!has_time_value()) {
    clear_value();
    set_has_time_value();
  }
  value_.time_value_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.time_value)
}

// optional bytes geography_value = 19;
inline bool ValueProto::has_geography_value() const {
  return value_case() == kGeographyValue;
}
inline void ValueProto::set_has_geography_value() {
  _oneof_case_[0] = kGeographyValue;
}
inline void ValueProto::clear_geography_value() {
  if (has_geography_value()) {
    value_.geography_value_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_value();
  }
}
inline const ::std::string& ValueProto::geography_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.geography_value)
  if (has_geography_value()) {
    return value_.geography_value_.Get();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ValueProto::set_geography_value(const ::std::string& value) {
  if (!has_geography_value()) {
    clear_value();
    set_has_geography_value();
    value_.geography_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.geography_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.geography_value)
}
#if LANG_CXX11
inline void ValueProto::set_geography_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.geography_value)
  if (!has_geography_value()) {
    clear_value();
    set_has_geography_value();
    value_.geography_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.geography_value_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ValueProto.geography_value)
}
#endif
inline void ValueProto::set_geography_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_geography_value()) {
    clear_value();
    set_has_geography_value();
    value_.geography_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.geography_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:zetasql.ValueProto.geography_value)
}
inline void ValueProto::set_geography_value(const void* value,
                             size_t size) {
  if (!has_geography_value()) {
    clear_value();
    set_has_geography_value();
    value_.geography_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.geography_value_.Set(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:zetasql.ValueProto.geography_value)
}
inline ::std::string* ValueProto::mutable_geography_value() {
  if (!has_geography_value()) {
    clear_value();
    set_has_geography_value();
    value_.geography_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return value_.geography_value_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.geography_value)
}
inline ::std::string* ValueProto::release_geography_value() {
  // @@protoc_insertion_point(field_release:zetasql.ValueProto.geography_value)
  if (has_geography_value()) {
    clear_has_value();
    return value_.geography_value_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void ValueProto::set_allocated_geography_value(::std::string* geography_value) {
  if (!has_geography_value()) {
    value_.geography_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (geography_value != NULL) {
    set_has_geography_value();
    value_.geography_value_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), geography_value,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.ValueProto.geography_value)
}
inline ::std::string* ValueProto::unsafe_arena_release_geography_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.ValueProto.geography_value)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_geography_value()) {
    clear_has_value();
    return value_.geography_value_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void ValueProto::unsafe_arena_set_allocated_geography_value(::std::string* geography_value) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_geography_value()) {
    value_.geography_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (geography_value) {
    set_has_geography_value();
    value_.geography_value_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), geography_value, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.ValueProto.geography_value)
}

// optional bytes numeric_value = 20;
inline bool ValueProto::has_numeric_value() const {
  return value_case() == kNumericValue;
}
inline void ValueProto::set_has_numeric_value() {
  _oneof_case_[0] = kNumericValue;
}
inline void ValueProto::clear_numeric_value() {
  if (has_numeric_value()) {
    value_.numeric_value_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_value();
  }
}
inline const ::std::string& ValueProto::numeric_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.numeric_value)
  if (has_numeric_value()) {
    return value_.numeric_value_.Get();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ValueProto::set_numeric_value(const ::std::string& value) {
  if (!has_numeric_value()) {
    clear_value();
    set_has_numeric_value();
    value_.numeric_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.numeric_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.numeric_value)
}
#if LANG_CXX11
inline void ValueProto::set_numeric_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.numeric_value)
  if (!has_numeric_value()) {
    clear_value();
    set_has_numeric_value();
    value_.numeric_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.numeric_value_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ValueProto.numeric_value)
}
#endif
inline void ValueProto::set_numeric_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_numeric_value()) {
    clear_value();
    set_has_numeric_value();
    value_.numeric_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.numeric_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:zetasql.ValueProto.numeric_value)
}
inline void ValueProto::set_numeric_value(const void* value,
                             size_t size) {
  if (!has_numeric_value()) {
    clear_value();
    set_has_numeric_value();
    value_.numeric_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.numeric_value_.Set(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:zetasql.ValueProto.numeric_value)
}
inline ::std::string* ValueProto::mutable_numeric_value() {
  if (!has_numeric_value()) {
    clear_value();
    set_has_numeric_value();
    value_.numeric_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return value_.numeric_value_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.numeric_value)
}
inline ::std::string* ValueProto::release_numeric_value() {
  // @@protoc_insertion_point(field_release:zetasql.ValueProto.numeric_value)
  if (has_numeric_value()) {
    clear_has_value();
    return value_.numeric_value_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void ValueProto::set_allocated_numeric_value(::std::string* numeric_value) {
  if (!has_numeric_value()) {
    value_.numeric_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (numeric_value != NULL) {
    set_has_numeric_value();
    value_.numeric_value_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), numeric_value,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.ValueProto.numeric_value)
}
inline ::std::string* ValueProto::unsafe_arena_release_numeric_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.ValueProto.numeric_value)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_numeric_value()) {
    clear_has_value();
    return value_.numeric_value_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void ValueProto::unsafe_arena_set_allocated_numeric_value(::std::string* numeric_value) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_numeric_value()) {
    value_.numeric_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (numeric_value) {
    set_has_numeric_value();
    value_.numeric_value_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), numeric_value, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.ValueProto.numeric_value)
}

// optional bytes bignumeric_value = 21;
inline bool ValueProto::has_bignumeric_value() const {
  return value_case() == kBignumericValue;
}
inline void ValueProto::set_has_bignumeric_value() {
  _oneof_case_[0] = kBignumericValue;
}
inline void ValueProto::clear_bignumeric_value() {
  if (has_bignumeric_value()) {
    value_.bignumeric_value_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_value();
  }
}
inline const ::std::string& ValueProto::bignumeric_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.bignumeric_value)
  if (has_bignumeric_value()) {
    return value_.bignumeric_value_.Get();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ValueProto::set_bignumeric_value(const ::std::string& value) {
  if (!has_bignumeric_value()) {
    clear_value();
    set_has_bignumeric_value();
    value_.bignumeric_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.bignumeric_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.bignumeric_value)
}
#if LANG_CXX11
inline void ValueProto::set_bignumeric_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.bignumeric_value)
  if (!has_bignumeric_value()) {
    clear_value();
    set_has_bignumeric_value();
    value_.bignumeric_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.bignumeric_value_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ValueProto.bignumeric_value)
}
#endif
inline void ValueProto::set_bignumeric_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_bignumeric_value()) {
    clear_value();
    set_has_bignumeric_value();
    value_.bignumeric_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.bignumeric_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:zetasql.ValueProto.bignumeric_value)
}
inline void ValueProto::set_bignumeric_value(const void* value,
                             size_t size) {
  if (!has_bignumeric_value()) {
    clear_value();
    set_has_bignumeric_value();
    value_.bignumeric_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.bignumeric_value_.Set(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:zetasql.ValueProto.bignumeric_value)
}
inline ::std::string* ValueProto::mutable_bignumeric_value() {
  if (!has_bignumeric_value()) {
    clear_value();
    set_has_bignumeric_value();
    value_.bignumeric_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return value_.bignumeric_value_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.bignumeric_value)
}
inline ::std::string* ValueProto::release_bignumeric_value() {
  // @@protoc_insertion_point(field_release:zetasql.ValueProto.bignumeric_value)
  if (has_bignumeric_value()) {
    clear_has_value();
    return value_.bignumeric_value_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void ValueProto::set_allocated_bignumeric_value(::std::string* bignumeric_value) {
  if (!has_bignumeric_value()) {
    value_.bignumeric_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (bignumeric_value != NULL) {
    set_has_bignumeric_value();
    value_.bignumeric_value_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bignumeric_value,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.ValueProto.bignumeric_value)
}
inline ::std::string* ValueProto::unsafe_arena_release_bignumeric_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.ValueProto.bignumeric_value)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_bignumeric_value()) {
    clear_has_value();
    return value_.bignumeric_value_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void ValueProto::unsafe_arena_set_allocated_bignumeric_value(::std::string* bignumeric_value) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_bignumeric_value()) {
    value_.bignumeric_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (bignumeric_value) {
    set_has_bignumeric_value();
    value_.bignumeric_value_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bignumeric_value, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.ValueProto.bignumeric_value)
}

// optional string json_value = 23;
inline bool ValueProto::has_json_value() const {
  return value_case() == kJsonValue;
}
inline void ValueProto::set_has_json_value() {
  _oneof_case_[0] = kJsonValue;
}
inline void ValueProto::clear_json_value() {
  if (has_json_value()) {
    value_.json_value_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_value();
  }
}
inline const ::std::string& ValueProto::json_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.json_value)
  if (has_json_value()) {
    return value_.json_value_.Get();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ValueProto::set_json_value(const ::std::string& value) {
  if (!has_json_value()) {
    clear_value();
    set_has_json_value();
    value_.json_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.json_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.json_value)
}
#if LANG_CXX11
inline void ValueProto::set_json_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.json_value)
  if (!has_json_value()) {
    clear_value();
    set_has_json_value();
    value_.json_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.json_value_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ValueProto.json_value)
}
#endif
inline void ValueProto::set_json_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_json_value()) {
    clear_value();
    set_has_json_value();
    value_.json_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.json_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:zetasql.ValueProto.json_value)
}
inline void ValueProto::set_json_value(const char* value,
                             size_t size) {
  if (!has_json_value()) {
    clear_value();
    set_has_json_value();
    value_.json_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.json_value_.Set(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:zetasql.ValueProto.json_value)
}
inline ::std::string* ValueProto::mutable_json_value() {
  if (!has_json_value()) {
    clear_value();
    set_has_json_value();
    value_.json_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return value_.json_value_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.json_value)
}
inline ::std::string* ValueProto::release_json_value() {
  // @@protoc_insertion_point(field_release:zetasql.ValueProto.json_value)
  if (has_json_value()) {
    clear_has_value();
    return value_.json_value_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void ValueProto::set_allocated_json_value(::std::string* json_value) {
  if (!has_json_value()) {
    value_.json_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (json_value != NULL) {
    set_has_json_value();
    value_.json_value_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json_value,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.ValueProto.json_value)
}
inline ::std::string* ValueProto::unsafe_arena_release_json_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.ValueProto.json_value)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_json_value()) {
    clear_has_value();
    return value_.json_value_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void ValueProto::unsafe_arena_set_allocated_json_value(::std::string* json_value) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_json_value()) {
    value_.json_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (json_value) {
    set_has_json_value();
    value_.json_value_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json_value, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.ValueProto.json_value)
}

// optional bytes interval_value = 24;
inline bool ValueProto::has_interval_value() const {
  return value_case() == kIntervalValue;
}
inline void ValueProto::set_has_interval_value() {
  _oneof_case_[0] = kIntervalValue;
}
inline void ValueProto::clear_interval_value() {
  if (has_interval_value()) {
    value_.interval_value_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_value();
  }
}
inline const ::std::string& ValueProto::interval_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.interval_value)
  if (has_interval_value()) {
    return value_.interval_value_.Get();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ValueProto::set_interval_value(const ::std::string& value) {
  if (!has_interval_value()) {
    clear_value();
    set_has_interval_value();
    value_.interval_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.interval_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.interval_value)
}
#if LANG_CXX11
inline void ValueProto::set_interval_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.interval_value)
  if (!has_interval_value()) {
    clear_value();
    set_has_interval_value();
    value_.interval_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.interval_value_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ValueProto.interval_value)
}
#endif
inline void ValueProto::set_interval_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_interval_value()) {
    clear_value();
    set_has_interval_value();
    value_.interval_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.interval_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:zetasql.ValueProto.interval_value)
}
inline void ValueProto::set_interval_value(const void* value,
                             size_t size) {
  if (!has_interval_value()) {
    clear_value();
    set_has_interval_value();
    value_.interval_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.interval_value_.Set(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:zetasql.ValueProto.interval_value)
}
inline ::std::string* ValueProto::mutable_interval_value() {
  if (!has_interval_value()) {
    clear_value();
    set_has_interval_value();
    value_.interval_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return value_.interval_value_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.interval_value)
}
inline ::std::string* ValueProto::release_interval_value() {
  // @@protoc_insertion_point(field_release:zetasql.ValueProto.interval_value)
  if (has_interval_value()) {
    clear_has_value();
    return value_.interval_value_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void ValueProto::set_allocated_interval_value(::std::string* interval_value) {
  if (!has_interval_value()) {
    value_.interval_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (interval_value != NULL) {
    set_has_interval_value();
    value_.interval_value_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interval_value,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.ValueProto.interval_value)
}
inline ::std::string* ValueProto::unsafe_arena_release_interval_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.ValueProto.interval_value)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_interval_value()) {
    clear_has_value();
    return value_.interval_value_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void ValueProto::unsafe_arena_set_allocated_interval_value(::std::string* interval_value) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_interval_value()) {
    value_.interval_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (interval_value) {
    set_has_interval_value();
    value_.interval_value_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interval_value, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.ValueProto.interval_value)
}

// optional bool __ValueProto__switch_must_have_a_default = 255;
inline bool ValueProto::has___valueproto__switch_must_have_a_default() const {
  return value_case() == kValueProtoSwitchMustHaveADefault;
}
inline void ValueProto::set_has___valueproto__switch_must_have_a_default() {
  _oneof_case_[0] = kValueProtoSwitchMustHaveADefault;
}
inline void ValueProto::clear___valueproto__switch_must_have_a_default() {
  if (has___valueproto__switch_must_have_a_default()) {
    value_.__valueproto__switch_must_have_a_default_ = false;
    clear_has_value();
  }
}
inline bool ValueProto::__valueproto__switch_must_have_a_default() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.__ValueProto__switch_must_have_a_default)
  if (has___valueproto__switch_must_have_a_default()) {
    return value_.__valueproto__switch_must_have_a_default_;
  }
  return false;
}
inline void ValueProto::set___valueproto__switch_must_have_a_default(bool value) {
  if (!has___valueproto__switch_must_have_a_default()) {
    clear_value();
    set_has___valueproto__switch_must_have_a_default();
  }
  value_.__valueproto__switch_must_have_a_default_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.__ValueProto__switch_must_have_a_default)
}

inline bool ValueProto::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ValueProto::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ValueProto::ValueCase ValueProto::value_case() const {
  return ValueProto::ValueCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_zetasql_2fpublic_2fvalue_2eproto
