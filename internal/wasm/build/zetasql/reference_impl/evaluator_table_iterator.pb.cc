// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/reference_impl/evaluator_table_iterator.proto

#include "zetasql/reference_impl/evaluator_table_iterator.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace zetasql {
class EvaluatorTableIteratorProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EvaluatorTableIteratorProto>
      _instance;
} _EvaluatorTableIteratorProto_default_instance_;
}  // namespace zetasql
namespace protobuf_zetasql_2freference_5fimpl_2fevaluator_5ftable_5fiterator_2eproto {
static void InitDefaultsEvaluatorTableIteratorProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_EvaluatorTableIteratorProto_default_instance_;
    new (ptr) ::zetasql::EvaluatorTableIteratorProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::EvaluatorTableIteratorProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EvaluatorTableIteratorProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEvaluatorTableIteratorProto}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_EvaluatorTableIteratorProto.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::EvaluatorTableIteratorProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::EvaluatorTableIteratorProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::EvaluatorTableIteratorProto, location_byte_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::EvaluatorTableIteratorProto, next_row_count_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::zetasql::EvaluatorTableIteratorProto)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_EvaluatorTableIteratorProto_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "zetasql/reference_impl/evaluator_table_iterator.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n5zetasql/reference_impl/evaluator_table"
      "_iterator.proto\022\007zetasql\"S\n\033EvaluatorTab"
      "leIteratorProto\022\034\n\024location_byte_offset\030"
      "\001 \001(\005\022\026\n\016next_row_count\030\002 \001(\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 149);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zetasql/reference_impl/evaluator_table_iterator.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_zetasql_2freference_5fimpl_2fevaluator_5ftable_5fiterator_2eproto
namespace zetasql {

// ===================================================================

void EvaluatorTableIteratorProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EvaluatorTableIteratorProto::kLocationByteOffsetFieldNumber;
const int EvaluatorTableIteratorProto::kNextRowCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EvaluatorTableIteratorProto::EvaluatorTableIteratorProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2freference_5fimpl_2fevaluator_5ftable_5fiterator_2eproto::scc_info_EvaluatorTableIteratorProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.EvaluatorTableIteratorProto)
}
EvaluatorTableIteratorProto::EvaluatorTableIteratorProto(const EvaluatorTableIteratorProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&next_row_count_, &from.next_row_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&location_byte_offset_) -
    reinterpret_cast<char*>(&next_row_count_)) + sizeof(location_byte_offset_));
  // @@protoc_insertion_point(copy_constructor:zetasql.EvaluatorTableIteratorProto)
}

void EvaluatorTableIteratorProto::SharedCtor() {
  ::memset(&next_row_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&location_byte_offset_) -
      reinterpret_cast<char*>(&next_row_count_)) + sizeof(location_byte_offset_));
}

EvaluatorTableIteratorProto::~EvaluatorTableIteratorProto() {
  // @@protoc_insertion_point(destructor:zetasql.EvaluatorTableIteratorProto)
  SharedDtor();
}

void EvaluatorTableIteratorProto::SharedDtor() {
}

void EvaluatorTableIteratorProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EvaluatorTableIteratorProto::descriptor() {
  ::protobuf_zetasql_2freference_5fimpl_2fevaluator_5ftable_5fiterator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2freference_5fimpl_2fevaluator_5ftable_5fiterator_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EvaluatorTableIteratorProto& EvaluatorTableIteratorProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2freference_5fimpl_2fevaluator_5ftable_5fiterator_2eproto::scc_info_EvaluatorTableIteratorProto.base);
  return *internal_default_instance();
}


void EvaluatorTableIteratorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.EvaluatorTableIteratorProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&next_row_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&location_byte_offset_) -
        reinterpret_cast<char*>(&next_row_count_)) + sizeof(location_byte_offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EvaluatorTableIteratorProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.EvaluatorTableIteratorProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 location_byte_offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_location_byte_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &location_byte_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 next_row_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_next_row_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_row_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.EvaluatorTableIteratorProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.EvaluatorTableIteratorProto)
  return false;
#undef DO_
}

void EvaluatorTableIteratorProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.EvaluatorTableIteratorProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 location_byte_offset = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->location_byte_offset(), output);
  }

  // optional int64 next_row_count = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->next_row_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.EvaluatorTableIteratorProto)
}

::google::protobuf::uint8* EvaluatorTableIteratorProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.EvaluatorTableIteratorProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 location_byte_offset = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->location_byte_offset(), target);
  }

  // optional int64 next_row_count = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->next_row_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.EvaluatorTableIteratorProto)
  return target;
}

size_t EvaluatorTableIteratorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.EvaluatorTableIteratorProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 next_row_count = 2;
    if (has_next_row_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->next_row_count());
    }

    // optional int32 location_byte_offset = 1;
    if (has_location_byte_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->location_byte_offset());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EvaluatorTableIteratorProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.EvaluatorTableIteratorProto)
  GOOGLE_DCHECK_NE(&from, this);
  const EvaluatorTableIteratorProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EvaluatorTableIteratorProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.EvaluatorTableIteratorProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.EvaluatorTableIteratorProto)
    MergeFrom(*source);
  }
}

void EvaluatorTableIteratorProto::MergeFrom(const EvaluatorTableIteratorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.EvaluatorTableIteratorProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      next_row_count_ = from.next_row_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      location_byte_offset_ = from.location_byte_offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EvaluatorTableIteratorProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.EvaluatorTableIteratorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvaluatorTableIteratorProto::CopyFrom(const EvaluatorTableIteratorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.EvaluatorTableIteratorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvaluatorTableIteratorProto::IsInitialized() const {
  return true;
}

void EvaluatorTableIteratorProto::Swap(EvaluatorTableIteratorProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EvaluatorTableIteratorProto::InternalSwap(EvaluatorTableIteratorProto* other) {
  using std::swap;
  swap(next_row_count_, other->next_row_count_);
  swap(location_byte_offset_, other->location_byte_offset_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EvaluatorTableIteratorProto::GetMetadata() const {
  protobuf_zetasql_2freference_5fimpl_2fevaluator_5ftable_5fiterator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2freference_5fimpl_2fevaluator_5ftable_5fiterator_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace zetasql
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::EvaluatorTableIteratorProto* Arena::CreateMaybeMessage< ::zetasql::EvaluatorTableIteratorProto >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::EvaluatorTableIteratorProto >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
