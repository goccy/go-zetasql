// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/resolved_ast/resolved_ast.proto

#ifndef PROTOBUF_INCLUDED_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto
#define PROTOBUF_INCLUDED_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "zetasql/public/annotation.pb.h"
#include "zetasql/public/proto/type_annotation.pb.h"
#include "zetasql/public/type.pb.h"
#include "zetasql/public/type_parameters.pb.h"
#include "zetasql/proto/function.pb.h"
#include "zetasql/resolved_ast/serialization.pb.h"
#include "zetasql/resolved_ast/resolved_ast_enums.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto 

namespace protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[213];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto
namespace zetasql {
class AnyResolvedAggregateScanBaseProto;
class AnyResolvedAggregateScanBaseProtoDefaultTypeInternal;
extern AnyResolvedAggregateScanBaseProtoDefaultTypeInternal _AnyResolvedAggregateScanBaseProto_default_instance_;
class AnyResolvedAlterActionProto;
class AnyResolvedAlterActionProtoDefaultTypeInternal;
extern AnyResolvedAlterActionProtoDefaultTypeInternal _AnyResolvedAlterActionProto_default_instance_;
class AnyResolvedAlterColumnActionProto;
class AnyResolvedAlterColumnActionProtoDefaultTypeInternal;
extern AnyResolvedAlterColumnActionProtoDefaultTypeInternal _AnyResolvedAlterColumnActionProto_default_instance_;
class AnyResolvedAlterObjectStmtProto;
class AnyResolvedAlterObjectStmtProtoDefaultTypeInternal;
extern AnyResolvedAlterObjectStmtProtoDefaultTypeInternal _AnyResolvedAlterObjectStmtProto_default_instance_;
class AnyResolvedArgumentProto;
class AnyResolvedArgumentProtoDefaultTypeInternal;
extern AnyResolvedArgumentProtoDefaultTypeInternal _AnyResolvedArgumentProto_default_instance_;
class AnyResolvedConstraintProto;
class AnyResolvedConstraintProtoDefaultTypeInternal;
extern AnyResolvedConstraintProtoDefaultTypeInternal _AnyResolvedConstraintProto_default_instance_;
class AnyResolvedCreateStatementProto;
class AnyResolvedCreateStatementProtoDefaultTypeInternal;
extern AnyResolvedCreateStatementProtoDefaultTypeInternal _AnyResolvedCreateStatementProto_default_instance_;
class AnyResolvedCreateTableStmtBaseProto;
class AnyResolvedCreateTableStmtBaseProtoDefaultTypeInternal;
extern AnyResolvedCreateTableStmtBaseProtoDefaultTypeInternal _AnyResolvedCreateTableStmtBaseProto_default_instance_;
class AnyResolvedCreateViewBaseProto;
class AnyResolvedCreateViewBaseProtoDefaultTypeInternal;
extern AnyResolvedCreateViewBaseProtoDefaultTypeInternal _AnyResolvedCreateViewBaseProto_default_instance_;
class AnyResolvedExprProto;
class AnyResolvedExprProtoDefaultTypeInternal;
extern AnyResolvedExprProtoDefaultTypeInternal _AnyResolvedExprProto_default_instance_;
class AnyResolvedFunctionCallBaseProto;
class AnyResolvedFunctionCallBaseProtoDefaultTypeInternal;
extern AnyResolvedFunctionCallBaseProtoDefaultTypeInternal _AnyResolvedFunctionCallBaseProto_default_instance_;
class AnyResolvedGrantOrRevokeStmtProto;
class AnyResolvedGrantOrRevokeStmtProtoDefaultTypeInternal;
extern AnyResolvedGrantOrRevokeStmtProtoDefaultTypeInternal _AnyResolvedGrantOrRevokeStmtProto_default_instance_;
class AnyResolvedNodeProto;
class AnyResolvedNodeProtoDefaultTypeInternal;
extern AnyResolvedNodeProtoDefaultTypeInternal _AnyResolvedNodeProto_default_instance_;
class AnyResolvedNonScalarFunctionCallBaseProto;
class AnyResolvedNonScalarFunctionCallBaseProtoDefaultTypeInternal;
extern AnyResolvedNonScalarFunctionCallBaseProtoDefaultTypeInternal _AnyResolvedNonScalarFunctionCallBaseProto_default_instance_;
class AnyResolvedScanProto;
class AnyResolvedScanProtoDefaultTypeInternal;
extern AnyResolvedScanProtoDefaultTypeInternal _AnyResolvedScanProto_default_instance_;
class AnyResolvedStatementProto;
class AnyResolvedStatementProtoDefaultTypeInternal;
extern AnyResolvedStatementProtoDefaultTypeInternal _AnyResolvedStatementProto_default_instance_;
class ResolvedAbortBatchStmtProto;
class ResolvedAbortBatchStmtProtoDefaultTypeInternal;
extern ResolvedAbortBatchStmtProtoDefaultTypeInternal _ResolvedAbortBatchStmtProto_default_instance_;
class ResolvedAddColumnActionProto;
class ResolvedAddColumnActionProtoDefaultTypeInternal;
extern ResolvedAddColumnActionProtoDefaultTypeInternal _ResolvedAddColumnActionProto_default_instance_;
class ResolvedAddConstraintActionProto;
class ResolvedAddConstraintActionProtoDefaultTypeInternal;
extern ResolvedAddConstraintActionProtoDefaultTypeInternal _ResolvedAddConstraintActionProto_default_instance_;
class ResolvedAddToRestricteeListActionProto;
class ResolvedAddToRestricteeListActionProtoDefaultTypeInternal;
extern ResolvedAddToRestricteeListActionProtoDefaultTypeInternal _ResolvedAddToRestricteeListActionProto_default_instance_;
class ResolvedAggregateFunctionCallProto;
class ResolvedAggregateFunctionCallProtoDefaultTypeInternal;
extern ResolvedAggregateFunctionCallProtoDefaultTypeInternal _ResolvedAggregateFunctionCallProto_default_instance_;
class ResolvedAggregateHavingModifierProto;
class ResolvedAggregateHavingModifierProtoDefaultTypeInternal;
extern ResolvedAggregateHavingModifierProtoDefaultTypeInternal _ResolvedAggregateHavingModifierProto_default_instance_;
class ResolvedAggregateScanBaseProto;
class ResolvedAggregateScanBaseProtoDefaultTypeInternal;
extern ResolvedAggregateScanBaseProtoDefaultTypeInternal _ResolvedAggregateScanBaseProto_default_instance_;
class ResolvedAggregateScanProto;
class ResolvedAggregateScanProtoDefaultTypeInternal;
extern ResolvedAggregateScanProtoDefaultTypeInternal _ResolvedAggregateScanProto_default_instance_;
class ResolvedAlterActionProto;
class ResolvedAlterActionProtoDefaultTypeInternal;
extern ResolvedAlterActionProtoDefaultTypeInternal _ResolvedAlterActionProto_default_instance_;
class ResolvedAlterAllRowAccessPoliciesStmtProto;
class ResolvedAlterAllRowAccessPoliciesStmtProtoDefaultTypeInternal;
extern ResolvedAlterAllRowAccessPoliciesStmtProtoDefaultTypeInternal _ResolvedAlterAllRowAccessPoliciesStmtProto_default_instance_;
class ResolvedAlterColumnActionProto;
class ResolvedAlterColumnActionProtoDefaultTypeInternal;
extern ResolvedAlterColumnActionProtoDefaultTypeInternal _ResolvedAlterColumnActionProto_default_instance_;
class ResolvedAlterColumnDropDefaultActionProto;
class ResolvedAlterColumnDropDefaultActionProtoDefaultTypeInternal;
extern ResolvedAlterColumnDropDefaultActionProtoDefaultTypeInternal _ResolvedAlterColumnDropDefaultActionProto_default_instance_;
class ResolvedAlterColumnDropNotNullActionProto;
class ResolvedAlterColumnDropNotNullActionProtoDefaultTypeInternal;
extern ResolvedAlterColumnDropNotNullActionProtoDefaultTypeInternal _ResolvedAlterColumnDropNotNullActionProto_default_instance_;
class ResolvedAlterColumnOptionsActionProto;
class ResolvedAlterColumnOptionsActionProtoDefaultTypeInternal;
extern ResolvedAlterColumnOptionsActionProtoDefaultTypeInternal _ResolvedAlterColumnOptionsActionProto_default_instance_;
class ResolvedAlterColumnSetDataTypeActionProto;
class ResolvedAlterColumnSetDataTypeActionProtoDefaultTypeInternal;
extern ResolvedAlterColumnSetDataTypeActionProtoDefaultTypeInternal _ResolvedAlterColumnSetDataTypeActionProto_default_instance_;
class ResolvedAlterColumnSetDefaultActionProto;
class ResolvedAlterColumnSetDefaultActionProtoDefaultTypeInternal;
extern ResolvedAlterColumnSetDefaultActionProtoDefaultTypeInternal _ResolvedAlterColumnSetDefaultActionProto_default_instance_;
class ResolvedAlterDatabaseStmtProto;
class ResolvedAlterDatabaseStmtProtoDefaultTypeInternal;
extern ResolvedAlterDatabaseStmtProtoDefaultTypeInternal _ResolvedAlterDatabaseStmtProto_default_instance_;
class ResolvedAlterEntityStmtProto;
class ResolvedAlterEntityStmtProtoDefaultTypeInternal;
extern ResolvedAlterEntityStmtProtoDefaultTypeInternal _ResolvedAlterEntityStmtProto_default_instance_;
class ResolvedAlterMaterializedViewStmtProto;
class ResolvedAlterMaterializedViewStmtProtoDefaultTypeInternal;
extern ResolvedAlterMaterializedViewStmtProtoDefaultTypeInternal _ResolvedAlterMaterializedViewStmtProto_default_instance_;
class ResolvedAlterObjectStmtProto;
class ResolvedAlterObjectStmtProtoDefaultTypeInternal;
extern ResolvedAlterObjectStmtProtoDefaultTypeInternal _ResolvedAlterObjectStmtProto_default_instance_;
class ResolvedAlterPrivilegeRestrictionStmtProto;
class ResolvedAlterPrivilegeRestrictionStmtProtoDefaultTypeInternal;
extern ResolvedAlterPrivilegeRestrictionStmtProtoDefaultTypeInternal _ResolvedAlterPrivilegeRestrictionStmtProto_default_instance_;
class ResolvedAlterRowAccessPolicyStmtProto;
class ResolvedAlterRowAccessPolicyStmtProtoDefaultTypeInternal;
extern ResolvedAlterRowAccessPolicyStmtProtoDefaultTypeInternal _ResolvedAlterRowAccessPolicyStmtProto_default_instance_;
class ResolvedAlterSchemaStmtProto;
class ResolvedAlterSchemaStmtProtoDefaultTypeInternal;
extern ResolvedAlterSchemaStmtProtoDefaultTypeInternal _ResolvedAlterSchemaStmtProto_default_instance_;
class ResolvedAlterTableSetOptionsStmtProto;
class ResolvedAlterTableSetOptionsStmtProtoDefaultTypeInternal;
extern ResolvedAlterTableSetOptionsStmtProtoDefaultTypeInternal _ResolvedAlterTableSetOptionsStmtProto_default_instance_;
class ResolvedAlterTableStmtProto;
class ResolvedAlterTableStmtProtoDefaultTypeInternal;
extern ResolvedAlterTableStmtProtoDefaultTypeInternal _ResolvedAlterTableStmtProto_default_instance_;
class ResolvedAlterViewStmtProto;
class ResolvedAlterViewStmtProtoDefaultTypeInternal;
extern ResolvedAlterViewStmtProtoDefaultTypeInternal _ResolvedAlterViewStmtProto_default_instance_;
class ResolvedAnalyticFunctionCallProto;
class ResolvedAnalyticFunctionCallProtoDefaultTypeInternal;
extern ResolvedAnalyticFunctionCallProtoDefaultTypeInternal _ResolvedAnalyticFunctionCallProto_default_instance_;
class ResolvedAnalyticFunctionGroupProto;
class ResolvedAnalyticFunctionGroupProtoDefaultTypeInternal;
extern ResolvedAnalyticFunctionGroupProtoDefaultTypeInternal _ResolvedAnalyticFunctionGroupProto_default_instance_;
class ResolvedAnalyticScanProto;
class ResolvedAnalyticScanProtoDefaultTypeInternal;
extern ResolvedAnalyticScanProtoDefaultTypeInternal _ResolvedAnalyticScanProto_default_instance_;
class ResolvedAnalyzeStmtProto;
class ResolvedAnalyzeStmtProtoDefaultTypeInternal;
extern ResolvedAnalyzeStmtProtoDefaultTypeInternal _ResolvedAnalyzeStmtProto_default_instance_;
class ResolvedAnonymizedAggregateScanProto;
class ResolvedAnonymizedAggregateScanProtoDefaultTypeInternal;
extern ResolvedAnonymizedAggregateScanProtoDefaultTypeInternal _ResolvedAnonymizedAggregateScanProto_default_instance_;
class ResolvedArgumentDefProto;
class ResolvedArgumentDefProtoDefaultTypeInternal;
extern ResolvedArgumentDefProtoDefaultTypeInternal _ResolvedArgumentDefProto_default_instance_;
class ResolvedArgumentListProto;
class ResolvedArgumentListProtoDefaultTypeInternal;
extern ResolvedArgumentListProtoDefaultTypeInternal _ResolvedArgumentListProto_default_instance_;
class ResolvedArgumentProto;
class ResolvedArgumentProtoDefaultTypeInternal;
extern ResolvedArgumentProtoDefaultTypeInternal _ResolvedArgumentProto_default_instance_;
class ResolvedArgumentRefProto;
class ResolvedArgumentRefProtoDefaultTypeInternal;
extern ResolvedArgumentRefProtoDefaultTypeInternal _ResolvedArgumentRefProto_default_instance_;
class ResolvedArrayScanProto;
class ResolvedArrayScanProtoDefaultTypeInternal;
extern ResolvedArrayScanProtoDefaultTypeInternal _ResolvedArrayScanProto_default_instance_;
class ResolvedAssertRowsModifiedProto;
class ResolvedAssertRowsModifiedProtoDefaultTypeInternal;
extern ResolvedAssertRowsModifiedProtoDefaultTypeInternal _ResolvedAssertRowsModifiedProto_default_instance_;
class ResolvedAssertStmtProto;
class ResolvedAssertStmtProtoDefaultTypeInternal;
extern ResolvedAssertStmtProtoDefaultTypeInternal _ResolvedAssertStmtProto_default_instance_;
class ResolvedAssignmentStmtProto;
class ResolvedAssignmentStmtProtoDefaultTypeInternal;
extern ResolvedAssignmentStmtProtoDefaultTypeInternal _ResolvedAssignmentStmtProto_default_instance_;
class ResolvedAuxLoadDataStmtProto;
class ResolvedAuxLoadDataStmtProtoDefaultTypeInternal;
extern ResolvedAuxLoadDataStmtProtoDefaultTypeInternal _ResolvedAuxLoadDataStmtProto_default_instance_;
class ResolvedBeginStmtProto;
class ResolvedBeginStmtProtoDefaultTypeInternal;
extern ResolvedBeginStmtProtoDefaultTypeInternal _ResolvedBeginStmtProto_default_instance_;
class ResolvedCallStmtProto;
class ResolvedCallStmtProtoDefaultTypeInternal;
extern ResolvedCallStmtProtoDefaultTypeInternal _ResolvedCallStmtProto_default_instance_;
class ResolvedCastProto;
class ResolvedCastProtoDefaultTypeInternal;
extern ResolvedCastProtoDefaultTypeInternal _ResolvedCastProto_default_instance_;
class ResolvedCheckConstraintProto;
class ResolvedCheckConstraintProtoDefaultTypeInternal;
extern ResolvedCheckConstraintProtoDefaultTypeInternal _ResolvedCheckConstraintProto_default_instance_;
class ResolvedCloneDataStmtProto;
class ResolvedCloneDataStmtProtoDefaultTypeInternal;
extern ResolvedCloneDataStmtProtoDefaultTypeInternal _ResolvedCloneDataStmtProto_default_instance_;
class ResolvedColumnAnnotationsProto;
class ResolvedColumnAnnotationsProtoDefaultTypeInternal;
extern ResolvedColumnAnnotationsProtoDefaultTypeInternal _ResolvedColumnAnnotationsProto_default_instance_;
class ResolvedColumnDefaultValueProto;
class ResolvedColumnDefaultValueProtoDefaultTypeInternal;
extern ResolvedColumnDefaultValueProtoDefaultTypeInternal _ResolvedColumnDefaultValueProto_default_instance_;
class ResolvedColumnDefinitionProto;
class ResolvedColumnDefinitionProtoDefaultTypeInternal;
extern ResolvedColumnDefinitionProtoDefaultTypeInternal _ResolvedColumnDefinitionProto_default_instance_;
class ResolvedColumnHolderProto;
class ResolvedColumnHolderProtoDefaultTypeInternal;
extern ResolvedColumnHolderProtoDefaultTypeInternal _ResolvedColumnHolderProto_default_instance_;
class ResolvedColumnRefProto;
class ResolvedColumnRefProtoDefaultTypeInternal;
extern ResolvedColumnRefProtoDefaultTypeInternal _ResolvedColumnRefProto_default_instance_;
class ResolvedCommitStmtProto;
class ResolvedCommitStmtProtoDefaultTypeInternal;
extern ResolvedCommitStmtProtoDefaultTypeInternal _ResolvedCommitStmtProto_default_instance_;
class ResolvedComputedColumnProto;
class ResolvedComputedColumnProtoDefaultTypeInternal;
extern ResolvedComputedColumnProtoDefaultTypeInternal _ResolvedComputedColumnProto_default_instance_;
class ResolvedConnectionProto;
class ResolvedConnectionProtoDefaultTypeInternal;
extern ResolvedConnectionProtoDefaultTypeInternal _ResolvedConnectionProto_default_instance_;
class ResolvedConstantProto;
class ResolvedConstantProtoDefaultTypeInternal;
extern ResolvedConstantProtoDefaultTypeInternal _ResolvedConstantProto_default_instance_;
class ResolvedConstraintProto;
class ResolvedConstraintProtoDefaultTypeInternal;
extern ResolvedConstraintProtoDefaultTypeInternal _ResolvedConstraintProto_default_instance_;
class ResolvedCreateConstantStmtProto;
class ResolvedCreateConstantStmtProtoDefaultTypeInternal;
extern ResolvedCreateConstantStmtProtoDefaultTypeInternal _ResolvedCreateConstantStmtProto_default_instance_;
class ResolvedCreateDatabaseStmtProto;
class ResolvedCreateDatabaseStmtProtoDefaultTypeInternal;
extern ResolvedCreateDatabaseStmtProtoDefaultTypeInternal _ResolvedCreateDatabaseStmtProto_default_instance_;
class ResolvedCreateEntityStmtProto;
class ResolvedCreateEntityStmtProtoDefaultTypeInternal;
extern ResolvedCreateEntityStmtProtoDefaultTypeInternal _ResolvedCreateEntityStmtProto_default_instance_;
class ResolvedCreateExternalTableStmtProto;
class ResolvedCreateExternalTableStmtProtoDefaultTypeInternal;
extern ResolvedCreateExternalTableStmtProtoDefaultTypeInternal _ResolvedCreateExternalTableStmtProto_default_instance_;
class ResolvedCreateFunctionStmtProto;
class ResolvedCreateFunctionStmtProtoDefaultTypeInternal;
extern ResolvedCreateFunctionStmtProtoDefaultTypeInternal _ResolvedCreateFunctionStmtProto_default_instance_;
class ResolvedCreateIndexStmtProto;
class ResolvedCreateIndexStmtProtoDefaultTypeInternal;
extern ResolvedCreateIndexStmtProtoDefaultTypeInternal _ResolvedCreateIndexStmtProto_default_instance_;
class ResolvedCreateMaterializedViewStmtProto;
class ResolvedCreateMaterializedViewStmtProtoDefaultTypeInternal;
extern ResolvedCreateMaterializedViewStmtProtoDefaultTypeInternal _ResolvedCreateMaterializedViewStmtProto_default_instance_;
class ResolvedCreateModelStmtProto;
class ResolvedCreateModelStmtProtoDefaultTypeInternal;
extern ResolvedCreateModelStmtProtoDefaultTypeInternal _ResolvedCreateModelStmtProto_default_instance_;
class ResolvedCreatePrivilegeRestrictionStmtProto;
class ResolvedCreatePrivilegeRestrictionStmtProtoDefaultTypeInternal;
extern ResolvedCreatePrivilegeRestrictionStmtProtoDefaultTypeInternal _ResolvedCreatePrivilegeRestrictionStmtProto_default_instance_;
class ResolvedCreateProcedureStmtProto;
class ResolvedCreateProcedureStmtProtoDefaultTypeInternal;
extern ResolvedCreateProcedureStmtProtoDefaultTypeInternal _ResolvedCreateProcedureStmtProto_default_instance_;
class ResolvedCreateRowAccessPolicyStmtProto;
class ResolvedCreateRowAccessPolicyStmtProtoDefaultTypeInternal;
extern ResolvedCreateRowAccessPolicyStmtProtoDefaultTypeInternal _ResolvedCreateRowAccessPolicyStmtProto_default_instance_;
class ResolvedCreateSchemaStmtProto;
class ResolvedCreateSchemaStmtProtoDefaultTypeInternal;
extern ResolvedCreateSchemaStmtProtoDefaultTypeInternal _ResolvedCreateSchemaStmtProto_default_instance_;
class ResolvedCreateSnapshotTableStmtProto;
class ResolvedCreateSnapshotTableStmtProtoDefaultTypeInternal;
extern ResolvedCreateSnapshotTableStmtProtoDefaultTypeInternal _ResolvedCreateSnapshotTableStmtProto_default_instance_;
class ResolvedCreateStatementProto;
class ResolvedCreateStatementProtoDefaultTypeInternal;
extern ResolvedCreateStatementProtoDefaultTypeInternal _ResolvedCreateStatementProto_default_instance_;
class ResolvedCreateTableAsSelectStmtProto;
class ResolvedCreateTableAsSelectStmtProtoDefaultTypeInternal;
extern ResolvedCreateTableAsSelectStmtProtoDefaultTypeInternal _ResolvedCreateTableAsSelectStmtProto_default_instance_;
class ResolvedCreateTableFunctionStmtProto;
class ResolvedCreateTableFunctionStmtProtoDefaultTypeInternal;
extern ResolvedCreateTableFunctionStmtProtoDefaultTypeInternal _ResolvedCreateTableFunctionStmtProto_default_instance_;
class ResolvedCreateTableStmtBaseProto;
class ResolvedCreateTableStmtBaseProtoDefaultTypeInternal;
extern ResolvedCreateTableStmtBaseProtoDefaultTypeInternal _ResolvedCreateTableStmtBaseProto_default_instance_;
class ResolvedCreateTableStmtProto;
class ResolvedCreateTableStmtProtoDefaultTypeInternal;
extern ResolvedCreateTableStmtProtoDefaultTypeInternal _ResolvedCreateTableStmtProto_default_instance_;
class ResolvedCreateViewBaseProto;
class ResolvedCreateViewBaseProtoDefaultTypeInternal;
extern ResolvedCreateViewBaseProtoDefaultTypeInternal _ResolvedCreateViewBaseProto_default_instance_;
class ResolvedCreateViewStmtProto;
class ResolvedCreateViewStmtProtoDefaultTypeInternal;
extern ResolvedCreateViewStmtProtoDefaultTypeInternal _ResolvedCreateViewStmtProto_default_instance_;
class ResolvedDMLDefaultProto;
class ResolvedDMLDefaultProtoDefaultTypeInternal;
extern ResolvedDMLDefaultProtoDefaultTypeInternal _ResolvedDMLDefaultProto_default_instance_;
class ResolvedDMLValueProto;
class ResolvedDMLValueProtoDefaultTypeInternal;
extern ResolvedDMLValueProtoDefaultTypeInternal _ResolvedDMLValueProto_default_instance_;
class ResolvedDefineTableStmtProto;
class ResolvedDefineTableStmtProtoDefaultTypeInternal;
extern ResolvedDefineTableStmtProtoDefaultTypeInternal _ResolvedDefineTableStmtProto_default_instance_;
class ResolvedDeleteStmtProto;
class ResolvedDeleteStmtProtoDefaultTypeInternal;
extern ResolvedDeleteStmtProtoDefaultTypeInternal _ResolvedDeleteStmtProto_default_instance_;
class ResolvedDescribeStmtProto;
class ResolvedDescribeStmtProtoDefaultTypeInternal;
extern ResolvedDescribeStmtProtoDefaultTypeInternal _ResolvedDescribeStmtProto_default_instance_;
class ResolvedDescriptorProto;
class ResolvedDescriptorProtoDefaultTypeInternal;
extern ResolvedDescriptorProtoDefaultTypeInternal _ResolvedDescriptorProto_default_instance_;
class ResolvedDropColumnActionProto;
class ResolvedDropColumnActionProtoDefaultTypeInternal;
extern ResolvedDropColumnActionProtoDefaultTypeInternal _ResolvedDropColumnActionProto_default_instance_;
class ResolvedDropConstraintActionProto;
class ResolvedDropConstraintActionProtoDefaultTypeInternal;
extern ResolvedDropConstraintActionProtoDefaultTypeInternal _ResolvedDropConstraintActionProto_default_instance_;
class ResolvedDropFunctionStmtProto;
class ResolvedDropFunctionStmtProtoDefaultTypeInternal;
extern ResolvedDropFunctionStmtProtoDefaultTypeInternal _ResolvedDropFunctionStmtProto_default_instance_;
class ResolvedDropMaterializedViewStmtProto;
class ResolvedDropMaterializedViewStmtProtoDefaultTypeInternal;
extern ResolvedDropMaterializedViewStmtProtoDefaultTypeInternal _ResolvedDropMaterializedViewStmtProto_default_instance_;
class ResolvedDropPrimaryKeyActionProto;
class ResolvedDropPrimaryKeyActionProtoDefaultTypeInternal;
extern ResolvedDropPrimaryKeyActionProtoDefaultTypeInternal _ResolvedDropPrimaryKeyActionProto_default_instance_;
class ResolvedDropPrivilegeRestrictionStmtProto;
class ResolvedDropPrivilegeRestrictionStmtProtoDefaultTypeInternal;
extern ResolvedDropPrivilegeRestrictionStmtProtoDefaultTypeInternal _ResolvedDropPrivilegeRestrictionStmtProto_default_instance_;
class ResolvedDropRowAccessPolicyStmtProto;
class ResolvedDropRowAccessPolicyStmtProtoDefaultTypeInternal;
extern ResolvedDropRowAccessPolicyStmtProtoDefaultTypeInternal _ResolvedDropRowAccessPolicyStmtProto_default_instance_;
class ResolvedDropSearchIndexStmtProto;
class ResolvedDropSearchIndexStmtProtoDefaultTypeInternal;
extern ResolvedDropSearchIndexStmtProtoDefaultTypeInternal _ResolvedDropSearchIndexStmtProto_default_instance_;
class ResolvedDropSnapshotTableStmtProto;
class ResolvedDropSnapshotTableStmtProtoDefaultTypeInternal;
extern ResolvedDropSnapshotTableStmtProtoDefaultTypeInternal _ResolvedDropSnapshotTableStmtProto_default_instance_;
class ResolvedDropStmtProto;
class ResolvedDropStmtProtoDefaultTypeInternal;
extern ResolvedDropStmtProtoDefaultTypeInternal _ResolvedDropStmtProto_default_instance_;
class ResolvedDropTableFunctionStmtProto;
class ResolvedDropTableFunctionStmtProtoDefaultTypeInternal;
extern ResolvedDropTableFunctionStmtProtoDefaultTypeInternal _ResolvedDropTableFunctionStmtProto_default_instance_;
class ResolvedExecuteImmediateArgumentProto;
class ResolvedExecuteImmediateArgumentProtoDefaultTypeInternal;
extern ResolvedExecuteImmediateArgumentProtoDefaultTypeInternal _ResolvedExecuteImmediateArgumentProto_default_instance_;
class ResolvedExecuteImmediateStmtProto;
class ResolvedExecuteImmediateStmtProtoDefaultTypeInternal;
extern ResolvedExecuteImmediateStmtProtoDefaultTypeInternal _ResolvedExecuteImmediateStmtProto_default_instance_;
class ResolvedExplainStmtProto;
class ResolvedExplainStmtProtoDefaultTypeInternal;
extern ResolvedExplainStmtProtoDefaultTypeInternal _ResolvedExplainStmtProto_default_instance_;
class ResolvedExportDataStmtProto;
class ResolvedExportDataStmtProtoDefaultTypeInternal;
extern ResolvedExportDataStmtProtoDefaultTypeInternal _ResolvedExportDataStmtProto_default_instance_;
class ResolvedExportModelStmtProto;
class ResolvedExportModelStmtProtoDefaultTypeInternal;
extern ResolvedExportModelStmtProtoDefaultTypeInternal _ResolvedExportModelStmtProto_default_instance_;
class ResolvedExprProto;
class ResolvedExprProtoDefaultTypeInternal;
extern ResolvedExprProtoDefaultTypeInternal _ResolvedExprProto_default_instance_;
class ResolvedExpressionColumnProto;
class ResolvedExpressionColumnProtoDefaultTypeInternal;
extern ResolvedExpressionColumnProtoDefaultTypeInternal _ResolvedExpressionColumnProto_default_instance_;
class ResolvedExtendedCastElementProto;
class ResolvedExtendedCastElementProtoDefaultTypeInternal;
extern ResolvedExtendedCastElementProtoDefaultTypeInternal _ResolvedExtendedCastElementProto_default_instance_;
class ResolvedExtendedCastProto;
class ResolvedExtendedCastProtoDefaultTypeInternal;
extern ResolvedExtendedCastProtoDefaultTypeInternal _ResolvedExtendedCastProto_default_instance_;
class ResolvedFilterFieldArgProto;
class ResolvedFilterFieldArgProtoDefaultTypeInternal;
extern ResolvedFilterFieldArgProtoDefaultTypeInternal _ResolvedFilterFieldArgProto_default_instance_;
class ResolvedFilterFieldProto;
class ResolvedFilterFieldProtoDefaultTypeInternal;
extern ResolvedFilterFieldProtoDefaultTypeInternal _ResolvedFilterFieldProto_default_instance_;
class ResolvedFilterScanProto;
class ResolvedFilterScanProtoDefaultTypeInternal;
extern ResolvedFilterScanProtoDefaultTypeInternal _ResolvedFilterScanProto_default_instance_;
class ResolvedFilterUsingActionProto;
class ResolvedFilterUsingActionProtoDefaultTypeInternal;
extern ResolvedFilterUsingActionProtoDefaultTypeInternal _ResolvedFilterUsingActionProto_default_instance_;
class ResolvedFlattenProto;
class ResolvedFlattenProtoDefaultTypeInternal;
extern ResolvedFlattenProtoDefaultTypeInternal _ResolvedFlattenProto_default_instance_;
class ResolvedFlattenedArgProto;
class ResolvedFlattenedArgProtoDefaultTypeInternal;
extern ResolvedFlattenedArgProtoDefaultTypeInternal _ResolvedFlattenedArgProto_default_instance_;
class ResolvedForeignKeyProto;
class ResolvedForeignKeyProtoDefaultTypeInternal;
extern ResolvedForeignKeyProtoDefaultTypeInternal _ResolvedForeignKeyProto_default_instance_;
class ResolvedFunctionArgumentProto;
class ResolvedFunctionArgumentProtoDefaultTypeInternal;
extern ResolvedFunctionArgumentProtoDefaultTypeInternal _ResolvedFunctionArgumentProto_default_instance_;
class ResolvedFunctionCallBaseProto;
class ResolvedFunctionCallBaseProtoDefaultTypeInternal;
extern ResolvedFunctionCallBaseProtoDefaultTypeInternal _ResolvedFunctionCallBaseProto_default_instance_;
class ResolvedFunctionCallProto;
class ResolvedFunctionCallProtoDefaultTypeInternal;
extern ResolvedFunctionCallProtoDefaultTypeInternal _ResolvedFunctionCallProto_default_instance_;
class ResolvedFunctionSignatureHolderProto;
class ResolvedFunctionSignatureHolderProtoDefaultTypeInternal;
extern ResolvedFunctionSignatureHolderProtoDefaultTypeInternal _ResolvedFunctionSignatureHolderProto_default_instance_;
class ResolvedGeneratedColumnInfoProto;
class ResolvedGeneratedColumnInfoProtoDefaultTypeInternal;
extern ResolvedGeneratedColumnInfoProtoDefaultTypeInternal _ResolvedGeneratedColumnInfoProto_default_instance_;
class ResolvedGetJsonFieldProto;
class ResolvedGetJsonFieldProtoDefaultTypeInternal;
extern ResolvedGetJsonFieldProtoDefaultTypeInternal _ResolvedGetJsonFieldProto_default_instance_;
class ResolvedGetProtoFieldProto;
class ResolvedGetProtoFieldProtoDefaultTypeInternal;
extern ResolvedGetProtoFieldProtoDefaultTypeInternal _ResolvedGetProtoFieldProto_default_instance_;
class ResolvedGetStructFieldProto;
class ResolvedGetStructFieldProtoDefaultTypeInternal;
extern ResolvedGetStructFieldProtoDefaultTypeInternal _ResolvedGetStructFieldProto_default_instance_;
class ResolvedGrantOrRevokeStmtProto;
class ResolvedGrantOrRevokeStmtProtoDefaultTypeInternal;
extern ResolvedGrantOrRevokeStmtProtoDefaultTypeInternal _ResolvedGrantOrRevokeStmtProto_default_instance_;
class ResolvedGrantStmtProto;
class ResolvedGrantStmtProtoDefaultTypeInternal;
extern ResolvedGrantStmtProtoDefaultTypeInternal _ResolvedGrantStmtProto_default_instance_;
class ResolvedGrantToActionProto;
class ResolvedGrantToActionProtoDefaultTypeInternal;
extern ResolvedGrantToActionProtoDefaultTypeInternal _ResolvedGrantToActionProto_default_instance_;
class ResolvedGroupRowsScanProto;
class ResolvedGroupRowsScanProtoDefaultTypeInternal;
extern ResolvedGroupRowsScanProtoDefaultTypeInternal _ResolvedGroupRowsScanProto_default_instance_;
class ResolvedGroupingSetProto;
class ResolvedGroupingSetProtoDefaultTypeInternal;
extern ResolvedGroupingSetProtoDefaultTypeInternal _ResolvedGroupingSetProto_default_instance_;
class ResolvedImportStmtProto;
class ResolvedImportStmtProtoDefaultTypeInternal;
extern ResolvedImportStmtProtoDefaultTypeInternal _ResolvedImportStmtProto_default_instance_;
class ResolvedIndexItemProto;
class ResolvedIndexItemProtoDefaultTypeInternal;
extern ResolvedIndexItemProtoDefaultTypeInternal _ResolvedIndexItemProto_default_instance_;
class ResolvedInlineLambdaProto;
class ResolvedInlineLambdaProtoDefaultTypeInternal;
extern ResolvedInlineLambdaProtoDefaultTypeInternal _ResolvedInlineLambdaProto_default_instance_;
class ResolvedInsertRowProto;
class ResolvedInsertRowProtoDefaultTypeInternal;
extern ResolvedInsertRowProtoDefaultTypeInternal _ResolvedInsertRowProto_default_instance_;
class ResolvedInsertStmtProto;
class ResolvedInsertStmtProtoDefaultTypeInternal;
extern ResolvedInsertStmtProtoDefaultTypeInternal _ResolvedInsertStmtProto_default_instance_;
class ResolvedJoinScanProto;
class ResolvedJoinScanProtoDefaultTypeInternal;
extern ResolvedJoinScanProtoDefaultTypeInternal _ResolvedJoinScanProto_default_instance_;
class ResolvedLetExprProto;
class ResolvedLetExprProtoDefaultTypeInternal;
extern ResolvedLetExprProtoDefaultTypeInternal _ResolvedLetExprProto_default_instance_;
class ResolvedLimitOffsetScanProto;
class ResolvedLimitOffsetScanProtoDefaultTypeInternal;
extern ResolvedLimitOffsetScanProtoDefaultTypeInternal _ResolvedLimitOffsetScanProto_default_instance_;
class ResolvedLiteralProto;
class ResolvedLiteralProtoDefaultTypeInternal;
extern ResolvedLiteralProtoDefaultTypeInternal _ResolvedLiteralProto_default_instance_;
class ResolvedMakeProtoFieldProto;
class ResolvedMakeProtoFieldProtoDefaultTypeInternal;
extern ResolvedMakeProtoFieldProtoDefaultTypeInternal _ResolvedMakeProtoFieldProto_default_instance_;
class ResolvedMakeProtoProto;
class ResolvedMakeProtoProtoDefaultTypeInternal;
extern ResolvedMakeProtoProtoDefaultTypeInternal _ResolvedMakeProtoProto_default_instance_;
class ResolvedMakeStructProto;
class ResolvedMakeStructProtoDefaultTypeInternal;
extern ResolvedMakeStructProtoDefaultTypeInternal _ResolvedMakeStructProto_default_instance_;
class ResolvedMergeStmtProto;
class ResolvedMergeStmtProtoDefaultTypeInternal;
extern ResolvedMergeStmtProtoDefaultTypeInternal _ResolvedMergeStmtProto_default_instance_;
class ResolvedMergeWhenProto;
class ResolvedMergeWhenProtoDefaultTypeInternal;
extern ResolvedMergeWhenProtoDefaultTypeInternal _ResolvedMergeWhenProto_default_instance_;
class ResolvedModelProto;
class ResolvedModelProtoDefaultTypeInternal;
extern ResolvedModelProtoDefaultTypeInternal _ResolvedModelProto_default_instance_;
class ResolvedModuleStmtProto;
class ResolvedModuleStmtProtoDefaultTypeInternal;
extern ResolvedModuleStmtProtoDefaultTypeInternal _ResolvedModuleStmtProto_default_instance_;
class ResolvedNonScalarFunctionCallBaseProto;
class ResolvedNonScalarFunctionCallBaseProtoDefaultTypeInternal;
extern ResolvedNonScalarFunctionCallBaseProtoDefaultTypeInternal _ResolvedNonScalarFunctionCallBaseProto_default_instance_;
class ResolvedObjectUnitProto;
class ResolvedObjectUnitProtoDefaultTypeInternal;
extern ResolvedObjectUnitProtoDefaultTypeInternal _ResolvedObjectUnitProto_default_instance_;
class ResolvedOptionProto;
class ResolvedOptionProtoDefaultTypeInternal;
extern ResolvedOptionProtoDefaultTypeInternal _ResolvedOptionProto_default_instance_;
class ResolvedOrderByItemProto;
class ResolvedOrderByItemProtoDefaultTypeInternal;
extern ResolvedOrderByItemProtoDefaultTypeInternal _ResolvedOrderByItemProto_default_instance_;
class ResolvedOrderByScanProto;
class ResolvedOrderByScanProtoDefaultTypeInternal;
extern ResolvedOrderByScanProtoDefaultTypeInternal _ResolvedOrderByScanProto_default_instance_;
class ResolvedOutputColumnProto;
class ResolvedOutputColumnProtoDefaultTypeInternal;
extern ResolvedOutputColumnProtoDefaultTypeInternal _ResolvedOutputColumnProto_default_instance_;
class ResolvedParameterProto;
class ResolvedParameterProtoDefaultTypeInternal;
extern ResolvedParameterProtoDefaultTypeInternal _ResolvedParameterProto_default_instance_;
class ResolvedPivotColumnProto;
class ResolvedPivotColumnProtoDefaultTypeInternal;
extern ResolvedPivotColumnProtoDefaultTypeInternal _ResolvedPivotColumnProto_default_instance_;
class ResolvedPivotScanProto;
class ResolvedPivotScanProtoDefaultTypeInternal;
extern ResolvedPivotScanProtoDefaultTypeInternal _ResolvedPivotScanProto_default_instance_;
class ResolvedPrimaryKeyProto;
class ResolvedPrimaryKeyProtoDefaultTypeInternal;
extern ResolvedPrimaryKeyProtoDefaultTypeInternal _ResolvedPrimaryKeyProto_default_instance_;
class ResolvedPrivilegeProto;
class ResolvedPrivilegeProtoDefaultTypeInternal;
extern ResolvedPrivilegeProtoDefaultTypeInternal _ResolvedPrivilegeProto_default_instance_;
class ResolvedProjectScanProto;
class ResolvedProjectScanProtoDefaultTypeInternal;
extern ResolvedProjectScanProtoDefaultTypeInternal _ResolvedProjectScanProto_default_instance_;
class ResolvedQueryStmtProto;
class ResolvedQueryStmtProtoDefaultTypeInternal;
extern ResolvedQueryStmtProtoDefaultTypeInternal _ResolvedQueryStmtProto_default_instance_;
class ResolvedRecursiveRefScanProto;
class ResolvedRecursiveRefScanProtoDefaultTypeInternal;
extern ResolvedRecursiveRefScanProtoDefaultTypeInternal _ResolvedRecursiveRefScanProto_default_instance_;
class ResolvedRecursiveScanProto;
class ResolvedRecursiveScanProtoDefaultTypeInternal;
extern ResolvedRecursiveScanProtoDefaultTypeInternal _ResolvedRecursiveScanProto_default_instance_;
class ResolvedRelationArgumentScanProto;
class ResolvedRelationArgumentScanProtoDefaultTypeInternal;
extern ResolvedRelationArgumentScanProtoDefaultTypeInternal _ResolvedRelationArgumentScanProto_default_instance_;
class ResolvedRemoveFromRestricteeListActionProto;
class ResolvedRemoveFromRestricteeListActionProtoDefaultTypeInternal;
extern ResolvedRemoveFromRestricteeListActionProtoDefaultTypeInternal _ResolvedRemoveFromRestricteeListActionProto_default_instance_;
class ResolvedRenameColumnActionProto;
class ResolvedRenameColumnActionProtoDefaultTypeInternal;
extern ResolvedRenameColumnActionProtoDefaultTypeInternal _ResolvedRenameColumnActionProto_default_instance_;
class ResolvedRenameStmtProto;
class ResolvedRenameStmtProtoDefaultTypeInternal;
extern ResolvedRenameStmtProtoDefaultTypeInternal _ResolvedRenameStmtProto_default_instance_;
class ResolvedRenameToActionProto;
class ResolvedRenameToActionProtoDefaultTypeInternal;
extern ResolvedRenameToActionProtoDefaultTypeInternal _ResolvedRenameToActionProto_default_instance_;
class ResolvedReplaceFieldItemProto;
class ResolvedReplaceFieldItemProtoDefaultTypeInternal;
extern ResolvedReplaceFieldItemProtoDefaultTypeInternal _ResolvedReplaceFieldItemProto_default_instance_;
class ResolvedReplaceFieldProto;
class ResolvedReplaceFieldProtoDefaultTypeInternal;
extern ResolvedReplaceFieldProtoDefaultTypeInternal _ResolvedReplaceFieldProto_default_instance_;
class ResolvedRestrictToActionProto;
class ResolvedRestrictToActionProtoDefaultTypeInternal;
extern ResolvedRestrictToActionProtoDefaultTypeInternal _ResolvedRestrictToActionProto_default_instance_;
class ResolvedReturningClauseProto;
class ResolvedReturningClauseProtoDefaultTypeInternal;
extern ResolvedReturningClauseProtoDefaultTypeInternal _ResolvedReturningClauseProto_default_instance_;
class ResolvedRevokeFromActionProto;
class ResolvedRevokeFromActionProtoDefaultTypeInternal;
extern ResolvedRevokeFromActionProtoDefaultTypeInternal _ResolvedRevokeFromActionProto_default_instance_;
class ResolvedRevokeStmtProto;
class ResolvedRevokeStmtProtoDefaultTypeInternal;
extern ResolvedRevokeStmtProtoDefaultTypeInternal _ResolvedRevokeStmtProto_default_instance_;
class ResolvedRollbackStmtProto;
class ResolvedRollbackStmtProtoDefaultTypeInternal;
extern ResolvedRollbackStmtProtoDefaultTypeInternal _ResolvedRollbackStmtProto_default_instance_;
class ResolvedRunBatchStmtProto;
class ResolvedRunBatchStmtProtoDefaultTypeInternal;
extern ResolvedRunBatchStmtProtoDefaultTypeInternal _ResolvedRunBatchStmtProto_default_instance_;
class ResolvedSampleScanProto;
class ResolvedSampleScanProtoDefaultTypeInternal;
extern ResolvedSampleScanProtoDefaultTypeInternal _ResolvedSampleScanProto_default_instance_;
class ResolvedScanProto;
class ResolvedScanProtoDefaultTypeInternal;
extern ResolvedScanProtoDefaultTypeInternal _ResolvedScanProto_default_instance_;
class ResolvedSetAsActionProto;
class ResolvedSetAsActionProtoDefaultTypeInternal;
extern ResolvedSetAsActionProtoDefaultTypeInternal _ResolvedSetAsActionProto_default_instance_;
class ResolvedSetCollateClauseProto;
class ResolvedSetCollateClauseProtoDefaultTypeInternal;
extern ResolvedSetCollateClauseProtoDefaultTypeInternal _ResolvedSetCollateClauseProto_default_instance_;
class ResolvedSetOperationItemProto;
class ResolvedSetOperationItemProtoDefaultTypeInternal;
extern ResolvedSetOperationItemProtoDefaultTypeInternal _ResolvedSetOperationItemProto_default_instance_;
class ResolvedSetOperationScanProto;
class ResolvedSetOperationScanProtoDefaultTypeInternal;
extern ResolvedSetOperationScanProtoDefaultTypeInternal _ResolvedSetOperationScanProto_default_instance_;
class ResolvedSetOptionsActionProto;
class ResolvedSetOptionsActionProtoDefaultTypeInternal;
extern ResolvedSetOptionsActionProtoDefaultTypeInternal _ResolvedSetOptionsActionProto_default_instance_;
class ResolvedSetTransactionStmtProto;
class ResolvedSetTransactionStmtProtoDefaultTypeInternal;
extern ResolvedSetTransactionStmtProtoDefaultTypeInternal _ResolvedSetTransactionStmtProto_default_instance_;
class ResolvedShowStmtProto;
class ResolvedShowStmtProtoDefaultTypeInternal;
extern ResolvedShowStmtProtoDefaultTypeInternal _ResolvedShowStmtProto_default_instance_;
class ResolvedSingleRowScanProto;
class ResolvedSingleRowScanProtoDefaultTypeInternal;
extern ResolvedSingleRowScanProtoDefaultTypeInternal _ResolvedSingleRowScanProto_default_instance_;
class ResolvedStartBatchStmtProto;
class ResolvedStartBatchStmtProtoDefaultTypeInternal;
extern ResolvedStartBatchStmtProtoDefaultTypeInternal _ResolvedStartBatchStmtProto_default_instance_;
class ResolvedStatementProto;
class ResolvedStatementProtoDefaultTypeInternal;
extern ResolvedStatementProtoDefaultTypeInternal _ResolvedStatementProto_default_instance_;
class ResolvedSubqueryExprProto;
class ResolvedSubqueryExprProtoDefaultTypeInternal;
extern ResolvedSubqueryExprProtoDefaultTypeInternal _ResolvedSubqueryExprProto_default_instance_;
class ResolvedSystemVariableProto;
class ResolvedSystemVariableProtoDefaultTypeInternal;
extern ResolvedSystemVariableProtoDefaultTypeInternal _ResolvedSystemVariableProto_default_instance_;
class ResolvedTVFScanProto;
class ResolvedTVFScanProtoDefaultTypeInternal;
extern ResolvedTVFScanProtoDefaultTypeInternal _ResolvedTVFScanProto_default_instance_;
class ResolvedTableAndColumnInfoProto;
class ResolvedTableAndColumnInfoProtoDefaultTypeInternal;
extern ResolvedTableAndColumnInfoProtoDefaultTypeInternal _ResolvedTableAndColumnInfoProto_default_instance_;
class ResolvedTableScanProto;
class ResolvedTableScanProtoDefaultTypeInternal;
extern ResolvedTableScanProtoDefaultTypeInternal _ResolvedTableScanProto_default_instance_;
class ResolvedTruncateStmtProto;
class ResolvedTruncateStmtProtoDefaultTypeInternal;
extern ResolvedTruncateStmtProtoDefaultTypeInternal _ResolvedTruncateStmtProto_default_instance_;
class ResolvedUnnestItemProto;
class ResolvedUnnestItemProtoDefaultTypeInternal;
extern ResolvedUnnestItemProtoDefaultTypeInternal _ResolvedUnnestItemProto_default_instance_;
class ResolvedUnpivotArgProto;
class ResolvedUnpivotArgProtoDefaultTypeInternal;
extern ResolvedUnpivotArgProtoDefaultTypeInternal _ResolvedUnpivotArgProto_default_instance_;
class ResolvedUnpivotScanProto;
class ResolvedUnpivotScanProtoDefaultTypeInternal;
extern ResolvedUnpivotScanProtoDefaultTypeInternal _ResolvedUnpivotScanProto_default_instance_;
class ResolvedUpdateArrayItemProto;
class ResolvedUpdateArrayItemProtoDefaultTypeInternal;
extern ResolvedUpdateArrayItemProtoDefaultTypeInternal _ResolvedUpdateArrayItemProto_default_instance_;
class ResolvedUpdateItemProto;
class ResolvedUpdateItemProtoDefaultTypeInternal;
extern ResolvedUpdateItemProtoDefaultTypeInternal _ResolvedUpdateItemProto_default_instance_;
class ResolvedUpdateStmtProto;
class ResolvedUpdateStmtProtoDefaultTypeInternal;
extern ResolvedUpdateStmtProtoDefaultTypeInternal _ResolvedUpdateStmtProto_default_instance_;
class ResolvedWindowFrameExprProto;
class ResolvedWindowFrameExprProtoDefaultTypeInternal;
extern ResolvedWindowFrameExprProtoDefaultTypeInternal _ResolvedWindowFrameExprProto_default_instance_;
class ResolvedWindowFrameProto;
class ResolvedWindowFrameProtoDefaultTypeInternal;
extern ResolvedWindowFrameProtoDefaultTypeInternal _ResolvedWindowFrameProto_default_instance_;
class ResolvedWindowOrderingProto;
class ResolvedWindowOrderingProtoDefaultTypeInternal;
extern ResolvedWindowOrderingProtoDefaultTypeInternal _ResolvedWindowOrderingProto_default_instance_;
class ResolvedWindowPartitioningProto;
class ResolvedWindowPartitioningProtoDefaultTypeInternal;
extern ResolvedWindowPartitioningProtoDefaultTypeInternal _ResolvedWindowPartitioningProto_default_instance_;
class ResolvedWithEntryProto;
class ResolvedWithEntryProtoDefaultTypeInternal;
extern ResolvedWithEntryProtoDefaultTypeInternal _ResolvedWithEntryProto_default_instance_;
class ResolvedWithPartitionColumnsProto;
class ResolvedWithPartitionColumnsProtoDefaultTypeInternal;
extern ResolvedWithPartitionColumnsProtoDefaultTypeInternal _ResolvedWithPartitionColumnsProto_default_instance_;
class ResolvedWithRefScanProto;
class ResolvedWithRefScanProtoDefaultTypeInternal;
extern ResolvedWithRefScanProtoDefaultTypeInternal _ResolvedWithRefScanProto_default_instance_;
class ResolvedWithScanProto;
class ResolvedWithScanProtoDefaultTypeInternal;
extern ResolvedWithScanProtoDefaultTypeInternal _ResolvedWithScanProto_default_instance_;
}  // namespace zetasql
namespace google {
namespace protobuf {
template<> ::zetasql::AnyResolvedAggregateScanBaseProto* Arena::CreateMaybeMessage<::zetasql::AnyResolvedAggregateScanBaseProto>(Arena*);
template<> ::zetasql::AnyResolvedAlterActionProto* Arena::CreateMaybeMessage<::zetasql::AnyResolvedAlterActionProto>(Arena*);
template<> ::zetasql::AnyResolvedAlterColumnActionProto* Arena::CreateMaybeMessage<::zetasql::AnyResolvedAlterColumnActionProto>(Arena*);
template<> ::zetasql::AnyResolvedAlterObjectStmtProto* Arena::CreateMaybeMessage<::zetasql::AnyResolvedAlterObjectStmtProto>(Arena*);
template<> ::zetasql::AnyResolvedArgumentProto* Arena::CreateMaybeMessage<::zetasql::AnyResolvedArgumentProto>(Arena*);
template<> ::zetasql::AnyResolvedConstraintProto* Arena::CreateMaybeMessage<::zetasql::AnyResolvedConstraintProto>(Arena*);
template<> ::zetasql::AnyResolvedCreateStatementProto* Arena::CreateMaybeMessage<::zetasql::AnyResolvedCreateStatementProto>(Arena*);
template<> ::zetasql::AnyResolvedCreateTableStmtBaseProto* Arena::CreateMaybeMessage<::zetasql::AnyResolvedCreateTableStmtBaseProto>(Arena*);
template<> ::zetasql::AnyResolvedCreateViewBaseProto* Arena::CreateMaybeMessage<::zetasql::AnyResolvedCreateViewBaseProto>(Arena*);
template<> ::zetasql::AnyResolvedExprProto* Arena::CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(Arena*);
template<> ::zetasql::AnyResolvedFunctionCallBaseProto* Arena::CreateMaybeMessage<::zetasql::AnyResolvedFunctionCallBaseProto>(Arena*);
template<> ::zetasql::AnyResolvedGrantOrRevokeStmtProto* Arena::CreateMaybeMessage<::zetasql::AnyResolvedGrantOrRevokeStmtProto>(Arena*);
template<> ::zetasql::AnyResolvedNodeProto* Arena::CreateMaybeMessage<::zetasql::AnyResolvedNodeProto>(Arena*);
template<> ::zetasql::AnyResolvedNonScalarFunctionCallBaseProto* Arena::CreateMaybeMessage<::zetasql::AnyResolvedNonScalarFunctionCallBaseProto>(Arena*);
template<> ::zetasql::AnyResolvedScanProto* Arena::CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(Arena*);
template<> ::zetasql::AnyResolvedStatementProto* Arena::CreateMaybeMessage<::zetasql::AnyResolvedStatementProto>(Arena*);
template<> ::zetasql::ResolvedAbortBatchStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAbortBatchStmtProto>(Arena*);
template<> ::zetasql::ResolvedAddColumnActionProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAddColumnActionProto>(Arena*);
template<> ::zetasql::ResolvedAddConstraintActionProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAddConstraintActionProto>(Arena*);
template<> ::zetasql::ResolvedAddToRestricteeListActionProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAddToRestricteeListActionProto>(Arena*);
template<> ::zetasql::ResolvedAggregateFunctionCallProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAggregateFunctionCallProto>(Arena*);
template<> ::zetasql::ResolvedAggregateHavingModifierProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAggregateHavingModifierProto>(Arena*);
template<> ::zetasql::ResolvedAggregateScanBaseProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAggregateScanBaseProto>(Arena*);
template<> ::zetasql::ResolvedAggregateScanProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAggregateScanProto>(Arena*);
template<> ::zetasql::ResolvedAlterActionProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAlterActionProto>(Arena*);
template<> ::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto>(Arena*);
template<> ::zetasql::ResolvedAlterColumnActionProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAlterColumnActionProto>(Arena*);
template<> ::zetasql::ResolvedAlterColumnDropDefaultActionProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAlterColumnDropDefaultActionProto>(Arena*);
template<> ::zetasql::ResolvedAlterColumnDropNotNullActionProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAlterColumnDropNotNullActionProto>(Arena*);
template<> ::zetasql::ResolvedAlterColumnOptionsActionProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAlterColumnOptionsActionProto>(Arena*);
template<> ::zetasql::ResolvedAlterColumnSetDataTypeActionProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAlterColumnSetDataTypeActionProto>(Arena*);
template<> ::zetasql::ResolvedAlterColumnSetDefaultActionProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAlterColumnSetDefaultActionProto>(Arena*);
template<> ::zetasql::ResolvedAlterDatabaseStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAlterDatabaseStmtProto>(Arena*);
template<> ::zetasql::ResolvedAlterEntityStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAlterEntityStmtProto>(Arena*);
template<> ::zetasql::ResolvedAlterMaterializedViewStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAlterMaterializedViewStmtProto>(Arena*);
template<> ::zetasql::ResolvedAlterObjectStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAlterObjectStmtProto>(Arena*);
template<> ::zetasql::ResolvedAlterPrivilegeRestrictionStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAlterPrivilegeRestrictionStmtProto>(Arena*);
template<> ::zetasql::ResolvedAlterRowAccessPolicyStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAlterRowAccessPolicyStmtProto>(Arena*);
template<> ::zetasql::ResolvedAlterSchemaStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAlterSchemaStmtProto>(Arena*);
template<> ::zetasql::ResolvedAlterTableSetOptionsStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAlterTableSetOptionsStmtProto>(Arena*);
template<> ::zetasql::ResolvedAlterTableStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAlterTableStmtProto>(Arena*);
template<> ::zetasql::ResolvedAlterViewStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAlterViewStmtProto>(Arena*);
template<> ::zetasql::ResolvedAnalyticFunctionCallProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAnalyticFunctionCallProto>(Arena*);
template<> ::zetasql::ResolvedAnalyticFunctionGroupProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAnalyticFunctionGroupProto>(Arena*);
template<> ::zetasql::ResolvedAnalyticScanProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAnalyticScanProto>(Arena*);
template<> ::zetasql::ResolvedAnalyzeStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAnalyzeStmtProto>(Arena*);
template<> ::zetasql::ResolvedAnonymizedAggregateScanProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAnonymizedAggregateScanProto>(Arena*);
template<> ::zetasql::ResolvedArgumentDefProto* Arena::CreateMaybeMessage<::zetasql::ResolvedArgumentDefProto>(Arena*);
template<> ::zetasql::ResolvedArgumentListProto* Arena::CreateMaybeMessage<::zetasql::ResolvedArgumentListProto>(Arena*);
template<> ::zetasql::ResolvedArgumentProto* Arena::CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(Arena*);
template<> ::zetasql::ResolvedArgumentRefProto* Arena::CreateMaybeMessage<::zetasql::ResolvedArgumentRefProto>(Arena*);
template<> ::zetasql::ResolvedArrayScanProto* Arena::CreateMaybeMessage<::zetasql::ResolvedArrayScanProto>(Arena*);
template<> ::zetasql::ResolvedAssertRowsModifiedProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAssertRowsModifiedProto>(Arena*);
template<> ::zetasql::ResolvedAssertStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAssertStmtProto>(Arena*);
template<> ::zetasql::ResolvedAssignmentStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAssignmentStmtProto>(Arena*);
template<> ::zetasql::ResolvedAuxLoadDataStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedAuxLoadDataStmtProto>(Arena*);
template<> ::zetasql::ResolvedBeginStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedBeginStmtProto>(Arena*);
template<> ::zetasql::ResolvedCallStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedCallStmtProto>(Arena*);
template<> ::zetasql::ResolvedCastProto* Arena::CreateMaybeMessage<::zetasql::ResolvedCastProto>(Arena*);
template<> ::zetasql::ResolvedCheckConstraintProto* Arena::CreateMaybeMessage<::zetasql::ResolvedCheckConstraintProto>(Arena*);
template<> ::zetasql::ResolvedCloneDataStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedCloneDataStmtProto>(Arena*);
template<> ::zetasql::ResolvedColumnAnnotationsProto* Arena::CreateMaybeMessage<::zetasql::ResolvedColumnAnnotationsProto>(Arena*);
template<> ::zetasql::ResolvedColumnDefaultValueProto* Arena::CreateMaybeMessage<::zetasql::ResolvedColumnDefaultValueProto>(Arena*);
template<> ::zetasql::ResolvedColumnDefinitionProto* Arena::CreateMaybeMessage<::zetasql::ResolvedColumnDefinitionProto>(Arena*);
template<> ::zetasql::ResolvedColumnHolderProto* Arena::CreateMaybeMessage<::zetasql::ResolvedColumnHolderProto>(Arena*);
template<> ::zetasql::ResolvedColumnRefProto* Arena::CreateMaybeMessage<::zetasql::ResolvedColumnRefProto>(Arena*);
template<> ::zetasql::ResolvedCommitStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedCommitStmtProto>(Arena*);
template<> ::zetasql::ResolvedComputedColumnProto* Arena::CreateMaybeMessage<::zetasql::ResolvedComputedColumnProto>(Arena*);
template<> ::zetasql::ResolvedConnectionProto* Arena::CreateMaybeMessage<::zetasql::ResolvedConnectionProto>(Arena*);
template<> ::zetasql::ResolvedConstantProto* Arena::CreateMaybeMessage<::zetasql::ResolvedConstantProto>(Arena*);
template<> ::zetasql::ResolvedConstraintProto* Arena::CreateMaybeMessage<::zetasql::ResolvedConstraintProto>(Arena*);
template<> ::zetasql::ResolvedCreateConstantStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedCreateConstantStmtProto>(Arena*);
template<> ::zetasql::ResolvedCreateDatabaseStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedCreateDatabaseStmtProto>(Arena*);
template<> ::zetasql::ResolvedCreateEntityStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedCreateEntityStmtProto>(Arena*);
template<> ::zetasql::ResolvedCreateExternalTableStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedCreateExternalTableStmtProto>(Arena*);
template<> ::zetasql::ResolvedCreateFunctionStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedCreateFunctionStmtProto>(Arena*);
template<> ::zetasql::ResolvedCreateIndexStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedCreateIndexStmtProto>(Arena*);
template<> ::zetasql::ResolvedCreateMaterializedViewStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedCreateMaterializedViewStmtProto>(Arena*);
template<> ::zetasql::ResolvedCreateModelStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedCreateModelStmtProto>(Arena*);
template<> ::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto>(Arena*);
template<> ::zetasql::ResolvedCreateProcedureStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedCreateProcedureStmtProto>(Arena*);
template<> ::zetasql::ResolvedCreateRowAccessPolicyStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedCreateRowAccessPolicyStmtProto>(Arena*);
template<> ::zetasql::ResolvedCreateSchemaStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedCreateSchemaStmtProto>(Arena*);
template<> ::zetasql::ResolvedCreateSnapshotTableStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedCreateSnapshotTableStmtProto>(Arena*);
template<> ::zetasql::ResolvedCreateStatementProto* Arena::CreateMaybeMessage<::zetasql::ResolvedCreateStatementProto>(Arena*);
template<> ::zetasql::ResolvedCreateTableAsSelectStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedCreateTableAsSelectStmtProto>(Arena*);
template<> ::zetasql::ResolvedCreateTableFunctionStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedCreateTableFunctionStmtProto>(Arena*);
template<> ::zetasql::ResolvedCreateTableStmtBaseProto* Arena::CreateMaybeMessage<::zetasql::ResolvedCreateTableStmtBaseProto>(Arena*);
template<> ::zetasql::ResolvedCreateTableStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedCreateTableStmtProto>(Arena*);
template<> ::zetasql::ResolvedCreateViewBaseProto* Arena::CreateMaybeMessage<::zetasql::ResolvedCreateViewBaseProto>(Arena*);
template<> ::zetasql::ResolvedCreateViewStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedCreateViewStmtProto>(Arena*);
template<> ::zetasql::ResolvedDMLDefaultProto* Arena::CreateMaybeMessage<::zetasql::ResolvedDMLDefaultProto>(Arena*);
template<> ::zetasql::ResolvedDMLValueProto* Arena::CreateMaybeMessage<::zetasql::ResolvedDMLValueProto>(Arena*);
template<> ::zetasql::ResolvedDefineTableStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedDefineTableStmtProto>(Arena*);
template<> ::zetasql::ResolvedDeleteStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedDeleteStmtProto>(Arena*);
template<> ::zetasql::ResolvedDescribeStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedDescribeStmtProto>(Arena*);
template<> ::zetasql::ResolvedDescriptorProto* Arena::CreateMaybeMessage<::zetasql::ResolvedDescriptorProto>(Arena*);
template<> ::zetasql::ResolvedDropColumnActionProto* Arena::CreateMaybeMessage<::zetasql::ResolvedDropColumnActionProto>(Arena*);
template<> ::zetasql::ResolvedDropConstraintActionProto* Arena::CreateMaybeMessage<::zetasql::ResolvedDropConstraintActionProto>(Arena*);
template<> ::zetasql::ResolvedDropFunctionStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedDropFunctionStmtProto>(Arena*);
template<> ::zetasql::ResolvedDropMaterializedViewStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedDropMaterializedViewStmtProto>(Arena*);
template<> ::zetasql::ResolvedDropPrimaryKeyActionProto* Arena::CreateMaybeMessage<::zetasql::ResolvedDropPrimaryKeyActionProto>(Arena*);
template<> ::zetasql::ResolvedDropPrivilegeRestrictionStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedDropPrivilegeRestrictionStmtProto>(Arena*);
template<> ::zetasql::ResolvedDropRowAccessPolicyStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedDropRowAccessPolicyStmtProto>(Arena*);
template<> ::zetasql::ResolvedDropSearchIndexStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedDropSearchIndexStmtProto>(Arena*);
template<> ::zetasql::ResolvedDropSnapshotTableStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedDropSnapshotTableStmtProto>(Arena*);
template<> ::zetasql::ResolvedDropStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedDropStmtProto>(Arena*);
template<> ::zetasql::ResolvedDropTableFunctionStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedDropTableFunctionStmtProto>(Arena*);
template<> ::zetasql::ResolvedExecuteImmediateArgumentProto* Arena::CreateMaybeMessage<::zetasql::ResolvedExecuteImmediateArgumentProto>(Arena*);
template<> ::zetasql::ResolvedExecuteImmediateStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedExecuteImmediateStmtProto>(Arena*);
template<> ::zetasql::ResolvedExplainStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedExplainStmtProto>(Arena*);
template<> ::zetasql::ResolvedExportDataStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedExportDataStmtProto>(Arena*);
template<> ::zetasql::ResolvedExportModelStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedExportModelStmtProto>(Arena*);
template<> ::zetasql::ResolvedExprProto* Arena::CreateMaybeMessage<::zetasql::ResolvedExprProto>(Arena*);
template<> ::zetasql::ResolvedExpressionColumnProto* Arena::CreateMaybeMessage<::zetasql::ResolvedExpressionColumnProto>(Arena*);
template<> ::zetasql::ResolvedExtendedCastElementProto* Arena::CreateMaybeMessage<::zetasql::ResolvedExtendedCastElementProto>(Arena*);
template<> ::zetasql::ResolvedExtendedCastProto* Arena::CreateMaybeMessage<::zetasql::ResolvedExtendedCastProto>(Arena*);
template<> ::zetasql::ResolvedFilterFieldArgProto* Arena::CreateMaybeMessage<::zetasql::ResolvedFilterFieldArgProto>(Arena*);
template<> ::zetasql::ResolvedFilterFieldProto* Arena::CreateMaybeMessage<::zetasql::ResolvedFilterFieldProto>(Arena*);
template<> ::zetasql::ResolvedFilterScanProto* Arena::CreateMaybeMessage<::zetasql::ResolvedFilterScanProto>(Arena*);
template<> ::zetasql::ResolvedFilterUsingActionProto* Arena::CreateMaybeMessage<::zetasql::ResolvedFilterUsingActionProto>(Arena*);
template<> ::zetasql::ResolvedFlattenProto* Arena::CreateMaybeMessage<::zetasql::ResolvedFlattenProto>(Arena*);
template<> ::zetasql::ResolvedFlattenedArgProto* Arena::CreateMaybeMessage<::zetasql::ResolvedFlattenedArgProto>(Arena*);
template<> ::zetasql::ResolvedForeignKeyProto* Arena::CreateMaybeMessage<::zetasql::ResolvedForeignKeyProto>(Arena*);
template<> ::zetasql::ResolvedFunctionArgumentProto* Arena::CreateMaybeMessage<::zetasql::ResolvedFunctionArgumentProto>(Arena*);
template<> ::zetasql::ResolvedFunctionCallBaseProto* Arena::CreateMaybeMessage<::zetasql::ResolvedFunctionCallBaseProto>(Arena*);
template<> ::zetasql::ResolvedFunctionCallProto* Arena::CreateMaybeMessage<::zetasql::ResolvedFunctionCallProto>(Arena*);
template<> ::zetasql::ResolvedFunctionSignatureHolderProto* Arena::CreateMaybeMessage<::zetasql::ResolvedFunctionSignatureHolderProto>(Arena*);
template<> ::zetasql::ResolvedGeneratedColumnInfoProto* Arena::CreateMaybeMessage<::zetasql::ResolvedGeneratedColumnInfoProto>(Arena*);
template<> ::zetasql::ResolvedGetJsonFieldProto* Arena::CreateMaybeMessage<::zetasql::ResolvedGetJsonFieldProto>(Arena*);
template<> ::zetasql::ResolvedGetProtoFieldProto* Arena::CreateMaybeMessage<::zetasql::ResolvedGetProtoFieldProto>(Arena*);
template<> ::zetasql::ResolvedGetStructFieldProto* Arena::CreateMaybeMessage<::zetasql::ResolvedGetStructFieldProto>(Arena*);
template<> ::zetasql::ResolvedGrantOrRevokeStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedGrantOrRevokeStmtProto>(Arena*);
template<> ::zetasql::ResolvedGrantStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedGrantStmtProto>(Arena*);
template<> ::zetasql::ResolvedGrantToActionProto* Arena::CreateMaybeMessage<::zetasql::ResolvedGrantToActionProto>(Arena*);
template<> ::zetasql::ResolvedGroupRowsScanProto* Arena::CreateMaybeMessage<::zetasql::ResolvedGroupRowsScanProto>(Arena*);
template<> ::zetasql::ResolvedGroupingSetProto* Arena::CreateMaybeMessage<::zetasql::ResolvedGroupingSetProto>(Arena*);
template<> ::zetasql::ResolvedImportStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedImportStmtProto>(Arena*);
template<> ::zetasql::ResolvedIndexItemProto* Arena::CreateMaybeMessage<::zetasql::ResolvedIndexItemProto>(Arena*);
template<> ::zetasql::ResolvedInlineLambdaProto* Arena::CreateMaybeMessage<::zetasql::ResolvedInlineLambdaProto>(Arena*);
template<> ::zetasql::ResolvedInsertRowProto* Arena::CreateMaybeMessage<::zetasql::ResolvedInsertRowProto>(Arena*);
template<> ::zetasql::ResolvedInsertStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedInsertStmtProto>(Arena*);
template<> ::zetasql::ResolvedJoinScanProto* Arena::CreateMaybeMessage<::zetasql::ResolvedJoinScanProto>(Arena*);
template<> ::zetasql::ResolvedLetExprProto* Arena::CreateMaybeMessage<::zetasql::ResolvedLetExprProto>(Arena*);
template<> ::zetasql::ResolvedLimitOffsetScanProto* Arena::CreateMaybeMessage<::zetasql::ResolvedLimitOffsetScanProto>(Arena*);
template<> ::zetasql::ResolvedLiteralProto* Arena::CreateMaybeMessage<::zetasql::ResolvedLiteralProto>(Arena*);
template<> ::zetasql::ResolvedMakeProtoFieldProto* Arena::CreateMaybeMessage<::zetasql::ResolvedMakeProtoFieldProto>(Arena*);
template<> ::zetasql::ResolvedMakeProtoProto* Arena::CreateMaybeMessage<::zetasql::ResolvedMakeProtoProto>(Arena*);
template<> ::zetasql::ResolvedMakeStructProto* Arena::CreateMaybeMessage<::zetasql::ResolvedMakeStructProto>(Arena*);
template<> ::zetasql::ResolvedMergeStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedMergeStmtProto>(Arena*);
template<> ::zetasql::ResolvedMergeWhenProto* Arena::CreateMaybeMessage<::zetasql::ResolvedMergeWhenProto>(Arena*);
template<> ::zetasql::ResolvedModelProto* Arena::CreateMaybeMessage<::zetasql::ResolvedModelProto>(Arena*);
template<> ::zetasql::ResolvedModuleStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedModuleStmtProto>(Arena*);
template<> ::zetasql::ResolvedNonScalarFunctionCallBaseProto* Arena::CreateMaybeMessage<::zetasql::ResolvedNonScalarFunctionCallBaseProto>(Arena*);
template<> ::zetasql::ResolvedObjectUnitProto* Arena::CreateMaybeMessage<::zetasql::ResolvedObjectUnitProto>(Arena*);
template<> ::zetasql::ResolvedOptionProto* Arena::CreateMaybeMessage<::zetasql::ResolvedOptionProto>(Arena*);
template<> ::zetasql::ResolvedOrderByItemProto* Arena::CreateMaybeMessage<::zetasql::ResolvedOrderByItemProto>(Arena*);
template<> ::zetasql::ResolvedOrderByScanProto* Arena::CreateMaybeMessage<::zetasql::ResolvedOrderByScanProto>(Arena*);
template<> ::zetasql::ResolvedOutputColumnProto* Arena::CreateMaybeMessage<::zetasql::ResolvedOutputColumnProto>(Arena*);
template<> ::zetasql::ResolvedParameterProto* Arena::CreateMaybeMessage<::zetasql::ResolvedParameterProto>(Arena*);
template<> ::zetasql::ResolvedPivotColumnProto* Arena::CreateMaybeMessage<::zetasql::ResolvedPivotColumnProto>(Arena*);
template<> ::zetasql::ResolvedPivotScanProto* Arena::CreateMaybeMessage<::zetasql::ResolvedPivotScanProto>(Arena*);
template<> ::zetasql::ResolvedPrimaryKeyProto* Arena::CreateMaybeMessage<::zetasql::ResolvedPrimaryKeyProto>(Arena*);
template<> ::zetasql::ResolvedPrivilegeProto* Arena::CreateMaybeMessage<::zetasql::ResolvedPrivilegeProto>(Arena*);
template<> ::zetasql::ResolvedProjectScanProto* Arena::CreateMaybeMessage<::zetasql::ResolvedProjectScanProto>(Arena*);
template<> ::zetasql::ResolvedQueryStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedQueryStmtProto>(Arena*);
template<> ::zetasql::ResolvedRecursiveRefScanProto* Arena::CreateMaybeMessage<::zetasql::ResolvedRecursiveRefScanProto>(Arena*);
template<> ::zetasql::ResolvedRecursiveScanProto* Arena::CreateMaybeMessage<::zetasql::ResolvedRecursiveScanProto>(Arena*);
template<> ::zetasql::ResolvedRelationArgumentScanProto* Arena::CreateMaybeMessage<::zetasql::ResolvedRelationArgumentScanProto>(Arena*);
template<> ::zetasql::ResolvedRemoveFromRestricteeListActionProto* Arena::CreateMaybeMessage<::zetasql::ResolvedRemoveFromRestricteeListActionProto>(Arena*);
template<> ::zetasql::ResolvedRenameColumnActionProto* Arena::CreateMaybeMessage<::zetasql::ResolvedRenameColumnActionProto>(Arena*);
template<> ::zetasql::ResolvedRenameStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedRenameStmtProto>(Arena*);
template<> ::zetasql::ResolvedRenameToActionProto* Arena::CreateMaybeMessage<::zetasql::ResolvedRenameToActionProto>(Arena*);
template<> ::zetasql::ResolvedReplaceFieldItemProto* Arena::CreateMaybeMessage<::zetasql::ResolvedReplaceFieldItemProto>(Arena*);
template<> ::zetasql::ResolvedReplaceFieldProto* Arena::CreateMaybeMessage<::zetasql::ResolvedReplaceFieldProto>(Arena*);
template<> ::zetasql::ResolvedRestrictToActionProto* Arena::CreateMaybeMessage<::zetasql::ResolvedRestrictToActionProto>(Arena*);
template<> ::zetasql::ResolvedReturningClauseProto* Arena::CreateMaybeMessage<::zetasql::ResolvedReturningClauseProto>(Arena*);
template<> ::zetasql::ResolvedRevokeFromActionProto* Arena::CreateMaybeMessage<::zetasql::ResolvedRevokeFromActionProto>(Arena*);
template<> ::zetasql::ResolvedRevokeStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedRevokeStmtProto>(Arena*);
template<> ::zetasql::ResolvedRollbackStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedRollbackStmtProto>(Arena*);
template<> ::zetasql::ResolvedRunBatchStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedRunBatchStmtProto>(Arena*);
template<> ::zetasql::ResolvedSampleScanProto* Arena::CreateMaybeMessage<::zetasql::ResolvedSampleScanProto>(Arena*);
template<> ::zetasql::ResolvedScanProto* Arena::CreateMaybeMessage<::zetasql::ResolvedScanProto>(Arena*);
template<> ::zetasql::ResolvedSetAsActionProto* Arena::CreateMaybeMessage<::zetasql::ResolvedSetAsActionProto>(Arena*);
template<> ::zetasql::ResolvedSetCollateClauseProto* Arena::CreateMaybeMessage<::zetasql::ResolvedSetCollateClauseProto>(Arena*);
template<> ::zetasql::ResolvedSetOperationItemProto* Arena::CreateMaybeMessage<::zetasql::ResolvedSetOperationItemProto>(Arena*);
template<> ::zetasql::ResolvedSetOperationScanProto* Arena::CreateMaybeMessage<::zetasql::ResolvedSetOperationScanProto>(Arena*);
template<> ::zetasql::ResolvedSetOptionsActionProto* Arena::CreateMaybeMessage<::zetasql::ResolvedSetOptionsActionProto>(Arena*);
template<> ::zetasql::ResolvedSetTransactionStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedSetTransactionStmtProto>(Arena*);
template<> ::zetasql::ResolvedShowStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedShowStmtProto>(Arena*);
template<> ::zetasql::ResolvedSingleRowScanProto* Arena::CreateMaybeMessage<::zetasql::ResolvedSingleRowScanProto>(Arena*);
template<> ::zetasql::ResolvedStartBatchStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedStartBatchStmtProto>(Arena*);
template<> ::zetasql::ResolvedStatementProto* Arena::CreateMaybeMessage<::zetasql::ResolvedStatementProto>(Arena*);
template<> ::zetasql::ResolvedSubqueryExprProto* Arena::CreateMaybeMessage<::zetasql::ResolvedSubqueryExprProto>(Arena*);
template<> ::zetasql::ResolvedSystemVariableProto* Arena::CreateMaybeMessage<::zetasql::ResolvedSystemVariableProto>(Arena*);
template<> ::zetasql::ResolvedTVFScanProto* Arena::CreateMaybeMessage<::zetasql::ResolvedTVFScanProto>(Arena*);
template<> ::zetasql::ResolvedTableAndColumnInfoProto* Arena::CreateMaybeMessage<::zetasql::ResolvedTableAndColumnInfoProto>(Arena*);
template<> ::zetasql::ResolvedTableScanProto* Arena::CreateMaybeMessage<::zetasql::ResolvedTableScanProto>(Arena*);
template<> ::zetasql::ResolvedTruncateStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedTruncateStmtProto>(Arena*);
template<> ::zetasql::ResolvedUnnestItemProto* Arena::CreateMaybeMessage<::zetasql::ResolvedUnnestItemProto>(Arena*);
template<> ::zetasql::ResolvedUnpivotArgProto* Arena::CreateMaybeMessage<::zetasql::ResolvedUnpivotArgProto>(Arena*);
template<> ::zetasql::ResolvedUnpivotScanProto* Arena::CreateMaybeMessage<::zetasql::ResolvedUnpivotScanProto>(Arena*);
template<> ::zetasql::ResolvedUpdateArrayItemProto* Arena::CreateMaybeMessage<::zetasql::ResolvedUpdateArrayItemProto>(Arena*);
template<> ::zetasql::ResolvedUpdateItemProto* Arena::CreateMaybeMessage<::zetasql::ResolvedUpdateItemProto>(Arena*);
template<> ::zetasql::ResolvedUpdateStmtProto* Arena::CreateMaybeMessage<::zetasql::ResolvedUpdateStmtProto>(Arena*);
template<> ::zetasql::ResolvedWindowFrameExprProto* Arena::CreateMaybeMessage<::zetasql::ResolvedWindowFrameExprProto>(Arena*);
template<> ::zetasql::ResolvedWindowFrameProto* Arena::CreateMaybeMessage<::zetasql::ResolvedWindowFrameProto>(Arena*);
template<> ::zetasql::ResolvedWindowOrderingProto* Arena::CreateMaybeMessage<::zetasql::ResolvedWindowOrderingProto>(Arena*);
template<> ::zetasql::ResolvedWindowPartitioningProto* Arena::CreateMaybeMessage<::zetasql::ResolvedWindowPartitioningProto>(Arena*);
template<> ::zetasql::ResolvedWithEntryProto* Arena::CreateMaybeMessage<::zetasql::ResolvedWithEntryProto>(Arena*);
template<> ::zetasql::ResolvedWithPartitionColumnsProto* Arena::CreateMaybeMessage<::zetasql::ResolvedWithPartitionColumnsProto>(Arena*);
template<> ::zetasql::ResolvedWithRefScanProto* Arena::CreateMaybeMessage<::zetasql::ResolvedWithRefScanProto>(Arena*);
template<> ::zetasql::ResolvedWithScanProto* Arena::CreateMaybeMessage<::zetasql::ResolvedWithScanProto>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace zetasql {

// ===================================================================

class AnyResolvedNodeProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.AnyResolvedNodeProto) */ {
 public:
  AnyResolvedNodeProto();
  virtual ~AnyResolvedNodeProto();

  AnyResolvedNodeProto(const AnyResolvedNodeProto& from);

  inline AnyResolvedNodeProto& operator=(const AnyResolvedNodeProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnyResolvedNodeProto(AnyResolvedNodeProto&& from) noexcept
    : AnyResolvedNodeProto() {
    *this = ::std::move(from);
  }

  inline AnyResolvedNodeProto& operator=(AnyResolvedNodeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnyResolvedNodeProto& default_instance();

  enum NodeCase {
    kResolvedArgumentNode = 1,
    kResolvedExprNode = 2,
    kResolvedScanNode = 18,
    kResolvedStatementNode = 36,
    NODE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnyResolvedNodeProto* internal_default_instance() {
    return reinterpret_cast<const AnyResolvedNodeProto*>(
               &_AnyResolvedNodeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AnyResolvedNodeProto* other);
  friend void swap(AnyResolvedNodeProto& a, AnyResolvedNodeProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnyResolvedNodeProto* New() const final {
    return CreateMaybeMessage<AnyResolvedNodeProto>(NULL);
  }

  AnyResolvedNodeProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnyResolvedNodeProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyResolvedNodeProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.AnyResolvedArgumentProto resolved_argument_node = 1;
  bool has_resolved_argument_node() const;
  void clear_resolved_argument_node();
  static const int kResolvedArgumentNodeFieldNumber = 1;
  private:
  const ::zetasql::AnyResolvedArgumentProto& _internal_resolved_argument_node() const;
  public:
  const ::zetasql::AnyResolvedArgumentProto& resolved_argument_node() const;
  ::zetasql::AnyResolvedArgumentProto* release_resolved_argument_node();
  ::zetasql::AnyResolvedArgumentProto* mutable_resolved_argument_node();
  void set_allocated_resolved_argument_node(::zetasql::AnyResolvedArgumentProto* resolved_argument_node);

  // optional .zetasql.AnyResolvedExprProto resolved_expr_node = 2;
  bool has_resolved_expr_node() const;
  void clear_resolved_expr_node();
  static const int kResolvedExprNodeFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_resolved_expr_node() const;
  public:
  const ::zetasql::AnyResolvedExprProto& resolved_expr_node() const;
  ::zetasql::AnyResolvedExprProto* release_resolved_expr_node();
  ::zetasql::AnyResolvedExprProto* mutable_resolved_expr_node();
  void set_allocated_resolved_expr_node(::zetasql::AnyResolvedExprProto* resolved_expr_node);

  // optional .zetasql.AnyResolvedScanProto resolved_scan_node = 18;
  bool has_resolved_scan_node() const;
  void clear_resolved_scan_node();
  static const int kResolvedScanNodeFieldNumber = 18;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_resolved_scan_node() const;
  public:
  const ::zetasql::AnyResolvedScanProto& resolved_scan_node() const;
  ::zetasql::AnyResolvedScanProto* release_resolved_scan_node();
  ::zetasql::AnyResolvedScanProto* mutable_resolved_scan_node();
  void set_allocated_resolved_scan_node(::zetasql::AnyResolvedScanProto* resolved_scan_node);

  // optional .zetasql.AnyResolvedStatementProto resolved_statement_node = 36;
  bool has_resolved_statement_node() const;
  void clear_resolved_statement_node();
  static const int kResolvedStatementNodeFieldNumber = 36;
  private:
  const ::zetasql::AnyResolvedStatementProto& _internal_resolved_statement_node() const;
  public:
  const ::zetasql::AnyResolvedStatementProto& resolved_statement_node() const;
  ::zetasql::AnyResolvedStatementProto* release_resolved_statement_node();
  ::zetasql::AnyResolvedStatementProto* mutable_resolved_statement_node();
  void set_allocated_resolved_statement_node(::zetasql::AnyResolvedStatementProto* resolved_statement_node);

  void clear_node();
  NodeCase node_case() const;
  // @@protoc_insertion_point(class_scope:zetasql.AnyResolvedNodeProto)
 private:
  void set_has_resolved_argument_node();
  void set_has_resolved_expr_node();
  void set_has_resolved_scan_node();
  void set_has_resolved_statement_node();

  inline bool has_node() const;
  inline void clear_has_node();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union NodeUnion {
    NodeUnion() {}
    ::zetasql::AnyResolvedArgumentProto* resolved_argument_node_;
    ::zetasql::AnyResolvedExprProto* resolved_expr_node_;
    ::zetasql::AnyResolvedScanProto* resolved_scan_node_;
    ::zetasql::AnyResolvedStatementProto* resolved_statement_node_;
  } node_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnyResolvedArgumentProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.AnyResolvedArgumentProto) */ {
 public:
  AnyResolvedArgumentProto();
  virtual ~AnyResolvedArgumentProto();

  AnyResolvedArgumentProto(const AnyResolvedArgumentProto& from);

  inline AnyResolvedArgumentProto& operator=(const AnyResolvedArgumentProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnyResolvedArgumentProto(AnyResolvedArgumentProto&& from) noexcept
    : AnyResolvedArgumentProto() {
    *this = ::std::move(from);
  }

  inline AnyResolvedArgumentProto& operator=(AnyResolvedArgumentProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnyResolvedArgumentProto& default_instance();

  enum NodeCase {
    kResolvedMakeProtoFieldNode = 14,
    kResolvedColumnHolderNode = 23,
    kResolvedComputedColumnNode = 32,
    kResolvedOrderByItemNode = 33,
    kResolvedOutputColumnNode = 34,
    kResolvedWithEntryNode = 52,
    kResolvedOptionNode = 53,
    kResolvedWindowPartitioningNode = 54,
    kResolvedWindowOrderingNode = 55,
    kResolvedWindowFrameNode = 56,
    kResolvedAnalyticFunctionGroupNode = 57,
    kResolvedWindowFrameExprNode = 58,
    kResolvedDmlvalueNode = 59,
    kResolvedAssertRowsModifiedNode = 61,
    kResolvedInsertRowNode = 62,
    kResolvedUpdateItemNode = 65,
    kResolvedPrivilegeNode = 67,
    kResolvedArgumentDefNode = 77,
    kResolvedArgumentListNode = 79,
    kResolvedFunctionArgumentNode = 82,
    kResolvedFunctionSignatureHolderNode = 84,
    kResolvedAggregateHavingModifierNode = 85,
    kResolvedColumnDefinitionNode = 91,
    kResolvedGroupingSetNode = 93,
    kResolvedSetOperationItemNode = 94,
    kResolvedIndexItemNode = 96,
    kResolvedMergeWhenNode = 100,
    kResolvedUpdateArrayItemNode = 102,
    kResolvedColumnAnnotationsNode = 104,
    kResolvedGeneratedColumnInfoNode = 105,
    kResolvedModelNode = 109,
    kResolvedAlterActionNode = 116,
    kResolvedUnnestItemNode = 126,
    kResolvedReplaceFieldItemNode = 128,
    kResolvedConnectionNode = 141,
    kResolvedExecuteImmediateArgumentNode = 143,
    kResolvedDescriptorNode = 144,
    kResolvedExtendedCastElementNode = 151,
    kResolvedWithPartitionColumnsNode = 153,
    kResolvedExtendedCastNode = 158,
    kResolvedInlineLambdaNode = 159,
    kResolvedConstraintNode = 162,
    kResolvedPivotColumnNode = 166,
    kResolvedReturningClauseNode = 170,
    kResolvedUnpivotArgNode = 171,
    kResolvedFilterFieldArgNode = 173,
    kResolvedTableAndColumnInfoNode = 179,
    kResolvedColumnDefaultValueNode = 188,
    kResolvedObjectUnitNode = 200,
    NODE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnyResolvedArgumentProto* internal_default_instance() {
    return reinterpret_cast<const AnyResolvedArgumentProto*>(
               &_AnyResolvedArgumentProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AnyResolvedArgumentProto* other);
  friend void swap(AnyResolvedArgumentProto& a, AnyResolvedArgumentProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnyResolvedArgumentProto* New() const final {
    return CreateMaybeMessage<AnyResolvedArgumentProto>(NULL);
  }

  AnyResolvedArgumentProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnyResolvedArgumentProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyResolvedArgumentProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedMakeProtoFieldProto resolved_make_proto_field_node = 14;
  bool has_resolved_make_proto_field_node() const;
  void clear_resolved_make_proto_field_node();
  static const int kResolvedMakeProtoFieldNodeFieldNumber = 14;
  private:
  const ::zetasql::ResolvedMakeProtoFieldProto& _internal_resolved_make_proto_field_node() const;
  public:
  const ::zetasql::ResolvedMakeProtoFieldProto& resolved_make_proto_field_node() const;
  ::zetasql::ResolvedMakeProtoFieldProto* release_resolved_make_proto_field_node();
  ::zetasql::ResolvedMakeProtoFieldProto* mutable_resolved_make_proto_field_node();
  void set_allocated_resolved_make_proto_field_node(::zetasql::ResolvedMakeProtoFieldProto* resolved_make_proto_field_node);

  // optional .zetasql.ResolvedColumnHolderProto resolved_column_holder_node = 23;
  bool has_resolved_column_holder_node() const;
  void clear_resolved_column_holder_node();
  static const int kResolvedColumnHolderNodeFieldNumber = 23;
  private:
  const ::zetasql::ResolvedColumnHolderProto& _internal_resolved_column_holder_node() const;
  public:
  const ::zetasql::ResolvedColumnHolderProto& resolved_column_holder_node() const;
  ::zetasql::ResolvedColumnHolderProto* release_resolved_column_holder_node();
  ::zetasql::ResolvedColumnHolderProto* mutable_resolved_column_holder_node();
  void set_allocated_resolved_column_holder_node(::zetasql::ResolvedColumnHolderProto* resolved_column_holder_node);

  // optional .zetasql.ResolvedComputedColumnProto resolved_computed_column_node = 32;
  bool has_resolved_computed_column_node() const;
  void clear_resolved_computed_column_node();
  static const int kResolvedComputedColumnNodeFieldNumber = 32;
  private:
  const ::zetasql::ResolvedComputedColumnProto& _internal_resolved_computed_column_node() const;
  public:
  const ::zetasql::ResolvedComputedColumnProto& resolved_computed_column_node() const;
  ::zetasql::ResolvedComputedColumnProto* release_resolved_computed_column_node();
  ::zetasql::ResolvedComputedColumnProto* mutable_resolved_computed_column_node();
  void set_allocated_resolved_computed_column_node(::zetasql::ResolvedComputedColumnProto* resolved_computed_column_node);

  // optional .zetasql.ResolvedOrderByItemProto resolved_order_by_item_node = 33;
  bool has_resolved_order_by_item_node() const;
  void clear_resolved_order_by_item_node();
  static const int kResolvedOrderByItemNodeFieldNumber = 33;
  private:
  const ::zetasql::ResolvedOrderByItemProto& _internal_resolved_order_by_item_node() const;
  public:
  const ::zetasql::ResolvedOrderByItemProto& resolved_order_by_item_node() const;
  ::zetasql::ResolvedOrderByItemProto* release_resolved_order_by_item_node();
  ::zetasql::ResolvedOrderByItemProto* mutable_resolved_order_by_item_node();
  void set_allocated_resolved_order_by_item_node(::zetasql::ResolvedOrderByItemProto* resolved_order_by_item_node);

  // optional .zetasql.ResolvedOutputColumnProto resolved_output_column_node = 34;
  bool has_resolved_output_column_node() const;
  void clear_resolved_output_column_node();
  static const int kResolvedOutputColumnNodeFieldNumber = 34;
  private:
  const ::zetasql::ResolvedOutputColumnProto& _internal_resolved_output_column_node() const;
  public:
  const ::zetasql::ResolvedOutputColumnProto& resolved_output_column_node() const;
  ::zetasql::ResolvedOutputColumnProto* release_resolved_output_column_node();
  ::zetasql::ResolvedOutputColumnProto* mutable_resolved_output_column_node();
  void set_allocated_resolved_output_column_node(::zetasql::ResolvedOutputColumnProto* resolved_output_column_node);

  // optional .zetasql.ResolvedWithEntryProto resolved_with_entry_node = 52;
  bool has_resolved_with_entry_node() const;
  void clear_resolved_with_entry_node();
  static const int kResolvedWithEntryNodeFieldNumber = 52;
  private:
  const ::zetasql::ResolvedWithEntryProto& _internal_resolved_with_entry_node() const;
  public:
  const ::zetasql::ResolvedWithEntryProto& resolved_with_entry_node() const;
  ::zetasql::ResolvedWithEntryProto* release_resolved_with_entry_node();
  ::zetasql::ResolvedWithEntryProto* mutable_resolved_with_entry_node();
  void set_allocated_resolved_with_entry_node(::zetasql::ResolvedWithEntryProto* resolved_with_entry_node);

  // optional .zetasql.ResolvedOptionProto resolved_option_node = 53;
  bool has_resolved_option_node() const;
  void clear_resolved_option_node();
  static const int kResolvedOptionNodeFieldNumber = 53;
  private:
  const ::zetasql::ResolvedOptionProto& _internal_resolved_option_node() const;
  public:
  const ::zetasql::ResolvedOptionProto& resolved_option_node() const;
  ::zetasql::ResolvedOptionProto* release_resolved_option_node();
  ::zetasql::ResolvedOptionProto* mutable_resolved_option_node();
  void set_allocated_resolved_option_node(::zetasql::ResolvedOptionProto* resolved_option_node);

  // optional .zetasql.ResolvedWindowPartitioningProto resolved_window_partitioning_node = 54;
  bool has_resolved_window_partitioning_node() const;
  void clear_resolved_window_partitioning_node();
  static const int kResolvedWindowPartitioningNodeFieldNumber = 54;
  private:
  const ::zetasql::ResolvedWindowPartitioningProto& _internal_resolved_window_partitioning_node() const;
  public:
  const ::zetasql::ResolvedWindowPartitioningProto& resolved_window_partitioning_node() const;
  ::zetasql::ResolvedWindowPartitioningProto* release_resolved_window_partitioning_node();
  ::zetasql::ResolvedWindowPartitioningProto* mutable_resolved_window_partitioning_node();
  void set_allocated_resolved_window_partitioning_node(::zetasql::ResolvedWindowPartitioningProto* resolved_window_partitioning_node);

  // optional .zetasql.ResolvedWindowOrderingProto resolved_window_ordering_node = 55;
  bool has_resolved_window_ordering_node() const;
  void clear_resolved_window_ordering_node();
  static const int kResolvedWindowOrderingNodeFieldNumber = 55;
  private:
  const ::zetasql::ResolvedWindowOrderingProto& _internal_resolved_window_ordering_node() const;
  public:
  const ::zetasql::ResolvedWindowOrderingProto& resolved_window_ordering_node() const;
  ::zetasql::ResolvedWindowOrderingProto* release_resolved_window_ordering_node();
  ::zetasql::ResolvedWindowOrderingProto* mutable_resolved_window_ordering_node();
  void set_allocated_resolved_window_ordering_node(::zetasql::ResolvedWindowOrderingProto* resolved_window_ordering_node);

  // optional .zetasql.ResolvedWindowFrameProto resolved_window_frame_node = 56;
  bool has_resolved_window_frame_node() const;
  void clear_resolved_window_frame_node();
  static const int kResolvedWindowFrameNodeFieldNumber = 56;
  private:
  const ::zetasql::ResolvedWindowFrameProto& _internal_resolved_window_frame_node() const;
  public:
  const ::zetasql::ResolvedWindowFrameProto& resolved_window_frame_node() const;
  ::zetasql::ResolvedWindowFrameProto* release_resolved_window_frame_node();
  ::zetasql::ResolvedWindowFrameProto* mutable_resolved_window_frame_node();
  void set_allocated_resolved_window_frame_node(::zetasql::ResolvedWindowFrameProto* resolved_window_frame_node);

  // optional .zetasql.ResolvedAnalyticFunctionGroupProto resolved_analytic_function_group_node = 57;
  bool has_resolved_analytic_function_group_node() const;
  void clear_resolved_analytic_function_group_node();
  static const int kResolvedAnalyticFunctionGroupNodeFieldNumber = 57;
  private:
  const ::zetasql::ResolvedAnalyticFunctionGroupProto& _internal_resolved_analytic_function_group_node() const;
  public:
  const ::zetasql::ResolvedAnalyticFunctionGroupProto& resolved_analytic_function_group_node() const;
  ::zetasql::ResolvedAnalyticFunctionGroupProto* release_resolved_analytic_function_group_node();
  ::zetasql::ResolvedAnalyticFunctionGroupProto* mutable_resolved_analytic_function_group_node();
  void set_allocated_resolved_analytic_function_group_node(::zetasql::ResolvedAnalyticFunctionGroupProto* resolved_analytic_function_group_node);

  // optional .zetasql.ResolvedWindowFrameExprProto resolved_window_frame_expr_node = 58;
  bool has_resolved_window_frame_expr_node() const;
  void clear_resolved_window_frame_expr_node();
  static const int kResolvedWindowFrameExprNodeFieldNumber = 58;
  private:
  const ::zetasql::ResolvedWindowFrameExprProto& _internal_resolved_window_frame_expr_node() const;
  public:
  const ::zetasql::ResolvedWindowFrameExprProto& resolved_window_frame_expr_node() const;
  ::zetasql::ResolvedWindowFrameExprProto* release_resolved_window_frame_expr_node();
  ::zetasql::ResolvedWindowFrameExprProto* mutable_resolved_window_frame_expr_node();
  void set_allocated_resolved_window_frame_expr_node(::zetasql::ResolvedWindowFrameExprProto* resolved_window_frame_expr_node);

  // optional .zetasql.ResolvedDMLValueProto resolved_dmlvalue_node = 59;
  bool has_resolved_dmlvalue_node() const;
  void clear_resolved_dmlvalue_node();
  static const int kResolvedDmlvalueNodeFieldNumber = 59;
  private:
  const ::zetasql::ResolvedDMLValueProto& _internal_resolved_dmlvalue_node() const;
  public:
  const ::zetasql::ResolvedDMLValueProto& resolved_dmlvalue_node() const;
  ::zetasql::ResolvedDMLValueProto* release_resolved_dmlvalue_node();
  ::zetasql::ResolvedDMLValueProto* mutable_resolved_dmlvalue_node();
  void set_allocated_resolved_dmlvalue_node(::zetasql::ResolvedDMLValueProto* resolved_dmlvalue_node);

  // optional .zetasql.ResolvedAssertRowsModifiedProto resolved_assert_rows_modified_node = 61;
  bool has_resolved_assert_rows_modified_node() const;
  void clear_resolved_assert_rows_modified_node();
  static const int kResolvedAssertRowsModifiedNodeFieldNumber = 61;
  private:
  const ::zetasql::ResolvedAssertRowsModifiedProto& _internal_resolved_assert_rows_modified_node() const;
  public:
  const ::zetasql::ResolvedAssertRowsModifiedProto& resolved_assert_rows_modified_node() const;
  ::zetasql::ResolvedAssertRowsModifiedProto* release_resolved_assert_rows_modified_node();
  ::zetasql::ResolvedAssertRowsModifiedProto* mutable_resolved_assert_rows_modified_node();
  void set_allocated_resolved_assert_rows_modified_node(::zetasql::ResolvedAssertRowsModifiedProto* resolved_assert_rows_modified_node);

  // optional .zetasql.ResolvedInsertRowProto resolved_insert_row_node = 62;
  bool has_resolved_insert_row_node() const;
  void clear_resolved_insert_row_node();
  static const int kResolvedInsertRowNodeFieldNumber = 62;
  private:
  const ::zetasql::ResolvedInsertRowProto& _internal_resolved_insert_row_node() const;
  public:
  const ::zetasql::ResolvedInsertRowProto& resolved_insert_row_node() const;
  ::zetasql::ResolvedInsertRowProto* release_resolved_insert_row_node();
  ::zetasql::ResolvedInsertRowProto* mutable_resolved_insert_row_node();
  void set_allocated_resolved_insert_row_node(::zetasql::ResolvedInsertRowProto* resolved_insert_row_node);

  // optional .zetasql.ResolvedUpdateItemProto resolved_update_item_node = 65;
  bool has_resolved_update_item_node() const;
  void clear_resolved_update_item_node();
  static const int kResolvedUpdateItemNodeFieldNumber = 65;
  private:
  const ::zetasql::ResolvedUpdateItemProto& _internal_resolved_update_item_node() const;
  public:
  const ::zetasql::ResolvedUpdateItemProto& resolved_update_item_node() const;
  ::zetasql::ResolvedUpdateItemProto* release_resolved_update_item_node();
  ::zetasql::ResolvedUpdateItemProto* mutable_resolved_update_item_node();
  void set_allocated_resolved_update_item_node(::zetasql::ResolvedUpdateItemProto* resolved_update_item_node);

  // optional .zetasql.ResolvedPrivilegeProto resolved_privilege_node = 67;
  bool has_resolved_privilege_node() const;
  void clear_resolved_privilege_node();
  static const int kResolvedPrivilegeNodeFieldNumber = 67;
  private:
  const ::zetasql::ResolvedPrivilegeProto& _internal_resolved_privilege_node() const;
  public:
  const ::zetasql::ResolvedPrivilegeProto& resolved_privilege_node() const;
  ::zetasql::ResolvedPrivilegeProto* release_resolved_privilege_node();
  ::zetasql::ResolvedPrivilegeProto* mutable_resolved_privilege_node();
  void set_allocated_resolved_privilege_node(::zetasql::ResolvedPrivilegeProto* resolved_privilege_node);

  // optional .zetasql.ResolvedArgumentDefProto resolved_argument_def_node = 77;
  bool has_resolved_argument_def_node() const;
  void clear_resolved_argument_def_node();
  static const int kResolvedArgumentDefNodeFieldNumber = 77;
  private:
  const ::zetasql::ResolvedArgumentDefProto& _internal_resolved_argument_def_node() const;
  public:
  const ::zetasql::ResolvedArgumentDefProto& resolved_argument_def_node() const;
  ::zetasql::ResolvedArgumentDefProto* release_resolved_argument_def_node();
  ::zetasql::ResolvedArgumentDefProto* mutable_resolved_argument_def_node();
  void set_allocated_resolved_argument_def_node(::zetasql::ResolvedArgumentDefProto* resolved_argument_def_node);

  // optional .zetasql.ResolvedArgumentListProto resolved_argument_list_node = 79;
  bool has_resolved_argument_list_node() const;
  void clear_resolved_argument_list_node();
  static const int kResolvedArgumentListNodeFieldNumber = 79;
  private:
  const ::zetasql::ResolvedArgumentListProto& _internal_resolved_argument_list_node() const;
  public:
  const ::zetasql::ResolvedArgumentListProto& resolved_argument_list_node() const;
  ::zetasql::ResolvedArgumentListProto* release_resolved_argument_list_node();
  ::zetasql::ResolvedArgumentListProto* mutable_resolved_argument_list_node();
  void set_allocated_resolved_argument_list_node(::zetasql::ResolvedArgumentListProto* resolved_argument_list_node);

  // optional .zetasql.ResolvedFunctionArgumentProto resolved_function_argument_node = 82;
  bool has_resolved_function_argument_node() const;
  void clear_resolved_function_argument_node();
  static const int kResolvedFunctionArgumentNodeFieldNumber = 82;
  private:
  const ::zetasql::ResolvedFunctionArgumentProto& _internal_resolved_function_argument_node() const;
  public:
  const ::zetasql::ResolvedFunctionArgumentProto& resolved_function_argument_node() const;
  ::zetasql::ResolvedFunctionArgumentProto* release_resolved_function_argument_node();
  ::zetasql::ResolvedFunctionArgumentProto* mutable_resolved_function_argument_node();
  void set_allocated_resolved_function_argument_node(::zetasql::ResolvedFunctionArgumentProto* resolved_function_argument_node);

  // optional .zetasql.ResolvedFunctionSignatureHolderProto resolved_function_signature_holder_node = 84;
  bool has_resolved_function_signature_holder_node() const;
  void clear_resolved_function_signature_holder_node();
  static const int kResolvedFunctionSignatureHolderNodeFieldNumber = 84;
  private:
  const ::zetasql::ResolvedFunctionSignatureHolderProto& _internal_resolved_function_signature_holder_node() const;
  public:
  const ::zetasql::ResolvedFunctionSignatureHolderProto& resolved_function_signature_holder_node() const;
  ::zetasql::ResolvedFunctionSignatureHolderProto* release_resolved_function_signature_holder_node();
  ::zetasql::ResolvedFunctionSignatureHolderProto* mutable_resolved_function_signature_holder_node();
  void set_allocated_resolved_function_signature_holder_node(::zetasql::ResolvedFunctionSignatureHolderProto* resolved_function_signature_holder_node);

  // optional .zetasql.ResolvedAggregateHavingModifierProto resolved_aggregate_having_modifier_node = 85;
  bool has_resolved_aggregate_having_modifier_node() const;
  void clear_resolved_aggregate_having_modifier_node();
  static const int kResolvedAggregateHavingModifierNodeFieldNumber = 85;
  private:
  const ::zetasql::ResolvedAggregateHavingModifierProto& _internal_resolved_aggregate_having_modifier_node() const;
  public:
  const ::zetasql::ResolvedAggregateHavingModifierProto& resolved_aggregate_having_modifier_node() const;
  ::zetasql::ResolvedAggregateHavingModifierProto* release_resolved_aggregate_having_modifier_node();
  ::zetasql::ResolvedAggregateHavingModifierProto* mutable_resolved_aggregate_having_modifier_node();
  void set_allocated_resolved_aggregate_having_modifier_node(::zetasql::ResolvedAggregateHavingModifierProto* resolved_aggregate_having_modifier_node);

  // optional .zetasql.ResolvedColumnDefinitionProto resolved_column_definition_node = 91;
  bool has_resolved_column_definition_node() const;
  void clear_resolved_column_definition_node();
  static const int kResolvedColumnDefinitionNodeFieldNumber = 91;
  private:
  const ::zetasql::ResolvedColumnDefinitionProto& _internal_resolved_column_definition_node() const;
  public:
  const ::zetasql::ResolvedColumnDefinitionProto& resolved_column_definition_node() const;
  ::zetasql::ResolvedColumnDefinitionProto* release_resolved_column_definition_node();
  ::zetasql::ResolvedColumnDefinitionProto* mutable_resolved_column_definition_node();
  void set_allocated_resolved_column_definition_node(::zetasql::ResolvedColumnDefinitionProto* resolved_column_definition_node);

  // optional .zetasql.ResolvedGroupingSetProto resolved_grouping_set_node = 93;
  bool has_resolved_grouping_set_node() const;
  void clear_resolved_grouping_set_node();
  static const int kResolvedGroupingSetNodeFieldNumber = 93;
  private:
  const ::zetasql::ResolvedGroupingSetProto& _internal_resolved_grouping_set_node() const;
  public:
  const ::zetasql::ResolvedGroupingSetProto& resolved_grouping_set_node() const;
  ::zetasql::ResolvedGroupingSetProto* release_resolved_grouping_set_node();
  ::zetasql::ResolvedGroupingSetProto* mutable_resolved_grouping_set_node();
  void set_allocated_resolved_grouping_set_node(::zetasql::ResolvedGroupingSetProto* resolved_grouping_set_node);

  // optional .zetasql.ResolvedSetOperationItemProto resolved_set_operation_item_node = 94;
  bool has_resolved_set_operation_item_node() const;
  void clear_resolved_set_operation_item_node();
  static const int kResolvedSetOperationItemNodeFieldNumber = 94;
  private:
  const ::zetasql::ResolvedSetOperationItemProto& _internal_resolved_set_operation_item_node() const;
  public:
  const ::zetasql::ResolvedSetOperationItemProto& resolved_set_operation_item_node() const;
  ::zetasql::ResolvedSetOperationItemProto* release_resolved_set_operation_item_node();
  ::zetasql::ResolvedSetOperationItemProto* mutable_resolved_set_operation_item_node();
  void set_allocated_resolved_set_operation_item_node(::zetasql::ResolvedSetOperationItemProto* resolved_set_operation_item_node);

  // optional .zetasql.ResolvedIndexItemProto resolved_index_item_node = 96;
  bool has_resolved_index_item_node() const;
  void clear_resolved_index_item_node();
  static const int kResolvedIndexItemNodeFieldNumber = 96;
  private:
  const ::zetasql::ResolvedIndexItemProto& _internal_resolved_index_item_node() const;
  public:
  const ::zetasql::ResolvedIndexItemProto& resolved_index_item_node() const;
  ::zetasql::ResolvedIndexItemProto* release_resolved_index_item_node();
  ::zetasql::ResolvedIndexItemProto* mutable_resolved_index_item_node();
  void set_allocated_resolved_index_item_node(::zetasql::ResolvedIndexItemProto* resolved_index_item_node);

  // optional .zetasql.ResolvedMergeWhenProto resolved_merge_when_node = 100;
  bool has_resolved_merge_when_node() const;
  void clear_resolved_merge_when_node();
  static const int kResolvedMergeWhenNodeFieldNumber = 100;
  private:
  const ::zetasql::ResolvedMergeWhenProto& _internal_resolved_merge_when_node() const;
  public:
  const ::zetasql::ResolvedMergeWhenProto& resolved_merge_when_node() const;
  ::zetasql::ResolvedMergeWhenProto* release_resolved_merge_when_node();
  ::zetasql::ResolvedMergeWhenProto* mutable_resolved_merge_when_node();
  void set_allocated_resolved_merge_when_node(::zetasql::ResolvedMergeWhenProto* resolved_merge_when_node);

  // optional .zetasql.ResolvedUpdateArrayItemProto resolved_update_array_item_node = 102;
  bool has_resolved_update_array_item_node() const;
  void clear_resolved_update_array_item_node();
  static const int kResolvedUpdateArrayItemNodeFieldNumber = 102;
  private:
  const ::zetasql::ResolvedUpdateArrayItemProto& _internal_resolved_update_array_item_node() const;
  public:
  const ::zetasql::ResolvedUpdateArrayItemProto& resolved_update_array_item_node() const;
  ::zetasql::ResolvedUpdateArrayItemProto* release_resolved_update_array_item_node();
  ::zetasql::ResolvedUpdateArrayItemProto* mutable_resolved_update_array_item_node();
  void set_allocated_resolved_update_array_item_node(::zetasql::ResolvedUpdateArrayItemProto* resolved_update_array_item_node);

  // optional .zetasql.ResolvedColumnAnnotationsProto resolved_column_annotations_node = 104;
  bool has_resolved_column_annotations_node() const;
  void clear_resolved_column_annotations_node();
  static const int kResolvedColumnAnnotationsNodeFieldNumber = 104;
  private:
  const ::zetasql::ResolvedColumnAnnotationsProto& _internal_resolved_column_annotations_node() const;
  public:
  const ::zetasql::ResolvedColumnAnnotationsProto& resolved_column_annotations_node() const;
  ::zetasql::ResolvedColumnAnnotationsProto* release_resolved_column_annotations_node();
  ::zetasql::ResolvedColumnAnnotationsProto* mutable_resolved_column_annotations_node();
  void set_allocated_resolved_column_annotations_node(::zetasql::ResolvedColumnAnnotationsProto* resolved_column_annotations_node);

  // optional .zetasql.ResolvedGeneratedColumnInfoProto resolved_generated_column_info_node = 105;
  bool has_resolved_generated_column_info_node() const;
  void clear_resolved_generated_column_info_node();
  static const int kResolvedGeneratedColumnInfoNodeFieldNumber = 105;
  private:
  const ::zetasql::ResolvedGeneratedColumnInfoProto& _internal_resolved_generated_column_info_node() const;
  public:
  const ::zetasql::ResolvedGeneratedColumnInfoProto& resolved_generated_column_info_node() const;
  ::zetasql::ResolvedGeneratedColumnInfoProto* release_resolved_generated_column_info_node();
  ::zetasql::ResolvedGeneratedColumnInfoProto* mutable_resolved_generated_column_info_node();
  void set_allocated_resolved_generated_column_info_node(::zetasql::ResolvedGeneratedColumnInfoProto* resolved_generated_column_info_node);

  // optional .zetasql.ResolvedModelProto resolved_model_node = 109;
  bool has_resolved_model_node() const;
  void clear_resolved_model_node();
  static const int kResolvedModelNodeFieldNumber = 109;
  private:
  const ::zetasql::ResolvedModelProto& _internal_resolved_model_node() const;
  public:
  const ::zetasql::ResolvedModelProto& resolved_model_node() const;
  ::zetasql::ResolvedModelProto* release_resolved_model_node();
  ::zetasql::ResolvedModelProto* mutable_resolved_model_node();
  void set_allocated_resolved_model_node(::zetasql::ResolvedModelProto* resolved_model_node);

  // optional .zetasql.AnyResolvedAlterActionProto resolved_alter_action_node = 116;
  bool has_resolved_alter_action_node() const;
  void clear_resolved_alter_action_node();
  static const int kResolvedAlterActionNodeFieldNumber = 116;
  private:
  const ::zetasql::AnyResolvedAlterActionProto& _internal_resolved_alter_action_node() const;
  public:
  const ::zetasql::AnyResolvedAlterActionProto& resolved_alter_action_node() const;
  ::zetasql::AnyResolvedAlterActionProto* release_resolved_alter_action_node();
  ::zetasql::AnyResolvedAlterActionProto* mutable_resolved_alter_action_node();
  void set_allocated_resolved_alter_action_node(::zetasql::AnyResolvedAlterActionProto* resolved_alter_action_node);

  // optional .zetasql.ResolvedUnnestItemProto resolved_unnest_item_node = 126;
  bool has_resolved_unnest_item_node() const;
  void clear_resolved_unnest_item_node();
  static const int kResolvedUnnestItemNodeFieldNumber = 126;
  private:
  const ::zetasql::ResolvedUnnestItemProto& _internal_resolved_unnest_item_node() const;
  public:
  const ::zetasql::ResolvedUnnestItemProto& resolved_unnest_item_node() const;
  ::zetasql::ResolvedUnnestItemProto* release_resolved_unnest_item_node();
  ::zetasql::ResolvedUnnestItemProto* mutable_resolved_unnest_item_node();
  void set_allocated_resolved_unnest_item_node(::zetasql::ResolvedUnnestItemProto* resolved_unnest_item_node);

  // optional .zetasql.ResolvedReplaceFieldItemProto resolved_replace_field_item_node = 128;
  bool has_resolved_replace_field_item_node() const;
  void clear_resolved_replace_field_item_node();
  static const int kResolvedReplaceFieldItemNodeFieldNumber = 128;
  private:
  const ::zetasql::ResolvedReplaceFieldItemProto& _internal_resolved_replace_field_item_node() const;
  public:
  const ::zetasql::ResolvedReplaceFieldItemProto& resolved_replace_field_item_node() const;
  ::zetasql::ResolvedReplaceFieldItemProto* release_resolved_replace_field_item_node();
  ::zetasql::ResolvedReplaceFieldItemProto* mutable_resolved_replace_field_item_node();
  void set_allocated_resolved_replace_field_item_node(::zetasql::ResolvedReplaceFieldItemProto* resolved_replace_field_item_node);

  // optional .zetasql.ResolvedConnectionProto resolved_connection_node = 141;
  bool has_resolved_connection_node() const;
  void clear_resolved_connection_node();
  static const int kResolvedConnectionNodeFieldNumber = 141;
  private:
  const ::zetasql::ResolvedConnectionProto& _internal_resolved_connection_node() const;
  public:
  const ::zetasql::ResolvedConnectionProto& resolved_connection_node() const;
  ::zetasql::ResolvedConnectionProto* release_resolved_connection_node();
  ::zetasql::ResolvedConnectionProto* mutable_resolved_connection_node();
  void set_allocated_resolved_connection_node(::zetasql::ResolvedConnectionProto* resolved_connection_node);

  // optional .zetasql.ResolvedExecuteImmediateArgumentProto resolved_execute_immediate_argument_node = 143;
  bool has_resolved_execute_immediate_argument_node() const;
  void clear_resolved_execute_immediate_argument_node();
  static const int kResolvedExecuteImmediateArgumentNodeFieldNumber = 143;
  private:
  const ::zetasql::ResolvedExecuteImmediateArgumentProto& _internal_resolved_execute_immediate_argument_node() const;
  public:
  const ::zetasql::ResolvedExecuteImmediateArgumentProto& resolved_execute_immediate_argument_node() const;
  ::zetasql::ResolvedExecuteImmediateArgumentProto* release_resolved_execute_immediate_argument_node();
  ::zetasql::ResolvedExecuteImmediateArgumentProto* mutable_resolved_execute_immediate_argument_node();
  void set_allocated_resolved_execute_immediate_argument_node(::zetasql::ResolvedExecuteImmediateArgumentProto* resolved_execute_immediate_argument_node);

  // optional .zetasql.ResolvedDescriptorProto resolved_descriptor_node = 144;
  bool has_resolved_descriptor_node() const;
  void clear_resolved_descriptor_node();
  static const int kResolvedDescriptorNodeFieldNumber = 144;
  private:
  const ::zetasql::ResolvedDescriptorProto& _internal_resolved_descriptor_node() const;
  public:
  const ::zetasql::ResolvedDescriptorProto& resolved_descriptor_node() const;
  ::zetasql::ResolvedDescriptorProto* release_resolved_descriptor_node();
  ::zetasql::ResolvedDescriptorProto* mutable_resolved_descriptor_node();
  void set_allocated_resolved_descriptor_node(::zetasql::ResolvedDescriptorProto* resolved_descriptor_node);

  // optional .zetasql.ResolvedExtendedCastElementProto resolved_extended_cast_element_node = 151;
  bool has_resolved_extended_cast_element_node() const;
  void clear_resolved_extended_cast_element_node();
  static const int kResolvedExtendedCastElementNodeFieldNumber = 151;
  private:
  const ::zetasql::ResolvedExtendedCastElementProto& _internal_resolved_extended_cast_element_node() const;
  public:
  const ::zetasql::ResolvedExtendedCastElementProto& resolved_extended_cast_element_node() const;
  ::zetasql::ResolvedExtendedCastElementProto* release_resolved_extended_cast_element_node();
  ::zetasql::ResolvedExtendedCastElementProto* mutable_resolved_extended_cast_element_node();
  void set_allocated_resolved_extended_cast_element_node(::zetasql::ResolvedExtendedCastElementProto* resolved_extended_cast_element_node);

  // optional .zetasql.ResolvedWithPartitionColumnsProto resolved_with_partition_columns_node = 153;
  bool has_resolved_with_partition_columns_node() const;
  void clear_resolved_with_partition_columns_node();
  static const int kResolvedWithPartitionColumnsNodeFieldNumber = 153;
  private:
  const ::zetasql::ResolvedWithPartitionColumnsProto& _internal_resolved_with_partition_columns_node() const;
  public:
  const ::zetasql::ResolvedWithPartitionColumnsProto& resolved_with_partition_columns_node() const;
  ::zetasql::ResolvedWithPartitionColumnsProto* release_resolved_with_partition_columns_node();
  ::zetasql::ResolvedWithPartitionColumnsProto* mutable_resolved_with_partition_columns_node();
  void set_allocated_resolved_with_partition_columns_node(::zetasql::ResolvedWithPartitionColumnsProto* resolved_with_partition_columns_node);

  // optional .zetasql.ResolvedExtendedCastProto resolved_extended_cast_node = 158;
  bool has_resolved_extended_cast_node() const;
  void clear_resolved_extended_cast_node();
  static const int kResolvedExtendedCastNodeFieldNumber = 158;
  private:
  const ::zetasql::ResolvedExtendedCastProto& _internal_resolved_extended_cast_node() const;
  public:
  const ::zetasql::ResolvedExtendedCastProto& resolved_extended_cast_node() const;
  ::zetasql::ResolvedExtendedCastProto* release_resolved_extended_cast_node();
  ::zetasql::ResolvedExtendedCastProto* mutable_resolved_extended_cast_node();
  void set_allocated_resolved_extended_cast_node(::zetasql::ResolvedExtendedCastProto* resolved_extended_cast_node);

  // optional .zetasql.ResolvedInlineLambdaProto resolved_inline_lambda_node = 159;
  bool has_resolved_inline_lambda_node() const;
  void clear_resolved_inline_lambda_node();
  static const int kResolvedInlineLambdaNodeFieldNumber = 159;
  private:
  const ::zetasql::ResolvedInlineLambdaProto& _internal_resolved_inline_lambda_node() const;
  public:
  const ::zetasql::ResolvedInlineLambdaProto& resolved_inline_lambda_node() const;
  ::zetasql::ResolvedInlineLambdaProto* release_resolved_inline_lambda_node();
  ::zetasql::ResolvedInlineLambdaProto* mutable_resolved_inline_lambda_node();
  void set_allocated_resolved_inline_lambda_node(::zetasql::ResolvedInlineLambdaProto* resolved_inline_lambda_node);

  // optional .zetasql.AnyResolvedConstraintProto resolved_constraint_node = 162;
  bool has_resolved_constraint_node() const;
  void clear_resolved_constraint_node();
  static const int kResolvedConstraintNodeFieldNumber = 162;
  private:
  const ::zetasql::AnyResolvedConstraintProto& _internal_resolved_constraint_node() const;
  public:
  const ::zetasql::AnyResolvedConstraintProto& resolved_constraint_node() const;
  ::zetasql::AnyResolvedConstraintProto* release_resolved_constraint_node();
  ::zetasql::AnyResolvedConstraintProto* mutable_resolved_constraint_node();
  void set_allocated_resolved_constraint_node(::zetasql::AnyResolvedConstraintProto* resolved_constraint_node);

  // optional .zetasql.ResolvedPivotColumnProto resolved_pivot_column_node = 166;
  bool has_resolved_pivot_column_node() const;
  void clear_resolved_pivot_column_node();
  static const int kResolvedPivotColumnNodeFieldNumber = 166;
  private:
  const ::zetasql::ResolvedPivotColumnProto& _internal_resolved_pivot_column_node() const;
  public:
  const ::zetasql::ResolvedPivotColumnProto& resolved_pivot_column_node() const;
  ::zetasql::ResolvedPivotColumnProto* release_resolved_pivot_column_node();
  ::zetasql::ResolvedPivotColumnProto* mutable_resolved_pivot_column_node();
  void set_allocated_resolved_pivot_column_node(::zetasql::ResolvedPivotColumnProto* resolved_pivot_column_node);

  // optional .zetasql.ResolvedReturningClauseProto resolved_returning_clause_node = 170;
  bool has_resolved_returning_clause_node() const;
  void clear_resolved_returning_clause_node();
  static const int kResolvedReturningClauseNodeFieldNumber = 170;
  private:
  const ::zetasql::ResolvedReturningClauseProto& _internal_resolved_returning_clause_node() const;
  public:
  const ::zetasql::ResolvedReturningClauseProto& resolved_returning_clause_node() const;
  ::zetasql::ResolvedReturningClauseProto* release_resolved_returning_clause_node();
  ::zetasql::ResolvedReturningClauseProto* mutable_resolved_returning_clause_node();
  void set_allocated_resolved_returning_clause_node(::zetasql::ResolvedReturningClauseProto* resolved_returning_clause_node);

  // optional .zetasql.ResolvedUnpivotArgProto resolved_unpivot_arg_node = 171;
  bool has_resolved_unpivot_arg_node() const;
  void clear_resolved_unpivot_arg_node();
  static const int kResolvedUnpivotArgNodeFieldNumber = 171;
  private:
  const ::zetasql::ResolvedUnpivotArgProto& _internal_resolved_unpivot_arg_node() const;
  public:
  const ::zetasql::ResolvedUnpivotArgProto& resolved_unpivot_arg_node() const;
  ::zetasql::ResolvedUnpivotArgProto* release_resolved_unpivot_arg_node();
  ::zetasql::ResolvedUnpivotArgProto* mutable_resolved_unpivot_arg_node();
  void set_allocated_resolved_unpivot_arg_node(::zetasql::ResolvedUnpivotArgProto* resolved_unpivot_arg_node);

  // optional .zetasql.ResolvedFilterFieldArgProto resolved_filter_field_arg_node = 173;
  bool has_resolved_filter_field_arg_node() const;
  void clear_resolved_filter_field_arg_node();
  static const int kResolvedFilterFieldArgNodeFieldNumber = 173;
  private:
  const ::zetasql::ResolvedFilterFieldArgProto& _internal_resolved_filter_field_arg_node() const;
  public:
  const ::zetasql::ResolvedFilterFieldArgProto& resolved_filter_field_arg_node() const;
  ::zetasql::ResolvedFilterFieldArgProto* release_resolved_filter_field_arg_node();
  ::zetasql::ResolvedFilterFieldArgProto* mutable_resolved_filter_field_arg_node();
  void set_allocated_resolved_filter_field_arg_node(::zetasql::ResolvedFilterFieldArgProto* resolved_filter_field_arg_node);

  // optional .zetasql.ResolvedTableAndColumnInfoProto resolved_table_and_column_info_node = 179;
  bool has_resolved_table_and_column_info_node() const;
  void clear_resolved_table_and_column_info_node();
  static const int kResolvedTableAndColumnInfoNodeFieldNumber = 179;
  private:
  const ::zetasql::ResolvedTableAndColumnInfoProto& _internal_resolved_table_and_column_info_node() const;
  public:
  const ::zetasql::ResolvedTableAndColumnInfoProto& resolved_table_and_column_info_node() const;
  ::zetasql::ResolvedTableAndColumnInfoProto* release_resolved_table_and_column_info_node();
  ::zetasql::ResolvedTableAndColumnInfoProto* mutable_resolved_table_and_column_info_node();
  void set_allocated_resolved_table_and_column_info_node(::zetasql::ResolvedTableAndColumnInfoProto* resolved_table_and_column_info_node);

  // optional .zetasql.ResolvedColumnDefaultValueProto resolved_column_default_value_node = 188;
  bool has_resolved_column_default_value_node() const;
  void clear_resolved_column_default_value_node();
  static const int kResolvedColumnDefaultValueNodeFieldNumber = 188;
  private:
  const ::zetasql::ResolvedColumnDefaultValueProto& _internal_resolved_column_default_value_node() const;
  public:
  const ::zetasql::ResolvedColumnDefaultValueProto& resolved_column_default_value_node() const;
  ::zetasql::ResolvedColumnDefaultValueProto* release_resolved_column_default_value_node();
  ::zetasql::ResolvedColumnDefaultValueProto* mutable_resolved_column_default_value_node();
  void set_allocated_resolved_column_default_value_node(::zetasql::ResolvedColumnDefaultValueProto* resolved_column_default_value_node);

  // optional .zetasql.ResolvedObjectUnitProto resolved_object_unit_node = 200;
  bool has_resolved_object_unit_node() const;
  void clear_resolved_object_unit_node();
  static const int kResolvedObjectUnitNodeFieldNumber = 200;
  private:
  const ::zetasql::ResolvedObjectUnitProto& _internal_resolved_object_unit_node() const;
  public:
  const ::zetasql::ResolvedObjectUnitProto& resolved_object_unit_node() const;
  ::zetasql::ResolvedObjectUnitProto* release_resolved_object_unit_node();
  ::zetasql::ResolvedObjectUnitProto* mutable_resolved_object_unit_node();
  void set_allocated_resolved_object_unit_node(::zetasql::ResolvedObjectUnitProto* resolved_object_unit_node);

  void clear_node();
  NodeCase node_case() const;
  // @@protoc_insertion_point(class_scope:zetasql.AnyResolvedArgumentProto)
 private:
  void set_has_resolved_make_proto_field_node();
  void set_has_resolved_column_holder_node();
  void set_has_resolved_computed_column_node();
  void set_has_resolved_order_by_item_node();
  void set_has_resolved_output_column_node();
  void set_has_resolved_with_entry_node();
  void set_has_resolved_option_node();
  void set_has_resolved_window_partitioning_node();
  void set_has_resolved_window_ordering_node();
  void set_has_resolved_window_frame_node();
  void set_has_resolved_analytic_function_group_node();
  void set_has_resolved_window_frame_expr_node();
  void set_has_resolved_dmlvalue_node();
  void set_has_resolved_assert_rows_modified_node();
  void set_has_resolved_insert_row_node();
  void set_has_resolved_update_item_node();
  void set_has_resolved_privilege_node();
  void set_has_resolved_argument_def_node();
  void set_has_resolved_argument_list_node();
  void set_has_resolved_function_argument_node();
  void set_has_resolved_function_signature_holder_node();
  void set_has_resolved_aggregate_having_modifier_node();
  void set_has_resolved_column_definition_node();
  void set_has_resolved_grouping_set_node();
  void set_has_resolved_set_operation_item_node();
  void set_has_resolved_index_item_node();
  void set_has_resolved_merge_when_node();
  void set_has_resolved_update_array_item_node();
  void set_has_resolved_column_annotations_node();
  void set_has_resolved_generated_column_info_node();
  void set_has_resolved_model_node();
  void set_has_resolved_alter_action_node();
  void set_has_resolved_unnest_item_node();
  void set_has_resolved_replace_field_item_node();
  void set_has_resolved_connection_node();
  void set_has_resolved_execute_immediate_argument_node();
  void set_has_resolved_descriptor_node();
  void set_has_resolved_extended_cast_element_node();
  void set_has_resolved_with_partition_columns_node();
  void set_has_resolved_extended_cast_node();
  void set_has_resolved_inline_lambda_node();
  void set_has_resolved_constraint_node();
  void set_has_resolved_pivot_column_node();
  void set_has_resolved_returning_clause_node();
  void set_has_resolved_unpivot_arg_node();
  void set_has_resolved_filter_field_arg_node();
  void set_has_resolved_table_and_column_info_node();
  void set_has_resolved_column_default_value_node();
  void set_has_resolved_object_unit_node();

  inline bool has_node() const;
  inline void clear_has_node();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union NodeUnion {
    NodeUnion() {}
    ::zetasql::ResolvedMakeProtoFieldProto* resolved_make_proto_field_node_;
    ::zetasql::ResolvedColumnHolderProto* resolved_column_holder_node_;
    ::zetasql::ResolvedComputedColumnProto* resolved_computed_column_node_;
    ::zetasql::ResolvedOrderByItemProto* resolved_order_by_item_node_;
    ::zetasql::ResolvedOutputColumnProto* resolved_output_column_node_;
    ::zetasql::ResolvedWithEntryProto* resolved_with_entry_node_;
    ::zetasql::ResolvedOptionProto* resolved_option_node_;
    ::zetasql::ResolvedWindowPartitioningProto* resolved_window_partitioning_node_;
    ::zetasql::ResolvedWindowOrderingProto* resolved_window_ordering_node_;
    ::zetasql::ResolvedWindowFrameProto* resolved_window_frame_node_;
    ::zetasql::ResolvedAnalyticFunctionGroupProto* resolved_analytic_function_group_node_;
    ::zetasql::ResolvedWindowFrameExprProto* resolved_window_frame_expr_node_;
    ::zetasql::ResolvedDMLValueProto* resolved_dmlvalue_node_;
    ::zetasql::ResolvedAssertRowsModifiedProto* resolved_assert_rows_modified_node_;
    ::zetasql::ResolvedInsertRowProto* resolved_insert_row_node_;
    ::zetasql::ResolvedUpdateItemProto* resolved_update_item_node_;
    ::zetasql::ResolvedPrivilegeProto* resolved_privilege_node_;
    ::zetasql::ResolvedArgumentDefProto* resolved_argument_def_node_;
    ::zetasql::ResolvedArgumentListProto* resolved_argument_list_node_;
    ::zetasql::ResolvedFunctionArgumentProto* resolved_function_argument_node_;
    ::zetasql::ResolvedFunctionSignatureHolderProto* resolved_function_signature_holder_node_;
    ::zetasql::ResolvedAggregateHavingModifierProto* resolved_aggregate_having_modifier_node_;
    ::zetasql::ResolvedColumnDefinitionProto* resolved_column_definition_node_;
    ::zetasql::ResolvedGroupingSetProto* resolved_grouping_set_node_;
    ::zetasql::ResolvedSetOperationItemProto* resolved_set_operation_item_node_;
    ::zetasql::ResolvedIndexItemProto* resolved_index_item_node_;
    ::zetasql::ResolvedMergeWhenProto* resolved_merge_when_node_;
    ::zetasql::ResolvedUpdateArrayItemProto* resolved_update_array_item_node_;
    ::zetasql::ResolvedColumnAnnotationsProto* resolved_column_annotations_node_;
    ::zetasql::ResolvedGeneratedColumnInfoProto* resolved_generated_column_info_node_;
    ::zetasql::ResolvedModelProto* resolved_model_node_;
    ::zetasql::AnyResolvedAlterActionProto* resolved_alter_action_node_;
    ::zetasql::ResolvedUnnestItemProto* resolved_unnest_item_node_;
    ::zetasql::ResolvedReplaceFieldItemProto* resolved_replace_field_item_node_;
    ::zetasql::ResolvedConnectionProto* resolved_connection_node_;
    ::zetasql::ResolvedExecuteImmediateArgumentProto* resolved_execute_immediate_argument_node_;
    ::zetasql::ResolvedDescriptorProto* resolved_descriptor_node_;
    ::zetasql::ResolvedExtendedCastElementProto* resolved_extended_cast_element_node_;
    ::zetasql::ResolvedWithPartitionColumnsProto* resolved_with_partition_columns_node_;
    ::zetasql::ResolvedExtendedCastProto* resolved_extended_cast_node_;
    ::zetasql::ResolvedInlineLambdaProto* resolved_inline_lambda_node_;
    ::zetasql::AnyResolvedConstraintProto* resolved_constraint_node_;
    ::zetasql::ResolvedPivotColumnProto* resolved_pivot_column_node_;
    ::zetasql::ResolvedReturningClauseProto* resolved_returning_clause_node_;
    ::zetasql::ResolvedUnpivotArgProto* resolved_unpivot_arg_node_;
    ::zetasql::ResolvedFilterFieldArgProto* resolved_filter_field_arg_node_;
    ::zetasql::ResolvedTableAndColumnInfoProto* resolved_table_and_column_info_node_;
    ::zetasql::ResolvedColumnDefaultValueProto* resolved_column_default_value_node_;
    ::zetasql::ResolvedObjectUnitProto* resolved_object_unit_node_;
  } node_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedArgumentProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedArgumentProto) */ {
 public:
  ResolvedArgumentProto();
  virtual ~ResolvedArgumentProto();

  ResolvedArgumentProto(const ResolvedArgumentProto& from);

  inline ResolvedArgumentProto& operator=(const ResolvedArgumentProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedArgumentProto(ResolvedArgumentProto&& from) noexcept
    : ResolvedArgumentProto() {
    *this = ::std::move(from);
  }

  inline ResolvedArgumentProto& operator=(ResolvedArgumentProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedArgumentProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedArgumentProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedArgumentProto*>(
               &_ResolvedArgumentProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ResolvedArgumentProto* other);
  friend void swap(ResolvedArgumentProto& a, ResolvedArgumentProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedArgumentProto* New() const final {
    return CreateMaybeMessage<ResolvedArgumentProto>(NULL);
  }

  ResolvedArgumentProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedArgumentProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedArgumentProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedNodeProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedNodeProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedNodeProto& parent() const;
  ::zetasql::ResolvedNodeProto* release_parent();
  ::zetasql::ResolvedNodeProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedNodeProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedArgumentProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedNodeProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnyResolvedExprProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.AnyResolvedExprProto) */ {
 public:
  AnyResolvedExprProto();
  virtual ~AnyResolvedExprProto();

  AnyResolvedExprProto(const AnyResolvedExprProto& from);

  inline AnyResolvedExprProto& operator=(const AnyResolvedExprProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnyResolvedExprProto(AnyResolvedExprProto&& from) noexcept
    : AnyResolvedExprProto() {
    *this = ::std::move(from);
  }

  inline AnyResolvedExprProto& operator=(AnyResolvedExprProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnyResolvedExprProto& default_instance();

  enum NodeCase {
    kResolvedLiteralNode = 3,
    kResolvedParameterNode = 4,
    kResolvedExpressionColumnNode = 5,
    kResolvedColumnRefNode = 6,
    kResolvedFunctionCallBaseNode = 7,
    kResolvedCastNode = 11,
    kResolvedMakeStructNode = 12,
    kResolvedMakeProtoNode = 13,
    kResolvedGetStructFieldNode = 15,
    kResolvedGetProtoFieldNode = 16,
    kResolvedSubqueryExprNode = 17,
    kResolvedDmldefaultNode = 60,
    kResolvedArgumentRefNode = 78,
    kResolvedConstantNode = 103,
    kResolvedReplaceFieldNode = 129,
    kResolvedSystemVariableNode = 139,
    kResolvedFlattenNode = 149,
    kResolvedFlattenedArgNode = 150,
    kResolvedGetJsonFieldNode = 165,
    kResolvedFilterFieldNode = 174,
    kResolvedLetExprNode = 197,
    NODE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnyResolvedExprProto* internal_default_instance() {
    return reinterpret_cast<const AnyResolvedExprProto*>(
               &_AnyResolvedExprProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AnyResolvedExprProto* other);
  friend void swap(AnyResolvedExprProto& a, AnyResolvedExprProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnyResolvedExprProto* New() const final {
    return CreateMaybeMessage<AnyResolvedExprProto>(NULL);
  }

  AnyResolvedExprProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnyResolvedExprProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyResolvedExprProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedLiteralProto resolved_literal_node = 3;
  bool has_resolved_literal_node() const;
  void clear_resolved_literal_node();
  static const int kResolvedLiteralNodeFieldNumber = 3;
  private:
  const ::zetasql::ResolvedLiteralProto& _internal_resolved_literal_node() const;
  public:
  const ::zetasql::ResolvedLiteralProto& resolved_literal_node() const;
  ::zetasql::ResolvedLiteralProto* release_resolved_literal_node();
  ::zetasql::ResolvedLiteralProto* mutable_resolved_literal_node();
  void set_allocated_resolved_literal_node(::zetasql::ResolvedLiteralProto* resolved_literal_node);

  // optional .zetasql.ResolvedParameterProto resolved_parameter_node = 4;
  bool has_resolved_parameter_node() const;
  void clear_resolved_parameter_node();
  static const int kResolvedParameterNodeFieldNumber = 4;
  private:
  const ::zetasql::ResolvedParameterProto& _internal_resolved_parameter_node() const;
  public:
  const ::zetasql::ResolvedParameterProto& resolved_parameter_node() const;
  ::zetasql::ResolvedParameterProto* release_resolved_parameter_node();
  ::zetasql::ResolvedParameterProto* mutable_resolved_parameter_node();
  void set_allocated_resolved_parameter_node(::zetasql::ResolvedParameterProto* resolved_parameter_node);

  // optional .zetasql.ResolvedExpressionColumnProto resolved_expression_column_node = 5;
  bool has_resolved_expression_column_node() const;
  void clear_resolved_expression_column_node();
  static const int kResolvedExpressionColumnNodeFieldNumber = 5;
  private:
  const ::zetasql::ResolvedExpressionColumnProto& _internal_resolved_expression_column_node() const;
  public:
  const ::zetasql::ResolvedExpressionColumnProto& resolved_expression_column_node() const;
  ::zetasql::ResolvedExpressionColumnProto* release_resolved_expression_column_node();
  ::zetasql::ResolvedExpressionColumnProto* mutable_resolved_expression_column_node();
  void set_allocated_resolved_expression_column_node(::zetasql::ResolvedExpressionColumnProto* resolved_expression_column_node);

  // optional .zetasql.ResolvedColumnRefProto resolved_column_ref_node = 6;
  bool has_resolved_column_ref_node() const;
  void clear_resolved_column_ref_node();
  static const int kResolvedColumnRefNodeFieldNumber = 6;
  private:
  const ::zetasql::ResolvedColumnRefProto& _internal_resolved_column_ref_node() const;
  public:
  const ::zetasql::ResolvedColumnRefProto& resolved_column_ref_node() const;
  ::zetasql::ResolvedColumnRefProto* release_resolved_column_ref_node();
  ::zetasql::ResolvedColumnRefProto* mutable_resolved_column_ref_node();
  void set_allocated_resolved_column_ref_node(::zetasql::ResolvedColumnRefProto* resolved_column_ref_node);

  // optional .zetasql.AnyResolvedFunctionCallBaseProto resolved_function_call_base_node = 7;
  bool has_resolved_function_call_base_node() const;
  void clear_resolved_function_call_base_node();
  static const int kResolvedFunctionCallBaseNodeFieldNumber = 7;
  private:
  const ::zetasql::AnyResolvedFunctionCallBaseProto& _internal_resolved_function_call_base_node() const;
  public:
  const ::zetasql::AnyResolvedFunctionCallBaseProto& resolved_function_call_base_node() const;
  ::zetasql::AnyResolvedFunctionCallBaseProto* release_resolved_function_call_base_node();
  ::zetasql::AnyResolvedFunctionCallBaseProto* mutable_resolved_function_call_base_node();
  void set_allocated_resolved_function_call_base_node(::zetasql::AnyResolvedFunctionCallBaseProto* resolved_function_call_base_node);

  // optional .zetasql.ResolvedCastProto resolved_cast_node = 11;
  bool has_resolved_cast_node() const;
  void clear_resolved_cast_node();
  static const int kResolvedCastNodeFieldNumber = 11;
  private:
  const ::zetasql::ResolvedCastProto& _internal_resolved_cast_node() const;
  public:
  const ::zetasql::ResolvedCastProto& resolved_cast_node() const;
  ::zetasql::ResolvedCastProto* release_resolved_cast_node();
  ::zetasql::ResolvedCastProto* mutable_resolved_cast_node();
  void set_allocated_resolved_cast_node(::zetasql::ResolvedCastProto* resolved_cast_node);

  // optional .zetasql.ResolvedMakeStructProto resolved_make_struct_node = 12;
  bool has_resolved_make_struct_node() const;
  void clear_resolved_make_struct_node();
  static const int kResolvedMakeStructNodeFieldNumber = 12;
  private:
  const ::zetasql::ResolvedMakeStructProto& _internal_resolved_make_struct_node() const;
  public:
  const ::zetasql::ResolvedMakeStructProto& resolved_make_struct_node() const;
  ::zetasql::ResolvedMakeStructProto* release_resolved_make_struct_node();
  ::zetasql::ResolvedMakeStructProto* mutable_resolved_make_struct_node();
  void set_allocated_resolved_make_struct_node(::zetasql::ResolvedMakeStructProto* resolved_make_struct_node);

  // optional .zetasql.ResolvedMakeProtoProto resolved_make_proto_node = 13;
  bool has_resolved_make_proto_node() const;
  void clear_resolved_make_proto_node();
  static const int kResolvedMakeProtoNodeFieldNumber = 13;
  private:
  const ::zetasql::ResolvedMakeProtoProto& _internal_resolved_make_proto_node() const;
  public:
  const ::zetasql::ResolvedMakeProtoProto& resolved_make_proto_node() const;
  ::zetasql::ResolvedMakeProtoProto* release_resolved_make_proto_node();
  ::zetasql::ResolvedMakeProtoProto* mutable_resolved_make_proto_node();
  void set_allocated_resolved_make_proto_node(::zetasql::ResolvedMakeProtoProto* resolved_make_proto_node);

  // optional .zetasql.ResolvedGetStructFieldProto resolved_get_struct_field_node = 15;
  bool has_resolved_get_struct_field_node() const;
  void clear_resolved_get_struct_field_node();
  static const int kResolvedGetStructFieldNodeFieldNumber = 15;
  private:
  const ::zetasql::ResolvedGetStructFieldProto& _internal_resolved_get_struct_field_node() const;
  public:
  const ::zetasql::ResolvedGetStructFieldProto& resolved_get_struct_field_node() const;
  ::zetasql::ResolvedGetStructFieldProto* release_resolved_get_struct_field_node();
  ::zetasql::ResolvedGetStructFieldProto* mutable_resolved_get_struct_field_node();
  void set_allocated_resolved_get_struct_field_node(::zetasql::ResolvedGetStructFieldProto* resolved_get_struct_field_node);

  // optional .zetasql.ResolvedGetProtoFieldProto resolved_get_proto_field_node = 16;
  bool has_resolved_get_proto_field_node() const;
  void clear_resolved_get_proto_field_node();
  static const int kResolvedGetProtoFieldNodeFieldNumber = 16;
  private:
  const ::zetasql::ResolvedGetProtoFieldProto& _internal_resolved_get_proto_field_node() const;
  public:
  const ::zetasql::ResolvedGetProtoFieldProto& resolved_get_proto_field_node() const;
  ::zetasql::ResolvedGetProtoFieldProto* release_resolved_get_proto_field_node();
  ::zetasql::ResolvedGetProtoFieldProto* mutable_resolved_get_proto_field_node();
  void set_allocated_resolved_get_proto_field_node(::zetasql::ResolvedGetProtoFieldProto* resolved_get_proto_field_node);

  // optional .zetasql.ResolvedSubqueryExprProto resolved_subquery_expr_node = 17;
  bool has_resolved_subquery_expr_node() const;
  void clear_resolved_subquery_expr_node();
  static const int kResolvedSubqueryExprNodeFieldNumber = 17;
  private:
  const ::zetasql::ResolvedSubqueryExprProto& _internal_resolved_subquery_expr_node() const;
  public:
  const ::zetasql::ResolvedSubqueryExprProto& resolved_subquery_expr_node() const;
  ::zetasql::ResolvedSubqueryExprProto* release_resolved_subquery_expr_node();
  ::zetasql::ResolvedSubqueryExprProto* mutable_resolved_subquery_expr_node();
  void set_allocated_resolved_subquery_expr_node(::zetasql::ResolvedSubqueryExprProto* resolved_subquery_expr_node);

  // optional .zetasql.ResolvedDMLDefaultProto resolved_dmldefault_node = 60;
  bool has_resolved_dmldefault_node() const;
  void clear_resolved_dmldefault_node();
  static const int kResolvedDmldefaultNodeFieldNumber = 60;
  private:
  const ::zetasql::ResolvedDMLDefaultProto& _internal_resolved_dmldefault_node() const;
  public:
  const ::zetasql::ResolvedDMLDefaultProto& resolved_dmldefault_node() const;
  ::zetasql::ResolvedDMLDefaultProto* release_resolved_dmldefault_node();
  ::zetasql::ResolvedDMLDefaultProto* mutable_resolved_dmldefault_node();
  void set_allocated_resolved_dmldefault_node(::zetasql::ResolvedDMLDefaultProto* resolved_dmldefault_node);

  // optional .zetasql.ResolvedArgumentRefProto resolved_argument_ref_node = 78;
  bool has_resolved_argument_ref_node() const;
  void clear_resolved_argument_ref_node();
  static const int kResolvedArgumentRefNodeFieldNumber = 78;
  private:
  const ::zetasql::ResolvedArgumentRefProto& _internal_resolved_argument_ref_node() const;
  public:
  const ::zetasql::ResolvedArgumentRefProto& resolved_argument_ref_node() const;
  ::zetasql::ResolvedArgumentRefProto* release_resolved_argument_ref_node();
  ::zetasql::ResolvedArgumentRefProto* mutable_resolved_argument_ref_node();
  void set_allocated_resolved_argument_ref_node(::zetasql::ResolvedArgumentRefProto* resolved_argument_ref_node);

  // optional .zetasql.ResolvedConstantProto resolved_constant_node = 103;
  bool has_resolved_constant_node() const;
  void clear_resolved_constant_node();
  static const int kResolvedConstantNodeFieldNumber = 103;
  private:
  const ::zetasql::ResolvedConstantProto& _internal_resolved_constant_node() const;
  public:
  const ::zetasql::ResolvedConstantProto& resolved_constant_node() const;
  ::zetasql::ResolvedConstantProto* release_resolved_constant_node();
  ::zetasql::ResolvedConstantProto* mutable_resolved_constant_node();
  void set_allocated_resolved_constant_node(::zetasql::ResolvedConstantProto* resolved_constant_node);

  // optional .zetasql.ResolvedReplaceFieldProto resolved_replace_field_node = 129;
  bool has_resolved_replace_field_node() const;
  void clear_resolved_replace_field_node();
  static const int kResolvedReplaceFieldNodeFieldNumber = 129;
  private:
  const ::zetasql::ResolvedReplaceFieldProto& _internal_resolved_replace_field_node() const;
  public:
  const ::zetasql::ResolvedReplaceFieldProto& resolved_replace_field_node() const;
  ::zetasql::ResolvedReplaceFieldProto* release_resolved_replace_field_node();
  ::zetasql::ResolvedReplaceFieldProto* mutable_resolved_replace_field_node();
  void set_allocated_resolved_replace_field_node(::zetasql::ResolvedReplaceFieldProto* resolved_replace_field_node);

  // optional .zetasql.ResolvedSystemVariableProto resolved_system_variable_node = 139;
  bool has_resolved_system_variable_node() const;
  void clear_resolved_system_variable_node();
  static const int kResolvedSystemVariableNodeFieldNumber = 139;
  private:
  const ::zetasql::ResolvedSystemVariableProto& _internal_resolved_system_variable_node() const;
  public:
  const ::zetasql::ResolvedSystemVariableProto& resolved_system_variable_node() const;
  ::zetasql::ResolvedSystemVariableProto* release_resolved_system_variable_node();
  ::zetasql::ResolvedSystemVariableProto* mutable_resolved_system_variable_node();
  void set_allocated_resolved_system_variable_node(::zetasql::ResolvedSystemVariableProto* resolved_system_variable_node);

  // optional .zetasql.ResolvedFlattenProto resolved_flatten_node = 149;
  bool has_resolved_flatten_node() const;
  void clear_resolved_flatten_node();
  static const int kResolvedFlattenNodeFieldNumber = 149;
  private:
  const ::zetasql::ResolvedFlattenProto& _internal_resolved_flatten_node() const;
  public:
  const ::zetasql::ResolvedFlattenProto& resolved_flatten_node() const;
  ::zetasql::ResolvedFlattenProto* release_resolved_flatten_node();
  ::zetasql::ResolvedFlattenProto* mutable_resolved_flatten_node();
  void set_allocated_resolved_flatten_node(::zetasql::ResolvedFlattenProto* resolved_flatten_node);

  // optional .zetasql.ResolvedFlattenedArgProto resolved_flattened_arg_node = 150;
  bool has_resolved_flattened_arg_node() const;
  void clear_resolved_flattened_arg_node();
  static const int kResolvedFlattenedArgNodeFieldNumber = 150;
  private:
  const ::zetasql::ResolvedFlattenedArgProto& _internal_resolved_flattened_arg_node() const;
  public:
  const ::zetasql::ResolvedFlattenedArgProto& resolved_flattened_arg_node() const;
  ::zetasql::ResolvedFlattenedArgProto* release_resolved_flattened_arg_node();
  ::zetasql::ResolvedFlattenedArgProto* mutable_resolved_flattened_arg_node();
  void set_allocated_resolved_flattened_arg_node(::zetasql::ResolvedFlattenedArgProto* resolved_flattened_arg_node);

  // optional .zetasql.ResolvedGetJsonFieldProto resolved_get_json_field_node = 165;
  bool has_resolved_get_json_field_node() const;
  void clear_resolved_get_json_field_node();
  static const int kResolvedGetJsonFieldNodeFieldNumber = 165;
  private:
  const ::zetasql::ResolvedGetJsonFieldProto& _internal_resolved_get_json_field_node() const;
  public:
  const ::zetasql::ResolvedGetJsonFieldProto& resolved_get_json_field_node() const;
  ::zetasql::ResolvedGetJsonFieldProto* release_resolved_get_json_field_node();
  ::zetasql::ResolvedGetJsonFieldProto* mutable_resolved_get_json_field_node();
  void set_allocated_resolved_get_json_field_node(::zetasql::ResolvedGetJsonFieldProto* resolved_get_json_field_node);

  // optional .zetasql.ResolvedFilterFieldProto resolved_filter_field_node = 174;
  bool has_resolved_filter_field_node() const;
  void clear_resolved_filter_field_node();
  static const int kResolvedFilterFieldNodeFieldNumber = 174;
  private:
  const ::zetasql::ResolvedFilterFieldProto& _internal_resolved_filter_field_node() const;
  public:
  const ::zetasql::ResolvedFilterFieldProto& resolved_filter_field_node() const;
  ::zetasql::ResolvedFilterFieldProto* release_resolved_filter_field_node();
  ::zetasql::ResolvedFilterFieldProto* mutable_resolved_filter_field_node();
  void set_allocated_resolved_filter_field_node(::zetasql::ResolvedFilterFieldProto* resolved_filter_field_node);

  // optional .zetasql.ResolvedLetExprProto resolved_let_expr_node = 197;
  bool has_resolved_let_expr_node() const;
  void clear_resolved_let_expr_node();
  static const int kResolvedLetExprNodeFieldNumber = 197;
  private:
  const ::zetasql::ResolvedLetExprProto& _internal_resolved_let_expr_node() const;
  public:
  const ::zetasql::ResolvedLetExprProto& resolved_let_expr_node() const;
  ::zetasql::ResolvedLetExprProto* release_resolved_let_expr_node();
  ::zetasql::ResolvedLetExprProto* mutable_resolved_let_expr_node();
  void set_allocated_resolved_let_expr_node(::zetasql::ResolvedLetExprProto* resolved_let_expr_node);

  void clear_node();
  NodeCase node_case() const;
  // @@protoc_insertion_point(class_scope:zetasql.AnyResolvedExprProto)
 private:
  void set_has_resolved_literal_node();
  void set_has_resolved_parameter_node();
  void set_has_resolved_expression_column_node();
  void set_has_resolved_column_ref_node();
  void set_has_resolved_function_call_base_node();
  void set_has_resolved_cast_node();
  void set_has_resolved_make_struct_node();
  void set_has_resolved_make_proto_node();
  void set_has_resolved_get_struct_field_node();
  void set_has_resolved_get_proto_field_node();
  void set_has_resolved_subquery_expr_node();
  void set_has_resolved_dmldefault_node();
  void set_has_resolved_argument_ref_node();
  void set_has_resolved_constant_node();
  void set_has_resolved_replace_field_node();
  void set_has_resolved_system_variable_node();
  void set_has_resolved_flatten_node();
  void set_has_resolved_flattened_arg_node();
  void set_has_resolved_get_json_field_node();
  void set_has_resolved_filter_field_node();
  void set_has_resolved_let_expr_node();

  inline bool has_node() const;
  inline void clear_has_node();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union NodeUnion {
    NodeUnion() {}
    ::zetasql::ResolvedLiteralProto* resolved_literal_node_;
    ::zetasql::ResolvedParameterProto* resolved_parameter_node_;
    ::zetasql::ResolvedExpressionColumnProto* resolved_expression_column_node_;
    ::zetasql::ResolvedColumnRefProto* resolved_column_ref_node_;
    ::zetasql::AnyResolvedFunctionCallBaseProto* resolved_function_call_base_node_;
    ::zetasql::ResolvedCastProto* resolved_cast_node_;
    ::zetasql::ResolvedMakeStructProto* resolved_make_struct_node_;
    ::zetasql::ResolvedMakeProtoProto* resolved_make_proto_node_;
    ::zetasql::ResolvedGetStructFieldProto* resolved_get_struct_field_node_;
    ::zetasql::ResolvedGetProtoFieldProto* resolved_get_proto_field_node_;
    ::zetasql::ResolvedSubqueryExprProto* resolved_subquery_expr_node_;
    ::zetasql::ResolvedDMLDefaultProto* resolved_dmldefault_node_;
    ::zetasql::ResolvedArgumentRefProto* resolved_argument_ref_node_;
    ::zetasql::ResolvedConstantProto* resolved_constant_node_;
    ::zetasql::ResolvedReplaceFieldProto* resolved_replace_field_node_;
    ::zetasql::ResolvedSystemVariableProto* resolved_system_variable_node_;
    ::zetasql::ResolvedFlattenProto* resolved_flatten_node_;
    ::zetasql::ResolvedFlattenedArgProto* resolved_flattened_arg_node_;
    ::zetasql::ResolvedGetJsonFieldProto* resolved_get_json_field_node_;
    ::zetasql::ResolvedFilterFieldProto* resolved_filter_field_node_;
    ::zetasql::ResolvedLetExprProto* resolved_let_expr_node_;
  } node_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedExprProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedExprProto) */ {
 public:
  ResolvedExprProto();
  virtual ~ResolvedExprProto();

  ResolvedExprProto(const ResolvedExprProto& from);

  inline ResolvedExprProto& operator=(const ResolvedExprProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedExprProto(ResolvedExprProto&& from) noexcept
    : ResolvedExprProto() {
    *this = ::std::move(from);
  }

  inline ResolvedExprProto& operator=(ResolvedExprProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedExprProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedExprProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedExprProto*>(
               &_ResolvedExprProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ResolvedExprProto* other);
  friend void swap(ResolvedExprProto& a, ResolvedExprProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedExprProto* New() const final {
    return CreateMaybeMessage<ResolvedExprProto>(NULL);
  }

  ResolvedExprProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedExprProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedExprProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedNodeProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedNodeProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedNodeProto& parent() const;
  ::zetasql::ResolvedNodeProto* release_parent();
  ::zetasql::ResolvedNodeProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedNodeProto* parent);

  // optional .zetasql.TypeProto type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  private:
  const ::zetasql::TypeProto& _internal_type() const;
  public:
  const ::zetasql::TypeProto& type() const;
  ::zetasql::TypeProto* release_type();
  ::zetasql::TypeProto* mutable_type();
  void set_allocated_type(::zetasql::TypeProto* type);

  // optional .zetasql.AnnotationMapProto type_annotation_map = 3;
  bool has_type_annotation_map() const;
  void clear_type_annotation_map();
  static const int kTypeAnnotationMapFieldNumber = 3;
  private:
  const ::zetasql::AnnotationMapProto& _internal_type_annotation_map() const;
  public:
  const ::zetasql::AnnotationMapProto& type_annotation_map() const;
  ::zetasql::AnnotationMapProto* release_type_annotation_map();
  ::zetasql::AnnotationMapProto* mutable_type_annotation_map();
  void set_allocated_type_annotation_map(::zetasql::AnnotationMapProto* type_annotation_map);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedExprProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_type();
  void clear_has_type();
  void set_has_type_annotation_map();
  void clear_has_type_annotation_map();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedNodeProto* parent_;
  ::zetasql::TypeProto* type_;
  ::zetasql::AnnotationMapProto* type_annotation_map_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedLiteralProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedLiteralProto) */ {
 public:
  ResolvedLiteralProto();
  virtual ~ResolvedLiteralProto();

  ResolvedLiteralProto(const ResolvedLiteralProto& from);

  inline ResolvedLiteralProto& operator=(const ResolvedLiteralProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedLiteralProto(ResolvedLiteralProto&& from) noexcept
    : ResolvedLiteralProto() {
    *this = ::std::move(from);
  }

  inline ResolvedLiteralProto& operator=(ResolvedLiteralProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedLiteralProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedLiteralProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedLiteralProto*>(
               &_ResolvedLiteralProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ResolvedLiteralProto* other);
  friend void swap(ResolvedLiteralProto& a, ResolvedLiteralProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedLiteralProto* New() const final {
    return CreateMaybeMessage<ResolvedLiteralProto>(NULL);
  }

  ResolvedLiteralProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedLiteralProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedLiteralProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedExprProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedExprProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedExprProto& parent() const;
  ::zetasql::ResolvedExprProto* release_parent();
  ::zetasql::ResolvedExprProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedExprProto* parent);

  // optional .zetasql.ValueWithTypeProto value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  private:
  const ::zetasql::ValueWithTypeProto& _internal_value() const;
  public:
  const ::zetasql::ValueWithTypeProto& value() const;
  ::zetasql::ValueWithTypeProto* release_value();
  ::zetasql::ValueWithTypeProto* mutable_value();
  void set_allocated_value(::zetasql::ValueWithTypeProto* value);

  // optional int64 float_literal_id = 4;
  bool has_float_literal_id() const;
  void clear_float_literal_id();
  static const int kFloatLiteralIdFieldNumber = 4;
  ::google::protobuf::int64 float_literal_id() const;
  void set_float_literal_id(::google::protobuf::int64 value);

  // optional bool has_explicit_type = 3;
  bool has_has_explicit_type() const;
  void clear_has_explicit_type();
  static const int kHasExplicitTypeFieldNumber = 3;
  bool has_explicit_type() const;
  void set_has_explicit_type(bool value);

  // optional bool preserve_in_literal_remover = 5;
  bool has_preserve_in_literal_remover() const;
  void clear_preserve_in_literal_remover();
  static const int kPreserveInLiteralRemoverFieldNumber = 5;
  bool preserve_in_literal_remover() const;
  void set_preserve_in_literal_remover(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedLiteralProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_value();
  void clear_has_value();
  void set_has_has_explicit_type();
  void clear_has_has_explicit_type();
  void set_has_float_literal_id();
  void clear_has_float_literal_id();
  void set_has_preserve_in_literal_remover();
  void clear_has_preserve_in_literal_remover();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedExprProto* parent_;
  ::zetasql::ValueWithTypeProto* value_;
  ::google::protobuf::int64 float_literal_id_;
  bool has_explicit_type_;
  bool preserve_in_literal_remover_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedParameterProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedParameterProto) */ {
 public:
  ResolvedParameterProto();
  virtual ~ResolvedParameterProto();

  ResolvedParameterProto(const ResolvedParameterProto& from);

  inline ResolvedParameterProto& operator=(const ResolvedParameterProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedParameterProto(ResolvedParameterProto&& from) noexcept
    : ResolvedParameterProto() {
    *this = ::std::move(from);
  }

  inline ResolvedParameterProto& operator=(ResolvedParameterProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedParameterProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedParameterProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedParameterProto*>(
               &_ResolvedParameterProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ResolvedParameterProto* other);
  friend void swap(ResolvedParameterProto& a, ResolvedParameterProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedParameterProto* New() const final {
    return CreateMaybeMessage<ResolvedParameterProto>(NULL);
  }

  ResolvedParameterProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedParameterProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedParameterProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .zetasql.ResolvedExprProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedExprProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedExprProto& parent() const;
  ::zetasql::ResolvedExprProto* release_parent();
  ::zetasql::ResolvedExprProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedExprProto* parent);

  // optional int64 position = 5;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 5;
  ::google::protobuf::int64 position() const;
  void set_position(::google::protobuf::int64 value);

  // optional bool is_untyped = 3;
  bool has_is_untyped() const;
  void clear_is_untyped();
  static const int kIsUntypedFieldNumber = 3;
  bool is_untyped() const;
  void set_is_untyped(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedParameterProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_name();
  void clear_has_name();
  void set_has_position();
  void clear_has_position();
  void set_has_is_untyped();
  void clear_has_is_untyped();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::zetasql::ResolvedExprProto* parent_;
  ::google::protobuf::int64 position_;
  bool is_untyped_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedExpressionColumnProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedExpressionColumnProto) */ {
 public:
  ResolvedExpressionColumnProto();
  virtual ~ResolvedExpressionColumnProto();

  ResolvedExpressionColumnProto(const ResolvedExpressionColumnProto& from);

  inline ResolvedExpressionColumnProto& operator=(const ResolvedExpressionColumnProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedExpressionColumnProto(ResolvedExpressionColumnProto&& from) noexcept
    : ResolvedExpressionColumnProto() {
    *this = ::std::move(from);
  }

  inline ResolvedExpressionColumnProto& operator=(ResolvedExpressionColumnProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedExpressionColumnProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedExpressionColumnProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedExpressionColumnProto*>(
               &_ResolvedExpressionColumnProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ResolvedExpressionColumnProto* other);
  friend void swap(ResolvedExpressionColumnProto& a, ResolvedExpressionColumnProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedExpressionColumnProto* New() const final {
    return CreateMaybeMessage<ResolvedExpressionColumnProto>(NULL);
  }

  ResolvedExpressionColumnProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedExpressionColumnProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedExpressionColumnProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .zetasql.ResolvedExprProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedExprProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedExprProto& parent() const;
  ::zetasql::ResolvedExprProto* release_parent();
  ::zetasql::ResolvedExprProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedExprProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedExpressionColumnProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::zetasql::ResolvedExprProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedColumnRefProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedColumnRefProto) */ {
 public:
  ResolvedColumnRefProto();
  virtual ~ResolvedColumnRefProto();

  ResolvedColumnRefProto(const ResolvedColumnRefProto& from);

  inline ResolvedColumnRefProto& operator=(const ResolvedColumnRefProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedColumnRefProto(ResolvedColumnRefProto&& from) noexcept
    : ResolvedColumnRefProto() {
    *this = ::std::move(from);
  }

  inline ResolvedColumnRefProto& operator=(ResolvedColumnRefProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedColumnRefProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedColumnRefProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedColumnRefProto*>(
               &_ResolvedColumnRefProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ResolvedColumnRefProto* other);
  friend void swap(ResolvedColumnRefProto& a, ResolvedColumnRefProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedColumnRefProto* New() const final {
    return CreateMaybeMessage<ResolvedColumnRefProto>(NULL);
  }

  ResolvedColumnRefProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedColumnRefProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedColumnRefProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedExprProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedExprProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedExprProto& parent() const;
  ::zetasql::ResolvedExprProto* release_parent();
  ::zetasql::ResolvedExprProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedExprProto* parent);

  // optional .zetasql.ResolvedColumnProto column = 2;
  bool has_column() const;
  void clear_column();
  static const int kColumnFieldNumber = 2;
  private:
  const ::zetasql::ResolvedColumnProto& _internal_column() const;
  public:
  const ::zetasql::ResolvedColumnProto& column() const;
  ::zetasql::ResolvedColumnProto* release_column();
  ::zetasql::ResolvedColumnProto* mutable_column();
  void set_allocated_column(::zetasql::ResolvedColumnProto* column);

  // optional bool is_correlated = 3;
  bool has_is_correlated() const;
  void clear_is_correlated();
  static const int kIsCorrelatedFieldNumber = 3;
  bool is_correlated() const;
  void set_is_correlated(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedColumnRefProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_column();
  void clear_has_column();
  void set_has_is_correlated();
  void clear_has_is_correlated();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedExprProto* parent_;
  ::zetasql::ResolvedColumnProto* column_;
  bool is_correlated_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedConstantProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedConstantProto) */ {
 public:
  ResolvedConstantProto();
  virtual ~ResolvedConstantProto();

  ResolvedConstantProto(const ResolvedConstantProto& from);

  inline ResolvedConstantProto& operator=(const ResolvedConstantProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedConstantProto(ResolvedConstantProto&& from) noexcept
    : ResolvedConstantProto() {
    *this = ::std::move(from);
  }

  inline ResolvedConstantProto& operator=(ResolvedConstantProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedConstantProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedConstantProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedConstantProto*>(
               &_ResolvedConstantProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ResolvedConstantProto* other);
  friend void swap(ResolvedConstantProto& a, ResolvedConstantProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedConstantProto* New() const final {
    return CreateMaybeMessage<ResolvedConstantProto>(NULL);
  }

  ResolvedConstantProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedConstantProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedConstantProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedExprProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedExprProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedExprProto& parent() const;
  ::zetasql::ResolvedExprProto* release_parent();
  ::zetasql::ResolvedExprProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedExprProto* parent);

  // optional .zetasql.ConstantRefProto constant = 2;
  bool has_constant() const;
  void clear_constant();
  static const int kConstantFieldNumber = 2;
  private:
  const ::zetasql::ConstantRefProto& _internal_constant() const;
  public:
  const ::zetasql::ConstantRefProto& constant() const;
  ::zetasql::ConstantRefProto* release_constant();
  ::zetasql::ConstantRefProto* mutable_constant();
  void set_allocated_constant(::zetasql::ConstantRefProto* constant);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedConstantProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_constant();
  void clear_has_constant();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedExprProto* parent_;
  ::zetasql::ConstantRefProto* constant_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedSystemVariableProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedSystemVariableProto) */ {
 public:
  ResolvedSystemVariableProto();
  virtual ~ResolvedSystemVariableProto();

  ResolvedSystemVariableProto(const ResolvedSystemVariableProto& from);

  inline ResolvedSystemVariableProto& operator=(const ResolvedSystemVariableProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedSystemVariableProto(ResolvedSystemVariableProto&& from) noexcept
    : ResolvedSystemVariableProto() {
    *this = ::std::move(from);
  }

  inline ResolvedSystemVariableProto& operator=(ResolvedSystemVariableProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedSystemVariableProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedSystemVariableProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedSystemVariableProto*>(
               &_ResolvedSystemVariableProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ResolvedSystemVariableProto* other);
  friend void swap(ResolvedSystemVariableProto& a, ResolvedSystemVariableProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedSystemVariableProto* New() const final {
    return CreateMaybeMessage<ResolvedSystemVariableProto>(NULL);
  }

  ResolvedSystemVariableProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedSystemVariableProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedSystemVariableProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name_path = 2;
  int name_path_size() const;
  void clear_name_path();
  static const int kNamePathFieldNumber = 2;
  const ::std::string& name_path(int index) const;
  ::std::string* mutable_name_path(int index);
  void set_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name_path(int index, ::std::string&& value);
  #endif
  void set_name_path(int index, const char* value);
  void set_name_path(int index, const char* value, size_t size);
  ::std::string* add_name_path();
  void add_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_name_path(::std::string&& value);
  #endif
  void add_name_path(const char* value);
  void add_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_path();

  // optional .zetasql.ResolvedExprProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedExprProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedExprProto& parent() const;
  ::zetasql::ResolvedExprProto* release_parent();
  ::zetasql::ResolvedExprProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedExprProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedSystemVariableProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_path_;
  ::zetasql::ResolvedExprProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedInlineLambdaProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedInlineLambdaProto) */ {
 public:
  ResolvedInlineLambdaProto();
  virtual ~ResolvedInlineLambdaProto();

  ResolvedInlineLambdaProto(const ResolvedInlineLambdaProto& from);

  inline ResolvedInlineLambdaProto& operator=(const ResolvedInlineLambdaProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedInlineLambdaProto(ResolvedInlineLambdaProto&& from) noexcept
    : ResolvedInlineLambdaProto() {
    *this = ::std::move(from);
  }

  inline ResolvedInlineLambdaProto& operator=(ResolvedInlineLambdaProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedInlineLambdaProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedInlineLambdaProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedInlineLambdaProto*>(
               &_ResolvedInlineLambdaProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ResolvedInlineLambdaProto* other);
  friend void swap(ResolvedInlineLambdaProto& a, ResolvedInlineLambdaProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedInlineLambdaProto* New() const final {
    return CreateMaybeMessage<ResolvedInlineLambdaProto>(NULL);
  }

  ResolvedInlineLambdaProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedInlineLambdaProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedInlineLambdaProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedColumnProto argument_list = 2;
  int argument_list_size() const;
  void clear_argument_list();
  static const int kArgumentListFieldNumber = 2;
  ::zetasql::ResolvedColumnProto* mutable_argument_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >*
      mutable_argument_list();
  const ::zetasql::ResolvedColumnProto& argument_list(int index) const;
  ::zetasql::ResolvedColumnProto* add_argument_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >&
      argument_list() const;

  // repeated .zetasql.ResolvedColumnRefProto parameter_list = 3;
  int parameter_list_size() const;
  void clear_parameter_list();
  static const int kParameterListFieldNumber = 3;
  ::zetasql::ResolvedColumnRefProto* mutable_parameter_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >*
      mutable_parameter_list();
  const ::zetasql::ResolvedColumnRefProto& parameter_list(int index) const;
  ::zetasql::ResolvedColumnRefProto* add_parameter_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >&
      parameter_list() const;

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.AnyResolvedExprProto body = 4;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 4;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_body() const;
  public:
  const ::zetasql::AnyResolvedExprProto& body() const;
  ::zetasql::AnyResolvedExprProto* release_body();
  ::zetasql::AnyResolvedExprProto* mutable_body();
  void set_allocated_body(::zetasql::AnyResolvedExprProto* body);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedInlineLambdaProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_body();
  void clear_has_body();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto > argument_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto > parameter_list_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::AnyResolvedExprProto* body_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedFilterFieldArgProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedFilterFieldArgProto) */ {
 public:
  ResolvedFilterFieldArgProto();
  virtual ~ResolvedFilterFieldArgProto();

  ResolvedFilterFieldArgProto(const ResolvedFilterFieldArgProto& from);

  inline ResolvedFilterFieldArgProto& operator=(const ResolvedFilterFieldArgProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedFilterFieldArgProto(ResolvedFilterFieldArgProto&& from) noexcept
    : ResolvedFilterFieldArgProto() {
    *this = ::std::move(from);
  }

  inline ResolvedFilterFieldArgProto& operator=(ResolvedFilterFieldArgProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedFilterFieldArgProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedFilterFieldArgProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedFilterFieldArgProto*>(
               &_ResolvedFilterFieldArgProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(ResolvedFilterFieldArgProto* other);
  friend void swap(ResolvedFilterFieldArgProto& a, ResolvedFilterFieldArgProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedFilterFieldArgProto* New() const final {
    return CreateMaybeMessage<ResolvedFilterFieldArgProto>(NULL);
  }

  ResolvedFilterFieldArgProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedFilterFieldArgProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedFilterFieldArgProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.FieldDescriptorRefProto field_descriptor_path = 3;
  int field_descriptor_path_size() const;
  void clear_field_descriptor_path();
  static const int kFieldDescriptorPathFieldNumber = 3;
  ::zetasql::FieldDescriptorRefProto* mutable_field_descriptor_path(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::FieldDescriptorRefProto >*
      mutable_field_descriptor_path();
  const ::zetasql::FieldDescriptorRefProto& field_descriptor_path(int index) const;
  ::zetasql::FieldDescriptorRefProto* add_field_descriptor_path();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::FieldDescriptorRefProto >&
      field_descriptor_path() const;

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional bool include = 2;
  bool has_include() const;
  void clear_include();
  static const int kIncludeFieldNumber = 2;
  bool include() const;
  void set_include(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedFilterFieldArgProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_include();
  void clear_has_include();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::FieldDescriptorRefProto > field_descriptor_path_;
  ::zetasql::ResolvedArgumentProto* parent_;
  bool include_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedFilterFieldProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedFilterFieldProto) */ {
 public:
  ResolvedFilterFieldProto();
  virtual ~ResolvedFilterFieldProto();

  ResolvedFilterFieldProto(const ResolvedFilterFieldProto& from);

  inline ResolvedFilterFieldProto& operator=(const ResolvedFilterFieldProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedFilterFieldProto(ResolvedFilterFieldProto&& from) noexcept
    : ResolvedFilterFieldProto() {
    *this = ::std::move(from);
  }

  inline ResolvedFilterFieldProto& operator=(ResolvedFilterFieldProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedFilterFieldProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedFilterFieldProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedFilterFieldProto*>(
               &_ResolvedFilterFieldProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(ResolvedFilterFieldProto* other);
  friend void swap(ResolvedFilterFieldProto& a, ResolvedFilterFieldProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedFilterFieldProto* New() const final {
    return CreateMaybeMessage<ResolvedFilterFieldProto>(NULL);
  }

  ResolvedFilterFieldProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedFilterFieldProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedFilterFieldProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedFilterFieldArgProto filter_field_arg_list = 3;
  int filter_field_arg_list_size() const;
  void clear_filter_field_arg_list();
  static const int kFilterFieldArgListFieldNumber = 3;
  ::zetasql::ResolvedFilterFieldArgProto* mutable_filter_field_arg_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedFilterFieldArgProto >*
      mutable_filter_field_arg_list();
  const ::zetasql::ResolvedFilterFieldArgProto& filter_field_arg_list(int index) const;
  ::zetasql::ResolvedFilterFieldArgProto* add_filter_field_arg_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedFilterFieldArgProto >&
      filter_field_arg_list() const;

  // optional .zetasql.ResolvedExprProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedExprProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedExprProto& parent() const;
  ::zetasql::ResolvedExprProto* release_parent();
  ::zetasql::ResolvedExprProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedExprProto* parent);

  // optional .zetasql.AnyResolvedExprProto expr = 2;
  bool has_expr() const;
  void clear_expr();
  static const int kExprFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_expr() const;
  public:
  const ::zetasql::AnyResolvedExprProto& expr() const;
  ::zetasql::AnyResolvedExprProto* release_expr();
  ::zetasql::AnyResolvedExprProto* mutable_expr();
  void set_allocated_expr(::zetasql::AnyResolvedExprProto* expr);

  // optional bool reset_cleared_required_fields = 4;
  bool has_reset_cleared_required_fields() const;
  void clear_reset_cleared_required_fields();
  static const int kResetClearedRequiredFieldsFieldNumber = 4;
  bool reset_cleared_required_fields() const;
  void set_reset_cleared_required_fields(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedFilterFieldProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_expr();
  void clear_has_expr();
  void set_has_reset_cleared_required_fields();
  void clear_has_reset_cleared_required_fields();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedFilterFieldArgProto > filter_field_arg_list_;
  ::zetasql::ResolvedExprProto* parent_;
  ::zetasql::AnyResolvedExprProto* expr_;
  bool reset_cleared_required_fields_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnyResolvedFunctionCallBaseProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.AnyResolvedFunctionCallBaseProto) */ {
 public:
  AnyResolvedFunctionCallBaseProto();
  virtual ~AnyResolvedFunctionCallBaseProto();

  AnyResolvedFunctionCallBaseProto(const AnyResolvedFunctionCallBaseProto& from);

  inline AnyResolvedFunctionCallBaseProto& operator=(const AnyResolvedFunctionCallBaseProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnyResolvedFunctionCallBaseProto(AnyResolvedFunctionCallBaseProto&& from) noexcept
    : AnyResolvedFunctionCallBaseProto() {
    *this = ::std::move(from);
  }

  inline AnyResolvedFunctionCallBaseProto& operator=(AnyResolvedFunctionCallBaseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnyResolvedFunctionCallBaseProto& default_instance();

  enum NodeCase {
    kResolvedFunctionCallNode = 8,
    kResolvedNonScalarFunctionCallBaseNode = 86,
    NODE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnyResolvedFunctionCallBaseProto* internal_default_instance() {
    return reinterpret_cast<const AnyResolvedFunctionCallBaseProto*>(
               &_AnyResolvedFunctionCallBaseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(AnyResolvedFunctionCallBaseProto* other);
  friend void swap(AnyResolvedFunctionCallBaseProto& a, AnyResolvedFunctionCallBaseProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnyResolvedFunctionCallBaseProto* New() const final {
    return CreateMaybeMessage<AnyResolvedFunctionCallBaseProto>(NULL);
  }

  AnyResolvedFunctionCallBaseProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnyResolvedFunctionCallBaseProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyResolvedFunctionCallBaseProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedFunctionCallProto resolved_function_call_node = 8;
  bool has_resolved_function_call_node() const;
  void clear_resolved_function_call_node();
  static const int kResolvedFunctionCallNodeFieldNumber = 8;
  private:
  const ::zetasql::ResolvedFunctionCallProto& _internal_resolved_function_call_node() const;
  public:
  const ::zetasql::ResolvedFunctionCallProto& resolved_function_call_node() const;
  ::zetasql::ResolvedFunctionCallProto* release_resolved_function_call_node();
  ::zetasql::ResolvedFunctionCallProto* mutable_resolved_function_call_node();
  void set_allocated_resolved_function_call_node(::zetasql::ResolvedFunctionCallProto* resolved_function_call_node);

  // optional .zetasql.AnyResolvedNonScalarFunctionCallBaseProto resolved_non_scalar_function_call_base_node = 86;
  bool has_resolved_non_scalar_function_call_base_node() const;
  void clear_resolved_non_scalar_function_call_base_node();
  static const int kResolvedNonScalarFunctionCallBaseNodeFieldNumber = 86;
  private:
  const ::zetasql::AnyResolvedNonScalarFunctionCallBaseProto& _internal_resolved_non_scalar_function_call_base_node() const;
  public:
  const ::zetasql::AnyResolvedNonScalarFunctionCallBaseProto& resolved_non_scalar_function_call_base_node() const;
  ::zetasql::AnyResolvedNonScalarFunctionCallBaseProto* release_resolved_non_scalar_function_call_base_node();
  ::zetasql::AnyResolvedNonScalarFunctionCallBaseProto* mutable_resolved_non_scalar_function_call_base_node();
  void set_allocated_resolved_non_scalar_function_call_base_node(::zetasql::AnyResolvedNonScalarFunctionCallBaseProto* resolved_non_scalar_function_call_base_node);

  void clear_node();
  NodeCase node_case() const;
  // @@protoc_insertion_point(class_scope:zetasql.AnyResolvedFunctionCallBaseProto)
 private:
  void set_has_resolved_function_call_node();
  void set_has_resolved_non_scalar_function_call_base_node();

  inline bool has_node() const;
  inline void clear_has_node();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union NodeUnion {
    NodeUnion() {}
    ::zetasql::ResolvedFunctionCallProto* resolved_function_call_node_;
    ::zetasql::AnyResolvedNonScalarFunctionCallBaseProto* resolved_non_scalar_function_call_base_node_;
  } node_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedFunctionCallBaseProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedFunctionCallBaseProto) */ {
 public:
  ResolvedFunctionCallBaseProto();
  virtual ~ResolvedFunctionCallBaseProto();

  ResolvedFunctionCallBaseProto(const ResolvedFunctionCallBaseProto& from);

  inline ResolvedFunctionCallBaseProto& operator=(const ResolvedFunctionCallBaseProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedFunctionCallBaseProto(ResolvedFunctionCallBaseProto&& from) noexcept
    : ResolvedFunctionCallBaseProto() {
    *this = ::std::move(from);
  }

  inline ResolvedFunctionCallBaseProto& operator=(ResolvedFunctionCallBaseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedFunctionCallBaseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedFunctionCallBaseProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedFunctionCallBaseProto*>(
               &_ResolvedFunctionCallBaseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(ResolvedFunctionCallBaseProto* other);
  friend void swap(ResolvedFunctionCallBaseProto& a, ResolvedFunctionCallBaseProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedFunctionCallBaseProto* New() const final {
    return CreateMaybeMessage<ResolvedFunctionCallBaseProto>(NULL);
  }

  ResolvedFunctionCallBaseProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedFunctionCallBaseProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedFunctionCallBaseProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.AnyResolvedExprProto argument_list = 4;
  int argument_list_size() const;
  void clear_argument_list();
  static const int kArgumentListFieldNumber = 4;
  ::zetasql::AnyResolvedExprProto* mutable_argument_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
      mutable_argument_list();
  const ::zetasql::AnyResolvedExprProto& argument_list(int index) const;
  ::zetasql::AnyResolvedExprProto* add_argument_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
      argument_list() const;

  // repeated .zetasql.ResolvedFunctionArgumentProto generic_argument_list = 6;
  int generic_argument_list_size() const;
  void clear_generic_argument_list();
  static const int kGenericArgumentListFieldNumber = 6;
  ::zetasql::ResolvedFunctionArgumentProto* mutable_generic_argument_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedFunctionArgumentProto >*
      mutable_generic_argument_list();
  const ::zetasql::ResolvedFunctionArgumentProto& generic_argument_list(int index) const;
  ::zetasql::ResolvedFunctionArgumentProto* add_generic_argument_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedFunctionArgumentProto >&
      generic_argument_list() const;

  // repeated .zetasql.ResolvedOptionProto hint_list = 7;
  int hint_list_size() const;
  void clear_hint_list();
  static const int kHintListFieldNumber = 7;
  ::zetasql::ResolvedOptionProto* mutable_hint_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_hint_list();
  const ::zetasql::ResolvedOptionProto& hint_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_hint_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      hint_list() const;

  // repeated .zetasql.ResolvedCollationProto collation_list = 8;
  int collation_list_size() const;
  void clear_collation_list();
  static const int kCollationListFieldNumber = 8;
  ::zetasql::ResolvedCollationProto* mutable_collation_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedCollationProto >*
      mutable_collation_list();
  const ::zetasql::ResolvedCollationProto& collation_list(int index) const;
  ::zetasql::ResolvedCollationProto* add_collation_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedCollationProto >&
      collation_list() const;

  // optional .zetasql.ResolvedExprProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedExprProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedExprProto& parent() const;
  ::zetasql::ResolvedExprProto* release_parent();
  ::zetasql::ResolvedExprProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedExprProto* parent);

  // optional .zetasql.FunctionRefProto function = 2;
  bool has_function() const;
  void clear_function();
  static const int kFunctionFieldNumber = 2;
  private:
  const ::zetasql::FunctionRefProto& _internal_function() const;
  public:
  const ::zetasql::FunctionRefProto& function() const;
  ::zetasql::FunctionRefProto* release_function();
  ::zetasql::FunctionRefProto* mutable_function();
  void set_allocated_function(::zetasql::FunctionRefProto* function);

  // optional .zetasql.FunctionSignatureProto signature = 3;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 3;
  private:
  const ::zetasql::FunctionSignatureProto& _internal_signature() const;
  public:
  const ::zetasql::FunctionSignatureProto& signature() const;
  ::zetasql::FunctionSignatureProto* release_signature();
  ::zetasql::FunctionSignatureProto* mutable_signature();
  void set_allocated_signature(::zetasql::FunctionSignatureProto* signature);

  // optional .zetasql.ResolvedFunctionCallBaseEnums.ErrorMode error_mode = 5;
  bool has_error_mode() const;
  void clear_error_mode();
  static const int kErrorModeFieldNumber = 5;
  ::zetasql::ResolvedFunctionCallBaseEnums_ErrorMode error_mode() const;
  void set_error_mode(::zetasql::ResolvedFunctionCallBaseEnums_ErrorMode value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedFunctionCallBaseProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_function();
  void clear_has_function();
  void set_has_signature();
  void clear_has_signature();
  void set_has_error_mode();
  void clear_has_error_mode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto > argument_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedFunctionArgumentProto > generic_argument_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > hint_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedCollationProto > collation_list_;
  ::zetasql::ResolvedExprProto* parent_;
  ::zetasql::FunctionRefProto* function_;
  ::zetasql::FunctionSignatureProto* signature_;
  int error_mode_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedFunctionCallProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedFunctionCallProto) */ {
 public:
  ResolvedFunctionCallProto();
  virtual ~ResolvedFunctionCallProto();

  ResolvedFunctionCallProto(const ResolvedFunctionCallProto& from);

  inline ResolvedFunctionCallProto& operator=(const ResolvedFunctionCallProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedFunctionCallProto(ResolvedFunctionCallProto&& from) noexcept
    : ResolvedFunctionCallProto() {
    *this = ::std::move(from);
  }

  inline ResolvedFunctionCallProto& operator=(ResolvedFunctionCallProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedFunctionCallProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedFunctionCallProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedFunctionCallProto*>(
               &_ResolvedFunctionCallProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(ResolvedFunctionCallProto* other);
  friend void swap(ResolvedFunctionCallProto& a, ResolvedFunctionCallProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedFunctionCallProto* New() const final {
    return CreateMaybeMessage<ResolvedFunctionCallProto>(NULL);
  }

  ResolvedFunctionCallProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedFunctionCallProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedFunctionCallProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedFunctionCallBaseProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedFunctionCallBaseProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedFunctionCallBaseProto& parent() const;
  ::zetasql::ResolvedFunctionCallBaseProto* release_parent();
  ::zetasql::ResolvedFunctionCallBaseProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedFunctionCallBaseProto* parent);

  // optional .zetasql.ResolvedFunctionCallInfoProto function_call_info = 2;
  bool has_function_call_info() const;
  void clear_function_call_info();
  static const int kFunctionCallInfoFieldNumber = 2;
  private:
  const ::zetasql::ResolvedFunctionCallInfoProto& _internal_function_call_info() const;
  public:
  const ::zetasql::ResolvedFunctionCallInfoProto& function_call_info() const;
  ::zetasql::ResolvedFunctionCallInfoProto* release_function_call_info();
  ::zetasql::ResolvedFunctionCallInfoProto* mutable_function_call_info();
  void set_allocated_function_call_info(::zetasql::ResolvedFunctionCallInfoProto* function_call_info);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedFunctionCallProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_function_call_info();
  void clear_has_function_call_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedFunctionCallBaseProto* parent_;
  ::zetasql::ResolvedFunctionCallInfoProto* function_call_info_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnyResolvedNonScalarFunctionCallBaseProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.AnyResolvedNonScalarFunctionCallBaseProto) */ {
 public:
  AnyResolvedNonScalarFunctionCallBaseProto();
  virtual ~AnyResolvedNonScalarFunctionCallBaseProto();

  AnyResolvedNonScalarFunctionCallBaseProto(const AnyResolvedNonScalarFunctionCallBaseProto& from);

  inline AnyResolvedNonScalarFunctionCallBaseProto& operator=(const AnyResolvedNonScalarFunctionCallBaseProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnyResolvedNonScalarFunctionCallBaseProto(AnyResolvedNonScalarFunctionCallBaseProto&& from) noexcept
    : AnyResolvedNonScalarFunctionCallBaseProto() {
    *this = ::std::move(from);
  }

  inline AnyResolvedNonScalarFunctionCallBaseProto& operator=(AnyResolvedNonScalarFunctionCallBaseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnyResolvedNonScalarFunctionCallBaseProto& default_instance();

  enum NodeCase {
    kResolvedAggregateFunctionCallNode = 9,
    kResolvedAnalyticFunctionCallNode = 10,
    NODE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnyResolvedNonScalarFunctionCallBaseProto* internal_default_instance() {
    return reinterpret_cast<const AnyResolvedNonScalarFunctionCallBaseProto*>(
               &_AnyResolvedNonScalarFunctionCallBaseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(AnyResolvedNonScalarFunctionCallBaseProto* other);
  friend void swap(AnyResolvedNonScalarFunctionCallBaseProto& a, AnyResolvedNonScalarFunctionCallBaseProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnyResolvedNonScalarFunctionCallBaseProto* New() const final {
    return CreateMaybeMessage<AnyResolvedNonScalarFunctionCallBaseProto>(NULL);
  }

  AnyResolvedNonScalarFunctionCallBaseProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnyResolvedNonScalarFunctionCallBaseProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyResolvedNonScalarFunctionCallBaseProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedAggregateFunctionCallProto resolved_aggregate_function_call_node = 9;
  bool has_resolved_aggregate_function_call_node() const;
  void clear_resolved_aggregate_function_call_node();
  static const int kResolvedAggregateFunctionCallNodeFieldNumber = 9;
  private:
  const ::zetasql::ResolvedAggregateFunctionCallProto& _internal_resolved_aggregate_function_call_node() const;
  public:
  const ::zetasql::ResolvedAggregateFunctionCallProto& resolved_aggregate_function_call_node() const;
  ::zetasql::ResolvedAggregateFunctionCallProto* release_resolved_aggregate_function_call_node();
  ::zetasql::ResolvedAggregateFunctionCallProto* mutable_resolved_aggregate_function_call_node();
  void set_allocated_resolved_aggregate_function_call_node(::zetasql::ResolvedAggregateFunctionCallProto* resolved_aggregate_function_call_node);

  // optional .zetasql.ResolvedAnalyticFunctionCallProto resolved_analytic_function_call_node = 10;
  bool has_resolved_analytic_function_call_node() const;
  void clear_resolved_analytic_function_call_node();
  static const int kResolvedAnalyticFunctionCallNodeFieldNumber = 10;
  private:
  const ::zetasql::ResolvedAnalyticFunctionCallProto& _internal_resolved_analytic_function_call_node() const;
  public:
  const ::zetasql::ResolvedAnalyticFunctionCallProto& resolved_analytic_function_call_node() const;
  ::zetasql::ResolvedAnalyticFunctionCallProto* release_resolved_analytic_function_call_node();
  ::zetasql::ResolvedAnalyticFunctionCallProto* mutable_resolved_analytic_function_call_node();
  void set_allocated_resolved_analytic_function_call_node(::zetasql::ResolvedAnalyticFunctionCallProto* resolved_analytic_function_call_node);

  void clear_node();
  NodeCase node_case() const;
  // @@protoc_insertion_point(class_scope:zetasql.AnyResolvedNonScalarFunctionCallBaseProto)
 private:
  void set_has_resolved_aggregate_function_call_node();
  void set_has_resolved_analytic_function_call_node();

  inline bool has_node() const;
  inline void clear_has_node();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union NodeUnion {
    NodeUnion() {}
    ::zetasql::ResolvedAggregateFunctionCallProto* resolved_aggregate_function_call_node_;
    ::zetasql::ResolvedAnalyticFunctionCallProto* resolved_analytic_function_call_node_;
  } node_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedNonScalarFunctionCallBaseProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedNonScalarFunctionCallBaseProto) */ {
 public:
  ResolvedNonScalarFunctionCallBaseProto();
  virtual ~ResolvedNonScalarFunctionCallBaseProto();

  ResolvedNonScalarFunctionCallBaseProto(const ResolvedNonScalarFunctionCallBaseProto& from);

  inline ResolvedNonScalarFunctionCallBaseProto& operator=(const ResolvedNonScalarFunctionCallBaseProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedNonScalarFunctionCallBaseProto(ResolvedNonScalarFunctionCallBaseProto&& from) noexcept
    : ResolvedNonScalarFunctionCallBaseProto() {
    *this = ::std::move(from);
  }

  inline ResolvedNonScalarFunctionCallBaseProto& operator=(ResolvedNonScalarFunctionCallBaseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedNonScalarFunctionCallBaseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedNonScalarFunctionCallBaseProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedNonScalarFunctionCallBaseProto*>(
               &_ResolvedNonScalarFunctionCallBaseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(ResolvedNonScalarFunctionCallBaseProto* other);
  friend void swap(ResolvedNonScalarFunctionCallBaseProto& a, ResolvedNonScalarFunctionCallBaseProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedNonScalarFunctionCallBaseProto* New() const final {
    return CreateMaybeMessage<ResolvedNonScalarFunctionCallBaseProto>(NULL);
  }

  ResolvedNonScalarFunctionCallBaseProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedNonScalarFunctionCallBaseProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedNonScalarFunctionCallBaseProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedColumnRefProto with_group_rows_parameter_list = 5;
  int with_group_rows_parameter_list_size() const;
  void clear_with_group_rows_parameter_list();
  static const int kWithGroupRowsParameterListFieldNumber = 5;
  ::zetasql::ResolvedColumnRefProto* mutable_with_group_rows_parameter_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >*
      mutable_with_group_rows_parameter_list();
  const ::zetasql::ResolvedColumnRefProto& with_group_rows_parameter_list(int index) const;
  ::zetasql::ResolvedColumnRefProto* add_with_group_rows_parameter_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >&
      with_group_rows_parameter_list() const;

  // optional .zetasql.ResolvedFunctionCallBaseProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedFunctionCallBaseProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedFunctionCallBaseProto& parent() const;
  ::zetasql::ResolvedFunctionCallBaseProto* release_parent();
  ::zetasql::ResolvedFunctionCallBaseProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedFunctionCallBaseProto* parent);

  // optional .zetasql.AnyResolvedScanProto with_group_rows_subquery = 4;
  bool has_with_group_rows_subquery() const;
  void clear_with_group_rows_subquery();
  static const int kWithGroupRowsSubqueryFieldNumber = 4;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_with_group_rows_subquery() const;
  public:
  const ::zetasql::AnyResolvedScanProto& with_group_rows_subquery() const;
  ::zetasql::AnyResolvedScanProto* release_with_group_rows_subquery();
  ::zetasql::AnyResolvedScanProto* mutable_with_group_rows_subquery();
  void set_allocated_with_group_rows_subquery(::zetasql::AnyResolvedScanProto* with_group_rows_subquery);

  // optional bool distinct = 2;
  bool has_distinct() const;
  void clear_distinct();
  static const int kDistinctFieldNumber = 2;
  bool distinct() const;
  void set_distinct(bool value);

  // optional .zetasql.ResolvedNonScalarFunctionCallBaseEnums.NullHandlingModifier null_handling_modifier = 3;
  bool has_null_handling_modifier() const;
  void clear_null_handling_modifier();
  static const int kNullHandlingModifierFieldNumber = 3;
  ::zetasql::ResolvedNonScalarFunctionCallBaseEnums_NullHandlingModifier null_handling_modifier() const;
  void set_null_handling_modifier(::zetasql::ResolvedNonScalarFunctionCallBaseEnums_NullHandlingModifier value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedNonScalarFunctionCallBaseProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_distinct();
  void clear_has_distinct();
  void set_has_null_handling_modifier();
  void clear_has_null_handling_modifier();
  void set_has_with_group_rows_subquery();
  void clear_has_with_group_rows_subquery();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto > with_group_rows_parameter_list_;
  ::zetasql::ResolvedFunctionCallBaseProto* parent_;
  ::zetasql::AnyResolvedScanProto* with_group_rows_subquery_;
  bool distinct_;
  int null_handling_modifier_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAggregateFunctionCallProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAggregateFunctionCallProto) */ {
 public:
  ResolvedAggregateFunctionCallProto();
  virtual ~ResolvedAggregateFunctionCallProto();

  ResolvedAggregateFunctionCallProto(const ResolvedAggregateFunctionCallProto& from);

  inline ResolvedAggregateFunctionCallProto& operator=(const ResolvedAggregateFunctionCallProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAggregateFunctionCallProto(ResolvedAggregateFunctionCallProto&& from) noexcept
    : ResolvedAggregateFunctionCallProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAggregateFunctionCallProto& operator=(ResolvedAggregateFunctionCallProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAggregateFunctionCallProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAggregateFunctionCallProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAggregateFunctionCallProto*>(
               &_ResolvedAggregateFunctionCallProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(ResolvedAggregateFunctionCallProto* other);
  friend void swap(ResolvedAggregateFunctionCallProto& a, ResolvedAggregateFunctionCallProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAggregateFunctionCallProto* New() const final {
    return CreateMaybeMessage<ResolvedAggregateFunctionCallProto>(NULL);
  }

  ResolvedAggregateFunctionCallProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAggregateFunctionCallProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAggregateFunctionCallProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedOrderByItemProto order_by_item_list = 3;
  int order_by_item_list_size() const;
  void clear_order_by_item_list();
  static const int kOrderByItemListFieldNumber = 3;
  ::zetasql::ResolvedOrderByItemProto* mutable_order_by_item_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOrderByItemProto >*
      mutable_order_by_item_list();
  const ::zetasql::ResolvedOrderByItemProto& order_by_item_list(int index) const;
  ::zetasql::ResolvedOrderByItemProto* add_order_by_item_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOrderByItemProto >&
      order_by_item_list() const;

  // optional .zetasql.ResolvedNonScalarFunctionCallBaseProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedNonScalarFunctionCallBaseProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedNonScalarFunctionCallBaseProto& parent() const;
  ::zetasql::ResolvedNonScalarFunctionCallBaseProto* release_parent();
  ::zetasql::ResolvedNonScalarFunctionCallBaseProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedNonScalarFunctionCallBaseProto* parent);

  // optional .zetasql.AnyResolvedExprProto limit = 4;
  bool has_limit() const;
  void clear_limit();
  static const int kLimitFieldNumber = 4;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_limit() const;
  public:
  const ::zetasql::AnyResolvedExprProto& limit() const;
  ::zetasql::AnyResolvedExprProto* release_limit();
  ::zetasql::AnyResolvedExprProto* mutable_limit();
  void set_allocated_limit(::zetasql::AnyResolvedExprProto* limit);

  // optional .zetasql.ResolvedAggregateHavingModifierProto having_modifier = 5;
  bool has_having_modifier() const;
  void clear_having_modifier();
  static const int kHavingModifierFieldNumber = 5;
  private:
  const ::zetasql::ResolvedAggregateHavingModifierProto& _internal_having_modifier() const;
  public:
  const ::zetasql::ResolvedAggregateHavingModifierProto& having_modifier() const;
  ::zetasql::ResolvedAggregateHavingModifierProto* release_having_modifier();
  ::zetasql::ResolvedAggregateHavingModifierProto* mutable_having_modifier();
  void set_allocated_having_modifier(::zetasql::ResolvedAggregateHavingModifierProto* having_modifier);

  // optional .zetasql.ResolvedFunctionCallInfoProto function_call_info = 6;
  bool has_function_call_info() const;
  void clear_function_call_info();
  static const int kFunctionCallInfoFieldNumber = 6;
  private:
  const ::zetasql::ResolvedFunctionCallInfoProto& _internal_function_call_info() const;
  public:
  const ::zetasql::ResolvedFunctionCallInfoProto& function_call_info() const;
  ::zetasql::ResolvedFunctionCallInfoProto* release_function_call_info();
  ::zetasql::ResolvedFunctionCallInfoProto* mutable_function_call_info();
  void set_allocated_function_call_info(::zetasql::ResolvedFunctionCallInfoProto* function_call_info);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAggregateFunctionCallProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_having_modifier();
  void clear_has_having_modifier();
  void set_has_limit();
  void clear_has_limit();
  void set_has_function_call_info();
  void clear_has_function_call_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOrderByItemProto > order_by_item_list_;
  ::zetasql::ResolvedNonScalarFunctionCallBaseProto* parent_;
  ::zetasql::AnyResolvedExprProto* limit_;
  ::zetasql::ResolvedAggregateHavingModifierProto* having_modifier_;
  ::zetasql::ResolvedFunctionCallInfoProto* function_call_info_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAnalyticFunctionCallProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAnalyticFunctionCallProto) */ {
 public:
  ResolvedAnalyticFunctionCallProto();
  virtual ~ResolvedAnalyticFunctionCallProto();

  ResolvedAnalyticFunctionCallProto(const ResolvedAnalyticFunctionCallProto& from);

  inline ResolvedAnalyticFunctionCallProto& operator=(const ResolvedAnalyticFunctionCallProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAnalyticFunctionCallProto(ResolvedAnalyticFunctionCallProto&& from) noexcept
    : ResolvedAnalyticFunctionCallProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAnalyticFunctionCallProto& operator=(ResolvedAnalyticFunctionCallProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAnalyticFunctionCallProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAnalyticFunctionCallProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAnalyticFunctionCallProto*>(
               &_ResolvedAnalyticFunctionCallProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(ResolvedAnalyticFunctionCallProto* other);
  friend void swap(ResolvedAnalyticFunctionCallProto& a, ResolvedAnalyticFunctionCallProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAnalyticFunctionCallProto* New() const final {
    return CreateMaybeMessage<ResolvedAnalyticFunctionCallProto>(NULL);
  }

  ResolvedAnalyticFunctionCallProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAnalyticFunctionCallProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAnalyticFunctionCallProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedNonScalarFunctionCallBaseProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedNonScalarFunctionCallBaseProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedNonScalarFunctionCallBaseProto& parent() const;
  ::zetasql::ResolvedNonScalarFunctionCallBaseProto* release_parent();
  ::zetasql::ResolvedNonScalarFunctionCallBaseProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedNonScalarFunctionCallBaseProto* parent);

  // optional .zetasql.ResolvedWindowFrameProto window_frame = 2;
  bool has_window_frame() const;
  void clear_window_frame();
  static const int kWindowFrameFieldNumber = 2;
  private:
  const ::zetasql::ResolvedWindowFrameProto& _internal_window_frame() const;
  public:
  const ::zetasql::ResolvedWindowFrameProto& window_frame() const;
  ::zetasql::ResolvedWindowFrameProto* release_window_frame();
  ::zetasql::ResolvedWindowFrameProto* mutable_window_frame();
  void set_allocated_window_frame(::zetasql::ResolvedWindowFrameProto* window_frame);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAnalyticFunctionCallProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_window_frame();
  void clear_has_window_frame();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedNonScalarFunctionCallBaseProto* parent_;
  ::zetasql::ResolvedWindowFrameProto* window_frame_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedExtendedCastElementProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedExtendedCastElementProto) */ {
 public:
  ResolvedExtendedCastElementProto();
  virtual ~ResolvedExtendedCastElementProto();

  ResolvedExtendedCastElementProto(const ResolvedExtendedCastElementProto& from);

  inline ResolvedExtendedCastElementProto& operator=(const ResolvedExtendedCastElementProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedExtendedCastElementProto(ResolvedExtendedCastElementProto&& from) noexcept
    : ResolvedExtendedCastElementProto() {
    *this = ::std::move(from);
  }

  inline ResolvedExtendedCastElementProto& operator=(ResolvedExtendedCastElementProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedExtendedCastElementProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedExtendedCastElementProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedExtendedCastElementProto*>(
               &_ResolvedExtendedCastElementProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(ResolvedExtendedCastElementProto* other);
  friend void swap(ResolvedExtendedCastElementProto& a, ResolvedExtendedCastElementProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedExtendedCastElementProto* New() const final {
    return CreateMaybeMessage<ResolvedExtendedCastElementProto>(NULL);
  }

  ResolvedExtendedCastElementProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedExtendedCastElementProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedExtendedCastElementProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.TypeProto from_type = 2;
  bool has_from_type() const;
  void clear_from_type();
  static const int kFromTypeFieldNumber = 2;
  private:
  const ::zetasql::TypeProto& _internal_from_type() const;
  public:
  const ::zetasql::TypeProto& from_type() const;
  ::zetasql::TypeProto* release_from_type();
  ::zetasql::TypeProto* mutable_from_type();
  void set_allocated_from_type(::zetasql::TypeProto* from_type);

  // optional .zetasql.TypeProto to_type = 3;
  bool has_to_type() const;
  void clear_to_type();
  static const int kToTypeFieldNumber = 3;
  private:
  const ::zetasql::TypeProto& _internal_to_type() const;
  public:
  const ::zetasql::TypeProto& to_type() const;
  ::zetasql::TypeProto* release_to_type();
  ::zetasql::TypeProto* mutable_to_type();
  void set_allocated_to_type(::zetasql::TypeProto* to_type);

  // optional .zetasql.FunctionRefProto function = 4;
  bool has_function() const;
  void clear_function();
  static const int kFunctionFieldNumber = 4;
  private:
  const ::zetasql::FunctionRefProto& _internal_function() const;
  public:
  const ::zetasql::FunctionRefProto& function() const;
  ::zetasql::FunctionRefProto* release_function();
  ::zetasql::FunctionRefProto* mutable_function();
  void set_allocated_function(::zetasql::FunctionRefProto* function);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedExtendedCastElementProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_from_type();
  void clear_has_from_type();
  void set_has_to_type();
  void clear_has_to_type();
  void set_has_function();
  void clear_has_function();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::TypeProto* from_type_;
  ::zetasql::TypeProto* to_type_;
  ::zetasql::FunctionRefProto* function_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedExtendedCastProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedExtendedCastProto) */ {
 public:
  ResolvedExtendedCastProto();
  virtual ~ResolvedExtendedCastProto();

  ResolvedExtendedCastProto(const ResolvedExtendedCastProto& from);

  inline ResolvedExtendedCastProto& operator=(const ResolvedExtendedCastProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedExtendedCastProto(ResolvedExtendedCastProto&& from) noexcept
    : ResolvedExtendedCastProto() {
    *this = ::std::move(from);
  }

  inline ResolvedExtendedCastProto& operator=(ResolvedExtendedCastProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedExtendedCastProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedExtendedCastProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedExtendedCastProto*>(
               &_ResolvedExtendedCastProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(ResolvedExtendedCastProto* other);
  friend void swap(ResolvedExtendedCastProto& a, ResolvedExtendedCastProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedExtendedCastProto* New() const final {
    return CreateMaybeMessage<ResolvedExtendedCastProto>(NULL);
  }

  ResolvedExtendedCastProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedExtendedCastProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedExtendedCastProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedExtendedCastElementProto element_list = 2;
  int element_list_size() const;
  void clear_element_list();
  static const int kElementListFieldNumber = 2;
  ::zetasql::ResolvedExtendedCastElementProto* mutable_element_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedExtendedCastElementProto >*
      mutable_element_list();
  const ::zetasql::ResolvedExtendedCastElementProto& element_list(int index) const;
  ::zetasql::ResolvedExtendedCastElementProto* add_element_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedExtendedCastElementProto >&
      element_list() const;

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedExtendedCastProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedExtendedCastElementProto > element_list_;
  ::zetasql::ResolvedArgumentProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedCastProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedCastProto) */ {
 public:
  ResolvedCastProto();
  virtual ~ResolvedCastProto();

  ResolvedCastProto(const ResolvedCastProto& from);

  inline ResolvedCastProto& operator=(const ResolvedCastProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedCastProto(ResolvedCastProto&& from) noexcept
    : ResolvedCastProto() {
    *this = ::std::move(from);
  }

  inline ResolvedCastProto& operator=(ResolvedCastProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedCastProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedCastProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedCastProto*>(
               &_ResolvedCastProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(ResolvedCastProto* other);
  friend void swap(ResolvedCastProto& a, ResolvedCastProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedCastProto* New() const final {
    return CreateMaybeMessage<ResolvedCastProto>(NULL);
  }

  ResolvedCastProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedCastProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedCastProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedExprProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedExprProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedExprProto& parent() const;
  ::zetasql::ResolvedExprProto* release_parent();
  ::zetasql::ResolvedExprProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedExprProto* parent);

  // optional .zetasql.AnyResolvedExprProto expr = 2;
  bool has_expr() const;
  void clear_expr();
  static const int kExprFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_expr() const;
  public:
  const ::zetasql::AnyResolvedExprProto& expr() const;
  ::zetasql::AnyResolvedExprProto* release_expr();
  ::zetasql::AnyResolvedExprProto* mutable_expr();
  void set_allocated_expr(::zetasql::AnyResolvedExprProto* expr);

  // optional .zetasql.ResolvedExtendedCastProto extended_cast = 4;
  bool has_extended_cast() const;
  void clear_extended_cast();
  static const int kExtendedCastFieldNumber = 4;
  private:
  const ::zetasql::ResolvedExtendedCastProto& _internal_extended_cast() const;
  public:
  const ::zetasql::ResolvedExtendedCastProto& extended_cast() const;
  ::zetasql::ResolvedExtendedCastProto* release_extended_cast();
  ::zetasql::ResolvedExtendedCastProto* mutable_extended_cast();
  void set_allocated_extended_cast(::zetasql::ResolvedExtendedCastProto* extended_cast);

  // optional .zetasql.AnyResolvedExprProto format = 5;
  bool has_format() const;
  void clear_format();
  static const int kFormatFieldNumber = 5;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_format() const;
  public:
  const ::zetasql::AnyResolvedExprProto& format() const;
  ::zetasql::AnyResolvedExprProto* release_format();
  ::zetasql::AnyResolvedExprProto* mutable_format();
  void set_allocated_format(::zetasql::AnyResolvedExprProto* format);

  // optional .zetasql.AnyResolvedExprProto time_zone = 6;
  bool has_time_zone() const;
  void clear_time_zone();
  static const int kTimeZoneFieldNumber = 6;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_time_zone() const;
  public:
  const ::zetasql::AnyResolvedExprProto& time_zone() const;
  ::zetasql::AnyResolvedExprProto* release_time_zone();
  ::zetasql::AnyResolvedExprProto* mutable_time_zone();
  void set_allocated_time_zone(::zetasql::AnyResolvedExprProto* time_zone);

  // optional .zetasql.TypeParametersProto type_parameters = 7;
  bool has_type_parameters() const;
  void clear_type_parameters();
  static const int kTypeParametersFieldNumber = 7;
  private:
  const ::zetasql::TypeParametersProto& _internal_type_parameters() const;
  public:
  const ::zetasql::TypeParametersProto& type_parameters() const;
  ::zetasql::TypeParametersProto* release_type_parameters();
  ::zetasql::TypeParametersProto* mutable_type_parameters();
  void set_allocated_type_parameters(::zetasql::TypeParametersProto* type_parameters);

  // optional bool return_null_on_error = 3;
  bool has_return_null_on_error() const;
  void clear_return_null_on_error();
  static const int kReturnNullOnErrorFieldNumber = 3;
  bool return_null_on_error() const;
  void set_return_null_on_error(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedCastProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_expr();
  void clear_has_expr();
  void set_has_return_null_on_error();
  void clear_has_return_null_on_error();
  void set_has_extended_cast();
  void clear_has_extended_cast();
  void set_has_format();
  void clear_has_format();
  void set_has_time_zone();
  void clear_has_time_zone();
  void set_has_type_parameters();
  void clear_has_type_parameters();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedExprProto* parent_;
  ::zetasql::AnyResolvedExprProto* expr_;
  ::zetasql::ResolvedExtendedCastProto* extended_cast_;
  ::zetasql::AnyResolvedExprProto* format_;
  ::zetasql::AnyResolvedExprProto* time_zone_;
  ::zetasql::TypeParametersProto* type_parameters_;
  bool return_null_on_error_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedMakeStructProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedMakeStructProto) */ {
 public:
  ResolvedMakeStructProto();
  virtual ~ResolvedMakeStructProto();

  ResolvedMakeStructProto(const ResolvedMakeStructProto& from);

  inline ResolvedMakeStructProto& operator=(const ResolvedMakeStructProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedMakeStructProto(ResolvedMakeStructProto&& from) noexcept
    : ResolvedMakeStructProto() {
    *this = ::std::move(from);
  }

  inline ResolvedMakeStructProto& operator=(ResolvedMakeStructProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedMakeStructProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedMakeStructProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedMakeStructProto*>(
               &_ResolvedMakeStructProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(ResolvedMakeStructProto* other);
  friend void swap(ResolvedMakeStructProto& a, ResolvedMakeStructProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedMakeStructProto* New() const final {
    return CreateMaybeMessage<ResolvedMakeStructProto>(NULL);
  }

  ResolvedMakeStructProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedMakeStructProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedMakeStructProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.AnyResolvedExprProto field_list = 2;
  int field_list_size() const;
  void clear_field_list();
  static const int kFieldListFieldNumber = 2;
  ::zetasql::AnyResolvedExprProto* mutable_field_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
      mutable_field_list();
  const ::zetasql::AnyResolvedExprProto& field_list(int index) const;
  ::zetasql::AnyResolvedExprProto* add_field_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
      field_list() const;

  // optional .zetasql.ResolvedExprProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedExprProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedExprProto& parent() const;
  ::zetasql::ResolvedExprProto* release_parent();
  ::zetasql::ResolvedExprProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedExprProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedMakeStructProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto > field_list_;
  ::zetasql::ResolvedExprProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedMakeProtoProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedMakeProtoProto) */ {
 public:
  ResolvedMakeProtoProto();
  virtual ~ResolvedMakeProtoProto();

  ResolvedMakeProtoProto(const ResolvedMakeProtoProto& from);

  inline ResolvedMakeProtoProto& operator=(const ResolvedMakeProtoProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedMakeProtoProto(ResolvedMakeProtoProto&& from) noexcept
    : ResolvedMakeProtoProto() {
    *this = ::std::move(from);
  }

  inline ResolvedMakeProtoProto& operator=(ResolvedMakeProtoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedMakeProtoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedMakeProtoProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedMakeProtoProto*>(
               &_ResolvedMakeProtoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(ResolvedMakeProtoProto* other);
  friend void swap(ResolvedMakeProtoProto& a, ResolvedMakeProtoProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedMakeProtoProto* New() const final {
    return CreateMaybeMessage<ResolvedMakeProtoProto>(NULL);
  }

  ResolvedMakeProtoProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedMakeProtoProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedMakeProtoProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedMakeProtoFieldProto field_list = 2;
  int field_list_size() const;
  void clear_field_list();
  static const int kFieldListFieldNumber = 2;
  ::zetasql::ResolvedMakeProtoFieldProto* mutable_field_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedMakeProtoFieldProto >*
      mutable_field_list();
  const ::zetasql::ResolvedMakeProtoFieldProto& field_list(int index) const;
  ::zetasql::ResolvedMakeProtoFieldProto* add_field_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedMakeProtoFieldProto >&
      field_list() const;

  // optional .zetasql.ResolvedExprProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedExprProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedExprProto& parent() const;
  ::zetasql::ResolvedExprProto* release_parent();
  ::zetasql::ResolvedExprProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedExprProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedMakeProtoProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedMakeProtoFieldProto > field_list_;
  ::zetasql::ResolvedExprProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedMakeProtoFieldProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedMakeProtoFieldProto) */ {
 public:
  ResolvedMakeProtoFieldProto();
  virtual ~ResolvedMakeProtoFieldProto();

  ResolvedMakeProtoFieldProto(const ResolvedMakeProtoFieldProto& from);

  inline ResolvedMakeProtoFieldProto& operator=(const ResolvedMakeProtoFieldProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedMakeProtoFieldProto(ResolvedMakeProtoFieldProto&& from) noexcept
    : ResolvedMakeProtoFieldProto() {
    *this = ::std::move(from);
  }

  inline ResolvedMakeProtoFieldProto& operator=(ResolvedMakeProtoFieldProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedMakeProtoFieldProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedMakeProtoFieldProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedMakeProtoFieldProto*>(
               &_ResolvedMakeProtoFieldProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(ResolvedMakeProtoFieldProto* other);
  friend void swap(ResolvedMakeProtoFieldProto& a, ResolvedMakeProtoFieldProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedMakeProtoFieldProto* New() const final {
    return CreateMaybeMessage<ResolvedMakeProtoFieldProto>(NULL);
  }

  ResolvedMakeProtoFieldProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedMakeProtoFieldProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedMakeProtoFieldProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.FieldDescriptorRefProto field_descriptor = 2;
  bool has_field_descriptor() const;
  void clear_field_descriptor();
  static const int kFieldDescriptorFieldNumber = 2;
  private:
  const ::zetasql::FieldDescriptorRefProto& _internal_field_descriptor() const;
  public:
  const ::zetasql::FieldDescriptorRefProto& field_descriptor() const;
  ::zetasql::FieldDescriptorRefProto* release_field_descriptor();
  ::zetasql::FieldDescriptorRefProto* mutable_field_descriptor();
  void set_allocated_field_descriptor(::zetasql::FieldDescriptorRefProto* field_descriptor);

  // optional .zetasql.AnyResolvedExprProto expr = 4;
  bool has_expr() const;
  void clear_expr();
  static const int kExprFieldNumber = 4;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_expr() const;
  public:
  const ::zetasql::AnyResolvedExprProto& expr() const;
  ::zetasql::AnyResolvedExprProto* release_expr();
  ::zetasql::AnyResolvedExprProto* mutable_expr();
  void set_allocated_expr(::zetasql::AnyResolvedExprProto* expr);

  // optional .zetasql.FieldFormat.Format format = 3;
  bool has_format() const;
  void clear_format();
  static const int kFormatFieldNumber = 3;
  ::zetasql::FieldFormat_Format format() const;
  void set_format(::zetasql::FieldFormat_Format value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedMakeProtoFieldProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_field_descriptor();
  void clear_has_field_descriptor();
  void set_has_format();
  void clear_has_format();
  void set_has_expr();
  void clear_has_expr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::FieldDescriptorRefProto* field_descriptor_;
  ::zetasql::AnyResolvedExprProto* expr_;
  int format_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedGetStructFieldProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedGetStructFieldProto) */ {
 public:
  ResolvedGetStructFieldProto();
  virtual ~ResolvedGetStructFieldProto();

  ResolvedGetStructFieldProto(const ResolvedGetStructFieldProto& from);

  inline ResolvedGetStructFieldProto& operator=(const ResolvedGetStructFieldProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedGetStructFieldProto(ResolvedGetStructFieldProto&& from) noexcept
    : ResolvedGetStructFieldProto() {
    *this = ::std::move(from);
  }

  inline ResolvedGetStructFieldProto& operator=(ResolvedGetStructFieldProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedGetStructFieldProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedGetStructFieldProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedGetStructFieldProto*>(
               &_ResolvedGetStructFieldProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(ResolvedGetStructFieldProto* other);
  friend void swap(ResolvedGetStructFieldProto& a, ResolvedGetStructFieldProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedGetStructFieldProto* New() const final {
    return CreateMaybeMessage<ResolvedGetStructFieldProto>(NULL);
  }

  ResolvedGetStructFieldProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedGetStructFieldProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedGetStructFieldProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedExprProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedExprProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedExprProto& parent() const;
  ::zetasql::ResolvedExprProto* release_parent();
  ::zetasql::ResolvedExprProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedExprProto* parent);

  // optional .zetasql.AnyResolvedExprProto expr = 2;
  bool has_expr() const;
  void clear_expr();
  static const int kExprFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_expr() const;
  public:
  const ::zetasql::AnyResolvedExprProto& expr() const;
  ::zetasql::AnyResolvedExprProto* release_expr();
  ::zetasql::AnyResolvedExprProto* mutable_expr();
  void set_allocated_expr(::zetasql::AnyResolvedExprProto* expr);

  // optional int64 field_idx = 3;
  bool has_field_idx() const;
  void clear_field_idx();
  static const int kFieldIdxFieldNumber = 3;
  ::google::protobuf::int64 field_idx() const;
  void set_field_idx(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedGetStructFieldProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_expr();
  void clear_has_expr();
  void set_has_field_idx();
  void clear_has_field_idx();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedExprProto* parent_;
  ::zetasql::AnyResolvedExprProto* expr_;
  ::google::protobuf::int64 field_idx_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedGetProtoFieldProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedGetProtoFieldProto) */ {
 public:
  ResolvedGetProtoFieldProto();
  virtual ~ResolvedGetProtoFieldProto();

  ResolvedGetProtoFieldProto(const ResolvedGetProtoFieldProto& from);

  inline ResolvedGetProtoFieldProto& operator=(const ResolvedGetProtoFieldProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedGetProtoFieldProto(ResolvedGetProtoFieldProto&& from) noexcept
    : ResolvedGetProtoFieldProto() {
    *this = ::std::move(from);
  }

  inline ResolvedGetProtoFieldProto& operator=(ResolvedGetProtoFieldProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedGetProtoFieldProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedGetProtoFieldProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedGetProtoFieldProto*>(
               &_ResolvedGetProtoFieldProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(ResolvedGetProtoFieldProto* other);
  friend void swap(ResolvedGetProtoFieldProto& a, ResolvedGetProtoFieldProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedGetProtoFieldProto* New() const final {
    return CreateMaybeMessage<ResolvedGetProtoFieldProto>(NULL);
  }

  ResolvedGetProtoFieldProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedGetProtoFieldProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedGetProtoFieldProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedExprProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedExprProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedExprProto& parent() const;
  ::zetasql::ResolvedExprProto* release_parent();
  ::zetasql::ResolvedExprProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedExprProto* parent);

  // optional .zetasql.AnyResolvedExprProto expr = 2;
  bool has_expr() const;
  void clear_expr();
  static const int kExprFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_expr() const;
  public:
  const ::zetasql::AnyResolvedExprProto& expr() const;
  ::zetasql::AnyResolvedExprProto* release_expr();
  ::zetasql::AnyResolvedExprProto* mutable_expr();
  void set_allocated_expr(::zetasql::AnyResolvedExprProto* expr);

  // optional .zetasql.FieldDescriptorRefProto field_descriptor = 3;
  bool has_field_descriptor() const;
  void clear_field_descriptor();
  static const int kFieldDescriptorFieldNumber = 3;
  private:
  const ::zetasql::FieldDescriptorRefProto& _internal_field_descriptor() const;
  public:
  const ::zetasql::FieldDescriptorRefProto& field_descriptor() const;
  ::zetasql::FieldDescriptorRefProto* release_field_descriptor();
  ::zetasql::FieldDescriptorRefProto* mutable_field_descriptor();
  void set_allocated_field_descriptor(::zetasql::FieldDescriptorRefProto* field_descriptor);

  // optional .zetasql.ValueWithTypeProto default_value = 4;
  bool has_default_value() const;
  void clear_default_value();
  static const int kDefaultValueFieldNumber = 4;
  private:
  const ::zetasql::ValueWithTypeProto& _internal_default_value() const;
  public:
  const ::zetasql::ValueWithTypeProto& default_value() const;
  ::zetasql::ValueWithTypeProto* release_default_value();
  ::zetasql::ValueWithTypeProto* mutable_default_value();
  void set_allocated_default_value(::zetasql::ValueWithTypeProto* default_value);

  // optional .zetasql.FieldFormat.Format format = 6;
  bool has_format() const;
  void clear_format();
  static const int kFormatFieldNumber = 6;
  ::zetasql::FieldFormat_Format format() const;
  void set_format(::zetasql::FieldFormat_Format value);

  // optional bool get_has_bit = 5;
  bool has_get_has_bit() const;
  void clear_get_has_bit();
  static const int kGetHasBitFieldNumber = 5;
  bool get_has_bit() const;
  void set_get_has_bit(bool value);

  // optional bool return_default_value_when_unset = 7;
  bool has_return_default_value_when_unset() const;
  void clear_return_default_value_when_unset();
  static const int kReturnDefaultValueWhenUnsetFieldNumber = 7;
  bool return_default_value_when_unset() const;
  void set_return_default_value_when_unset(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedGetProtoFieldProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_expr();
  void clear_has_expr();
  void set_has_field_descriptor();
  void clear_has_field_descriptor();
  void set_has_default_value();
  void clear_has_default_value();
  void set_has_get_has_bit();
  void clear_has_get_has_bit();
  void set_has_format();
  void clear_has_format();
  void set_has_return_default_value_when_unset();
  void clear_has_return_default_value_when_unset();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedExprProto* parent_;
  ::zetasql::AnyResolvedExprProto* expr_;
  ::zetasql::FieldDescriptorRefProto* field_descriptor_;
  ::zetasql::ValueWithTypeProto* default_value_;
  int format_;
  bool get_has_bit_;
  bool return_default_value_when_unset_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedGetJsonFieldProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedGetJsonFieldProto) */ {
 public:
  ResolvedGetJsonFieldProto();
  virtual ~ResolvedGetJsonFieldProto();

  ResolvedGetJsonFieldProto(const ResolvedGetJsonFieldProto& from);

  inline ResolvedGetJsonFieldProto& operator=(const ResolvedGetJsonFieldProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedGetJsonFieldProto(ResolvedGetJsonFieldProto&& from) noexcept
    : ResolvedGetJsonFieldProto() {
    *this = ::std::move(from);
  }

  inline ResolvedGetJsonFieldProto& operator=(ResolvedGetJsonFieldProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedGetJsonFieldProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedGetJsonFieldProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedGetJsonFieldProto*>(
               &_ResolvedGetJsonFieldProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(ResolvedGetJsonFieldProto* other);
  friend void swap(ResolvedGetJsonFieldProto& a, ResolvedGetJsonFieldProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedGetJsonFieldProto* New() const final {
    return CreateMaybeMessage<ResolvedGetJsonFieldProto>(NULL);
  }

  ResolvedGetJsonFieldProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedGetJsonFieldProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedGetJsonFieldProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string field_name = 3;
  bool has_field_name() const;
  void clear_field_name();
  static const int kFieldNameFieldNumber = 3;
  const ::std::string& field_name() const;
  void set_field_name(const ::std::string& value);
  #if LANG_CXX11
  void set_field_name(::std::string&& value);
  #endif
  void set_field_name(const char* value);
  void set_field_name(const char* value, size_t size);
  ::std::string* mutable_field_name();
  ::std::string* release_field_name();
  void set_allocated_field_name(::std::string* field_name);

  // optional .zetasql.ResolvedExprProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedExprProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedExprProto& parent() const;
  ::zetasql::ResolvedExprProto* release_parent();
  ::zetasql::ResolvedExprProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedExprProto* parent);

  // optional .zetasql.AnyResolvedExprProto expr = 2;
  bool has_expr() const;
  void clear_expr();
  static const int kExprFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_expr() const;
  public:
  const ::zetasql::AnyResolvedExprProto& expr() const;
  ::zetasql::AnyResolvedExprProto* release_expr();
  ::zetasql::AnyResolvedExprProto* mutable_expr();
  void set_allocated_expr(::zetasql::AnyResolvedExprProto* expr);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedGetJsonFieldProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_expr();
  void clear_has_expr();
  void set_has_field_name();
  void clear_has_field_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr field_name_;
  ::zetasql::ResolvedExprProto* parent_;
  ::zetasql::AnyResolvedExprProto* expr_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedFlattenProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedFlattenProto) */ {
 public:
  ResolvedFlattenProto();
  virtual ~ResolvedFlattenProto();

  ResolvedFlattenProto(const ResolvedFlattenProto& from);

  inline ResolvedFlattenProto& operator=(const ResolvedFlattenProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedFlattenProto(ResolvedFlattenProto&& from) noexcept
    : ResolvedFlattenProto() {
    *this = ::std::move(from);
  }

  inline ResolvedFlattenProto& operator=(ResolvedFlattenProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedFlattenProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedFlattenProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedFlattenProto*>(
               &_ResolvedFlattenProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(ResolvedFlattenProto* other);
  friend void swap(ResolvedFlattenProto& a, ResolvedFlattenProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedFlattenProto* New() const final {
    return CreateMaybeMessage<ResolvedFlattenProto>(NULL);
  }

  ResolvedFlattenProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedFlattenProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedFlattenProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.AnyResolvedExprProto get_field_list = 3;
  int get_field_list_size() const;
  void clear_get_field_list();
  static const int kGetFieldListFieldNumber = 3;
  ::zetasql::AnyResolvedExprProto* mutable_get_field_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
      mutable_get_field_list();
  const ::zetasql::AnyResolvedExprProto& get_field_list(int index) const;
  ::zetasql::AnyResolvedExprProto* add_get_field_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
      get_field_list() const;

  // optional .zetasql.ResolvedExprProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedExprProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedExprProto& parent() const;
  ::zetasql::ResolvedExprProto* release_parent();
  ::zetasql::ResolvedExprProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedExprProto* parent);

  // optional .zetasql.AnyResolvedExprProto expr = 2;
  bool has_expr() const;
  void clear_expr();
  static const int kExprFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_expr() const;
  public:
  const ::zetasql::AnyResolvedExprProto& expr() const;
  ::zetasql::AnyResolvedExprProto* release_expr();
  ::zetasql::AnyResolvedExprProto* mutable_expr();
  void set_allocated_expr(::zetasql::AnyResolvedExprProto* expr);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedFlattenProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_expr();
  void clear_has_expr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto > get_field_list_;
  ::zetasql::ResolvedExprProto* parent_;
  ::zetasql::AnyResolvedExprProto* expr_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedFlattenedArgProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedFlattenedArgProto) */ {
 public:
  ResolvedFlattenedArgProto();
  virtual ~ResolvedFlattenedArgProto();

  ResolvedFlattenedArgProto(const ResolvedFlattenedArgProto& from);

  inline ResolvedFlattenedArgProto& operator=(const ResolvedFlattenedArgProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedFlattenedArgProto(ResolvedFlattenedArgProto&& from) noexcept
    : ResolvedFlattenedArgProto() {
    *this = ::std::move(from);
  }

  inline ResolvedFlattenedArgProto& operator=(ResolvedFlattenedArgProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedFlattenedArgProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedFlattenedArgProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedFlattenedArgProto*>(
               &_ResolvedFlattenedArgProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(ResolvedFlattenedArgProto* other);
  friend void swap(ResolvedFlattenedArgProto& a, ResolvedFlattenedArgProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedFlattenedArgProto* New() const final {
    return CreateMaybeMessage<ResolvedFlattenedArgProto>(NULL);
  }

  ResolvedFlattenedArgProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedFlattenedArgProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedFlattenedArgProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedExprProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedExprProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedExprProto& parent() const;
  ::zetasql::ResolvedExprProto* release_parent();
  ::zetasql::ResolvedExprProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedExprProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedFlattenedArgProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedExprProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedReplaceFieldItemProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedReplaceFieldItemProto) */ {
 public:
  ResolvedReplaceFieldItemProto();
  virtual ~ResolvedReplaceFieldItemProto();

  ResolvedReplaceFieldItemProto(const ResolvedReplaceFieldItemProto& from);

  inline ResolvedReplaceFieldItemProto& operator=(const ResolvedReplaceFieldItemProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedReplaceFieldItemProto(ResolvedReplaceFieldItemProto&& from) noexcept
    : ResolvedReplaceFieldItemProto() {
    *this = ::std::move(from);
  }

  inline ResolvedReplaceFieldItemProto& operator=(ResolvedReplaceFieldItemProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedReplaceFieldItemProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedReplaceFieldItemProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedReplaceFieldItemProto*>(
               &_ResolvedReplaceFieldItemProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(ResolvedReplaceFieldItemProto* other);
  friend void swap(ResolvedReplaceFieldItemProto& a, ResolvedReplaceFieldItemProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedReplaceFieldItemProto* New() const final {
    return CreateMaybeMessage<ResolvedReplaceFieldItemProto>(NULL);
  }

  ResolvedReplaceFieldItemProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedReplaceFieldItemProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedReplaceFieldItemProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 struct_index_path = 3;
  int struct_index_path_size() const;
  void clear_struct_index_path();
  static const int kStructIndexPathFieldNumber = 3;
  ::google::protobuf::int64 struct_index_path(int index) const;
  void set_struct_index_path(int index, ::google::protobuf::int64 value);
  void add_struct_index_path(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      struct_index_path() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_struct_index_path();

  // repeated .zetasql.FieldDescriptorRefProto proto_field_path = 4;
  int proto_field_path_size() const;
  void clear_proto_field_path();
  static const int kProtoFieldPathFieldNumber = 4;
  ::zetasql::FieldDescriptorRefProto* mutable_proto_field_path(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::FieldDescriptorRefProto >*
      mutable_proto_field_path();
  const ::zetasql::FieldDescriptorRefProto& proto_field_path(int index) const;
  ::zetasql::FieldDescriptorRefProto* add_proto_field_path();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::FieldDescriptorRefProto >&
      proto_field_path() const;

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.AnyResolvedExprProto expr = 2;
  bool has_expr() const;
  void clear_expr();
  static const int kExprFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_expr() const;
  public:
  const ::zetasql::AnyResolvedExprProto& expr() const;
  ::zetasql::AnyResolvedExprProto* release_expr();
  ::zetasql::AnyResolvedExprProto* mutable_expr();
  void set_allocated_expr(::zetasql::AnyResolvedExprProto* expr);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedReplaceFieldItemProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_expr();
  void clear_has_expr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > struct_index_path_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::FieldDescriptorRefProto > proto_field_path_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::AnyResolvedExprProto* expr_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedReplaceFieldProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedReplaceFieldProto) */ {
 public:
  ResolvedReplaceFieldProto();
  virtual ~ResolvedReplaceFieldProto();

  ResolvedReplaceFieldProto(const ResolvedReplaceFieldProto& from);

  inline ResolvedReplaceFieldProto& operator=(const ResolvedReplaceFieldProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedReplaceFieldProto(ResolvedReplaceFieldProto&& from) noexcept
    : ResolvedReplaceFieldProto() {
    *this = ::std::move(from);
  }

  inline ResolvedReplaceFieldProto& operator=(ResolvedReplaceFieldProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedReplaceFieldProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedReplaceFieldProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedReplaceFieldProto*>(
               &_ResolvedReplaceFieldProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(ResolvedReplaceFieldProto* other);
  friend void swap(ResolvedReplaceFieldProto& a, ResolvedReplaceFieldProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedReplaceFieldProto* New() const final {
    return CreateMaybeMessage<ResolvedReplaceFieldProto>(NULL);
  }

  ResolvedReplaceFieldProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedReplaceFieldProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedReplaceFieldProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedReplaceFieldItemProto replace_field_item_list = 3;
  int replace_field_item_list_size() const;
  void clear_replace_field_item_list();
  static const int kReplaceFieldItemListFieldNumber = 3;
  ::zetasql::ResolvedReplaceFieldItemProto* mutable_replace_field_item_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedReplaceFieldItemProto >*
      mutable_replace_field_item_list();
  const ::zetasql::ResolvedReplaceFieldItemProto& replace_field_item_list(int index) const;
  ::zetasql::ResolvedReplaceFieldItemProto* add_replace_field_item_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedReplaceFieldItemProto >&
      replace_field_item_list() const;

  // optional .zetasql.ResolvedExprProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedExprProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedExprProto& parent() const;
  ::zetasql::ResolvedExprProto* release_parent();
  ::zetasql::ResolvedExprProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedExprProto* parent);

  // optional .zetasql.AnyResolvedExprProto expr = 2;
  bool has_expr() const;
  void clear_expr();
  static const int kExprFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_expr() const;
  public:
  const ::zetasql::AnyResolvedExprProto& expr() const;
  ::zetasql::AnyResolvedExprProto* release_expr();
  ::zetasql::AnyResolvedExprProto* mutable_expr();
  void set_allocated_expr(::zetasql::AnyResolvedExprProto* expr);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedReplaceFieldProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_expr();
  void clear_has_expr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedReplaceFieldItemProto > replace_field_item_list_;
  ::zetasql::ResolvedExprProto* parent_;
  ::zetasql::AnyResolvedExprProto* expr_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedSubqueryExprProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedSubqueryExprProto) */ {
 public:
  ResolvedSubqueryExprProto();
  virtual ~ResolvedSubqueryExprProto();

  ResolvedSubqueryExprProto(const ResolvedSubqueryExprProto& from);

  inline ResolvedSubqueryExprProto& operator=(const ResolvedSubqueryExprProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedSubqueryExprProto(ResolvedSubqueryExprProto&& from) noexcept
    : ResolvedSubqueryExprProto() {
    *this = ::std::move(from);
  }

  inline ResolvedSubqueryExprProto& operator=(ResolvedSubqueryExprProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedSubqueryExprProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedSubqueryExprProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedSubqueryExprProto*>(
               &_ResolvedSubqueryExprProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(ResolvedSubqueryExprProto* other);
  friend void swap(ResolvedSubqueryExprProto& a, ResolvedSubqueryExprProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedSubqueryExprProto* New() const final {
    return CreateMaybeMessage<ResolvedSubqueryExprProto>(NULL);
  }

  ResolvedSubqueryExprProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedSubqueryExprProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedSubqueryExprProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedColumnRefProto parameter_list = 3;
  int parameter_list_size() const;
  void clear_parameter_list();
  static const int kParameterListFieldNumber = 3;
  ::zetasql::ResolvedColumnRefProto* mutable_parameter_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >*
      mutable_parameter_list();
  const ::zetasql::ResolvedColumnRefProto& parameter_list(int index) const;
  ::zetasql::ResolvedColumnRefProto* add_parameter_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >&
      parameter_list() const;

  // repeated .zetasql.ResolvedOptionProto hint_list = 6;
  int hint_list_size() const;
  void clear_hint_list();
  static const int kHintListFieldNumber = 6;
  ::zetasql::ResolvedOptionProto* mutable_hint_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_hint_list();
  const ::zetasql::ResolvedOptionProto& hint_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_hint_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      hint_list() const;

  // optional .zetasql.ResolvedExprProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedExprProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedExprProto& parent() const;
  ::zetasql::ResolvedExprProto* release_parent();
  ::zetasql::ResolvedExprProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedExprProto* parent);

  // optional .zetasql.AnyResolvedExprProto in_expr = 4;
  bool has_in_expr() const;
  void clear_in_expr();
  static const int kInExprFieldNumber = 4;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_in_expr() const;
  public:
  const ::zetasql::AnyResolvedExprProto& in_expr() const;
  ::zetasql::AnyResolvedExprProto* release_in_expr();
  ::zetasql::AnyResolvedExprProto* mutable_in_expr();
  void set_allocated_in_expr(::zetasql::AnyResolvedExprProto* in_expr);

  // optional .zetasql.AnyResolvedScanProto subquery = 5;
  bool has_subquery() const;
  void clear_subquery();
  static const int kSubqueryFieldNumber = 5;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_subquery() const;
  public:
  const ::zetasql::AnyResolvedScanProto& subquery() const;
  ::zetasql::AnyResolvedScanProto* release_subquery();
  ::zetasql::AnyResolvedScanProto* mutable_subquery();
  void set_allocated_subquery(::zetasql::AnyResolvedScanProto* subquery);

  // optional .zetasql.ResolvedCollationProto in_collation = 7;
  bool has_in_collation() const;
  void clear_in_collation();
  static const int kInCollationFieldNumber = 7;
  private:
  const ::zetasql::ResolvedCollationProto& _internal_in_collation() const;
  public:
  const ::zetasql::ResolvedCollationProto& in_collation() const;
  ::zetasql::ResolvedCollationProto* release_in_collation();
  ::zetasql::ResolvedCollationProto* mutable_in_collation();
  void set_allocated_in_collation(::zetasql::ResolvedCollationProto* in_collation);

  // optional .zetasql.ResolvedSubqueryExprEnums.SubqueryType subquery_type = 2;
  bool has_subquery_type() const;
  void clear_subquery_type();
  static const int kSubqueryTypeFieldNumber = 2;
  ::zetasql::ResolvedSubqueryExprEnums_SubqueryType subquery_type() const;
  void set_subquery_type(::zetasql::ResolvedSubqueryExprEnums_SubqueryType value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedSubqueryExprProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_subquery_type();
  void clear_has_subquery_type();
  void set_has_in_expr();
  void clear_has_in_expr();
  void set_has_in_collation();
  void clear_has_in_collation();
  void set_has_subquery();
  void clear_has_subquery();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto > parameter_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > hint_list_;
  ::zetasql::ResolvedExprProto* parent_;
  ::zetasql::AnyResolvedExprProto* in_expr_;
  ::zetasql::AnyResolvedScanProto* subquery_;
  ::zetasql::ResolvedCollationProto* in_collation_;
  int subquery_type_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedLetExprProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedLetExprProto) */ {
 public:
  ResolvedLetExprProto();
  virtual ~ResolvedLetExprProto();

  ResolvedLetExprProto(const ResolvedLetExprProto& from);

  inline ResolvedLetExprProto& operator=(const ResolvedLetExprProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedLetExprProto(ResolvedLetExprProto&& from) noexcept
    : ResolvedLetExprProto() {
    *this = ::std::move(from);
  }

  inline ResolvedLetExprProto& operator=(ResolvedLetExprProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedLetExprProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedLetExprProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedLetExprProto*>(
               &_ResolvedLetExprProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(ResolvedLetExprProto* other);
  friend void swap(ResolvedLetExprProto& a, ResolvedLetExprProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedLetExprProto* New() const final {
    return CreateMaybeMessage<ResolvedLetExprProto>(NULL);
  }

  ResolvedLetExprProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedLetExprProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedLetExprProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedComputedColumnProto assignment_list = 2;
  int assignment_list_size() const;
  void clear_assignment_list();
  static const int kAssignmentListFieldNumber = 2;
  ::zetasql::ResolvedComputedColumnProto* mutable_assignment_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >*
      mutable_assignment_list();
  const ::zetasql::ResolvedComputedColumnProto& assignment_list(int index) const;
  ::zetasql::ResolvedComputedColumnProto* add_assignment_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >&
      assignment_list() const;

  // optional .zetasql.ResolvedExprProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedExprProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedExprProto& parent() const;
  ::zetasql::ResolvedExprProto* release_parent();
  ::zetasql::ResolvedExprProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedExprProto* parent);

  // optional .zetasql.AnyResolvedExprProto expr = 3;
  bool has_expr() const;
  void clear_expr();
  static const int kExprFieldNumber = 3;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_expr() const;
  public:
  const ::zetasql::AnyResolvedExprProto& expr() const;
  ::zetasql::AnyResolvedExprProto* release_expr();
  ::zetasql::AnyResolvedExprProto* mutable_expr();
  void set_allocated_expr(::zetasql::AnyResolvedExprProto* expr);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedLetExprProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_expr();
  void clear_has_expr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto > assignment_list_;
  ::zetasql::ResolvedExprProto* parent_;
  ::zetasql::AnyResolvedExprProto* expr_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnyResolvedScanProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.AnyResolvedScanProto) */ {
 public:
  AnyResolvedScanProto();
  virtual ~AnyResolvedScanProto();

  AnyResolvedScanProto(const AnyResolvedScanProto& from);

  inline AnyResolvedScanProto& operator=(const AnyResolvedScanProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnyResolvedScanProto(AnyResolvedScanProto&& from) noexcept
    : AnyResolvedScanProto() {
    *this = ::std::move(from);
  }

  inline AnyResolvedScanProto& operator=(AnyResolvedScanProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnyResolvedScanProto& default_instance();

  enum NodeCase {
    kResolvedSingleRowScanNode = 19,
    kResolvedTableScanNode = 20,
    kResolvedJoinScanNode = 21,
    kResolvedArrayScanNode = 22,
    kResolvedFilterScanNode = 24,
    kResolvedSetOperationScanNode = 26,
    kResolvedOrderByScanNode = 27,
    kResolvedLimitOffsetScanNode = 28,
    kResolvedWithRefScanNode = 29,
    kResolvedAnalyticScanNode = 30,
    kResolvedSampleScanNode = 31,
    kResolvedProjectScanNode = 35,
    kResolvedWithScanNode = 51,
    kResolvedTvfscanNode = 81,
    kResolvedRelationArgumentScanNode = 89,
    kResolvedAggregateScanBaseNode = 111,
    kResolvedRecursiveRefScanNode = 147,
    kResolvedRecursiveScanNode = 148,
    kResolvedPivotScanNode = 161,
    kResolvedUnpivotScanNode = 172,
    kResolvedGroupRowsScanNode = 176,
    NODE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnyResolvedScanProto* internal_default_instance() {
    return reinterpret_cast<const AnyResolvedScanProto*>(
               &_AnyResolvedScanProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(AnyResolvedScanProto* other);
  friend void swap(AnyResolvedScanProto& a, AnyResolvedScanProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnyResolvedScanProto* New() const final {
    return CreateMaybeMessage<AnyResolvedScanProto>(NULL);
  }

  AnyResolvedScanProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnyResolvedScanProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyResolvedScanProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedSingleRowScanProto resolved_single_row_scan_node = 19;
  bool has_resolved_single_row_scan_node() const;
  void clear_resolved_single_row_scan_node();
  static const int kResolvedSingleRowScanNodeFieldNumber = 19;
  private:
  const ::zetasql::ResolvedSingleRowScanProto& _internal_resolved_single_row_scan_node() const;
  public:
  const ::zetasql::ResolvedSingleRowScanProto& resolved_single_row_scan_node() const;
  ::zetasql::ResolvedSingleRowScanProto* release_resolved_single_row_scan_node();
  ::zetasql::ResolvedSingleRowScanProto* mutable_resolved_single_row_scan_node();
  void set_allocated_resolved_single_row_scan_node(::zetasql::ResolvedSingleRowScanProto* resolved_single_row_scan_node);

  // optional .zetasql.ResolvedTableScanProto resolved_table_scan_node = 20;
  bool has_resolved_table_scan_node() const;
  void clear_resolved_table_scan_node();
  static const int kResolvedTableScanNodeFieldNumber = 20;
  private:
  const ::zetasql::ResolvedTableScanProto& _internal_resolved_table_scan_node() const;
  public:
  const ::zetasql::ResolvedTableScanProto& resolved_table_scan_node() const;
  ::zetasql::ResolvedTableScanProto* release_resolved_table_scan_node();
  ::zetasql::ResolvedTableScanProto* mutable_resolved_table_scan_node();
  void set_allocated_resolved_table_scan_node(::zetasql::ResolvedTableScanProto* resolved_table_scan_node);

  // optional .zetasql.ResolvedJoinScanProto resolved_join_scan_node = 21;
  bool has_resolved_join_scan_node() const;
  void clear_resolved_join_scan_node();
  static const int kResolvedJoinScanNodeFieldNumber = 21;
  private:
  const ::zetasql::ResolvedJoinScanProto& _internal_resolved_join_scan_node() const;
  public:
  const ::zetasql::ResolvedJoinScanProto& resolved_join_scan_node() const;
  ::zetasql::ResolvedJoinScanProto* release_resolved_join_scan_node();
  ::zetasql::ResolvedJoinScanProto* mutable_resolved_join_scan_node();
  void set_allocated_resolved_join_scan_node(::zetasql::ResolvedJoinScanProto* resolved_join_scan_node);

  // optional .zetasql.ResolvedArrayScanProto resolved_array_scan_node = 22;
  bool has_resolved_array_scan_node() const;
  void clear_resolved_array_scan_node();
  static const int kResolvedArrayScanNodeFieldNumber = 22;
  private:
  const ::zetasql::ResolvedArrayScanProto& _internal_resolved_array_scan_node() const;
  public:
  const ::zetasql::ResolvedArrayScanProto& resolved_array_scan_node() const;
  ::zetasql::ResolvedArrayScanProto* release_resolved_array_scan_node();
  ::zetasql::ResolvedArrayScanProto* mutable_resolved_array_scan_node();
  void set_allocated_resolved_array_scan_node(::zetasql::ResolvedArrayScanProto* resolved_array_scan_node);

  // optional .zetasql.ResolvedFilterScanProto resolved_filter_scan_node = 24;
  bool has_resolved_filter_scan_node() const;
  void clear_resolved_filter_scan_node();
  static const int kResolvedFilterScanNodeFieldNumber = 24;
  private:
  const ::zetasql::ResolvedFilterScanProto& _internal_resolved_filter_scan_node() const;
  public:
  const ::zetasql::ResolvedFilterScanProto& resolved_filter_scan_node() const;
  ::zetasql::ResolvedFilterScanProto* release_resolved_filter_scan_node();
  ::zetasql::ResolvedFilterScanProto* mutable_resolved_filter_scan_node();
  void set_allocated_resolved_filter_scan_node(::zetasql::ResolvedFilterScanProto* resolved_filter_scan_node);

  // optional .zetasql.ResolvedSetOperationScanProto resolved_set_operation_scan_node = 26;
  bool has_resolved_set_operation_scan_node() const;
  void clear_resolved_set_operation_scan_node();
  static const int kResolvedSetOperationScanNodeFieldNumber = 26;
  private:
  const ::zetasql::ResolvedSetOperationScanProto& _internal_resolved_set_operation_scan_node() const;
  public:
  const ::zetasql::ResolvedSetOperationScanProto& resolved_set_operation_scan_node() const;
  ::zetasql::ResolvedSetOperationScanProto* release_resolved_set_operation_scan_node();
  ::zetasql::ResolvedSetOperationScanProto* mutable_resolved_set_operation_scan_node();
  void set_allocated_resolved_set_operation_scan_node(::zetasql::ResolvedSetOperationScanProto* resolved_set_operation_scan_node);

  // optional .zetasql.ResolvedOrderByScanProto resolved_order_by_scan_node = 27;
  bool has_resolved_order_by_scan_node() const;
  void clear_resolved_order_by_scan_node();
  static const int kResolvedOrderByScanNodeFieldNumber = 27;
  private:
  const ::zetasql::ResolvedOrderByScanProto& _internal_resolved_order_by_scan_node() const;
  public:
  const ::zetasql::ResolvedOrderByScanProto& resolved_order_by_scan_node() const;
  ::zetasql::ResolvedOrderByScanProto* release_resolved_order_by_scan_node();
  ::zetasql::ResolvedOrderByScanProto* mutable_resolved_order_by_scan_node();
  void set_allocated_resolved_order_by_scan_node(::zetasql::ResolvedOrderByScanProto* resolved_order_by_scan_node);

  // optional .zetasql.ResolvedLimitOffsetScanProto resolved_limit_offset_scan_node = 28;
  bool has_resolved_limit_offset_scan_node() const;
  void clear_resolved_limit_offset_scan_node();
  static const int kResolvedLimitOffsetScanNodeFieldNumber = 28;
  private:
  const ::zetasql::ResolvedLimitOffsetScanProto& _internal_resolved_limit_offset_scan_node() const;
  public:
  const ::zetasql::ResolvedLimitOffsetScanProto& resolved_limit_offset_scan_node() const;
  ::zetasql::ResolvedLimitOffsetScanProto* release_resolved_limit_offset_scan_node();
  ::zetasql::ResolvedLimitOffsetScanProto* mutable_resolved_limit_offset_scan_node();
  void set_allocated_resolved_limit_offset_scan_node(::zetasql::ResolvedLimitOffsetScanProto* resolved_limit_offset_scan_node);

  // optional .zetasql.ResolvedWithRefScanProto resolved_with_ref_scan_node = 29;
  bool has_resolved_with_ref_scan_node() const;
  void clear_resolved_with_ref_scan_node();
  static const int kResolvedWithRefScanNodeFieldNumber = 29;
  private:
  const ::zetasql::ResolvedWithRefScanProto& _internal_resolved_with_ref_scan_node() const;
  public:
  const ::zetasql::ResolvedWithRefScanProto& resolved_with_ref_scan_node() const;
  ::zetasql::ResolvedWithRefScanProto* release_resolved_with_ref_scan_node();
  ::zetasql::ResolvedWithRefScanProto* mutable_resolved_with_ref_scan_node();
  void set_allocated_resolved_with_ref_scan_node(::zetasql::ResolvedWithRefScanProto* resolved_with_ref_scan_node);

  // optional .zetasql.ResolvedAnalyticScanProto resolved_analytic_scan_node = 30;
  bool has_resolved_analytic_scan_node() const;
  void clear_resolved_analytic_scan_node();
  static const int kResolvedAnalyticScanNodeFieldNumber = 30;
  private:
  const ::zetasql::ResolvedAnalyticScanProto& _internal_resolved_analytic_scan_node() const;
  public:
  const ::zetasql::ResolvedAnalyticScanProto& resolved_analytic_scan_node() const;
  ::zetasql::ResolvedAnalyticScanProto* release_resolved_analytic_scan_node();
  ::zetasql::ResolvedAnalyticScanProto* mutable_resolved_analytic_scan_node();
  void set_allocated_resolved_analytic_scan_node(::zetasql::ResolvedAnalyticScanProto* resolved_analytic_scan_node);

  // optional .zetasql.ResolvedSampleScanProto resolved_sample_scan_node = 31;
  bool has_resolved_sample_scan_node() const;
  void clear_resolved_sample_scan_node();
  static const int kResolvedSampleScanNodeFieldNumber = 31;
  private:
  const ::zetasql::ResolvedSampleScanProto& _internal_resolved_sample_scan_node() const;
  public:
  const ::zetasql::ResolvedSampleScanProto& resolved_sample_scan_node() const;
  ::zetasql::ResolvedSampleScanProto* release_resolved_sample_scan_node();
  ::zetasql::ResolvedSampleScanProto* mutable_resolved_sample_scan_node();
  void set_allocated_resolved_sample_scan_node(::zetasql::ResolvedSampleScanProto* resolved_sample_scan_node);

  // optional .zetasql.ResolvedProjectScanProto resolved_project_scan_node = 35;
  bool has_resolved_project_scan_node() const;
  void clear_resolved_project_scan_node();
  static const int kResolvedProjectScanNodeFieldNumber = 35;
  private:
  const ::zetasql::ResolvedProjectScanProto& _internal_resolved_project_scan_node() const;
  public:
  const ::zetasql::ResolvedProjectScanProto& resolved_project_scan_node() const;
  ::zetasql::ResolvedProjectScanProto* release_resolved_project_scan_node();
  ::zetasql::ResolvedProjectScanProto* mutable_resolved_project_scan_node();
  void set_allocated_resolved_project_scan_node(::zetasql::ResolvedProjectScanProto* resolved_project_scan_node);

  // optional .zetasql.ResolvedWithScanProto resolved_with_scan_node = 51;
  bool has_resolved_with_scan_node() const;
  void clear_resolved_with_scan_node();
  static const int kResolvedWithScanNodeFieldNumber = 51;
  private:
  const ::zetasql::ResolvedWithScanProto& _internal_resolved_with_scan_node() const;
  public:
  const ::zetasql::ResolvedWithScanProto& resolved_with_scan_node() const;
  ::zetasql::ResolvedWithScanProto* release_resolved_with_scan_node();
  ::zetasql::ResolvedWithScanProto* mutable_resolved_with_scan_node();
  void set_allocated_resolved_with_scan_node(::zetasql::ResolvedWithScanProto* resolved_with_scan_node);

  // optional .zetasql.ResolvedTVFScanProto resolved_tvfscan_node = 81;
  bool has_resolved_tvfscan_node() const;
  void clear_resolved_tvfscan_node();
  static const int kResolvedTvfscanNodeFieldNumber = 81;
  private:
  const ::zetasql::ResolvedTVFScanProto& _internal_resolved_tvfscan_node() const;
  public:
  const ::zetasql::ResolvedTVFScanProto& resolved_tvfscan_node() const;
  ::zetasql::ResolvedTVFScanProto* release_resolved_tvfscan_node();
  ::zetasql::ResolvedTVFScanProto* mutable_resolved_tvfscan_node();
  void set_allocated_resolved_tvfscan_node(::zetasql::ResolvedTVFScanProto* resolved_tvfscan_node);

  // optional .zetasql.ResolvedRelationArgumentScanProto resolved_relation_argument_scan_node = 89;
  bool has_resolved_relation_argument_scan_node() const;
  void clear_resolved_relation_argument_scan_node();
  static const int kResolvedRelationArgumentScanNodeFieldNumber = 89;
  private:
  const ::zetasql::ResolvedRelationArgumentScanProto& _internal_resolved_relation_argument_scan_node() const;
  public:
  const ::zetasql::ResolvedRelationArgumentScanProto& resolved_relation_argument_scan_node() const;
  ::zetasql::ResolvedRelationArgumentScanProto* release_resolved_relation_argument_scan_node();
  ::zetasql::ResolvedRelationArgumentScanProto* mutable_resolved_relation_argument_scan_node();
  void set_allocated_resolved_relation_argument_scan_node(::zetasql::ResolvedRelationArgumentScanProto* resolved_relation_argument_scan_node);

  // optional .zetasql.AnyResolvedAggregateScanBaseProto resolved_aggregate_scan_base_node = 111;
  bool has_resolved_aggregate_scan_base_node() const;
  void clear_resolved_aggregate_scan_base_node();
  static const int kResolvedAggregateScanBaseNodeFieldNumber = 111;
  private:
  const ::zetasql::AnyResolvedAggregateScanBaseProto& _internal_resolved_aggregate_scan_base_node() const;
  public:
  const ::zetasql::AnyResolvedAggregateScanBaseProto& resolved_aggregate_scan_base_node() const;
  ::zetasql::AnyResolvedAggregateScanBaseProto* release_resolved_aggregate_scan_base_node();
  ::zetasql::AnyResolvedAggregateScanBaseProto* mutable_resolved_aggregate_scan_base_node();
  void set_allocated_resolved_aggregate_scan_base_node(::zetasql::AnyResolvedAggregateScanBaseProto* resolved_aggregate_scan_base_node);

  // optional .zetasql.ResolvedRecursiveRefScanProto resolved_recursive_ref_scan_node = 147;
  bool has_resolved_recursive_ref_scan_node() const;
  void clear_resolved_recursive_ref_scan_node();
  static const int kResolvedRecursiveRefScanNodeFieldNumber = 147;
  private:
  const ::zetasql::ResolvedRecursiveRefScanProto& _internal_resolved_recursive_ref_scan_node() const;
  public:
  const ::zetasql::ResolvedRecursiveRefScanProto& resolved_recursive_ref_scan_node() const;
  ::zetasql::ResolvedRecursiveRefScanProto* release_resolved_recursive_ref_scan_node();
  ::zetasql::ResolvedRecursiveRefScanProto* mutable_resolved_recursive_ref_scan_node();
  void set_allocated_resolved_recursive_ref_scan_node(::zetasql::ResolvedRecursiveRefScanProto* resolved_recursive_ref_scan_node);

  // optional .zetasql.ResolvedRecursiveScanProto resolved_recursive_scan_node = 148;
  bool has_resolved_recursive_scan_node() const;
  void clear_resolved_recursive_scan_node();
  static const int kResolvedRecursiveScanNodeFieldNumber = 148;
  private:
  const ::zetasql::ResolvedRecursiveScanProto& _internal_resolved_recursive_scan_node() const;
  public:
  const ::zetasql::ResolvedRecursiveScanProto& resolved_recursive_scan_node() const;
  ::zetasql::ResolvedRecursiveScanProto* release_resolved_recursive_scan_node();
  ::zetasql::ResolvedRecursiveScanProto* mutable_resolved_recursive_scan_node();
  void set_allocated_resolved_recursive_scan_node(::zetasql::ResolvedRecursiveScanProto* resolved_recursive_scan_node);

  // optional .zetasql.ResolvedPivotScanProto resolved_pivot_scan_node = 161;
  bool has_resolved_pivot_scan_node() const;
  void clear_resolved_pivot_scan_node();
  static const int kResolvedPivotScanNodeFieldNumber = 161;
  private:
  const ::zetasql::ResolvedPivotScanProto& _internal_resolved_pivot_scan_node() const;
  public:
  const ::zetasql::ResolvedPivotScanProto& resolved_pivot_scan_node() const;
  ::zetasql::ResolvedPivotScanProto* release_resolved_pivot_scan_node();
  ::zetasql::ResolvedPivotScanProto* mutable_resolved_pivot_scan_node();
  void set_allocated_resolved_pivot_scan_node(::zetasql::ResolvedPivotScanProto* resolved_pivot_scan_node);

  // optional .zetasql.ResolvedUnpivotScanProto resolved_unpivot_scan_node = 172;
  bool has_resolved_unpivot_scan_node() const;
  void clear_resolved_unpivot_scan_node();
  static const int kResolvedUnpivotScanNodeFieldNumber = 172;
  private:
  const ::zetasql::ResolvedUnpivotScanProto& _internal_resolved_unpivot_scan_node() const;
  public:
  const ::zetasql::ResolvedUnpivotScanProto& resolved_unpivot_scan_node() const;
  ::zetasql::ResolvedUnpivotScanProto* release_resolved_unpivot_scan_node();
  ::zetasql::ResolvedUnpivotScanProto* mutable_resolved_unpivot_scan_node();
  void set_allocated_resolved_unpivot_scan_node(::zetasql::ResolvedUnpivotScanProto* resolved_unpivot_scan_node);

  // optional .zetasql.ResolvedGroupRowsScanProto resolved_group_rows_scan_node = 176;
  bool has_resolved_group_rows_scan_node() const;
  void clear_resolved_group_rows_scan_node();
  static const int kResolvedGroupRowsScanNodeFieldNumber = 176;
  private:
  const ::zetasql::ResolvedGroupRowsScanProto& _internal_resolved_group_rows_scan_node() const;
  public:
  const ::zetasql::ResolvedGroupRowsScanProto& resolved_group_rows_scan_node() const;
  ::zetasql::ResolvedGroupRowsScanProto* release_resolved_group_rows_scan_node();
  ::zetasql::ResolvedGroupRowsScanProto* mutable_resolved_group_rows_scan_node();
  void set_allocated_resolved_group_rows_scan_node(::zetasql::ResolvedGroupRowsScanProto* resolved_group_rows_scan_node);

  void clear_node();
  NodeCase node_case() const;
  // @@protoc_insertion_point(class_scope:zetasql.AnyResolvedScanProto)
 private:
  void set_has_resolved_single_row_scan_node();
  void set_has_resolved_table_scan_node();
  void set_has_resolved_join_scan_node();
  void set_has_resolved_array_scan_node();
  void set_has_resolved_filter_scan_node();
  void set_has_resolved_set_operation_scan_node();
  void set_has_resolved_order_by_scan_node();
  void set_has_resolved_limit_offset_scan_node();
  void set_has_resolved_with_ref_scan_node();
  void set_has_resolved_analytic_scan_node();
  void set_has_resolved_sample_scan_node();
  void set_has_resolved_project_scan_node();
  void set_has_resolved_with_scan_node();
  void set_has_resolved_tvfscan_node();
  void set_has_resolved_relation_argument_scan_node();
  void set_has_resolved_aggregate_scan_base_node();
  void set_has_resolved_recursive_ref_scan_node();
  void set_has_resolved_recursive_scan_node();
  void set_has_resolved_pivot_scan_node();
  void set_has_resolved_unpivot_scan_node();
  void set_has_resolved_group_rows_scan_node();

  inline bool has_node() const;
  inline void clear_has_node();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union NodeUnion {
    NodeUnion() {}
    ::zetasql::ResolvedSingleRowScanProto* resolved_single_row_scan_node_;
    ::zetasql::ResolvedTableScanProto* resolved_table_scan_node_;
    ::zetasql::ResolvedJoinScanProto* resolved_join_scan_node_;
    ::zetasql::ResolvedArrayScanProto* resolved_array_scan_node_;
    ::zetasql::ResolvedFilterScanProto* resolved_filter_scan_node_;
    ::zetasql::ResolvedSetOperationScanProto* resolved_set_operation_scan_node_;
    ::zetasql::ResolvedOrderByScanProto* resolved_order_by_scan_node_;
    ::zetasql::ResolvedLimitOffsetScanProto* resolved_limit_offset_scan_node_;
    ::zetasql::ResolvedWithRefScanProto* resolved_with_ref_scan_node_;
    ::zetasql::ResolvedAnalyticScanProto* resolved_analytic_scan_node_;
    ::zetasql::ResolvedSampleScanProto* resolved_sample_scan_node_;
    ::zetasql::ResolvedProjectScanProto* resolved_project_scan_node_;
    ::zetasql::ResolvedWithScanProto* resolved_with_scan_node_;
    ::zetasql::ResolvedTVFScanProto* resolved_tvfscan_node_;
    ::zetasql::ResolvedRelationArgumentScanProto* resolved_relation_argument_scan_node_;
    ::zetasql::AnyResolvedAggregateScanBaseProto* resolved_aggregate_scan_base_node_;
    ::zetasql::ResolvedRecursiveRefScanProto* resolved_recursive_ref_scan_node_;
    ::zetasql::ResolvedRecursiveScanProto* resolved_recursive_scan_node_;
    ::zetasql::ResolvedPivotScanProto* resolved_pivot_scan_node_;
    ::zetasql::ResolvedUnpivotScanProto* resolved_unpivot_scan_node_;
    ::zetasql::ResolvedGroupRowsScanProto* resolved_group_rows_scan_node_;
  } node_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedScanProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedScanProto) */ {
 public:
  ResolvedScanProto();
  virtual ~ResolvedScanProto();

  ResolvedScanProto(const ResolvedScanProto& from);

  inline ResolvedScanProto& operator=(const ResolvedScanProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedScanProto(ResolvedScanProto&& from) noexcept
    : ResolvedScanProto() {
    *this = ::std::move(from);
  }

  inline ResolvedScanProto& operator=(ResolvedScanProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedScanProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedScanProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedScanProto*>(
               &_ResolvedScanProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(ResolvedScanProto* other);
  friend void swap(ResolvedScanProto& a, ResolvedScanProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedScanProto* New() const final {
    return CreateMaybeMessage<ResolvedScanProto>(NULL);
  }

  ResolvedScanProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedScanProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedScanProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedColumnProto column_list = 2;
  int column_list_size() const;
  void clear_column_list();
  static const int kColumnListFieldNumber = 2;
  ::zetasql::ResolvedColumnProto* mutable_column_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >*
      mutable_column_list();
  const ::zetasql::ResolvedColumnProto& column_list(int index) const;
  ::zetasql::ResolvedColumnProto* add_column_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >&
      column_list() const;

  // repeated .zetasql.ResolvedOptionProto hint_list = 3;
  int hint_list_size() const;
  void clear_hint_list();
  static const int kHintListFieldNumber = 3;
  ::zetasql::ResolvedOptionProto* mutable_hint_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_hint_list();
  const ::zetasql::ResolvedOptionProto& hint_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_hint_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      hint_list() const;

  // optional .zetasql.ResolvedNodeProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedNodeProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedNodeProto& parent() const;
  ::zetasql::ResolvedNodeProto* release_parent();
  ::zetasql::ResolvedNodeProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedNodeProto* parent);

  // optional bool is_ordered = 4;
  bool has_is_ordered() const;
  void clear_is_ordered();
  static const int kIsOrderedFieldNumber = 4;
  bool is_ordered() const;
  void set_is_ordered(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedScanProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_is_ordered();
  void clear_has_is_ordered();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto > column_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > hint_list_;
  ::zetasql::ResolvedNodeProto* parent_;
  bool is_ordered_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedModelProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedModelProto) */ {
 public:
  ResolvedModelProto();
  virtual ~ResolvedModelProto();

  ResolvedModelProto(const ResolvedModelProto& from);

  inline ResolvedModelProto& operator=(const ResolvedModelProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedModelProto(ResolvedModelProto&& from) noexcept
    : ResolvedModelProto() {
    *this = ::std::move(from);
  }

  inline ResolvedModelProto& operator=(ResolvedModelProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedModelProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedModelProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedModelProto*>(
               &_ResolvedModelProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(ResolvedModelProto* other);
  friend void swap(ResolvedModelProto& a, ResolvedModelProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedModelProto* New() const final {
    return CreateMaybeMessage<ResolvedModelProto>(NULL);
  }

  ResolvedModelProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedModelProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedModelProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.ModelRefProto model = 2;
  bool has_model() const;
  void clear_model();
  static const int kModelFieldNumber = 2;
  private:
  const ::zetasql::ModelRefProto& _internal_model() const;
  public:
  const ::zetasql::ModelRefProto& model() const;
  ::zetasql::ModelRefProto* release_model();
  ::zetasql::ModelRefProto* mutable_model();
  void set_allocated_model(::zetasql::ModelRefProto* model);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedModelProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_model();
  void clear_has_model();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::ModelRefProto* model_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedConnectionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedConnectionProto) */ {
 public:
  ResolvedConnectionProto();
  virtual ~ResolvedConnectionProto();

  ResolvedConnectionProto(const ResolvedConnectionProto& from);

  inline ResolvedConnectionProto& operator=(const ResolvedConnectionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedConnectionProto(ResolvedConnectionProto&& from) noexcept
    : ResolvedConnectionProto() {
    *this = ::std::move(from);
  }

  inline ResolvedConnectionProto& operator=(ResolvedConnectionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedConnectionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedConnectionProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedConnectionProto*>(
               &_ResolvedConnectionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(ResolvedConnectionProto* other);
  friend void swap(ResolvedConnectionProto& a, ResolvedConnectionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedConnectionProto* New() const final {
    return CreateMaybeMessage<ResolvedConnectionProto>(NULL);
  }

  ResolvedConnectionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedConnectionProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedConnectionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.ConnectionRefProto connection = 2;
  bool has_connection() const;
  void clear_connection();
  static const int kConnectionFieldNumber = 2;
  private:
  const ::zetasql::ConnectionRefProto& _internal_connection() const;
  public:
  const ::zetasql::ConnectionRefProto& connection() const;
  ::zetasql::ConnectionRefProto* release_connection();
  ::zetasql::ConnectionRefProto* mutable_connection();
  void set_allocated_connection(::zetasql::ConnectionRefProto* connection);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedConnectionProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_connection();
  void clear_has_connection();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::ConnectionRefProto* connection_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedDescriptorProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedDescriptorProto) */ {
 public:
  ResolvedDescriptorProto();
  virtual ~ResolvedDescriptorProto();

  ResolvedDescriptorProto(const ResolvedDescriptorProto& from);

  inline ResolvedDescriptorProto& operator=(const ResolvedDescriptorProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedDescriptorProto(ResolvedDescriptorProto&& from) noexcept
    : ResolvedDescriptorProto() {
    *this = ::std::move(from);
  }

  inline ResolvedDescriptorProto& operator=(ResolvedDescriptorProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedDescriptorProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedDescriptorProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedDescriptorProto*>(
               &_ResolvedDescriptorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(ResolvedDescriptorProto* other);
  friend void swap(ResolvedDescriptorProto& a, ResolvedDescriptorProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedDescriptorProto* New() const final {
    return CreateMaybeMessage<ResolvedDescriptorProto>(NULL);
  }

  ResolvedDescriptorProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedDescriptorProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedDescriptorProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedColumnProto descriptor_column_list = 2;
  int descriptor_column_list_size() const;
  void clear_descriptor_column_list();
  static const int kDescriptorColumnListFieldNumber = 2;
  ::zetasql::ResolvedColumnProto* mutable_descriptor_column_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >*
      mutable_descriptor_column_list();
  const ::zetasql::ResolvedColumnProto& descriptor_column_list(int index) const;
  ::zetasql::ResolvedColumnProto* add_descriptor_column_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >&
      descriptor_column_list() const;

  // repeated string descriptor_column_name_list = 3;
  int descriptor_column_name_list_size() const;
  void clear_descriptor_column_name_list();
  static const int kDescriptorColumnNameListFieldNumber = 3;
  const ::std::string& descriptor_column_name_list(int index) const;
  ::std::string* mutable_descriptor_column_name_list(int index);
  void set_descriptor_column_name_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_descriptor_column_name_list(int index, ::std::string&& value);
  #endif
  void set_descriptor_column_name_list(int index, const char* value);
  void set_descriptor_column_name_list(int index, const char* value, size_t size);
  ::std::string* add_descriptor_column_name_list();
  void add_descriptor_column_name_list(const ::std::string& value);
  #if LANG_CXX11
  void add_descriptor_column_name_list(::std::string&& value);
  #endif
  void add_descriptor_column_name_list(const char* value);
  void add_descriptor_column_name_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& descriptor_column_name_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_descriptor_column_name_list();

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedDescriptorProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto > descriptor_column_list_;
  ::google::protobuf::RepeatedPtrField< ::std::string> descriptor_column_name_list_;
  ::zetasql::ResolvedArgumentProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedSingleRowScanProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedSingleRowScanProto) */ {
 public:
  ResolvedSingleRowScanProto();
  virtual ~ResolvedSingleRowScanProto();

  ResolvedSingleRowScanProto(const ResolvedSingleRowScanProto& from);

  inline ResolvedSingleRowScanProto& operator=(const ResolvedSingleRowScanProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedSingleRowScanProto(ResolvedSingleRowScanProto&& from) noexcept
    : ResolvedSingleRowScanProto() {
    *this = ::std::move(from);
  }

  inline ResolvedSingleRowScanProto& operator=(ResolvedSingleRowScanProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedSingleRowScanProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedSingleRowScanProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedSingleRowScanProto*>(
               &_ResolvedSingleRowScanProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(ResolvedSingleRowScanProto* other);
  friend void swap(ResolvedSingleRowScanProto& a, ResolvedSingleRowScanProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedSingleRowScanProto* New() const final {
    return CreateMaybeMessage<ResolvedSingleRowScanProto>(NULL);
  }

  ResolvedSingleRowScanProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedSingleRowScanProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedSingleRowScanProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedScanProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedScanProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedScanProto& parent() const;
  ::zetasql::ResolvedScanProto* release_parent();
  ::zetasql::ResolvedScanProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedScanProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedSingleRowScanProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedScanProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedTableScanProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedTableScanProto) */ {
 public:
  ResolvedTableScanProto();
  virtual ~ResolvedTableScanProto();

  ResolvedTableScanProto(const ResolvedTableScanProto& from);

  inline ResolvedTableScanProto& operator=(const ResolvedTableScanProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedTableScanProto(ResolvedTableScanProto&& from) noexcept
    : ResolvedTableScanProto() {
    *this = ::std::move(from);
  }

  inline ResolvedTableScanProto& operator=(ResolvedTableScanProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedTableScanProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedTableScanProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedTableScanProto*>(
               &_ResolvedTableScanProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(ResolvedTableScanProto* other);
  friend void swap(ResolvedTableScanProto& a, ResolvedTableScanProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedTableScanProto* New() const final {
    return CreateMaybeMessage<ResolvedTableScanProto>(NULL);
  }

  ResolvedTableScanProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedTableScanProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedTableScanProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 column_index_list = 4;
  int column_index_list_size() const;
  void clear_column_index_list();
  static const int kColumnIndexListFieldNumber = 4;
  ::google::protobuf::int64 column_index_list(int index) const;
  void set_column_index_list(int index, ::google::protobuf::int64 value);
  void add_column_index_list(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      column_index_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_column_index_list();

  // optional string alias = 5;
  bool has_alias() const;
  void clear_alias();
  static const int kAliasFieldNumber = 5;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // optional .zetasql.ResolvedScanProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedScanProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedScanProto& parent() const;
  ::zetasql::ResolvedScanProto* release_parent();
  ::zetasql::ResolvedScanProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedScanProto* parent);

  // optional .zetasql.TableRefProto table = 2;
  bool has_table() const;
  void clear_table();
  static const int kTableFieldNumber = 2;
  private:
  const ::zetasql::TableRefProto& _internal_table() const;
  public:
  const ::zetasql::TableRefProto& table() const;
  ::zetasql::TableRefProto* release_table();
  ::zetasql::TableRefProto* mutable_table();
  void set_allocated_table(::zetasql::TableRefProto* table);

  // optional .zetasql.AnyResolvedExprProto for_system_time_expr = 3;
  bool has_for_system_time_expr() const;
  void clear_for_system_time_expr();
  static const int kForSystemTimeExprFieldNumber = 3;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_for_system_time_expr() const;
  public:
  const ::zetasql::AnyResolvedExprProto& for_system_time_expr() const;
  ::zetasql::AnyResolvedExprProto* release_for_system_time_expr();
  ::zetasql::AnyResolvedExprProto* mutable_for_system_time_expr();
  void set_allocated_for_system_time_expr(::zetasql::AnyResolvedExprProto* for_system_time_expr);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedTableScanProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_table();
  void clear_has_table();
  void set_has_for_system_time_expr();
  void clear_has_for_system_time_expr();
  void set_has_alias();
  void clear_has_alias();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > column_index_list_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::zetasql::ResolvedScanProto* parent_;
  ::zetasql::TableRefProto* table_;
  ::zetasql::AnyResolvedExprProto* for_system_time_expr_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedJoinScanProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedJoinScanProto) */ {
 public:
  ResolvedJoinScanProto();
  virtual ~ResolvedJoinScanProto();

  ResolvedJoinScanProto(const ResolvedJoinScanProto& from);

  inline ResolvedJoinScanProto& operator=(const ResolvedJoinScanProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedJoinScanProto(ResolvedJoinScanProto&& from) noexcept
    : ResolvedJoinScanProto() {
    *this = ::std::move(from);
  }

  inline ResolvedJoinScanProto& operator=(ResolvedJoinScanProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedJoinScanProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedJoinScanProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedJoinScanProto*>(
               &_ResolvedJoinScanProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(ResolvedJoinScanProto* other);
  friend void swap(ResolvedJoinScanProto& a, ResolvedJoinScanProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedJoinScanProto* New() const final {
    return CreateMaybeMessage<ResolvedJoinScanProto>(NULL);
  }

  ResolvedJoinScanProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedJoinScanProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedJoinScanProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedScanProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedScanProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedScanProto& parent() const;
  ::zetasql::ResolvedScanProto* release_parent();
  ::zetasql::ResolvedScanProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedScanProto* parent);

  // optional .zetasql.AnyResolvedScanProto left_scan = 3;
  bool has_left_scan() const;
  void clear_left_scan();
  static const int kLeftScanFieldNumber = 3;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_left_scan() const;
  public:
  const ::zetasql::AnyResolvedScanProto& left_scan() const;
  ::zetasql::AnyResolvedScanProto* release_left_scan();
  ::zetasql::AnyResolvedScanProto* mutable_left_scan();
  void set_allocated_left_scan(::zetasql::AnyResolvedScanProto* left_scan);

  // optional .zetasql.AnyResolvedScanProto right_scan = 4;
  bool has_right_scan() const;
  void clear_right_scan();
  static const int kRightScanFieldNumber = 4;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_right_scan() const;
  public:
  const ::zetasql::AnyResolvedScanProto& right_scan() const;
  ::zetasql::AnyResolvedScanProto* release_right_scan();
  ::zetasql::AnyResolvedScanProto* mutable_right_scan();
  void set_allocated_right_scan(::zetasql::AnyResolvedScanProto* right_scan);

  // optional .zetasql.AnyResolvedExprProto join_expr = 5;
  bool has_join_expr() const;
  void clear_join_expr();
  static const int kJoinExprFieldNumber = 5;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_join_expr() const;
  public:
  const ::zetasql::AnyResolvedExprProto& join_expr() const;
  ::zetasql::AnyResolvedExprProto* release_join_expr();
  ::zetasql::AnyResolvedExprProto* mutable_join_expr();
  void set_allocated_join_expr(::zetasql::AnyResolvedExprProto* join_expr);

  // optional .zetasql.ResolvedJoinScanEnums.JoinType join_type = 2;
  bool has_join_type() const;
  void clear_join_type();
  static const int kJoinTypeFieldNumber = 2;
  ::zetasql::ResolvedJoinScanEnums_JoinType join_type() const;
  void set_join_type(::zetasql::ResolvedJoinScanEnums_JoinType value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedJoinScanProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_join_type();
  void clear_has_join_type();
  void set_has_left_scan();
  void clear_has_left_scan();
  void set_has_right_scan();
  void clear_has_right_scan();
  void set_has_join_expr();
  void clear_has_join_expr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedScanProto* parent_;
  ::zetasql::AnyResolvedScanProto* left_scan_;
  ::zetasql::AnyResolvedScanProto* right_scan_;
  ::zetasql::AnyResolvedExprProto* join_expr_;
  int join_type_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedArrayScanProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedArrayScanProto) */ {
 public:
  ResolvedArrayScanProto();
  virtual ~ResolvedArrayScanProto();

  ResolvedArrayScanProto(const ResolvedArrayScanProto& from);

  inline ResolvedArrayScanProto& operator=(const ResolvedArrayScanProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedArrayScanProto(ResolvedArrayScanProto&& from) noexcept
    : ResolvedArrayScanProto() {
    *this = ::std::move(from);
  }

  inline ResolvedArrayScanProto& operator=(ResolvedArrayScanProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedArrayScanProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedArrayScanProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedArrayScanProto*>(
               &_ResolvedArrayScanProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(ResolvedArrayScanProto* other);
  friend void swap(ResolvedArrayScanProto& a, ResolvedArrayScanProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedArrayScanProto* New() const final {
    return CreateMaybeMessage<ResolvedArrayScanProto>(NULL);
  }

  ResolvedArrayScanProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedArrayScanProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedArrayScanProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedScanProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedScanProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedScanProto& parent() const;
  ::zetasql::ResolvedScanProto* release_parent();
  ::zetasql::ResolvedScanProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedScanProto* parent);

  // optional .zetasql.AnyResolvedScanProto input_scan = 2;
  bool has_input_scan() const;
  void clear_input_scan();
  static const int kInputScanFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_input_scan() const;
  public:
  const ::zetasql::AnyResolvedScanProto& input_scan() const;
  ::zetasql::AnyResolvedScanProto* release_input_scan();
  ::zetasql::AnyResolvedScanProto* mutable_input_scan();
  void set_allocated_input_scan(::zetasql::AnyResolvedScanProto* input_scan);

  // optional .zetasql.AnyResolvedExprProto array_expr = 3;
  bool has_array_expr() const;
  void clear_array_expr();
  static const int kArrayExprFieldNumber = 3;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_array_expr() const;
  public:
  const ::zetasql::AnyResolvedExprProto& array_expr() const;
  ::zetasql::AnyResolvedExprProto* release_array_expr();
  ::zetasql::AnyResolvedExprProto* mutable_array_expr();
  void set_allocated_array_expr(::zetasql::AnyResolvedExprProto* array_expr);

  // optional .zetasql.ResolvedColumnProto element_column = 4;
  bool has_element_column() const;
  void clear_element_column();
  static const int kElementColumnFieldNumber = 4;
  private:
  const ::zetasql::ResolvedColumnProto& _internal_element_column() const;
  public:
  const ::zetasql::ResolvedColumnProto& element_column() const;
  ::zetasql::ResolvedColumnProto* release_element_column();
  ::zetasql::ResolvedColumnProto* mutable_element_column();
  void set_allocated_element_column(::zetasql::ResolvedColumnProto* element_column);

  // optional .zetasql.ResolvedColumnHolderProto array_offset_column = 5;
  bool has_array_offset_column() const;
  void clear_array_offset_column();
  static const int kArrayOffsetColumnFieldNumber = 5;
  private:
  const ::zetasql::ResolvedColumnHolderProto& _internal_array_offset_column() const;
  public:
  const ::zetasql::ResolvedColumnHolderProto& array_offset_column() const;
  ::zetasql::ResolvedColumnHolderProto* release_array_offset_column();
  ::zetasql::ResolvedColumnHolderProto* mutable_array_offset_column();
  void set_allocated_array_offset_column(::zetasql::ResolvedColumnHolderProto* array_offset_column);

  // optional .zetasql.AnyResolvedExprProto join_expr = 6;
  bool has_join_expr() const;
  void clear_join_expr();
  static const int kJoinExprFieldNumber = 6;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_join_expr() const;
  public:
  const ::zetasql::AnyResolvedExprProto& join_expr() const;
  ::zetasql::AnyResolvedExprProto* release_join_expr();
  ::zetasql::AnyResolvedExprProto* mutable_join_expr();
  void set_allocated_join_expr(::zetasql::AnyResolvedExprProto* join_expr);

  // optional bool is_outer = 7;
  bool has_is_outer() const;
  void clear_is_outer();
  static const int kIsOuterFieldNumber = 7;
  bool is_outer() const;
  void set_is_outer(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedArrayScanProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_input_scan();
  void clear_has_input_scan();
  void set_has_array_expr();
  void clear_has_array_expr();
  void set_has_element_column();
  void clear_has_element_column();
  void set_has_array_offset_column();
  void clear_has_array_offset_column();
  void set_has_join_expr();
  void clear_has_join_expr();
  void set_has_is_outer();
  void clear_has_is_outer();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedScanProto* parent_;
  ::zetasql::AnyResolvedScanProto* input_scan_;
  ::zetasql::AnyResolvedExprProto* array_expr_;
  ::zetasql::ResolvedColumnProto* element_column_;
  ::zetasql::ResolvedColumnHolderProto* array_offset_column_;
  ::zetasql::AnyResolvedExprProto* join_expr_;
  bool is_outer_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedColumnHolderProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedColumnHolderProto) */ {
 public:
  ResolvedColumnHolderProto();
  virtual ~ResolvedColumnHolderProto();

  ResolvedColumnHolderProto(const ResolvedColumnHolderProto& from);

  inline ResolvedColumnHolderProto& operator=(const ResolvedColumnHolderProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedColumnHolderProto(ResolvedColumnHolderProto&& from) noexcept
    : ResolvedColumnHolderProto() {
    *this = ::std::move(from);
  }

  inline ResolvedColumnHolderProto& operator=(ResolvedColumnHolderProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedColumnHolderProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedColumnHolderProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedColumnHolderProto*>(
               &_ResolvedColumnHolderProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(ResolvedColumnHolderProto* other);
  friend void swap(ResolvedColumnHolderProto& a, ResolvedColumnHolderProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedColumnHolderProto* New() const final {
    return CreateMaybeMessage<ResolvedColumnHolderProto>(NULL);
  }

  ResolvedColumnHolderProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedColumnHolderProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedColumnHolderProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.ResolvedColumnProto column = 2;
  bool has_column() const;
  void clear_column();
  static const int kColumnFieldNumber = 2;
  private:
  const ::zetasql::ResolvedColumnProto& _internal_column() const;
  public:
  const ::zetasql::ResolvedColumnProto& column() const;
  ::zetasql::ResolvedColumnProto* release_column();
  ::zetasql::ResolvedColumnProto* mutable_column();
  void set_allocated_column(::zetasql::ResolvedColumnProto* column);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedColumnHolderProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_column();
  void clear_has_column();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::ResolvedColumnProto* column_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedFilterScanProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedFilterScanProto) */ {
 public:
  ResolvedFilterScanProto();
  virtual ~ResolvedFilterScanProto();

  ResolvedFilterScanProto(const ResolvedFilterScanProto& from);

  inline ResolvedFilterScanProto& operator=(const ResolvedFilterScanProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedFilterScanProto(ResolvedFilterScanProto&& from) noexcept
    : ResolvedFilterScanProto() {
    *this = ::std::move(from);
  }

  inline ResolvedFilterScanProto& operator=(ResolvedFilterScanProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedFilterScanProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedFilterScanProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedFilterScanProto*>(
               &_ResolvedFilterScanProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(ResolvedFilterScanProto* other);
  friend void swap(ResolvedFilterScanProto& a, ResolvedFilterScanProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedFilterScanProto* New() const final {
    return CreateMaybeMessage<ResolvedFilterScanProto>(NULL);
  }

  ResolvedFilterScanProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedFilterScanProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedFilterScanProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedScanProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedScanProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedScanProto& parent() const;
  ::zetasql::ResolvedScanProto* release_parent();
  ::zetasql::ResolvedScanProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedScanProto* parent);

  // optional .zetasql.AnyResolvedScanProto input_scan = 2;
  bool has_input_scan() const;
  void clear_input_scan();
  static const int kInputScanFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_input_scan() const;
  public:
  const ::zetasql::AnyResolvedScanProto& input_scan() const;
  ::zetasql::AnyResolvedScanProto* release_input_scan();
  ::zetasql::AnyResolvedScanProto* mutable_input_scan();
  void set_allocated_input_scan(::zetasql::AnyResolvedScanProto* input_scan);

  // optional .zetasql.AnyResolvedExprProto filter_expr = 3;
  bool has_filter_expr() const;
  void clear_filter_expr();
  static const int kFilterExprFieldNumber = 3;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_filter_expr() const;
  public:
  const ::zetasql::AnyResolvedExprProto& filter_expr() const;
  ::zetasql::AnyResolvedExprProto* release_filter_expr();
  ::zetasql::AnyResolvedExprProto* mutable_filter_expr();
  void set_allocated_filter_expr(::zetasql::AnyResolvedExprProto* filter_expr);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedFilterScanProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_input_scan();
  void clear_has_input_scan();
  void set_has_filter_expr();
  void clear_has_filter_expr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedScanProto* parent_;
  ::zetasql::AnyResolvedScanProto* input_scan_;
  ::zetasql::AnyResolvedExprProto* filter_expr_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedGroupingSetProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedGroupingSetProto) */ {
 public:
  ResolvedGroupingSetProto();
  virtual ~ResolvedGroupingSetProto();

  ResolvedGroupingSetProto(const ResolvedGroupingSetProto& from);

  inline ResolvedGroupingSetProto& operator=(const ResolvedGroupingSetProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedGroupingSetProto(ResolvedGroupingSetProto&& from) noexcept
    : ResolvedGroupingSetProto() {
    *this = ::std::move(from);
  }

  inline ResolvedGroupingSetProto& operator=(ResolvedGroupingSetProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedGroupingSetProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedGroupingSetProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedGroupingSetProto*>(
               &_ResolvedGroupingSetProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(ResolvedGroupingSetProto* other);
  friend void swap(ResolvedGroupingSetProto& a, ResolvedGroupingSetProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedGroupingSetProto* New() const final {
    return CreateMaybeMessage<ResolvedGroupingSetProto>(NULL);
  }

  ResolvedGroupingSetProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedGroupingSetProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedGroupingSetProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedColumnRefProto group_by_column_list = 2;
  int group_by_column_list_size() const;
  void clear_group_by_column_list();
  static const int kGroupByColumnListFieldNumber = 2;
  ::zetasql::ResolvedColumnRefProto* mutable_group_by_column_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >*
      mutable_group_by_column_list();
  const ::zetasql::ResolvedColumnRefProto& group_by_column_list(int index) const;
  ::zetasql::ResolvedColumnRefProto* add_group_by_column_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >&
      group_by_column_list() const;

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedGroupingSetProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto > group_by_column_list_;
  ::zetasql::ResolvedArgumentProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnyResolvedAggregateScanBaseProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.AnyResolvedAggregateScanBaseProto) */ {
 public:
  AnyResolvedAggregateScanBaseProto();
  virtual ~AnyResolvedAggregateScanBaseProto();

  AnyResolvedAggregateScanBaseProto(const AnyResolvedAggregateScanBaseProto& from);

  inline AnyResolvedAggregateScanBaseProto& operator=(const AnyResolvedAggregateScanBaseProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnyResolvedAggregateScanBaseProto(AnyResolvedAggregateScanBaseProto&& from) noexcept
    : AnyResolvedAggregateScanBaseProto() {
    *this = ::std::move(from);
  }

  inline AnyResolvedAggregateScanBaseProto& operator=(AnyResolvedAggregateScanBaseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnyResolvedAggregateScanBaseProto& default_instance();

  enum NodeCase {
    kResolvedAggregateScanNode = 25,
    kResolvedAnonymizedAggregateScanNode = 112,
    NODE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnyResolvedAggregateScanBaseProto* internal_default_instance() {
    return reinterpret_cast<const AnyResolvedAggregateScanBaseProto*>(
               &_AnyResolvedAggregateScanBaseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(AnyResolvedAggregateScanBaseProto* other);
  friend void swap(AnyResolvedAggregateScanBaseProto& a, AnyResolvedAggregateScanBaseProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnyResolvedAggregateScanBaseProto* New() const final {
    return CreateMaybeMessage<AnyResolvedAggregateScanBaseProto>(NULL);
  }

  AnyResolvedAggregateScanBaseProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnyResolvedAggregateScanBaseProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyResolvedAggregateScanBaseProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedAggregateScanProto resolved_aggregate_scan_node = 25;
  bool has_resolved_aggregate_scan_node() const;
  void clear_resolved_aggregate_scan_node();
  static const int kResolvedAggregateScanNodeFieldNumber = 25;
  private:
  const ::zetasql::ResolvedAggregateScanProto& _internal_resolved_aggregate_scan_node() const;
  public:
  const ::zetasql::ResolvedAggregateScanProto& resolved_aggregate_scan_node() const;
  ::zetasql::ResolvedAggregateScanProto* release_resolved_aggregate_scan_node();
  ::zetasql::ResolvedAggregateScanProto* mutable_resolved_aggregate_scan_node();
  void set_allocated_resolved_aggregate_scan_node(::zetasql::ResolvedAggregateScanProto* resolved_aggregate_scan_node);

  // optional .zetasql.ResolvedAnonymizedAggregateScanProto resolved_anonymized_aggregate_scan_node = 112;
  bool has_resolved_anonymized_aggregate_scan_node() const;
  void clear_resolved_anonymized_aggregate_scan_node();
  static const int kResolvedAnonymizedAggregateScanNodeFieldNumber = 112;
  private:
  const ::zetasql::ResolvedAnonymizedAggregateScanProto& _internal_resolved_anonymized_aggregate_scan_node() const;
  public:
  const ::zetasql::ResolvedAnonymizedAggregateScanProto& resolved_anonymized_aggregate_scan_node() const;
  ::zetasql::ResolvedAnonymizedAggregateScanProto* release_resolved_anonymized_aggregate_scan_node();
  ::zetasql::ResolvedAnonymizedAggregateScanProto* mutable_resolved_anonymized_aggregate_scan_node();
  void set_allocated_resolved_anonymized_aggregate_scan_node(::zetasql::ResolvedAnonymizedAggregateScanProto* resolved_anonymized_aggregate_scan_node);

  void clear_node();
  NodeCase node_case() const;
  // @@protoc_insertion_point(class_scope:zetasql.AnyResolvedAggregateScanBaseProto)
 private:
  void set_has_resolved_aggregate_scan_node();
  void set_has_resolved_anonymized_aggregate_scan_node();

  inline bool has_node() const;
  inline void clear_has_node();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union NodeUnion {
    NodeUnion() {}
    ::zetasql::ResolvedAggregateScanProto* resolved_aggregate_scan_node_;
    ::zetasql::ResolvedAnonymizedAggregateScanProto* resolved_anonymized_aggregate_scan_node_;
  } node_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAggregateScanBaseProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAggregateScanBaseProto) */ {
 public:
  ResolvedAggregateScanBaseProto();
  virtual ~ResolvedAggregateScanBaseProto();

  ResolvedAggregateScanBaseProto(const ResolvedAggregateScanBaseProto& from);

  inline ResolvedAggregateScanBaseProto& operator=(const ResolvedAggregateScanBaseProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAggregateScanBaseProto(ResolvedAggregateScanBaseProto&& from) noexcept
    : ResolvedAggregateScanBaseProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAggregateScanBaseProto& operator=(ResolvedAggregateScanBaseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAggregateScanBaseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAggregateScanBaseProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAggregateScanBaseProto*>(
               &_ResolvedAggregateScanBaseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void Swap(ResolvedAggregateScanBaseProto* other);
  friend void swap(ResolvedAggregateScanBaseProto& a, ResolvedAggregateScanBaseProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAggregateScanBaseProto* New() const final {
    return CreateMaybeMessage<ResolvedAggregateScanBaseProto>(NULL);
  }

  ResolvedAggregateScanBaseProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAggregateScanBaseProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAggregateScanBaseProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedComputedColumnProto group_by_list = 3;
  int group_by_list_size() const;
  void clear_group_by_list();
  static const int kGroupByListFieldNumber = 3;
  ::zetasql::ResolvedComputedColumnProto* mutable_group_by_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >*
      mutable_group_by_list();
  const ::zetasql::ResolvedComputedColumnProto& group_by_list(int index) const;
  ::zetasql::ResolvedComputedColumnProto* add_group_by_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >&
      group_by_list() const;

  // repeated .zetasql.ResolvedComputedColumnProto aggregate_list = 4;
  int aggregate_list_size() const;
  void clear_aggregate_list();
  static const int kAggregateListFieldNumber = 4;
  ::zetasql::ResolvedComputedColumnProto* mutable_aggregate_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >*
      mutable_aggregate_list();
  const ::zetasql::ResolvedComputedColumnProto& aggregate_list(int index) const;
  ::zetasql::ResolvedComputedColumnProto* add_aggregate_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >&
      aggregate_list() const;

  // repeated .zetasql.ResolvedCollationProto collation_list = 5;
  int collation_list_size() const;
  void clear_collation_list();
  static const int kCollationListFieldNumber = 5;
  ::zetasql::ResolvedCollationProto* mutable_collation_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedCollationProto >*
      mutable_collation_list();
  const ::zetasql::ResolvedCollationProto& collation_list(int index) const;
  ::zetasql::ResolvedCollationProto* add_collation_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedCollationProto >&
      collation_list() const;

  // optional .zetasql.ResolvedScanProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedScanProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedScanProto& parent() const;
  ::zetasql::ResolvedScanProto* release_parent();
  ::zetasql::ResolvedScanProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedScanProto* parent);

  // optional .zetasql.AnyResolvedScanProto input_scan = 2;
  bool has_input_scan() const;
  void clear_input_scan();
  static const int kInputScanFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_input_scan() const;
  public:
  const ::zetasql::AnyResolvedScanProto& input_scan() const;
  ::zetasql::AnyResolvedScanProto* release_input_scan();
  ::zetasql::AnyResolvedScanProto* mutable_input_scan();
  void set_allocated_input_scan(::zetasql::AnyResolvedScanProto* input_scan);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAggregateScanBaseProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_input_scan();
  void clear_has_input_scan();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto > group_by_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto > aggregate_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedCollationProto > collation_list_;
  ::zetasql::ResolvedScanProto* parent_;
  ::zetasql::AnyResolvedScanProto* input_scan_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAggregateScanProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAggregateScanProto) */ {
 public:
  ResolvedAggregateScanProto();
  virtual ~ResolvedAggregateScanProto();

  ResolvedAggregateScanProto(const ResolvedAggregateScanProto& from);

  inline ResolvedAggregateScanProto& operator=(const ResolvedAggregateScanProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAggregateScanProto(ResolvedAggregateScanProto&& from) noexcept
    : ResolvedAggregateScanProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAggregateScanProto& operator=(ResolvedAggregateScanProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAggregateScanProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAggregateScanProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAggregateScanProto*>(
               &_ResolvedAggregateScanProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void Swap(ResolvedAggregateScanProto* other);
  friend void swap(ResolvedAggregateScanProto& a, ResolvedAggregateScanProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAggregateScanProto* New() const final {
    return CreateMaybeMessage<ResolvedAggregateScanProto>(NULL);
  }

  ResolvedAggregateScanProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAggregateScanProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAggregateScanProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedGroupingSetProto grouping_set_list = 5;
  int grouping_set_list_size() const;
  void clear_grouping_set_list();
  static const int kGroupingSetListFieldNumber = 5;
  ::zetasql::ResolvedGroupingSetProto* mutable_grouping_set_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedGroupingSetProto >*
      mutable_grouping_set_list();
  const ::zetasql::ResolvedGroupingSetProto& grouping_set_list(int index) const;
  ::zetasql::ResolvedGroupingSetProto* add_grouping_set_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedGroupingSetProto >&
      grouping_set_list() const;

  // repeated .zetasql.ResolvedColumnRefProto rollup_column_list = 6;
  int rollup_column_list_size() const;
  void clear_rollup_column_list();
  static const int kRollupColumnListFieldNumber = 6;
  ::zetasql::ResolvedColumnRefProto* mutable_rollup_column_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >*
      mutable_rollup_column_list();
  const ::zetasql::ResolvedColumnRefProto& rollup_column_list(int index) const;
  ::zetasql::ResolvedColumnRefProto* add_rollup_column_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >&
      rollup_column_list() const;

  // optional .zetasql.ResolvedAggregateScanBaseProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAggregateScanBaseProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAggregateScanBaseProto& parent() const;
  ::zetasql::ResolvedAggregateScanBaseProto* release_parent();
  ::zetasql::ResolvedAggregateScanBaseProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAggregateScanBaseProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAggregateScanProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedGroupingSetProto > grouping_set_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto > rollup_column_list_;
  ::zetasql::ResolvedAggregateScanBaseProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAnonymizedAggregateScanProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAnonymizedAggregateScanProto) */ {
 public:
  ResolvedAnonymizedAggregateScanProto();
  virtual ~ResolvedAnonymizedAggregateScanProto();

  ResolvedAnonymizedAggregateScanProto(const ResolvedAnonymizedAggregateScanProto& from);

  inline ResolvedAnonymizedAggregateScanProto& operator=(const ResolvedAnonymizedAggregateScanProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAnonymizedAggregateScanProto(ResolvedAnonymizedAggregateScanProto&& from) noexcept
    : ResolvedAnonymizedAggregateScanProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAnonymizedAggregateScanProto& operator=(ResolvedAnonymizedAggregateScanProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAnonymizedAggregateScanProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAnonymizedAggregateScanProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAnonymizedAggregateScanProto*>(
               &_ResolvedAnonymizedAggregateScanProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  void Swap(ResolvedAnonymizedAggregateScanProto* other);
  friend void swap(ResolvedAnonymizedAggregateScanProto& a, ResolvedAnonymizedAggregateScanProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAnonymizedAggregateScanProto* New() const final {
    return CreateMaybeMessage<ResolvedAnonymizedAggregateScanProto>(NULL);
  }

  ResolvedAnonymizedAggregateScanProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAnonymizedAggregateScanProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAnonymizedAggregateScanProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedOptionProto anonymization_option_list = 6;
  int anonymization_option_list_size() const;
  void clear_anonymization_option_list();
  static const int kAnonymizationOptionListFieldNumber = 6;
  ::zetasql::ResolvedOptionProto* mutable_anonymization_option_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_anonymization_option_list();
  const ::zetasql::ResolvedOptionProto& anonymization_option_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_anonymization_option_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      anonymization_option_list() const;

  // optional .zetasql.ResolvedAggregateScanBaseProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAggregateScanBaseProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAggregateScanBaseProto& parent() const;
  ::zetasql::ResolvedAggregateScanBaseProto* release_parent();
  ::zetasql::ResolvedAggregateScanBaseProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAggregateScanBaseProto* parent);

  // optional .zetasql.ResolvedColumnRefProto k_threshold_expr = 5;
  bool has_k_threshold_expr() const;
  void clear_k_threshold_expr();
  static const int kKThresholdExprFieldNumber = 5;
  private:
  const ::zetasql::ResolvedColumnRefProto& _internal_k_threshold_expr() const;
  public:
  const ::zetasql::ResolvedColumnRefProto& k_threshold_expr() const;
  ::zetasql::ResolvedColumnRefProto* release_k_threshold_expr();
  ::zetasql::ResolvedColumnRefProto* mutable_k_threshold_expr();
  void set_allocated_k_threshold_expr(::zetasql::ResolvedColumnRefProto* k_threshold_expr);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAnonymizedAggregateScanProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_k_threshold_expr();
  void clear_has_k_threshold_expr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > anonymization_option_list_;
  ::zetasql::ResolvedAggregateScanBaseProto* parent_;
  ::zetasql::ResolvedColumnRefProto* k_threshold_expr_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedSetOperationItemProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedSetOperationItemProto) */ {
 public:
  ResolvedSetOperationItemProto();
  virtual ~ResolvedSetOperationItemProto();

  ResolvedSetOperationItemProto(const ResolvedSetOperationItemProto& from);

  inline ResolvedSetOperationItemProto& operator=(const ResolvedSetOperationItemProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedSetOperationItemProto(ResolvedSetOperationItemProto&& from) noexcept
    : ResolvedSetOperationItemProto() {
    *this = ::std::move(from);
  }

  inline ResolvedSetOperationItemProto& operator=(ResolvedSetOperationItemProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedSetOperationItemProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedSetOperationItemProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedSetOperationItemProto*>(
               &_ResolvedSetOperationItemProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  void Swap(ResolvedSetOperationItemProto* other);
  friend void swap(ResolvedSetOperationItemProto& a, ResolvedSetOperationItemProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedSetOperationItemProto* New() const final {
    return CreateMaybeMessage<ResolvedSetOperationItemProto>(NULL);
  }

  ResolvedSetOperationItemProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedSetOperationItemProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedSetOperationItemProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedColumnProto output_column_list = 3;
  int output_column_list_size() const;
  void clear_output_column_list();
  static const int kOutputColumnListFieldNumber = 3;
  ::zetasql::ResolvedColumnProto* mutable_output_column_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >*
      mutable_output_column_list();
  const ::zetasql::ResolvedColumnProto& output_column_list(int index) const;
  ::zetasql::ResolvedColumnProto* add_output_column_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >&
      output_column_list() const;

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.AnyResolvedScanProto scan = 2;
  bool has_scan() const;
  void clear_scan();
  static const int kScanFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_scan() const;
  public:
  const ::zetasql::AnyResolvedScanProto& scan() const;
  ::zetasql::AnyResolvedScanProto* release_scan();
  ::zetasql::AnyResolvedScanProto* mutable_scan();
  void set_allocated_scan(::zetasql::AnyResolvedScanProto* scan);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedSetOperationItemProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_scan();
  void clear_has_scan();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto > output_column_list_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::AnyResolvedScanProto* scan_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedSetOperationScanProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedSetOperationScanProto) */ {
 public:
  ResolvedSetOperationScanProto();
  virtual ~ResolvedSetOperationScanProto();

  ResolvedSetOperationScanProto(const ResolvedSetOperationScanProto& from);

  inline ResolvedSetOperationScanProto& operator=(const ResolvedSetOperationScanProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedSetOperationScanProto(ResolvedSetOperationScanProto&& from) noexcept
    : ResolvedSetOperationScanProto() {
    *this = ::std::move(from);
  }

  inline ResolvedSetOperationScanProto& operator=(ResolvedSetOperationScanProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedSetOperationScanProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedSetOperationScanProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedSetOperationScanProto*>(
               &_ResolvedSetOperationScanProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  void Swap(ResolvedSetOperationScanProto* other);
  friend void swap(ResolvedSetOperationScanProto& a, ResolvedSetOperationScanProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedSetOperationScanProto* New() const final {
    return CreateMaybeMessage<ResolvedSetOperationScanProto>(NULL);
  }

  ResolvedSetOperationScanProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedSetOperationScanProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedSetOperationScanProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedSetOperationItemProto input_item_list = 4;
  int input_item_list_size() const;
  void clear_input_item_list();
  static const int kInputItemListFieldNumber = 4;
  ::zetasql::ResolvedSetOperationItemProto* mutable_input_item_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedSetOperationItemProto >*
      mutable_input_item_list();
  const ::zetasql::ResolvedSetOperationItemProto& input_item_list(int index) const;
  ::zetasql::ResolvedSetOperationItemProto* add_input_item_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedSetOperationItemProto >&
      input_item_list() const;

  // optional .zetasql.ResolvedScanProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedScanProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedScanProto& parent() const;
  ::zetasql::ResolvedScanProto* release_parent();
  ::zetasql::ResolvedScanProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedScanProto* parent);

  // optional .zetasql.ResolvedSetOperationScanEnums.SetOperationType op_type = 2;
  bool has_op_type() const;
  void clear_op_type();
  static const int kOpTypeFieldNumber = 2;
  ::zetasql::ResolvedSetOperationScanEnums_SetOperationType op_type() const;
  void set_op_type(::zetasql::ResolvedSetOperationScanEnums_SetOperationType value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedSetOperationScanProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_op_type();
  void clear_has_op_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedSetOperationItemProto > input_item_list_;
  ::zetasql::ResolvedScanProto* parent_;
  int op_type_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedOrderByScanProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedOrderByScanProto) */ {
 public:
  ResolvedOrderByScanProto();
  virtual ~ResolvedOrderByScanProto();

  ResolvedOrderByScanProto(const ResolvedOrderByScanProto& from);

  inline ResolvedOrderByScanProto& operator=(const ResolvedOrderByScanProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedOrderByScanProto(ResolvedOrderByScanProto&& from) noexcept
    : ResolvedOrderByScanProto() {
    *this = ::std::move(from);
  }

  inline ResolvedOrderByScanProto& operator=(ResolvedOrderByScanProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedOrderByScanProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedOrderByScanProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedOrderByScanProto*>(
               &_ResolvedOrderByScanProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  void Swap(ResolvedOrderByScanProto* other);
  friend void swap(ResolvedOrderByScanProto& a, ResolvedOrderByScanProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedOrderByScanProto* New() const final {
    return CreateMaybeMessage<ResolvedOrderByScanProto>(NULL);
  }

  ResolvedOrderByScanProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedOrderByScanProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedOrderByScanProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedOrderByItemProto order_by_item_list = 3;
  int order_by_item_list_size() const;
  void clear_order_by_item_list();
  static const int kOrderByItemListFieldNumber = 3;
  ::zetasql::ResolvedOrderByItemProto* mutable_order_by_item_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOrderByItemProto >*
      mutable_order_by_item_list();
  const ::zetasql::ResolvedOrderByItemProto& order_by_item_list(int index) const;
  ::zetasql::ResolvedOrderByItemProto* add_order_by_item_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOrderByItemProto >&
      order_by_item_list() const;

  // optional .zetasql.ResolvedScanProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedScanProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedScanProto& parent() const;
  ::zetasql::ResolvedScanProto* release_parent();
  ::zetasql::ResolvedScanProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedScanProto* parent);

  // optional .zetasql.AnyResolvedScanProto input_scan = 2;
  bool has_input_scan() const;
  void clear_input_scan();
  static const int kInputScanFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_input_scan() const;
  public:
  const ::zetasql::AnyResolvedScanProto& input_scan() const;
  ::zetasql::AnyResolvedScanProto* release_input_scan();
  ::zetasql::AnyResolvedScanProto* mutable_input_scan();
  void set_allocated_input_scan(::zetasql::AnyResolvedScanProto* input_scan);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedOrderByScanProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_input_scan();
  void clear_has_input_scan();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOrderByItemProto > order_by_item_list_;
  ::zetasql::ResolvedScanProto* parent_;
  ::zetasql::AnyResolvedScanProto* input_scan_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedLimitOffsetScanProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedLimitOffsetScanProto) */ {
 public:
  ResolvedLimitOffsetScanProto();
  virtual ~ResolvedLimitOffsetScanProto();

  ResolvedLimitOffsetScanProto(const ResolvedLimitOffsetScanProto& from);

  inline ResolvedLimitOffsetScanProto& operator=(const ResolvedLimitOffsetScanProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedLimitOffsetScanProto(ResolvedLimitOffsetScanProto&& from) noexcept
    : ResolvedLimitOffsetScanProto() {
    *this = ::std::move(from);
  }

  inline ResolvedLimitOffsetScanProto& operator=(ResolvedLimitOffsetScanProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedLimitOffsetScanProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedLimitOffsetScanProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedLimitOffsetScanProto*>(
               &_ResolvedLimitOffsetScanProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  void Swap(ResolvedLimitOffsetScanProto* other);
  friend void swap(ResolvedLimitOffsetScanProto& a, ResolvedLimitOffsetScanProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedLimitOffsetScanProto* New() const final {
    return CreateMaybeMessage<ResolvedLimitOffsetScanProto>(NULL);
  }

  ResolvedLimitOffsetScanProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedLimitOffsetScanProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedLimitOffsetScanProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedScanProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedScanProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedScanProto& parent() const;
  ::zetasql::ResolvedScanProto* release_parent();
  ::zetasql::ResolvedScanProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedScanProto* parent);

  // optional .zetasql.AnyResolvedScanProto input_scan = 2;
  bool has_input_scan() const;
  void clear_input_scan();
  static const int kInputScanFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_input_scan() const;
  public:
  const ::zetasql::AnyResolvedScanProto& input_scan() const;
  ::zetasql::AnyResolvedScanProto* release_input_scan();
  ::zetasql::AnyResolvedScanProto* mutable_input_scan();
  void set_allocated_input_scan(::zetasql::AnyResolvedScanProto* input_scan);

  // optional .zetasql.AnyResolvedExprProto limit = 3;
  bool has_limit() const;
  void clear_limit();
  static const int kLimitFieldNumber = 3;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_limit() const;
  public:
  const ::zetasql::AnyResolvedExprProto& limit() const;
  ::zetasql::AnyResolvedExprProto* release_limit();
  ::zetasql::AnyResolvedExprProto* mutable_limit();
  void set_allocated_limit(::zetasql::AnyResolvedExprProto* limit);

  // optional .zetasql.AnyResolvedExprProto offset = 4;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 4;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_offset() const;
  public:
  const ::zetasql::AnyResolvedExprProto& offset() const;
  ::zetasql::AnyResolvedExprProto* release_offset();
  ::zetasql::AnyResolvedExprProto* mutable_offset();
  void set_allocated_offset(::zetasql::AnyResolvedExprProto* offset);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedLimitOffsetScanProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_input_scan();
  void clear_has_input_scan();
  void set_has_limit();
  void clear_has_limit();
  void set_has_offset();
  void clear_has_offset();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedScanProto* parent_;
  ::zetasql::AnyResolvedScanProto* input_scan_;
  ::zetasql::AnyResolvedExprProto* limit_;
  ::zetasql::AnyResolvedExprProto* offset_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedWithRefScanProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedWithRefScanProto) */ {
 public:
  ResolvedWithRefScanProto();
  virtual ~ResolvedWithRefScanProto();

  ResolvedWithRefScanProto(const ResolvedWithRefScanProto& from);

  inline ResolvedWithRefScanProto& operator=(const ResolvedWithRefScanProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedWithRefScanProto(ResolvedWithRefScanProto&& from) noexcept
    : ResolvedWithRefScanProto() {
    *this = ::std::move(from);
  }

  inline ResolvedWithRefScanProto& operator=(ResolvedWithRefScanProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedWithRefScanProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedWithRefScanProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedWithRefScanProto*>(
               &_ResolvedWithRefScanProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  void Swap(ResolvedWithRefScanProto* other);
  friend void swap(ResolvedWithRefScanProto& a, ResolvedWithRefScanProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedWithRefScanProto* New() const final {
    return CreateMaybeMessage<ResolvedWithRefScanProto>(NULL);
  }

  ResolvedWithRefScanProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedWithRefScanProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedWithRefScanProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string with_query_name = 2;
  bool has_with_query_name() const;
  void clear_with_query_name();
  static const int kWithQueryNameFieldNumber = 2;
  const ::std::string& with_query_name() const;
  void set_with_query_name(const ::std::string& value);
  #if LANG_CXX11
  void set_with_query_name(::std::string&& value);
  #endif
  void set_with_query_name(const char* value);
  void set_with_query_name(const char* value, size_t size);
  ::std::string* mutable_with_query_name();
  ::std::string* release_with_query_name();
  void set_allocated_with_query_name(::std::string* with_query_name);

  // optional .zetasql.ResolvedScanProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedScanProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedScanProto& parent() const;
  ::zetasql::ResolvedScanProto* release_parent();
  ::zetasql::ResolvedScanProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedScanProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedWithRefScanProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_with_query_name();
  void clear_has_with_query_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr with_query_name_;
  ::zetasql::ResolvedScanProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAnalyticScanProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAnalyticScanProto) */ {
 public:
  ResolvedAnalyticScanProto();
  virtual ~ResolvedAnalyticScanProto();

  ResolvedAnalyticScanProto(const ResolvedAnalyticScanProto& from);

  inline ResolvedAnalyticScanProto& operator=(const ResolvedAnalyticScanProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAnalyticScanProto(ResolvedAnalyticScanProto&& from) noexcept
    : ResolvedAnalyticScanProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAnalyticScanProto& operator=(ResolvedAnalyticScanProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAnalyticScanProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAnalyticScanProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAnalyticScanProto*>(
               &_ResolvedAnalyticScanProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  void Swap(ResolvedAnalyticScanProto* other);
  friend void swap(ResolvedAnalyticScanProto& a, ResolvedAnalyticScanProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAnalyticScanProto* New() const final {
    return CreateMaybeMessage<ResolvedAnalyticScanProto>(NULL);
  }

  ResolvedAnalyticScanProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAnalyticScanProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAnalyticScanProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedAnalyticFunctionGroupProto function_group_list = 3;
  int function_group_list_size() const;
  void clear_function_group_list();
  static const int kFunctionGroupListFieldNumber = 3;
  ::zetasql::ResolvedAnalyticFunctionGroupProto* mutable_function_group_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedAnalyticFunctionGroupProto >*
      mutable_function_group_list();
  const ::zetasql::ResolvedAnalyticFunctionGroupProto& function_group_list(int index) const;
  ::zetasql::ResolvedAnalyticFunctionGroupProto* add_function_group_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedAnalyticFunctionGroupProto >&
      function_group_list() const;

  // optional .zetasql.ResolvedScanProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedScanProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedScanProto& parent() const;
  ::zetasql::ResolvedScanProto* release_parent();
  ::zetasql::ResolvedScanProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedScanProto* parent);

  // optional .zetasql.AnyResolvedScanProto input_scan = 2;
  bool has_input_scan() const;
  void clear_input_scan();
  static const int kInputScanFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_input_scan() const;
  public:
  const ::zetasql::AnyResolvedScanProto& input_scan() const;
  ::zetasql::AnyResolvedScanProto* release_input_scan();
  ::zetasql::AnyResolvedScanProto* mutable_input_scan();
  void set_allocated_input_scan(::zetasql::AnyResolvedScanProto* input_scan);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAnalyticScanProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_input_scan();
  void clear_has_input_scan();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedAnalyticFunctionGroupProto > function_group_list_;
  ::zetasql::ResolvedScanProto* parent_;
  ::zetasql::AnyResolvedScanProto* input_scan_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedSampleScanProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedSampleScanProto) */ {
 public:
  ResolvedSampleScanProto();
  virtual ~ResolvedSampleScanProto();

  ResolvedSampleScanProto(const ResolvedSampleScanProto& from);

  inline ResolvedSampleScanProto& operator=(const ResolvedSampleScanProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedSampleScanProto(ResolvedSampleScanProto&& from) noexcept
    : ResolvedSampleScanProto() {
    *this = ::std::move(from);
  }

  inline ResolvedSampleScanProto& operator=(ResolvedSampleScanProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedSampleScanProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedSampleScanProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedSampleScanProto*>(
               &_ResolvedSampleScanProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  void Swap(ResolvedSampleScanProto* other);
  friend void swap(ResolvedSampleScanProto& a, ResolvedSampleScanProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedSampleScanProto* New() const final {
    return CreateMaybeMessage<ResolvedSampleScanProto>(NULL);
  }

  ResolvedSampleScanProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedSampleScanProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedSampleScanProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.AnyResolvedExprProto partition_by_list = 8;
  int partition_by_list_size() const;
  void clear_partition_by_list();
  static const int kPartitionByListFieldNumber = 8;
  ::zetasql::AnyResolvedExprProto* mutable_partition_by_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
      mutable_partition_by_list();
  const ::zetasql::AnyResolvedExprProto& partition_by_list(int index) const;
  ::zetasql::AnyResolvedExprProto* add_partition_by_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
      partition_by_list() const;

  // optional string method = 3;
  bool has_method() const;
  void clear_method();
  static const int kMethodFieldNumber = 3;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  #if LANG_CXX11
  void set_method(::std::string&& value);
  #endif
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // optional .zetasql.ResolvedScanProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedScanProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedScanProto& parent() const;
  ::zetasql::ResolvedScanProto* release_parent();
  ::zetasql::ResolvedScanProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedScanProto* parent);

  // optional .zetasql.AnyResolvedScanProto input_scan = 2;
  bool has_input_scan() const;
  void clear_input_scan();
  static const int kInputScanFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_input_scan() const;
  public:
  const ::zetasql::AnyResolvedScanProto& input_scan() const;
  ::zetasql::AnyResolvedScanProto* release_input_scan();
  ::zetasql::AnyResolvedScanProto* mutable_input_scan();
  void set_allocated_input_scan(::zetasql::AnyResolvedScanProto* input_scan);

  // optional .zetasql.AnyResolvedExprProto size = 4;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_size() const;
  public:
  const ::zetasql::AnyResolvedExprProto& size() const;
  ::zetasql::AnyResolvedExprProto* release_size();
  ::zetasql::AnyResolvedExprProto* mutable_size();
  void set_allocated_size(::zetasql::AnyResolvedExprProto* size);

  // optional .zetasql.AnyResolvedExprProto repeatable_argument = 6;
  bool has_repeatable_argument() const;
  void clear_repeatable_argument();
  static const int kRepeatableArgumentFieldNumber = 6;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_repeatable_argument() const;
  public:
  const ::zetasql::AnyResolvedExprProto& repeatable_argument() const;
  ::zetasql::AnyResolvedExprProto* release_repeatable_argument();
  ::zetasql::AnyResolvedExprProto* mutable_repeatable_argument();
  void set_allocated_repeatable_argument(::zetasql::AnyResolvedExprProto* repeatable_argument);

  // optional .zetasql.ResolvedColumnHolderProto weight_column = 7;
  bool has_weight_column() const;
  void clear_weight_column();
  static const int kWeightColumnFieldNumber = 7;
  private:
  const ::zetasql::ResolvedColumnHolderProto& _internal_weight_column() const;
  public:
  const ::zetasql::ResolvedColumnHolderProto& weight_column() const;
  ::zetasql::ResolvedColumnHolderProto* release_weight_column();
  ::zetasql::ResolvedColumnHolderProto* mutable_weight_column();
  void set_allocated_weight_column(::zetasql::ResolvedColumnHolderProto* weight_column);

  // optional .zetasql.ResolvedSampleScanEnums.SampleUnit unit = 5;
  bool has_unit() const;
  void clear_unit();
  static const int kUnitFieldNumber = 5;
  ::zetasql::ResolvedSampleScanEnums_SampleUnit unit() const;
  void set_unit(::zetasql::ResolvedSampleScanEnums_SampleUnit value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedSampleScanProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_input_scan();
  void clear_has_input_scan();
  void set_has_method();
  void clear_has_method();
  void set_has_size();
  void clear_has_size();
  void set_has_unit();
  void clear_has_unit();
  void set_has_repeatable_argument();
  void clear_has_repeatable_argument();
  void set_has_weight_column();
  void clear_has_weight_column();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto > partition_by_list_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::zetasql::ResolvedScanProto* parent_;
  ::zetasql::AnyResolvedScanProto* input_scan_;
  ::zetasql::AnyResolvedExprProto* size_;
  ::zetasql::AnyResolvedExprProto* repeatable_argument_;
  ::zetasql::ResolvedColumnHolderProto* weight_column_;
  int unit_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedComputedColumnProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedComputedColumnProto) */ {
 public:
  ResolvedComputedColumnProto();
  virtual ~ResolvedComputedColumnProto();

  ResolvedComputedColumnProto(const ResolvedComputedColumnProto& from);

  inline ResolvedComputedColumnProto& operator=(const ResolvedComputedColumnProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedComputedColumnProto(ResolvedComputedColumnProto&& from) noexcept
    : ResolvedComputedColumnProto() {
    *this = ::std::move(from);
  }

  inline ResolvedComputedColumnProto& operator=(ResolvedComputedColumnProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedComputedColumnProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedComputedColumnProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedComputedColumnProto*>(
               &_ResolvedComputedColumnProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  void Swap(ResolvedComputedColumnProto* other);
  friend void swap(ResolvedComputedColumnProto& a, ResolvedComputedColumnProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedComputedColumnProto* New() const final {
    return CreateMaybeMessage<ResolvedComputedColumnProto>(NULL);
  }

  ResolvedComputedColumnProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedComputedColumnProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedComputedColumnProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.ResolvedColumnProto column = 2;
  bool has_column() const;
  void clear_column();
  static const int kColumnFieldNumber = 2;
  private:
  const ::zetasql::ResolvedColumnProto& _internal_column() const;
  public:
  const ::zetasql::ResolvedColumnProto& column() const;
  ::zetasql::ResolvedColumnProto* release_column();
  ::zetasql::ResolvedColumnProto* mutable_column();
  void set_allocated_column(::zetasql::ResolvedColumnProto* column);

  // optional .zetasql.AnyResolvedExprProto expr = 3;
  bool has_expr() const;
  void clear_expr();
  static const int kExprFieldNumber = 3;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_expr() const;
  public:
  const ::zetasql::AnyResolvedExprProto& expr() const;
  ::zetasql::AnyResolvedExprProto* release_expr();
  ::zetasql::AnyResolvedExprProto* mutable_expr();
  void set_allocated_expr(::zetasql::AnyResolvedExprProto* expr);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedComputedColumnProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_column();
  void clear_has_column();
  void set_has_expr();
  void clear_has_expr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::ResolvedColumnProto* column_;
  ::zetasql::AnyResolvedExprProto* expr_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedOrderByItemProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedOrderByItemProto) */ {
 public:
  ResolvedOrderByItemProto();
  virtual ~ResolvedOrderByItemProto();

  ResolvedOrderByItemProto(const ResolvedOrderByItemProto& from);

  inline ResolvedOrderByItemProto& operator=(const ResolvedOrderByItemProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedOrderByItemProto(ResolvedOrderByItemProto&& from) noexcept
    : ResolvedOrderByItemProto() {
    *this = ::std::move(from);
  }

  inline ResolvedOrderByItemProto& operator=(ResolvedOrderByItemProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedOrderByItemProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedOrderByItemProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedOrderByItemProto*>(
               &_ResolvedOrderByItemProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  void Swap(ResolvedOrderByItemProto* other);
  friend void swap(ResolvedOrderByItemProto& a, ResolvedOrderByItemProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedOrderByItemProto* New() const final {
    return CreateMaybeMessage<ResolvedOrderByItemProto>(NULL);
  }

  ResolvedOrderByItemProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedOrderByItemProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedOrderByItemProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.ResolvedColumnRefProto column_ref = 2;
  bool has_column_ref() const;
  void clear_column_ref();
  static const int kColumnRefFieldNumber = 2;
  private:
  const ::zetasql::ResolvedColumnRefProto& _internal_column_ref() const;
  public:
  const ::zetasql::ResolvedColumnRefProto& column_ref() const;
  ::zetasql::ResolvedColumnRefProto* release_column_ref();
  ::zetasql::ResolvedColumnRefProto* mutable_column_ref();
  void set_allocated_column_ref(::zetasql::ResolvedColumnRefProto* column_ref);

  // optional .zetasql.AnyResolvedExprProto collation_name = 3;
  bool has_collation_name() const;
  void clear_collation_name();
  static const int kCollationNameFieldNumber = 3;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_collation_name() const;
  public:
  const ::zetasql::AnyResolvedExprProto& collation_name() const;
  ::zetasql::AnyResolvedExprProto* release_collation_name();
  ::zetasql::AnyResolvedExprProto* mutable_collation_name();
  void set_allocated_collation_name(::zetasql::AnyResolvedExprProto* collation_name);

  // optional .zetasql.ResolvedCollationProto collation = 6;
  bool has_collation() const;
  void clear_collation();
  static const int kCollationFieldNumber = 6;
  private:
  const ::zetasql::ResolvedCollationProto& _internal_collation() const;
  public:
  const ::zetasql::ResolvedCollationProto& collation() const;
  ::zetasql::ResolvedCollationProto* release_collation();
  ::zetasql::ResolvedCollationProto* mutable_collation();
  void set_allocated_collation(::zetasql::ResolvedCollationProto* collation);

  // optional bool is_descending = 4;
  bool has_is_descending() const;
  void clear_is_descending();
  static const int kIsDescendingFieldNumber = 4;
  bool is_descending() const;
  void set_is_descending(bool value);

  // optional .zetasql.ResolvedOrderByItemEnums.NullOrderMode null_order = 5;
  bool has_null_order() const;
  void clear_null_order();
  static const int kNullOrderFieldNumber = 5;
  ::zetasql::ResolvedOrderByItemEnums_NullOrderMode null_order() const;
  void set_null_order(::zetasql::ResolvedOrderByItemEnums_NullOrderMode value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedOrderByItemProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_column_ref();
  void clear_has_column_ref();
  void set_has_collation_name();
  void clear_has_collation_name();
  void set_has_is_descending();
  void clear_has_is_descending();
  void set_has_null_order();
  void clear_has_null_order();
  void set_has_collation();
  void clear_has_collation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::ResolvedColumnRefProto* column_ref_;
  ::zetasql::AnyResolvedExprProto* collation_name_;
  ::zetasql::ResolvedCollationProto* collation_;
  bool is_descending_;
  int null_order_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedColumnAnnotationsProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedColumnAnnotationsProto) */ {
 public:
  ResolvedColumnAnnotationsProto();
  virtual ~ResolvedColumnAnnotationsProto();

  ResolvedColumnAnnotationsProto(const ResolvedColumnAnnotationsProto& from);

  inline ResolvedColumnAnnotationsProto& operator=(const ResolvedColumnAnnotationsProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedColumnAnnotationsProto(ResolvedColumnAnnotationsProto&& from) noexcept
    : ResolvedColumnAnnotationsProto() {
    *this = ::std::move(from);
  }

  inline ResolvedColumnAnnotationsProto& operator=(ResolvedColumnAnnotationsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedColumnAnnotationsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedColumnAnnotationsProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedColumnAnnotationsProto*>(
               &_ResolvedColumnAnnotationsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  void Swap(ResolvedColumnAnnotationsProto* other);
  friend void swap(ResolvedColumnAnnotationsProto& a, ResolvedColumnAnnotationsProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedColumnAnnotationsProto* New() const final {
    return CreateMaybeMessage<ResolvedColumnAnnotationsProto>(NULL);
  }

  ResolvedColumnAnnotationsProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedColumnAnnotationsProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedColumnAnnotationsProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedOptionProto option_list = 3;
  int option_list_size() const;
  void clear_option_list();
  static const int kOptionListFieldNumber = 3;
  ::zetasql::ResolvedOptionProto* mutable_option_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_option_list();
  const ::zetasql::ResolvedOptionProto& option_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_option_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      option_list() const;

  // repeated .zetasql.ResolvedColumnAnnotationsProto child_list = 4;
  int child_list_size() const;
  void clear_child_list();
  static const int kChildListFieldNumber = 4;
  ::zetasql::ResolvedColumnAnnotationsProto* mutable_child_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnAnnotationsProto >*
      mutable_child_list();
  const ::zetasql::ResolvedColumnAnnotationsProto& child_list(int index) const;
  ::zetasql::ResolvedColumnAnnotationsProto* add_child_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnAnnotationsProto >&
      child_list() const;

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.TypeParametersProto type_parameters = 5;
  bool has_type_parameters() const;
  void clear_type_parameters();
  static const int kTypeParametersFieldNumber = 5;
  private:
  const ::zetasql::TypeParametersProto& _internal_type_parameters() const;
  public:
  const ::zetasql::TypeParametersProto& type_parameters() const;
  ::zetasql::TypeParametersProto* release_type_parameters();
  ::zetasql::TypeParametersProto* mutable_type_parameters();
  void set_allocated_type_parameters(::zetasql::TypeParametersProto* type_parameters);

  // optional .zetasql.AnyResolvedExprProto collation_name = 6;
  bool has_collation_name() const;
  void clear_collation_name();
  static const int kCollationNameFieldNumber = 6;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_collation_name() const;
  public:
  const ::zetasql::AnyResolvedExprProto& collation_name() const;
  ::zetasql::AnyResolvedExprProto* release_collation_name();
  ::zetasql::AnyResolvedExprProto* mutable_collation_name();
  void set_allocated_collation_name(::zetasql::AnyResolvedExprProto* collation_name);

  // optional bool not_null = 2;
  bool has_not_null() const;
  void clear_not_null();
  static const int kNotNullFieldNumber = 2;
  bool not_null() const;
  void set_not_null(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedColumnAnnotationsProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_collation_name();
  void clear_has_collation_name();
  void set_has_not_null();
  void clear_has_not_null();
  void set_has_type_parameters();
  void clear_has_type_parameters();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > option_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnAnnotationsProto > child_list_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::TypeParametersProto* type_parameters_;
  ::zetasql::AnyResolvedExprProto* collation_name_;
  bool not_null_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedGeneratedColumnInfoProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedGeneratedColumnInfoProto) */ {
 public:
  ResolvedGeneratedColumnInfoProto();
  virtual ~ResolvedGeneratedColumnInfoProto();

  ResolvedGeneratedColumnInfoProto(const ResolvedGeneratedColumnInfoProto& from);

  inline ResolvedGeneratedColumnInfoProto& operator=(const ResolvedGeneratedColumnInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedGeneratedColumnInfoProto(ResolvedGeneratedColumnInfoProto&& from) noexcept
    : ResolvedGeneratedColumnInfoProto() {
    *this = ::std::move(from);
  }

  inline ResolvedGeneratedColumnInfoProto& operator=(ResolvedGeneratedColumnInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedGeneratedColumnInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedGeneratedColumnInfoProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedGeneratedColumnInfoProto*>(
               &_ResolvedGeneratedColumnInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  void Swap(ResolvedGeneratedColumnInfoProto* other);
  friend void swap(ResolvedGeneratedColumnInfoProto& a, ResolvedGeneratedColumnInfoProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedGeneratedColumnInfoProto* New() const final {
    return CreateMaybeMessage<ResolvedGeneratedColumnInfoProto>(NULL);
  }

  ResolvedGeneratedColumnInfoProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedGeneratedColumnInfoProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedGeneratedColumnInfoProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.AnyResolvedExprProto expression = 2;
  bool has_expression() const;
  void clear_expression();
  static const int kExpressionFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_expression() const;
  public:
  const ::zetasql::AnyResolvedExprProto& expression() const;
  ::zetasql::AnyResolvedExprProto* release_expression();
  ::zetasql::AnyResolvedExprProto* mutable_expression();
  void set_allocated_expression(::zetasql::AnyResolvedExprProto* expression);

  // optional .zetasql.ResolvedGeneratedColumnInfoEnums.StoredMode stored_mode = 5;
  bool has_stored_mode() const;
  void clear_stored_mode();
  static const int kStoredModeFieldNumber = 5;
  ::zetasql::ResolvedGeneratedColumnInfoEnums_StoredMode stored_mode() const;
  void set_stored_mode(::zetasql::ResolvedGeneratedColumnInfoEnums_StoredMode value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedGeneratedColumnInfoProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_expression();
  void clear_has_expression();
  void set_has_stored_mode();
  void clear_has_stored_mode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::AnyResolvedExprProto* expression_;
  int stored_mode_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedColumnDefaultValueProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedColumnDefaultValueProto) */ {
 public:
  ResolvedColumnDefaultValueProto();
  virtual ~ResolvedColumnDefaultValueProto();

  ResolvedColumnDefaultValueProto(const ResolvedColumnDefaultValueProto& from);

  inline ResolvedColumnDefaultValueProto& operator=(const ResolvedColumnDefaultValueProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedColumnDefaultValueProto(ResolvedColumnDefaultValueProto&& from) noexcept
    : ResolvedColumnDefaultValueProto() {
    *this = ::std::move(from);
  }

  inline ResolvedColumnDefaultValueProto& operator=(ResolvedColumnDefaultValueProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedColumnDefaultValueProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedColumnDefaultValueProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedColumnDefaultValueProto*>(
               &_ResolvedColumnDefaultValueProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  void Swap(ResolvedColumnDefaultValueProto* other);
  friend void swap(ResolvedColumnDefaultValueProto& a, ResolvedColumnDefaultValueProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedColumnDefaultValueProto* New() const final {
    return CreateMaybeMessage<ResolvedColumnDefaultValueProto>(NULL);
  }

  ResolvedColumnDefaultValueProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedColumnDefaultValueProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedColumnDefaultValueProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sql = 3;
  bool has_sql() const;
  void clear_sql();
  static const int kSqlFieldNumber = 3;
  const ::std::string& sql() const;
  void set_sql(const ::std::string& value);
  #if LANG_CXX11
  void set_sql(::std::string&& value);
  #endif
  void set_sql(const char* value);
  void set_sql(const char* value, size_t size);
  ::std::string* mutable_sql();
  ::std::string* release_sql();
  void set_allocated_sql(::std::string* sql);

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.AnyResolvedExprProto expression = 2;
  bool has_expression() const;
  void clear_expression();
  static const int kExpressionFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_expression() const;
  public:
  const ::zetasql::AnyResolvedExprProto& expression() const;
  ::zetasql::AnyResolvedExprProto* release_expression();
  ::zetasql::AnyResolvedExprProto* mutable_expression();
  void set_allocated_expression(::zetasql::AnyResolvedExprProto* expression);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedColumnDefaultValueProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_expression();
  void clear_has_expression();
  void set_has_sql();
  void clear_has_sql();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sql_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::AnyResolvedExprProto* expression_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedColumnDefinitionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedColumnDefinitionProto) */ {
 public:
  ResolvedColumnDefinitionProto();
  virtual ~ResolvedColumnDefinitionProto();

  ResolvedColumnDefinitionProto(const ResolvedColumnDefinitionProto& from);

  inline ResolvedColumnDefinitionProto& operator=(const ResolvedColumnDefinitionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedColumnDefinitionProto(ResolvedColumnDefinitionProto&& from) noexcept
    : ResolvedColumnDefinitionProto() {
    *this = ::std::move(from);
  }

  inline ResolvedColumnDefinitionProto& operator=(ResolvedColumnDefinitionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedColumnDefinitionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedColumnDefinitionProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedColumnDefinitionProto*>(
               &_ResolvedColumnDefinitionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  void Swap(ResolvedColumnDefinitionProto* other);
  friend void swap(ResolvedColumnDefinitionProto& a, ResolvedColumnDefinitionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedColumnDefinitionProto* New() const final {
    return CreateMaybeMessage<ResolvedColumnDefinitionProto>(NULL);
  }

  ResolvedColumnDefinitionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedColumnDefinitionProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedColumnDefinitionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.TypeProto type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  private:
  const ::zetasql::TypeProto& _internal_type() const;
  public:
  const ::zetasql::TypeProto& type() const;
  ::zetasql::TypeProto* release_type();
  ::zetasql::TypeProto* mutable_type();
  void set_allocated_type(::zetasql::TypeProto* type);

  // optional .zetasql.ResolvedColumnAnnotationsProto annotations = 4;
  bool has_annotations() const;
  void clear_annotations();
  static const int kAnnotationsFieldNumber = 4;
  private:
  const ::zetasql::ResolvedColumnAnnotationsProto& _internal_annotations() const;
  public:
  const ::zetasql::ResolvedColumnAnnotationsProto& annotations() const;
  ::zetasql::ResolvedColumnAnnotationsProto* release_annotations();
  ::zetasql::ResolvedColumnAnnotationsProto* mutable_annotations();
  void set_allocated_annotations(::zetasql::ResolvedColumnAnnotationsProto* annotations);

  // optional .zetasql.ResolvedColumnProto column = 6;
  bool has_column() const;
  void clear_column();
  static const int kColumnFieldNumber = 6;
  private:
  const ::zetasql::ResolvedColumnProto& _internal_column() const;
  public:
  const ::zetasql::ResolvedColumnProto& column() const;
  ::zetasql::ResolvedColumnProto* release_column();
  ::zetasql::ResolvedColumnProto* mutable_column();
  void set_allocated_column(::zetasql::ResolvedColumnProto* column);

  // optional .zetasql.ResolvedGeneratedColumnInfoProto generated_column_info = 7;
  bool has_generated_column_info() const;
  void clear_generated_column_info();
  static const int kGeneratedColumnInfoFieldNumber = 7;
  private:
  const ::zetasql::ResolvedGeneratedColumnInfoProto& _internal_generated_column_info() const;
  public:
  const ::zetasql::ResolvedGeneratedColumnInfoProto& generated_column_info() const;
  ::zetasql::ResolvedGeneratedColumnInfoProto* release_generated_column_info();
  ::zetasql::ResolvedGeneratedColumnInfoProto* mutable_generated_column_info();
  void set_allocated_generated_column_info(::zetasql::ResolvedGeneratedColumnInfoProto* generated_column_info);

  // optional .zetasql.ResolvedColumnDefaultValueProto default_value = 9;
  bool has_default_value() const;
  void clear_default_value();
  static const int kDefaultValueFieldNumber = 9;
  private:
  const ::zetasql::ResolvedColumnDefaultValueProto& _internal_default_value() const;
  public:
  const ::zetasql::ResolvedColumnDefaultValueProto& default_value() const;
  ::zetasql::ResolvedColumnDefaultValueProto* release_default_value();
  ::zetasql::ResolvedColumnDefaultValueProto* mutable_default_value();
  void set_allocated_default_value(::zetasql::ResolvedColumnDefaultValueProto* default_value);

  // optional bool is_hidden = 5;
  bool has_is_hidden() const;
  void clear_is_hidden();
  static const int kIsHiddenFieldNumber = 5;
  bool is_hidden() const;
  void set_is_hidden(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedColumnDefinitionProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_annotations();
  void clear_has_annotations();
  void set_has_is_hidden();
  void clear_has_is_hidden();
  void set_has_column();
  void clear_has_column();
  void set_has_generated_column_info();
  void clear_has_generated_column_info();
  void set_has_default_value();
  void clear_has_default_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::TypeProto* type_;
  ::zetasql::ResolvedColumnAnnotationsProto* annotations_;
  ::zetasql::ResolvedColumnProto* column_;
  ::zetasql::ResolvedGeneratedColumnInfoProto* generated_column_info_;
  ::zetasql::ResolvedColumnDefaultValueProto* default_value_;
  bool is_hidden_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnyResolvedConstraintProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.AnyResolvedConstraintProto) */ {
 public:
  AnyResolvedConstraintProto();
  virtual ~AnyResolvedConstraintProto();

  AnyResolvedConstraintProto(const AnyResolvedConstraintProto& from);

  inline AnyResolvedConstraintProto& operator=(const AnyResolvedConstraintProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnyResolvedConstraintProto(AnyResolvedConstraintProto&& from) noexcept
    : AnyResolvedConstraintProto() {
    *this = ::std::move(from);
  }

  inline AnyResolvedConstraintProto& operator=(AnyResolvedConstraintProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnyResolvedConstraintProto& default_instance();

  enum NodeCase {
    kResolvedPrimaryKeyNode = 92,
    kResolvedForeignKeyNode = 110,
    kResolvedCheckConstraintNode = 113,
    NODE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnyResolvedConstraintProto* internal_default_instance() {
    return reinterpret_cast<const AnyResolvedConstraintProto*>(
               &_AnyResolvedConstraintProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  void Swap(AnyResolvedConstraintProto* other);
  friend void swap(AnyResolvedConstraintProto& a, AnyResolvedConstraintProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnyResolvedConstraintProto* New() const final {
    return CreateMaybeMessage<AnyResolvedConstraintProto>(NULL);
  }

  AnyResolvedConstraintProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnyResolvedConstraintProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyResolvedConstraintProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedPrimaryKeyProto resolved_primary_key_node = 92;
  bool has_resolved_primary_key_node() const;
  void clear_resolved_primary_key_node();
  static const int kResolvedPrimaryKeyNodeFieldNumber = 92;
  private:
  const ::zetasql::ResolvedPrimaryKeyProto& _internal_resolved_primary_key_node() const;
  public:
  const ::zetasql::ResolvedPrimaryKeyProto& resolved_primary_key_node() const;
  ::zetasql::ResolvedPrimaryKeyProto* release_resolved_primary_key_node();
  ::zetasql::ResolvedPrimaryKeyProto* mutable_resolved_primary_key_node();
  void set_allocated_resolved_primary_key_node(::zetasql::ResolvedPrimaryKeyProto* resolved_primary_key_node);

  // optional .zetasql.ResolvedForeignKeyProto resolved_foreign_key_node = 110;
  bool has_resolved_foreign_key_node() const;
  void clear_resolved_foreign_key_node();
  static const int kResolvedForeignKeyNodeFieldNumber = 110;
  private:
  const ::zetasql::ResolvedForeignKeyProto& _internal_resolved_foreign_key_node() const;
  public:
  const ::zetasql::ResolvedForeignKeyProto& resolved_foreign_key_node() const;
  ::zetasql::ResolvedForeignKeyProto* release_resolved_foreign_key_node();
  ::zetasql::ResolvedForeignKeyProto* mutable_resolved_foreign_key_node();
  void set_allocated_resolved_foreign_key_node(::zetasql::ResolvedForeignKeyProto* resolved_foreign_key_node);

  // optional .zetasql.ResolvedCheckConstraintProto resolved_check_constraint_node = 113;
  bool has_resolved_check_constraint_node() const;
  void clear_resolved_check_constraint_node();
  static const int kResolvedCheckConstraintNodeFieldNumber = 113;
  private:
  const ::zetasql::ResolvedCheckConstraintProto& _internal_resolved_check_constraint_node() const;
  public:
  const ::zetasql::ResolvedCheckConstraintProto& resolved_check_constraint_node() const;
  ::zetasql::ResolvedCheckConstraintProto* release_resolved_check_constraint_node();
  ::zetasql::ResolvedCheckConstraintProto* mutable_resolved_check_constraint_node();
  void set_allocated_resolved_check_constraint_node(::zetasql::ResolvedCheckConstraintProto* resolved_check_constraint_node);

  void clear_node();
  NodeCase node_case() const;
  // @@protoc_insertion_point(class_scope:zetasql.AnyResolvedConstraintProto)
 private:
  void set_has_resolved_primary_key_node();
  void set_has_resolved_foreign_key_node();
  void set_has_resolved_check_constraint_node();

  inline bool has_node() const;
  inline void clear_has_node();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union NodeUnion {
    NodeUnion() {}
    ::zetasql::ResolvedPrimaryKeyProto* resolved_primary_key_node_;
    ::zetasql::ResolvedForeignKeyProto* resolved_foreign_key_node_;
    ::zetasql::ResolvedCheckConstraintProto* resolved_check_constraint_node_;
  } node_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedConstraintProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedConstraintProto) */ {
 public:
  ResolvedConstraintProto();
  virtual ~ResolvedConstraintProto();

  ResolvedConstraintProto(const ResolvedConstraintProto& from);

  inline ResolvedConstraintProto& operator=(const ResolvedConstraintProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedConstraintProto(ResolvedConstraintProto&& from) noexcept
    : ResolvedConstraintProto() {
    *this = ::std::move(from);
  }

  inline ResolvedConstraintProto& operator=(ResolvedConstraintProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedConstraintProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedConstraintProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedConstraintProto*>(
               &_ResolvedConstraintProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  void Swap(ResolvedConstraintProto* other);
  friend void swap(ResolvedConstraintProto& a, ResolvedConstraintProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedConstraintProto* New() const final {
    return CreateMaybeMessage<ResolvedConstraintProto>(NULL);
  }

  ResolvedConstraintProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedConstraintProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedConstraintProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedConstraintProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedArgumentProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedPrimaryKeyProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedPrimaryKeyProto) */ {
 public:
  ResolvedPrimaryKeyProto();
  virtual ~ResolvedPrimaryKeyProto();

  ResolvedPrimaryKeyProto(const ResolvedPrimaryKeyProto& from);

  inline ResolvedPrimaryKeyProto& operator=(const ResolvedPrimaryKeyProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedPrimaryKeyProto(ResolvedPrimaryKeyProto&& from) noexcept
    : ResolvedPrimaryKeyProto() {
    *this = ::std::move(from);
  }

  inline ResolvedPrimaryKeyProto& operator=(ResolvedPrimaryKeyProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedPrimaryKeyProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedPrimaryKeyProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedPrimaryKeyProto*>(
               &_ResolvedPrimaryKeyProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  void Swap(ResolvedPrimaryKeyProto* other);
  friend void swap(ResolvedPrimaryKeyProto& a, ResolvedPrimaryKeyProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedPrimaryKeyProto* New() const final {
    return CreateMaybeMessage<ResolvedPrimaryKeyProto>(NULL);
  }

  ResolvedPrimaryKeyProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedPrimaryKeyProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedPrimaryKeyProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 column_offset_list = 2;
  int column_offset_list_size() const;
  void clear_column_offset_list();
  static const int kColumnOffsetListFieldNumber = 2;
  ::google::protobuf::int64 column_offset_list(int index) const;
  void set_column_offset_list(int index, ::google::protobuf::int64 value);
  void add_column_offset_list(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      column_offset_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_column_offset_list();

  // repeated .zetasql.ResolvedOptionProto option_list = 3;
  int option_list_size() const;
  void clear_option_list();
  static const int kOptionListFieldNumber = 3;
  ::zetasql::ResolvedOptionProto* mutable_option_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_option_list();
  const ::zetasql::ResolvedOptionProto& option_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_option_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      option_list() const;

  // repeated string column_name_list = 6;
  int column_name_list_size() const;
  void clear_column_name_list();
  static const int kColumnNameListFieldNumber = 6;
  const ::std::string& column_name_list(int index) const;
  ::std::string* mutable_column_name_list(int index);
  void set_column_name_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_column_name_list(int index, ::std::string&& value);
  #endif
  void set_column_name_list(int index, const char* value);
  void set_column_name_list(int index, const char* value, size_t size);
  ::std::string* add_column_name_list();
  void add_column_name_list(const ::std::string& value);
  #if LANG_CXX11
  void add_column_name_list(::std::string&& value);
  #endif
  void add_column_name_list(const char* value);
  void add_column_name_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& column_name_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_column_name_list();

  // optional string constraint_name = 5;
  bool has_constraint_name() const;
  void clear_constraint_name();
  static const int kConstraintNameFieldNumber = 5;
  const ::std::string& constraint_name() const;
  void set_constraint_name(const ::std::string& value);
  #if LANG_CXX11
  void set_constraint_name(::std::string&& value);
  #endif
  void set_constraint_name(const char* value);
  void set_constraint_name(const char* value, size_t size);
  ::std::string* mutable_constraint_name();
  ::std::string* release_constraint_name();
  void set_allocated_constraint_name(::std::string* constraint_name);

  // optional .zetasql.ResolvedConstraintProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedConstraintProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedConstraintProto& parent() const;
  ::zetasql::ResolvedConstraintProto* release_parent();
  ::zetasql::ResolvedConstraintProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedConstraintProto* parent);

  // optional bool unenforced = 4;
  bool has_unenforced() const;
  void clear_unenforced();
  static const int kUnenforcedFieldNumber = 4;
  bool unenforced() const;
  void set_unenforced(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedPrimaryKeyProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_unenforced();
  void clear_has_unenforced();
  void set_has_constraint_name();
  void clear_has_constraint_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > column_offset_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > option_list_;
  ::google::protobuf::RepeatedPtrField< ::std::string> column_name_list_;
  ::google::protobuf::internal::ArenaStringPtr constraint_name_;
  ::zetasql::ResolvedConstraintProto* parent_;
  bool unenforced_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedForeignKeyProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedForeignKeyProto) */ {
 public:
  ResolvedForeignKeyProto();
  virtual ~ResolvedForeignKeyProto();

  ResolvedForeignKeyProto(const ResolvedForeignKeyProto& from);

  inline ResolvedForeignKeyProto& operator=(const ResolvedForeignKeyProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedForeignKeyProto(ResolvedForeignKeyProto&& from) noexcept
    : ResolvedForeignKeyProto() {
    *this = ::std::move(from);
  }

  inline ResolvedForeignKeyProto& operator=(ResolvedForeignKeyProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedForeignKeyProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedForeignKeyProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedForeignKeyProto*>(
               &_ResolvedForeignKeyProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  void Swap(ResolvedForeignKeyProto* other);
  friend void swap(ResolvedForeignKeyProto& a, ResolvedForeignKeyProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedForeignKeyProto* New() const final {
    return CreateMaybeMessage<ResolvedForeignKeyProto>(NULL);
  }

  ResolvedForeignKeyProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedForeignKeyProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedForeignKeyProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 referencing_column_offset_list = 3;
  int referencing_column_offset_list_size() const;
  void clear_referencing_column_offset_list();
  static const int kReferencingColumnOffsetListFieldNumber = 3;
  ::google::protobuf::int64 referencing_column_offset_list(int index) const;
  void set_referencing_column_offset_list(int index, ::google::protobuf::int64 value);
  void add_referencing_column_offset_list(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      referencing_column_offset_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_referencing_column_offset_list();

  // repeated int64 referenced_column_offset_list = 5;
  int referenced_column_offset_list_size() const;
  void clear_referenced_column_offset_list();
  static const int kReferencedColumnOffsetListFieldNumber = 5;
  ::google::protobuf::int64 referenced_column_offset_list(int index) const;
  void set_referenced_column_offset_list(int index, ::google::protobuf::int64 value);
  void add_referenced_column_offset_list(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      referenced_column_offset_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_referenced_column_offset_list();

  // repeated .zetasql.ResolvedOptionProto option_list = 10;
  int option_list_size() const;
  void clear_option_list();
  static const int kOptionListFieldNumber = 10;
  ::zetasql::ResolvedOptionProto* mutable_option_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_option_list();
  const ::zetasql::ResolvedOptionProto& option_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_option_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      option_list() const;

  // repeated string referencing_column_list = 11;
  int referencing_column_list_size() const;
  void clear_referencing_column_list();
  static const int kReferencingColumnListFieldNumber = 11;
  const ::std::string& referencing_column_list(int index) const;
  ::std::string* mutable_referencing_column_list(int index);
  void set_referencing_column_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_referencing_column_list(int index, ::std::string&& value);
  #endif
  void set_referencing_column_list(int index, const char* value);
  void set_referencing_column_list(int index, const char* value, size_t size);
  ::std::string* add_referencing_column_list();
  void add_referencing_column_list(const ::std::string& value);
  #if LANG_CXX11
  void add_referencing_column_list(::std::string&& value);
  #endif
  void add_referencing_column_list(const char* value);
  void add_referencing_column_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& referencing_column_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_referencing_column_list();

  // optional string constraint_name = 2;
  bool has_constraint_name() const;
  void clear_constraint_name();
  static const int kConstraintNameFieldNumber = 2;
  const ::std::string& constraint_name() const;
  void set_constraint_name(const ::std::string& value);
  #if LANG_CXX11
  void set_constraint_name(::std::string&& value);
  #endif
  void set_constraint_name(const char* value);
  void set_constraint_name(const char* value, size_t size);
  ::std::string* mutable_constraint_name();
  ::std::string* release_constraint_name();
  void set_allocated_constraint_name(::std::string* constraint_name);

  // optional .zetasql.ResolvedConstraintProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedConstraintProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedConstraintProto& parent() const;
  ::zetasql::ResolvedConstraintProto* release_parent();
  ::zetasql::ResolvedConstraintProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedConstraintProto* parent);

  // optional .zetasql.TableRefProto referenced_table = 4;
  bool has_referenced_table() const;
  void clear_referenced_table();
  static const int kReferencedTableFieldNumber = 4;
  private:
  const ::zetasql::TableRefProto& _internal_referenced_table() const;
  public:
  const ::zetasql::TableRefProto& referenced_table() const;
  ::zetasql::TableRefProto* release_referenced_table();
  ::zetasql::TableRefProto* mutable_referenced_table();
  void set_allocated_referenced_table(::zetasql::TableRefProto* referenced_table);

  // optional .zetasql.ResolvedForeignKeyEnums.MatchMode match_mode = 6;
  bool has_match_mode() const;
  void clear_match_mode();
  static const int kMatchModeFieldNumber = 6;
  ::zetasql::ResolvedForeignKeyEnums_MatchMode match_mode() const;
  void set_match_mode(::zetasql::ResolvedForeignKeyEnums_MatchMode value);

  // optional .zetasql.ResolvedForeignKeyEnums.ActionOperation update_action = 7;
  bool has_update_action() const;
  void clear_update_action();
  static const int kUpdateActionFieldNumber = 7;
  ::zetasql::ResolvedForeignKeyEnums_ActionOperation update_action() const;
  void set_update_action(::zetasql::ResolvedForeignKeyEnums_ActionOperation value);

  // optional .zetasql.ResolvedForeignKeyEnums.ActionOperation delete_action = 8;
  bool has_delete_action() const;
  void clear_delete_action();
  static const int kDeleteActionFieldNumber = 8;
  ::zetasql::ResolvedForeignKeyEnums_ActionOperation delete_action() const;
  void set_delete_action(::zetasql::ResolvedForeignKeyEnums_ActionOperation value);

  // optional bool enforced = 9;
  bool has_enforced() const;
  void clear_enforced();
  static const int kEnforcedFieldNumber = 9;
  bool enforced() const;
  void set_enforced(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedForeignKeyProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_constraint_name();
  void clear_has_constraint_name();
  void set_has_referenced_table();
  void clear_has_referenced_table();
  void set_has_match_mode();
  void clear_has_match_mode();
  void set_has_update_action();
  void clear_has_update_action();
  void set_has_delete_action();
  void clear_has_delete_action();
  void set_has_enforced();
  void clear_has_enforced();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > referencing_column_offset_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > referenced_column_offset_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > option_list_;
  ::google::protobuf::RepeatedPtrField< ::std::string> referencing_column_list_;
  ::google::protobuf::internal::ArenaStringPtr constraint_name_;
  ::zetasql::ResolvedConstraintProto* parent_;
  ::zetasql::TableRefProto* referenced_table_;
  int match_mode_;
  int update_action_;
  int delete_action_;
  bool enforced_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedCheckConstraintProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedCheckConstraintProto) */ {
 public:
  ResolvedCheckConstraintProto();
  virtual ~ResolvedCheckConstraintProto();

  ResolvedCheckConstraintProto(const ResolvedCheckConstraintProto& from);

  inline ResolvedCheckConstraintProto& operator=(const ResolvedCheckConstraintProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedCheckConstraintProto(ResolvedCheckConstraintProto&& from) noexcept
    : ResolvedCheckConstraintProto() {
    *this = ::std::move(from);
  }

  inline ResolvedCheckConstraintProto& operator=(ResolvedCheckConstraintProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedCheckConstraintProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedCheckConstraintProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedCheckConstraintProto*>(
               &_ResolvedCheckConstraintProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  void Swap(ResolvedCheckConstraintProto* other);
  friend void swap(ResolvedCheckConstraintProto& a, ResolvedCheckConstraintProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedCheckConstraintProto* New() const final {
    return CreateMaybeMessage<ResolvedCheckConstraintProto>(NULL);
  }

  ResolvedCheckConstraintProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedCheckConstraintProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedCheckConstraintProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedOptionProto option_list = 5;
  int option_list_size() const;
  void clear_option_list();
  static const int kOptionListFieldNumber = 5;
  ::zetasql::ResolvedOptionProto* mutable_option_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_option_list();
  const ::zetasql::ResolvedOptionProto& option_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_option_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      option_list() const;

  // optional string constraint_name = 2;
  bool has_constraint_name() const;
  void clear_constraint_name();
  static const int kConstraintNameFieldNumber = 2;
  const ::std::string& constraint_name() const;
  void set_constraint_name(const ::std::string& value);
  #if LANG_CXX11
  void set_constraint_name(::std::string&& value);
  #endif
  void set_constraint_name(const char* value);
  void set_constraint_name(const char* value, size_t size);
  ::std::string* mutable_constraint_name();
  ::std::string* release_constraint_name();
  void set_allocated_constraint_name(::std::string* constraint_name);

  // optional .zetasql.ResolvedConstraintProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedConstraintProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedConstraintProto& parent() const;
  ::zetasql::ResolvedConstraintProto* release_parent();
  ::zetasql::ResolvedConstraintProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedConstraintProto* parent);

  // optional .zetasql.AnyResolvedExprProto expression = 3;
  bool has_expression() const;
  void clear_expression();
  static const int kExpressionFieldNumber = 3;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_expression() const;
  public:
  const ::zetasql::AnyResolvedExprProto& expression() const;
  ::zetasql::AnyResolvedExprProto* release_expression();
  ::zetasql::AnyResolvedExprProto* mutable_expression();
  void set_allocated_expression(::zetasql::AnyResolvedExprProto* expression);

  // optional bool enforced = 4;
  bool has_enforced() const;
  void clear_enforced();
  static const int kEnforcedFieldNumber = 4;
  bool enforced() const;
  void set_enforced(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedCheckConstraintProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_constraint_name();
  void clear_has_constraint_name();
  void set_has_expression();
  void clear_has_expression();
  void set_has_enforced();
  void clear_has_enforced();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > option_list_;
  ::google::protobuf::internal::ArenaStringPtr constraint_name_;
  ::zetasql::ResolvedConstraintProto* parent_;
  ::zetasql::AnyResolvedExprProto* expression_;
  bool enforced_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedOutputColumnProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedOutputColumnProto) */ {
 public:
  ResolvedOutputColumnProto();
  virtual ~ResolvedOutputColumnProto();

  ResolvedOutputColumnProto(const ResolvedOutputColumnProto& from);

  inline ResolvedOutputColumnProto& operator=(const ResolvedOutputColumnProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedOutputColumnProto(ResolvedOutputColumnProto&& from) noexcept
    : ResolvedOutputColumnProto() {
    *this = ::std::move(from);
  }

  inline ResolvedOutputColumnProto& operator=(ResolvedOutputColumnProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedOutputColumnProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedOutputColumnProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedOutputColumnProto*>(
               &_ResolvedOutputColumnProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  void Swap(ResolvedOutputColumnProto* other);
  friend void swap(ResolvedOutputColumnProto& a, ResolvedOutputColumnProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedOutputColumnProto* New() const final {
    return CreateMaybeMessage<ResolvedOutputColumnProto>(NULL);
  }

  ResolvedOutputColumnProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedOutputColumnProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedOutputColumnProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.ResolvedColumnProto column = 3;
  bool has_column() const;
  void clear_column();
  static const int kColumnFieldNumber = 3;
  private:
  const ::zetasql::ResolvedColumnProto& _internal_column() const;
  public:
  const ::zetasql::ResolvedColumnProto& column() const;
  ::zetasql::ResolvedColumnProto* release_column();
  ::zetasql::ResolvedColumnProto* mutable_column();
  void set_allocated_column(::zetasql::ResolvedColumnProto* column);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedOutputColumnProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_name();
  void clear_has_name();
  void set_has_column();
  void clear_has_column();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::ResolvedColumnProto* column_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedProjectScanProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedProjectScanProto) */ {
 public:
  ResolvedProjectScanProto();
  virtual ~ResolvedProjectScanProto();

  ResolvedProjectScanProto(const ResolvedProjectScanProto& from);

  inline ResolvedProjectScanProto& operator=(const ResolvedProjectScanProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedProjectScanProto(ResolvedProjectScanProto&& from) noexcept
    : ResolvedProjectScanProto() {
    *this = ::std::move(from);
  }

  inline ResolvedProjectScanProto& operator=(ResolvedProjectScanProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedProjectScanProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedProjectScanProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedProjectScanProto*>(
               &_ResolvedProjectScanProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  void Swap(ResolvedProjectScanProto* other);
  friend void swap(ResolvedProjectScanProto& a, ResolvedProjectScanProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedProjectScanProto* New() const final {
    return CreateMaybeMessage<ResolvedProjectScanProto>(NULL);
  }

  ResolvedProjectScanProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedProjectScanProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedProjectScanProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedComputedColumnProto expr_list = 2;
  int expr_list_size() const;
  void clear_expr_list();
  static const int kExprListFieldNumber = 2;
  ::zetasql::ResolvedComputedColumnProto* mutable_expr_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >*
      mutable_expr_list();
  const ::zetasql::ResolvedComputedColumnProto& expr_list(int index) const;
  ::zetasql::ResolvedComputedColumnProto* add_expr_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >&
      expr_list() const;

  // optional .zetasql.ResolvedScanProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedScanProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedScanProto& parent() const;
  ::zetasql::ResolvedScanProto* release_parent();
  ::zetasql::ResolvedScanProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedScanProto* parent);

  // optional .zetasql.AnyResolvedScanProto input_scan = 3;
  bool has_input_scan() const;
  void clear_input_scan();
  static const int kInputScanFieldNumber = 3;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_input_scan() const;
  public:
  const ::zetasql::AnyResolvedScanProto& input_scan() const;
  ::zetasql::AnyResolvedScanProto* release_input_scan();
  ::zetasql::AnyResolvedScanProto* mutable_input_scan();
  void set_allocated_input_scan(::zetasql::AnyResolvedScanProto* input_scan);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedProjectScanProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_input_scan();
  void clear_has_input_scan();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto > expr_list_;
  ::zetasql::ResolvedScanProto* parent_;
  ::zetasql::AnyResolvedScanProto* input_scan_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedTVFScanProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedTVFScanProto) */ {
 public:
  ResolvedTVFScanProto();
  virtual ~ResolvedTVFScanProto();

  ResolvedTVFScanProto(const ResolvedTVFScanProto& from);

  inline ResolvedTVFScanProto& operator=(const ResolvedTVFScanProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedTVFScanProto(ResolvedTVFScanProto&& from) noexcept
    : ResolvedTVFScanProto() {
    *this = ::std::move(from);
  }

  inline ResolvedTVFScanProto& operator=(ResolvedTVFScanProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedTVFScanProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedTVFScanProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedTVFScanProto*>(
               &_ResolvedTVFScanProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  void Swap(ResolvedTVFScanProto* other);
  friend void swap(ResolvedTVFScanProto& a, ResolvedTVFScanProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedTVFScanProto* New() const final {
    return CreateMaybeMessage<ResolvedTVFScanProto>(NULL);
  }

  ResolvedTVFScanProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedTVFScanProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedTVFScanProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedFunctionArgumentProto argument_list = 5;
  int argument_list_size() const;
  void clear_argument_list();
  static const int kArgumentListFieldNumber = 5;
  ::zetasql::ResolvedFunctionArgumentProto* mutable_argument_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedFunctionArgumentProto >*
      mutable_argument_list();
  const ::zetasql::ResolvedFunctionArgumentProto& argument_list(int index) const;
  ::zetasql::ResolvedFunctionArgumentProto* add_argument_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedFunctionArgumentProto >&
      argument_list() const;

  // repeated int64 column_index_list = 8;
  int column_index_list_size() const;
  void clear_column_index_list();
  static const int kColumnIndexListFieldNumber = 8;
  ::google::protobuf::int64 column_index_list(int index) const;
  void set_column_index_list(int index, ::google::protobuf::int64 value);
  void add_column_index_list(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      column_index_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_column_index_list();

  // optional string alias = 6;
  bool has_alias() const;
  void clear_alias();
  static const int kAliasFieldNumber = 6;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // optional .zetasql.ResolvedScanProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedScanProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedScanProto& parent() const;
  ::zetasql::ResolvedScanProto* release_parent();
  ::zetasql::ResolvedScanProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedScanProto* parent);

  // optional .zetasql.TableValuedFunctionRefProto tvf = 2;
  bool has_tvf() const;
  void clear_tvf();
  static const int kTvfFieldNumber = 2;
  private:
  const ::zetasql::TableValuedFunctionRefProto& _internal_tvf() const;
  public:
  const ::zetasql::TableValuedFunctionRefProto& tvf() const;
  ::zetasql::TableValuedFunctionRefProto* release_tvf();
  ::zetasql::TableValuedFunctionRefProto* mutable_tvf();
  void set_allocated_tvf(::zetasql::TableValuedFunctionRefProto* tvf);

  // optional .zetasql.TVFSignatureProto signature = 3;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 3;
  private:
  const ::zetasql::TVFSignatureProto& _internal_signature() const;
  public:
  const ::zetasql::TVFSignatureProto& signature() const;
  ::zetasql::TVFSignatureProto* release_signature();
  ::zetasql::TVFSignatureProto* mutable_signature();
  void set_allocated_signature(::zetasql::TVFSignatureProto* signature);

  // optional .zetasql.FunctionSignatureProto function_call_signature = 7;
  bool has_function_call_signature() const;
  void clear_function_call_signature();
  static const int kFunctionCallSignatureFieldNumber = 7;
  private:
  const ::zetasql::FunctionSignatureProto& _internal_function_call_signature() const;
  public:
  const ::zetasql::FunctionSignatureProto& function_call_signature() const;
  ::zetasql::FunctionSignatureProto* release_function_call_signature();
  ::zetasql::FunctionSignatureProto* mutable_function_call_signature();
  void set_allocated_function_call_signature(::zetasql::FunctionSignatureProto* function_call_signature);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedTVFScanProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_tvf();
  void clear_has_tvf();
  void set_has_signature();
  void clear_has_signature();
  void set_has_alias();
  void clear_has_alias();
  void set_has_function_call_signature();
  void clear_has_function_call_signature();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedFunctionArgumentProto > argument_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > column_index_list_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::zetasql::ResolvedScanProto* parent_;
  ::zetasql::TableValuedFunctionRefProto* tvf_;
  ::zetasql::TVFSignatureProto* signature_;
  ::zetasql::FunctionSignatureProto* function_call_signature_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedGroupRowsScanProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedGroupRowsScanProto) */ {
 public:
  ResolvedGroupRowsScanProto();
  virtual ~ResolvedGroupRowsScanProto();

  ResolvedGroupRowsScanProto(const ResolvedGroupRowsScanProto& from);

  inline ResolvedGroupRowsScanProto& operator=(const ResolvedGroupRowsScanProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedGroupRowsScanProto(ResolvedGroupRowsScanProto&& from) noexcept
    : ResolvedGroupRowsScanProto() {
    *this = ::std::move(from);
  }

  inline ResolvedGroupRowsScanProto& operator=(ResolvedGroupRowsScanProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedGroupRowsScanProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedGroupRowsScanProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedGroupRowsScanProto*>(
               &_ResolvedGroupRowsScanProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  void Swap(ResolvedGroupRowsScanProto* other);
  friend void swap(ResolvedGroupRowsScanProto& a, ResolvedGroupRowsScanProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedGroupRowsScanProto* New() const final {
    return CreateMaybeMessage<ResolvedGroupRowsScanProto>(NULL);
  }

  ResolvedGroupRowsScanProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedGroupRowsScanProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedGroupRowsScanProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedComputedColumnProto input_column_list = 2;
  int input_column_list_size() const;
  void clear_input_column_list();
  static const int kInputColumnListFieldNumber = 2;
  ::zetasql::ResolvedComputedColumnProto* mutable_input_column_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >*
      mutable_input_column_list();
  const ::zetasql::ResolvedComputedColumnProto& input_column_list(int index) const;
  ::zetasql::ResolvedComputedColumnProto* add_input_column_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >&
      input_column_list() const;

  // optional string alias = 3;
  bool has_alias() const;
  void clear_alias();
  static const int kAliasFieldNumber = 3;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // optional .zetasql.ResolvedScanProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedScanProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedScanProto& parent() const;
  ::zetasql::ResolvedScanProto* release_parent();
  ::zetasql::ResolvedScanProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedScanProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedGroupRowsScanProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_alias();
  void clear_has_alias();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto > input_column_list_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::zetasql::ResolvedScanProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedFunctionArgumentProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedFunctionArgumentProto) */ {
 public:
  ResolvedFunctionArgumentProto();
  virtual ~ResolvedFunctionArgumentProto();

  ResolvedFunctionArgumentProto(const ResolvedFunctionArgumentProto& from);

  inline ResolvedFunctionArgumentProto& operator=(const ResolvedFunctionArgumentProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedFunctionArgumentProto(ResolvedFunctionArgumentProto&& from) noexcept
    : ResolvedFunctionArgumentProto() {
    *this = ::std::move(from);
  }

  inline ResolvedFunctionArgumentProto& operator=(ResolvedFunctionArgumentProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedFunctionArgumentProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedFunctionArgumentProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedFunctionArgumentProto*>(
               &_ResolvedFunctionArgumentProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  void Swap(ResolvedFunctionArgumentProto* other);
  friend void swap(ResolvedFunctionArgumentProto& a, ResolvedFunctionArgumentProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedFunctionArgumentProto* New() const final {
    return CreateMaybeMessage<ResolvedFunctionArgumentProto>(NULL);
  }

  ResolvedFunctionArgumentProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedFunctionArgumentProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedFunctionArgumentProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedColumnProto argument_column_list = 4;
  int argument_column_list_size() const;
  void clear_argument_column_list();
  static const int kArgumentColumnListFieldNumber = 4;
  ::zetasql::ResolvedColumnProto* mutable_argument_column_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >*
      mutable_argument_column_list();
  const ::zetasql::ResolvedColumnProto& argument_column_list(int index) const;
  ::zetasql::ResolvedColumnProto* add_argument_column_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >&
      argument_column_list() const;

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.AnyResolvedExprProto expr = 2;
  bool has_expr() const;
  void clear_expr();
  static const int kExprFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_expr() const;
  public:
  const ::zetasql::AnyResolvedExprProto& expr() const;
  ::zetasql::AnyResolvedExprProto* release_expr();
  ::zetasql::AnyResolvedExprProto* mutable_expr();
  void set_allocated_expr(::zetasql::AnyResolvedExprProto* expr);

  // optional .zetasql.AnyResolvedScanProto scan = 3;
  bool has_scan() const;
  void clear_scan();
  static const int kScanFieldNumber = 3;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_scan() const;
  public:
  const ::zetasql::AnyResolvedScanProto& scan() const;
  ::zetasql::AnyResolvedScanProto* release_scan();
  ::zetasql::AnyResolvedScanProto* mutable_scan();
  void set_allocated_scan(::zetasql::AnyResolvedScanProto* scan);

  // optional .zetasql.ResolvedModelProto model = 5;
  bool has_model() const;
  void clear_model();
  static const int kModelFieldNumber = 5;
  private:
  const ::zetasql::ResolvedModelProto& _internal_model() const;
  public:
  const ::zetasql::ResolvedModelProto& model() const;
  ::zetasql::ResolvedModelProto* release_model();
  ::zetasql::ResolvedModelProto* mutable_model();
  void set_allocated_model(::zetasql::ResolvedModelProto* model);

  // optional .zetasql.ResolvedConnectionProto connection = 6;
  bool has_connection() const;
  void clear_connection();
  static const int kConnectionFieldNumber = 6;
  private:
  const ::zetasql::ResolvedConnectionProto& _internal_connection() const;
  public:
  const ::zetasql::ResolvedConnectionProto& connection() const;
  ::zetasql::ResolvedConnectionProto* release_connection();
  ::zetasql::ResolvedConnectionProto* mutable_connection();
  void set_allocated_connection(::zetasql::ResolvedConnectionProto* connection);

  // optional .zetasql.ResolvedDescriptorProto descriptor_arg = 7;
  bool has_descriptor_arg() const;
  void clear_descriptor_arg();
  static const int kDescriptorArgFieldNumber = 7;
  private:
  const ::zetasql::ResolvedDescriptorProto& _internal_descriptor_arg() const;
  public:
  const ::zetasql::ResolvedDescriptorProto& descriptor_arg() const;
  ::zetasql::ResolvedDescriptorProto* release_descriptor_arg();
  ::zetasql::ResolvedDescriptorProto* mutable_descriptor_arg();
  void set_allocated_descriptor_arg(::zetasql::ResolvedDescriptorProto* descriptor_arg);

  // optional .zetasql.ResolvedInlineLambdaProto inline_lambda = 8;
  bool has_inline_lambda() const;
  void clear_inline_lambda();
  static const int kInlineLambdaFieldNumber = 8;
  private:
  const ::zetasql::ResolvedInlineLambdaProto& _internal_inline_lambda() const;
  public:
  const ::zetasql::ResolvedInlineLambdaProto& inline_lambda() const;
  ::zetasql::ResolvedInlineLambdaProto* release_inline_lambda();
  ::zetasql::ResolvedInlineLambdaProto* mutable_inline_lambda();
  void set_allocated_inline_lambda(::zetasql::ResolvedInlineLambdaProto* inline_lambda);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedFunctionArgumentProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_expr();
  void clear_has_expr();
  void set_has_scan();
  void clear_has_scan();
  void set_has_model();
  void clear_has_model();
  void set_has_connection();
  void clear_has_connection();
  void set_has_descriptor_arg();
  void clear_has_descriptor_arg();
  void set_has_inline_lambda();
  void clear_has_inline_lambda();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto > argument_column_list_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::AnyResolvedExprProto* expr_;
  ::zetasql::AnyResolvedScanProto* scan_;
  ::zetasql::ResolvedModelProto* model_;
  ::zetasql::ResolvedConnectionProto* connection_;
  ::zetasql::ResolvedDescriptorProto* descriptor_arg_;
  ::zetasql::ResolvedInlineLambdaProto* inline_lambda_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnyResolvedStatementProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.AnyResolvedStatementProto) */ {
 public:
  AnyResolvedStatementProto();
  virtual ~AnyResolvedStatementProto();

  AnyResolvedStatementProto(const AnyResolvedStatementProto& from);

  inline AnyResolvedStatementProto& operator=(const AnyResolvedStatementProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnyResolvedStatementProto(AnyResolvedStatementProto&& from) noexcept
    : AnyResolvedStatementProto() {
    *this = ::std::move(from);
  }

  inline AnyResolvedStatementProto& operator=(AnyResolvedStatementProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnyResolvedStatementProto& default_instance();

  enum NodeCase {
    kResolvedExplainStmtNode = 37,
    kResolvedQueryStmtNode = 38,
    kResolvedCreateStatementNode = 39,
    kResolvedExportDataStmtNode = 43,
    kResolvedDefineTableStmtNode = 44,
    kResolvedDescribeStmtNode = 45,
    kResolvedShowStmtNode = 46,
    kResolvedBeginStmtNode = 47,
    kResolvedCommitStmtNode = 48,
    kResolvedRollbackStmtNode = 49,
    kResolvedDropStmtNode = 50,
    kResolvedInsertStmtNode = 63,
    kResolvedDeleteStmtNode = 64,
    kResolvedUpdateStmtNode = 66,
    kResolvedGrantOrRevokeStmtNode = 68,
    kResolvedAlterTableSetOptionsStmtNode = 71,
    kResolvedRenameStmtNode = 72,
    kResolvedCreateRowAccessPolicyStmtNode = 73,
    kResolvedDropRowAccessPolicyStmtNode = 74,
    kResolvedDropFunctionStmtNode = 80,
    kResolvedCallStmtNode = 83,
    kResolvedImportStmtNode = 86,
    kResolvedModuleStmtNode = 87,
    kResolvedCreateDatabaseStmtNode = 95,
    kResolvedAssertStmtNode = 98,
    kResolvedMergeStmtNode = 101,
    kResolvedAlterObjectStmtNode = 114,
    kResolvedSetTransactionStmtNode = 120,
    kResolvedDropMaterializedViewStmtNode = 121,
    kResolvedStartBatchStmtNode = 122,
    kResolvedRunBatchStmtNode = 123,
    kResolvedAbortBatchStmtNode = 124,
    kResolvedTruncateStmtNode = 133,
    kResolvedExecuteImmediateStmtNode = 140,
    kResolvedAssignmentStmtNode = 142,
    kResolvedExportModelStmtNode = 152,
    kResolvedDropTableFunctionStmtNode = 175,
    kResolvedCloneDataStmtNode = 177,
    kResolvedAnalyzeStmtNode = 180,
    kResolvedDropSnapshotTableStmtNode = 183,
    kResolvedAuxLoadDataStmtNode = 186,
    kResolvedDropSearchIndexStmtNode = 190,
    kResolvedDropPrivilegeRestrictionStmtNode = 192,
    NODE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnyResolvedStatementProto* internal_default_instance() {
    return reinterpret_cast<const AnyResolvedStatementProto*>(
               &_AnyResolvedStatementProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  void Swap(AnyResolvedStatementProto* other);
  friend void swap(AnyResolvedStatementProto& a, AnyResolvedStatementProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnyResolvedStatementProto* New() const final {
    return CreateMaybeMessage<AnyResolvedStatementProto>(NULL);
  }

  AnyResolvedStatementProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnyResolvedStatementProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyResolvedStatementProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedExplainStmtProto resolved_explain_stmt_node = 37;
  bool has_resolved_explain_stmt_node() const;
  void clear_resolved_explain_stmt_node();
  static const int kResolvedExplainStmtNodeFieldNumber = 37;
  private:
  const ::zetasql::ResolvedExplainStmtProto& _internal_resolved_explain_stmt_node() const;
  public:
  const ::zetasql::ResolvedExplainStmtProto& resolved_explain_stmt_node() const;
  ::zetasql::ResolvedExplainStmtProto* release_resolved_explain_stmt_node();
  ::zetasql::ResolvedExplainStmtProto* mutable_resolved_explain_stmt_node();
  void set_allocated_resolved_explain_stmt_node(::zetasql::ResolvedExplainStmtProto* resolved_explain_stmt_node);

  // optional .zetasql.ResolvedQueryStmtProto resolved_query_stmt_node = 38;
  bool has_resolved_query_stmt_node() const;
  void clear_resolved_query_stmt_node();
  static const int kResolvedQueryStmtNodeFieldNumber = 38;
  private:
  const ::zetasql::ResolvedQueryStmtProto& _internal_resolved_query_stmt_node() const;
  public:
  const ::zetasql::ResolvedQueryStmtProto& resolved_query_stmt_node() const;
  ::zetasql::ResolvedQueryStmtProto* release_resolved_query_stmt_node();
  ::zetasql::ResolvedQueryStmtProto* mutable_resolved_query_stmt_node();
  void set_allocated_resolved_query_stmt_node(::zetasql::ResolvedQueryStmtProto* resolved_query_stmt_node);

  // optional .zetasql.AnyResolvedCreateStatementProto resolved_create_statement_node = 39;
  bool has_resolved_create_statement_node() const;
  void clear_resolved_create_statement_node();
  static const int kResolvedCreateStatementNodeFieldNumber = 39;
  private:
  const ::zetasql::AnyResolvedCreateStatementProto& _internal_resolved_create_statement_node() const;
  public:
  const ::zetasql::AnyResolvedCreateStatementProto& resolved_create_statement_node() const;
  ::zetasql::AnyResolvedCreateStatementProto* release_resolved_create_statement_node();
  ::zetasql::AnyResolvedCreateStatementProto* mutable_resolved_create_statement_node();
  void set_allocated_resolved_create_statement_node(::zetasql::AnyResolvedCreateStatementProto* resolved_create_statement_node);

  // optional .zetasql.ResolvedExportDataStmtProto resolved_export_data_stmt_node = 43;
  bool has_resolved_export_data_stmt_node() const;
  void clear_resolved_export_data_stmt_node();
  static const int kResolvedExportDataStmtNodeFieldNumber = 43;
  private:
  const ::zetasql::ResolvedExportDataStmtProto& _internal_resolved_export_data_stmt_node() const;
  public:
  const ::zetasql::ResolvedExportDataStmtProto& resolved_export_data_stmt_node() const;
  ::zetasql::ResolvedExportDataStmtProto* release_resolved_export_data_stmt_node();
  ::zetasql::ResolvedExportDataStmtProto* mutable_resolved_export_data_stmt_node();
  void set_allocated_resolved_export_data_stmt_node(::zetasql::ResolvedExportDataStmtProto* resolved_export_data_stmt_node);

  // optional .zetasql.ResolvedDefineTableStmtProto resolved_define_table_stmt_node = 44;
  bool has_resolved_define_table_stmt_node() const;
  void clear_resolved_define_table_stmt_node();
  static const int kResolvedDefineTableStmtNodeFieldNumber = 44;
  private:
  const ::zetasql::ResolvedDefineTableStmtProto& _internal_resolved_define_table_stmt_node() const;
  public:
  const ::zetasql::ResolvedDefineTableStmtProto& resolved_define_table_stmt_node() const;
  ::zetasql::ResolvedDefineTableStmtProto* release_resolved_define_table_stmt_node();
  ::zetasql::ResolvedDefineTableStmtProto* mutable_resolved_define_table_stmt_node();
  void set_allocated_resolved_define_table_stmt_node(::zetasql::ResolvedDefineTableStmtProto* resolved_define_table_stmt_node);

  // optional .zetasql.ResolvedDescribeStmtProto resolved_describe_stmt_node = 45;
  bool has_resolved_describe_stmt_node() const;
  void clear_resolved_describe_stmt_node();
  static const int kResolvedDescribeStmtNodeFieldNumber = 45;
  private:
  const ::zetasql::ResolvedDescribeStmtProto& _internal_resolved_describe_stmt_node() const;
  public:
  const ::zetasql::ResolvedDescribeStmtProto& resolved_describe_stmt_node() const;
  ::zetasql::ResolvedDescribeStmtProto* release_resolved_describe_stmt_node();
  ::zetasql::ResolvedDescribeStmtProto* mutable_resolved_describe_stmt_node();
  void set_allocated_resolved_describe_stmt_node(::zetasql::ResolvedDescribeStmtProto* resolved_describe_stmt_node);

  // optional .zetasql.ResolvedShowStmtProto resolved_show_stmt_node = 46;
  bool has_resolved_show_stmt_node() const;
  void clear_resolved_show_stmt_node();
  static const int kResolvedShowStmtNodeFieldNumber = 46;
  private:
  const ::zetasql::ResolvedShowStmtProto& _internal_resolved_show_stmt_node() const;
  public:
  const ::zetasql::ResolvedShowStmtProto& resolved_show_stmt_node() const;
  ::zetasql::ResolvedShowStmtProto* release_resolved_show_stmt_node();
  ::zetasql::ResolvedShowStmtProto* mutable_resolved_show_stmt_node();
  void set_allocated_resolved_show_stmt_node(::zetasql::ResolvedShowStmtProto* resolved_show_stmt_node);

  // optional .zetasql.ResolvedBeginStmtProto resolved_begin_stmt_node = 47;
  bool has_resolved_begin_stmt_node() const;
  void clear_resolved_begin_stmt_node();
  static const int kResolvedBeginStmtNodeFieldNumber = 47;
  private:
  const ::zetasql::ResolvedBeginStmtProto& _internal_resolved_begin_stmt_node() const;
  public:
  const ::zetasql::ResolvedBeginStmtProto& resolved_begin_stmt_node() const;
  ::zetasql::ResolvedBeginStmtProto* release_resolved_begin_stmt_node();
  ::zetasql::ResolvedBeginStmtProto* mutable_resolved_begin_stmt_node();
  void set_allocated_resolved_begin_stmt_node(::zetasql::ResolvedBeginStmtProto* resolved_begin_stmt_node);

  // optional .zetasql.ResolvedCommitStmtProto resolved_commit_stmt_node = 48;
  bool has_resolved_commit_stmt_node() const;
  void clear_resolved_commit_stmt_node();
  static const int kResolvedCommitStmtNodeFieldNumber = 48;
  private:
  const ::zetasql::ResolvedCommitStmtProto& _internal_resolved_commit_stmt_node() const;
  public:
  const ::zetasql::ResolvedCommitStmtProto& resolved_commit_stmt_node() const;
  ::zetasql::ResolvedCommitStmtProto* release_resolved_commit_stmt_node();
  ::zetasql::ResolvedCommitStmtProto* mutable_resolved_commit_stmt_node();
  void set_allocated_resolved_commit_stmt_node(::zetasql::ResolvedCommitStmtProto* resolved_commit_stmt_node);

  // optional .zetasql.ResolvedRollbackStmtProto resolved_rollback_stmt_node = 49;
  bool has_resolved_rollback_stmt_node() const;
  void clear_resolved_rollback_stmt_node();
  static const int kResolvedRollbackStmtNodeFieldNumber = 49;
  private:
  const ::zetasql::ResolvedRollbackStmtProto& _internal_resolved_rollback_stmt_node() const;
  public:
  const ::zetasql::ResolvedRollbackStmtProto& resolved_rollback_stmt_node() const;
  ::zetasql::ResolvedRollbackStmtProto* release_resolved_rollback_stmt_node();
  ::zetasql::ResolvedRollbackStmtProto* mutable_resolved_rollback_stmt_node();
  void set_allocated_resolved_rollback_stmt_node(::zetasql::ResolvedRollbackStmtProto* resolved_rollback_stmt_node);

  // optional .zetasql.ResolvedDropStmtProto resolved_drop_stmt_node = 50;
  bool has_resolved_drop_stmt_node() const;
  void clear_resolved_drop_stmt_node();
  static const int kResolvedDropStmtNodeFieldNumber = 50;
  private:
  const ::zetasql::ResolvedDropStmtProto& _internal_resolved_drop_stmt_node() const;
  public:
  const ::zetasql::ResolvedDropStmtProto& resolved_drop_stmt_node() const;
  ::zetasql::ResolvedDropStmtProto* release_resolved_drop_stmt_node();
  ::zetasql::ResolvedDropStmtProto* mutable_resolved_drop_stmt_node();
  void set_allocated_resolved_drop_stmt_node(::zetasql::ResolvedDropStmtProto* resolved_drop_stmt_node);

  // optional .zetasql.ResolvedInsertStmtProto resolved_insert_stmt_node = 63;
  bool has_resolved_insert_stmt_node() const;
  void clear_resolved_insert_stmt_node();
  static const int kResolvedInsertStmtNodeFieldNumber = 63;
  private:
  const ::zetasql::ResolvedInsertStmtProto& _internal_resolved_insert_stmt_node() const;
  public:
  const ::zetasql::ResolvedInsertStmtProto& resolved_insert_stmt_node() const;
  ::zetasql::ResolvedInsertStmtProto* release_resolved_insert_stmt_node();
  ::zetasql::ResolvedInsertStmtProto* mutable_resolved_insert_stmt_node();
  void set_allocated_resolved_insert_stmt_node(::zetasql::ResolvedInsertStmtProto* resolved_insert_stmt_node);

  // optional .zetasql.ResolvedDeleteStmtProto resolved_delete_stmt_node = 64;
  bool has_resolved_delete_stmt_node() const;
  void clear_resolved_delete_stmt_node();
  static const int kResolvedDeleteStmtNodeFieldNumber = 64;
  private:
  const ::zetasql::ResolvedDeleteStmtProto& _internal_resolved_delete_stmt_node() const;
  public:
  const ::zetasql::ResolvedDeleteStmtProto& resolved_delete_stmt_node() const;
  ::zetasql::ResolvedDeleteStmtProto* release_resolved_delete_stmt_node();
  ::zetasql::ResolvedDeleteStmtProto* mutable_resolved_delete_stmt_node();
  void set_allocated_resolved_delete_stmt_node(::zetasql::ResolvedDeleteStmtProto* resolved_delete_stmt_node);

  // optional .zetasql.ResolvedUpdateStmtProto resolved_update_stmt_node = 66;
  bool has_resolved_update_stmt_node() const;
  void clear_resolved_update_stmt_node();
  static const int kResolvedUpdateStmtNodeFieldNumber = 66;
  private:
  const ::zetasql::ResolvedUpdateStmtProto& _internal_resolved_update_stmt_node() const;
  public:
  const ::zetasql::ResolvedUpdateStmtProto& resolved_update_stmt_node() const;
  ::zetasql::ResolvedUpdateStmtProto* release_resolved_update_stmt_node();
  ::zetasql::ResolvedUpdateStmtProto* mutable_resolved_update_stmt_node();
  void set_allocated_resolved_update_stmt_node(::zetasql::ResolvedUpdateStmtProto* resolved_update_stmt_node);

  // optional .zetasql.AnyResolvedGrantOrRevokeStmtProto resolved_grant_or_revoke_stmt_node = 68;
  bool has_resolved_grant_or_revoke_stmt_node() const;
  void clear_resolved_grant_or_revoke_stmt_node();
  static const int kResolvedGrantOrRevokeStmtNodeFieldNumber = 68;
  private:
  const ::zetasql::AnyResolvedGrantOrRevokeStmtProto& _internal_resolved_grant_or_revoke_stmt_node() const;
  public:
  const ::zetasql::AnyResolvedGrantOrRevokeStmtProto& resolved_grant_or_revoke_stmt_node() const;
  ::zetasql::AnyResolvedGrantOrRevokeStmtProto* release_resolved_grant_or_revoke_stmt_node();
  ::zetasql::AnyResolvedGrantOrRevokeStmtProto* mutable_resolved_grant_or_revoke_stmt_node();
  void set_allocated_resolved_grant_or_revoke_stmt_node(::zetasql::AnyResolvedGrantOrRevokeStmtProto* resolved_grant_or_revoke_stmt_node);

  // optional .zetasql.ResolvedAlterTableSetOptionsStmtProto resolved_alter_table_set_options_stmt_node = 71;
  bool has_resolved_alter_table_set_options_stmt_node() const;
  void clear_resolved_alter_table_set_options_stmt_node();
  static const int kResolvedAlterTableSetOptionsStmtNodeFieldNumber = 71;
  private:
  const ::zetasql::ResolvedAlterTableSetOptionsStmtProto& _internal_resolved_alter_table_set_options_stmt_node() const;
  public:
  const ::zetasql::ResolvedAlterTableSetOptionsStmtProto& resolved_alter_table_set_options_stmt_node() const;
  ::zetasql::ResolvedAlterTableSetOptionsStmtProto* release_resolved_alter_table_set_options_stmt_node();
  ::zetasql::ResolvedAlterTableSetOptionsStmtProto* mutable_resolved_alter_table_set_options_stmt_node();
  void set_allocated_resolved_alter_table_set_options_stmt_node(::zetasql::ResolvedAlterTableSetOptionsStmtProto* resolved_alter_table_set_options_stmt_node);

  // optional .zetasql.ResolvedRenameStmtProto resolved_rename_stmt_node = 72;
  bool has_resolved_rename_stmt_node() const;
  void clear_resolved_rename_stmt_node();
  static const int kResolvedRenameStmtNodeFieldNumber = 72;
  private:
  const ::zetasql::ResolvedRenameStmtProto& _internal_resolved_rename_stmt_node() const;
  public:
  const ::zetasql::ResolvedRenameStmtProto& resolved_rename_stmt_node() const;
  ::zetasql::ResolvedRenameStmtProto* release_resolved_rename_stmt_node();
  ::zetasql::ResolvedRenameStmtProto* mutable_resolved_rename_stmt_node();
  void set_allocated_resolved_rename_stmt_node(::zetasql::ResolvedRenameStmtProto* resolved_rename_stmt_node);

  // optional .zetasql.ResolvedCreateRowAccessPolicyStmtProto resolved_create_row_access_policy_stmt_node = 73;
  bool has_resolved_create_row_access_policy_stmt_node() const;
  void clear_resolved_create_row_access_policy_stmt_node();
  static const int kResolvedCreateRowAccessPolicyStmtNodeFieldNumber = 73;
  private:
  const ::zetasql::ResolvedCreateRowAccessPolicyStmtProto& _internal_resolved_create_row_access_policy_stmt_node() const;
  public:
  const ::zetasql::ResolvedCreateRowAccessPolicyStmtProto& resolved_create_row_access_policy_stmt_node() const;
  ::zetasql::ResolvedCreateRowAccessPolicyStmtProto* release_resolved_create_row_access_policy_stmt_node();
  ::zetasql::ResolvedCreateRowAccessPolicyStmtProto* mutable_resolved_create_row_access_policy_stmt_node();
  void set_allocated_resolved_create_row_access_policy_stmt_node(::zetasql::ResolvedCreateRowAccessPolicyStmtProto* resolved_create_row_access_policy_stmt_node);

  // optional .zetasql.ResolvedDropRowAccessPolicyStmtProto resolved_drop_row_access_policy_stmt_node = 74;
  bool has_resolved_drop_row_access_policy_stmt_node() const;
  void clear_resolved_drop_row_access_policy_stmt_node();
  static const int kResolvedDropRowAccessPolicyStmtNodeFieldNumber = 74;
  private:
  const ::zetasql::ResolvedDropRowAccessPolicyStmtProto& _internal_resolved_drop_row_access_policy_stmt_node() const;
  public:
  const ::zetasql::ResolvedDropRowAccessPolicyStmtProto& resolved_drop_row_access_policy_stmt_node() const;
  ::zetasql::ResolvedDropRowAccessPolicyStmtProto* release_resolved_drop_row_access_policy_stmt_node();
  ::zetasql::ResolvedDropRowAccessPolicyStmtProto* mutable_resolved_drop_row_access_policy_stmt_node();
  void set_allocated_resolved_drop_row_access_policy_stmt_node(::zetasql::ResolvedDropRowAccessPolicyStmtProto* resolved_drop_row_access_policy_stmt_node);

  // optional .zetasql.ResolvedDropFunctionStmtProto resolved_drop_function_stmt_node = 80;
  bool has_resolved_drop_function_stmt_node() const;
  void clear_resolved_drop_function_stmt_node();
  static const int kResolvedDropFunctionStmtNodeFieldNumber = 80;
  private:
  const ::zetasql::ResolvedDropFunctionStmtProto& _internal_resolved_drop_function_stmt_node() const;
  public:
  const ::zetasql::ResolvedDropFunctionStmtProto& resolved_drop_function_stmt_node() const;
  ::zetasql::ResolvedDropFunctionStmtProto* release_resolved_drop_function_stmt_node();
  ::zetasql::ResolvedDropFunctionStmtProto* mutable_resolved_drop_function_stmt_node();
  void set_allocated_resolved_drop_function_stmt_node(::zetasql::ResolvedDropFunctionStmtProto* resolved_drop_function_stmt_node);

  // optional .zetasql.ResolvedCallStmtProto resolved_call_stmt_node = 83;
  bool has_resolved_call_stmt_node() const;
  void clear_resolved_call_stmt_node();
  static const int kResolvedCallStmtNodeFieldNumber = 83;
  private:
  const ::zetasql::ResolvedCallStmtProto& _internal_resolved_call_stmt_node() const;
  public:
  const ::zetasql::ResolvedCallStmtProto& resolved_call_stmt_node() const;
  ::zetasql::ResolvedCallStmtProto* release_resolved_call_stmt_node();
  ::zetasql::ResolvedCallStmtProto* mutable_resolved_call_stmt_node();
  void set_allocated_resolved_call_stmt_node(::zetasql::ResolvedCallStmtProto* resolved_call_stmt_node);

  // optional .zetasql.ResolvedImportStmtProto resolved_import_stmt_node = 86;
  bool has_resolved_import_stmt_node() const;
  void clear_resolved_import_stmt_node();
  static const int kResolvedImportStmtNodeFieldNumber = 86;
  private:
  const ::zetasql::ResolvedImportStmtProto& _internal_resolved_import_stmt_node() const;
  public:
  const ::zetasql::ResolvedImportStmtProto& resolved_import_stmt_node() const;
  ::zetasql::ResolvedImportStmtProto* release_resolved_import_stmt_node();
  ::zetasql::ResolvedImportStmtProto* mutable_resolved_import_stmt_node();
  void set_allocated_resolved_import_stmt_node(::zetasql::ResolvedImportStmtProto* resolved_import_stmt_node);

  // optional .zetasql.ResolvedModuleStmtProto resolved_module_stmt_node = 87;
  bool has_resolved_module_stmt_node() const;
  void clear_resolved_module_stmt_node();
  static const int kResolvedModuleStmtNodeFieldNumber = 87;
  private:
  const ::zetasql::ResolvedModuleStmtProto& _internal_resolved_module_stmt_node() const;
  public:
  const ::zetasql::ResolvedModuleStmtProto& resolved_module_stmt_node() const;
  ::zetasql::ResolvedModuleStmtProto* release_resolved_module_stmt_node();
  ::zetasql::ResolvedModuleStmtProto* mutable_resolved_module_stmt_node();
  void set_allocated_resolved_module_stmt_node(::zetasql::ResolvedModuleStmtProto* resolved_module_stmt_node);

  // optional .zetasql.ResolvedCreateDatabaseStmtProto resolved_create_database_stmt_node = 95;
  bool has_resolved_create_database_stmt_node() const;
  void clear_resolved_create_database_stmt_node();
  static const int kResolvedCreateDatabaseStmtNodeFieldNumber = 95;
  private:
  const ::zetasql::ResolvedCreateDatabaseStmtProto& _internal_resolved_create_database_stmt_node() const;
  public:
  const ::zetasql::ResolvedCreateDatabaseStmtProto& resolved_create_database_stmt_node() const;
  ::zetasql::ResolvedCreateDatabaseStmtProto* release_resolved_create_database_stmt_node();
  ::zetasql::ResolvedCreateDatabaseStmtProto* mutable_resolved_create_database_stmt_node();
  void set_allocated_resolved_create_database_stmt_node(::zetasql::ResolvedCreateDatabaseStmtProto* resolved_create_database_stmt_node);

  // optional .zetasql.ResolvedAssertStmtProto resolved_assert_stmt_node = 98;
  bool has_resolved_assert_stmt_node() const;
  void clear_resolved_assert_stmt_node();
  static const int kResolvedAssertStmtNodeFieldNumber = 98;
  private:
  const ::zetasql::ResolvedAssertStmtProto& _internal_resolved_assert_stmt_node() const;
  public:
  const ::zetasql::ResolvedAssertStmtProto& resolved_assert_stmt_node() const;
  ::zetasql::ResolvedAssertStmtProto* release_resolved_assert_stmt_node();
  ::zetasql::ResolvedAssertStmtProto* mutable_resolved_assert_stmt_node();
  void set_allocated_resolved_assert_stmt_node(::zetasql::ResolvedAssertStmtProto* resolved_assert_stmt_node);

  // optional .zetasql.ResolvedMergeStmtProto resolved_merge_stmt_node = 101;
  bool has_resolved_merge_stmt_node() const;
  void clear_resolved_merge_stmt_node();
  static const int kResolvedMergeStmtNodeFieldNumber = 101;
  private:
  const ::zetasql::ResolvedMergeStmtProto& _internal_resolved_merge_stmt_node() const;
  public:
  const ::zetasql::ResolvedMergeStmtProto& resolved_merge_stmt_node() const;
  ::zetasql::ResolvedMergeStmtProto* release_resolved_merge_stmt_node();
  ::zetasql::ResolvedMergeStmtProto* mutable_resolved_merge_stmt_node();
  void set_allocated_resolved_merge_stmt_node(::zetasql::ResolvedMergeStmtProto* resolved_merge_stmt_node);

  // optional .zetasql.AnyResolvedAlterObjectStmtProto resolved_alter_object_stmt_node = 114;
  bool has_resolved_alter_object_stmt_node() const;
  void clear_resolved_alter_object_stmt_node();
  static const int kResolvedAlterObjectStmtNodeFieldNumber = 114;
  private:
  const ::zetasql::AnyResolvedAlterObjectStmtProto& _internal_resolved_alter_object_stmt_node() const;
  public:
  const ::zetasql::AnyResolvedAlterObjectStmtProto& resolved_alter_object_stmt_node() const;
  ::zetasql::AnyResolvedAlterObjectStmtProto* release_resolved_alter_object_stmt_node();
  ::zetasql::AnyResolvedAlterObjectStmtProto* mutable_resolved_alter_object_stmt_node();
  void set_allocated_resolved_alter_object_stmt_node(::zetasql::AnyResolvedAlterObjectStmtProto* resolved_alter_object_stmt_node);

  // optional .zetasql.ResolvedSetTransactionStmtProto resolved_set_transaction_stmt_node = 120;
  bool has_resolved_set_transaction_stmt_node() const;
  void clear_resolved_set_transaction_stmt_node();
  static const int kResolvedSetTransactionStmtNodeFieldNumber = 120;
  private:
  const ::zetasql::ResolvedSetTransactionStmtProto& _internal_resolved_set_transaction_stmt_node() const;
  public:
  const ::zetasql::ResolvedSetTransactionStmtProto& resolved_set_transaction_stmt_node() const;
  ::zetasql::ResolvedSetTransactionStmtProto* release_resolved_set_transaction_stmt_node();
  ::zetasql::ResolvedSetTransactionStmtProto* mutable_resolved_set_transaction_stmt_node();
  void set_allocated_resolved_set_transaction_stmt_node(::zetasql::ResolvedSetTransactionStmtProto* resolved_set_transaction_stmt_node);

  // optional .zetasql.ResolvedDropMaterializedViewStmtProto resolved_drop_materialized_view_stmt_node = 121;
  bool has_resolved_drop_materialized_view_stmt_node() const;
  void clear_resolved_drop_materialized_view_stmt_node();
  static const int kResolvedDropMaterializedViewStmtNodeFieldNumber = 121;
  private:
  const ::zetasql::ResolvedDropMaterializedViewStmtProto& _internal_resolved_drop_materialized_view_stmt_node() const;
  public:
  const ::zetasql::ResolvedDropMaterializedViewStmtProto& resolved_drop_materialized_view_stmt_node() const;
  ::zetasql::ResolvedDropMaterializedViewStmtProto* release_resolved_drop_materialized_view_stmt_node();
  ::zetasql::ResolvedDropMaterializedViewStmtProto* mutable_resolved_drop_materialized_view_stmt_node();
  void set_allocated_resolved_drop_materialized_view_stmt_node(::zetasql::ResolvedDropMaterializedViewStmtProto* resolved_drop_materialized_view_stmt_node);

  // optional .zetasql.ResolvedStartBatchStmtProto resolved_start_batch_stmt_node = 122;
  bool has_resolved_start_batch_stmt_node() const;
  void clear_resolved_start_batch_stmt_node();
  static const int kResolvedStartBatchStmtNodeFieldNumber = 122;
  private:
  const ::zetasql::ResolvedStartBatchStmtProto& _internal_resolved_start_batch_stmt_node() const;
  public:
  const ::zetasql::ResolvedStartBatchStmtProto& resolved_start_batch_stmt_node() const;
  ::zetasql::ResolvedStartBatchStmtProto* release_resolved_start_batch_stmt_node();
  ::zetasql::ResolvedStartBatchStmtProto* mutable_resolved_start_batch_stmt_node();
  void set_allocated_resolved_start_batch_stmt_node(::zetasql::ResolvedStartBatchStmtProto* resolved_start_batch_stmt_node);

  // optional .zetasql.ResolvedRunBatchStmtProto resolved_run_batch_stmt_node = 123;
  bool has_resolved_run_batch_stmt_node() const;
  void clear_resolved_run_batch_stmt_node();
  static const int kResolvedRunBatchStmtNodeFieldNumber = 123;
  private:
  const ::zetasql::ResolvedRunBatchStmtProto& _internal_resolved_run_batch_stmt_node() const;
  public:
  const ::zetasql::ResolvedRunBatchStmtProto& resolved_run_batch_stmt_node() const;
  ::zetasql::ResolvedRunBatchStmtProto* release_resolved_run_batch_stmt_node();
  ::zetasql::ResolvedRunBatchStmtProto* mutable_resolved_run_batch_stmt_node();
  void set_allocated_resolved_run_batch_stmt_node(::zetasql::ResolvedRunBatchStmtProto* resolved_run_batch_stmt_node);

  // optional .zetasql.ResolvedAbortBatchStmtProto resolved_abort_batch_stmt_node = 124;
  bool has_resolved_abort_batch_stmt_node() const;
  void clear_resolved_abort_batch_stmt_node();
  static const int kResolvedAbortBatchStmtNodeFieldNumber = 124;
  private:
  const ::zetasql::ResolvedAbortBatchStmtProto& _internal_resolved_abort_batch_stmt_node() const;
  public:
  const ::zetasql::ResolvedAbortBatchStmtProto& resolved_abort_batch_stmt_node() const;
  ::zetasql::ResolvedAbortBatchStmtProto* release_resolved_abort_batch_stmt_node();
  ::zetasql::ResolvedAbortBatchStmtProto* mutable_resolved_abort_batch_stmt_node();
  void set_allocated_resolved_abort_batch_stmt_node(::zetasql::ResolvedAbortBatchStmtProto* resolved_abort_batch_stmt_node);

  // optional .zetasql.ResolvedTruncateStmtProto resolved_truncate_stmt_node = 133;
  bool has_resolved_truncate_stmt_node() const;
  void clear_resolved_truncate_stmt_node();
  static const int kResolvedTruncateStmtNodeFieldNumber = 133;
  private:
  const ::zetasql::ResolvedTruncateStmtProto& _internal_resolved_truncate_stmt_node() const;
  public:
  const ::zetasql::ResolvedTruncateStmtProto& resolved_truncate_stmt_node() const;
  ::zetasql::ResolvedTruncateStmtProto* release_resolved_truncate_stmt_node();
  ::zetasql::ResolvedTruncateStmtProto* mutable_resolved_truncate_stmt_node();
  void set_allocated_resolved_truncate_stmt_node(::zetasql::ResolvedTruncateStmtProto* resolved_truncate_stmt_node);

  // optional .zetasql.ResolvedExecuteImmediateStmtProto resolved_execute_immediate_stmt_node = 140;
  bool has_resolved_execute_immediate_stmt_node() const;
  void clear_resolved_execute_immediate_stmt_node();
  static const int kResolvedExecuteImmediateStmtNodeFieldNumber = 140;
  private:
  const ::zetasql::ResolvedExecuteImmediateStmtProto& _internal_resolved_execute_immediate_stmt_node() const;
  public:
  const ::zetasql::ResolvedExecuteImmediateStmtProto& resolved_execute_immediate_stmt_node() const;
  ::zetasql::ResolvedExecuteImmediateStmtProto* release_resolved_execute_immediate_stmt_node();
  ::zetasql::ResolvedExecuteImmediateStmtProto* mutable_resolved_execute_immediate_stmt_node();
  void set_allocated_resolved_execute_immediate_stmt_node(::zetasql::ResolvedExecuteImmediateStmtProto* resolved_execute_immediate_stmt_node);

  // optional .zetasql.ResolvedAssignmentStmtProto resolved_assignment_stmt_node = 142;
  bool has_resolved_assignment_stmt_node() const;
  void clear_resolved_assignment_stmt_node();
  static const int kResolvedAssignmentStmtNodeFieldNumber = 142;
  private:
  const ::zetasql::ResolvedAssignmentStmtProto& _internal_resolved_assignment_stmt_node() const;
  public:
  const ::zetasql::ResolvedAssignmentStmtProto& resolved_assignment_stmt_node() const;
  ::zetasql::ResolvedAssignmentStmtProto* release_resolved_assignment_stmt_node();
  ::zetasql::ResolvedAssignmentStmtProto* mutable_resolved_assignment_stmt_node();
  void set_allocated_resolved_assignment_stmt_node(::zetasql::ResolvedAssignmentStmtProto* resolved_assignment_stmt_node);

  // optional .zetasql.ResolvedExportModelStmtProto resolved_export_model_stmt_node = 152;
  bool has_resolved_export_model_stmt_node() const;
  void clear_resolved_export_model_stmt_node();
  static const int kResolvedExportModelStmtNodeFieldNumber = 152;
  private:
  const ::zetasql::ResolvedExportModelStmtProto& _internal_resolved_export_model_stmt_node() const;
  public:
  const ::zetasql::ResolvedExportModelStmtProto& resolved_export_model_stmt_node() const;
  ::zetasql::ResolvedExportModelStmtProto* release_resolved_export_model_stmt_node();
  ::zetasql::ResolvedExportModelStmtProto* mutable_resolved_export_model_stmt_node();
  void set_allocated_resolved_export_model_stmt_node(::zetasql::ResolvedExportModelStmtProto* resolved_export_model_stmt_node);

  // optional .zetasql.ResolvedDropTableFunctionStmtProto resolved_drop_table_function_stmt_node = 175;
  bool has_resolved_drop_table_function_stmt_node() const;
  void clear_resolved_drop_table_function_stmt_node();
  static const int kResolvedDropTableFunctionStmtNodeFieldNumber = 175;
  private:
  const ::zetasql::ResolvedDropTableFunctionStmtProto& _internal_resolved_drop_table_function_stmt_node() const;
  public:
  const ::zetasql::ResolvedDropTableFunctionStmtProto& resolved_drop_table_function_stmt_node() const;
  ::zetasql::ResolvedDropTableFunctionStmtProto* release_resolved_drop_table_function_stmt_node();
  ::zetasql::ResolvedDropTableFunctionStmtProto* mutable_resolved_drop_table_function_stmt_node();
  void set_allocated_resolved_drop_table_function_stmt_node(::zetasql::ResolvedDropTableFunctionStmtProto* resolved_drop_table_function_stmt_node);

  // optional .zetasql.ResolvedCloneDataStmtProto resolved_clone_data_stmt_node = 177;
  bool has_resolved_clone_data_stmt_node() const;
  void clear_resolved_clone_data_stmt_node();
  static const int kResolvedCloneDataStmtNodeFieldNumber = 177;
  private:
  const ::zetasql::ResolvedCloneDataStmtProto& _internal_resolved_clone_data_stmt_node() const;
  public:
  const ::zetasql::ResolvedCloneDataStmtProto& resolved_clone_data_stmt_node() const;
  ::zetasql::ResolvedCloneDataStmtProto* release_resolved_clone_data_stmt_node();
  ::zetasql::ResolvedCloneDataStmtProto* mutable_resolved_clone_data_stmt_node();
  void set_allocated_resolved_clone_data_stmt_node(::zetasql::ResolvedCloneDataStmtProto* resolved_clone_data_stmt_node);

  // optional .zetasql.ResolvedAnalyzeStmtProto resolved_analyze_stmt_node = 180;
  bool has_resolved_analyze_stmt_node() const;
  void clear_resolved_analyze_stmt_node();
  static const int kResolvedAnalyzeStmtNodeFieldNumber = 180;
  private:
  const ::zetasql::ResolvedAnalyzeStmtProto& _internal_resolved_analyze_stmt_node() const;
  public:
  const ::zetasql::ResolvedAnalyzeStmtProto& resolved_analyze_stmt_node() const;
  ::zetasql::ResolvedAnalyzeStmtProto* release_resolved_analyze_stmt_node();
  ::zetasql::ResolvedAnalyzeStmtProto* mutable_resolved_analyze_stmt_node();
  void set_allocated_resolved_analyze_stmt_node(::zetasql::ResolvedAnalyzeStmtProto* resolved_analyze_stmt_node);

  // optional .zetasql.ResolvedDropSnapshotTableStmtProto resolved_drop_snapshot_table_stmt_node = 183;
  bool has_resolved_drop_snapshot_table_stmt_node() const;
  void clear_resolved_drop_snapshot_table_stmt_node();
  static const int kResolvedDropSnapshotTableStmtNodeFieldNumber = 183;
  private:
  const ::zetasql::ResolvedDropSnapshotTableStmtProto& _internal_resolved_drop_snapshot_table_stmt_node() const;
  public:
  const ::zetasql::ResolvedDropSnapshotTableStmtProto& resolved_drop_snapshot_table_stmt_node() const;
  ::zetasql::ResolvedDropSnapshotTableStmtProto* release_resolved_drop_snapshot_table_stmt_node();
  ::zetasql::ResolvedDropSnapshotTableStmtProto* mutable_resolved_drop_snapshot_table_stmt_node();
  void set_allocated_resolved_drop_snapshot_table_stmt_node(::zetasql::ResolvedDropSnapshotTableStmtProto* resolved_drop_snapshot_table_stmt_node);

  // optional .zetasql.ResolvedAuxLoadDataStmtProto resolved_aux_load_data_stmt_node = 186;
  bool has_resolved_aux_load_data_stmt_node() const;
  void clear_resolved_aux_load_data_stmt_node();
  static const int kResolvedAuxLoadDataStmtNodeFieldNumber = 186;
  private:
  const ::zetasql::ResolvedAuxLoadDataStmtProto& _internal_resolved_aux_load_data_stmt_node() const;
  public:
  const ::zetasql::ResolvedAuxLoadDataStmtProto& resolved_aux_load_data_stmt_node() const;
  ::zetasql::ResolvedAuxLoadDataStmtProto* release_resolved_aux_load_data_stmt_node();
  ::zetasql::ResolvedAuxLoadDataStmtProto* mutable_resolved_aux_load_data_stmt_node();
  void set_allocated_resolved_aux_load_data_stmt_node(::zetasql::ResolvedAuxLoadDataStmtProto* resolved_aux_load_data_stmt_node);

  // optional .zetasql.ResolvedDropSearchIndexStmtProto resolved_drop_search_index_stmt_node = 190;
  bool has_resolved_drop_search_index_stmt_node() const;
  void clear_resolved_drop_search_index_stmt_node();
  static const int kResolvedDropSearchIndexStmtNodeFieldNumber = 190;
  private:
  const ::zetasql::ResolvedDropSearchIndexStmtProto& _internal_resolved_drop_search_index_stmt_node() const;
  public:
  const ::zetasql::ResolvedDropSearchIndexStmtProto& resolved_drop_search_index_stmt_node() const;
  ::zetasql::ResolvedDropSearchIndexStmtProto* release_resolved_drop_search_index_stmt_node();
  ::zetasql::ResolvedDropSearchIndexStmtProto* mutable_resolved_drop_search_index_stmt_node();
  void set_allocated_resolved_drop_search_index_stmt_node(::zetasql::ResolvedDropSearchIndexStmtProto* resolved_drop_search_index_stmt_node);

  // optional .zetasql.ResolvedDropPrivilegeRestrictionStmtProto resolved_drop_privilege_restriction_stmt_node = 192;
  bool has_resolved_drop_privilege_restriction_stmt_node() const;
  void clear_resolved_drop_privilege_restriction_stmt_node();
  static const int kResolvedDropPrivilegeRestrictionStmtNodeFieldNumber = 192;
  private:
  const ::zetasql::ResolvedDropPrivilegeRestrictionStmtProto& _internal_resolved_drop_privilege_restriction_stmt_node() const;
  public:
  const ::zetasql::ResolvedDropPrivilegeRestrictionStmtProto& resolved_drop_privilege_restriction_stmt_node() const;
  ::zetasql::ResolvedDropPrivilegeRestrictionStmtProto* release_resolved_drop_privilege_restriction_stmt_node();
  ::zetasql::ResolvedDropPrivilegeRestrictionStmtProto* mutable_resolved_drop_privilege_restriction_stmt_node();
  void set_allocated_resolved_drop_privilege_restriction_stmt_node(::zetasql::ResolvedDropPrivilegeRestrictionStmtProto* resolved_drop_privilege_restriction_stmt_node);

  void clear_node();
  NodeCase node_case() const;
  // @@protoc_insertion_point(class_scope:zetasql.AnyResolvedStatementProto)
 private:
  void set_has_resolved_explain_stmt_node();
  void set_has_resolved_query_stmt_node();
  void set_has_resolved_create_statement_node();
  void set_has_resolved_export_data_stmt_node();
  void set_has_resolved_define_table_stmt_node();
  void set_has_resolved_describe_stmt_node();
  void set_has_resolved_show_stmt_node();
  void set_has_resolved_begin_stmt_node();
  void set_has_resolved_commit_stmt_node();
  void set_has_resolved_rollback_stmt_node();
  void set_has_resolved_drop_stmt_node();
  void set_has_resolved_insert_stmt_node();
  void set_has_resolved_delete_stmt_node();
  void set_has_resolved_update_stmt_node();
  void set_has_resolved_grant_or_revoke_stmt_node();
  void set_has_resolved_alter_table_set_options_stmt_node();
  void set_has_resolved_rename_stmt_node();
  void set_has_resolved_create_row_access_policy_stmt_node();
  void set_has_resolved_drop_row_access_policy_stmt_node();
  void set_has_resolved_drop_function_stmt_node();
  void set_has_resolved_call_stmt_node();
  void set_has_resolved_import_stmt_node();
  void set_has_resolved_module_stmt_node();
  void set_has_resolved_create_database_stmt_node();
  void set_has_resolved_assert_stmt_node();
  void set_has_resolved_merge_stmt_node();
  void set_has_resolved_alter_object_stmt_node();
  void set_has_resolved_set_transaction_stmt_node();
  void set_has_resolved_drop_materialized_view_stmt_node();
  void set_has_resolved_start_batch_stmt_node();
  void set_has_resolved_run_batch_stmt_node();
  void set_has_resolved_abort_batch_stmt_node();
  void set_has_resolved_truncate_stmt_node();
  void set_has_resolved_execute_immediate_stmt_node();
  void set_has_resolved_assignment_stmt_node();
  void set_has_resolved_export_model_stmt_node();
  void set_has_resolved_drop_table_function_stmt_node();
  void set_has_resolved_clone_data_stmt_node();
  void set_has_resolved_analyze_stmt_node();
  void set_has_resolved_drop_snapshot_table_stmt_node();
  void set_has_resolved_aux_load_data_stmt_node();
  void set_has_resolved_drop_search_index_stmt_node();
  void set_has_resolved_drop_privilege_restriction_stmt_node();

  inline bool has_node() const;
  inline void clear_has_node();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union NodeUnion {
    NodeUnion() {}
    ::zetasql::ResolvedExplainStmtProto* resolved_explain_stmt_node_;
    ::zetasql::ResolvedQueryStmtProto* resolved_query_stmt_node_;
    ::zetasql::AnyResolvedCreateStatementProto* resolved_create_statement_node_;
    ::zetasql::ResolvedExportDataStmtProto* resolved_export_data_stmt_node_;
    ::zetasql::ResolvedDefineTableStmtProto* resolved_define_table_stmt_node_;
    ::zetasql::ResolvedDescribeStmtProto* resolved_describe_stmt_node_;
    ::zetasql::ResolvedShowStmtProto* resolved_show_stmt_node_;
    ::zetasql::ResolvedBeginStmtProto* resolved_begin_stmt_node_;
    ::zetasql::ResolvedCommitStmtProto* resolved_commit_stmt_node_;
    ::zetasql::ResolvedRollbackStmtProto* resolved_rollback_stmt_node_;
    ::zetasql::ResolvedDropStmtProto* resolved_drop_stmt_node_;
    ::zetasql::ResolvedInsertStmtProto* resolved_insert_stmt_node_;
    ::zetasql::ResolvedDeleteStmtProto* resolved_delete_stmt_node_;
    ::zetasql::ResolvedUpdateStmtProto* resolved_update_stmt_node_;
    ::zetasql::AnyResolvedGrantOrRevokeStmtProto* resolved_grant_or_revoke_stmt_node_;
    ::zetasql::ResolvedAlterTableSetOptionsStmtProto* resolved_alter_table_set_options_stmt_node_;
    ::zetasql::ResolvedRenameStmtProto* resolved_rename_stmt_node_;
    ::zetasql::ResolvedCreateRowAccessPolicyStmtProto* resolved_create_row_access_policy_stmt_node_;
    ::zetasql::ResolvedDropRowAccessPolicyStmtProto* resolved_drop_row_access_policy_stmt_node_;
    ::zetasql::ResolvedDropFunctionStmtProto* resolved_drop_function_stmt_node_;
    ::zetasql::ResolvedCallStmtProto* resolved_call_stmt_node_;
    ::zetasql::ResolvedImportStmtProto* resolved_import_stmt_node_;
    ::zetasql::ResolvedModuleStmtProto* resolved_module_stmt_node_;
    ::zetasql::ResolvedCreateDatabaseStmtProto* resolved_create_database_stmt_node_;
    ::zetasql::ResolvedAssertStmtProto* resolved_assert_stmt_node_;
    ::zetasql::ResolvedMergeStmtProto* resolved_merge_stmt_node_;
    ::zetasql::AnyResolvedAlterObjectStmtProto* resolved_alter_object_stmt_node_;
    ::zetasql::ResolvedSetTransactionStmtProto* resolved_set_transaction_stmt_node_;
    ::zetasql::ResolvedDropMaterializedViewStmtProto* resolved_drop_materialized_view_stmt_node_;
    ::zetasql::ResolvedStartBatchStmtProto* resolved_start_batch_stmt_node_;
    ::zetasql::ResolvedRunBatchStmtProto* resolved_run_batch_stmt_node_;
    ::zetasql::ResolvedAbortBatchStmtProto* resolved_abort_batch_stmt_node_;
    ::zetasql::ResolvedTruncateStmtProto* resolved_truncate_stmt_node_;
    ::zetasql::ResolvedExecuteImmediateStmtProto* resolved_execute_immediate_stmt_node_;
    ::zetasql::ResolvedAssignmentStmtProto* resolved_assignment_stmt_node_;
    ::zetasql::ResolvedExportModelStmtProto* resolved_export_model_stmt_node_;
    ::zetasql::ResolvedDropTableFunctionStmtProto* resolved_drop_table_function_stmt_node_;
    ::zetasql::ResolvedCloneDataStmtProto* resolved_clone_data_stmt_node_;
    ::zetasql::ResolvedAnalyzeStmtProto* resolved_analyze_stmt_node_;
    ::zetasql::ResolvedDropSnapshotTableStmtProto* resolved_drop_snapshot_table_stmt_node_;
    ::zetasql::ResolvedAuxLoadDataStmtProto* resolved_aux_load_data_stmt_node_;
    ::zetasql::ResolvedDropSearchIndexStmtProto* resolved_drop_search_index_stmt_node_;
    ::zetasql::ResolvedDropPrivilegeRestrictionStmtProto* resolved_drop_privilege_restriction_stmt_node_;
  } node_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedStatementProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedStatementProto) */ {
 public:
  ResolvedStatementProto();
  virtual ~ResolvedStatementProto();

  ResolvedStatementProto(const ResolvedStatementProto& from);

  inline ResolvedStatementProto& operator=(const ResolvedStatementProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedStatementProto(ResolvedStatementProto&& from) noexcept
    : ResolvedStatementProto() {
    *this = ::std::move(from);
  }

  inline ResolvedStatementProto& operator=(ResolvedStatementProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedStatementProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedStatementProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedStatementProto*>(
               &_ResolvedStatementProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  void Swap(ResolvedStatementProto* other);
  friend void swap(ResolvedStatementProto& a, ResolvedStatementProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedStatementProto* New() const final {
    return CreateMaybeMessage<ResolvedStatementProto>(NULL);
  }

  ResolvedStatementProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedStatementProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedStatementProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedOptionProto hint_list = 2;
  int hint_list_size() const;
  void clear_hint_list();
  static const int kHintListFieldNumber = 2;
  ::zetasql::ResolvedOptionProto* mutable_hint_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_hint_list();
  const ::zetasql::ResolvedOptionProto& hint_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_hint_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      hint_list() const;

  // optional .zetasql.ResolvedNodeProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedNodeProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedNodeProto& parent() const;
  ::zetasql::ResolvedNodeProto* release_parent();
  ::zetasql::ResolvedNodeProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedNodeProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedStatementProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > hint_list_;
  ::zetasql::ResolvedNodeProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedExplainStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedExplainStmtProto) */ {
 public:
  ResolvedExplainStmtProto();
  virtual ~ResolvedExplainStmtProto();

  ResolvedExplainStmtProto(const ResolvedExplainStmtProto& from);

  inline ResolvedExplainStmtProto& operator=(const ResolvedExplainStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedExplainStmtProto(ResolvedExplainStmtProto&& from) noexcept
    : ResolvedExplainStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedExplainStmtProto& operator=(ResolvedExplainStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedExplainStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedExplainStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedExplainStmtProto*>(
               &_ResolvedExplainStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  void Swap(ResolvedExplainStmtProto* other);
  friend void swap(ResolvedExplainStmtProto& a, ResolvedExplainStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedExplainStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedExplainStmtProto>(NULL);
  }

  ResolvedExplainStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedExplainStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedExplainStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional .zetasql.AnyResolvedStatementProto statement = 2;
  bool has_statement() const;
  void clear_statement();
  static const int kStatementFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedStatementProto& _internal_statement() const;
  public:
  const ::zetasql::AnyResolvedStatementProto& statement() const;
  ::zetasql::AnyResolvedStatementProto* release_statement();
  ::zetasql::AnyResolvedStatementProto* mutable_statement();
  void set_allocated_statement(::zetasql::AnyResolvedStatementProto* statement);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedExplainStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_statement();
  void clear_has_statement();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedStatementProto* parent_;
  ::zetasql::AnyResolvedStatementProto* statement_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedQueryStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedQueryStmtProto) */ {
 public:
  ResolvedQueryStmtProto();
  virtual ~ResolvedQueryStmtProto();

  ResolvedQueryStmtProto(const ResolvedQueryStmtProto& from);

  inline ResolvedQueryStmtProto& operator=(const ResolvedQueryStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedQueryStmtProto(ResolvedQueryStmtProto&& from) noexcept
    : ResolvedQueryStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedQueryStmtProto& operator=(ResolvedQueryStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedQueryStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedQueryStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedQueryStmtProto*>(
               &_ResolvedQueryStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  void Swap(ResolvedQueryStmtProto* other);
  friend void swap(ResolvedQueryStmtProto& a, ResolvedQueryStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedQueryStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedQueryStmtProto>(NULL);
  }

  ResolvedQueryStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedQueryStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedQueryStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedOutputColumnProto output_column_list = 2;
  int output_column_list_size() const;
  void clear_output_column_list();
  static const int kOutputColumnListFieldNumber = 2;
  ::zetasql::ResolvedOutputColumnProto* mutable_output_column_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >*
      mutable_output_column_list();
  const ::zetasql::ResolvedOutputColumnProto& output_column_list(int index) const;
  ::zetasql::ResolvedOutputColumnProto* add_output_column_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >&
      output_column_list() const;

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional .zetasql.AnyResolvedScanProto query = 4;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 4;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_query() const;
  public:
  const ::zetasql::AnyResolvedScanProto& query() const;
  ::zetasql::AnyResolvedScanProto* release_query();
  ::zetasql::AnyResolvedScanProto* mutable_query();
  void set_allocated_query(::zetasql::AnyResolvedScanProto* query);

  // optional bool is_value_table = 3;
  bool has_is_value_table() const;
  void clear_is_value_table();
  static const int kIsValueTableFieldNumber = 3;
  bool is_value_table() const;
  void set_is_value_table(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedQueryStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_is_value_table();
  void clear_has_is_value_table();
  void set_has_query();
  void clear_has_query();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto > output_column_list_;
  ::zetasql::ResolvedStatementProto* parent_;
  ::zetasql::AnyResolvedScanProto* query_;
  bool is_value_table_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedCreateDatabaseStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedCreateDatabaseStmtProto) */ {
 public:
  ResolvedCreateDatabaseStmtProto();
  virtual ~ResolvedCreateDatabaseStmtProto();

  ResolvedCreateDatabaseStmtProto(const ResolvedCreateDatabaseStmtProto& from);

  inline ResolvedCreateDatabaseStmtProto& operator=(const ResolvedCreateDatabaseStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedCreateDatabaseStmtProto(ResolvedCreateDatabaseStmtProto&& from) noexcept
    : ResolvedCreateDatabaseStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedCreateDatabaseStmtProto& operator=(ResolvedCreateDatabaseStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedCreateDatabaseStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedCreateDatabaseStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedCreateDatabaseStmtProto*>(
               &_ResolvedCreateDatabaseStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  void Swap(ResolvedCreateDatabaseStmtProto* other);
  friend void swap(ResolvedCreateDatabaseStmtProto& a, ResolvedCreateDatabaseStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedCreateDatabaseStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedCreateDatabaseStmtProto>(NULL);
  }

  ResolvedCreateDatabaseStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedCreateDatabaseStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedCreateDatabaseStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name_path = 2;
  int name_path_size() const;
  void clear_name_path();
  static const int kNamePathFieldNumber = 2;
  const ::std::string& name_path(int index) const;
  ::std::string* mutable_name_path(int index);
  void set_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name_path(int index, ::std::string&& value);
  #endif
  void set_name_path(int index, const char* value);
  void set_name_path(int index, const char* value, size_t size);
  ::std::string* add_name_path();
  void add_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_name_path(::std::string&& value);
  #endif
  void add_name_path(const char* value);
  void add_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_path();

  // repeated .zetasql.ResolvedOptionProto option_list = 3;
  int option_list_size() const;
  void clear_option_list();
  static const int kOptionListFieldNumber = 3;
  ::zetasql::ResolvedOptionProto* mutable_option_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_option_list();
  const ::zetasql::ResolvedOptionProto& option_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_option_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      option_list() const;

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedCreateDatabaseStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_path_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > option_list_;
  ::zetasql::ResolvedStatementProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnyResolvedCreateStatementProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.AnyResolvedCreateStatementProto) */ {
 public:
  AnyResolvedCreateStatementProto();
  virtual ~AnyResolvedCreateStatementProto();

  AnyResolvedCreateStatementProto(const AnyResolvedCreateStatementProto& from);

  inline AnyResolvedCreateStatementProto& operator=(const AnyResolvedCreateStatementProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnyResolvedCreateStatementProto(AnyResolvedCreateStatementProto&& from) noexcept
    : AnyResolvedCreateStatementProto() {
    *this = ::std::move(from);
  }

  inline AnyResolvedCreateStatementProto& operator=(AnyResolvedCreateStatementProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnyResolvedCreateStatementProto& default_instance();

  enum NodeCase {
    kResolvedCreateFunctionStmtNode = 76,
    kResolvedCreateTableFunctionStmtNode = 88,
    kResolvedCreateIndexStmtNode = 97,
    kResolvedCreateConstantStmtNode = 99,
    kResolvedCreateTableStmtBaseNode = 106,
    kResolvedCreateModelStmtNode = 107,
    kResolvedCreateViewBaseNode = 108,
    kResolvedCreateProcedureStmtNode = 125,
    kResolvedCreateEntityStmtNode = 154,
    kResolvedCreateSchemaStmtNode = 157,
    kResolvedCreateSnapshotTableStmtNode = 182,
    kResolvedCreatePrivilegeRestrictionStmtNode = 191,
    NODE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnyResolvedCreateStatementProto* internal_default_instance() {
    return reinterpret_cast<const AnyResolvedCreateStatementProto*>(
               &_AnyResolvedCreateStatementProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  void Swap(AnyResolvedCreateStatementProto* other);
  friend void swap(AnyResolvedCreateStatementProto& a, AnyResolvedCreateStatementProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnyResolvedCreateStatementProto* New() const final {
    return CreateMaybeMessage<AnyResolvedCreateStatementProto>(NULL);
  }

  AnyResolvedCreateStatementProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnyResolvedCreateStatementProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyResolvedCreateStatementProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedCreateFunctionStmtProto resolved_create_function_stmt_node = 76;
  bool has_resolved_create_function_stmt_node() const;
  void clear_resolved_create_function_stmt_node();
  static const int kResolvedCreateFunctionStmtNodeFieldNumber = 76;
  private:
  const ::zetasql::ResolvedCreateFunctionStmtProto& _internal_resolved_create_function_stmt_node() const;
  public:
  const ::zetasql::ResolvedCreateFunctionStmtProto& resolved_create_function_stmt_node() const;
  ::zetasql::ResolvedCreateFunctionStmtProto* release_resolved_create_function_stmt_node();
  ::zetasql::ResolvedCreateFunctionStmtProto* mutable_resolved_create_function_stmt_node();
  void set_allocated_resolved_create_function_stmt_node(::zetasql::ResolvedCreateFunctionStmtProto* resolved_create_function_stmt_node);

  // optional .zetasql.ResolvedCreateTableFunctionStmtProto resolved_create_table_function_stmt_node = 88;
  bool has_resolved_create_table_function_stmt_node() const;
  void clear_resolved_create_table_function_stmt_node();
  static const int kResolvedCreateTableFunctionStmtNodeFieldNumber = 88;
  private:
  const ::zetasql::ResolvedCreateTableFunctionStmtProto& _internal_resolved_create_table_function_stmt_node() const;
  public:
  const ::zetasql::ResolvedCreateTableFunctionStmtProto& resolved_create_table_function_stmt_node() const;
  ::zetasql::ResolvedCreateTableFunctionStmtProto* release_resolved_create_table_function_stmt_node();
  ::zetasql::ResolvedCreateTableFunctionStmtProto* mutable_resolved_create_table_function_stmt_node();
  void set_allocated_resolved_create_table_function_stmt_node(::zetasql::ResolvedCreateTableFunctionStmtProto* resolved_create_table_function_stmt_node);

  // optional .zetasql.ResolvedCreateIndexStmtProto resolved_create_index_stmt_node = 97;
  bool has_resolved_create_index_stmt_node() const;
  void clear_resolved_create_index_stmt_node();
  static const int kResolvedCreateIndexStmtNodeFieldNumber = 97;
  private:
  const ::zetasql::ResolvedCreateIndexStmtProto& _internal_resolved_create_index_stmt_node() const;
  public:
  const ::zetasql::ResolvedCreateIndexStmtProto& resolved_create_index_stmt_node() const;
  ::zetasql::ResolvedCreateIndexStmtProto* release_resolved_create_index_stmt_node();
  ::zetasql::ResolvedCreateIndexStmtProto* mutable_resolved_create_index_stmt_node();
  void set_allocated_resolved_create_index_stmt_node(::zetasql::ResolvedCreateIndexStmtProto* resolved_create_index_stmt_node);

  // optional .zetasql.ResolvedCreateConstantStmtProto resolved_create_constant_stmt_node = 99;
  bool has_resolved_create_constant_stmt_node() const;
  void clear_resolved_create_constant_stmt_node();
  static const int kResolvedCreateConstantStmtNodeFieldNumber = 99;
  private:
  const ::zetasql::ResolvedCreateConstantStmtProto& _internal_resolved_create_constant_stmt_node() const;
  public:
  const ::zetasql::ResolvedCreateConstantStmtProto& resolved_create_constant_stmt_node() const;
  ::zetasql::ResolvedCreateConstantStmtProto* release_resolved_create_constant_stmt_node();
  ::zetasql::ResolvedCreateConstantStmtProto* mutable_resolved_create_constant_stmt_node();
  void set_allocated_resolved_create_constant_stmt_node(::zetasql::ResolvedCreateConstantStmtProto* resolved_create_constant_stmt_node);

  // optional .zetasql.AnyResolvedCreateTableStmtBaseProto resolved_create_table_stmt_base_node = 106;
  bool has_resolved_create_table_stmt_base_node() const;
  void clear_resolved_create_table_stmt_base_node();
  static const int kResolvedCreateTableStmtBaseNodeFieldNumber = 106;
  private:
  const ::zetasql::AnyResolvedCreateTableStmtBaseProto& _internal_resolved_create_table_stmt_base_node() const;
  public:
  const ::zetasql::AnyResolvedCreateTableStmtBaseProto& resolved_create_table_stmt_base_node() const;
  ::zetasql::AnyResolvedCreateTableStmtBaseProto* release_resolved_create_table_stmt_base_node();
  ::zetasql::AnyResolvedCreateTableStmtBaseProto* mutable_resolved_create_table_stmt_base_node();
  void set_allocated_resolved_create_table_stmt_base_node(::zetasql::AnyResolvedCreateTableStmtBaseProto* resolved_create_table_stmt_base_node);

  // optional .zetasql.ResolvedCreateModelStmtProto resolved_create_model_stmt_node = 107;
  bool has_resolved_create_model_stmt_node() const;
  void clear_resolved_create_model_stmt_node();
  static const int kResolvedCreateModelStmtNodeFieldNumber = 107;
  private:
  const ::zetasql::ResolvedCreateModelStmtProto& _internal_resolved_create_model_stmt_node() const;
  public:
  const ::zetasql::ResolvedCreateModelStmtProto& resolved_create_model_stmt_node() const;
  ::zetasql::ResolvedCreateModelStmtProto* release_resolved_create_model_stmt_node();
  ::zetasql::ResolvedCreateModelStmtProto* mutable_resolved_create_model_stmt_node();
  void set_allocated_resolved_create_model_stmt_node(::zetasql::ResolvedCreateModelStmtProto* resolved_create_model_stmt_node);

  // optional .zetasql.AnyResolvedCreateViewBaseProto resolved_create_view_base_node = 108;
  bool has_resolved_create_view_base_node() const;
  void clear_resolved_create_view_base_node();
  static const int kResolvedCreateViewBaseNodeFieldNumber = 108;
  private:
  const ::zetasql::AnyResolvedCreateViewBaseProto& _internal_resolved_create_view_base_node() const;
  public:
  const ::zetasql::AnyResolvedCreateViewBaseProto& resolved_create_view_base_node() const;
  ::zetasql::AnyResolvedCreateViewBaseProto* release_resolved_create_view_base_node();
  ::zetasql::AnyResolvedCreateViewBaseProto* mutable_resolved_create_view_base_node();
  void set_allocated_resolved_create_view_base_node(::zetasql::AnyResolvedCreateViewBaseProto* resolved_create_view_base_node);

  // optional .zetasql.ResolvedCreateProcedureStmtProto resolved_create_procedure_stmt_node = 125;
  bool has_resolved_create_procedure_stmt_node() const;
  void clear_resolved_create_procedure_stmt_node();
  static const int kResolvedCreateProcedureStmtNodeFieldNumber = 125;
  private:
  const ::zetasql::ResolvedCreateProcedureStmtProto& _internal_resolved_create_procedure_stmt_node() const;
  public:
  const ::zetasql::ResolvedCreateProcedureStmtProto& resolved_create_procedure_stmt_node() const;
  ::zetasql::ResolvedCreateProcedureStmtProto* release_resolved_create_procedure_stmt_node();
  ::zetasql::ResolvedCreateProcedureStmtProto* mutable_resolved_create_procedure_stmt_node();
  void set_allocated_resolved_create_procedure_stmt_node(::zetasql::ResolvedCreateProcedureStmtProto* resolved_create_procedure_stmt_node);

  // optional .zetasql.ResolvedCreateEntityStmtProto resolved_create_entity_stmt_node = 154;
  bool has_resolved_create_entity_stmt_node() const;
  void clear_resolved_create_entity_stmt_node();
  static const int kResolvedCreateEntityStmtNodeFieldNumber = 154;
  private:
  const ::zetasql::ResolvedCreateEntityStmtProto& _internal_resolved_create_entity_stmt_node() const;
  public:
  const ::zetasql::ResolvedCreateEntityStmtProto& resolved_create_entity_stmt_node() const;
  ::zetasql::ResolvedCreateEntityStmtProto* release_resolved_create_entity_stmt_node();
  ::zetasql::ResolvedCreateEntityStmtProto* mutable_resolved_create_entity_stmt_node();
  void set_allocated_resolved_create_entity_stmt_node(::zetasql::ResolvedCreateEntityStmtProto* resolved_create_entity_stmt_node);

  // optional .zetasql.ResolvedCreateSchemaStmtProto resolved_create_schema_stmt_node = 157;
  bool has_resolved_create_schema_stmt_node() const;
  void clear_resolved_create_schema_stmt_node();
  static const int kResolvedCreateSchemaStmtNodeFieldNumber = 157;
  private:
  const ::zetasql::ResolvedCreateSchemaStmtProto& _internal_resolved_create_schema_stmt_node() const;
  public:
  const ::zetasql::ResolvedCreateSchemaStmtProto& resolved_create_schema_stmt_node() const;
  ::zetasql::ResolvedCreateSchemaStmtProto* release_resolved_create_schema_stmt_node();
  ::zetasql::ResolvedCreateSchemaStmtProto* mutable_resolved_create_schema_stmt_node();
  void set_allocated_resolved_create_schema_stmt_node(::zetasql::ResolvedCreateSchemaStmtProto* resolved_create_schema_stmt_node);

  // optional .zetasql.ResolvedCreateSnapshotTableStmtProto resolved_create_snapshot_table_stmt_node = 182;
  bool has_resolved_create_snapshot_table_stmt_node() const;
  void clear_resolved_create_snapshot_table_stmt_node();
  static const int kResolvedCreateSnapshotTableStmtNodeFieldNumber = 182;
  private:
  const ::zetasql::ResolvedCreateSnapshotTableStmtProto& _internal_resolved_create_snapshot_table_stmt_node() const;
  public:
  const ::zetasql::ResolvedCreateSnapshotTableStmtProto& resolved_create_snapshot_table_stmt_node() const;
  ::zetasql::ResolvedCreateSnapshotTableStmtProto* release_resolved_create_snapshot_table_stmt_node();
  ::zetasql::ResolvedCreateSnapshotTableStmtProto* mutable_resolved_create_snapshot_table_stmt_node();
  void set_allocated_resolved_create_snapshot_table_stmt_node(::zetasql::ResolvedCreateSnapshotTableStmtProto* resolved_create_snapshot_table_stmt_node);

  // optional .zetasql.ResolvedCreatePrivilegeRestrictionStmtProto resolved_create_privilege_restriction_stmt_node = 191;
  bool has_resolved_create_privilege_restriction_stmt_node() const;
  void clear_resolved_create_privilege_restriction_stmt_node();
  static const int kResolvedCreatePrivilegeRestrictionStmtNodeFieldNumber = 191;
  private:
  const ::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto& _internal_resolved_create_privilege_restriction_stmt_node() const;
  public:
  const ::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto& resolved_create_privilege_restriction_stmt_node() const;
  ::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto* release_resolved_create_privilege_restriction_stmt_node();
  ::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto* mutable_resolved_create_privilege_restriction_stmt_node();
  void set_allocated_resolved_create_privilege_restriction_stmt_node(::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto* resolved_create_privilege_restriction_stmt_node);

  void clear_node();
  NodeCase node_case() const;
  // @@protoc_insertion_point(class_scope:zetasql.AnyResolvedCreateStatementProto)
 private:
  void set_has_resolved_create_function_stmt_node();
  void set_has_resolved_create_table_function_stmt_node();
  void set_has_resolved_create_index_stmt_node();
  void set_has_resolved_create_constant_stmt_node();
  void set_has_resolved_create_table_stmt_base_node();
  void set_has_resolved_create_model_stmt_node();
  void set_has_resolved_create_view_base_node();
  void set_has_resolved_create_procedure_stmt_node();
  void set_has_resolved_create_entity_stmt_node();
  void set_has_resolved_create_schema_stmt_node();
  void set_has_resolved_create_snapshot_table_stmt_node();
  void set_has_resolved_create_privilege_restriction_stmt_node();

  inline bool has_node() const;
  inline void clear_has_node();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union NodeUnion {
    NodeUnion() {}
    ::zetasql::ResolvedCreateFunctionStmtProto* resolved_create_function_stmt_node_;
    ::zetasql::ResolvedCreateTableFunctionStmtProto* resolved_create_table_function_stmt_node_;
    ::zetasql::ResolvedCreateIndexStmtProto* resolved_create_index_stmt_node_;
    ::zetasql::ResolvedCreateConstantStmtProto* resolved_create_constant_stmt_node_;
    ::zetasql::AnyResolvedCreateTableStmtBaseProto* resolved_create_table_stmt_base_node_;
    ::zetasql::ResolvedCreateModelStmtProto* resolved_create_model_stmt_node_;
    ::zetasql::AnyResolvedCreateViewBaseProto* resolved_create_view_base_node_;
    ::zetasql::ResolvedCreateProcedureStmtProto* resolved_create_procedure_stmt_node_;
    ::zetasql::ResolvedCreateEntityStmtProto* resolved_create_entity_stmt_node_;
    ::zetasql::ResolvedCreateSchemaStmtProto* resolved_create_schema_stmt_node_;
    ::zetasql::ResolvedCreateSnapshotTableStmtProto* resolved_create_snapshot_table_stmt_node_;
    ::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto* resolved_create_privilege_restriction_stmt_node_;
  } node_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedCreateStatementProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedCreateStatementProto) */ {
 public:
  ResolvedCreateStatementProto();
  virtual ~ResolvedCreateStatementProto();

  ResolvedCreateStatementProto(const ResolvedCreateStatementProto& from);

  inline ResolvedCreateStatementProto& operator=(const ResolvedCreateStatementProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedCreateStatementProto(ResolvedCreateStatementProto&& from) noexcept
    : ResolvedCreateStatementProto() {
    *this = ::std::move(from);
  }

  inline ResolvedCreateStatementProto& operator=(ResolvedCreateStatementProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedCreateStatementProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedCreateStatementProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedCreateStatementProto*>(
               &_ResolvedCreateStatementProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  void Swap(ResolvedCreateStatementProto* other);
  friend void swap(ResolvedCreateStatementProto& a, ResolvedCreateStatementProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedCreateStatementProto* New() const final {
    return CreateMaybeMessage<ResolvedCreateStatementProto>(NULL);
  }

  ResolvedCreateStatementProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedCreateStatementProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedCreateStatementProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name_path = 2;
  int name_path_size() const;
  void clear_name_path();
  static const int kNamePathFieldNumber = 2;
  const ::std::string& name_path(int index) const;
  ::std::string* mutable_name_path(int index);
  void set_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name_path(int index, ::std::string&& value);
  #endif
  void set_name_path(int index, const char* value);
  void set_name_path(int index, const char* value, size_t size);
  ::std::string* add_name_path();
  void add_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_name_path(::std::string&& value);
  #endif
  void add_name_path(const char* value);
  void add_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_path();

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional .zetasql.ResolvedCreateStatementEnums.CreateMode create_mode = 4;
  bool has_create_mode() const;
  void clear_create_mode();
  static const int kCreateModeFieldNumber = 4;
  ::zetasql::ResolvedCreateStatementEnums_CreateMode create_mode() const;
  void set_create_mode(::zetasql::ResolvedCreateStatementEnums_CreateMode value);

  // optional .zetasql.ResolvedCreateStatementEnums.CreateScope create_scope = 5;
  bool has_create_scope() const;
  void clear_create_scope();
  static const int kCreateScopeFieldNumber = 5;
  ::zetasql::ResolvedCreateStatementEnums_CreateScope create_scope() const;
  void set_create_scope(::zetasql::ResolvedCreateStatementEnums_CreateScope value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedCreateStatementProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_create_scope();
  void clear_has_create_scope();
  void set_has_create_mode();
  void clear_has_create_mode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_path_;
  ::zetasql::ResolvedStatementProto* parent_;
  int create_mode_;
  int create_scope_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedIndexItemProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedIndexItemProto) */ {
 public:
  ResolvedIndexItemProto();
  virtual ~ResolvedIndexItemProto();

  ResolvedIndexItemProto(const ResolvedIndexItemProto& from);

  inline ResolvedIndexItemProto& operator=(const ResolvedIndexItemProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedIndexItemProto(ResolvedIndexItemProto&& from) noexcept
    : ResolvedIndexItemProto() {
    *this = ::std::move(from);
  }

  inline ResolvedIndexItemProto& operator=(ResolvedIndexItemProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedIndexItemProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedIndexItemProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedIndexItemProto*>(
               &_ResolvedIndexItemProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  void Swap(ResolvedIndexItemProto* other);
  friend void swap(ResolvedIndexItemProto& a, ResolvedIndexItemProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedIndexItemProto* New() const final {
    return CreateMaybeMessage<ResolvedIndexItemProto>(NULL);
  }

  ResolvedIndexItemProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedIndexItemProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedIndexItemProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.ResolvedColumnRefProto column_ref = 2;
  bool has_column_ref() const;
  void clear_column_ref();
  static const int kColumnRefFieldNumber = 2;
  private:
  const ::zetasql::ResolvedColumnRefProto& _internal_column_ref() const;
  public:
  const ::zetasql::ResolvedColumnRefProto& column_ref() const;
  ::zetasql::ResolvedColumnRefProto* release_column_ref();
  ::zetasql::ResolvedColumnRefProto* mutable_column_ref();
  void set_allocated_column_ref(::zetasql::ResolvedColumnRefProto* column_ref);

  // optional bool descending = 3;
  bool has_descending() const;
  void clear_descending();
  static const int kDescendingFieldNumber = 3;
  bool descending() const;
  void set_descending(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedIndexItemProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_column_ref();
  void clear_has_column_ref();
  void set_has_descending();
  void clear_has_descending();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::ResolvedColumnRefProto* column_ref_;
  bool descending_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedUnnestItemProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedUnnestItemProto) */ {
 public:
  ResolvedUnnestItemProto();
  virtual ~ResolvedUnnestItemProto();

  ResolvedUnnestItemProto(const ResolvedUnnestItemProto& from);

  inline ResolvedUnnestItemProto& operator=(const ResolvedUnnestItemProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedUnnestItemProto(ResolvedUnnestItemProto&& from) noexcept
    : ResolvedUnnestItemProto() {
    *this = ::std::move(from);
  }

  inline ResolvedUnnestItemProto& operator=(ResolvedUnnestItemProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedUnnestItemProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedUnnestItemProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedUnnestItemProto*>(
               &_ResolvedUnnestItemProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  void Swap(ResolvedUnnestItemProto* other);
  friend void swap(ResolvedUnnestItemProto& a, ResolvedUnnestItemProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedUnnestItemProto* New() const final {
    return CreateMaybeMessage<ResolvedUnnestItemProto>(NULL);
  }

  ResolvedUnnestItemProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedUnnestItemProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedUnnestItemProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.AnyResolvedExprProto array_expr = 2;
  bool has_array_expr() const;
  void clear_array_expr();
  static const int kArrayExprFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_array_expr() const;
  public:
  const ::zetasql::AnyResolvedExprProto& array_expr() const;
  ::zetasql::AnyResolvedExprProto* release_array_expr();
  ::zetasql::AnyResolvedExprProto* mutable_array_expr();
  void set_allocated_array_expr(::zetasql::AnyResolvedExprProto* array_expr);

  // optional .zetasql.ResolvedColumnProto element_column = 3;
  bool has_element_column() const;
  void clear_element_column();
  static const int kElementColumnFieldNumber = 3;
  private:
  const ::zetasql::ResolvedColumnProto& _internal_element_column() const;
  public:
  const ::zetasql::ResolvedColumnProto& element_column() const;
  ::zetasql::ResolvedColumnProto* release_element_column();
  ::zetasql::ResolvedColumnProto* mutable_element_column();
  void set_allocated_element_column(::zetasql::ResolvedColumnProto* element_column);

  // optional .zetasql.ResolvedColumnHolderProto array_offset_column = 4;
  bool has_array_offset_column() const;
  void clear_array_offset_column();
  static const int kArrayOffsetColumnFieldNumber = 4;
  private:
  const ::zetasql::ResolvedColumnHolderProto& _internal_array_offset_column() const;
  public:
  const ::zetasql::ResolvedColumnHolderProto& array_offset_column() const;
  ::zetasql::ResolvedColumnHolderProto* release_array_offset_column();
  ::zetasql::ResolvedColumnHolderProto* mutable_array_offset_column();
  void set_allocated_array_offset_column(::zetasql::ResolvedColumnHolderProto* array_offset_column);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedUnnestItemProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_array_expr();
  void clear_has_array_expr();
  void set_has_element_column();
  void clear_has_element_column();
  void set_has_array_offset_column();
  void clear_has_array_offset_column();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::AnyResolvedExprProto* array_expr_;
  ::zetasql::ResolvedColumnProto* element_column_;
  ::zetasql::ResolvedColumnHolderProto* array_offset_column_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedCreateIndexStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedCreateIndexStmtProto) */ {
 public:
  ResolvedCreateIndexStmtProto();
  virtual ~ResolvedCreateIndexStmtProto();

  ResolvedCreateIndexStmtProto(const ResolvedCreateIndexStmtProto& from);

  inline ResolvedCreateIndexStmtProto& operator=(const ResolvedCreateIndexStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedCreateIndexStmtProto(ResolvedCreateIndexStmtProto&& from) noexcept
    : ResolvedCreateIndexStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedCreateIndexStmtProto& operator=(ResolvedCreateIndexStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedCreateIndexStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedCreateIndexStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedCreateIndexStmtProto*>(
               &_ResolvedCreateIndexStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  void Swap(ResolvedCreateIndexStmtProto* other);
  friend void swap(ResolvedCreateIndexStmtProto& a, ResolvedCreateIndexStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedCreateIndexStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedCreateIndexStmtProto>(NULL);
  }

  ResolvedCreateIndexStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedCreateIndexStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedCreateIndexStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string table_name_path = 2;
  int table_name_path_size() const;
  void clear_table_name_path();
  static const int kTableNamePathFieldNumber = 2;
  const ::std::string& table_name_path(int index) const;
  ::std::string* mutable_table_name_path(int index);
  void set_table_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_table_name_path(int index, ::std::string&& value);
  #endif
  void set_table_name_path(int index, const char* value);
  void set_table_name_path(int index, const char* value, size_t size);
  ::std::string* add_table_name_path();
  void add_table_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_table_name_path(::std::string&& value);
  #endif
  void add_table_name_path(const char* value);
  void add_table_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& table_name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_table_name_path();

  // repeated .zetasql.ResolvedIndexItemProto index_item_list = 5;
  int index_item_list_size() const;
  void clear_index_item_list();
  static const int kIndexItemListFieldNumber = 5;
  ::zetasql::ResolvedIndexItemProto* mutable_index_item_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedIndexItemProto >*
      mutable_index_item_list();
  const ::zetasql::ResolvedIndexItemProto& index_item_list(int index) const;
  ::zetasql::ResolvedIndexItemProto* add_index_item_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedIndexItemProto >&
      index_item_list() const;

  // repeated .zetasql.ResolvedOptionProto option_list = 6;
  int option_list_size() const;
  void clear_option_list();
  static const int kOptionListFieldNumber = 6;
  ::zetasql::ResolvedOptionProto* mutable_option_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_option_list();
  const ::zetasql::ResolvedOptionProto& option_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_option_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      option_list() const;

  // repeated .zetasql.ResolvedComputedColumnProto computed_columns_list = 7;
  int computed_columns_list_size() const;
  void clear_computed_columns_list();
  static const int kComputedColumnsListFieldNumber = 7;
  ::zetasql::ResolvedComputedColumnProto* mutable_computed_columns_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >*
      mutable_computed_columns_list();
  const ::zetasql::ResolvedComputedColumnProto& computed_columns_list(int index) const;
  ::zetasql::ResolvedComputedColumnProto* add_computed_columns_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >&
      computed_columns_list() const;

  // repeated .zetasql.ResolvedUnnestItemProto unnest_expressions_list = 8;
  int unnest_expressions_list_size() const;
  void clear_unnest_expressions_list();
  static const int kUnnestExpressionsListFieldNumber = 8;
  ::zetasql::ResolvedUnnestItemProto* mutable_unnest_expressions_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUnnestItemProto >*
      mutable_unnest_expressions_list();
  const ::zetasql::ResolvedUnnestItemProto& unnest_expressions_list(int index) const;
  ::zetasql::ResolvedUnnestItemProto* add_unnest_expressions_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUnnestItemProto >&
      unnest_expressions_list() const;

  // repeated .zetasql.AnyResolvedExprProto storing_expression_list = 9;
  int storing_expression_list_size() const;
  void clear_storing_expression_list();
  static const int kStoringExpressionListFieldNumber = 9;
  ::zetasql::AnyResolvedExprProto* mutable_storing_expression_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
      mutable_storing_expression_list();
  const ::zetasql::AnyResolvedExprProto& storing_expression_list(int index) const;
  ::zetasql::AnyResolvedExprProto* add_storing_expression_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
      storing_expression_list() const;

  // optional .zetasql.ResolvedCreateStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedCreateStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedCreateStatementProto& parent() const;
  ::zetasql::ResolvedCreateStatementProto* release_parent();
  ::zetasql::ResolvedCreateStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedCreateStatementProto* parent);

  // optional .zetasql.ResolvedTableScanProto table_scan = 3;
  bool has_table_scan() const;
  void clear_table_scan();
  static const int kTableScanFieldNumber = 3;
  private:
  const ::zetasql::ResolvedTableScanProto& _internal_table_scan() const;
  public:
  const ::zetasql::ResolvedTableScanProto& table_scan() const;
  ::zetasql::ResolvedTableScanProto* release_table_scan();
  ::zetasql::ResolvedTableScanProto* mutable_table_scan();
  void set_allocated_table_scan(::zetasql::ResolvedTableScanProto* table_scan);

  // optional bool is_unique = 4;
  bool has_is_unique() const;
  void clear_is_unique();
  static const int kIsUniqueFieldNumber = 4;
  bool is_unique() const;
  void set_is_unique(bool value);

  // optional bool is_search = 10;
  bool has_is_search() const;
  void clear_is_search();
  static const int kIsSearchFieldNumber = 10;
  bool is_search() const;
  void set_is_search(bool value);

  // optional bool index_all_columns = 11;
  bool has_index_all_columns() const;
  void clear_index_all_columns();
  static const int kIndexAllColumnsFieldNumber = 11;
  bool index_all_columns() const;
  void set_index_all_columns(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedCreateIndexStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_table_scan();
  void clear_has_table_scan();
  void set_has_is_unique();
  void clear_has_is_unique();
  void set_has_is_search();
  void clear_has_is_search();
  void set_has_index_all_columns();
  void clear_has_index_all_columns();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> table_name_path_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedIndexItemProto > index_item_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > option_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto > computed_columns_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUnnestItemProto > unnest_expressions_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto > storing_expression_list_;
  ::zetasql::ResolvedCreateStatementProto* parent_;
  ::zetasql::ResolvedTableScanProto* table_scan_;
  bool is_unique_;
  bool is_search_;
  bool index_all_columns_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedCreateSchemaStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedCreateSchemaStmtProto) */ {
 public:
  ResolvedCreateSchemaStmtProto();
  virtual ~ResolvedCreateSchemaStmtProto();

  ResolvedCreateSchemaStmtProto(const ResolvedCreateSchemaStmtProto& from);

  inline ResolvedCreateSchemaStmtProto& operator=(const ResolvedCreateSchemaStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedCreateSchemaStmtProto(ResolvedCreateSchemaStmtProto&& from) noexcept
    : ResolvedCreateSchemaStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedCreateSchemaStmtProto& operator=(ResolvedCreateSchemaStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedCreateSchemaStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedCreateSchemaStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedCreateSchemaStmtProto*>(
               &_ResolvedCreateSchemaStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  void Swap(ResolvedCreateSchemaStmtProto* other);
  friend void swap(ResolvedCreateSchemaStmtProto& a, ResolvedCreateSchemaStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedCreateSchemaStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedCreateSchemaStmtProto>(NULL);
  }

  ResolvedCreateSchemaStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedCreateSchemaStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedCreateSchemaStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedOptionProto option_list = 2;
  int option_list_size() const;
  void clear_option_list();
  static const int kOptionListFieldNumber = 2;
  ::zetasql::ResolvedOptionProto* mutable_option_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_option_list();
  const ::zetasql::ResolvedOptionProto& option_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_option_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      option_list() const;

  // optional .zetasql.ResolvedCreateStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedCreateStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedCreateStatementProto& parent() const;
  ::zetasql::ResolvedCreateStatementProto* release_parent();
  ::zetasql::ResolvedCreateStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedCreateStatementProto* parent);

  // optional .zetasql.AnyResolvedExprProto collation_name = 3;
  bool has_collation_name() const;
  void clear_collation_name();
  static const int kCollationNameFieldNumber = 3;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_collation_name() const;
  public:
  const ::zetasql::AnyResolvedExprProto& collation_name() const;
  ::zetasql::AnyResolvedExprProto* release_collation_name();
  ::zetasql::AnyResolvedExprProto* mutable_collation_name();
  void set_allocated_collation_name(::zetasql::AnyResolvedExprProto* collation_name);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedCreateSchemaStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_collation_name();
  void clear_has_collation_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > option_list_;
  ::zetasql::ResolvedCreateStatementProto* parent_;
  ::zetasql::AnyResolvedExprProto* collation_name_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnyResolvedCreateTableStmtBaseProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.AnyResolvedCreateTableStmtBaseProto) */ {
 public:
  AnyResolvedCreateTableStmtBaseProto();
  virtual ~AnyResolvedCreateTableStmtBaseProto();

  AnyResolvedCreateTableStmtBaseProto(const AnyResolvedCreateTableStmtBaseProto& from);

  inline AnyResolvedCreateTableStmtBaseProto& operator=(const AnyResolvedCreateTableStmtBaseProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnyResolvedCreateTableStmtBaseProto(AnyResolvedCreateTableStmtBaseProto&& from) noexcept
    : AnyResolvedCreateTableStmtBaseProto() {
    *this = ::std::move(from);
  }

  inline AnyResolvedCreateTableStmtBaseProto& operator=(AnyResolvedCreateTableStmtBaseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnyResolvedCreateTableStmtBaseProto& default_instance();

  enum NodeCase {
    kResolvedCreateTableAsSelectStmtNode = 40,
    kResolvedCreateExternalTableStmtNode = 42,
    kResolvedCreateTableStmtNode = 90,
    NODE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnyResolvedCreateTableStmtBaseProto* internal_default_instance() {
    return reinterpret_cast<const AnyResolvedCreateTableStmtBaseProto*>(
               &_AnyResolvedCreateTableStmtBaseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  void Swap(AnyResolvedCreateTableStmtBaseProto* other);
  friend void swap(AnyResolvedCreateTableStmtBaseProto& a, AnyResolvedCreateTableStmtBaseProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnyResolvedCreateTableStmtBaseProto* New() const final {
    return CreateMaybeMessage<AnyResolvedCreateTableStmtBaseProto>(NULL);
  }

  AnyResolvedCreateTableStmtBaseProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnyResolvedCreateTableStmtBaseProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyResolvedCreateTableStmtBaseProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedCreateTableAsSelectStmtProto resolved_create_table_as_select_stmt_node = 40;
  bool has_resolved_create_table_as_select_stmt_node() const;
  void clear_resolved_create_table_as_select_stmt_node();
  static const int kResolvedCreateTableAsSelectStmtNodeFieldNumber = 40;
  private:
  const ::zetasql::ResolvedCreateTableAsSelectStmtProto& _internal_resolved_create_table_as_select_stmt_node() const;
  public:
  const ::zetasql::ResolvedCreateTableAsSelectStmtProto& resolved_create_table_as_select_stmt_node() const;
  ::zetasql::ResolvedCreateTableAsSelectStmtProto* release_resolved_create_table_as_select_stmt_node();
  ::zetasql::ResolvedCreateTableAsSelectStmtProto* mutable_resolved_create_table_as_select_stmt_node();
  void set_allocated_resolved_create_table_as_select_stmt_node(::zetasql::ResolvedCreateTableAsSelectStmtProto* resolved_create_table_as_select_stmt_node);

  // optional .zetasql.ResolvedCreateExternalTableStmtProto resolved_create_external_table_stmt_node = 42;
  bool has_resolved_create_external_table_stmt_node() const;
  void clear_resolved_create_external_table_stmt_node();
  static const int kResolvedCreateExternalTableStmtNodeFieldNumber = 42;
  private:
  const ::zetasql::ResolvedCreateExternalTableStmtProto& _internal_resolved_create_external_table_stmt_node() const;
  public:
  const ::zetasql::ResolvedCreateExternalTableStmtProto& resolved_create_external_table_stmt_node() const;
  ::zetasql::ResolvedCreateExternalTableStmtProto* release_resolved_create_external_table_stmt_node();
  ::zetasql::ResolvedCreateExternalTableStmtProto* mutable_resolved_create_external_table_stmt_node();
  void set_allocated_resolved_create_external_table_stmt_node(::zetasql::ResolvedCreateExternalTableStmtProto* resolved_create_external_table_stmt_node);

  // optional .zetasql.ResolvedCreateTableStmtProto resolved_create_table_stmt_node = 90;
  bool has_resolved_create_table_stmt_node() const;
  void clear_resolved_create_table_stmt_node();
  static const int kResolvedCreateTableStmtNodeFieldNumber = 90;
  private:
  const ::zetasql::ResolvedCreateTableStmtProto& _internal_resolved_create_table_stmt_node() const;
  public:
  const ::zetasql::ResolvedCreateTableStmtProto& resolved_create_table_stmt_node() const;
  ::zetasql::ResolvedCreateTableStmtProto* release_resolved_create_table_stmt_node();
  ::zetasql::ResolvedCreateTableStmtProto* mutable_resolved_create_table_stmt_node();
  void set_allocated_resolved_create_table_stmt_node(::zetasql::ResolvedCreateTableStmtProto* resolved_create_table_stmt_node);

  void clear_node();
  NodeCase node_case() const;
  // @@protoc_insertion_point(class_scope:zetasql.AnyResolvedCreateTableStmtBaseProto)
 private:
  void set_has_resolved_create_table_as_select_stmt_node();
  void set_has_resolved_create_external_table_stmt_node();
  void set_has_resolved_create_table_stmt_node();

  inline bool has_node() const;
  inline void clear_has_node();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union NodeUnion {
    NodeUnion() {}
    ::zetasql::ResolvedCreateTableAsSelectStmtProto* resolved_create_table_as_select_stmt_node_;
    ::zetasql::ResolvedCreateExternalTableStmtProto* resolved_create_external_table_stmt_node_;
    ::zetasql::ResolvedCreateTableStmtProto* resolved_create_table_stmt_node_;
  } node_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedCreateTableStmtBaseProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedCreateTableStmtBaseProto) */ {
 public:
  ResolvedCreateTableStmtBaseProto();
  virtual ~ResolvedCreateTableStmtBaseProto();

  ResolvedCreateTableStmtBaseProto(const ResolvedCreateTableStmtBaseProto& from);

  inline ResolvedCreateTableStmtBaseProto& operator=(const ResolvedCreateTableStmtBaseProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedCreateTableStmtBaseProto(ResolvedCreateTableStmtBaseProto&& from) noexcept
    : ResolvedCreateTableStmtBaseProto() {
    *this = ::std::move(from);
  }

  inline ResolvedCreateTableStmtBaseProto& operator=(ResolvedCreateTableStmtBaseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedCreateTableStmtBaseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedCreateTableStmtBaseProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedCreateTableStmtBaseProto*>(
               &_ResolvedCreateTableStmtBaseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  void Swap(ResolvedCreateTableStmtBaseProto* other);
  friend void swap(ResolvedCreateTableStmtBaseProto& a, ResolvedCreateTableStmtBaseProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedCreateTableStmtBaseProto* New() const final {
    return CreateMaybeMessage<ResolvedCreateTableStmtBaseProto>(NULL);
  }

  ResolvedCreateTableStmtBaseProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedCreateTableStmtBaseProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedCreateTableStmtBaseProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedOptionProto option_list = 2;
  int option_list_size() const;
  void clear_option_list();
  static const int kOptionListFieldNumber = 2;
  ::zetasql::ResolvedOptionProto* mutable_option_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_option_list();
  const ::zetasql::ResolvedOptionProto& option_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_option_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      option_list() const;

  // repeated .zetasql.ResolvedColumnDefinitionProto column_definition_list = 3;
  int column_definition_list_size() const;
  void clear_column_definition_list();
  static const int kColumnDefinitionListFieldNumber = 3;
  ::zetasql::ResolvedColumnDefinitionProto* mutable_column_definition_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnDefinitionProto >*
      mutable_column_definition_list();
  const ::zetasql::ResolvedColumnDefinitionProto& column_definition_list(int index) const;
  ::zetasql::ResolvedColumnDefinitionProto* add_column_definition_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnDefinitionProto >&
      column_definition_list() const;

  // repeated .zetasql.ResolvedColumnProto pseudo_column_list = 7;
  int pseudo_column_list_size() const;
  void clear_pseudo_column_list();
  static const int kPseudoColumnListFieldNumber = 7;
  ::zetasql::ResolvedColumnProto* mutable_pseudo_column_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >*
      mutable_pseudo_column_list();
  const ::zetasql::ResolvedColumnProto& pseudo_column_list(int index) const;
  ::zetasql::ResolvedColumnProto* add_pseudo_column_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >&
      pseudo_column_list() const;

  // repeated .zetasql.ResolvedForeignKeyProto foreign_key_list = 9;
  int foreign_key_list_size() const;
  void clear_foreign_key_list();
  static const int kForeignKeyListFieldNumber = 9;
  ::zetasql::ResolvedForeignKeyProto* mutable_foreign_key_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedForeignKeyProto >*
      mutable_foreign_key_list();
  const ::zetasql::ResolvedForeignKeyProto& foreign_key_list(int index) const;
  ::zetasql::ResolvedForeignKeyProto* add_foreign_key_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedForeignKeyProto >&
      foreign_key_list() const;

  // repeated .zetasql.ResolvedCheckConstraintProto check_constraint_list = 10;
  int check_constraint_list_size() const;
  void clear_check_constraint_list();
  static const int kCheckConstraintListFieldNumber = 10;
  ::zetasql::ResolvedCheckConstraintProto* mutable_check_constraint_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedCheckConstraintProto >*
      mutable_check_constraint_list();
  const ::zetasql::ResolvedCheckConstraintProto& check_constraint_list(int index) const;
  ::zetasql::ResolvedCheckConstraintProto* add_check_constraint_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedCheckConstraintProto >&
      check_constraint_list() const;

  // optional .zetasql.ResolvedCreateStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedCreateStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedCreateStatementProto& parent() const;
  ::zetasql::ResolvedCreateStatementProto* release_parent();
  ::zetasql::ResolvedCreateStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedCreateStatementProto* parent);

  // optional .zetasql.ResolvedPrimaryKeyProto primary_key = 4;
  bool has_primary_key() const;
  void clear_primary_key();
  static const int kPrimaryKeyFieldNumber = 4;
  private:
  const ::zetasql::ResolvedPrimaryKeyProto& _internal_primary_key() const;
  public:
  const ::zetasql::ResolvedPrimaryKeyProto& primary_key() const;
  ::zetasql::ResolvedPrimaryKeyProto* release_primary_key();
  ::zetasql::ResolvedPrimaryKeyProto* mutable_primary_key();
  void set_allocated_primary_key(::zetasql::ResolvedPrimaryKeyProto* primary_key);

  // optional .zetasql.TableRefProto like_table = 11;
  bool has_like_table() const;
  void clear_like_table();
  static const int kLikeTableFieldNumber = 11;
  private:
  const ::zetasql::TableRefProto& _internal_like_table() const;
  public:
  const ::zetasql::TableRefProto& like_table() const;
  ::zetasql::TableRefProto* release_like_table();
  ::zetasql::TableRefProto* mutable_like_table();
  void set_allocated_like_table(::zetasql::TableRefProto* like_table);

  // optional .zetasql.AnyResolvedExprProto collation_name = 12;
  bool has_collation_name() const;
  void clear_collation_name();
  static const int kCollationNameFieldNumber = 12;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_collation_name() const;
  public:
  const ::zetasql::AnyResolvedExprProto& collation_name() const;
  ::zetasql::AnyResolvedExprProto* release_collation_name();
  ::zetasql::AnyResolvedExprProto* mutable_collation_name();
  void set_allocated_collation_name(::zetasql::AnyResolvedExprProto* collation_name);

  // optional bool is_value_table = 8;
  bool has_is_value_table() const;
  void clear_is_value_table();
  static const int kIsValueTableFieldNumber = 8;
  bool is_value_table() const;
  void set_is_value_table(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedCreateTableStmtBaseProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_primary_key();
  void clear_has_primary_key();
  void set_has_is_value_table();
  void clear_has_is_value_table();
  void set_has_like_table();
  void clear_has_like_table();
  void set_has_collation_name();
  void clear_has_collation_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > option_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnDefinitionProto > column_definition_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto > pseudo_column_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedForeignKeyProto > foreign_key_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedCheckConstraintProto > check_constraint_list_;
  ::zetasql::ResolvedCreateStatementProto* parent_;
  ::zetasql::ResolvedPrimaryKeyProto* primary_key_;
  ::zetasql::TableRefProto* like_table_;
  ::zetasql::AnyResolvedExprProto* collation_name_;
  bool is_value_table_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedCreateTableStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedCreateTableStmtProto) */ {
 public:
  ResolvedCreateTableStmtProto();
  virtual ~ResolvedCreateTableStmtProto();

  ResolvedCreateTableStmtProto(const ResolvedCreateTableStmtProto& from);

  inline ResolvedCreateTableStmtProto& operator=(const ResolvedCreateTableStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedCreateTableStmtProto(ResolvedCreateTableStmtProto&& from) noexcept
    : ResolvedCreateTableStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedCreateTableStmtProto& operator=(ResolvedCreateTableStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedCreateTableStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedCreateTableStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedCreateTableStmtProto*>(
               &_ResolvedCreateTableStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  void Swap(ResolvedCreateTableStmtProto* other);
  friend void swap(ResolvedCreateTableStmtProto& a, ResolvedCreateTableStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedCreateTableStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedCreateTableStmtProto>(NULL);
  }

  ResolvedCreateTableStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedCreateTableStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedCreateTableStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.AnyResolvedExprProto partition_by_list = 5;
  int partition_by_list_size() const;
  void clear_partition_by_list();
  static const int kPartitionByListFieldNumber = 5;
  ::zetasql::AnyResolvedExprProto* mutable_partition_by_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
      mutable_partition_by_list();
  const ::zetasql::AnyResolvedExprProto& partition_by_list(int index) const;
  ::zetasql::AnyResolvedExprProto* add_partition_by_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
      partition_by_list() const;

  // repeated .zetasql.AnyResolvedExprProto cluster_by_list = 6;
  int cluster_by_list_size() const;
  void clear_cluster_by_list();
  static const int kClusterByListFieldNumber = 6;
  ::zetasql::AnyResolvedExprProto* mutable_cluster_by_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
      mutable_cluster_by_list();
  const ::zetasql::AnyResolvedExprProto& cluster_by_list(int index) const;
  ::zetasql::AnyResolvedExprProto* add_cluster_by_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
      cluster_by_list() const;

  // optional .zetasql.ResolvedCreateTableStmtBaseProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedCreateTableStmtBaseProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedCreateTableStmtBaseProto& parent() const;
  ::zetasql::ResolvedCreateTableStmtBaseProto* release_parent();
  ::zetasql::ResolvedCreateTableStmtBaseProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedCreateTableStmtBaseProto* parent);

  // optional .zetasql.AnyResolvedScanProto clone_from = 7;
  bool has_clone_from() const;
  void clear_clone_from();
  static const int kCloneFromFieldNumber = 7;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_clone_from() const;
  public:
  const ::zetasql::AnyResolvedScanProto& clone_from() const;
  ::zetasql::AnyResolvedScanProto* release_clone_from();
  ::zetasql::AnyResolvedScanProto* mutable_clone_from();
  void set_allocated_clone_from(::zetasql::AnyResolvedScanProto* clone_from);

  // optional .zetasql.AnyResolvedScanProto copy_from = 8;
  bool has_copy_from() const;
  void clear_copy_from();
  static const int kCopyFromFieldNumber = 8;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_copy_from() const;
  public:
  const ::zetasql::AnyResolvedScanProto& copy_from() const;
  ::zetasql::AnyResolvedScanProto* release_copy_from();
  ::zetasql::AnyResolvedScanProto* mutable_copy_from();
  void set_allocated_copy_from(::zetasql::AnyResolvedScanProto* copy_from);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedCreateTableStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_clone_from();
  void clear_has_clone_from();
  void set_has_copy_from();
  void clear_has_copy_from();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto > partition_by_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto > cluster_by_list_;
  ::zetasql::ResolvedCreateTableStmtBaseProto* parent_;
  ::zetasql::AnyResolvedScanProto* clone_from_;
  ::zetasql::AnyResolvedScanProto* copy_from_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedCreateTableAsSelectStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedCreateTableAsSelectStmtProto) */ {
 public:
  ResolvedCreateTableAsSelectStmtProto();
  virtual ~ResolvedCreateTableAsSelectStmtProto();

  ResolvedCreateTableAsSelectStmtProto(const ResolvedCreateTableAsSelectStmtProto& from);

  inline ResolvedCreateTableAsSelectStmtProto& operator=(const ResolvedCreateTableAsSelectStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedCreateTableAsSelectStmtProto(ResolvedCreateTableAsSelectStmtProto&& from) noexcept
    : ResolvedCreateTableAsSelectStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedCreateTableAsSelectStmtProto& operator=(ResolvedCreateTableAsSelectStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedCreateTableAsSelectStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedCreateTableAsSelectStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedCreateTableAsSelectStmtProto*>(
               &_ResolvedCreateTableAsSelectStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  void Swap(ResolvedCreateTableAsSelectStmtProto* other);
  friend void swap(ResolvedCreateTableAsSelectStmtProto& a, ResolvedCreateTableAsSelectStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedCreateTableAsSelectStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedCreateTableAsSelectStmtProto>(NULL);
  }

  ResolvedCreateTableAsSelectStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedCreateTableAsSelectStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedCreateTableAsSelectStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedOutputColumnProto output_column_list = 2;
  int output_column_list_size() const;
  void clear_output_column_list();
  static const int kOutputColumnListFieldNumber = 2;
  ::zetasql::ResolvedOutputColumnProto* mutable_output_column_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >*
      mutable_output_column_list();
  const ::zetasql::ResolvedOutputColumnProto& output_column_list(int index) const;
  ::zetasql::ResolvedOutputColumnProto* add_output_column_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >&
      output_column_list() const;

  // repeated .zetasql.AnyResolvedExprProto partition_by_list = 5;
  int partition_by_list_size() const;
  void clear_partition_by_list();
  static const int kPartitionByListFieldNumber = 5;
  ::zetasql::AnyResolvedExprProto* mutable_partition_by_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
      mutable_partition_by_list();
  const ::zetasql::AnyResolvedExprProto& partition_by_list(int index) const;
  ::zetasql::AnyResolvedExprProto* add_partition_by_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
      partition_by_list() const;

  // repeated .zetasql.AnyResolvedExprProto cluster_by_list = 6;
  int cluster_by_list_size() const;
  void clear_cluster_by_list();
  static const int kClusterByListFieldNumber = 6;
  ::zetasql::AnyResolvedExprProto* mutable_cluster_by_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
      mutable_cluster_by_list();
  const ::zetasql::AnyResolvedExprProto& cluster_by_list(int index) const;
  ::zetasql::AnyResolvedExprProto* add_cluster_by_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
      cluster_by_list() const;

  // optional .zetasql.ResolvedCreateTableStmtBaseProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedCreateTableStmtBaseProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedCreateTableStmtBaseProto& parent() const;
  ::zetasql::ResolvedCreateTableStmtBaseProto* release_parent();
  ::zetasql::ResolvedCreateTableStmtBaseProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedCreateTableStmtBaseProto* parent);

  // optional .zetasql.AnyResolvedScanProto query = 3;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 3;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_query() const;
  public:
  const ::zetasql::AnyResolvedScanProto& query() const;
  ::zetasql::AnyResolvedScanProto* release_query();
  ::zetasql::AnyResolvedScanProto* mutable_query();
  void set_allocated_query(::zetasql::AnyResolvedScanProto* query);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedCreateTableAsSelectStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_query();
  void clear_has_query();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto > output_column_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto > partition_by_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto > cluster_by_list_;
  ::zetasql::ResolvedCreateTableStmtBaseProto* parent_;
  ::zetasql::AnyResolvedScanProto* query_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedCreateModelStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedCreateModelStmtProto) */ {
 public:
  ResolvedCreateModelStmtProto();
  virtual ~ResolvedCreateModelStmtProto();

  ResolvedCreateModelStmtProto(const ResolvedCreateModelStmtProto& from);

  inline ResolvedCreateModelStmtProto& operator=(const ResolvedCreateModelStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedCreateModelStmtProto(ResolvedCreateModelStmtProto&& from) noexcept
    : ResolvedCreateModelStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedCreateModelStmtProto& operator=(ResolvedCreateModelStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedCreateModelStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedCreateModelStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedCreateModelStmtProto*>(
               &_ResolvedCreateModelStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  void Swap(ResolvedCreateModelStmtProto* other);
  friend void swap(ResolvedCreateModelStmtProto& a, ResolvedCreateModelStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedCreateModelStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedCreateModelStmtProto>(NULL);
  }

  ResolvedCreateModelStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedCreateModelStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedCreateModelStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedOptionProto option_list = 2;
  int option_list_size() const;
  void clear_option_list();
  static const int kOptionListFieldNumber = 2;
  ::zetasql::ResolvedOptionProto* mutable_option_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_option_list();
  const ::zetasql::ResolvedOptionProto& option_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_option_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      option_list() const;

  // repeated .zetasql.ResolvedOutputColumnProto output_column_list = 3;
  int output_column_list_size() const;
  void clear_output_column_list();
  static const int kOutputColumnListFieldNumber = 3;
  ::zetasql::ResolvedOutputColumnProto* mutable_output_column_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >*
      mutable_output_column_list();
  const ::zetasql::ResolvedOutputColumnProto& output_column_list(int index) const;
  ::zetasql::ResolvedOutputColumnProto* add_output_column_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >&
      output_column_list() const;

  // repeated .zetasql.ResolvedComputedColumnProto transform_list = 5;
  int transform_list_size() const;
  void clear_transform_list();
  static const int kTransformListFieldNumber = 5;
  ::zetasql::ResolvedComputedColumnProto* mutable_transform_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >*
      mutable_transform_list();
  const ::zetasql::ResolvedComputedColumnProto& transform_list(int index) const;
  ::zetasql::ResolvedComputedColumnProto* add_transform_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >&
      transform_list() const;

  // repeated .zetasql.ResolvedOutputColumnProto transform_output_column_list = 6;
  int transform_output_column_list_size() const;
  void clear_transform_output_column_list();
  static const int kTransformOutputColumnListFieldNumber = 6;
  ::zetasql::ResolvedOutputColumnProto* mutable_transform_output_column_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >*
      mutable_transform_output_column_list();
  const ::zetasql::ResolvedOutputColumnProto& transform_output_column_list(int index) const;
  ::zetasql::ResolvedOutputColumnProto* add_transform_output_column_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >&
      transform_output_column_list() const;

  // repeated .zetasql.ResolvedAnalyticFunctionGroupProto transform_analytic_function_group_list = 7;
  int transform_analytic_function_group_list_size() const;
  void clear_transform_analytic_function_group_list();
  static const int kTransformAnalyticFunctionGroupListFieldNumber = 7;
  ::zetasql::ResolvedAnalyticFunctionGroupProto* mutable_transform_analytic_function_group_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedAnalyticFunctionGroupProto >*
      mutable_transform_analytic_function_group_list();
  const ::zetasql::ResolvedAnalyticFunctionGroupProto& transform_analytic_function_group_list(int index) const;
  ::zetasql::ResolvedAnalyticFunctionGroupProto* add_transform_analytic_function_group_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedAnalyticFunctionGroupProto >&
      transform_analytic_function_group_list() const;

  // repeated .zetasql.ResolvedColumnDefinitionProto transform_input_column_list = 8;
  int transform_input_column_list_size() const;
  void clear_transform_input_column_list();
  static const int kTransformInputColumnListFieldNumber = 8;
  ::zetasql::ResolvedColumnDefinitionProto* mutable_transform_input_column_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnDefinitionProto >*
      mutable_transform_input_column_list();
  const ::zetasql::ResolvedColumnDefinitionProto& transform_input_column_list(int index) const;
  ::zetasql::ResolvedColumnDefinitionProto* add_transform_input_column_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnDefinitionProto >&
      transform_input_column_list() const;

  // optional .zetasql.ResolvedCreateStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedCreateStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedCreateStatementProto& parent() const;
  ::zetasql::ResolvedCreateStatementProto* release_parent();
  ::zetasql::ResolvedCreateStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedCreateStatementProto* parent);

  // optional .zetasql.AnyResolvedScanProto query = 4;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 4;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_query() const;
  public:
  const ::zetasql::AnyResolvedScanProto& query() const;
  ::zetasql::AnyResolvedScanProto* release_query();
  ::zetasql::AnyResolvedScanProto* mutable_query();
  void set_allocated_query(::zetasql::AnyResolvedScanProto* query);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedCreateModelStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_query();
  void clear_has_query();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > option_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto > output_column_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto > transform_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto > transform_output_column_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedAnalyticFunctionGroupProto > transform_analytic_function_group_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnDefinitionProto > transform_input_column_list_;
  ::zetasql::ResolvedCreateStatementProto* parent_;
  ::zetasql::AnyResolvedScanProto* query_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnyResolvedCreateViewBaseProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.AnyResolvedCreateViewBaseProto) */ {
 public:
  AnyResolvedCreateViewBaseProto();
  virtual ~AnyResolvedCreateViewBaseProto();

  AnyResolvedCreateViewBaseProto(const AnyResolvedCreateViewBaseProto& from);

  inline AnyResolvedCreateViewBaseProto& operator=(const AnyResolvedCreateViewBaseProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnyResolvedCreateViewBaseProto(AnyResolvedCreateViewBaseProto&& from) noexcept
    : AnyResolvedCreateViewBaseProto() {
    *this = ::std::move(from);
  }

  inline AnyResolvedCreateViewBaseProto& operator=(AnyResolvedCreateViewBaseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnyResolvedCreateViewBaseProto& default_instance();

  enum NodeCase {
    kResolvedCreateViewStmtNode = 41,
    kResolvedCreateMaterializedViewStmtNode = 119,
    NODE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnyResolvedCreateViewBaseProto* internal_default_instance() {
    return reinterpret_cast<const AnyResolvedCreateViewBaseProto*>(
               &_AnyResolvedCreateViewBaseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  void Swap(AnyResolvedCreateViewBaseProto* other);
  friend void swap(AnyResolvedCreateViewBaseProto& a, AnyResolvedCreateViewBaseProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnyResolvedCreateViewBaseProto* New() const final {
    return CreateMaybeMessage<AnyResolvedCreateViewBaseProto>(NULL);
  }

  AnyResolvedCreateViewBaseProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnyResolvedCreateViewBaseProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyResolvedCreateViewBaseProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedCreateViewStmtProto resolved_create_view_stmt_node = 41;
  bool has_resolved_create_view_stmt_node() const;
  void clear_resolved_create_view_stmt_node();
  static const int kResolvedCreateViewStmtNodeFieldNumber = 41;
  private:
  const ::zetasql::ResolvedCreateViewStmtProto& _internal_resolved_create_view_stmt_node() const;
  public:
  const ::zetasql::ResolvedCreateViewStmtProto& resolved_create_view_stmt_node() const;
  ::zetasql::ResolvedCreateViewStmtProto* release_resolved_create_view_stmt_node();
  ::zetasql::ResolvedCreateViewStmtProto* mutable_resolved_create_view_stmt_node();
  void set_allocated_resolved_create_view_stmt_node(::zetasql::ResolvedCreateViewStmtProto* resolved_create_view_stmt_node);

  // optional .zetasql.ResolvedCreateMaterializedViewStmtProto resolved_create_materialized_view_stmt_node = 119;
  bool has_resolved_create_materialized_view_stmt_node() const;
  void clear_resolved_create_materialized_view_stmt_node();
  static const int kResolvedCreateMaterializedViewStmtNodeFieldNumber = 119;
  private:
  const ::zetasql::ResolvedCreateMaterializedViewStmtProto& _internal_resolved_create_materialized_view_stmt_node() const;
  public:
  const ::zetasql::ResolvedCreateMaterializedViewStmtProto& resolved_create_materialized_view_stmt_node() const;
  ::zetasql::ResolvedCreateMaterializedViewStmtProto* release_resolved_create_materialized_view_stmt_node();
  ::zetasql::ResolvedCreateMaterializedViewStmtProto* mutable_resolved_create_materialized_view_stmt_node();
  void set_allocated_resolved_create_materialized_view_stmt_node(::zetasql::ResolvedCreateMaterializedViewStmtProto* resolved_create_materialized_view_stmt_node);

  void clear_node();
  NodeCase node_case() const;
  // @@protoc_insertion_point(class_scope:zetasql.AnyResolvedCreateViewBaseProto)
 private:
  void set_has_resolved_create_view_stmt_node();
  void set_has_resolved_create_materialized_view_stmt_node();

  inline bool has_node() const;
  inline void clear_has_node();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union NodeUnion {
    NodeUnion() {}
    ::zetasql::ResolvedCreateViewStmtProto* resolved_create_view_stmt_node_;
    ::zetasql::ResolvedCreateMaterializedViewStmtProto* resolved_create_materialized_view_stmt_node_;
  } node_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedCreateViewBaseProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedCreateViewBaseProto) */ {
 public:
  ResolvedCreateViewBaseProto();
  virtual ~ResolvedCreateViewBaseProto();

  ResolvedCreateViewBaseProto(const ResolvedCreateViewBaseProto& from);

  inline ResolvedCreateViewBaseProto& operator=(const ResolvedCreateViewBaseProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedCreateViewBaseProto(ResolvedCreateViewBaseProto&& from) noexcept
    : ResolvedCreateViewBaseProto() {
    *this = ::std::move(from);
  }

  inline ResolvedCreateViewBaseProto& operator=(ResolvedCreateViewBaseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedCreateViewBaseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedCreateViewBaseProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedCreateViewBaseProto*>(
               &_ResolvedCreateViewBaseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  void Swap(ResolvedCreateViewBaseProto* other);
  friend void swap(ResolvedCreateViewBaseProto& a, ResolvedCreateViewBaseProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedCreateViewBaseProto* New() const final {
    return CreateMaybeMessage<ResolvedCreateViewBaseProto>(NULL);
  }

  ResolvedCreateViewBaseProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedCreateViewBaseProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedCreateViewBaseProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedOptionProto option_list = 2;
  int option_list_size() const;
  void clear_option_list();
  static const int kOptionListFieldNumber = 2;
  ::zetasql::ResolvedOptionProto* mutable_option_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_option_list();
  const ::zetasql::ResolvedOptionProto& option_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_option_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      option_list() const;

  // repeated .zetasql.ResolvedOutputColumnProto output_column_list = 3;
  int output_column_list_size() const;
  void clear_output_column_list();
  static const int kOutputColumnListFieldNumber = 3;
  ::zetasql::ResolvedOutputColumnProto* mutable_output_column_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >*
      mutable_output_column_list();
  const ::zetasql::ResolvedOutputColumnProto& output_column_list(int index) const;
  ::zetasql::ResolvedOutputColumnProto* add_output_column_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >&
      output_column_list() const;

  // optional string sql = 6;
  bool has_sql() const;
  void clear_sql();
  static const int kSqlFieldNumber = 6;
  const ::std::string& sql() const;
  void set_sql(const ::std::string& value);
  #if LANG_CXX11
  void set_sql(::std::string&& value);
  #endif
  void set_sql(const char* value);
  void set_sql(const char* value, size_t size);
  ::std::string* mutable_sql();
  ::std::string* release_sql();
  void set_allocated_sql(::std::string* sql);

  // optional .zetasql.ResolvedCreateStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedCreateStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedCreateStatementProto& parent() const;
  ::zetasql::ResolvedCreateStatementProto* release_parent();
  ::zetasql::ResolvedCreateStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedCreateStatementProto* parent);

  // optional .zetasql.AnyResolvedScanProto query = 5;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 5;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_query() const;
  public:
  const ::zetasql::AnyResolvedScanProto& query() const;
  ::zetasql::AnyResolvedScanProto* release_query();
  ::zetasql::AnyResolvedScanProto* mutable_query();
  void set_allocated_query(::zetasql::AnyResolvedScanProto* query);

  // optional .zetasql.ResolvedCreateStatementEnums.SqlSecurity sql_security = 7;
  bool has_sql_security() const;
  void clear_sql_security();
  static const int kSqlSecurityFieldNumber = 7;
  ::zetasql::ResolvedCreateStatementEnums_SqlSecurity sql_security() const;
  void set_sql_security(::zetasql::ResolvedCreateStatementEnums_SqlSecurity value);

  // optional bool has_explicit_columns = 9;
  bool has_has_explicit_columns() const;
  void clear_has_explicit_columns();
  static const int kHasExplicitColumnsFieldNumber = 9;
  bool has_explicit_columns() const;
  void set_has_explicit_columns(bool value);

  // optional bool is_value_table = 4;
  bool has_is_value_table() const;
  void clear_is_value_table();
  static const int kIsValueTableFieldNumber = 4;
  bool is_value_table() const;
  void set_is_value_table(bool value);

  // optional bool recursive = 8;
  bool has_recursive() const;
  void clear_recursive();
  static const int kRecursiveFieldNumber = 8;
  bool recursive() const;
  void set_recursive(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedCreateViewBaseProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_has_explicit_columns();
  void clear_has_has_explicit_columns();
  void set_has_query();
  void clear_has_query();
  void set_has_sql();
  void clear_has_sql();
  void set_has_sql_security();
  void clear_has_sql_security();
  void set_has_is_value_table();
  void clear_has_is_value_table();
  void set_has_recursive();
  void clear_has_recursive();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > option_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto > output_column_list_;
  ::google::protobuf::internal::ArenaStringPtr sql_;
  ::zetasql::ResolvedCreateStatementProto* parent_;
  ::zetasql::AnyResolvedScanProto* query_;
  int sql_security_;
  bool has_explicit_columns_;
  bool is_value_table_;
  bool recursive_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedCreateViewStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedCreateViewStmtProto) */ {
 public:
  ResolvedCreateViewStmtProto();
  virtual ~ResolvedCreateViewStmtProto();

  ResolvedCreateViewStmtProto(const ResolvedCreateViewStmtProto& from);

  inline ResolvedCreateViewStmtProto& operator=(const ResolvedCreateViewStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedCreateViewStmtProto(ResolvedCreateViewStmtProto&& from) noexcept
    : ResolvedCreateViewStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedCreateViewStmtProto& operator=(ResolvedCreateViewStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedCreateViewStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedCreateViewStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedCreateViewStmtProto*>(
               &_ResolvedCreateViewStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  void Swap(ResolvedCreateViewStmtProto* other);
  friend void swap(ResolvedCreateViewStmtProto& a, ResolvedCreateViewStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedCreateViewStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedCreateViewStmtProto>(NULL);
  }

  ResolvedCreateViewStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedCreateViewStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedCreateViewStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedCreateViewBaseProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedCreateViewBaseProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedCreateViewBaseProto& parent() const;
  ::zetasql::ResolvedCreateViewBaseProto* release_parent();
  ::zetasql::ResolvedCreateViewBaseProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedCreateViewBaseProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedCreateViewStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedCreateViewBaseProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedWithPartitionColumnsProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedWithPartitionColumnsProto) */ {
 public:
  ResolvedWithPartitionColumnsProto();
  virtual ~ResolvedWithPartitionColumnsProto();

  ResolvedWithPartitionColumnsProto(const ResolvedWithPartitionColumnsProto& from);

  inline ResolvedWithPartitionColumnsProto& operator=(const ResolvedWithPartitionColumnsProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedWithPartitionColumnsProto(ResolvedWithPartitionColumnsProto&& from) noexcept
    : ResolvedWithPartitionColumnsProto() {
    *this = ::std::move(from);
  }

  inline ResolvedWithPartitionColumnsProto& operator=(ResolvedWithPartitionColumnsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedWithPartitionColumnsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedWithPartitionColumnsProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedWithPartitionColumnsProto*>(
               &_ResolvedWithPartitionColumnsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  void Swap(ResolvedWithPartitionColumnsProto* other);
  friend void swap(ResolvedWithPartitionColumnsProto& a, ResolvedWithPartitionColumnsProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedWithPartitionColumnsProto* New() const final {
    return CreateMaybeMessage<ResolvedWithPartitionColumnsProto>(NULL);
  }

  ResolvedWithPartitionColumnsProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedWithPartitionColumnsProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedWithPartitionColumnsProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedColumnDefinitionProto column_definition_list = 2;
  int column_definition_list_size() const;
  void clear_column_definition_list();
  static const int kColumnDefinitionListFieldNumber = 2;
  ::zetasql::ResolvedColumnDefinitionProto* mutable_column_definition_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnDefinitionProto >*
      mutable_column_definition_list();
  const ::zetasql::ResolvedColumnDefinitionProto& column_definition_list(int index) const;
  ::zetasql::ResolvedColumnDefinitionProto* add_column_definition_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnDefinitionProto >&
      column_definition_list() const;

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedWithPartitionColumnsProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnDefinitionProto > column_definition_list_;
  ::zetasql::ResolvedArgumentProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedCreateSnapshotTableStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedCreateSnapshotTableStmtProto) */ {
 public:
  ResolvedCreateSnapshotTableStmtProto();
  virtual ~ResolvedCreateSnapshotTableStmtProto();

  ResolvedCreateSnapshotTableStmtProto(const ResolvedCreateSnapshotTableStmtProto& from);

  inline ResolvedCreateSnapshotTableStmtProto& operator=(const ResolvedCreateSnapshotTableStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedCreateSnapshotTableStmtProto(ResolvedCreateSnapshotTableStmtProto&& from) noexcept
    : ResolvedCreateSnapshotTableStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedCreateSnapshotTableStmtProto& operator=(ResolvedCreateSnapshotTableStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedCreateSnapshotTableStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedCreateSnapshotTableStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedCreateSnapshotTableStmtProto*>(
               &_ResolvedCreateSnapshotTableStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  void Swap(ResolvedCreateSnapshotTableStmtProto* other);
  friend void swap(ResolvedCreateSnapshotTableStmtProto& a, ResolvedCreateSnapshotTableStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedCreateSnapshotTableStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedCreateSnapshotTableStmtProto>(NULL);
  }

  ResolvedCreateSnapshotTableStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedCreateSnapshotTableStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedCreateSnapshotTableStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedOptionProto option_list = 3;
  int option_list_size() const;
  void clear_option_list();
  static const int kOptionListFieldNumber = 3;
  ::zetasql::ResolvedOptionProto* mutable_option_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_option_list();
  const ::zetasql::ResolvedOptionProto& option_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_option_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      option_list() const;

  // optional .zetasql.ResolvedCreateStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedCreateStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedCreateStatementProto& parent() const;
  ::zetasql::ResolvedCreateStatementProto* release_parent();
  ::zetasql::ResolvedCreateStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedCreateStatementProto* parent);

  // optional .zetasql.AnyResolvedScanProto clone_from = 2;
  bool has_clone_from() const;
  void clear_clone_from();
  static const int kCloneFromFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_clone_from() const;
  public:
  const ::zetasql::AnyResolvedScanProto& clone_from() const;
  ::zetasql::AnyResolvedScanProto* release_clone_from();
  ::zetasql::AnyResolvedScanProto* mutable_clone_from();
  void set_allocated_clone_from(::zetasql::AnyResolvedScanProto* clone_from);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedCreateSnapshotTableStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_clone_from();
  void clear_has_clone_from();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > option_list_;
  ::zetasql::ResolvedCreateStatementProto* parent_;
  ::zetasql::AnyResolvedScanProto* clone_from_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedCreateExternalTableStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedCreateExternalTableStmtProto) */ {
 public:
  ResolvedCreateExternalTableStmtProto();
  virtual ~ResolvedCreateExternalTableStmtProto();

  ResolvedCreateExternalTableStmtProto(const ResolvedCreateExternalTableStmtProto& from);

  inline ResolvedCreateExternalTableStmtProto& operator=(const ResolvedCreateExternalTableStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedCreateExternalTableStmtProto(ResolvedCreateExternalTableStmtProto&& from) noexcept
    : ResolvedCreateExternalTableStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedCreateExternalTableStmtProto& operator=(ResolvedCreateExternalTableStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedCreateExternalTableStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedCreateExternalTableStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedCreateExternalTableStmtProto*>(
               &_ResolvedCreateExternalTableStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  void Swap(ResolvedCreateExternalTableStmtProto* other);
  friend void swap(ResolvedCreateExternalTableStmtProto& a, ResolvedCreateExternalTableStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedCreateExternalTableStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedCreateExternalTableStmtProto>(NULL);
  }

  ResolvedCreateExternalTableStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedCreateExternalTableStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedCreateExternalTableStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedCreateTableStmtBaseProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedCreateTableStmtBaseProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedCreateTableStmtBaseProto& parent() const;
  ::zetasql::ResolvedCreateTableStmtBaseProto* release_parent();
  ::zetasql::ResolvedCreateTableStmtBaseProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedCreateTableStmtBaseProto* parent);

  // optional .zetasql.ResolvedWithPartitionColumnsProto with_partition_columns = 2;
  bool has_with_partition_columns() const;
  void clear_with_partition_columns();
  static const int kWithPartitionColumnsFieldNumber = 2;
  private:
  const ::zetasql::ResolvedWithPartitionColumnsProto& _internal_with_partition_columns() const;
  public:
  const ::zetasql::ResolvedWithPartitionColumnsProto& with_partition_columns() const;
  ::zetasql::ResolvedWithPartitionColumnsProto* release_with_partition_columns();
  ::zetasql::ResolvedWithPartitionColumnsProto* mutable_with_partition_columns();
  void set_allocated_with_partition_columns(::zetasql::ResolvedWithPartitionColumnsProto* with_partition_columns);

  // optional .zetasql.ResolvedConnectionProto connection = 3;
  bool has_connection() const;
  void clear_connection();
  static const int kConnectionFieldNumber = 3;
  private:
  const ::zetasql::ResolvedConnectionProto& _internal_connection() const;
  public:
  const ::zetasql::ResolvedConnectionProto& connection() const;
  ::zetasql::ResolvedConnectionProto* release_connection();
  ::zetasql::ResolvedConnectionProto* mutable_connection();
  void set_allocated_connection(::zetasql::ResolvedConnectionProto* connection);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedCreateExternalTableStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_with_partition_columns();
  void clear_has_with_partition_columns();
  void set_has_connection();
  void clear_has_connection();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedCreateTableStmtBaseProto* parent_;
  ::zetasql::ResolvedWithPartitionColumnsProto* with_partition_columns_;
  ::zetasql::ResolvedConnectionProto* connection_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedExportModelStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedExportModelStmtProto) */ {
 public:
  ResolvedExportModelStmtProto();
  virtual ~ResolvedExportModelStmtProto();

  ResolvedExportModelStmtProto(const ResolvedExportModelStmtProto& from);

  inline ResolvedExportModelStmtProto& operator=(const ResolvedExportModelStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedExportModelStmtProto(ResolvedExportModelStmtProto&& from) noexcept
    : ResolvedExportModelStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedExportModelStmtProto& operator=(ResolvedExportModelStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedExportModelStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedExportModelStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedExportModelStmtProto*>(
               &_ResolvedExportModelStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  void Swap(ResolvedExportModelStmtProto* other);
  friend void swap(ResolvedExportModelStmtProto& a, ResolvedExportModelStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedExportModelStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedExportModelStmtProto>(NULL);
  }

  ResolvedExportModelStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedExportModelStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedExportModelStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string model_name_path = 2;
  int model_name_path_size() const;
  void clear_model_name_path();
  static const int kModelNamePathFieldNumber = 2;
  const ::std::string& model_name_path(int index) const;
  ::std::string* mutable_model_name_path(int index);
  void set_model_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_model_name_path(int index, ::std::string&& value);
  #endif
  void set_model_name_path(int index, const char* value);
  void set_model_name_path(int index, const char* value, size_t size);
  ::std::string* add_model_name_path();
  void add_model_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_model_name_path(::std::string&& value);
  #endif
  void add_model_name_path(const char* value);
  void add_model_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& model_name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_model_name_path();

  // repeated .zetasql.ResolvedOptionProto option_list = 4;
  int option_list_size() const;
  void clear_option_list();
  static const int kOptionListFieldNumber = 4;
  ::zetasql::ResolvedOptionProto* mutable_option_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_option_list();
  const ::zetasql::ResolvedOptionProto& option_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_option_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      option_list() const;

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional .zetasql.ResolvedConnectionProto connection = 3;
  bool has_connection() const;
  void clear_connection();
  static const int kConnectionFieldNumber = 3;
  private:
  const ::zetasql::ResolvedConnectionProto& _internal_connection() const;
  public:
  const ::zetasql::ResolvedConnectionProto& connection() const;
  ::zetasql::ResolvedConnectionProto* release_connection();
  ::zetasql::ResolvedConnectionProto* mutable_connection();
  void set_allocated_connection(::zetasql::ResolvedConnectionProto* connection);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedExportModelStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_connection();
  void clear_has_connection();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> model_name_path_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > option_list_;
  ::zetasql::ResolvedStatementProto* parent_;
  ::zetasql::ResolvedConnectionProto* connection_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedExportDataStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedExportDataStmtProto) */ {
 public:
  ResolvedExportDataStmtProto();
  virtual ~ResolvedExportDataStmtProto();

  ResolvedExportDataStmtProto(const ResolvedExportDataStmtProto& from);

  inline ResolvedExportDataStmtProto& operator=(const ResolvedExportDataStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedExportDataStmtProto(ResolvedExportDataStmtProto&& from) noexcept
    : ResolvedExportDataStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedExportDataStmtProto& operator=(ResolvedExportDataStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedExportDataStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedExportDataStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedExportDataStmtProto*>(
               &_ResolvedExportDataStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  void Swap(ResolvedExportDataStmtProto* other);
  friend void swap(ResolvedExportDataStmtProto& a, ResolvedExportDataStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedExportDataStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedExportDataStmtProto>(NULL);
  }

  ResolvedExportDataStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedExportDataStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedExportDataStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedOptionProto option_list = 2;
  int option_list_size() const;
  void clear_option_list();
  static const int kOptionListFieldNumber = 2;
  ::zetasql::ResolvedOptionProto* mutable_option_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_option_list();
  const ::zetasql::ResolvedOptionProto& option_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_option_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      option_list() const;

  // repeated .zetasql.ResolvedOutputColumnProto output_column_list = 3;
  int output_column_list_size() const;
  void clear_output_column_list();
  static const int kOutputColumnListFieldNumber = 3;
  ::zetasql::ResolvedOutputColumnProto* mutable_output_column_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >*
      mutable_output_column_list();
  const ::zetasql::ResolvedOutputColumnProto& output_column_list(int index) const;
  ::zetasql::ResolvedOutputColumnProto* add_output_column_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >&
      output_column_list() const;

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional .zetasql.AnyResolvedScanProto query = 5;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 5;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_query() const;
  public:
  const ::zetasql::AnyResolvedScanProto& query() const;
  ::zetasql::AnyResolvedScanProto* release_query();
  ::zetasql::AnyResolvedScanProto* mutable_query();
  void set_allocated_query(::zetasql::AnyResolvedScanProto* query);

  // optional .zetasql.ResolvedConnectionProto connection = 6;
  bool has_connection() const;
  void clear_connection();
  static const int kConnectionFieldNumber = 6;
  private:
  const ::zetasql::ResolvedConnectionProto& _internal_connection() const;
  public:
  const ::zetasql::ResolvedConnectionProto& connection() const;
  ::zetasql::ResolvedConnectionProto* release_connection();
  ::zetasql::ResolvedConnectionProto* mutable_connection();
  void set_allocated_connection(::zetasql::ResolvedConnectionProto* connection);

  // optional bool is_value_table = 4;
  bool has_is_value_table() const;
  void clear_is_value_table();
  static const int kIsValueTableFieldNumber = 4;
  bool is_value_table() const;
  void set_is_value_table(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedExportDataStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_connection();
  void clear_has_connection();
  void set_has_is_value_table();
  void clear_has_is_value_table();
  void set_has_query();
  void clear_has_query();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > option_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto > output_column_list_;
  ::zetasql::ResolvedStatementProto* parent_;
  ::zetasql::AnyResolvedScanProto* query_;
  ::zetasql::ResolvedConnectionProto* connection_;
  bool is_value_table_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedDefineTableStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedDefineTableStmtProto) */ {
 public:
  ResolvedDefineTableStmtProto();
  virtual ~ResolvedDefineTableStmtProto();

  ResolvedDefineTableStmtProto(const ResolvedDefineTableStmtProto& from);

  inline ResolvedDefineTableStmtProto& operator=(const ResolvedDefineTableStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedDefineTableStmtProto(ResolvedDefineTableStmtProto&& from) noexcept
    : ResolvedDefineTableStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedDefineTableStmtProto& operator=(ResolvedDefineTableStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedDefineTableStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedDefineTableStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedDefineTableStmtProto*>(
               &_ResolvedDefineTableStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  void Swap(ResolvedDefineTableStmtProto* other);
  friend void swap(ResolvedDefineTableStmtProto& a, ResolvedDefineTableStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedDefineTableStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedDefineTableStmtProto>(NULL);
  }

  ResolvedDefineTableStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedDefineTableStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedDefineTableStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name_path = 2;
  int name_path_size() const;
  void clear_name_path();
  static const int kNamePathFieldNumber = 2;
  const ::std::string& name_path(int index) const;
  ::std::string* mutable_name_path(int index);
  void set_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name_path(int index, ::std::string&& value);
  #endif
  void set_name_path(int index, const char* value);
  void set_name_path(int index, const char* value, size_t size);
  ::std::string* add_name_path();
  void add_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_name_path(::std::string&& value);
  #endif
  void add_name_path(const char* value);
  void add_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_path();

  // repeated .zetasql.ResolvedOptionProto option_list = 3;
  int option_list_size() const;
  void clear_option_list();
  static const int kOptionListFieldNumber = 3;
  ::zetasql::ResolvedOptionProto* mutable_option_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_option_list();
  const ::zetasql::ResolvedOptionProto& option_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_option_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      option_list() const;

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedDefineTableStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_path_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > option_list_;
  ::zetasql::ResolvedStatementProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedDescribeStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedDescribeStmtProto) */ {
 public:
  ResolvedDescribeStmtProto();
  virtual ~ResolvedDescribeStmtProto();

  ResolvedDescribeStmtProto(const ResolvedDescribeStmtProto& from);

  inline ResolvedDescribeStmtProto& operator=(const ResolvedDescribeStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedDescribeStmtProto(ResolvedDescribeStmtProto&& from) noexcept
    : ResolvedDescribeStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedDescribeStmtProto& operator=(ResolvedDescribeStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedDescribeStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedDescribeStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedDescribeStmtProto*>(
               &_ResolvedDescribeStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  void Swap(ResolvedDescribeStmtProto* other);
  friend void swap(ResolvedDescribeStmtProto& a, ResolvedDescribeStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedDescribeStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedDescribeStmtProto>(NULL);
  }

  ResolvedDescribeStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedDescribeStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedDescribeStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name_path = 3;
  int name_path_size() const;
  void clear_name_path();
  static const int kNamePathFieldNumber = 3;
  const ::std::string& name_path(int index) const;
  ::std::string* mutable_name_path(int index);
  void set_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name_path(int index, ::std::string&& value);
  #endif
  void set_name_path(int index, const char* value);
  void set_name_path(int index, const char* value, size_t size);
  ::std::string* add_name_path();
  void add_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_name_path(::std::string&& value);
  #endif
  void add_name_path(const char* value);
  void add_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_path();

  // repeated string from_name_path = 4;
  int from_name_path_size() const;
  void clear_from_name_path();
  static const int kFromNamePathFieldNumber = 4;
  const ::std::string& from_name_path(int index) const;
  ::std::string* mutable_from_name_path(int index);
  void set_from_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_from_name_path(int index, ::std::string&& value);
  #endif
  void set_from_name_path(int index, const char* value);
  void set_from_name_path(int index, const char* value, size_t size);
  ::std::string* add_from_name_path();
  void add_from_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_from_name_path(::std::string&& value);
  #endif
  void add_from_name_path(const char* value);
  void add_from_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& from_name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_from_name_path();

  // optional string object_type = 2;
  bool has_object_type() const;
  void clear_object_type();
  static const int kObjectTypeFieldNumber = 2;
  const ::std::string& object_type() const;
  void set_object_type(const ::std::string& value);
  #if LANG_CXX11
  void set_object_type(::std::string&& value);
  #endif
  void set_object_type(const char* value);
  void set_object_type(const char* value, size_t size);
  ::std::string* mutable_object_type();
  ::std::string* release_object_type();
  void set_allocated_object_type(::std::string* object_type);

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedDescribeStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_object_type();
  void clear_has_object_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_path_;
  ::google::protobuf::RepeatedPtrField< ::std::string> from_name_path_;
  ::google::protobuf::internal::ArenaStringPtr object_type_;
  ::zetasql::ResolvedStatementProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedShowStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedShowStmtProto) */ {
 public:
  ResolvedShowStmtProto();
  virtual ~ResolvedShowStmtProto();

  ResolvedShowStmtProto(const ResolvedShowStmtProto& from);

  inline ResolvedShowStmtProto& operator=(const ResolvedShowStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedShowStmtProto(ResolvedShowStmtProto&& from) noexcept
    : ResolvedShowStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedShowStmtProto& operator=(ResolvedShowStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedShowStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedShowStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedShowStmtProto*>(
               &_ResolvedShowStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  void Swap(ResolvedShowStmtProto* other);
  friend void swap(ResolvedShowStmtProto& a, ResolvedShowStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedShowStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedShowStmtProto>(NULL);
  }

  ResolvedShowStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedShowStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedShowStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name_path = 3;
  int name_path_size() const;
  void clear_name_path();
  static const int kNamePathFieldNumber = 3;
  const ::std::string& name_path(int index) const;
  ::std::string* mutable_name_path(int index);
  void set_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name_path(int index, ::std::string&& value);
  #endif
  void set_name_path(int index, const char* value);
  void set_name_path(int index, const char* value, size_t size);
  ::std::string* add_name_path();
  void add_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_name_path(::std::string&& value);
  #endif
  void add_name_path(const char* value);
  void add_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_path();

  // optional string identifier = 2;
  bool has_identifier() const;
  void clear_identifier();
  static const int kIdentifierFieldNumber = 2;
  const ::std::string& identifier() const;
  void set_identifier(const ::std::string& value);
  #if LANG_CXX11
  void set_identifier(::std::string&& value);
  #endif
  void set_identifier(const char* value);
  void set_identifier(const char* value, size_t size);
  ::std::string* mutable_identifier();
  ::std::string* release_identifier();
  void set_allocated_identifier(::std::string* identifier);

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional .zetasql.ResolvedLiteralProto like_expr = 4;
  bool has_like_expr() const;
  void clear_like_expr();
  static const int kLikeExprFieldNumber = 4;
  private:
  const ::zetasql::ResolvedLiteralProto& _internal_like_expr() const;
  public:
  const ::zetasql::ResolvedLiteralProto& like_expr() const;
  ::zetasql::ResolvedLiteralProto* release_like_expr();
  ::zetasql::ResolvedLiteralProto* mutable_like_expr();
  void set_allocated_like_expr(::zetasql::ResolvedLiteralProto* like_expr);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedShowStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_identifier();
  void clear_has_identifier();
  void set_has_like_expr();
  void clear_has_like_expr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_path_;
  ::google::protobuf::internal::ArenaStringPtr identifier_;
  ::zetasql::ResolvedStatementProto* parent_;
  ::zetasql::ResolvedLiteralProto* like_expr_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedBeginStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedBeginStmtProto) */ {
 public:
  ResolvedBeginStmtProto();
  virtual ~ResolvedBeginStmtProto();

  ResolvedBeginStmtProto(const ResolvedBeginStmtProto& from);

  inline ResolvedBeginStmtProto& operator=(const ResolvedBeginStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedBeginStmtProto(ResolvedBeginStmtProto&& from) noexcept
    : ResolvedBeginStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedBeginStmtProto& operator=(ResolvedBeginStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedBeginStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedBeginStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedBeginStmtProto*>(
               &_ResolvedBeginStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  void Swap(ResolvedBeginStmtProto* other);
  friend void swap(ResolvedBeginStmtProto& a, ResolvedBeginStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedBeginStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedBeginStmtProto>(NULL);
  }

  ResolvedBeginStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedBeginStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedBeginStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string isolation_level_list = 2;
  int isolation_level_list_size() const;
  void clear_isolation_level_list();
  static const int kIsolationLevelListFieldNumber = 2;
  const ::std::string& isolation_level_list(int index) const;
  ::std::string* mutable_isolation_level_list(int index);
  void set_isolation_level_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_isolation_level_list(int index, ::std::string&& value);
  #endif
  void set_isolation_level_list(int index, const char* value);
  void set_isolation_level_list(int index, const char* value, size_t size);
  ::std::string* add_isolation_level_list();
  void add_isolation_level_list(const ::std::string& value);
  #if LANG_CXX11
  void add_isolation_level_list(::std::string&& value);
  #endif
  void add_isolation_level_list(const char* value);
  void add_isolation_level_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& isolation_level_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_isolation_level_list();

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional .zetasql.ResolvedBeginStmtEnums.ReadWriteMode read_write_mode = 3;
  bool has_read_write_mode() const;
  void clear_read_write_mode();
  static const int kReadWriteModeFieldNumber = 3;
  ::zetasql::ResolvedBeginStmtEnums_ReadWriteMode read_write_mode() const;
  void set_read_write_mode(::zetasql::ResolvedBeginStmtEnums_ReadWriteMode value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedBeginStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_read_write_mode();
  void clear_has_read_write_mode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> isolation_level_list_;
  ::zetasql::ResolvedStatementProto* parent_;
  int read_write_mode_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedSetTransactionStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedSetTransactionStmtProto) */ {
 public:
  ResolvedSetTransactionStmtProto();
  virtual ~ResolvedSetTransactionStmtProto();

  ResolvedSetTransactionStmtProto(const ResolvedSetTransactionStmtProto& from);

  inline ResolvedSetTransactionStmtProto& operator=(const ResolvedSetTransactionStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedSetTransactionStmtProto(ResolvedSetTransactionStmtProto&& from) noexcept
    : ResolvedSetTransactionStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedSetTransactionStmtProto& operator=(ResolvedSetTransactionStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedSetTransactionStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedSetTransactionStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedSetTransactionStmtProto*>(
               &_ResolvedSetTransactionStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  void Swap(ResolvedSetTransactionStmtProto* other);
  friend void swap(ResolvedSetTransactionStmtProto& a, ResolvedSetTransactionStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedSetTransactionStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedSetTransactionStmtProto>(NULL);
  }

  ResolvedSetTransactionStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedSetTransactionStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedSetTransactionStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string isolation_level_list = 2;
  int isolation_level_list_size() const;
  void clear_isolation_level_list();
  static const int kIsolationLevelListFieldNumber = 2;
  const ::std::string& isolation_level_list(int index) const;
  ::std::string* mutable_isolation_level_list(int index);
  void set_isolation_level_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_isolation_level_list(int index, ::std::string&& value);
  #endif
  void set_isolation_level_list(int index, const char* value);
  void set_isolation_level_list(int index, const char* value, size_t size);
  ::std::string* add_isolation_level_list();
  void add_isolation_level_list(const ::std::string& value);
  #if LANG_CXX11
  void add_isolation_level_list(::std::string&& value);
  #endif
  void add_isolation_level_list(const char* value);
  void add_isolation_level_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& isolation_level_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_isolation_level_list();

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional .zetasql.ResolvedBeginStmtEnums.ReadWriteMode read_write_mode = 3;
  bool has_read_write_mode() const;
  void clear_read_write_mode();
  static const int kReadWriteModeFieldNumber = 3;
  ::zetasql::ResolvedBeginStmtEnums_ReadWriteMode read_write_mode() const;
  void set_read_write_mode(::zetasql::ResolvedBeginStmtEnums_ReadWriteMode value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedSetTransactionStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_read_write_mode();
  void clear_has_read_write_mode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> isolation_level_list_;
  ::zetasql::ResolvedStatementProto* parent_;
  int read_write_mode_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedCommitStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedCommitStmtProto) */ {
 public:
  ResolvedCommitStmtProto();
  virtual ~ResolvedCommitStmtProto();

  ResolvedCommitStmtProto(const ResolvedCommitStmtProto& from);

  inline ResolvedCommitStmtProto& operator=(const ResolvedCommitStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedCommitStmtProto(ResolvedCommitStmtProto&& from) noexcept
    : ResolvedCommitStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedCommitStmtProto& operator=(ResolvedCommitStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedCommitStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedCommitStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedCommitStmtProto*>(
               &_ResolvedCommitStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  void Swap(ResolvedCommitStmtProto* other);
  friend void swap(ResolvedCommitStmtProto& a, ResolvedCommitStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedCommitStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedCommitStmtProto>(NULL);
  }

  ResolvedCommitStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedCommitStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedCommitStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedCommitStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedStatementProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedRollbackStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedRollbackStmtProto) */ {
 public:
  ResolvedRollbackStmtProto();
  virtual ~ResolvedRollbackStmtProto();

  ResolvedRollbackStmtProto(const ResolvedRollbackStmtProto& from);

  inline ResolvedRollbackStmtProto& operator=(const ResolvedRollbackStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedRollbackStmtProto(ResolvedRollbackStmtProto&& from) noexcept
    : ResolvedRollbackStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedRollbackStmtProto& operator=(ResolvedRollbackStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedRollbackStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedRollbackStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedRollbackStmtProto*>(
               &_ResolvedRollbackStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  void Swap(ResolvedRollbackStmtProto* other);
  friend void swap(ResolvedRollbackStmtProto& a, ResolvedRollbackStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedRollbackStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedRollbackStmtProto>(NULL);
  }

  ResolvedRollbackStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedRollbackStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedRollbackStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedRollbackStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedStatementProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedStartBatchStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedStartBatchStmtProto) */ {
 public:
  ResolvedStartBatchStmtProto();
  virtual ~ResolvedStartBatchStmtProto();

  ResolvedStartBatchStmtProto(const ResolvedStartBatchStmtProto& from);

  inline ResolvedStartBatchStmtProto& operator=(const ResolvedStartBatchStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedStartBatchStmtProto(ResolvedStartBatchStmtProto&& from) noexcept
    : ResolvedStartBatchStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedStartBatchStmtProto& operator=(ResolvedStartBatchStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedStartBatchStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedStartBatchStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedStartBatchStmtProto*>(
               &_ResolvedStartBatchStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  void Swap(ResolvedStartBatchStmtProto* other);
  friend void swap(ResolvedStartBatchStmtProto& a, ResolvedStartBatchStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedStartBatchStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedStartBatchStmtProto>(NULL);
  }

  ResolvedStartBatchStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedStartBatchStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedStartBatchStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string batch_type = 2;
  bool has_batch_type() const;
  void clear_batch_type();
  static const int kBatchTypeFieldNumber = 2;
  const ::std::string& batch_type() const;
  void set_batch_type(const ::std::string& value);
  #if LANG_CXX11
  void set_batch_type(::std::string&& value);
  #endif
  void set_batch_type(const char* value);
  void set_batch_type(const char* value, size_t size);
  ::std::string* mutable_batch_type();
  ::std::string* release_batch_type();
  void set_allocated_batch_type(::std::string* batch_type);

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedStartBatchStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_batch_type();
  void clear_has_batch_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr batch_type_;
  ::zetasql::ResolvedStatementProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedRunBatchStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedRunBatchStmtProto) */ {
 public:
  ResolvedRunBatchStmtProto();
  virtual ~ResolvedRunBatchStmtProto();

  ResolvedRunBatchStmtProto(const ResolvedRunBatchStmtProto& from);

  inline ResolvedRunBatchStmtProto& operator=(const ResolvedRunBatchStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedRunBatchStmtProto(ResolvedRunBatchStmtProto&& from) noexcept
    : ResolvedRunBatchStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedRunBatchStmtProto& operator=(ResolvedRunBatchStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedRunBatchStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedRunBatchStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedRunBatchStmtProto*>(
               &_ResolvedRunBatchStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  void Swap(ResolvedRunBatchStmtProto* other);
  friend void swap(ResolvedRunBatchStmtProto& a, ResolvedRunBatchStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedRunBatchStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedRunBatchStmtProto>(NULL);
  }

  ResolvedRunBatchStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedRunBatchStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedRunBatchStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedRunBatchStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedStatementProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAbortBatchStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAbortBatchStmtProto) */ {
 public:
  ResolvedAbortBatchStmtProto();
  virtual ~ResolvedAbortBatchStmtProto();

  ResolvedAbortBatchStmtProto(const ResolvedAbortBatchStmtProto& from);

  inline ResolvedAbortBatchStmtProto& operator=(const ResolvedAbortBatchStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAbortBatchStmtProto(ResolvedAbortBatchStmtProto&& from) noexcept
    : ResolvedAbortBatchStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAbortBatchStmtProto& operator=(ResolvedAbortBatchStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAbortBatchStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAbortBatchStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAbortBatchStmtProto*>(
               &_ResolvedAbortBatchStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  void Swap(ResolvedAbortBatchStmtProto* other);
  friend void swap(ResolvedAbortBatchStmtProto& a, ResolvedAbortBatchStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAbortBatchStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedAbortBatchStmtProto>(NULL);
  }

  ResolvedAbortBatchStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAbortBatchStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAbortBatchStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAbortBatchStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedStatementProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedDropStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedDropStmtProto) */ {
 public:
  ResolvedDropStmtProto();
  virtual ~ResolvedDropStmtProto();

  ResolvedDropStmtProto(const ResolvedDropStmtProto& from);

  inline ResolvedDropStmtProto& operator=(const ResolvedDropStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedDropStmtProto(ResolvedDropStmtProto&& from) noexcept
    : ResolvedDropStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedDropStmtProto& operator=(ResolvedDropStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedDropStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedDropStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedDropStmtProto*>(
               &_ResolvedDropStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  void Swap(ResolvedDropStmtProto* other);
  friend void swap(ResolvedDropStmtProto& a, ResolvedDropStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedDropStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedDropStmtProto>(NULL);
  }

  ResolvedDropStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedDropStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedDropStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name_path = 4;
  int name_path_size() const;
  void clear_name_path();
  static const int kNamePathFieldNumber = 4;
  const ::std::string& name_path(int index) const;
  ::std::string* mutable_name_path(int index);
  void set_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name_path(int index, ::std::string&& value);
  #endif
  void set_name_path(int index, const char* value);
  void set_name_path(int index, const char* value, size_t size);
  ::std::string* add_name_path();
  void add_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_name_path(::std::string&& value);
  #endif
  void add_name_path(const char* value);
  void add_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_path();

  // optional string object_type = 2;
  bool has_object_type() const;
  void clear_object_type();
  static const int kObjectTypeFieldNumber = 2;
  const ::std::string& object_type() const;
  void set_object_type(const ::std::string& value);
  #if LANG_CXX11
  void set_object_type(::std::string&& value);
  #endif
  void set_object_type(const char* value);
  void set_object_type(const char* value, size_t size);
  ::std::string* mutable_object_type();
  ::std::string* release_object_type();
  void set_allocated_object_type(::std::string* object_type);

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional bool is_if_exists = 3;
  bool has_is_if_exists() const;
  void clear_is_if_exists();
  static const int kIsIfExistsFieldNumber = 3;
  bool is_if_exists() const;
  void set_is_if_exists(bool value);

  // optional .zetasql.ResolvedDropStmtEnums.DropMode drop_mode = 5;
  bool has_drop_mode() const;
  void clear_drop_mode();
  static const int kDropModeFieldNumber = 5;
  ::zetasql::ResolvedDropStmtEnums_DropMode drop_mode() const;
  void set_drop_mode(::zetasql::ResolvedDropStmtEnums_DropMode value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedDropStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_object_type();
  void clear_has_object_type();
  void set_has_is_if_exists();
  void clear_has_is_if_exists();
  void set_has_drop_mode();
  void clear_has_drop_mode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_path_;
  ::google::protobuf::internal::ArenaStringPtr object_type_;
  ::zetasql::ResolvedStatementProto* parent_;
  bool is_if_exists_;
  int drop_mode_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedDropMaterializedViewStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedDropMaterializedViewStmtProto) */ {
 public:
  ResolvedDropMaterializedViewStmtProto();
  virtual ~ResolvedDropMaterializedViewStmtProto();

  ResolvedDropMaterializedViewStmtProto(const ResolvedDropMaterializedViewStmtProto& from);

  inline ResolvedDropMaterializedViewStmtProto& operator=(const ResolvedDropMaterializedViewStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedDropMaterializedViewStmtProto(ResolvedDropMaterializedViewStmtProto&& from) noexcept
    : ResolvedDropMaterializedViewStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedDropMaterializedViewStmtProto& operator=(ResolvedDropMaterializedViewStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedDropMaterializedViewStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedDropMaterializedViewStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedDropMaterializedViewStmtProto*>(
               &_ResolvedDropMaterializedViewStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  void Swap(ResolvedDropMaterializedViewStmtProto* other);
  friend void swap(ResolvedDropMaterializedViewStmtProto& a, ResolvedDropMaterializedViewStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedDropMaterializedViewStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedDropMaterializedViewStmtProto>(NULL);
  }

  ResolvedDropMaterializedViewStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedDropMaterializedViewStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedDropMaterializedViewStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name_path = 4;
  int name_path_size() const;
  void clear_name_path();
  static const int kNamePathFieldNumber = 4;
  const ::std::string& name_path(int index) const;
  ::std::string* mutable_name_path(int index);
  void set_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name_path(int index, ::std::string&& value);
  #endif
  void set_name_path(int index, const char* value);
  void set_name_path(int index, const char* value, size_t size);
  ::std::string* add_name_path();
  void add_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_name_path(::std::string&& value);
  #endif
  void add_name_path(const char* value);
  void add_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_path();

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional bool is_if_exists = 3;
  bool has_is_if_exists() const;
  void clear_is_if_exists();
  static const int kIsIfExistsFieldNumber = 3;
  bool is_if_exists() const;
  void set_is_if_exists(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedDropMaterializedViewStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_is_if_exists();
  void clear_has_is_if_exists();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_path_;
  ::zetasql::ResolvedStatementProto* parent_;
  bool is_if_exists_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedDropSnapshotTableStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedDropSnapshotTableStmtProto) */ {
 public:
  ResolvedDropSnapshotTableStmtProto();
  virtual ~ResolvedDropSnapshotTableStmtProto();

  ResolvedDropSnapshotTableStmtProto(const ResolvedDropSnapshotTableStmtProto& from);

  inline ResolvedDropSnapshotTableStmtProto& operator=(const ResolvedDropSnapshotTableStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedDropSnapshotTableStmtProto(ResolvedDropSnapshotTableStmtProto&& from) noexcept
    : ResolvedDropSnapshotTableStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedDropSnapshotTableStmtProto& operator=(ResolvedDropSnapshotTableStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedDropSnapshotTableStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedDropSnapshotTableStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedDropSnapshotTableStmtProto*>(
               &_ResolvedDropSnapshotTableStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  void Swap(ResolvedDropSnapshotTableStmtProto* other);
  friend void swap(ResolvedDropSnapshotTableStmtProto& a, ResolvedDropSnapshotTableStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedDropSnapshotTableStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedDropSnapshotTableStmtProto>(NULL);
  }

  ResolvedDropSnapshotTableStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedDropSnapshotTableStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedDropSnapshotTableStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name_path = 4;
  int name_path_size() const;
  void clear_name_path();
  static const int kNamePathFieldNumber = 4;
  const ::std::string& name_path(int index) const;
  ::std::string* mutable_name_path(int index);
  void set_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name_path(int index, ::std::string&& value);
  #endif
  void set_name_path(int index, const char* value);
  void set_name_path(int index, const char* value, size_t size);
  ::std::string* add_name_path();
  void add_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_name_path(::std::string&& value);
  #endif
  void add_name_path(const char* value);
  void add_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_path();

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional bool is_if_exists = 3;
  bool has_is_if_exists() const;
  void clear_is_if_exists();
  static const int kIsIfExistsFieldNumber = 3;
  bool is_if_exists() const;
  void set_is_if_exists(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedDropSnapshotTableStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_is_if_exists();
  void clear_has_is_if_exists();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_path_;
  ::zetasql::ResolvedStatementProto* parent_;
  bool is_if_exists_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedRecursiveRefScanProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedRecursiveRefScanProto) */ {
 public:
  ResolvedRecursiveRefScanProto();
  virtual ~ResolvedRecursiveRefScanProto();

  ResolvedRecursiveRefScanProto(const ResolvedRecursiveRefScanProto& from);

  inline ResolvedRecursiveRefScanProto& operator=(const ResolvedRecursiveRefScanProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedRecursiveRefScanProto(ResolvedRecursiveRefScanProto&& from) noexcept
    : ResolvedRecursiveRefScanProto() {
    *this = ::std::move(from);
  }

  inline ResolvedRecursiveRefScanProto& operator=(ResolvedRecursiveRefScanProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedRecursiveRefScanProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedRecursiveRefScanProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedRecursiveRefScanProto*>(
               &_ResolvedRecursiveRefScanProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  void Swap(ResolvedRecursiveRefScanProto* other);
  friend void swap(ResolvedRecursiveRefScanProto& a, ResolvedRecursiveRefScanProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedRecursiveRefScanProto* New() const final {
    return CreateMaybeMessage<ResolvedRecursiveRefScanProto>(NULL);
  }

  ResolvedRecursiveRefScanProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedRecursiveRefScanProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedRecursiveRefScanProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedScanProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedScanProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedScanProto& parent() const;
  ::zetasql::ResolvedScanProto* release_parent();
  ::zetasql::ResolvedScanProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedScanProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedRecursiveRefScanProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedScanProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedRecursiveScanProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedRecursiveScanProto) */ {
 public:
  ResolvedRecursiveScanProto();
  virtual ~ResolvedRecursiveScanProto();

  ResolvedRecursiveScanProto(const ResolvedRecursiveScanProto& from);

  inline ResolvedRecursiveScanProto& operator=(const ResolvedRecursiveScanProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedRecursiveScanProto(ResolvedRecursiveScanProto&& from) noexcept
    : ResolvedRecursiveScanProto() {
    *this = ::std::move(from);
  }

  inline ResolvedRecursiveScanProto& operator=(ResolvedRecursiveScanProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedRecursiveScanProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedRecursiveScanProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedRecursiveScanProto*>(
               &_ResolvedRecursiveScanProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  void Swap(ResolvedRecursiveScanProto* other);
  friend void swap(ResolvedRecursiveScanProto& a, ResolvedRecursiveScanProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedRecursiveScanProto* New() const final {
    return CreateMaybeMessage<ResolvedRecursiveScanProto>(NULL);
  }

  ResolvedRecursiveScanProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedRecursiveScanProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedRecursiveScanProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedScanProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedScanProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedScanProto& parent() const;
  ::zetasql::ResolvedScanProto* release_parent();
  ::zetasql::ResolvedScanProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedScanProto* parent);

  // optional .zetasql.ResolvedSetOperationItemProto non_recursive_term = 3;
  bool has_non_recursive_term() const;
  void clear_non_recursive_term();
  static const int kNonRecursiveTermFieldNumber = 3;
  private:
  const ::zetasql::ResolvedSetOperationItemProto& _internal_non_recursive_term() const;
  public:
  const ::zetasql::ResolvedSetOperationItemProto& non_recursive_term() const;
  ::zetasql::ResolvedSetOperationItemProto* release_non_recursive_term();
  ::zetasql::ResolvedSetOperationItemProto* mutable_non_recursive_term();
  void set_allocated_non_recursive_term(::zetasql::ResolvedSetOperationItemProto* non_recursive_term);

  // optional .zetasql.ResolvedSetOperationItemProto recursive_term = 4;
  bool has_recursive_term() const;
  void clear_recursive_term();
  static const int kRecursiveTermFieldNumber = 4;
  private:
  const ::zetasql::ResolvedSetOperationItemProto& _internal_recursive_term() const;
  public:
  const ::zetasql::ResolvedSetOperationItemProto& recursive_term() const;
  ::zetasql::ResolvedSetOperationItemProto* release_recursive_term();
  ::zetasql::ResolvedSetOperationItemProto* mutable_recursive_term();
  void set_allocated_recursive_term(::zetasql::ResolvedSetOperationItemProto* recursive_term);

  // optional .zetasql.ResolvedRecursiveScanEnums.RecursiveSetOperationType op_type = 2;
  bool has_op_type() const;
  void clear_op_type();
  static const int kOpTypeFieldNumber = 2;
  ::zetasql::ResolvedRecursiveScanEnums_RecursiveSetOperationType op_type() const;
  void set_op_type(::zetasql::ResolvedRecursiveScanEnums_RecursiveSetOperationType value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedRecursiveScanProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_op_type();
  void clear_has_op_type();
  void set_has_non_recursive_term();
  void clear_has_non_recursive_term();
  void set_has_recursive_term();
  void clear_has_recursive_term();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedScanProto* parent_;
  ::zetasql::ResolvedSetOperationItemProto* non_recursive_term_;
  ::zetasql::ResolvedSetOperationItemProto* recursive_term_;
  int op_type_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedWithScanProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedWithScanProto) */ {
 public:
  ResolvedWithScanProto();
  virtual ~ResolvedWithScanProto();

  ResolvedWithScanProto(const ResolvedWithScanProto& from);

  inline ResolvedWithScanProto& operator=(const ResolvedWithScanProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedWithScanProto(ResolvedWithScanProto&& from) noexcept
    : ResolvedWithScanProto() {
    *this = ::std::move(from);
  }

  inline ResolvedWithScanProto& operator=(ResolvedWithScanProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedWithScanProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedWithScanProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedWithScanProto*>(
               &_ResolvedWithScanProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  void Swap(ResolvedWithScanProto* other);
  friend void swap(ResolvedWithScanProto& a, ResolvedWithScanProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedWithScanProto* New() const final {
    return CreateMaybeMessage<ResolvedWithScanProto>(NULL);
  }

  ResolvedWithScanProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedWithScanProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedWithScanProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedWithEntryProto with_entry_list = 2;
  int with_entry_list_size() const;
  void clear_with_entry_list();
  static const int kWithEntryListFieldNumber = 2;
  ::zetasql::ResolvedWithEntryProto* mutable_with_entry_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedWithEntryProto >*
      mutable_with_entry_list();
  const ::zetasql::ResolvedWithEntryProto& with_entry_list(int index) const;
  ::zetasql::ResolvedWithEntryProto* add_with_entry_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedWithEntryProto >&
      with_entry_list() const;

  // optional .zetasql.ResolvedScanProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedScanProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedScanProto& parent() const;
  ::zetasql::ResolvedScanProto* release_parent();
  ::zetasql::ResolvedScanProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedScanProto* parent);

  // optional .zetasql.AnyResolvedScanProto query = 3;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 3;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_query() const;
  public:
  const ::zetasql::AnyResolvedScanProto& query() const;
  ::zetasql::AnyResolvedScanProto* release_query();
  ::zetasql::AnyResolvedScanProto* mutable_query();
  void set_allocated_query(::zetasql::AnyResolvedScanProto* query);

  // optional bool recursive = 4;
  bool has_recursive() const;
  void clear_recursive();
  static const int kRecursiveFieldNumber = 4;
  bool recursive() const;
  void set_recursive(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedWithScanProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_query();
  void clear_has_query();
  void set_has_recursive();
  void clear_has_recursive();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedWithEntryProto > with_entry_list_;
  ::zetasql::ResolvedScanProto* parent_;
  ::zetasql::AnyResolvedScanProto* query_;
  bool recursive_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedWithEntryProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedWithEntryProto) */ {
 public:
  ResolvedWithEntryProto();
  virtual ~ResolvedWithEntryProto();

  ResolvedWithEntryProto(const ResolvedWithEntryProto& from);

  inline ResolvedWithEntryProto& operator=(const ResolvedWithEntryProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedWithEntryProto(ResolvedWithEntryProto&& from) noexcept
    : ResolvedWithEntryProto() {
    *this = ::std::move(from);
  }

  inline ResolvedWithEntryProto& operator=(ResolvedWithEntryProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedWithEntryProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedWithEntryProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedWithEntryProto*>(
               &_ResolvedWithEntryProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  void Swap(ResolvedWithEntryProto* other);
  friend void swap(ResolvedWithEntryProto& a, ResolvedWithEntryProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedWithEntryProto* New() const final {
    return CreateMaybeMessage<ResolvedWithEntryProto>(NULL);
  }

  ResolvedWithEntryProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedWithEntryProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedWithEntryProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string with_query_name = 2;
  bool has_with_query_name() const;
  void clear_with_query_name();
  static const int kWithQueryNameFieldNumber = 2;
  const ::std::string& with_query_name() const;
  void set_with_query_name(const ::std::string& value);
  #if LANG_CXX11
  void set_with_query_name(::std::string&& value);
  #endif
  void set_with_query_name(const char* value);
  void set_with_query_name(const char* value, size_t size);
  ::std::string* mutable_with_query_name();
  ::std::string* release_with_query_name();
  void set_allocated_with_query_name(::std::string* with_query_name);

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.AnyResolvedScanProto with_subquery = 3;
  bool has_with_subquery() const;
  void clear_with_subquery();
  static const int kWithSubqueryFieldNumber = 3;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_with_subquery() const;
  public:
  const ::zetasql::AnyResolvedScanProto& with_subquery() const;
  ::zetasql::AnyResolvedScanProto* release_with_subquery();
  ::zetasql::AnyResolvedScanProto* mutable_with_subquery();
  void set_allocated_with_subquery(::zetasql::AnyResolvedScanProto* with_subquery);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedWithEntryProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_with_query_name();
  void clear_has_with_query_name();
  void set_has_with_subquery();
  void clear_has_with_subquery();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr with_query_name_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::AnyResolvedScanProto* with_subquery_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedOptionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedOptionProto) */ {
 public:
  ResolvedOptionProto();
  virtual ~ResolvedOptionProto();

  ResolvedOptionProto(const ResolvedOptionProto& from);

  inline ResolvedOptionProto& operator=(const ResolvedOptionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedOptionProto(ResolvedOptionProto&& from) noexcept
    : ResolvedOptionProto() {
    *this = ::std::move(from);
  }

  inline ResolvedOptionProto& operator=(ResolvedOptionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedOptionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedOptionProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedOptionProto*>(
               &_ResolvedOptionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  void Swap(ResolvedOptionProto* other);
  friend void swap(ResolvedOptionProto& a, ResolvedOptionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedOptionProto* New() const final {
    return CreateMaybeMessage<ResolvedOptionProto>(NULL);
  }

  ResolvedOptionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedOptionProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedOptionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string qualifier = 2;
  bool has_qualifier() const;
  void clear_qualifier();
  static const int kQualifierFieldNumber = 2;
  const ::std::string& qualifier() const;
  void set_qualifier(const ::std::string& value);
  #if LANG_CXX11
  void set_qualifier(::std::string&& value);
  #endif
  void set_qualifier(const char* value);
  void set_qualifier(const char* value, size_t size);
  ::std::string* mutable_qualifier();
  ::std::string* release_qualifier();
  void set_allocated_qualifier(::std::string* qualifier);

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.AnyResolvedExprProto value = 4;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 4;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_value() const;
  public:
  const ::zetasql::AnyResolvedExprProto& value() const;
  ::zetasql::AnyResolvedExprProto* release_value();
  ::zetasql::AnyResolvedExprProto* mutable_value();
  void set_allocated_value(::zetasql::AnyResolvedExprProto* value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedOptionProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_qualifier();
  void clear_has_qualifier();
  void set_has_name();
  void clear_has_name();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr qualifier_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::AnyResolvedExprProto* value_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedWindowPartitioningProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedWindowPartitioningProto) */ {
 public:
  ResolvedWindowPartitioningProto();
  virtual ~ResolvedWindowPartitioningProto();

  ResolvedWindowPartitioningProto(const ResolvedWindowPartitioningProto& from);

  inline ResolvedWindowPartitioningProto& operator=(const ResolvedWindowPartitioningProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedWindowPartitioningProto(ResolvedWindowPartitioningProto&& from) noexcept
    : ResolvedWindowPartitioningProto() {
    *this = ::std::move(from);
  }

  inline ResolvedWindowPartitioningProto& operator=(ResolvedWindowPartitioningProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedWindowPartitioningProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedWindowPartitioningProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedWindowPartitioningProto*>(
               &_ResolvedWindowPartitioningProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  void Swap(ResolvedWindowPartitioningProto* other);
  friend void swap(ResolvedWindowPartitioningProto& a, ResolvedWindowPartitioningProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedWindowPartitioningProto* New() const final {
    return CreateMaybeMessage<ResolvedWindowPartitioningProto>(NULL);
  }

  ResolvedWindowPartitioningProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedWindowPartitioningProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedWindowPartitioningProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedColumnRefProto partition_by_list = 2;
  int partition_by_list_size() const;
  void clear_partition_by_list();
  static const int kPartitionByListFieldNumber = 2;
  ::zetasql::ResolvedColumnRefProto* mutable_partition_by_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >*
      mutable_partition_by_list();
  const ::zetasql::ResolvedColumnRefProto& partition_by_list(int index) const;
  ::zetasql::ResolvedColumnRefProto* add_partition_by_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >&
      partition_by_list() const;

  // repeated .zetasql.ResolvedOptionProto hint_list = 3;
  int hint_list_size() const;
  void clear_hint_list();
  static const int kHintListFieldNumber = 3;
  ::zetasql::ResolvedOptionProto* mutable_hint_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_hint_list();
  const ::zetasql::ResolvedOptionProto& hint_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_hint_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      hint_list() const;

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedWindowPartitioningProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto > partition_by_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > hint_list_;
  ::zetasql::ResolvedArgumentProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedWindowOrderingProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedWindowOrderingProto) */ {
 public:
  ResolvedWindowOrderingProto();
  virtual ~ResolvedWindowOrderingProto();

  ResolvedWindowOrderingProto(const ResolvedWindowOrderingProto& from);

  inline ResolvedWindowOrderingProto& operator=(const ResolvedWindowOrderingProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedWindowOrderingProto(ResolvedWindowOrderingProto&& from) noexcept
    : ResolvedWindowOrderingProto() {
    *this = ::std::move(from);
  }

  inline ResolvedWindowOrderingProto& operator=(ResolvedWindowOrderingProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedWindowOrderingProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedWindowOrderingProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedWindowOrderingProto*>(
               &_ResolvedWindowOrderingProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  void Swap(ResolvedWindowOrderingProto* other);
  friend void swap(ResolvedWindowOrderingProto& a, ResolvedWindowOrderingProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedWindowOrderingProto* New() const final {
    return CreateMaybeMessage<ResolvedWindowOrderingProto>(NULL);
  }

  ResolvedWindowOrderingProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedWindowOrderingProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedWindowOrderingProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedOrderByItemProto order_by_item_list = 2;
  int order_by_item_list_size() const;
  void clear_order_by_item_list();
  static const int kOrderByItemListFieldNumber = 2;
  ::zetasql::ResolvedOrderByItemProto* mutable_order_by_item_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOrderByItemProto >*
      mutable_order_by_item_list();
  const ::zetasql::ResolvedOrderByItemProto& order_by_item_list(int index) const;
  ::zetasql::ResolvedOrderByItemProto* add_order_by_item_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOrderByItemProto >&
      order_by_item_list() const;

  // repeated .zetasql.ResolvedOptionProto hint_list = 3;
  int hint_list_size() const;
  void clear_hint_list();
  static const int kHintListFieldNumber = 3;
  ::zetasql::ResolvedOptionProto* mutable_hint_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_hint_list();
  const ::zetasql::ResolvedOptionProto& hint_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_hint_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      hint_list() const;

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedWindowOrderingProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOrderByItemProto > order_by_item_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > hint_list_;
  ::zetasql::ResolvedArgumentProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedWindowFrameProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedWindowFrameProto) */ {
 public:
  ResolvedWindowFrameProto();
  virtual ~ResolvedWindowFrameProto();

  ResolvedWindowFrameProto(const ResolvedWindowFrameProto& from);

  inline ResolvedWindowFrameProto& operator=(const ResolvedWindowFrameProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedWindowFrameProto(ResolvedWindowFrameProto&& from) noexcept
    : ResolvedWindowFrameProto() {
    *this = ::std::move(from);
  }

  inline ResolvedWindowFrameProto& operator=(ResolvedWindowFrameProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedWindowFrameProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedWindowFrameProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedWindowFrameProto*>(
               &_ResolvedWindowFrameProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  void Swap(ResolvedWindowFrameProto* other);
  friend void swap(ResolvedWindowFrameProto& a, ResolvedWindowFrameProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedWindowFrameProto* New() const final {
    return CreateMaybeMessage<ResolvedWindowFrameProto>(NULL);
  }

  ResolvedWindowFrameProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedWindowFrameProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedWindowFrameProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.ResolvedWindowFrameExprProto start_expr = 3;
  bool has_start_expr() const;
  void clear_start_expr();
  static const int kStartExprFieldNumber = 3;
  private:
  const ::zetasql::ResolvedWindowFrameExprProto& _internal_start_expr() const;
  public:
  const ::zetasql::ResolvedWindowFrameExprProto& start_expr() const;
  ::zetasql::ResolvedWindowFrameExprProto* release_start_expr();
  ::zetasql::ResolvedWindowFrameExprProto* mutable_start_expr();
  void set_allocated_start_expr(::zetasql::ResolvedWindowFrameExprProto* start_expr);

  // optional .zetasql.ResolvedWindowFrameExprProto end_expr = 4;
  bool has_end_expr() const;
  void clear_end_expr();
  static const int kEndExprFieldNumber = 4;
  private:
  const ::zetasql::ResolvedWindowFrameExprProto& _internal_end_expr() const;
  public:
  const ::zetasql::ResolvedWindowFrameExprProto& end_expr() const;
  ::zetasql::ResolvedWindowFrameExprProto* release_end_expr();
  ::zetasql::ResolvedWindowFrameExprProto* mutable_end_expr();
  void set_allocated_end_expr(::zetasql::ResolvedWindowFrameExprProto* end_expr);

  // optional .zetasql.ResolvedWindowFrameEnums.FrameUnit frame_unit = 2;
  bool has_frame_unit() const;
  void clear_frame_unit();
  static const int kFrameUnitFieldNumber = 2;
  ::zetasql::ResolvedWindowFrameEnums_FrameUnit frame_unit() const;
  void set_frame_unit(::zetasql::ResolvedWindowFrameEnums_FrameUnit value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedWindowFrameProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_frame_unit();
  void clear_has_frame_unit();
  void set_has_start_expr();
  void clear_has_start_expr();
  void set_has_end_expr();
  void clear_has_end_expr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::ResolvedWindowFrameExprProto* start_expr_;
  ::zetasql::ResolvedWindowFrameExprProto* end_expr_;
  int frame_unit_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAnalyticFunctionGroupProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAnalyticFunctionGroupProto) */ {
 public:
  ResolvedAnalyticFunctionGroupProto();
  virtual ~ResolvedAnalyticFunctionGroupProto();

  ResolvedAnalyticFunctionGroupProto(const ResolvedAnalyticFunctionGroupProto& from);

  inline ResolvedAnalyticFunctionGroupProto& operator=(const ResolvedAnalyticFunctionGroupProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAnalyticFunctionGroupProto(ResolvedAnalyticFunctionGroupProto&& from) noexcept
    : ResolvedAnalyticFunctionGroupProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAnalyticFunctionGroupProto& operator=(ResolvedAnalyticFunctionGroupProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAnalyticFunctionGroupProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAnalyticFunctionGroupProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAnalyticFunctionGroupProto*>(
               &_ResolvedAnalyticFunctionGroupProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  void Swap(ResolvedAnalyticFunctionGroupProto* other);
  friend void swap(ResolvedAnalyticFunctionGroupProto& a, ResolvedAnalyticFunctionGroupProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAnalyticFunctionGroupProto* New() const final {
    return CreateMaybeMessage<ResolvedAnalyticFunctionGroupProto>(NULL);
  }

  ResolvedAnalyticFunctionGroupProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAnalyticFunctionGroupProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAnalyticFunctionGroupProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedComputedColumnProto analytic_function_list = 4;
  int analytic_function_list_size() const;
  void clear_analytic_function_list();
  static const int kAnalyticFunctionListFieldNumber = 4;
  ::zetasql::ResolvedComputedColumnProto* mutable_analytic_function_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >*
      mutable_analytic_function_list();
  const ::zetasql::ResolvedComputedColumnProto& analytic_function_list(int index) const;
  ::zetasql::ResolvedComputedColumnProto* add_analytic_function_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >&
      analytic_function_list() const;

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.ResolvedWindowPartitioningProto partition_by = 2;
  bool has_partition_by() const;
  void clear_partition_by();
  static const int kPartitionByFieldNumber = 2;
  private:
  const ::zetasql::ResolvedWindowPartitioningProto& _internal_partition_by() const;
  public:
  const ::zetasql::ResolvedWindowPartitioningProto& partition_by() const;
  ::zetasql::ResolvedWindowPartitioningProto* release_partition_by();
  ::zetasql::ResolvedWindowPartitioningProto* mutable_partition_by();
  void set_allocated_partition_by(::zetasql::ResolvedWindowPartitioningProto* partition_by);

  // optional .zetasql.ResolvedWindowOrderingProto order_by = 3;
  bool has_order_by() const;
  void clear_order_by();
  static const int kOrderByFieldNumber = 3;
  private:
  const ::zetasql::ResolvedWindowOrderingProto& _internal_order_by() const;
  public:
  const ::zetasql::ResolvedWindowOrderingProto& order_by() const;
  ::zetasql::ResolvedWindowOrderingProto* release_order_by();
  ::zetasql::ResolvedWindowOrderingProto* mutable_order_by();
  void set_allocated_order_by(::zetasql::ResolvedWindowOrderingProto* order_by);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAnalyticFunctionGroupProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_partition_by();
  void clear_has_partition_by();
  void set_has_order_by();
  void clear_has_order_by();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto > analytic_function_list_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::ResolvedWindowPartitioningProto* partition_by_;
  ::zetasql::ResolvedWindowOrderingProto* order_by_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedWindowFrameExprProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedWindowFrameExprProto) */ {
 public:
  ResolvedWindowFrameExprProto();
  virtual ~ResolvedWindowFrameExprProto();

  ResolvedWindowFrameExprProto(const ResolvedWindowFrameExprProto& from);

  inline ResolvedWindowFrameExprProto& operator=(const ResolvedWindowFrameExprProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedWindowFrameExprProto(ResolvedWindowFrameExprProto&& from) noexcept
    : ResolvedWindowFrameExprProto() {
    *this = ::std::move(from);
  }

  inline ResolvedWindowFrameExprProto& operator=(ResolvedWindowFrameExprProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedWindowFrameExprProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedWindowFrameExprProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedWindowFrameExprProto*>(
               &_ResolvedWindowFrameExprProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  void Swap(ResolvedWindowFrameExprProto* other);
  friend void swap(ResolvedWindowFrameExprProto& a, ResolvedWindowFrameExprProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedWindowFrameExprProto* New() const final {
    return CreateMaybeMessage<ResolvedWindowFrameExprProto>(NULL);
  }

  ResolvedWindowFrameExprProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedWindowFrameExprProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedWindowFrameExprProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.AnyResolvedExprProto expression = 3;
  bool has_expression() const;
  void clear_expression();
  static const int kExpressionFieldNumber = 3;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_expression() const;
  public:
  const ::zetasql::AnyResolvedExprProto& expression() const;
  ::zetasql::AnyResolvedExprProto* release_expression();
  ::zetasql::AnyResolvedExprProto* mutable_expression();
  void set_allocated_expression(::zetasql::AnyResolvedExprProto* expression);

  // optional .zetasql.ResolvedWindowFrameExprEnums.BoundaryType boundary_type = 2;
  bool has_boundary_type() const;
  void clear_boundary_type();
  static const int kBoundaryTypeFieldNumber = 2;
  ::zetasql::ResolvedWindowFrameExprEnums_BoundaryType boundary_type() const;
  void set_boundary_type(::zetasql::ResolvedWindowFrameExprEnums_BoundaryType value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedWindowFrameExprProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_boundary_type();
  void clear_has_boundary_type();
  void set_has_expression();
  void clear_has_expression();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::AnyResolvedExprProto* expression_;
  int boundary_type_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedDMLValueProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedDMLValueProto) */ {
 public:
  ResolvedDMLValueProto();
  virtual ~ResolvedDMLValueProto();

  ResolvedDMLValueProto(const ResolvedDMLValueProto& from);

  inline ResolvedDMLValueProto& operator=(const ResolvedDMLValueProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedDMLValueProto(ResolvedDMLValueProto&& from) noexcept
    : ResolvedDMLValueProto() {
    *this = ::std::move(from);
  }

  inline ResolvedDMLValueProto& operator=(ResolvedDMLValueProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedDMLValueProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedDMLValueProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedDMLValueProto*>(
               &_ResolvedDMLValueProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  void Swap(ResolvedDMLValueProto* other);
  friend void swap(ResolvedDMLValueProto& a, ResolvedDMLValueProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedDMLValueProto* New() const final {
    return CreateMaybeMessage<ResolvedDMLValueProto>(NULL);
  }

  ResolvedDMLValueProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedDMLValueProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedDMLValueProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.AnyResolvedExprProto value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_value() const;
  public:
  const ::zetasql::AnyResolvedExprProto& value() const;
  ::zetasql::AnyResolvedExprProto* release_value();
  ::zetasql::AnyResolvedExprProto* mutable_value();
  void set_allocated_value(::zetasql::AnyResolvedExprProto* value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedDMLValueProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::AnyResolvedExprProto* value_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedDMLDefaultProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedDMLDefaultProto) */ {
 public:
  ResolvedDMLDefaultProto();
  virtual ~ResolvedDMLDefaultProto();

  ResolvedDMLDefaultProto(const ResolvedDMLDefaultProto& from);

  inline ResolvedDMLDefaultProto& operator=(const ResolvedDMLDefaultProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedDMLDefaultProto(ResolvedDMLDefaultProto&& from) noexcept
    : ResolvedDMLDefaultProto() {
    *this = ::std::move(from);
  }

  inline ResolvedDMLDefaultProto& operator=(ResolvedDMLDefaultProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedDMLDefaultProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedDMLDefaultProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedDMLDefaultProto*>(
               &_ResolvedDMLDefaultProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  void Swap(ResolvedDMLDefaultProto* other);
  friend void swap(ResolvedDMLDefaultProto& a, ResolvedDMLDefaultProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedDMLDefaultProto* New() const final {
    return CreateMaybeMessage<ResolvedDMLDefaultProto>(NULL);
  }

  ResolvedDMLDefaultProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedDMLDefaultProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedDMLDefaultProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedExprProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedExprProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedExprProto& parent() const;
  ::zetasql::ResolvedExprProto* release_parent();
  ::zetasql::ResolvedExprProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedExprProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedDMLDefaultProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedExprProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAssertStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAssertStmtProto) */ {
 public:
  ResolvedAssertStmtProto();
  virtual ~ResolvedAssertStmtProto();

  ResolvedAssertStmtProto(const ResolvedAssertStmtProto& from);

  inline ResolvedAssertStmtProto& operator=(const ResolvedAssertStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAssertStmtProto(ResolvedAssertStmtProto&& from) noexcept
    : ResolvedAssertStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAssertStmtProto& operator=(ResolvedAssertStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAssertStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAssertStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAssertStmtProto*>(
               &_ResolvedAssertStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  void Swap(ResolvedAssertStmtProto* other);
  friend void swap(ResolvedAssertStmtProto& a, ResolvedAssertStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAssertStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedAssertStmtProto>(NULL);
  }

  ResolvedAssertStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAssertStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAssertStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string description = 3;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional .zetasql.AnyResolvedExprProto expression = 2;
  bool has_expression() const;
  void clear_expression();
  static const int kExpressionFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_expression() const;
  public:
  const ::zetasql::AnyResolvedExprProto& expression() const;
  ::zetasql::AnyResolvedExprProto* release_expression();
  ::zetasql::AnyResolvedExprProto* mutable_expression();
  void set_allocated_expression(::zetasql::AnyResolvedExprProto* expression);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAssertStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_expression();
  void clear_has_expression();
  void set_has_description();
  void clear_has_description();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::zetasql::ResolvedStatementProto* parent_;
  ::zetasql::AnyResolvedExprProto* expression_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAssertRowsModifiedProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAssertRowsModifiedProto) */ {
 public:
  ResolvedAssertRowsModifiedProto();
  virtual ~ResolvedAssertRowsModifiedProto();

  ResolvedAssertRowsModifiedProto(const ResolvedAssertRowsModifiedProto& from);

  inline ResolvedAssertRowsModifiedProto& operator=(const ResolvedAssertRowsModifiedProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAssertRowsModifiedProto(ResolvedAssertRowsModifiedProto&& from) noexcept
    : ResolvedAssertRowsModifiedProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAssertRowsModifiedProto& operator=(ResolvedAssertRowsModifiedProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAssertRowsModifiedProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAssertRowsModifiedProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAssertRowsModifiedProto*>(
               &_ResolvedAssertRowsModifiedProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  void Swap(ResolvedAssertRowsModifiedProto* other);
  friend void swap(ResolvedAssertRowsModifiedProto& a, ResolvedAssertRowsModifiedProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAssertRowsModifiedProto* New() const final {
    return CreateMaybeMessage<ResolvedAssertRowsModifiedProto>(NULL);
  }

  ResolvedAssertRowsModifiedProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAssertRowsModifiedProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAssertRowsModifiedProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.AnyResolvedExprProto rows = 2;
  bool has_rows() const;
  void clear_rows();
  static const int kRowsFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_rows() const;
  public:
  const ::zetasql::AnyResolvedExprProto& rows() const;
  ::zetasql::AnyResolvedExprProto* release_rows();
  ::zetasql::AnyResolvedExprProto* mutable_rows();
  void set_allocated_rows(::zetasql::AnyResolvedExprProto* rows);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAssertRowsModifiedProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_rows();
  void clear_has_rows();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::AnyResolvedExprProto* rows_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedInsertRowProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedInsertRowProto) */ {
 public:
  ResolvedInsertRowProto();
  virtual ~ResolvedInsertRowProto();

  ResolvedInsertRowProto(const ResolvedInsertRowProto& from);

  inline ResolvedInsertRowProto& operator=(const ResolvedInsertRowProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedInsertRowProto(ResolvedInsertRowProto&& from) noexcept
    : ResolvedInsertRowProto() {
    *this = ::std::move(from);
  }

  inline ResolvedInsertRowProto& operator=(ResolvedInsertRowProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedInsertRowProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedInsertRowProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedInsertRowProto*>(
               &_ResolvedInsertRowProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  void Swap(ResolvedInsertRowProto* other);
  friend void swap(ResolvedInsertRowProto& a, ResolvedInsertRowProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedInsertRowProto* New() const final {
    return CreateMaybeMessage<ResolvedInsertRowProto>(NULL);
  }

  ResolvedInsertRowProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedInsertRowProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedInsertRowProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedDMLValueProto value_list = 2;
  int value_list_size() const;
  void clear_value_list();
  static const int kValueListFieldNumber = 2;
  ::zetasql::ResolvedDMLValueProto* mutable_value_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedDMLValueProto >*
      mutable_value_list();
  const ::zetasql::ResolvedDMLValueProto& value_list(int index) const;
  ::zetasql::ResolvedDMLValueProto* add_value_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedDMLValueProto >&
      value_list() const;

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedInsertRowProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedDMLValueProto > value_list_;
  ::zetasql::ResolvedArgumentProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedInsertStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedInsertStmtProto) */ {
 public:
  ResolvedInsertStmtProto();
  virtual ~ResolvedInsertStmtProto();

  ResolvedInsertStmtProto(const ResolvedInsertStmtProto& from);

  inline ResolvedInsertStmtProto& operator=(const ResolvedInsertStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedInsertStmtProto(ResolvedInsertStmtProto&& from) noexcept
    : ResolvedInsertStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedInsertStmtProto& operator=(ResolvedInsertStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedInsertStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedInsertStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedInsertStmtProto*>(
               &_ResolvedInsertStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  void Swap(ResolvedInsertStmtProto* other);
  friend void swap(ResolvedInsertStmtProto& a, ResolvedInsertStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedInsertStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedInsertStmtProto>(NULL);
  }

  ResolvedInsertStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedInsertStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedInsertStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedColumnProto insert_column_list = 5;
  int insert_column_list_size() const;
  void clear_insert_column_list();
  static const int kInsertColumnListFieldNumber = 5;
  ::zetasql::ResolvedColumnProto* mutable_insert_column_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >*
      mutable_insert_column_list();
  const ::zetasql::ResolvedColumnProto& insert_column_list(int index) const;
  ::zetasql::ResolvedColumnProto* add_insert_column_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >&
      insert_column_list() const;

  // repeated .zetasql.ResolvedInsertRowProto row_list = 7;
  int row_list_size() const;
  void clear_row_list();
  static const int kRowListFieldNumber = 7;
  ::zetasql::ResolvedInsertRowProto* mutable_row_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedInsertRowProto >*
      mutable_row_list();
  const ::zetasql::ResolvedInsertRowProto& row_list(int index) const;
  ::zetasql::ResolvedInsertRowProto* add_row_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedInsertRowProto >&
      row_list() const;

  // repeated .zetasql.ResolvedColumnProto query_output_column_list = 8;
  int query_output_column_list_size() const;
  void clear_query_output_column_list();
  static const int kQueryOutputColumnListFieldNumber = 8;
  ::zetasql::ResolvedColumnProto* mutable_query_output_column_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >*
      mutable_query_output_column_list();
  const ::zetasql::ResolvedColumnProto& query_output_column_list(int index) const;
  ::zetasql::ResolvedColumnProto* add_query_output_column_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >&
      query_output_column_list() const;

  // repeated .zetasql.ResolvedColumnRefProto query_parameter_list = 9;
  int query_parameter_list_size() const;
  void clear_query_parameter_list();
  static const int kQueryParameterListFieldNumber = 9;
  ::zetasql::ResolvedColumnRefProto* mutable_query_parameter_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >*
      mutable_query_parameter_list();
  const ::zetasql::ResolvedColumnRefProto& query_parameter_list(int index) const;
  ::zetasql::ResolvedColumnRefProto* add_query_parameter_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >&
      query_parameter_list() const;

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional .zetasql.ResolvedTableScanProto table_scan = 2;
  bool has_table_scan() const;
  void clear_table_scan();
  static const int kTableScanFieldNumber = 2;
  private:
  const ::zetasql::ResolvedTableScanProto& _internal_table_scan() const;
  public:
  const ::zetasql::ResolvedTableScanProto& table_scan() const;
  ::zetasql::ResolvedTableScanProto* release_table_scan();
  ::zetasql::ResolvedTableScanProto* mutable_table_scan();
  void set_allocated_table_scan(::zetasql::ResolvedTableScanProto* table_scan);

  // optional .zetasql.ResolvedAssertRowsModifiedProto assert_rows_modified = 4;
  bool has_assert_rows_modified() const;
  void clear_assert_rows_modified();
  static const int kAssertRowsModifiedFieldNumber = 4;
  private:
  const ::zetasql::ResolvedAssertRowsModifiedProto& _internal_assert_rows_modified() const;
  public:
  const ::zetasql::ResolvedAssertRowsModifiedProto& assert_rows_modified() const;
  ::zetasql::ResolvedAssertRowsModifiedProto* release_assert_rows_modified();
  ::zetasql::ResolvedAssertRowsModifiedProto* mutable_assert_rows_modified();
  void set_allocated_assert_rows_modified(::zetasql::ResolvedAssertRowsModifiedProto* assert_rows_modified);

  // optional .zetasql.AnyResolvedScanProto query = 6;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 6;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_query() const;
  public:
  const ::zetasql::AnyResolvedScanProto& query() const;
  ::zetasql::AnyResolvedScanProto* release_query();
  ::zetasql::AnyResolvedScanProto* mutable_query();
  void set_allocated_query(::zetasql::AnyResolvedScanProto* query);

  // optional .zetasql.ResolvedReturningClauseProto returning = 10;
  bool has_returning() const;
  void clear_returning();
  static const int kReturningFieldNumber = 10;
  private:
  const ::zetasql::ResolvedReturningClauseProto& _internal_returning() const;
  public:
  const ::zetasql::ResolvedReturningClauseProto& returning() const;
  ::zetasql::ResolvedReturningClauseProto* release_returning();
  ::zetasql::ResolvedReturningClauseProto* mutable_returning();
  void set_allocated_returning(::zetasql::ResolvedReturningClauseProto* returning);

  // optional .zetasql.ResolvedInsertStmtEnums.InsertMode insert_mode = 3;
  bool has_insert_mode() const;
  void clear_insert_mode();
  static const int kInsertModeFieldNumber = 3;
  ::zetasql::ResolvedInsertStmtEnums_InsertMode insert_mode() const;
  void set_insert_mode(::zetasql::ResolvedInsertStmtEnums_InsertMode value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedInsertStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_table_scan();
  void clear_has_table_scan();
  void set_has_insert_mode();
  void clear_has_insert_mode();
  void set_has_assert_rows_modified();
  void clear_has_assert_rows_modified();
  void set_has_returning();
  void clear_has_returning();
  void set_has_query();
  void clear_has_query();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto > insert_column_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedInsertRowProto > row_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto > query_output_column_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto > query_parameter_list_;
  ::zetasql::ResolvedStatementProto* parent_;
  ::zetasql::ResolvedTableScanProto* table_scan_;
  ::zetasql::ResolvedAssertRowsModifiedProto* assert_rows_modified_;
  ::zetasql::AnyResolvedScanProto* query_;
  ::zetasql::ResolvedReturningClauseProto* returning_;
  int insert_mode_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedDeleteStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedDeleteStmtProto) */ {
 public:
  ResolvedDeleteStmtProto();
  virtual ~ResolvedDeleteStmtProto();

  ResolvedDeleteStmtProto(const ResolvedDeleteStmtProto& from);

  inline ResolvedDeleteStmtProto& operator=(const ResolvedDeleteStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedDeleteStmtProto(ResolvedDeleteStmtProto&& from) noexcept
    : ResolvedDeleteStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedDeleteStmtProto& operator=(ResolvedDeleteStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedDeleteStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedDeleteStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedDeleteStmtProto*>(
               &_ResolvedDeleteStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  void Swap(ResolvedDeleteStmtProto* other);
  friend void swap(ResolvedDeleteStmtProto& a, ResolvedDeleteStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedDeleteStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedDeleteStmtProto>(NULL);
  }

  ResolvedDeleteStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedDeleteStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedDeleteStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional .zetasql.ResolvedTableScanProto table_scan = 2;
  bool has_table_scan() const;
  void clear_table_scan();
  static const int kTableScanFieldNumber = 2;
  private:
  const ::zetasql::ResolvedTableScanProto& _internal_table_scan() const;
  public:
  const ::zetasql::ResolvedTableScanProto& table_scan() const;
  ::zetasql::ResolvedTableScanProto* release_table_scan();
  ::zetasql::ResolvedTableScanProto* mutable_table_scan();
  void set_allocated_table_scan(::zetasql::ResolvedTableScanProto* table_scan);

  // optional .zetasql.ResolvedAssertRowsModifiedProto assert_rows_modified = 3;
  bool has_assert_rows_modified() const;
  void clear_assert_rows_modified();
  static const int kAssertRowsModifiedFieldNumber = 3;
  private:
  const ::zetasql::ResolvedAssertRowsModifiedProto& _internal_assert_rows_modified() const;
  public:
  const ::zetasql::ResolvedAssertRowsModifiedProto& assert_rows_modified() const;
  ::zetasql::ResolvedAssertRowsModifiedProto* release_assert_rows_modified();
  ::zetasql::ResolvedAssertRowsModifiedProto* mutable_assert_rows_modified();
  void set_allocated_assert_rows_modified(::zetasql::ResolvedAssertRowsModifiedProto* assert_rows_modified);

  // optional .zetasql.AnyResolvedExprProto where_expr = 4;
  bool has_where_expr() const;
  void clear_where_expr();
  static const int kWhereExprFieldNumber = 4;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_where_expr() const;
  public:
  const ::zetasql::AnyResolvedExprProto& where_expr() const;
  ::zetasql::AnyResolvedExprProto* release_where_expr();
  ::zetasql::AnyResolvedExprProto* mutable_where_expr();
  void set_allocated_where_expr(::zetasql::AnyResolvedExprProto* where_expr);

  // optional .zetasql.ResolvedColumnHolderProto array_offset_column = 5;
  bool has_array_offset_column() const;
  void clear_array_offset_column();
  static const int kArrayOffsetColumnFieldNumber = 5;
  private:
  const ::zetasql::ResolvedColumnHolderProto& _internal_array_offset_column() const;
  public:
  const ::zetasql::ResolvedColumnHolderProto& array_offset_column() const;
  ::zetasql::ResolvedColumnHolderProto* release_array_offset_column();
  ::zetasql::ResolvedColumnHolderProto* mutable_array_offset_column();
  void set_allocated_array_offset_column(::zetasql::ResolvedColumnHolderProto* array_offset_column);

  // optional .zetasql.ResolvedReturningClauseProto returning = 6;
  bool has_returning() const;
  void clear_returning();
  static const int kReturningFieldNumber = 6;
  private:
  const ::zetasql::ResolvedReturningClauseProto& _internal_returning() const;
  public:
  const ::zetasql::ResolvedReturningClauseProto& returning() const;
  ::zetasql::ResolvedReturningClauseProto* release_returning();
  ::zetasql::ResolvedReturningClauseProto* mutable_returning();
  void set_allocated_returning(::zetasql::ResolvedReturningClauseProto* returning);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedDeleteStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_table_scan();
  void clear_has_table_scan();
  void set_has_assert_rows_modified();
  void clear_has_assert_rows_modified();
  void set_has_returning();
  void clear_has_returning();
  void set_has_array_offset_column();
  void clear_has_array_offset_column();
  void set_has_where_expr();
  void clear_has_where_expr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedStatementProto* parent_;
  ::zetasql::ResolvedTableScanProto* table_scan_;
  ::zetasql::ResolvedAssertRowsModifiedProto* assert_rows_modified_;
  ::zetasql::AnyResolvedExprProto* where_expr_;
  ::zetasql::ResolvedColumnHolderProto* array_offset_column_;
  ::zetasql::ResolvedReturningClauseProto* returning_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedUpdateItemProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedUpdateItemProto) */ {
 public:
  ResolvedUpdateItemProto();
  virtual ~ResolvedUpdateItemProto();

  ResolvedUpdateItemProto(const ResolvedUpdateItemProto& from);

  inline ResolvedUpdateItemProto& operator=(const ResolvedUpdateItemProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedUpdateItemProto(ResolvedUpdateItemProto&& from) noexcept
    : ResolvedUpdateItemProto() {
    *this = ::std::move(from);
  }

  inline ResolvedUpdateItemProto& operator=(ResolvedUpdateItemProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedUpdateItemProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedUpdateItemProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedUpdateItemProto*>(
               &_ResolvedUpdateItemProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  void Swap(ResolvedUpdateItemProto* other);
  friend void swap(ResolvedUpdateItemProto& a, ResolvedUpdateItemProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedUpdateItemProto* New() const final {
    return CreateMaybeMessage<ResolvedUpdateItemProto>(NULL);
  }

  ResolvedUpdateItemProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedUpdateItemProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedUpdateItemProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedDeleteStmtProto delete_list = 5;
  int delete_list_size() const;
  void clear_delete_list();
  static const int kDeleteListFieldNumber = 5;
  ::zetasql::ResolvedDeleteStmtProto* mutable_delete_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedDeleteStmtProto >*
      mutable_delete_list();
  const ::zetasql::ResolvedDeleteStmtProto& delete_list(int index) const;
  ::zetasql::ResolvedDeleteStmtProto* add_delete_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedDeleteStmtProto >&
      delete_list() const;

  // repeated .zetasql.ResolvedUpdateStmtProto update_list = 6;
  int update_list_size() const;
  void clear_update_list();
  static const int kUpdateListFieldNumber = 6;
  ::zetasql::ResolvedUpdateStmtProto* mutable_update_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUpdateStmtProto >*
      mutable_update_list();
  const ::zetasql::ResolvedUpdateStmtProto& update_list(int index) const;
  ::zetasql::ResolvedUpdateStmtProto* add_update_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUpdateStmtProto >&
      update_list() const;

  // repeated .zetasql.ResolvedInsertStmtProto insert_list = 7;
  int insert_list_size() const;
  void clear_insert_list();
  static const int kInsertListFieldNumber = 7;
  ::zetasql::ResolvedInsertStmtProto* mutable_insert_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedInsertStmtProto >*
      mutable_insert_list();
  const ::zetasql::ResolvedInsertStmtProto& insert_list(int index) const;
  ::zetasql::ResolvedInsertStmtProto* add_insert_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedInsertStmtProto >&
      insert_list() const;

  // repeated .zetasql.ResolvedUpdateArrayItemProto array_update_list = 8;
  int array_update_list_size() const;
  void clear_array_update_list();
  static const int kArrayUpdateListFieldNumber = 8;
  ::zetasql::ResolvedUpdateArrayItemProto* mutable_array_update_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUpdateArrayItemProto >*
      mutable_array_update_list();
  const ::zetasql::ResolvedUpdateArrayItemProto& array_update_list(int index) const;
  ::zetasql::ResolvedUpdateArrayItemProto* add_array_update_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUpdateArrayItemProto >&
      array_update_list() const;

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.AnyResolvedExprProto target = 2;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_target() const;
  public:
  const ::zetasql::AnyResolvedExprProto& target() const;
  ::zetasql::AnyResolvedExprProto* release_target();
  ::zetasql::AnyResolvedExprProto* mutable_target();
  void set_allocated_target(::zetasql::AnyResolvedExprProto* target);

  // optional .zetasql.ResolvedDMLValueProto set_value = 3;
  bool has_set_value() const;
  void clear_set_value();
  static const int kSetValueFieldNumber = 3;
  private:
  const ::zetasql::ResolvedDMLValueProto& _internal_set_value() const;
  public:
  const ::zetasql::ResolvedDMLValueProto& set_value() const;
  ::zetasql::ResolvedDMLValueProto* release_set_value();
  ::zetasql::ResolvedDMLValueProto* mutable_set_value();
  void set_allocated_set_value(::zetasql::ResolvedDMLValueProto* set_value);

  // optional .zetasql.ResolvedColumnHolderProto element_column = 4;
  bool has_element_column() const;
  void clear_element_column();
  static const int kElementColumnFieldNumber = 4;
  private:
  const ::zetasql::ResolvedColumnHolderProto& _internal_element_column() const;
  public:
  const ::zetasql::ResolvedColumnHolderProto& element_column() const;
  ::zetasql::ResolvedColumnHolderProto* release_element_column();
  ::zetasql::ResolvedColumnHolderProto* mutable_element_column();
  void set_allocated_element_column(::zetasql::ResolvedColumnHolderProto* element_column);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedUpdateItemProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_target();
  void clear_has_target();
  void set_has_set_value();
  void clear_has_set_value();
  void set_has_element_column();
  void clear_has_element_column();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedDeleteStmtProto > delete_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUpdateStmtProto > update_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedInsertStmtProto > insert_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUpdateArrayItemProto > array_update_list_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::AnyResolvedExprProto* target_;
  ::zetasql::ResolvedDMLValueProto* set_value_;
  ::zetasql::ResolvedColumnHolderProto* element_column_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedUpdateArrayItemProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedUpdateArrayItemProto) */ {
 public:
  ResolvedUpdateArrayItemProto();
  virtual ~ResolvedUpdateArrayItemProto();

  ResolvedUpdateArrayItemProto(const ResolvedUpdateArrayItemProto& from);

  inline ResolvedUpdateArrayItemProto& operator=(const ResolvedUpdateArrayItemProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedUpdateArrayItemProto(ResolvedUpdateArrayItemProto&& from) noexcept
    : ResolvedUpdateArrayItemProto() {
    *this = ::std::move(from);
  }

  inline ResolvedUpdateArrayItemProto& operator=(ResolvedUpdateArrayItemProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedUpdateArrayItemProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedUpdateArrayItemProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedUpdateArrayItemProto*>(
               &_ResolvedUpdateArrayItemProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  void Swap(ResolvedUpdateArrayItemProto* other);
  friend void swap(ResolvedUpdateArrayItemProto& a, ResolvedUpdateArrayItemProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedUpdateArrayItemProto* New() const final {
    return CreateMaybeMessage<ResolvedUpdateArrayItemProto>(NULL);
  }

  ResolvedUpdateArrayItemProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedUpdateArrayItemProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedUpdateArrayItemProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.AnyResolvedExprProto offset = 2;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_offset() const;
  public:
  const ::zetasql::AnyResolvedExprProto& offset() const;
  ::zetasql::AnyResolvedExprProto* release_offset();
  ::zetasql::AnyResolvedExprProto* mutable_offset();
  void set_allocated_offset(::zetasql::AnyResolvedExprProto* offset);

  // optional .zetasql.ResolvedUpdateItemProto update_item = 3;
  bool has_update_item() const;
  void clear_update_item();
  static const int kUpdateItemFieldNumber = 3;
  private:
  const ::zetasql::ResolvedUpdateItemProto& _internal_update_item() const;
  public:
  const ::zetasql::ResolvedUpdateItemProto& update_item() const;
  ::zetasql::ResolvedUpdateItemProto* release_update_item();
  ::zetasql::ResolvedUpdateItemProto* mutable_update_item();
  void set_allocated_update_item(::zetasql::ResolvedUpdateItemProto* update_item);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedUpdateArrayItemProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_offset();
  void clear_has_offset();
  void set_has_update_item();
  void clear_has_update_item();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::AnyResolvedExprProto* offset_;
  ::zetasql::ResolvedUpdateItemProto* update_item_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedUpdateStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedUpdateStmtProto) */ {
 public:
  ResolvedUpdateStmtProto();
  virtual ~ResolvedUpdateStmtProto();

  ResolvedUpdateStmtProto(const ResolvedUpdateStmtProto& from);

  inline ResolvedUpdateStmtProto& operator=(const ResolvedUpdateStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedUpdateStmtProto(ResolvedUpdateStmtProto&& from) noexcept
    : ResolvedUpdateStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedUpdateStmtProto& operator=(ResolvedUpdateStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedUpdateStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedUpdateStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedUpdateStmtProto*>(
               &_ResolvedUpdateStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  void Swap(ResolvedUpdateStmtProto* other);
  friend void swap(ResolvedUpdateStmtProto& a, ResolvedUpdateStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedUpdateStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedUpdateStmtProto>(NULL);
  }

  ResolvedUpdateStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedUpdateStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedUpdateStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedUpdateItemProto update_item_list = 5;
  int update_item_list_size() const;
  void clear_update_item_list();
  static const int kUpdateItemListFieldNumber = 5;
  ::zetasql::ResolvedUpdateItemProto* mutable_update_item_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUpdateItemProto >*
      mutable_update_item_list();
  const ::zetasql::ResolvedUpdateItemProto& update_item_list(int index) const;
  ::zetasql::ResolvedUpdateItemProto* add_update_item_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUpdateItemProto >&
      update_item_list() const;

  // repeated .zetasql.ResolvedStatementEnums.ObjectAccess column_access_list = 8;
  int column_access_list_size() const;
  void clear_column_access_list();
  static const int kColumnAccessListFieldNumber = 8;
  ::zetasql::ResolvedStatementEnums_ObjectAccess column_access_list(int index) const;
  void set_column_access_list(int index, ::zetasql::ResolvedStatementEnums_ObjectAccess value);
  void add_column_access_list(::zetasql::ResolvedStatementEnums_ObjectAccess value);
  const ::google::protobuf::RepeatedField<int>& column_access_list() const;
  ::google::protobuf::RepeatedField<int>* mutable_column_access_list();

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional .zetasql.ResolvedTableScanProto table_scan = 2;
  bool has_table_scan() const;
  void clear_table_scan();
  static const int kTableScanFieldNumber = 2;
  private:
  const ::zetasql::ResolvedTableScanProto& _internal_table_scan() const;
  public:
  const ::zetasql::ResolvedTableScanProto& table_scan() const;
  ::zetasql::ResolvedTableScanProto* release_table_scan();
  ::zetasql::ResolvedTableScanProto* mutable_table_scan();
  void set_allocated_table_scan(::zetasql::ResolvedTableScanProto* table_scan);

  // optional .zetasql.ResolvedAssertRowsModifiedProto assert_rows_modified = 3;
  bool has_assert_rows_modified() const;
  void clear_assert_rows_modified();
  static const int kAssertRowsModifiedFieldNumber = 3;
  private:
  const ::zetasql::ResolvedAssertRowsModifiedProto& _internal_assert_rows_modified() const;
  public:
  const ::zetasql::ResolvedAssertRowsModifiedProto& assert_rows_modified() const;
  ::zetasql::ResolvedAssertRowsModifiedProto* release_assert_rows_modified();
  ::zetasql::ResolvedAssertRowsModifiedProto* mutable_assert_rows_modified();
  void set_allocated_assert_rows_modified(::zetasql::ResolvedAssertRowsModifiedProto* assert_rows_modified);

  // optional .zetasql.AnyResolvedExprProto where_expr = 4;
  bool has_where_expr() const;
  void clear_where_expr();
  static const int kWhereExprFieldNumber = 4;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_where_expr() const;
  public:
  const ::zetasql::AnyResolvedExprProto& where_expr() const;
  ::zetasql::AnyResolvedExprProto* release_where_expr();
  ::zetasql::AnyResolvedExprProto* mutable_where_expr();
  void set_allocated_where_expr(::zetasql::AnyResolvedExprProto* where_expr);

  // optional .zetasql.AnyResolvedScanProto from_scan = 6;
  bool has_from_scan() const;
  void clear_from_scan();
  static const int kFromScanFieldNumber = 6;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_from_scan() const;
  public:
  const ::zetasql::AnyResolvedScanProto& from_scan() const;
  ::zetasql::AnyResolvedScanProto* release_from_scan();
  ::zetasql::AnyResolvedScanProto* mutable_from_scan();
  void set_allocated_from_scan(::zetasql::AnyResolvedScanProto* from_scan);

  // optional .zetasql.ResolvedColumnHolderProto array_offset_column = 7;
  bool has_array_offset_column() const;
  void clear_array_offset_column();
  static const int kArrayOffsetColumnFieldNumber = 7;
  private:
  const ::zetasql::ResolvedColumnHolderProto& _internal_array_offset_column() const;
  public:
  const ::zetasql::ResolvedColumnHolderProto& array_offset_column() const;
  ::zetasql::ResolvedColumnHolderProto* release_array_offset_column();
  ::zetasql::ResolvedColumnHolderProto* mutable_array_offset_column();
  void set_allocated_array_offset_column(::zetasql::ResolvedColumnHolderProto* array_offset_column);

  // optional .zetasql.ResolvedReturningClauseProto returning = 9;
  bool has_returning() const;
  void clear_returning();
  static const int kReturningFieldNumber = 9;
  private:
  const ::zetasql::ResolvedReturningClauseProto& _internal_returning() const;
  public:
  const ::zetasql::ResolvedReturningClauseProto& returning() const;
  ::zetasql::ResolvedReturningClauseProto* release_returning();
  ::zetasql::ResolvedReturningClauseProto* mutable_returning();
  void set_allocated_returning(::zetasql::ResolvedReturningClauseProto* returning);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedUpdateStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_table_scan();
  void clear_has_table_scan();
  void set_has_assert_rows_modified();
  void clear_has_assert_rows_modified();
  void set_has_returning();
  void clear_has_returning();
  void set_has_array_offset_column();
  void clear_has_array_offset_column();
  void set_has_where_expr();
  void clear_has_where_expr();
  void set_has_from_scan();
  void clear_has_from_scan();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUpdateItemProto > update_item_list_;
  ::google::protobuf::RepeatedField<int> column_access_list_;
  ::zetasql::ResolvedStatementProto* parent_;
  ::zetasql::ResolvedTableScanProto* table_scan_;
  ::zetasql::ResolvedAssertRowsModifiedProto* assert_rows_modified_;
  ::zetasql::AnyResolvedExprProto* where_expr_;
  ::zetasql::AnyResolvedScanProto* from_scan_;
  ::zetasql::ResolvedColumnHolderProto* array_offset_column_;
  ::zetasql::ResolvedReturningClauseProto* returning_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedMergeWhenProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedMergeWhenProto) */ {
 public:
  ResolvedMergeWhenProto();
  virtual ~ResolvedMergeWhenProto();

  ResolvedMergeWhenProto(const ResolvedMergeWhenProto& from);

  inline ResolvedMergeWhenProto& operator=(const ResolvedMergeWhenProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedMergeWhenProto(ResolvedMergeWhenProto&& from) noexcept
    : ResolvedMergeWhenProto() {
    *this = ::std::move(from);
  }

  inline ResolvedMergeWhenProto& operator=(ResolvedMergeWhenProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedMergeWhenProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedMergeWhenProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedMergeWhenProto*>(
               &_ResolvedMergeWhenProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  void Swap(ResolvedMergeWhenProto* other);
  friend void swap(ResolvedMergeWhenProto& a, ResolvedMergeWhenProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedMergeWhenProto* New() const final {
    return CreateMaybeMessage<ResolvedMergeWhenProto>(NULL);
  }

  ResolvedMergeWhenProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedMergeWhenProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedMergeWhenProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedColumnProto insert_column_list = 5;
  int insert_column_list_size() const;
  void clear_insert_column_list();
  static const int kInsertColumnListFieldNumber = 5;
  ::zetasql::ResolvedColumnProto* mutable_insert_column_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >*
      mutable_insert_column_list();
  const ::zetasql::ResolvedColumnProto& insert_column_list(int index) const;
  ::zetasql::ResolvedColumnProto* add_insert_column_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >&
      insert_column_list() const;

  // repeated .zetasql.ResolvedUpdateItemProto update_item_list = 7;
  int update_item_list_size() const;
  void clear_update_item_list();
  static const int kUpdateItemListFieldNumber = 7;
  ::zetasql::ResolvedUpdateItemProto* mutable_update_item_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUpdateItemProto >*
      mutable_update_item_list();
  const ::zetasql::ResolvedUpdateItemProto& update_item_list(int index) const;
  ::zetasql::ResolvedUpdateItemProto* add_update_item_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUpdateItemProto >&
      update_item_list() const;

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.AnyResolvedExprProto match_expr = 3;
  bool has_match_expr() const;
  void clear_match_expr();
  static const int kMatchExprFieldNumber = 3;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_match_expr() const;
  public:
  const ::zetasql::AnyResolvedExprProto& match_expr() const;
  ::zetasql::AnyResolvedExprProto* release_match_expr();
  ::zetasql::AnyResolvedExprProto* mutable_match_expr();
  void set_allocated_match_expr(::zetasql::AnyResolvedExprProto* match_expr);

  // optional .zetasql.ResolvedInsertRowProto insert_row = 6;
  bool has_insert_row() const;
  void clear_insert_row();
  static const int kInsertRowFieldNumber = 6;
  private:
  const ::zetasql::ResolvedInsertRowProto& _internal_insert_row() const;
  public:
  const ::zetasql::ResolvedInsertRowProto& insert_row() const;
  ::zetasql::ResolvedInsertRowProto* release_insert_row();
  ::zetasql::ResolvedInsertRowProto* mutable_insert_row();
  void set_allocated_insert_row(::zetasql::ResolvedInsertRowProto* insert_row);

  // optional .zetasql.ResolvedMergeWhenEnums.MatchType match_type = 2;
  bool has_match_type() const;
  void clear_match_type();
  static const int kMatchTypeFieldNumber = 2;
  ::zetasql::ResolvedMergeWhenEnums_MatchType match_type() const;
  void set_match_type(::zetasql::ResolvedMergeWhenEnums_MatchType value);

  // optional .zetasql.ResolvedMergeWhenEnums.ActionType action_type = 4;
  bool has_action_type() const;
  void clear_action_type();
  static const int kActionTypeFieldNumber = 4;
  ::zetasql::ResolvedMergeWhenEnums_ActionType action_type() const;
  void set_action_type(::zetasql::ResolvedMergeWhenEnums_ActionType value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedMergeWhenProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_match_type();
  void clear_has_match_type();
  void set_has_match_expr();
  void clear_has_match_expr();
  void set_has_action_type();
  void clear_has_action_type();
  void set_has_insert_row();
  void clear_has_insert_row();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto > insert_column_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUpdateItemProto > update_item_list_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::AnyResolvedExprProto* match_expr_;
  ::zetasql::ResolvedInsertRowProto* insert_row_;
  int match_type_;
  int action_type_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedMergeStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedMergeStmtProto) */ {
 public:
  ResolvedMergeStmtProto();
  virtual ~ResolvedMergeStmtProto();

  ResolvedMergeStmtProto(const ResolvedMergeStmtProto& from);

  inline ResolvedMergeStmtProto& operator=(const ResolvedMergeStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedMergeStmtProto(ResolvedMergeStmtProto&& from) noexcept
    : ResolvedMergeStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedMergeStmtProto& operator=(ResolvedMergeStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedMergeStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedMergeStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedMergeStmtProto*>(
               &_ResolvedMergeStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  void Swap(ResolvedMergeStmtProto* other);
  friend void swap(ResolvedMergeStmtProto& a, ResolvedMergeStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedMergeStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedMergeStmtProto>(NULL);
  }

  ResolvedMergeStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedMergeStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedMergeStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedMergeWhenProto when_clause_list = 5;
  int when_clause_list_size() const;
  void clear_when_clause_list();
  static const int kWhenClauseListFieldNumber = 5;
  ::zetasql::ResolvedMergeWhenProto* mutable_when_clause_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedMergeWhenProto >*
      mutable_when_clause_list();
  const ::zetasql::ResolvedMergeWhenProto& when_clause_list(int index) const;
  ::zetasql::ResolvedMergeWhenProto* add_when_clause_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedMergeWhenProto >&
      when_clause_list() const;

  // repeated .zetasql.ResolvedStatementEnums.ObjectAccess column_access_list = 6;
  int column_access_list_size() const;
  void clear_column_access_list();
  static const int kColumnAccessListFieldNumber = 6;
  ::zetasql::ResolvedStatementEnums_ObjectAccess column_access_list(int index) const;
  void set_column_access_list(int index, ::zetasql::ResolvedStatementEnums_ObjectAccess value);
  void add_column_access_list(::zetasql::ResolvedStatementEnums_ObjectAccess value);
  const ::google::protobuf::RepeatedField<int>& column_access_list() const;
  ::google::protobuf::RepeatedField<int>* mutable_column_access_list();

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional .zetasql.ResolvedTableScanProto table_scan = 2;
  bool has_table_scan() const;
  void clear_table_scan();
  static const int kTableScanFieldNumber = 2;
  private:
  const ::zetasql::ResolvedTableScanProto& _internal_table_scan() const;
  public:
  const ::zetasql::ResolvedTableScanProto& table_scan() const;
  ::zetasql::ResolvedTableScanProto* release_table_scan();
  ::zetasql::ResolvedTableScanProto* mutable_table_scan();
  void set_allocated_table_scan(::zetasql::ResolvedTableScanProto* table_scan);

  // optional .zetasql.AnyResolvedScanProto from_scan = 3;
  bool has_from_scan() const;
  void clear_from_scan();
  static const int kFromScanFieldNumber = 3;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_from_scan() const;
  public:
  const ::zetasql::AnyResolvedScanProto& from_scan() const;
  ::zetasql::AnyResolvedScanProto* release_from_scan();
  ::zetasql::AnyResolvedScanProto* mutable_from_scan();
  void set_allocated_from_scan(::zetasql::AnyResolvedScanProto* from_scan);

  // optional .zetasql.AnyResolvedExprProto merge_expr = 4;
  bool has_merge_expr() const;
  void clear_merge_expr();
  static const int kMergeExprFieldNumber = 4;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_merge_expr() const;
  public:
  const ::zetasql::AnyResolvedExprProto& merge_expr() const;
  ::zetasql::AnyResolvedExprProto* release_merge_expr();
  ::zetasql::AnyResolvedExprProto* mutable_merge_expr();
  void set_allocated_merge_expr(::zetasql::AnyResolvedExprProto* merge_expr);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedMergeStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_table_scan();
  void clear_has_table_scan();
  void set_has_from_scan();
  void clear_has_from_scan();
  void set_has_merge_expr();
  void clear_has_merge_expr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedMergeWhenProto > when_clause_list_;
  ::google::protobuf::RepeatedField<int> column_access_list_;
  ::zetasql::ResolvedStatementProto* parent_;
  ::zetasql::ResolvedTableScanProto* table_scan_;
  ::zetasql::AnyResolvedScanProto* from_scan_;
  ::zetasql::AnyResolvedExprProto* merge_expr_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedTruncateStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedTruncateStmtProto) */ {
 public:
  ResolvedTruncateStmtProto();
  virtual ~ResolvedTruncateStmtProto();

  ResolvedTruncateStmtProto(const ResolvedTruncateStmtProto& from);

  inline ResolvedTruncateStmtProto& operator=(const ResolvedTruncateStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedTruncateStmtProto(ResolvedTruncateStmtProto&& from) noexcept
    : ResolvedTruncateStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedTruncateStmtProto& operator=(ResolvedTruncateStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedTruncateStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedTruncateStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedTruncateStmtProto*>(
               &_ResolvedTruncateStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  void Swap(ResolvedTruncateStmtProto* other);
  friend void swap(ResolvedTruncateStmtProto& a, ResolvedTruncateStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedTruncateStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedTruncateStmtProto>(NULL);
  }

  ResolvedTruncateStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedTruncateStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedTruncateStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional .zetasql.ResolvedTableScanProto table_scan = 3;
  bool has_table_scan() const;
  void clear_table_scan();
  static const int kTableScanFieldNumber = 3;
  private:
  const ::zetasql::ResolvedTableScanProto& _internal_table_scan() const;
  public:
  const ::zetasql::ResolvedTableScanProto& table_scan() const;
  ::zetasql::ResolvedTableScanProto* release_table_scan();
  ::zetasql::ResolvedTableScanProto* mutable_table_scan();
  void set_allocated_table_scan(::zetasql::ResolvedTableScanProto* table_scan);

  // optional .zetasql.AnyResolvedExprProto where_expr = 4;
  bool has_where_expr() const;
  void clear_where_expr();
  static const int kWhereExprFieldNumber = 4;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_where_expr() const;
  public:
  const ::zetasql::AnyResolvedExprProto& where_expr() const;
  ::zetasql::AnyResolvedExprProto* release_where_expr();
  ::zetasql::AnyResolvedExprProto* mutable_where_expr();
  void set_allocated_where_expr(::zetasql::AnyResolvedExprProto* where_expr);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedTruncateStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_table_scan();
  void clear_has_table_scan();
  void set_has_where_expr();
  void clear_has_where_expr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedStatementProto* parent_;
  ::zetasql::ResolvedTableScanProto* table_scan_;
  ::zetasql::AnyResolvedExprProto* where_expr_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedObjectUnitProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedObjectUnitProto) */ {
 public:
  ResolvedObjectUnitProto();
  virtual ~ResolvedObjectUnitProto();

  ResolvedObjectUnitProto(const ResolvedObjectUnitProto& from);

  inline ResolvedObjectUnitProto& operator=(const ResolvedObjectUnitProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedObjectUnitProto(ResolvedObjectUnitProto&& from) noexcept
    : ResolvedObjectUnitProto() {
    *this = ::std::move(from);
  }

  inline ResolvedObjectUnitProto& operator=(ResolvedObjectUnitProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedObjectUnitProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedObjectUnitProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedObjectUnitProto*>(
               &_ResolvedObjectUnitProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  void Swap(ResolvedObjectUnitProto* other);
  friend void swap(ResolvedObjectUnitProto& a, ResolvedObjectUnitProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedObjectUnitProto* New() const final {
    return CreateMaybeMessage<ResolvedObjectUnitProto>(NULL);
  }

  ResolvedObjectUnitProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedObjectUnitProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedObjectUnitProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name_path = 2;
  int name_path_size() const;
  void clear_name_path();
  static const int kNamePathFieldNumber = 2;
  const ::std::string& name_path(int index) const;
  ::std::string* mutable_name_path(int index);
  void set_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name_path(int index, ::std::string&& value);
  #endif
  void set_name_path(int index, const char* value);
  void set_name_path(int index, const char* value, size_t size);
  ::std::string* add_name_path();
  void add_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_name_path(::std::string&& value);
  #endif
  void add_name_path(const char* value);
  void add_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_path();

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedObjectUnitProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_path_;
  ::zetasql::ResolvedArgumentProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedPrivilegeProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedPrivilegeProto) */ {
 public:
  ResolvedPrivilegeProto();
  virtual ~ResolvedPrivilegeProto();

  ResolvedPrivilegeProto(const ResolvedPrivilegeProto& from);

  inline ResolvedPrivilegeProto& operator=(const ResolvedPrivilegeProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedPrivilegeProto(ResolvedPrivilegeProto&& from) noexcept
    : ResolvedPrivilegeProto() {
    *this = ::std::move(from);
  }

  inline ResolvedPrivilegeProto& operator=(ResolvedPrivilegeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedPrivilegeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedPrivilegeProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedPrivilegeProto*>(
               &_ResolvedPrivilegeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  void Swap(ResolvedPrivilegeProto* other);
  friend void swap(ResolvedPrivilegeProto& a, ResolvedPrivilegeProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedPrivilegeProto* New() const final {
    return CreateMaybeMessage<ResolvedPrivilegeProto>(NULL);
  }

  ResolvedPrivilegeProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedPrivilegeProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedPrivilegeProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedObjectUnitProto unit_list = 3;
  int unit_list_size() const;
  void clear_unit_list();
  static const int kUnitListFieldNumber = 3;
  ::zetasql::ResolvedObjectUnitProto* mutable_unit_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedObjectUnitProto >*
      mutable_unit_list();
  const ::zetasql::ResolvedObjectUnitProto& unit_list(int index) const;
  ::zetasql::ResolvedObjectUnitProto* add_unit_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedObjectUnitProto >&
      unit_list() const;

  // optional string action_type = 2;
  bool has_action_type() const;
  void clear_action_type();
  static const int kActionTypeFieldNumber = 2;
  const ::std::string& action_type() const;
  void set_action_type(const ::std::string& value);
  #if LANG_CXX11
  void set_action_type(::std::string&& value);
  #endif
  void set_action_type(const char* value);
  void set_action_type(const char* value, size_t size);
  ::std::string* mutable_action_type();
  ::std::string* release_action_type();
  void set_allocated_action_type(::std::string* action_type);

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedPrivilegeProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_action_type();
  void clear_has_action_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedObjectUnitProto > unit_list_;
  ::google::protobuf::internal::ArenaStringPtr action_type_;
  ::zetasql::ResolvedArgumentProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnyResolvedGrantOrRevokeStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.AnyResolvedGrantOrRevokeStmtProto) */ {
 public:
  AnyResolvedGrantOrRevokeStmtProto();
  virtual ~AnyResolvedGrantOrRevokeStmtProto();

  AnyResolvedGrantOrRevokeStmtProto(const AnyResolvedGrantOrRevokeStmtProto& from);

  inline AnyResolvedGrantOrRevokeStmtProto& operator=(const AnyResolvedGrantOrRevokeStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnyResolvedGrantOrRevokeStmtProto(AnyResolvedGrantOrRevokeStmtProto&& from) noexcept
    : AnyResolvedGrantOrRevokeStmtProto() {
    *this = ::std::move(from);
  }

  inline AnyResolvedGrantOrRevokeStmtProto& operator=(AnyResolvedGrantOrRevokeStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnyResolvedGrantOrRevokeStmtProto& default_instance();

  enum NodeCase {
    kResolvedGrantStmtNode = 69,
    kResolvedRevokeStmtNode = 70,
    NODE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnyResolvedGrantOrRevokeStmtProto* internal_default_instance() {
    return reinterpret_cast<const AnyResolvedGrantOrRevokeStmtProto*>(
               &_AnyResolvedGrantOrRevokeStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  void Swap(AnyResolvedGrantOrRevokeStmtProto* other);
  friend void swap(AnyResolvedGrantOrRevokeStmtProto& a, AnyResolvedGrantOrRevokeStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnyResolvedGrantOrRevokeStmtProto* New() const final {
    return CreateMaybeMessage<AnyResolvedGrantOrRevokeStmtProto>(NULL);
  }

  AnyResolvedGrantOrRevokeStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnyResolvedGrantOrRevokeStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyResolvedGrantOrRevokeStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedGrantStmtProto resolved_grant_stmt_node = 69;
  bool has_resolved_grant_stmt_node() const;
  void clear_resolved_grant_stmt_node();
  static const int kResolvedGrantStmtNodeFieldNumber = 69;
  private:
  const ::zetasql::ResolvedGrantStmtProto& _internal_resolved_grant_stmt_node() const;
  public:
  const ::zetasql::ResolvedGrantStmtProto& resolved_grant_stmt_node() const;
  ::zetasql::ResolvedGrantStmtProto* release_resolved_grant_stmt_node();
  ::zetasql::ResolvedGrantStmtProto* mutable_resolved_grant_stmt_node();
  void set_allocated_resolved_grant_stmt_node(::zetasql::ResolvedGrantStmtProto* resolved_grant_stmt_node);

  // optional .zetasql.ResolvedRevokeStmtProto resolved_revoke_stmt_node = 70;
  bool has_resolved_revoke_stmt_node() const;
  void clear_resolved_revoke_stmt_node();
  static const int kResolvedRevokeStmtNodeFieldNumber = 70;
  private:
  const ::zetasql::ResolvedRevokeStmtProto& _internal_resolved_revoke_stmt_node() const;
  public:
  const ::zetasql::ResolvedRevokeStmtProto& resolved_revoke_stmt_node() const;
  ::zetasql::ResolvedRevokeStmtProto* release_resolved_revoke_stmt_node();
  ::zetasql::ResolvedRevokeStmtProto* mutable_resolved_revoke_stmt_node();
  void set_allocated_resolved_revoke_stmt_node(::zetasql::ResolvedRevokeStmtProto* resolved_revoke_stmt_node);

  void clear_node();
  NodeCase node_case() const;
  // @@protoc_insertion_point(class_scope:zetasql.AnyResolvedGrantOrRevokeStmtProto)
 private:
  void set_has_resolved_grant_stmt_node();
  void set_has_resolved_revoke_stmt_node();

  inline bool has_node() const;
  inline void clear_has_node();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union NodeUnion {
    NodeUnion() {}
    ::zetasql::ResolvedGrantStmtProto* resolved_grant_stmt_node_;
    ::zetasql::ResolvedRevokeStmtProto* resolved_revoke_stmt_node_;
  } node_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedGrantOrRevokeStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedGrantOrRevokeStmtProto) */ {
 public:
  ResolvedGrantOrRevokeStmtProto();
  virtual ~ResolvedGrantOrRevokeStmtProto();

  ResolvedGrantOrRevokeStmtProto(const ResolvedGrantOrRevokeStmtProto& from);

  inline ResolvedGrantOrRevokeStmtProto& operator=(const ResolvedGrantOrRevokeStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedGrantOrRevokeStmtProto(ResolvedGrantOrRevokeStmtProto&& from) noexcept
    : ResolvedGrantOrRevokeStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedGrantOrRevokeStmtProto& operator=(ResolvedGrantOrRevokeStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedGrantOrRevokeStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedGrantOrRevokeStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedGrantOrRevokeStmtProto*>(
               &_ResolvedGrantOrRevokeStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  void Swap(ResolvedGrantOrRevokeStmtProto* other);
  friend void swap(ResolvedGrantOrRevokeStmtProto& a, ResolvedGrantOrRevokeStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedGrantOrRevokeStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedGrantOrRevokeStmtProto>(NULL);
  }

  ResolvedGrantOrRevokeStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedGrantOrRevokeStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedGrantOrRevokeStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedPrivilegeProto privilege_list = 2;
  int privilege_list_size() const;
  void clear_privilege_list();
  static const int kPrivilegeListFieldNumber = 2;
  ::zetasql::ResolvedPrivilegeProto* mutable_privilege_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedPrivilegeProto >*
      mutable_privilege_list();
  const ::zetasql::ResolvedPrivilegeProto& privilege_list(int index) const;
  ::zetasql::ResolvedPrivilegeProto* add_privilege_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedPrivilegeProto >&
      privilege_list() const;

  // repeated string name_path = 4;
  int name_path_size() const;
  void clear_name_path();
  static const int kNamePathFieldNumber = 4;
  const ::std::string& name_path(int index) const;
  ::std::string* mutable_name_path(int index);
  void set_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name_path(int index, ::std::string&& value);
  #endif
  void set_name_path(int index, const char* value);
  void set_name_path(int index, const char* value, size_t size);
  ::std::string* add_name_path();
  void add_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_name_path(::std::string&& value);
  #endif
  void add_name_path(const char* value);
  void add_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_path();

  // repeated string grantee_list = 5;
  int grantee_list_size() const;
  void clear_grantee_list();
  static const int kGranteeListFieldNumber = 5;
  const ::std::string& grantee_list(int index) const;
  ::std::string* mutable_grantee_list(int index);
  void set_grantee_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_grantee_list(int index, ::std::string&& value);
  #endif
  void set_grantee_list(int index, const char* value);
  void set_grantee_list(int index, const char* value, size_t size);
  ::std::string* add_grantee_list();
  void add_grantee_list(const ::std::string& value);
  #if LANG_CXX11
  void add_grantee_list(::std::string&& value);
  #endif
  void add_grantee_list(const char* value);
  void add_grantee_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& grantee_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_grantee_list();

  // repeated .zetasql.AnyResolvedExprProto grantee_expr_list = 6;
  int grantee_expr_list_size() const;
  void clear_grantee_expr_list();
  static const int kGranteeExprListFieldNumber = 6;
  ::zetasql::AnyResolvedExprProto* mutable_grantee_expr_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
      mutable_grantee_expr_list();
  const ::zetasql::AnyResolvedExprProto& grantee_expr_list(int index) const;
  ::zetasql::AnyResolvedExprProto* add_grantee_expr_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
      grantee_expr_list() const;

  // optional string object_type = 3;
  bool has_object_type() const;
  void clear_object_type();
  static const int kObjectTypeFieldNumber = 3;
  const ::std::string& object_type() const;
  void set_object_type(const ::std::string& value);
  #if LANG_CXX11
  void set_object_type(::std::string&& value);
  #endif
  void set_object_type(const char* value);
  void set_object_type(const char* value, size_t size);
  ::std::string* mutable_object_type();
  ::std::string* release_object_type();
  void set_allocated_object_type(::std::string* object_type);

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedGrantOrRevokeStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_object_type();
  void clear_has_object_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedPrivilegeProto > privilege_list_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_path_;
  ::google::protobuf::RepeatedPtrField< ::std::string> grantee_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto > grantee_expr_list_;
  ::google::protobuf::internal::ArenaStringPtr object_type_;
  ::zetasql::ResolvedStatementProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedGrantStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedGrantStmtProto) */ {
 public:
  ResolvedGrantStmtProto();
  virtual ~ResolvedGrantStmtProto();

  ResolvedGrantStmtProto(const ResolvedGrantStmtProto& from);

  inline ResolvedGrantStmtProto& operator=(const ResolvedGrantStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedGrantStmtProto(ResolvedGrantStmtProto&& from) noexcept
    : ResolvedGrantStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedGrantStmtProto& operator=(ResolvedGrantStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedGrantStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedGrantStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedGrantStmtProto*>(
               &_ResolvedGrantStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  void Swap(ResolvedGrantStmtProto* other);
  friend void swap(ResolvedGrantStmtProto& a, ResolvedGrantStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedGrantStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedGrantStmtProto>(NULL);
  }

  ResolvedGrantStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedGrantStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedGrantStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedGrantOrRevokeStmtProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedGrantOrRevokeStmtProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedGrantOrRevokeStmtProto& parent() const;
  ::zetasql::ResolvedGrantOrRevokeStmtProto* release_parent();
  ::zetasql::ResolvedGrantOrRevokeStmtProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedGrantOrRevokeStmtProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedGrantStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedGrantOrRevokeStmtProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedRevokeStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedRevokeStmtProto) */ {
 public:
  ResolvedRevokeStmtProto();
  virtual ~ResolvedRevokeStmtProto();

  ResolvedRevokeStmtProto(const ResolvedRevokeStmtProto& from);

  inline ResolvedRevokeStmtProto& operator=(const ResolvedRevokeStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedRevokeStmtProto(ResolvedRevokeStmtProto&& from) noexcept
    : ResolvedRevokeStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedRevokeStmtProto& operator=(ResolvedRevokeStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedRevokeStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedRevokeStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedRevokeStmtProto*>(
               &_ResolvedRevokeStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  void Swap(ResolvedRevokeStmtProto* other);
  friend void swap(ResolvedRevokeStmtProto& a, ResolvedRevokeStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedRevokeStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedRevokeStmtProto>(NULL);
  }

  ResolvedRevokeStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedRevokeStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedRevokeStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedGrantOrRevokeStmtProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedGrantOrRevokeStmtProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedGrantOrRevokeStmtProto& parent() const;
  ::zetasql::ResolvedGrantOrRevokeStmtProto* release_parent();
  ::zetasql::ResolvedGrantOrRevokeStmtProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedGrantOrRevokeStmtProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedRevokeStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedGrantOrRevokeStmtProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnyResolvedAlterObjectStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.AnyResolvedAlterObjectStmtProto) */ {
 public:
  AnyResolvedAlterObjectStmtProto();
  virtual ~AnyResolvedAlterObjectStmtProto();

  AnyResolvedAlterObjectStmtProto(const AnyResolvedAlterObjectStmtProto& from);

  inline AnyResolvedAlterObjectStmtProto& operator=(const AnyResolvedAlterObjectStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnyResolvedAlterObjectStmtProto(AnyResolvedAlterObjectStmtProto&& from) noexcept
    : AnyResolvedAlterObjectStmtProto() {
    *this = ::std::move(from);
  }

  inline AnyResolvedAlterObjectStmtProto& operator=(AnyResolvedAlterObjectStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnyResolvedAlterObjectStmtProto& default_instance();

  enum NodeCase {
    kResolvedAlterRowAccessPolicyStmtNode = 75,
    kResolvedAlterTableStmtNode = 115,
    kResolvedAlterViewStmtNode = 118,
    kResolvedAlterMaterializedViewStmtNode = 127,
    kResolvedAlterDatabaseStmtNode = 134,
    kResolvedAlterAllRowAccessPoliciesStmtNode = 145,
    kResolvedAlterEntityStmtNode = 155,
    kResolvedAlterSchemaStmtNode = 160,
    kResolvedAlterPrivilegeRestrictionStmtNode = 196,
    NODE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnyResolvedAlterObjectStmtProto* internal_default_instance() {
    return reinterpret_cast<const AnyResolvedAlterObjectStmtProto*>(
               &_AnyResolvedAlterObjectStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  void Swap(AnyResolvedAlterObjectStmtProto* other);
  friend void swap(AnyResolvedAlterObjectStmtProto& a, AnyResolvedAlterObjectStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnyResolvedAlterObjectStmtProto* New() const final {
    return CreateMaybeMessage<AnyResolvedAlterObjectStmtProto>(NULL);
  }

  AnyResolvedAlterObjectStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnyResolvedAlterObjectStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyResolvedAlterObjectStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedAlterRowAccessPolicyStmtProto resolved_alter_row_access_policy_stmt_node = 75;
  bool has_resolved_alter_row_access_policy_stmt_node() const;
  void clear_resolved_alter_row_access_policy_stmt_node();
  static const int kResolvedAlterRowAccessPolicyStmtNodeFieldNumber = 75;
  private:
  const ::zetasql::ResolvedAlterRowAccessPolicyStmtProto& _internal_resolved_alter_row_access_policy_stmt_node() const;
  public:
  const ::zetasql::ResolvedAlterRowAccessPolicyStmtProto& resolved_alter_row_access_policy_stmt_node() const;
  ::zetasql::ResolvedAlterRowAccessPolicyStmtProto* release_resolved_alter_row_access_policy_stmt_node();
  ::zetasql::ResolvedAlterRowAccessPolicyStmtProto* mutable_resolved_alter_row_access_policy_stmt_node();
  void set_allocated_resolved_alter_row_access_policy_stmt_node(::zetasql::ResolvedAlterRowAccessPolicyStmtProto* resolved_alter_row_access_policy_stmt_node);

  // optional .zetasql.ResolvedAlterTableStmtProto resolved_alter_table_stmt_node = 115;
  bool has_resolved_alter_table_stmt_node() const;
  void clear_resolved_alter_table_stmt_node();
  static const int kResolvedAlterTableStmtNodeFieldNumber = 115;
  private:
  const ::zetasql::ResolvedAlterTableStmtProto& _internal_resolved_alter_table_stmt_node() const;
  public:
  const ::zetasql::ResolvedAlterTableStmtProto& resolved_alter_table_stmt_node() const;
  ::zetasql::ResolvedAlterTableStmtProto* release_resolved_alter_table_stmt_node();
  ::zetasql::ResolvedAlterTableStmtProto* mutable_resolved_alter_table_stmt_node();
  void set_allocated_resolved_alter_table_stmt_node(::zetasql::ResolvedAlterTableStmtProto* resolved_alter_table_stmt_node);

  // optional .zetasql.ResolvedAlterViewStmtProto resolved_alter_view_stmt_node = 118;
  bool has_resolved_alter_view_stmt_node() const;
  void clear_resolved_alter_view_stmt_node();
  static const int kResolvedAlterViewStmtNodeFieldNumber = 118;
  private:
  const ::zetasql::ResolvedAlterViewStmtProto& _internal_resolved_alter_view_stmt_node() const;
  public:
  const ::zetasql::ResolvedAlterViewStmtProto& resolved_alter_view_stmt_node() const;
  ::zetasql::ResolvedAlterViewStmtProto* release_resolved_alter_view_stmt_node();
  ::zetasql::ResolvedAlterViewStmtProto* mutable_resolved_alter_view_stmt_node();
  void set_allocated_resolved_alter_view_stmt_node(::zetasql::ResolvedAlterViewStmtProto* resolved_alter_view_stmt_node);

  // optional .zetasql.ResolvedAlterMaterializedViewStmtProto resolved_alter_materialized_view_stmt_node = 127;
  bool has_resolved_alter_materialized_view_stmt_node() const;
  void clear_resolved_alter_materialized_view_stmt_node();
  static const int kResolvedAlterMaterializedViewStmtNodeFieldNumber = 127;
  private:
  const ::zetasql::ResolvedAlterMaterializedViewStmtProto& _internal_resolved_alter_materialized_view_stmt_node() const;
  public:
  const ::zetasql::ResolvedAlterMaterializedViewStmtProto& resolved_alter_materialized_view_stmt_node() const;
  ::zetasql::ResolvedAlterMaterializedViewStmtProto* release_resolved_alter_materialized_view_stmt_node();
  ::zetasql::ResolvedAlterMaterializedViewStmtProto* mutable_resolved_alter_materialized_view_stmt_node();
  void set_allocated_resolved_alter_materialized_view_stmt_node(::zetasql::ResolvedAlterMaterializedViewStmtProto* resolved_alter_materialized_view_stmt_node);

  // optional .zetasql.ResolvedAlterDatabaseStmtProto resolved_alter_database_stmt_node = 134;
  bool has_resolved_alter_database_stmt_node() const;
  void clear_resolved_alter_database_stmt_node();
  static const int kResolvedAlterDatabaseStmtNodeFieldNumber = 134;
  private:
  const ::zetasql::ResolvedAlterDatabaseStmtProto& _internal_resolved_alter_database_stmt_node() const;
  public:
  const ::zetasql::ResolvedAlterDatabaseStmtProto& resolved_alter_database_stmt_node() const;
  ::zetasql::ResolvedAlterDatabaseStmtProto* release_resolved_alter_database_stmt_node();
  ::zetasql::ResolvedAlterDatabaseStmtProto* mutable_resolved_alter_database_stmt_node();
  void set_allocated_resolved_alter_database_stmt_node(::zetasql::ResolvedAlterDatabaseStmtProto* resolved_alter_database_stmt_node);

  // optional .zetasql.ResolvedAlterAllRowAccessPoliciesStmtProto resolved_alter_all_row_access_policies_stmt_node = 145;
  bool has_resolved_alter_all_row_access_policies_stmt_node() const;
  void clear_resolved_alter_all_row_access_policies_stmt_node();
  static const int kResolvedAlterAllRowAccessPoliciesStmtNodeFieldNumber = 145;
  private:
  const ::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto& _internal_resolved_alter_all_row_access_policies_stmt_node() const;
  public:
  const ::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto& resolved_alter_all_row_access_policies_stmt_node() const;
  ::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto* release_resolved_alter_all_row_access_policies_stmt_node();
  ::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto* mutable_resolved_alter_all_row_access_policies_stmt_node();
  void set_allocated_resolved_alter_all_row_access_policies_stmt_node(::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto* resolved_alter_all_row_access_policies_stmt_node);

  // optional .zetasql.ResolvedAlterEntityStmtProto resolved_alter_entity_stmt_node = 155;
  bool has_resolved_alter_entity_stmt_node() const;
  void clear_resolved_alter_entity_stmt_node();
  static const int kResolvedAlterEntityStmtNodeFieldNumber = 155;
  private:
  const ::zetasql::ResolvedAlterEntityStmtProto& _internal_resolved_alter_entity_stmt_node() const;
  public:
  const ::zetasql::ResolvedAlterEntityStmtProto& resolved_alter_entity_stmt_node() const;
  ::zetasql::ResolvedAlterEntityStmtProto* release_resolved_alter_entity_stmt_node();
  ::zetasql::ResolvedAlterEntityStmtProto* mutable_resolved_alter_entity_stmt_node();
  void set_allocated_resolved_alter_entity_stmt_node(::zetasql::ResolvedAlterEntityStmtProto* resolved_alter_entity_stmt_node);

  // optional .zetasql.ResolvedAlterSchemaStmtProto resolved_alter_schema_stmt_node = 160;
  bool has_resolved_alter_schema_stmt_node() const;
  void clear_resolved_alter_schema_stmt_node();
  static const int kResolvedAlterSchemaStmtNodeFieldNumber = 160;
  private:
  const ::zetasql::ResolvedAlterSchemaStmtProto& _internal_resolved_alter_schema_stmt_node() const;
  public:
  const ::zetasql::ResolvedAlterSchemaStmtProto& resolved_alter_schema_stmt_node() const;
  ::zetasql::ResolvedAlterSchemaStmtProto* release_resolved_alter_schema_stmt_node();
  ::zetasql::ResolvedAlterSchemaStmtProto* mutable_resolved_alter_schema_stmt_node();
  void set_allocated_resolved_alter_schema_stmt_node(::zetasql::ResolvedAlterSchemaStmtProto* resolved_alter_schema_stmt_node);

  // optional .zetasql.ResolvedAlterPrivilegeRestrictionStmtProto resolved_alter_privilege_restriction_stmt_node = 196;
  bool has_resolved_alter_privilege_restriction_stmt_node() const;
  void clear_resolved_alter_privilege_restriction_stmt_node();
  static const int kResolvedAlterPrivilegeRestrictionStmtNodeFieldNumber = 196;
  private:
  const ::zetasql::ResolvedAlterPrivilegeRestrictionStmtProto& _internal_resolved_alter_privilege_restriction_stmt_node() const;
  public:
  const ::zetasql::ResolvedAlterPrivilegeRestrictionStmtProto& resolved_alter_privilege_restriction_stmt_node() const;
  ::zetasql::ResolvedAlterPrivilegeRestrictionStmtProto* release_resolved_alter_privilege_restriction_stmt_node();
  ::zetasql::ResolvedAlterPrivilegeRestrictionStmtProto* mutable_resolved_alter_privilege_restriction_stmt_node();
  void set_allocated_resolved_alter_privilege_restriction_stmt_node(::zetasql::ResolvedAlterPrivilegeRestrictionStmtProto* resolved_alter_privilege_restriction_stmt_node);

  void clear_node();
  NodeCase node_case() const;
  // @@protoc_insertion_point(class_scope:zetasql.AnyResolvedAlterObjectStmtProto)
 private:
  void set_has_resolved_alter_row_access_policy_stmt_node();
  void set_has_resolved_alter_table_stmt_node();
  void set_has_resolved_alter_view_stmt_node();
  void set_has_resolved_alter_materialized_view_stmt_node();
  void set_has_resolved_alter_database_stmt_node();
  void set_has_resolved_alter_all_row_access_policies_stmt_node();
  void set_has_resolved_alter_entity_stmt_node();
  void set_has_resolved_alter_schema_stmt_node();
  void set_has_resolved_alter_privilege_restriction_stmt_node();

  inline bool has_node() const;
  inline void clear_has_node();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union NodeUnion {
    NodeUnion() {}
    ::zetasql::ResolvedAlterRowAccessPolicyStmtProto* resolved_alter_row_access_policy_stmt_node_;
    ::zetasql::ResolvedAlterTableStmtProto* resolved_alter_table_stmt_node_;
    ::zetasql::ResolvedAlterViewStmtProto* resolved_alter_view_stmt_node_;
    ::zetasql::ResolvedAlterMaterializedViewStmtProto* resolved_alter_materialized_view_stmt_node_;
    ::zetasql::ResolvedAlterDatabaseStmtProto* resolved_alter_database_stmt_node_;
    ::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto* resolved_alter_all_row_access_policies_stmt_node_;
    ::zetasql::ResolvedAlterEntityStmtProto* resolved_alter_entity_stmt_node_;
    ::zetasql::ResolvedAlterSchemaStmtProto* resolved_alter_schema_stmt_node_;
    ::zetasql::ResolvedAlterPrivilegeRestrictionStmtProto* resolved_alter_privilege_restriction_stmt_node_;
  } node_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAlterObjectStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAlterObjectStmtProto) */ {
 public:
  ResolvedAlterObjectStmtProto();
  virtual ~ResolvedAlterObjectStmtProto();

  ResolvedAlterObjectStmtProto(const ResolvedAlterObjectStmtProto& from);

  inline ResolvedAlterObjectStmtProto& operator=(const ResolvedAlterObjectStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAlterObjectStmtProto(ResolvedAlterObjectStmtProto&& from) noexcept
    : ResolvedAlterObjectStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAlterObjectStmtProto& operator=(ResolvedAlterObjectStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAlterObjectStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAlterObjectStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAlterObjectStmtProto*>(
               &_ResolvedAlterObjectStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  void Swap(ResolvedAlterObjectStmtProto* other);
  friend void swap(ResolvedAlterObjectStmtProto& a, ResolvedAlterObjectStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAlterObjectStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedAlterObjectStmtProto>(NULL);
  }

  ResolvedAlterObjectStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAlterObjectStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAlterObjectStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name_path = 2;
  int name_path_size() const;
  void clear_name_path();
  static const int kNamePathFieldNumber = 2;
  const ::std::string& name_path(int index) const;
  ::std::string* mutable_name_path(int index);
  void set_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name_path(int index, ::std::string&& value);
  #endif
  void set_name_path(int index, const char* value);
  void set_name_path(int index, const char* value, size_t size);
  ::std::string* add_name_path();
  void add_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_name_path(::std::string&& value);
  #endif
  void add_name_path(const char* value);
  void add_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_path();

  // repeated .zetasql.AnyResolvedAlterActionProto alter_action_list = 3;
  int alter_action_list_size() const;
  void clear_alter_action_list();
  static const int kAlterActionListFieldNumber = 3;
  ::zetasql::AnyResolvedAlterActionProto* mutable_alter_action_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedAlterActionProto >*
      mutable_alter_action_list();
  const ::zetasql::AnyResolvedAlterActionProto& alter_action_list(int index) const;
  ::zetasql::AnyResolvedAlterActionProto* add_alter_action_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedAlterActionProto >&
      alter_action_list() const;

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional bool is_if_exists = 4;
  bool has_is_if_exists() const;
  void clear_is_if_exists();
  static const int kIsIfExistsFieldNumber = 4;
  bool is_if_exists() const;
  void set_is_if_exists(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAlterObjectStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_is_if_exists();
  void clear_has_is_if_exists();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_path_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedAlterActionProto > alter_action_list_;
  ::zetasql::ResolvedStatementProto* parent_;
  bool is_if_exists_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAlterDatabaseStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAlterDatabaseStmtProto) */ {
 public:
  ResolvedAlterDatabaseStmtProto();
  virtual ~ResolvedAlterDatabaseStmtProto();

  ResolvedAlterDatabaseStmtProto(const ResolvedAlterDatabaseStmtProto& from);

  inline ResolvedAlterDatabaseStmtProto& operator=(const ResolvedAlterDatabaseStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAlterDatabaseStmtProto(ResolvedAlterDatabaseStmtProto&& from) noexcept
    : ResolvedAlterDatabaseStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAlterDatabaseStmtProto& operator=(ResolvedAlterDatabaseStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAlterDatabaseStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAlterDatabaseStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAlterDatabaseStmtProto*>(
               &_ResolvedAlterDatabaseStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  void Swap(ResolvedAlterDatabaseStmtProto* other);
  friend void swap(ResolvedAlterDatabaseStmtProto& a, ResolvedAlterDatabaseStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAlterDatabaseStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedAlterDatabaseStmtProto>(NULL);
  }

  ResolvedAlterDatabaseStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAlterDatabaseStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAlterDatabaseStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedAlterObjectStmtProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterObjectStmtProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterObjectStmtProto& parent() const;
  ::zetasql::ResolvedAlterObjectStmtProto* release_parent();
  ::zetasql::ResolvedAlterObjectStmtProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterObjectStmtProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAlterDatabaseStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedAlterObjectStmtProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAlterMaterializedViewStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAlterMaterializedViewStmtProto) */ {
 public:
  ResolvedAlterMaterializedViewStmtProto();
  virtual ~ResolvedAlterMaterializedViewStmtProto();

  ResolvedAlterMaterializedViewStmtProto(const ResolvedAlterMaterializedViewStmtProto& from);

  inline ResolvedAlterMaterializedViewStmtProto& operator=(const ResolvedAlterMaterializedViewStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAlterMaterializedViewStmtProto(ResolvedAlterMaterializedViewStmtProto&& from) noexcept
    : ResolvedAlterMaterializedViewStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAlterMaterializedViewStmtProto& operator=(ResolvedAlterMaterializedViewStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAlterMaterializedViewStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAlterMaterializedViewStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAlterMaterializedViewStmtProto*>(
               &_ResolvedAlterMaterializedViewStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  void Swap(ResolvedAlterMaterializedViewStmtProto* other);
  friend void swap(ResolvedAlterMaterializedViewStmtProto& a, ResolvedAlterMaterializedViewStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAlterMaterializedViewStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedAlterMaterializedViewStmtProto>(NULL);
  }

  ResolvedAlterMaterializedViewStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAlterMaterializedViewStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAlterMaterializedViewStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedAlterObjectStmtProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterObjectStmtProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterObjectStmtProto& parent() const;
  ::zetasql::ResolvedAlterObjectStmtProto* release_parent();
  ::zetasql::ResolvedAlterObjectStmtProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterObjectStmtProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAlterMaterializedViewStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedAlterObjectStmtProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAlterSchemaStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAlterSchemaStmtProto) */ {
 public:
  ResolvedAlterSchemaStmtProto();
  virtual ~ResolvedAlterSchemaStmtProto();

  ResolvedAlterSchemaStmtProto(const ResolvedAlterSchemaStmtProto& from);

  inline ResolvedAlterSchemaStmtProto& operator=(const ResolvedAlterSchemaStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAlterSchemaStmtProto(ResolvedAlterSchemaStmtProto&& from) noexcept
    : ResolvedAlterSchemaStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAlterSchemaStmtProto& operator=(ResolvedAlterSchemaStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAlterSchemaStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAlterSchemaStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAlterSchemaStmtProto*>(
               &_ResolvedAlterSchemaStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  void Swap(ResolvedAlterSchemaStmtProto* other);
  friend void swap(ResolvedAlterSchemaStmtProto& a, ResolvedAlterSchemaStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAlterSchemaStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedAlterSchemaStmtProto>(NULL);
  }

  ResolvedAlterSchemaStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAlterSchemaStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAlterSchemaStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedAlterObjectStmtProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterObjectStmtProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterObjectStmtProto& parent() const;
  ::zetasql::ResolvedAlterObjectStmtProto* release_parent();
  ::zetasql::ResolvedAlterObjectStmtProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterObjectStmtProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAlterSchemaStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedAlterObjectStmtProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAlterTableStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAlterTableStmtProto) */ {
 public:
  ResolvedAlterTableStmtProto();
  virtual ~ResolvedAlterTableStmtProto();

  ResolvedAlterTableStmtProto(const ResolvedAlterTableStmtProto& from);

  inline ResolvedAlterTableStmtProto& operator=(const ResolvedAlterTableStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAlterTableStmtProto(ResolvedAlterTableStmtProto&& from) noexcept
    : ResolvedAlterTableStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAlterTableStmtProto& operator=(ResolvedAlterTableStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAlterTableStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAlterTableStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAlterTableStmtProto*>(
               &_ResolvedAlterTableStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  void Swap(ResolvedAlterTableStmtProto* other);
  friend void swap(ResolvedAlterTableStmtProto& a, ResolvedAlterTableStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAlterTableStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedAlterTableStmtProto>(NULL);
  }

  ResolvedAlterTableStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAlterTableStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAlterTableStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedAlterObjectStmtProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterObjectStmtProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterObjectStmtProto& parent() const;
  ::zetasql::ResolvedAlterObjectStmtProto* release_parent();
  ::zetasql::ResolvedAlterObjectStmtProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterObjectStmtProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAlterTableStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedAlterObjectStmtProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAlterViewStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAlterViewStmtProto) */ {
 public:
  ResolvedAlterViewStmtProto();
  virtual ~ResolvedAlterViewStmtProto();

  ResolvedAlterViewStmtProto(const ResolvedAlterViewStmtProto& from);

  inline ResolvedAlterViewStmtProto& operator=(const ResolvedAlterViewStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAlterViewStmtProto(ResolvedAlterViewStmtProto&& from) noexcept
    : ResolvedAlterViewStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAlterViewStmtProto& operator=(ResolvedAlterViewStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAlterViewStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAlterViewStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAlterViewStmtProto*>(
               &_ResolvedAlterViewStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  void Swap(ResolvedAlterViewStmtProto* other);
  friend void swap(ResolvedAlterViewStmtProto& a, ResolvedAlterViewStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAlterViewStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedAlterViewStmtProto>(NULL);
  }

  ResolvedAlterViewStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAlterViewStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAlterViewStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedAlterObjectStmtProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterObjectStmtProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterObjectStmtProto& parent() const;
  ::zetasql::ResolvedAlterObjectStmtProto* release_parent();
  ::zetasql::ResolvedAlterObjectStmtProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterObjectStmtProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAlterViewStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedAlterObjectStmtProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnyResolvedAlterActionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.AnyResolvedAlterActionProto) */ {
 public:
  AnyResolvedAlterActionProto();
  virtual ~AnyResolvedAlterActionProto();

  AnyResolvedAlterActionProto(const AnyResolvedAlterActionProto& from);

  inline AnyResolvedAlterActionProto& operator=(const AnyResolvedAlterActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnyResolvedAlterActionProto(AnyResolvedAlterActionProto&& from) noexcept
    : AnyResolvedAlterActionProto() {
    *this = ::std::move(from);
  }

  inline AnyResolvedAlterActionProto& operator=(AnyResolvedAlterActionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnyResolvedAlterActionProto& default_instance();

  enum NodeCase {
    kResolvedSetOptionsActionNode = 117,
    kResolvedAddColumnActionNode = 131,
    kResolvedDropColumnActionNode = 132,
    kResolvedGrantToActionNode = 135,
    kResolvedFilterUsingActionNode = 136,
    kResolvedRevokeFromActionNode = 137,
    kResolvedRenameToActionNode = 138,
    kResolvedSetAsActionNode = 156,
    kResolvedAddConstraintActionNode = 163,
    kResolvedDropConstraintActionNode = 164,
    kResolvedDropPrimaryKeyActionNode = 184,
    kResolvedRenameColumnActionNode = 185,
    kResolvedSetCollateClauseNode = 187,
    kResolvedRestrictToActionNode = 193,
    kResolvedAddToRestricteeListActionNode = 194,
    kResolvedRemoveFromRestricteeListActionNode = 195,
    kResolvedAlterColumnActionNode = 201,
    NODE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnyResolvedAlterActionProto* internal_default_instance() {
    return reinterpret_cast<const AnyResolvedAlterActionProto*>(
               &_AnyResolvedAlterActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  void Swap(AnyResolvedAlterActionProto* other);
  friend void swap(AnyResolvedAlterActionProto& a, AnyResolvedAlterActionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnyResolvedAlterActionProto* New() const final {
    return CreateMaybeMessage<AnyResolvedAlterActionProto>(NULL);
  }

  AnyResolvedAlterActionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnyResolvedAlterActionProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyResolvedAlterActionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedSetOptionsActionProto resolved_set_options_action_node = 117;
  bool has_resolved_set_options_action_node() const;
  void clear_resolved_set_options_action_node();
  static const int kResolvedSetOptionsActionNodeFieldNumber = 117;
  private:
  const ::zetasql::ResolvedSetOptionsActionProto& _internal_resolved_set_options_action_node() const;
  public:
  const ::zetasql::ResolvedSetOptionsActionProto& resolved_set_options_action_node() const;
  ::zetasql::ResolvedSetOptionsActionProto* release_resolved_set_options_action_node();
  ::zetasql::ResolvedSetOptionsActionProto* mutable_resolved_set_options_action_node();
  void set_allocated_resolved_set_options_action_node(::zetasql::ResolvedSetOptionsActionProto* resolved_set_options_action_node);

  // optional .zetasql.ResolvedAddColumnActionProto resolved_add_column_action_node = 131;
  bool has_resolved_add_column_action_node() const;
  void clear_resolved_add_column_action_node();
  static const int kResolvedAddColumnActionNodeFieldNumber = 131;
  private:
  const ::zetasql::ResolvedAddColumnActionProto& _internal_resolved_add_column_action_node() const;
  public:
  const ::zetasql::ResolvedAddColumnActionProto& resolved_add_column_action_node() const;
  ::zetasql::ResolvedAddColumnActionProto* release_resolved_add_column_action_node();
  ::zetasql::ResolvedAddColumnActionProto* mutable_resolved_add_column_action_node();
  void set_allocated_resolved_add_column_action_node(::zetasql::ResolvedAddColumnActionProto* resolved_add_column_action_node);

  // optional .zetasql.ResolvedDropColumnActionProto resolved_drop_column_action_node = 132;
  bool has_resolved_drop_column_action_node() const;
  void clear_resolved_drop_column_action_node();
  static const int kResolvedDropColumnActionNodeFieldNumber = 132;
  private:
  const ::zetasql::ResolvedDropColumnActionProto& _internal_resolved_drop_column_action_node() const;
  public:
  const ::zetasql::ResolvedDropColumnActionProto& resolved_drop_column_action_node() const;
  ::zetasql::ResolvedDropColumnActionProto* release_resolved_drop_column_action_node();
  ::zetasql::ResolvedDropColumnActionProto* mutable_resolved_drop_column_action_node();
  void set_allocated_resolved_drop_column_action_node(::zetasql::ResolvedDropColumnActionProto* resolved_drop_column_action_node);

  // optional .zetasql.ResolvedGrantToActionProto resolved_grant_to_action_node = 135;
  bool has_resolved_grant_to_action_node() const;
  void clear_resolved_grant_to_action_node();
  static const int kResolvedGrantToActionNodeFieldNumber = 135;
  private:
  const ::zetasql::ResolvedGrantToActionProto& _internal_resolved_grant_to_action_node() const;
  public:
  const ::zetasql::ResolvedGrantToActionProto& resolved_grant_to_action_node() const;
  ::zetasql::ResolvedGrantToActionProto* release_resolved_grant_to_action_node();
  ::zetasql::ResolvedGrantToActionProto* mutable_resolved_grant_to_action_node();
  void set_allocated_resolved_grant_to_action_node(::zetasql::ResolvedGrantToActionProto* resolved_grant_to_action_node);

  // optional .zetasql.ResolvedFilterUsingActionProto resolved_filter_using_action_node = 136;
  bool has_resolved_filter_using_action_node() const;
  void clear_resolved_filter_using_action_node();
  static const int kResolvedFilterUsingActionNodeFieldNumber = 136;
  private:
  const ::zetasql::ResolvedFilterUsingActionProto& _internal_resolved_filter_using_action_node() const;
  public:
  const ::zetasql::ResolvedFilterUsingActionProto& resolved_filter_using_action_node() const;
  ::zetasql::ResolvedFilterUsingActionProto* release_resolved_filter_using_action_node();
  ::zetasql::ResolvedFilterUsingActionProto* mutable_resolved_filter_using_action_node();
  void set_allocated_resolved_filter_using_action_node(::zetasql::ResolvedFilterUsingActionProto* resolved_filter_using_action_node);

  // optional .zetasql.ResolvedRevokeFromActionProto resolved_revoke_from_action_node = 137;
  bool has_resolved_revoke_from_action_node() const;
  void clear_resolved_revoke_from_action_node();
  static const int kResolvedRevokeFromActionNodeFieldNumber = 137;
  private:
  const ::zetasql::ResolvedRevokeFromActionProto& _internal_resolved_revoke_from_action_node() const;
  public:
  const ::zetasql::ResolvedRevokeFromActionProto& resolved_revoke_from_action_node() const;
  ::zetasql::ResolvedRevokeFromActionProto* release_resolved_revoke_from_action_node();
  ::zetasql::ResolvedRevokeFromActionProto* mutable_resolved_revoke_from_action_node();
  void set_allocated_resolved_revoke_from_action_node(::zetasql::ResolvedRevokeFromActionProto* resolved_revoke_from_action_node);

  // optional .zetasql.ResolvedRenameToActionProto resolved_rename_to_action_node = 138;
  bool has_resolved_rename_to_action_node() const;
  void clear_resolved_rename_to_action_node();
  static const int kResolvedRenameToActionNodeFieldNumber = 138;
  private:
  const ::zetasql::ResolvedRenameToActionProto& _internal_resolved_rename_to_action_node() const;
  public:
  const ::zetasql::ResolvedRenameToActionProto& resolved_rename_to_action_node() const;
  ::zetasql::ResolvedRenameToActionProto* release_resolved_rename_to_action_node();
  ::zetasql::ResolvedRenameToActionProto* mutable_resolved_rename_to_action_node();
  void set_allocated_resolved_rename_to_action_node(::zetasql::ResolvedRenameToActionProto* resolved_rename_to_action_node);

  // optional .zetasql.ResolvedSetAsActionProto resolved_set_as_action_node = 156;
  bool has_resolved_set_as_action_node() const;
  void clear_resolved_set_as_action_node();
  static const int kResolvedSetAsActionNodeFieldNumber = 156;
  private:
  const ::zetasql::ResolvedSetAsActionProto& _internal_resolved_set_as_action_node() const;
  public:
  const ::zetasql::ResolvedSetAsActionProto& resolved_set_as_action_node() const;
  ::zetasql::ResolvedSetAsActionProto* release_resolved_set_as_action_node();
  ::zetasql::ResolvedSetAsActionProto* mutable_resolved_set_as_action_node();
  void set_allocated_resolved_set_as_action_node(::zetasql::ResolvedSetAsActionProto* resolved_set_as_action_node);

  // optional .zetasql.ResolvedAddConstraintActionProto resolved_add_constraint_action_node = 163;
  bool has_resolved_add_constraint_action_node() const;
  void clear_resolved_add_constraint_action_node();
  static const int kResolvedAddConstraintActionNodeFieldNumber = 163;
  private:
  const ::zetasql::ResolvedAddConstraintActionProto& _internal_resolved_add_constraint_action_node() const;
  public:
  const ::zetasql::ResolvedAddConstraintActionProto& resolved_add_constraint_action_node() const;
  ::zetasql::ResolvedAddConstraintActionProto* release_resolved_add_constraint_action_node();
  ::zetasql::ResolvedAddConstraintActionProto* mutable_resolved_add_constraint_action_node();
  void set_allocated_resolved_add_constraint_action_node(::zetasql::ResolvedAddConstraintActionProto* resolved_add_constraint_action_node);

  // optional .zetasql.ResolvedDropConstraintActionProto resolved_drop_constraint_action_node = 164;
  bool has_resolved_drop_constraint_action_node() const;
  void clear_resolved_drop_constraint_action_node();
  static const int kResolvedDropConstraintActionNodeFieldNumber = 164;
  private:
  const ::zetasql::ResolvedDropConstraintActionProto& _internal_resolved_drop_constraint_action_node() const;
  public:
  const ::zetasql::ResolvedDropConstraintActionProto& resolved_drop_constraint_action_node() const;
  ::zetasql::ResolvedDropConstraintActionProto* release_resolved_drop_constraint_action_node();
  ::zetasql::ResolvedDropConstraintActionProto* mutable_resolved_drop_constraint_action_node();
  void set_allocated_resolved_drop_constraint_action_node(::zetasql::ResolvedDropConstraintActionProto* resolved_drop_constraint_action_node);

  // optional .zetasql.ResolvedDropPrimaryKeyActionProto resolved_drop_primary_key_action_node = 184;
  bool has_resolved_drop_primary_key_action_node() const;
  void clear_resolved_drop_primary_key_action_node();
  static const int kResolvedDropPrimaryKeyActionNodeFieldNumber = 184;
  private:
  const ::zetasql::ResolvedDropPrimaryKeyActionProto& _internal_resolved_drop_primary_key_action_node() const;
  public:
  const ::zetasql::ResolvedDropPrimaryKeyActionProto& resolved_drop_primary_key_action_node() const;
  ::zetasql::ResolvedDropPrimaryKeyActionProto* release_resolved_drop_primary_key_action_node();
  ::zetasql::ResolvedDropPrimaryKeyActionProto* mutable_resolved_drop_primary_key_action_node();
  void set_allocated_resolved_drop_primary_key_action_node(::zetasql::ResolvedDropPrimaryKeyActionProto* resolved_drop_primary_key_action_node);

  // optional .zetasql.ResolvedRenameColumnActionProto resolved_rename_column_action_node = 185;
  bool has_resolved_rename_column_action_node() const;
  void clear_resolved_rename_column_action_node();
  static const int kResolvedRenameColumnActionNodeFieldNumber = 185;
  private:
  const ::zetasql::ResolvedRenameColumnActionProto& _internal_resolved_rename_column_action_node() const;
  public:
  const ::zetasql::ResolvedRenameColumnActionProto& resolved_rename_column_action_node() const;
  ::zetasql::ResolvedRenameColumnActionProto* release_resolved_rename_column_action_node();
  ::zetasql::ResolvedRenameColumnActionProto* mutable_resolved_rename_column_action_node();
  void set_allocated_resolved_rename_column_action_node(::zetasql::ResolvedRenameColumnActionProto* resolved_rename_column_action_node);

  // optional .zetasql.ResolvedSetCollateClauseProto resolved_set_collate_clause_node = 187;
  bool has_resolved_set_collate_clause_node() const;
  void clear_resolved_set_collate_clause_node();
  static const int kResolvedSetCollateClauseNodeFieldNumber = 187;
  private:
  const ::zetasql::ResolvedSetCollateClauseProto& _internal_resolved_set_collate_clause_node() const;
  public:
  const ::zetasql::ResolvedSetCollateClauseProto& resolved_set_collate_clause_node() const;
  ::zetasql::ResolvedSetCollateClauseProto* release_resolved_set_collate_clause_node();
  ::zetasql::ResolvedSetCollateClauseProto* mutable_resolved_set_collate_clause_node();
  void set_allocated_resolved_set_collate_clause_node(::zetasql::ResolvedSetCollateClauseProto* resolved_set_collate_clause_node);

  // optional .zetasql.ResolvedRestrictToActionProto resolved_restrict_to_action_node = 193;
  bool has_resolved_restrict_to_action_node() const;
  void clear_resolved_restrict_to_action_node();
  static const int kResolvedRestrictToActionNodeFieldNumber = 193;
  private:
  const ::zetasql::ResolvedRestrictToActionProto& _internal_resolved_restrict_to_action_node() const;
  public:
  const ::zetasql::ResolvedRestrictToActionProto& resolved_restrict_to_action_node() const;
  ::zetasql::ResolvedRestrictToActionProto* release_resolved_restrict_to_action_node();
  ::zetasql::ResolvedRestrictToActionProto* mutable_resolved_restrict_to_action_node();
  void set_allocated_resolved_restrict_to_action_node(::zetasql::ResolvedRestrictToActionProto* resolved_restrict_to_action_node);

  // optional .zetasql.ResolvedAddToRestricteeListActionProto resolved_add_to_restrictee_list_action_node = 194;
  bool has_resolved_add_to_restrictee_list_action_node() const;
  void clear_resolved_add_to_restrictee_list_action_node();
  static const int kResolvedAddToRestricteeListActionNodeFieldNumber = 194;
  private:
  const ::zetasql::ResolvedAddToRestricteeListActionProto& _internal_resolved_add_to_restrictee_list_action_node() const;
  public:
  const ::zetasql::ResolvedAddToRestricteeListActionProto& resolved_add_to_restrictee_list_action_node() const;
  ::zetasql::ResolvedAddToRestricteeListActionProto* release_resolved_add_to_restrictee_list_action_node();
  ::zetasql::ResolvedAddToRestricteeListActionProto* mutable_resolved_add_to_restrictee_list_action_node();
  void set_allocated_resolved_add_to_restrictee_list_action_node(::zetasql::ResolvedAddToRestricteeListActionProto* resolved_add_to_restrictee_list_action_node);

  // optional .zetasql.ResolvedRemoveFromRestricteeListActionProto resolved_remove_from_restrictee_list_action_node = 195;
  bool has_resolved_remove_from_restrictee_list_action_node() const;
  void clear_resolved_remove_from_restrictee_list_action_node();
  static const int kResolvedRemoveFromRestricteeListActionNodeFieldNumber = 195;
  private:
  const ::zetasql::ResolvedRemoveFromRestricteeListActionProto& _internal_resolved_remove_from_restrictee_list_action_node() const;
  public:
  const ::zetasql::ResolvedRemoveFromRestricteeListActionProto& resolved_remove_from_restrictee_list_action_node() const;
  ::zetasql::ResolvedRemoveFromRestricteeListActionProto* release_resolved_remove_from_restrictee_list_action_node();
  ::zetasql::ResolvedRemoveFromRestricteeListActionProto* mutable_resolved_remove_from_restrictee_list_action_node();
  void set_allocated_resolved_remove_from_restrictee_list_action_node(::zetasql::ResolvedRemoveFromRestricteeListActionProto* resolved_remove_from_restrictee_list_action_node);

  // optional .zetasql.AnyResolvedAlterColumnActionProto resolved_alter_column_action_node = 201;
  bool has_resolved_alter_column_action_node() const;
  void clear_resolved_alter_column_action_node();
  static const int kResolvedAlterColumnActionNodeFieldNumber = 201;
  private:
  const ::zetasql::AnyResolvedAlterColumnActionProto& _internal_resolved_alter_column_action_node() const;
  public:
  const ::zetasql::AnyResolvedAlterColumnActionProto& resolved_alter_column_action_node() const;
  ::zetasql::AnyResolvedAlterColumnActionProto* release_resolved_alter_column_action_node();
  ::zetasql::AnyResolvedAlterColumnActionProto* mutable_resolved_alter_column_action_node();
  void set_allocated_resolved_alter_column_action_node(::zetasql::AnyResolvedAlterColumnActionProto* resolved_alter_column_action_node);

  void clear_node();
  NodeCase node_case() const;
  // @@protoc_insertion_point(class_scope:zetasql.AnyResolvedAlterActionProto)
 private:
  void set_has_resolved_set_options_action_node();
  void set_has_resolved_add_column_action_node();
  void set_has_resolved_drop_column_action_node();
  void set_has_resolved_grant_to_action_node();
  void set_has_resolved_filter_using_action_node();
  void set_has_resolved_revoke_from_action_node();
  void set_has_resolved_rename_to_action_node();
  void set_has_resolved_set_as_action_node();
  void set_has_resolved_add_constraint_action_node();
  void set_has_resolved_drop_constraint_action_node();
  void set_has_resolved_drop_primary_key_action_node();
  void set_has_resolved_rename_column_action_node();
  void set_has_resolved_set_collate_clause_node();
  void set_has_resolved_restrict_to_action_node();
  void set_has_resolved_add_to_restrictee_list_action_node();
  void set_has_resolved_remove_from_restrictee_list_action_node();
  void set_has_resolved_alter_column_action_node();

  inline bool has_node() const;
  inline void clear_has_node();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union NodeUnion {
    NodeUnion() {}
    ::zetasql::ResolvedSetOptionsActionProto* resolved_set_options_action_node_;
    ::zetasql::ResolvedAddColumnActionProto* resolved_add_column_action_node_;
    ::zetasql::ResolvedDropColumnActionProto* resolved_drop_column_action_node_;
    ::zetasql::ResolvedGrantToActionProto* resolved_grant_to_action_node_;
    ::zetasql::ResolvedFilterUsingActionProto* resolved_filter_using_action_node_;
    ::zetasql::ResolvedRevokeFromActionProto* resolved_revoke_from_action_node_;
    ::zetasql::ResolvedRenameToActionProto* resolved_rename_to_action_node_;
    ::zetasql::ResolvedSetAsActionProto* resolved_set_as_action_node_;
    ::zetasql::ResolvedAddConstraintActionProto* resolved_add_constraint_action_node_;
    ::zetasql::ResolvedDropConstraintActionProto* resolved_drop_constraint_action_node_;
    ::zetasql::ResolvedDropPrimaryKeyActionProto* resolved_drop_primary_key_action_node_;
    ::zetasql::ResolvedRenameColumnActionProto* resolved_rename_column_action_node_;
    ::zetasql::ResolvedSetCollateClauseProto* resolved_set_collate_clause_node_;
    ::zetasql::ResolvedRestrictToActionProto* resolved_restrict_to_action_node_;
    ::zetasql::ResolvedAddToRestricteeListActionProto* resolved_add_to_restrictee_list_action_node_;
    ::zetasql::ResolvedRemoveFromRestricteeListActionProto* resolved_remove_from_restrictee_list_action_node_;
    ::zetasql::AnyResolvedAlterColumnActionProto* resolved_alter_column_action_node_;
  } node_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAlterActionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAlterActionProto) */ {
 public:
  ResolvedAlterActionProto();
  virtual ~ResolvedAlterActionProto();

  ResolvedAlterActionProto(const ResolvedAlterActionProto& from);

  inline ResolvedAlterActionProto& operator=(const ResolvedAlterActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAlterActionProto(ResolvedAlterActionProto&& from) noexcept
    : ResolvedAlterActionProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAlterActionProto& operator=(ResolvedAlterActionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAlterActionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAlterActionProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAlterActionProto*>(
               &_ResolvedAlterActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    149;

  void Swap(ResolvedAlterActionProto* other);
  friend void swap(ResolvedAlterActionProto& a, ResolvedAlterActionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAlterActionProto* New() const final {
    return CreateMaybeMessage<ResolvedAlterActionProto>(NULL);
  }

  ResolvedAlterActionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAlterActionProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAlterActionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAlterActionProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedArgumentProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnyResolvedAlterColumnActionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.AnyResolvedAlterColumnActionProto) */ {
 public:
  AnyResolvedAlterColumnActionProto();
  virtual ~AnyResolvedAlterColumnActionProto();

  AnyResolvedAlterColumnActionProto(const AnyResolvedAlterColumnActionProto& from);

  inline AnyResolvedAlterColumnActionProto& operator=(const AnyResolvedAlterColumnActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnyResolvedAlterColumnActionProto(AnyResolvedAlterColumnActionProto&& from) noexcept
    : AnyResolvedAlterColumnActionProto() {
    *this = ::std::move(from);
  }

  inline AnyResolvedAlterColumnActionProto& operator=(AnyResolvedAlterColumnActionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnyResolvedAlterColumnActionProto& default_instance();

  enum NodeCase {
    kResolvedAlterColumnOptionsActionNode = 169,
    kResolvedAlterColumnDropNotNullActionNode = 178,
    kResolvedAlterColumnSetDataTypeActionNode = 181,
    kResolvedAlterColumnSetDefaultActionNode = 198,
    kResolvedAlterColumnDropDefaultActionNode = 199,
    NODE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnyResolvedAlterColumnActionProto* internal_default_instance() {
    return reinterpret_cast<const AnyResolvedAlterColumnActionProto*>(
               &_AnyResolvedAlterColumnActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  void Swap(AnyResolvedAlterColumnActionProto* other);
  friend void swap(AnyResolvedAlterColumnActionProto& a, AnyResolvedAlterColumnActionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnyResolvedAlterColumnActionProto* New() const final {
    return CreateMaybeMessage<AnyResolvedAlterColumnActionProto>(NULL);
  }

  AnyResolvedAlterColumnActionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnyResolvedAlterColumnActionProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyResolvedAlterColumnActionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedAlterColumnOptionsActionProto resolved_alter_column_options_action_node = 169;
  bool has_resolved_alter_column_options_action_node() const;
  void clear_resolved_alter_column_options_action_node();
  static const int kResolvedAlterColumnOptionsActionNodeFieldNumber = 169;
  private:
  const ::zetasql::ResolvedAlterColumnOptionsActionProto& _internal_resolved_alter_column_options_action_node() const;
  public:
  const ::zetasql::ResolvedAlterColumnOptionsActionProto& resolved_alter_column_options_action_node() const;
  ::zetasql::ResolvedAlterColumnOptionsActionProto* release_resolved_alter_column_options_action_node();
  ::zetasql::ResolvedAlterColumnOptionsActionProto* mutable_resolved_alter_column_options_action_node();
  void set_allocated_resolved_alter_column_options_action_node(::zetasql::ResolvedAlterColumnOptionsActionProto* resolved_alter_column_options_action_node);

  // optional .zetasql.ResolvedAlterColumnDropNotNullActionProto resolved_alter_column_drop_not_null_action_node = 178;
  bool has_resolved_alter_column_drop_not_null_action_node() const;
  void clear_resolved_alter_column_drop_not_null_action_node();
  static const int kResolvedAlterColumnDropNotNullActionNodeFieldNumber = 178;
  private:
  const ::zetasql::ResolvedAlterColumnDropNotNullActionProto& _internal_resolved_alter_column_drop_not_null_action_node() const;
  public:
  const ::zetasql::ResolvedAlterColumnDropNotNullActionProto& resolved_alter_column_drop_not_null_action_node() const;
  ::zetasql::ResolvedAlterColumnDropNotNullActionProto* release_resolved_alter_column_drop_not_null_action_node();
  ::zetasql::ResolvedAlterColumnDropNotNullActionProto* mutable_resolved_alter_column_drop_not_null_action_node();
  void set_allocated_resolved_alter_column_drop_not_null_action_node(::zetasql::ResolvedAlterColumnDropNotNullActionProto* resolved_alter_column_drop_not_null_action_node);

  // optional .zetasql.ResolvedAlterColumnSetDataTypeActionProto resolved_alter_column_set_data_type_action_node = 181;
  bool has_resolved_alter_column_set_data_type_action_node() const;
  void clear_resolved_alter_column_set_data_type_action_node();
  static const int kResolvedAlterColumnSetDataTypeActionNodeFieldNumber = 181;
  private:
  const ::zetasql::ResolvedAlterColumnSetDataTypeActionProto& _internal_resolved_alter_column_set_data_type_action_node() const;
  public:
  const ::zetasql::ResolvedAlterColumnSetDataTypeActionProto& resolved_alter_column_set_data_type_action_node() const;
  ::zetasql::ResolvedAlterColumnSetDataTypeActionProto* release_resolved_alter_column_set_data_type_action_node();
  ::zetasql::ResolvedAlterColumnSetDataTypeActionProto* mutable_resolved_alter_column_set_data_type_action_node();
  void set_allocated_resolved_alter_column_set_data_type_action_node(::zetasql::ResolvedAlterColumnSetDataTypeActionProto* resolved_alter_column_set_data_type_action_node);

  // optional .zetasql.ResolvedAlterColumnSetDefaultActionProto resolved_alter_column_set_default_action_node = 198;
  bool has_resolved_alter_column_set_default_action_node() const;
  void clear_resolved_alter_column_set_default_action_node();
  static const int kResolvedAlterColumnSetDefaultActionNodeFieldNumber = 198;
  private:
  const ::zetasql::ResolvedAlterColumnSetDefaultActionProto& _internal_resolved_alter_column_set_default_action_node() const;
  public:
  const ::zetasql::ResolvedAlterColumnSetDefaultActionProto& resolved_alter_column_set_default_action_node() const;
  ::zetasql::ResolvedAlterColumnSetDefaultActionProto* release_resolved_alter_column_set_default_action_node();
  ::zetasql::ResolvedAlterColumnSetDefaultActionProto* mutable_resolved_alter_column_set_default_action_node();
  void set_allocated_resolved_alter_column_set_default_action_node(::zetasql::ResolvedAlterColumnSetDefaultActionProto* resolved_alter_column_set_default_action_node);

  // optional .zetasql.ResolvedAlterColumnDropDefaultActionProto resolved_alter_column_drop_default_action_node = 199;
  bool has_resolved_alter_column_drop_default_action_node() const;
  void clear_resolved_alter_column_drop_default_action_node();
  static const int kResolvedAlterColumnDropDefaultActionNodeFieldNumber = 199;
  private:
  const ::zetasql::ResolvedAlterColumnDropDefaultActionProto& _internal_resolved_alter_column_drop_default_action_node() const;
  public:
  const ::zetasql::ResolvedAlterColumnDropDefaultActionProto& resolved_alter_column_drop_default_action_node() const;
  ::zetasql::ResolvedAlterColumnDropDefaultActionProto* release_resolved_alter_column_drop_default_action_node();
  ::zetasql::ResolvedAlterColumnDropDefaultActionProto* mutable_resolved_alter_column_drop_default_action_node();
  void set_allocated_resolved_alter_column_drop_default_action_node(::zetasql::ResolvedAlterColumnDropDefaultActionProto* resolved_alter_column_drop_default_action_node);

  void clear_node();
  NodeCase node_case() const;
  // @@protoc_insertion_point(class_scope:zetasql.AnyResolvedAlterColumnActionProto)
 private:
  void set_has_resolved_alter_column_options_action_node();
  void set_has_resolved_alter_column_drop_not_null_action_node();
  void set_has_resolved_alter_column_set_data_type_action_node();
  void set_has_resolved_alter_column_set_default_action_node();
  void set_has_resolved_alter_column_drop_default_action_node();

  inline bool has_node() const;
  inline void clear_has_node();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union NodeUnion {
    NodeUnion() {}
    ::zetasql::ResolvedAlterColumnOptionsActionProto* resolved_alter_column_options_action_node_;
    ::zetasql::ResolvedAlterColumnDropNotNullActionProto* resolved_alter_column_drop_not_null_action_node_;
    ::zetasql::ResolvedAlterColumnSetDataTypeActionProto* resolved_alter_column_set_data_type_action_node_;
    ::zetasql::ResolvedAlterColumnSetDefaultActionProto* resolved_alter_column_set_default_action_node_;
    ::zetasql::ResolvedAlterColumnDropDefaultActionProto* resolved_alter_column_drop_default_action_node_;
  } node_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAlterColumnActionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAlterColumnActionProto) */ {
 public:
  ResolvedAlterColumnActionProto();
  virtual ~ResolvedAlterColumnActionProto();

  ResolvedAlterColumnActionProto(const ResolvedAlterColumnActionProto& from);

  inline ResolvedAlterColumnActionProto& operator=(const ResolvedAlterColumnActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAlterColumnActionProto(ResolvedAlterColumnActionProto&& from) noexcept
    : ResolvedAlterColumnActionProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAlterColumnActionProto& operator=(ResolvedAlterColumnActionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAlterColumnActionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAlterColumnActionProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAlterColumnActionProto*>(
               &_ResolvedAlterColumnActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    151;

  void Swap(ResolvedAlterColumnActionProto* other);
  friend void swap(ResolvedAlterColumnActionProto& a, ResolvedAlterColumnActionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAlterColumnActionProto* New() const final {
    return CreateMaybeMessage<ResolvedAlterColumnActionProto>(NULL);
  }

  ResolvedAlterColumnActionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAlterColumnActionProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAlterColumnActionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string column = 3;
  bool has_column() const;
  void clear_column();
  static const int kColumnFieldNumber = 3;
  const ::std::string& column() const;
  void set_column(const ::std::string& value);
  #if LANG_CXX11
  void set_column(::std::string&& value);
  #endif
  void set_column(const char* value);
  void set_column(const char* value, size_t size);
  ::std::string* mutable_column();
  ::std::string* release_column();
  void set_allocated_column(::std::string* column);

  // optional .zetasql.ResolvedAlterActionProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterActionProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterActionProto& parent() const;
  ::zetasql::ResolvedAlterActionProto* release_parent();
  ::zetasql::ResolvedAlterActionProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent);

  // optional bool is_if_exists = 2;
  bool has_is_if_exists() const;
  void clear_is_if_exists();
  static const int kIsIfExistsFieldNumber = 2;
  bool is_if_exists() const;
  void set_is_if_exists(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAlterColumnActionProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_is_if_exists();
  void clear_has_is_if_exists();
  void set_has_column();
  void clear_has_column();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr column_;
  ::zetasql::ResolvedAlterActionProto* parent_;
  bool is_if_exists_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedSetOptionsActionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedSetOptionsActionProto) */ {
 public:
  ResolvedSetOptionsActionProto();
  virtual ~ResolvedSetOptionsActionProto();

  ResolvedSetOptionsActionProto(const ResolvedSetOptionsActionProto& from);

  inline ResolvedSetOptionsActionProto& operator=(const ResolvedSetOptionsActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedSetOptionsActionProto(ResolvedSetOptionsActionProto&& from) noexcept
    : ResolvedSetOptionsActionProto() {
    *this = ::std::move(from);
  }

  inline ResolvedSetOptionsActionProto& operator=(ResolvedSetOptionsActionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedSetOptionsActionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedSetOptionsActionProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedSetOptionsActionProto*>(
               &_ResolvedSetOptionsActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    152;

  void Swap(ResolvedSetOptionsActionProto* other);
  friend void swap(ResolvedSetOptionsActionProto& a, ResolvedSetOptionsActionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedSetOptionsActionProto* New() const final {
    return CreateMaybeMessage<ResolvedSetOptionsActionProto>(NULL);
  }

  ResolvedSetOptionsActionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedSetOptionsActionProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedSetOptionsActionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedOptionProto option_list = 2;
  int option_list_size() const;
  void clear_option_list();
  static const int kOptionListFieldNumber = 2;
  ::zetasql::ResolvedOptionProto* mutable_option_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_option_list();
  const ::zetasql::ResolvedOptionProto& option_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_option_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      option_list() const;

  // optional .zetasql.ResolvedAlterActionProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterActionProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterActionProto& parent() const;
  ::zetasql::ResolvedAlterActionProto* release_parent();
  ::zetasql::ResolvedAlterActionProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedSetOptionsActionProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > option_list_;
  ::zetasql::ResolvedAlterActionProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAddColumnActionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAddColumnActionProto) */ {
 public:
  ResolvedAddColumnActionProto();
  virtual ~ResolvedAddColumnActionProto();

  ResolvedAddColumnActionProto(const ResolvedAddColumnActionProto& from);

  inline ResolvedAddColumnActionProto& operator=(const ResolvedAddColumnActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAddColumnActionProto(ResolvedAddColumnActionProto&& from) noexcept
    : ResolvedAddColumnActionProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAddColumnActionProto& operator=(ResolvedAddColumnActionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAddColumnActionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAddColumnActionProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAddColumnActionProto*>(
               &_ResolvedAddColumnActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    153;

  void Swap(ResolvedAddColumnActionProto* other);
  friend void swap(ResolvedAddColumnActionProto& a, ResolvedAddColumnActionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAddColumnActionProto* New() const final {
    return CreateMaybeMessage<ResolvedAddColumnActionProto>(NULL);
  }

  ResolvedAddColumnActionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAddColumnActionProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAddColumnActionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedAlterActionProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterActionProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterActionProto& parent() const;
  ::zetasql::ResolvedAlterActionProto* release_parent();
  ::zetasql::ResolvedAlterActionProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent);

  // optional .zetasql.ResolvedColumnDefinitionProto column_definition = 3;
  bool has_column_definition() const;
  void clear_column_definition();
  static const int kColumnDefinitionFieldNumber = 3;
  private:
  const ::zetasql::ResolvedColumnDefinitionProto& _internal_column_definition() const;
  public:
  const ::zetasql::ResolvedColumnDefinitionProto& column_definition() const;
  ::zetasql::ResolvedColumnDefinitionProto* release_column_definition();
  ::zetasql::ResolvedColumnDefinitionProto* mutable_column_definition();
  void set_allocated_column_definition(::zetasql::ResolvedColumnDefinitionProto* column_definition);

  // optional bool is_if_not_exists = 2;
  bool has_is_if_not_exists() const;
  void clear_is_if_not_exists();
  static const int kIsIfNotExistsFieldNumber = 2;
  bool is_if_not_exists() const;
  void set_is_if_not_exists(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAddColumnActionProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_is_if_not_exists();
  void clear_has_is_if_not_exists();
  void set_has_column_definition();
  void clear_has_column_definition();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedAlterActionProto* parent_;
  ::zetasql::ResolvedColumnDefinitionProto* column_definition_;
  bool is_if_not_exists_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAddConstraintActionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAddConstraintActionProto) */ {
 public:
  ResolvedAddConstraintActionProto();
  virtual ~ResolvedAddConstraintActionProto();

  ResolvedAddConstraintActionProto(const ResolvedAddConstraintActionProto& from);

  inline ResolvedAddConstraintActionProto& operator=(const ResolvedAddConstraintActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAddConstraintActionProto(ResolvedAddConstraintActionProto&& from) noexcept
    : ResolvedAddConstraintActionProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAddConstraintActionProto& operator=(ResolvedAddConstraintActionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAddConstraintActionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAddConstraintActionProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAddConstraintActionProto*>(
               &_ResolvedAddConstraintActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    154;

  void Swap(ResolvedAddConstraintActionProto* other);
  friend void swap(ResolvedAddConstraintActionProto& a, ResolvedAddConstraintActionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAddConstraintActionProto* New() const final {
    return CreateMaybeMessage<ResolvedAddConstraintActionProto>(NULL);
  }

  ResolvedAddConstraintActionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAddConstraintActionProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAddConstraintActionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedAlterActionProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterActionProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterActionProto& parent() const;
  ::zetasql::ResolvedAlterActionProto* release_parent();
  ::zetasql::ResolvedAlterActionProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent);

  // optional .zetasql.AnyResolvedConstraintProto constraint = 3;
  bool has_constraint() const;
  void clear_constraint();
  static const int kConstraintFieldNumber = 3;
  private:
  const ::zetasql::AnyResolvedConstraintProto& _internal_constraint() const;
  public:
  const ::zetasql::AnyResolvedConstraintProto& constraint() const;
  ::zetasql::AnyResolvedConstraintProto* release_constraint();
  ::zetasql::AnyResolvedConstraintProto* mutable_constraint();
  void set_allocated_constraint(::zetasql::AnyResolvedConstraintProto* constraint);

  // optional .zetasql.TableRefProto table = 4;
  bool has_table() const;
  void clear_table();
  static const int kTableFieldNumber = 4;
  private:
  const ::zetasql::TableRefProto& _internal_table() const;
  public:
  const ::zetasql::TableRefProto& table() const;
  ::zetasql::TableRefProto* release_table();
  ::zetasql::TableRefProto* mutable_table();
  void set_allocated_table(::zetasql::TableRefProto* table);

  // optional bool is_if_not_exists = 2;
  bool has_is_if_not_exists() const;
  void clear_is_if_not_exists();
  static const int kIsIfNotExistsFieldNumber = 2;
  bool is_if_not_exists() const;
  void set_is_if_not_exists(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAddConstraintActionProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_is_if_not_exists();
  void clear_has_is_if_not_exists();
  void set_has_constraint();
  void clear_has_constraint();
  void set_has_table();
  void clear_has_table();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedAlterActionProto* parent_;
  ::zetasql::AnyResolvedConstraintProto* constraint_;
  ::zetasql::TableRefProto* table_;
  bool is_if_not_exists_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedDropConstraintActionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedDropConstraintActionProto) */ {
 public:
  ResolvedDropConstraintActionProto();
  virtual ~ResolvedDropConstraintActionProto();

  ResolvedDropConstraintActionProto(const ResolvedDropConstraintActionProto& from);

  inline ResolvedDropConstraintActionProto& operator=(const ResolvedDropConstraintActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedDropConstraintActionProto(ResolvedDropConstraintActionProto&& from) noexcept
    : ResolvedDropConstraintActionProto() {
    *this = ::std::move(from);
  }

  inline ResolvedDropConstraintActionProto& operator=(ResolvedDropConstraintActionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedDropConstraintActionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedDropConstraintActionProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedDropConstraintActionProto*>(
               &_ResolvedDropConstraintActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    155;

  void Swap(ResolvedDropConstraintActionProto* other);
  friend void swap(ResolvedDropConstraintActionProto& a, ResolvedDropConstraintActionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedDropConstraintActionProto* New() const final {
    return CreateMaybeMessage<ResolvedDropConstraintActionProto>(NULL);
  }

  ResolvedDropConstraintActionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedDropConstraintActionProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedDropConstraintActionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .zetasql.ResolvedAlterActionProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterActionProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterActionProto& parent() const;
  ::zetasql::ResolvedAlterActionProto* release_parent();
  ::zetasql::ResolvedAlterActionProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent);

  // optional bool is_if_exists = 2;
  bool has_is_if_exists() const;
  void clear_is_if_exists();
  static const int kIsIfExistsFieldNumber = 2;
  bool is_if_exists() const;
  void set_is_if_exists(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedDropConstraintActionProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_is_if_exists();
  void clear_has_is_if_exists();
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::zetasql::ResolvedAlterActionProto* parent_;
  bool is_if_exists_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedDropPrimaryKeyActionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedDropPrimaryKeyActionProto) */ {
 public:
  ResolvedDropPrimaryKeyActionProto();
  virtual ~ResolvedDropPrimaryKeyActionProto();

  ResolvedDropPrimaryKeyActionProto(const ResolvedDropPrimaryKeyActionProto& from);

  inline ResolvedDropPrimaryKeyActionProto& operator=(const ResolvedDropPrimaryKeyActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedDropPrimaryKeyActionProto(ResolvedDropPrimaryKeyActionProto&& from) noexcept
    : ResolvedDropPrimaryKeyActionProto() {
    *this = ::std::move(from);
  }

  inline ResolvedDropPrimaryKeyActionProto& operator=(ResolvedDropPrimaryKeyActionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedDropPrimaryKeyActionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedDropPrimaryKeyActionProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedDropPrimaryKeyActionProto*>(
               &_ResolvedDropPrimaryKeyActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    156;

  void Swap(ResolvedDropPrimaryKeyActionProto* other);
  friend void swap(ResolvedDropPrimaryKeyActionProto& a, ResolvedDropPrimaryKeyActionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedDropPrimaryKeyActionProto* New() const final {
    return CreateMaybeMessage<ResolvedDropPrimaryKeyActionProto>(NULL);
  }

  ResolvedDropPrimaryKeyActionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedDropPrimaryKeyActionProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedDropPrimaryKeyActionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedAlterActionProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterActionProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterActionProto& parent() const;
  ::zetasql::ResolvedAlterActionProto* release_parent();
  ::zetasql::ResolvedAlterActionProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent);

  // optional bool is_if_exists = 2;
  bool has_is_if_exists() const;
  void clear_is_if_exists();
  static const int kIsIfExistsFieldNumber = 2;
  bool is_if_exists() const;
  void set_is_if_exists(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedDropPrimaryKeyActionProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_is_if_exists();
  void clear_has_is_if_exists();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedAlterActionProto* parent_;
  bool is_if_exists_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAlterColumnOptionsActionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAlterColumnOptionsActionProto) */ {
 public:
  ResolvedAlterColumnOptionsActionProto();
  virtual ~ResolvedAlterColumnOptionsActionProto();

  ResolvedAlterColumnOptionsActionProto(const ResolvedAlterColumnOptionsActionProto& from);

  inline ResolvedAlterColumnOptionsActionProto& operator=(const ResolvedAlterColumnOptionsActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAlterColumnOptionsActionProto(ResolvedAlterColumnOptionsActionProto&& from) noexcept
    : ResolvedAlterColumnOptionsActionProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAlterColumnOptionsActionProto& operator=(ResolvedAlterColumnOptionsActionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAlterColumnOptionsActionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAlterColumnOptionsActionProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAlterColumnOptionsActionProto*>(
               &_ResolvedAlterColumnOptionsActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    157;

  void Swap(ResolvedAlterColumnOptionsActionProto* other);
  friend void swap(ResolvedAlterColumnOptionsActionProto& a, ResolvedAlterColumnOptionsActionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAlterColumnOptionsActionProto* New() const final {
    return CreateMaybeMessage<ResolvedAlterColumnOptionsActionProto>(NULL);
  }

  ResolvedAlterColumnOptionsActionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAlterColumnOptionsActionProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAlterColumnOptionsActionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedOptionProto option_list = 2;
  int option_list_size() const;
  void clear_option_list();
  static const int kOptionListFieldNumber = 2;
  ::zetasql::ResolvedOptionProto* mutable_option_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_option_list();
  const ::zetasql::ResolvedOptionProto& option_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_option_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      option_list() const;

  // optional .zetasql.ResolvedAlterColumnActionProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterColumnActionProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterColumnActionProto& parent() const;
  ::zetasql::ResolvedAlterColumnActionProto* release_parent();
  ::zetasql::ResolvedAlterColumnActionProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterColumnActionProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAlterColumnOptionsActionProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > option_list_;
  ::zetasql::ResolvedAlterColumnActionProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAlterColumnDropNotNullActionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAlterColumnDropNotNullActionProto) */ {
 public:
  ResolvedAlterColumnDropNotNullActionProto();
  virtual ~ResolvedAlterColumnDropNotNullActionProto();

  ResolvedAlterColumnDropNotNullActionProto(const ResolvedAlterColumnDropNotNullActionProto& from);

  inline ResolvedAlterColumnDropNotNullActionProto& operator=(const ResolvedAlterColumnDropNotNullActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAlterColumnDropNotNullActionProto(ResolvedAlterColumnDropNotNullActionProto&& from) noexcept
    : ResolvedAlterColumnDropNotNullActionProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAlterColumnDropNotNullActionProto& operator=(ResolvedAlterColumnDropNotNullActionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAlterColumnDropNotNullActionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAlterColumnDropNotNullActionProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAlterColumnDropNotNullActionProto*>(
               &_ResolvedAlterColumnDropNotNullActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    158;

  void Swap(ResolvedAlterColumnDropNotNullActionProto* other);
  friend void swap(ResolvedAlterColumnDropNotNullActionProto& a, ResolvedAlterColumnDropNotNullActionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAlterColumnDropNotNullActionProto* New() const final {
    return CreateMaybeMessage<ResolvedAlterColumnDropNotNullActionProto>(NULL);
  }

  ResolvedAlterColumnDropNotNullActionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAlterColumnDropNotNullActionProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAlterColumnDropNotNullActionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedAlterColumnActionProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterColumnActionProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterColumnActionProto& parent() const;
  ::zetasql::ResolvedAlterColumnActionProto* release_parent();
  ::zetasql::ResolvedAlterColumnActionProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterColumnActionProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAlterColumnDropNotNullActionProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedAlterColumnActionProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAlterColumnSetDataTypeActionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAlterColumnSetDataTypeActionProto) */ {
 public:
  ResolvedAlterColumnSetDataTypeActionProto();
  virtual ~ResolvedAlterColumnSetDataTypeActionProto();

  ResolvedAlterColumnSetDataTypeActionProto(const ResolvedAlterColumnSetDataTypeActionProto& from);

  inline ResolvedAlterColumnSetDataTypeActionProto& operator=(const ResolvedAlterColumnSetDataTypeActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAlterColumnSetDataTypeActionProto(ResolvedAlterColumnSetDataTypeActionProto&& from) noexcept
    : ResolvedAlterColumnSetDataTypeActionProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAlterColumnSetDataTypeActionProto& operator=(ResolvedAlterColumnSetDataTypeActionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAlterColumnSetDataTypeActionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAlterColumnSetDataTypeActionProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAlterColumnSetDataTypeActionProto*>(
               &_ResolvedAlterColumnSetDataTypeActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    159;

  void Swap(ResolvedAlterColumnSetDataTypeActionProto* other);
  friend void swap(ResolvedAlterColumnSetDataTypeActionProto& a, ResolvedAlterColumnSetDataTypeActionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAlterColumnSetDataTypeActionProto* New() const final {
    return CreateMaybeMessage<ResolvedAlterColumnSetDataTypeActionProto>(NULL);
  }

  ResolvedAlterColumnSetDataTypeActionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAlterColumnSetDataTypeActionProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAlterColumnSetDataTypeActionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedAlterColumnActionProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterColumnActionProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterColumnActionProto& parent() const;
  ::zetasql::ResolvedAlterColumnActionProto* release_parent();
  ::zetasql::ResolvedAlterColumnActionProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterColumnActionProto* parent);

  // optional .zetasql.TypeProto updated_type = 4;
  bool has_updated_type() const;
  void clear_updated_type();
  static const int kUpdatedTypeFieldNumber = 4;
  private:
  const ::zetasql::TypeProto& _internal_updated_type() const;
  public:
  const ::zetasql::TypeProto& updated_type() const;
  ::zetasql::TypeProto* release_updated_type();
  ::zetasql::TypeProto* mutable_updated_type();
  void set_allocated_updated_type(::zetasql::TypeProto* updated_type);

  // optional .zetasql.TypeParametersProto updated_type_parameters = 5;
  bool has_updated_type_parameters() const;
  void clear_updated_type_parameters();
  static const int kUpdatedTypeParametersFieldNumber = 5;
  private:
  const ::zetasql::TypeParametersProto& _internal_updated_type_parameters() const;
  public:
  const ::zetasql::TypeParametersProto& updated_type_parameters() const;
  ::zetasql::TypeParametersProto* release_updated_type_parameters();
  ::zetasql::TypeParametersProto* mutable_updated_type_parameters();
  void set_allocated_updated_type_parameters(::zetasql::TypeParametersProto* updated_type_parameters);

  // optional .zetasql.ResolvedColumnAnnotationsProto updated_annotations = 6;
  bool has_updated_annotations() const;
  void clear_updated_annotations();
  static const int kUpdatedAnnotationsFieldNumber = 6;
  private:
  const ::zetasql::ResolvedColumnAnnotationsProto& _internal_updated_annotations() const;
  public:
  const ::zetasql::ResolvedColumnAnnotationsProto& updated_annotations() const;
  ::zetasql::ResolvedColumnAnnotationsProto* release_updated_annotations();
  ::zetasql::ResolvedColumnAnnotationsProto* mutable_updated_annotations();
  void set_allocated_updated_annotations(::zetasql::ResolvedColumnAnnotationsProto* updated_annotations);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAlterColumnSetDataTypeActionProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_updated_type();
  void clear_has_updated_type();
  void set_has_updated_type_parameters();
  void clear_has_updated_type_parameters();
  void set_has_updated_annotations();
  void clear_has_updated_annotations();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedAlterColumnActionProto* parent_;
  ::zetasql::TypeProto* updated_type_;
  ::zetasql::TypeParametersProto* updated_type_parameters_;
  ::zetasql::ResolvedColumnAnnotationsProto* updated_annotations_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAlterColumnSetDefaultActionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAlterColumnSetDefaultActionProto) */ {
 public:
  ResolvedAlterColumnSetDefaultActionProto();
  virtual ~ResolvedAlterColumnSetDefaultActionProto();

  ResolvedAlterColumnSetDefaultActionProto(const ResolvedAlterColumnSetDefaultActionProto& from);

  inline ResolvedAlterColumnSetDefaultActionProto& operator=(const ResolvedAlterColumnSetDefaultActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAlterColumnSetDefaultActionProto(ResolvedAlterColumnSetDefaultActionProto&& from) noexcept
    : ResolvedAlterColumnSetDefaultActionProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAlterColumnSetDefaultActionProto& operator=(ResolvedAlterColumnSetDefaultActionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAlterColumnSetDefaultActionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAlterColumnSetDefaultActionProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAlterColumnSetDefaultActionProto*>(
               &_ResolvedAlterColumnSetDefaultActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    160;

  void Swap(ResolvedAlterColumnSetDefaultActionProto* other);
  friend void swap(ResolvedAlterColumnSetDefaultActionProto& a, ResolvedAlterColumnSetDefaultActionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAlterColumnSetDefaultActionProto* New() const final {
    return CreateMaybeMessage<ResolvedAlterColumnSetDefaultActionProto>(NULL);
  }

  ResolvedAlterColumnSetDefaultActionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAlterColumnSetDefaultActionProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAlterColumnSetDefaultActionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedAlterColumnActionProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterColumnActionProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterColumnActionProto& parent() const;
  ::zetasql::ResolvedAlterColumnActionProto* release_parent();
  ::zetasql::ResolvedAlterColumnActionProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterColumnActionProto* parent);

  // optional .zetasql.ResolvedColumnDefaultValueProto default_value = 4;
  bool has_default_value() const;
  void clear_default_value();
  static const int kDefaultValueFieldNumber = 4;
  private:
  const ::zetasql::ResolvedColumnDefaultValueProto& _internal_default_value() const;
  public:
  const ::zetasql::ResolvedColumnDefaultValueProto& default_value() const;
  ::zetasql::ResolvedColumnDefaultValueProto* release_default_value();
  ::zetasql::ResolvedColumnDefaultValueProto* mutable_default_value();
  void set_allocated_default_value(::zetasql::ResolvedColumnDefaultValueProto* default_value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAlterColumnSetDefaultActionProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_default_value();
  void clear_has_default_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedAlterColumnActionProto* parent_;
  ::zetasql::ResolvedColumnDefaultValueProto* default_value_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAlterColumnDropDefaultActionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAlterColumnDropDefaultActionProto) */ {
 public:
  ResolvedAlterColumnDropDefaultActionProto();
  virtual ~ResolvedAlterColumnDropDefaultActionProto();

  ResolvedAlterColumnDropDefaultActionProto(const ResolvedAlterColumnDropDefaultActionProto& from);

  inline ResolvedAlterColumnDropDefaultActionProto& operator=(const ResolvedAlterColumnDropDefaultActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAlterColumnDropDefaultActionProto(ResolvedAlterColumnDropDefaultActionProto&& from) noexcept
    : ResolvedAlterColumnDropDefaultActionProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAlterColumnDropDefaultActionProto& operator=(ResolvedAlterColumnDropDefaultActionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAlterColumnDropDefaultActionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAlterColumnDropDefaultActionProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAlterColumnDropDefaultActionProto*>(
               &_ResolvedAlterColumnDropDefaultActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    161;

  void Swap(ResolvedAlterColumnDropDefaultActionProto* other);
  friend void swap(ResolvedAlterColumnDropDefaultActionProto& a, ResolvedAlterColumnDropDefaultActionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAlterColumnDropDefaultActionProto* New() const final {
    return CreateMaybeMessage<ResolvedAlterColumnDropDefaultActionProto>(NULL);
  }

  ResolvedAlterColumnDropDefaultActionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAlterColumnDropDefaultActionProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAlterColumnDropDefaultActionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedAlterColumnActionProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterColumnActionProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterColumnActionProto& parent() const;
  ::zetasql::ResolvedAlterColumnActionProto* release_parent();
  ::zetasql::ResolvedAlterColumnActionProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterColumnActionProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAlterColumnDropDefaultActionProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedAlterColumnActionProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedDropColumnActionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedDropColumnActionProto) */ {
 public:
  ResolvedDropColumnActionProto();
  virtual ~ResolvedDropColumnActionProto();

  ResolvedDropColumnActionProto(const ResolvedDropColumnActionProto& from);

  inline ResolvedDropColumnActionProto& operator=(const ResolvedDropColumnActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedDropColumnActionProto(ResolvedDropColumnActionProto&& from) noexcept
    : ResolvedDropColumnActionProto() {
    *this = ::std::move(from);
  }

  inline ResolvedDropColumnActionProto& operator=(ResolvedDropColumnActionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedDropColumnActionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedDropColumnActionProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedDropColumnActionProto*>(
               &_ResolvedDropColumnActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    162;

  void Swap(ResolvedDropColumnActionProto* other);
  friend void swap(ResolvedDropColumnActionProto& a, ResolvedDropColumnActionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedDropColumnActionProto* New() const final {
    return CreateMaybeMessage<ResolvedDropColumnActionProto>(NULL);
  }

  ResolvedDropColumnActionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedDropColumnActionProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedDropColumnActionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .zetasql.ResolvedAlterActionProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterActionProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterActionProto& parent() const;
  ::zetasql::ResolvedAlterActionProto* release_parent();
  ::zetasql::ResolvedAlterActionProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent);

  // optional bool is_if_exists = 2;
  bool has_is_if_exists() const;
  void clear_is_if_exists();
  static const int kIsIfExistsFieldNumber = 2;
  bool is_if_exists() const;
  void set_is_if_exists(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedDropColumnActionProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_is_if_exists();
  void clear_has_is_if_exists();
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::zetasql::ResolvedAlterActionProto* parent_;
  bool is_if_exists_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedRenameColumnActionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedRenameColumnActionProto) */ {
 public:
  ResolvedRenameColumnActionProto();
  virtual ~ResolvedRenameColumnActionProto();

  ResolvedRenameColumnActionProto(const ResolvedRenameColumnActionProto& from);

  inline ResolvedRenameColumnActionProto& operator=(const ResolvedRenameColumnActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedRenameColumnActionProto(ResolvedRenameColumnActionProto&& from) noexcept
    : ResolvedRenameColumnActionProto() {
    *this = ::std::move(from);
  }

  inline ResolvedRenameColumnActionProto& operator=(ResolvedRenameColumnActionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedRenameColumnActionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedRenameColumnActionProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedRenameColumnActionProto*>(
               &_ResolvedRenameColumnActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    163;

  void Swap(ResolvedRenameColumnActionProto* other);
  friend void swap(ResolvedRenameColumnActionProto& a, ResolvedRenameColumnActionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedRenameColumnActionProto* New() const final {
    return CreateMaybeMessage<ResolvedRenameColumnActionProto>(NULL);
  }

  ResolvedRenameColumnActionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedRenameColumnActionProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedRenameColumnActionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string new_name = 3;
  bool has_new_name() const;
  void clear_new_name();
  static const int kNewNameFieldNumber = 3;
  const ::std::string& new_name() const;
  void set_new_name(const ::std::string& value);
  #if LANG_CXX11
  void set_new_name(::std::string&& value);
  #endif
  void set_new_name(const char* value);
  void set_new_name(const char* value, size_t size);
  ::std::string* mutable_new_name();
  ::std::string* release_new_name();
  void set_allocated_new_name(::std::string* new_name);

  // optional .zetasql.ResolvedAlterActionProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterActionProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterActionProto& parent() const;
  ::zetasql::ResolvedAlterActionProto* release_parent();
  ::zetasql::ResolvedAlterActionProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent);

  // optional bool is_if_exists = 4;
  bool has_is_if_exists() const;
  void clear_is_if_exists();
  static const int kIsIfExistsFieldNumber = 4;
  bool is_if_exists() const;
  void set_is_if_exists(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedRenameColumnActionProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_is_if_exists();
  void clear_has_is_if_exists();
  void set_has_name();
  void clear_has_name();
  void set_has_new_name();
  void clear_has_new_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr new_name_;
  ::zetasql::ResolvedAlterActionProto* parent_;
  bool is_if_exists_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedSetAsActionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedSetAsActionProto) */ {
 public:
  ResolvedSetAsActionProto();
  virtual ~ResolvedSetAsActionProto();

  ResolvedSetAsActionProto(const ResolvedSetAsActionProto& from);

  inline ResolvedSetAsActionProto& operator=(const ResolvedSetAsActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedSetAsActionProto(ResolvedSetAsActionProto&& from) noexcept
    : ResolvedSetAsActionProto() {
    *this = ::std::move(from);
  }

  inline ResolvedSetAsActionProto& operator=(ResolvedSetAsActionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedSetAsActionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedSetAsActionProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedSetAsActionProto*>(
               &_ResolvedSetAsActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    164;

  void Swap(ResolvedSetAsActionProto* other);
  friend void swap(ResolvedSetAsActionProto& a, ResolvedSetAsActionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedSetAsActionProto* New() const final {
    return CreateMaybeMessage<ResolvedSetAsActionProto>(NULL);
  }

  ResolvedSetAsActionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedSetAsActionProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedSetAsActionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string entity_body_json = 2;
  bool has_entity_body_json() const;
  void clear_entity_body_json();
  static const int kEntityBodyJsonFieldNumber = 2;
  const ::std::string& entity_body_json() const;
  void set_entity_body_json(const ::std::string& value);
  #if LANG_CXX11
  void set_entity_body_json(::std::string&& value);
  #endif
  void set_entity_body_json(const char* value);
  void set_entity_body_json(const char* value, size_t size);
  ::std::string* mutable_entity_body_json();
  ::std::string* release_entity_body_json();
  void set_allocated_entity_body_json(::std::string* entity_body_json);

  // optional string entity_body_text = 3;
  bool has_entity_body_text() const;
  void clear_entity_body_text();
  static const int kEntityBodyTextFieldNumber = 3;
  const ::std::string& entity_body_text() const;
  void set_entity_body_text(const ::std::string& value);
  #if LANG_CXX11
  void set_entity_body_text(::std::string&& value);
  #endif
  void set_entity_body_text(const char* value);
  void set_entity_body_text(const char* value, size_t size);
  ::std::string* mutable_entity_body_text();
  ::std::string* release_entity_body_text();
  void set_allocated_entity_body_text(::std::string* entity_body_text);

  // optional .zetasql.ResolvedAlterActionProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterActionProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterActionProto& parent() const;
  ::zetasql::ResolvedAlterActionProto* release_parent();
  ::zetasql::ResolvedAlterActionProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedSetAsActionProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_entity_body_json();
  void clear_has_entity_body_json();
  void set_has_entity_body_text();
  void clear_has_entity_body_text();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr entity_body_json_;
  ::google::protobuf::internal::ArenaStringPtr entity_body_text_;
  ::zetasql::ResolvedAlterActionProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedSetCollateClauseProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedSetCollateClauseProto) */ {
 public:
  ResolvedSetCollateClauseProto();
  virtual ~ResolvedSetCollateClauseProto();

  ResolvedSetCollateClauseProto(const ResolvedSetCollateClauseProto& from);

  inline ResolvedSetCollateClauseProto& operator=(const ResolvedSetCollateClauseProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedSetCollateClauseProto(ResolvedSetCollateClauseProto&& from) noexcept
    : ResolvedSetCollateClauseProto() {
    *this = ::std::move(from);
  }

  inline ResolvedSetCollateClauseProto& operator=(ResolvedSetCollateClauseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedSetCollateClauseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedSetCollateClauseProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedSetCollateClauseProto*>(
               &_ResolvedSetCollateClauseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    165;

  void Swap(ResolvedSetCollateClauseProto* other);
  friend void swap(ResolvedSetCollateClauseProto& a, ResolvedSetCollateClauseProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedSetCollateClauseProto* New() const final {
    return CreateMaybeMessage<ResolvedSetCollateClauseProto>(NULL);
  }

  ResolvedSetCollateClauseProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedSetCollateClauseProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedSetCollateClauseProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedAlterActionProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterActionProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterActionProto& parent() const;
  ::zetasql::ResolvedAlterActionProto* release_parent();
  ::zetasql::ResolvedAlterActionProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent);

  // optional .zetasql.AnyResolvedExprProto collation_name = 2;
  bool has_collation_name() const;
  void clear_collation_name();
  static const int kCollationNameFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_collation_name() const;
  public:
  const ::zetasql::AnyResolvedExprProto& collation_name() const;
  ::zetasql::AnyResolvedExprProto* release_collation_name();
  ::zetasql::AnyResolvedExprProto* mutable_collation_name();
  void set_allocated_collation_name(::zetasql::AnyResolvedExprProto* collation_name);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedSetCollateClauseProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_collation_name();
  void clear_has_collation_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedAlterActionProto* parent_;
  ::zetasql::AnyResolvedExprProto* collation_name_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAlterTableSetOptionsStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAlterTableSetOptionsStmtProto) */ {
 public:
  ResolvedAlterTableSetOptionsStmtProto();
  virtual ~ResolvedAlterTableSetOptionsStmtProto();

  ResolvedAlterTableSetOptionsStmtProto(const ResolvedAlterTableSetOptionsStmtProto& from);

  inline ResolvedAlterTableSetOptionsStmtProto& operator=(const ResolvedAlterTableSetOptionsStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAlterTableSetOptionsStmtProto(ResolvedAlterTableSetOptionsStmtProto&& from) noexcept
    : ResolvedAlterTableSetOptionsStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAlterTableSetOptionsStmtProto& operator=(ResolvedAlterTableSetOptionsStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAlterTableSetOptionsStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAlterTableSetOptionsStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAlterTableSetOptionsStmtProto*>(
               &_ResolvedAlterTableSetOptionsStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    166;

  void Swap(ResolvedAlterTableSetOptionsStmtProto* other);
  friend void swap(ResolvedAlterTableSetOptionsStmtProto& a, ResolvedAlterTableSetOptionsStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAlterTableSetOptionsStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedAlterTableSetOptionsStmtProto>(NULL);
  }

  ResolvedAlterTableSetOptionsStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAlterTableSetOptionsStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAlterTableSetOptionsStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name_path = 2;
  int name_path_size() const;
  void clear_name_path();
  static const int kNamePathFieldNumber = 2;
  const ::std::string& name_path(int index) const;
  ::std::string* mutable_name_path(int index);
  void set_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name_path(int index, ::std::string&& value);
  #endif
  void set_name_path(int index, const char* value);
  void set_name_path(int index, const char* value, size_t size);
  ::std::string* add_name_path();
  void add_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_name_path(::std::string&& value);
  #endif
  void add_name_path(const char* value);
  void add_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_path();

  // repeated .zetasql.ResolvedOptionProto option_list = 3;
  int option_list_size() const;
  void clear_option_list();
  static const int kOptionListFieldNumber = 3;
  ::zetasql::ResolvedOptionProto* mutable_option_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_option_list();
  const ::zetasql::ResolvedOptionProto& option_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_option_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      option_list() const;

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional bool is_if_exists = 4;
  bool has_is_if_exists() const;
  void clear_is_if_exists();
  static const int kIsIfExistsFieldNumber = 4;
  bool is_if_exists() const;
  void set_is_if_exists(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAlterTableSetOptionsStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_is_if_exists();
  void clear_has_is_if_exists();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_path_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > option_list_;
  ::zetasql::ResolvedStatementProto* parent_;
  bool is_if_exists_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedRenameStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedRenameStmtProto) */ {
 public:
  ResolvedRenameStmtProto();
  virtual ~ResolvedRenameStmtProto();

  ResolvedRenameStmtProto(const ResolvedRenameStmtProto& from);

  inline ResolvedRenameStmtProto& operator=(const ResolvedRenameStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedRenameStmtProto(ResolvedRenameStmtProto&& from) noexcept
    : ResolvedRenameStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedRenameStmtProto& operator=(ResolvedRenameStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedRenameStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedRenameStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedRenameStmtProto*>(
               &_ResolvedRenameStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    167;

  void Swap(ResolvedRenameStmtProto* other);
  friend void swap(ResolvedRenameStmtProto& a, ResolvedRenameStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedRenameStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedRenameStmtProto>(NULL);
  }

  ResolvedRenameStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedRenameStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedRenameStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string old_name_path = 3;
  int old_name_path_size() const;
  void clear_old_name_path();
  static const int kOldNamePathFieldNumber = 3;
  const ::std::string& old_name_path(int index) const;
  ::std::string* mutable_old_name_path(int index);
  void set_old_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_old_name_path(int index, ::std::string&& value);
  #endif
  void set_old_name_path(int index, const char* value);
  void set_old_name_path(int index, const char* value, size_t size);
  ::std::string* add_old_name_path();
  void add_old_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_old_name_path(::std::string&& value);
  #endif
  void add_old_name_path(const char* value);
  void add_old_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& old_name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_old_name_path();

  // repeated string new_name_path = 4;
  int new_name_path_size() const;
  void clear_new_name_path();
  static const int kNewNamePathFieldNumber = 4;
  const ::std::string& new_name_path(int index) const;
  ::std::string* mutable_new_name_path(int index);
  void set_new_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_new_name_path(int index, ::std::string&& value);
  #endif
  void set_new_name_path(int index, const char* value);
  void set_new_name_path(int index, const char* value, size_t size);
  ::std::string* add_new_name_path();
  void add_new_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_new_name_path(::std::string&& value);
  #endif
  void add_new_name_path(const char* value);
  void add_new_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& new_name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_new_name_path();

  // optional string object_type = 2;
  bool has_object_type() const;
  void clear_object_type();
  static const int kObjectTypeFieldNumber = 2;
  const ::std::string& object_type() const;
  void set_object_type(const ::std::string& value);
  #if LANG_CXX11
  void set_object_type(::std::string&& value);
  #endif
  void set_object_type(const char* value);
  void set_object_type(const char* value, size_t size);
  ::std::string* mutable_object_type();
  ::std::string* release_object_type();
  void set_allocated_object_type(::std::string* object_type);

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedRenameStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_object_type();
  void clear_has_object_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> old_name_path_;
  ::google::protobuf::RepeatedPtrField< ::std::string> new_name_path_;
  ::google::protobuf::internal::ArenaStringPtr object_type_;
  ::zetasql::ResolvedStatementProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedCreatePrivilegeRestrictionStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedCreatePrivilegeRestrictionStmtProto) */ {
 public:
  ResolvedCreatePrivilegeRestrictionStmtProto();
  virtual ~ResolvedCreatePrivilegeRestrictionStmtProto();

  ResolvedCreatePrivilegeRestrictionStmtProto(const ResolvedCreatePrivilegeRestrictionStmtProto& from);

  inline ResolvedCreatePrivilegeRestrictionStmtProto& operator=(const ResolvedCreatePrivilegeRestrictionStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedCreatePrivilegeRestrictionStmtProto(ResolvedCreatePrivilegeRestrictionStmtProto&& from) noexcept
    : ResolvedCreatePrivilegeRestrictionStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedCreatePrivilegeRestrictionStmtProto& operator=(ResolvedCreatePrivilegeRestrictionStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedCreatePrivilegeRestrictionStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedCreatePrivilegeRestrictionStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedCreatePrivilegeRestrictionStmtProto*>(
               &_ResolvedCreatePrivilegeRestrictionStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    168;

  void Swap(ResolvedCreatePrivilegeRestrictionStmtProto* other);
  friend void swap(ResolvedCreatePrivilegeRestrictionStmtProto& a, ResolvedCreatePrivilegeRestrictionStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedCreatePrivilegeRestrictionStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedCreatePrivilegeRestrictionStmtProto>(NULL);
  }

  ResolvedCreatePrivilegeRestrictionStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedCreatePrivilegeRestrictionStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedCreatePrivilegeRestrictionStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedPrivilegeProto column_privilege_list = 2;
  int column_privilege_list_size() const;
  void clear_column_privilege_list();
  static const int kColumnPrivilegeListFieldNumber = 2;
  ::zetasql::ResolvedPrivilegeProto* mutable_column_privilege_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedPrivilegeProto >*
      mutable_column_privilege_list();
  const ::zetasql::ResolvedPrivilegeProto& column_privilege_list(int index) const;
  ::zetasql::ResolvedPrivilegeProto* add_column_privilege_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedPrivilegeProto >&
      column_privilege_list() const;

  // repeated .zetasql.AnyResolvedExprProto restrictee_list = 4;
  int restrictee_list_size() const;
  void clear_restrictee_list();
  static const int kRestricteeListFieldNumber = 4;
  ::zetasql::AnyResolvedExprProto* mutable_restrictee_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
      mutable_restrictee_list();
  const ::zetasql::AnyResolvedExprProto& restrictee_list(int index) const;
  ::zetasql::AnyResolvedExprProto* add_restrictee_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
      restrictee_list() const;

  // optional string object_type = 3;
  bool has_object_type() const;
  void clear_object_type();
  static const int kObjectTypeFieldNumber = 3;
  const ::std::string& object_type() const;
  void set_object_type(const ::std::string& value);
  #if LANG_CXX11
  void set_object_type(::std::string&& value);
  #endif
  void set_object_type(const char* value);
  void set_object_type(const char* value, size_t size);
  ::std::string* mutable_object_type();
  ::std::string* release_object_type();
  void set_allocated_object_type(::std::string* object_type);

  // optional .zetasql.ResolvedCreateStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedCreateStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedCreateStatementProto& parent() const;
  ::zetasql::ResolvedCreateStatementProto* release_parent();
  ::zetasql::ResolvedCreateStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedCreateStatementProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedCreatePrivilegeRestrictionStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_object_type();
  void clear_has_object_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedPrivilegeProto > column_privilege_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto > restrictee_list_;
  ::google::protobuf::internal::ArenaStringPtr object_type_;
  ::zetasql::ResolvedCreateStatementProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedCreateRowAccessPolicyStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedCreateRowAccessPolicyStmtProto) */ {
 public:
  ResolvedCreateRowAccessPolicyStmtProto();
  virtual ~ResolvedCreateRowAccessPolicyStmtProto();

  ResolvedCreateRowAccessPolicyStmtProto(const ResolvedCreateRowAccessPolicyStmtProto& from);

  inline ResolvedCreateRowAccessPolicyStmtProto& operator=(const ResolvedCreateRowAccessPolicyStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedCreateRowAccessPolicyStmtProto(ResolvedCreateRowAccessPolicyStmtProto&& from) noexcept
    : ResolvedCreateRowAccessPolicyStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedCreateRowAccessPolicyStmtProto& operator=(ResolvedCreateRowAccessPolicyStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedCreateRowAccessPolicyStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedCreateRowAccessPolicyStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedCreateRowAccessPolicyStmtProto*>(
               &_ResolvedCreateRowAccessPolicyStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    169;

  void Swap(ResolvedCreateRowAccessPolicyStmtProto* other);
  friend void swap(ResolvedCreateRowAccessPolicyStmtProto& a, ResolvedCreateRowAccessPolicyStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedCreateRowAccessPolicyStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedCreateRowAccessPolicyStmtProto>(NULL);
  }

  ResolvedCreateRowAccessPolicyStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedCreateRowAccessPolicyStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedCreateRowAccessPolicyStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string target_name_path = 4;
  int target_name_path_size() const;
  void clear_target_name_path();
  static const int kTargetNamePathFieldNumber = 4;
  const ::std::string& target_name_path(int index) const;
  ::std::string* mutable_target_name_path(int index);
  void set_target_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_target_name_path(int index, ::std::string&& value);
  #endif
  void set_target_name_path(int index, const char* value);
  void set_target_name_path(int index, const char* value, size_t size);
  ::std::string* add_target_name_path();
  void add_target_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_target_name_path(::std::string&& value);
  #endif
  void add_target_name_path(const char* value);
  void add_target_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& target_name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_target_name_path();

  // repeated string grantee_list = 5;
  int grantee_list_size() const;
  void clear_grantee_list();
  static const int kGranteeListFieldNumber = 5;
  const ::std::string& grantee_list(int index) const;
  ::std::string* mutable_grantee_list(int index);
  void set_grantee_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_grantee_list(int index, ::std::string&& value);
  #endif
  void set_grantee_list(int index, const char* value);
  void set_grantee_list(int index, const char* value, size_t size);
  ::std::string* add_grantee_list();
  void add_grantee_list(const ::std::string& value);
  #if LANG_CXX11
  void add_grantee_list(::std::string&& value);
  #endif
  void add_grantee_list(const char* value);
  void add_grantee_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& grantee_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_grantee_list();

  // repeated .zetasql.AnyResolvedExprProto grantee_expr_list = 9;
  int grantee_expr_list_size() const;
  void clear_grantee_expr_list();
  static const int kGranteeExprListFieldNumber = 9;
  ::zetasql::AnyResolvedExprProto* mutable_grantee_expr_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
      mutable_grantee_expr_list();
  const ::zetasql::AnyResolvedExprProto& grantee_expr_list(int index) const;
  ::zetasql::AnyResolvedExprProto* add_grantee_expr_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
      grantee_expr_list() const;

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string predicate_str = 8;
  bool has_predicate_str() const;
  void clear_predicate_str();
  static const int kPredicateStrFieldNumber = 8;
  const ::std::string& predicate_str() const;
  void set_predicate_str(const ::std::string& value);
  #if LANG_CXX11
  void set_predicate_str(::std::string&& value);
  #endif
  void set_predicate_str(const char* value);
  void set_predicate_str(const char* value, size_t size);
  ::std::string* mutable_predicate_str();
  ::std::string* release_predicate_str();
  void set_allocated_predicate_str(::std::string* predicate_str);

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional .zetasql.ResolvedTableScanProto table_scan = 6;
  bool has_table_scan() const;
  void clear_table_scan();
  static const int kTableScanFieldNumber = 6;
  private:
  const ::zetasql::ResolvedTableScanProto& _internal_table_scan() const;
  public:
  const ::zetasql::ResolvedTableScanProto& table_scan() const;
  ::zetasql::ResolvedTableScanProto* release_table_scan();
  ::zetasql::ResolvedTableScanProto* mutable_table_scan();
  void set_allocated_table_scan(::zetasql::ResolvedTableScanProto* table_scan);

  // optional .zetasql.AnyResolvedExprProto predicate = 7;
  bool has_predicate() const;
  void clear_predicate();
  static const int kPredicateFieldNumber = 7;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_predicate() const;
  public:
  const ::zetasql::AnyResolvedExprProto& predicate() const;
  ::zetasql::AnyResolvedExprProto* release_predicate();
  ::zetasql::AnyResolvedExprProto* mutable_predicate();
  void set_allocated_predicate(::zetasql::AnyResolvedExprProto* predicate);

  // optional .zetasql.ResolvedCreateStatementEnums.CreateMode create_mode = 2;
  bool has_create_mode() const;
  void clear_create_mode();
  static const int kCreateModeFieldNumber = 2;
  ::zetasql::ResolvedCreateStatementEnums_CreateMode create_mode() const;
  void set_create_mode(::zetasql::ResolvedCreateStatementEnums_CreateMode value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedCreateRowAccessPolicyStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_create_mode();
  void clear_has_create_mode();
  void set_has_name();
  void clear_has_name();
  void set_has_table_scan();
  void clear_has_table_scan();
  void set_has_predicate();
  void clear_has_predicate();
  void set_has_predicate_str();
  void clear_has_predicate_str();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> target_name_path_;
  ::google::protobuf::RepeatedPtrField< ::std::string> grantee_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto > grantee_expr_list_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr predicate_str_;
  ::zetasql::ResolvedStatementProto* parent_;
  ::zetasql::ResolvedTableScanProto* table_scan_;
  ::zetasql::AnyResolvedExprProto* predicate_;
  int create_mode_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedDropPrivilegeRestrictionStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedDropPrivilegeRestrictionStmtProto) */ {
 public:
  ResolvedDropPrivilegeRestrictionStmtProto();
  virtual ~ResolvedDropPrivilegeRestrictionStmtProto();

  ResolvedDropPrivilegeRestrictionStmtProto(const ResolvedDropPrivilegeRestrictionStmtProto& from);

  inline ResolvedDropPrivilegeRestrictionStmtProto& operator=(const ResolvedDropPrivilegeRestrictionStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedDropPrivilegeRestrictionStmtProto(ResolvedDropPrivilegeRestrictionStmtProto&& from) noexcept
    : ResolvedDropPrivilegeRestrictionStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedDropPrivilegeRestrictionStmtProto& operator=(ResolvedDropPrivilegeRestrictionStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedDropPrivilegeRestrictionStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedDropPrivilegeRestrictionStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedDropPrivilegeRestrictionStmtProto*>(
               &_ResolvedDropPrivilegeRestrictionStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    170;

  void Swap(ResolvedDropPrivilegeRestrictionStmtProto* other);
  friend void swap(ResolvedDropPrivilegeRestrictionStmtProto& a, ResolvedDropPrivilegeRestrictionStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedDropPrivilegeRestrictionStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedDropPrivilegeRestrictionStmtProto>(NULL);
  }

  ResolvedDropPrivilegeRestrictionStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedDropPrivilegeRestrictionStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedDropPrivilegeRestrictionStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name_path = 4;
  int name_path_size() const;
  void clear_name_path();
  static const int kNamePathFieldNumber = 4;
  const ::std::string& name_path(int index) const;
  ::std::string* mutable_name_path(int index);
  void set_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name_path(int index, ::std::string&& value);
  #endif
  void set_name_path(int index, const char* value);
  void set_name_path(int index, const char* value, size_t size);
  ::std::string* add_name_path();
  void add_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_name_path(::std::string&& value);
  #endif
  void add_name_path(const char* value);
  void add_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_path();

  // repeated .zetasql.ResolvedPrivilegeProto column_privilege_list = 5;
  int column_privilege_list_size() const;
  void clear_column_privilege_list();
  static const int kColumnPrivilegeListFieldNumber = 5;
  ::zetasql::ResolvedPrivilegeProto* mutable_column_privilege_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedPrivilegeProto >*
      mutable_column_privilege_list();
  const ::zetasql::ResolvedPrivilegeProto& column_privilege_list(int index) const;
  ::zetasql::ResolvedPrivilegeProto* add_column_privilege_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedPrivilegeProto >&
      column_privilege_list() const;

  // optional string object_type = 2;
  bool has_object_type() const;
  void clear_object_type();
  static const int kObjectTypeFieldNumber = 2;
  const ::std::string& object_type() const;
  void set_object_type(const ::std::string& value);
  #if LANG_CXX11
  void set_object_type(::std::string&& value);
  #endif
  void set_object_type(const char* value);
  void set_object_type(const char* value, size_t size);
  ::std::string* mutable_object_type();
  ::std::string* release_object_type();
  void set_allocated_object_type(::std::string* object_type);

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional bool is_if_exists = 3;
  bool has_is_if_exists() const;
  void clear_is_if_exists();
  static const int kIsIfExistsFieldNumber = 3;
  bool is_if_exists() const;
  void set_is_if_exists(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedDropPrivilegeRestrictionStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_object_type();
  void clear_has_object_type();
  void set_has_is_if_exists();
  void clear_has_is_if_exists();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_path_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedPrivilegeProto > column_privilege_list_;
  ::google::protobuf::internal::ArenaStringPtr object_type_;
  ::zetasql::ResolvedStatementProto* parent_;
  bool is_if_exists_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedDropRowAccessPolicyStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedDropRowAccessPolicyStmtProto) */ {
 public:
  ResolvedDropRowAccessPolicyStmtProto();
  virtual ~ResolvedDropRowAccessPolicyStmtProto();

  ResolvedDropRowAccessPolicyStmtProto(const ResolvedDropRowAccessPolicyStmtProto& from);

  inline ResolvedDropRowAccessPolicyStmtProto& operator=(const ResolvedDropRowAccessPolicyStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedDropRowAccessPolicyStmtProto(ResolvedDropRowAccessPolicyStmtProto&& from) noexcept
    : ResolvedDropRowAccessPolicyStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedDropRowAccessPolicyStmtProto& operator=(ResolvedDropRowAccessPolicyStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedDropRowAccessPolicyStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedDropRowAccessPolicyStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedDropRowAccessPolicyStmtProto*>(
               &_ResolvedDropRowAccessPolicyStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    171;

  void Swap(ResolvedDropRowAccessPolicyStmtProto* other);
  friend void swap(ResolvedDropRowAccessPolicyStmtProto& a, ResolvedDropRowAccessPolicyStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedDropRowAccessPolicyStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedDropRowAccessPolicyStmtProto>(NULL);
  }

  ResolvedDropRowAccessPolicyStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedDropRowAccessPolicyStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedDropRowAccessPolicyStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string target_name_path = 5;
  int target_name_path_size() const;
  void clear_target_name_path();
  static const int kTargetNamePathFieldNumber = 5;
  const ::std::string& target_name_path(int index) const;
  ::std::string* mutable_target_name_path(int index);
  void set_target_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_target_name_path(int index, ::std::string&& value);
  #endif
  void set_target_name_path(int index, const char* value);
  void set_target_name_path(int index, const char* value, size_t size);
  ::std::string* add_target_name_path();
  void add_target_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_target_name_path(::std::string&& value);
  #endif
  void add_target_name_path(const char* value);
  void add_target_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& target_name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_target_name_path();

  // optional string name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional bool is_drop_all = 2;
  bool has_is_drop_all() const;
  void clear_is_drop_all();
  static const int kIsDropAllFieldNumber = 2;
  bool is_drop_all() const;
  void set_is_drop_all(bool value);

  // optional bool is_if_exists = 3;
  bool has_is_if_exists() const;
  void clear_is_if_exists();
  static const int kIsIfExistsFieldNumber = 3;
  bool is_if_exists() const;
  void set_is_if_exists(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedDropRowAccessPolicyStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_is_drop_all();
  void clear_has_is_drop_all();
  void set_has_is_if_exists();
  void clear_has_is_if_exists();
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> target_name_path_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::zetasql::ResolvedStatementProto* parent_;
  bool is_drop_all_;
  bool is_if_exists_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedDropSearchIndexStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedDropSearchIndexStmtProto) */ {
 public:
  ResolvedDropSearchIndexStmtProto();
  virtual ~ResolvedDropSearchIndexStmtProto();

  ResolvedDropSearchIndexStmtProto(const ResolvedDropSearchIndexStmtProto& from);

  inline ResolvedDropSearchIndexStmtProto& operator=(const ResolvedDropSearchIndexStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedDropSearchIndexStmtProto(ResolvedDropSearchIndexStmtProto&& from) noexcept
    : ResolvedDropSearchIndexStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedDropSearchIndexStmtProto& operator=(ResolvedDropSearchIndexStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedDropSearchIndexStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedDropSearchIndexStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedDropSearchIndexStmtProto*>(
               &_ResolvedDropSearchIndexStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    172;

  void Swap(ResolvedDropSearchIndexStmtProto* other);
  friend void swap(ResolvedDropSearchIndexStmtProto& a, ResolvedDropSearchIndexStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedDropSearchIndexStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedDropSearchIndexStmtProto>(NULL);
  }

  ResolvedDropSearchIndexStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedDropSearchIndexStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedDropSearchIndexStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string table_name_path = 4;
  int table_name_path_size() const;
  void clear_table_name_path();
  static const int kTableNamePathFieldNumber = 4;
  const ::std::string& table_name_path(int index) const;
  ::std::string* mutable_table_name_path(int index);
  void set_table_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_table_name_path(int index, ::std::string&& value);
  #endif
  void set_table_name_path(int index, const char* value);
  void set_table_name_path(int index, const char* value, size_t size);
  ::std::string* add_table_name_path();
  void add_table_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_table_name_path(::std::string&& value);
  #endif
  void add_table_name_path(const char* value);
  void add_table_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& table_name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_table_name_path();

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional bool is_if_exists = 2;
  bool has_is_if_exists() const;
  void clear_is_if_exists();
  static const int kIsIfExistsFieldNumber = 2;
  bool is_if_exists() const;
  void set_is_if_exists(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedDropSearchIndexStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_is_if_exists();
  void clear_has_is_if_exists();
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> table_name_path_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::zetasql::ResolvedStatementProto* parent_;
  bool is_if_exists_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedGrantToActionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedGrantToActionProto) */ {
 public:
  ResolvedGrantToActionProto();
  virtual ~ResolvedGrantToActionProto();

  ResolvedGrantToActionProto(const ResolvedGrantToActionProto& from);

  inline ResolvedGrantToActionProto& operator=(const ResolvedGrantToActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedGrantToActionProto(ResolvedGrantToActionProto&& from) noexcept
    : ResolvedGrantToActionProto() {
    *this = ::std::move(from);
  }

  inline ResolvedGrantToActionProto& operator=(ResolvedGrantToActionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedGrantToActionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedGrantToActionProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedGrantToActionProto*>(
               &_ResolvedGrantToActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    173;

  void Swap(ResolvedGrantToActionProto* other);
  friend void swap(ResolvedGrantToActionProto& a, ResolvedGrantToActionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedGrantToActionProto* New() const final {
    return CreateMaybeMessage<ResolvedGrantToActionProto>(NULL);
  }

  ResolvedGrantToActionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedGrantToActionProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedGrantToActionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.AnyResolvedExprProto grantee_expr_list = 2;
  int grantee_expr_list_size() const;
  void clear_grantee_expr_list();
  static const int kGranteeExprListFieldNumber = 2;
  ::zetasql::AnyResolvedExprProto* mutable_grantee_expr_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
      mutable_grantee_expr_list();
  const ::zetasql::AnyResolvedExprProto& grantee_expr_list(int index) const;
  ::zetasql::AnyResolvedExprProto* add_grantee_expr_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
      grantee_expr_list() const;

  // optional .zetasql.ResolvedAlterActionProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterActionProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterActionProto& parent() const;
  ::zetasql::ResolvedAlterActionProto* release_parent();
  ::zetasql::ResolvedAlterActionProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedGrantToActionProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto > grantee_expr_list_;
  ::zetasql::ResolvedAlterActionProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedRestrictToActionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedRestrictToActionProto) */ {
 public:
  ResolvedRestrictToActionProto();
  virtual ~ResolvedRestrictToActionProto();

  ResolvedRestrictToActionProto(const ResolvedRestrictToActionProto& from);

  inline ResolvedRestrictToActionProto& operator=(const ResolvedRestrictToActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedRestrictToActionProto(ResolvedRestrictToActionProto&& from) noexcept
    : ResolvedRestrictToActionProto() {
    *this = ::std::move(from);
  }

  inline ResolvedRestrictToActionProto& operator=(ResolvedRestrictToActionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedRestrictToActionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedRestrictToActionProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedRestrictToActionProto*>(
               &_ResolvedRestrictToActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    174;

  void Swap(ResolvedRestrictToActionProto* other);
  friend void swap(ResolvedRestrictToActionProto& a, ResolvedRestrictToActionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedRestrictToActionProto* New() const final {
    return CreateMaybeMessage<ResolvedRestrictToActionProto>(NULL);
  }

  ResolvedRestrictToActionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedRestrictToActionProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedRestrictToActionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.AnyResolvedExprProto restrictee_list = 2;
  int restrictee_list_size() const;
  void clear_restrictee_list();
  static const int kRestricteeListFieldNumber = 2;
  ::zetasql::AnyResolvedExprProto* mutable_restrictee_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
      mutable_restrictee_list();
  const ::zetasql::AnyResolvedExprProto& restrictee_list(int index) const;
  ::zetasql::AnyResolvedExprProto* add_restrictee_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
      restrictee_list() const;

  // optional .zetasql.ResolvedAlterActionProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterActionProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterActionProto& parent() const;
  ::zetasql::ResolvedAlterActionProto* release_parent();
  ::zetasql::ResolvedAlterActionProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedRestrictToActionProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto > restrictee_list_;
  ::zetasql::ResolvedAlterActionProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAddToRestricteeListActionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAddToRestricteeListActionProto) */ {
 public:
  ResolvedAddToRestricteeListActionProto();
  virtual ~ResolvedAddToRestricteeListActionProto();

  ResolvedAddToRestricteeListActionProto(const ResolvedAddToRestricteeListActionProto& from);

  inline ResolvedAddToRestricteeListActionProto& operator=(const ResolvedAddToRestricteeListActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAddToRestricteeListActionProto(ResolvedAddToRestricteeListActionProto&& from) noexcept
    : ResolvedAddToRestricteeListActionProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAddToRestricteeListActionProto& operator=(ResolvedAddToRestricteeListActionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAddToRestricteeListActionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAddToRestricteeListActionProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAddToRestricteeListActionProto*>(
               &_ResolvedAddToRestricteeListActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    175;

  void Swap(ResolvedAddToRestricteeListActionProto* other);
  friend void swap(ResolvedAddToRestricteeListActionProto& a, ResolvedAddToRestricteeListActionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAddToRestricteeListActionProto* New() const final {
    return CreateMaybeMessage<ResolvedAddToRestricteeListActionProto>(NULL);
  }

  ResolvedAddToRestricteeListActionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAddToRestricteeListActionProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAddToRestricteeListActionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.AnyResolvedExprProto restrictee_list = 3;
  int restrictee_list_size() const;
  void clear_restrictee_list();
  static const int kRestricteeListFieldNumber = 3;
  ::zetasql::AnyResolvedExprProto* mutable_restrictee_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
      mutable_restrictee_list();
  const ::zetasql::AnyResolvedExprProto& restrictee_list(int index) const;
  ::zetasql::AnyResolvedExprProto* add_restrictee_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
      restrictee_list() const;

  // optional .zetasql.ResolvedAlterActionProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterActionProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterActionProto& parent() const;
  ::zetasql::ResolvedAlterActionProto* release_parent();
  ::zetasql::ResolvedAlterActionProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent);

  // optional bool is_if_not_exists = 2;
  bool has_is_if_not_exists() const;
  void clear_is_if_not_exists();
  static const int kIsIfNotExistsFieldNumber = 2;
  bool is_if_not_exists() const;
  void set_is_if_not_exists(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAddToRestricteeListActionProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_is_if_not_exists();
  void clear_has_is_if_not_exists();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto > restrictee_list_;
  ::zetasql::ResolvedAlterActionProto* parent_;
  bool is_if_not_exists_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedRemoveFromRestricteeListActionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedRemoveFromRestricteeListActionProto) */ {
 public:
  ResolvedRemoveFromRestricteeListActionProto();
  virtual ~ResolvedRemoveFromRestricteeListActionProto();

  ResolvedRemoveFromRestricteeListActionProto(const ResolvedRemoveFromRestricteeListActionProto& from);

  inline ResolvedRemoveFromRestricteeListActionProto& operator=(const ResolvedRemoveFromRestricteeListActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedRemoveFromRestricteeListActionProto(ResolvedRemoveFromRestricteeListActionProto&& from) noexcept
    : ResolvedRemoveFromRestricteeListActionProto() {
    *this = ::std::move(from);
  }

  inline ResolvedRemoveFromRestricteeListActionProto& operator=(ResolvedRemoveFromRestricteeListActionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedRemoveFromRestricteeListActionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedRemoveFromRestricteeListActionProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedRemoveFromRestricteeListActionProto*>(
               &_ResolvedRemoveFromRestricteeListActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    176;

  void Swap(ResolvedRemoveFromRestricteeListActionProto* other);
  friend void swap(ResolvedRemoveFromRestricteeListActionProto& a, ResolvedRemoveFromRestricteeListActionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedRemoveFromRestricteeListActionProto* New() const final {
    return CreateMaybeMessage<ResolvedRemoveFromRestricteeListActionProto>(NULL);
  }

  ResolvedRemoveFromRestricteeListActionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedRemoveFromRestricteeListActionProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedRemoveFromRestricteeListActionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.AnyResolvedExprProto restrictee_list = 3;
  int restrictee_list_size() const;
  void clear_restrictee_list();
  static const int kRestricteeListFieldNumber = 3;
  ::zetasql::AnyResolvedExprProto* mutable_restrictee_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
      mutable_restrictee_list();
  const ::zetasql::AnyResolvedExprProto& restrictee_list(int index) const;
  ::zetasql::AnyResolvedExprProto* add_restrictee_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
      restrictee_list() const;

  // optional .zetasql.ResolvedAlterActionProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterActionProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterActionProto& parent() const;
  ::zetasql::ResolvedAlterActionProto* release_parent();
  ::zetasql::ResolvedAlterActionProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent);

  // optional bool is_if_exists = 2;
  bool has_is_if_exists() const;
  void clear_is_if_exists();
  static const int kIsIfExistsFieldNumber = 2;
  bool is_if_exists() const;
  void set_is_if_exists(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedRemoveFromRestricteeListActionProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_is_if_exists();
  void clear_has_is_if_exists();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto > restrictee_list_;
  ::zetasql::ResolvedAlterActionProto* parent_;
  bool is_if_exists_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedFilterUsingActionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedFilterUsingActionProto) */ {
 public:
  ResolvedFilterUsingActionProto();
  virtual ~ResolvedFilterUsingActionProto();

  ResolvedFilterUsingActionProto(const ResolvedFilterUsingActionProto& from);

  inline ResolvedFilterUsingActionProto& operator=(const ResolvedFilterUsingActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedFilterUsingActionProto(ResolvedFilterUsingActionProto&& from) noexcept
    : ResolvedFilterUsingActionProto() {
    *this = ::std::move(from);
  }

  inline ResolvedFilterUsingActionProto& operator=(ResolvedFilterUsingActionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedFilterUsingActionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedFilterUsingActionProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedFilterUsingActionProto*>(
               &_ResolvedFilterUsingActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    177;

  void Swap(ResolvedFilterUsingActionProto* other);
  friend void swap(ResolvedFilterUsingActionProto& a, ResolvedFilterUsingActionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedFilterUsingActionProto* New() const final {
    return CreateMaybeMessage<ResolvedFilterUsingActionProto>(NULL);
  }

  ResolvedFilterUsingActionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedFilterUsingActionProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedFilterUsingActionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string predicate_str = 3;
  bool has_predicate_str() const;
  void clear_predicate_str();
  static const int kPredicateStrFieldNumber = 3;
  const ::std::string& predicate_str() const;
  void set_predicate_str(const ::std::string& value);
  #if LANG_CXX11
  void set_predicate_str(::std::string&& value);
  #endif
  void set_predicate_str(const char* value);
  void set_predicate_str(const char* value, size_t size);
  ::std::string* mutable_predicate_str();
  ::std::string* release_predicate_str();
  void set_allocated_predicate_str(::std::string* predicate_str);

  // optional .zetasql.ResolvedAlterActionProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterActionProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterActionProto& parent() const;
  ::zetasql::ResolvedAlterActionProto* release_parent();
  ::zetasql::ResolvedAlterActionProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent);

  // optional .zetasql.AnyResolvedExprProto predicate = 2;
  bool has_predicate() const;
  void clear_predicate();
  static const int kPredicateFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_predicate() const;
  public:
  const ::zetasql::AnyResolvedExprProto& predicate() const;
  ::zetasql::AnyResolvedExprProto* release_predicate();
  ::zetasql::AnyResolvedExprProto* mutable_predicate();
  void set_allocated_predicate(::zetasql::AnyResolvedExprProto* predicate);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedFilterUsingActionProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_predicate();
  void clear_has_predicate();
  void set_has_predicate_str();
  void clear_has_predicate_str();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr predicate_str_;
  ::zetasql::ResolvedAlterActionProto* parent_;
  ::zetasql::AnyResolvedExprProto* predicate_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedRevokeFromActionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedRevokeFromActionProto) */ {
 public:
  ResolvedRevokeFromActionProto();
  virtual ~ResolvedRevokeFromActionProto();

  ResolvedRevokeFromActionProto(const ResolvedRevokeFromActionProto& from);

  inline ResolvedRevokeFromActionProto& operator=(const ResolvedRevokeFromActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedRevokeFromActionProto(ResolvedRevokeFromActionProto&& from) noexcept
    : ResolvedRevokeFromActionProto() {
    *this = ::std::move(from);
  }

  inline ResolvedRevokeFromActionProto& operator=(ResolvedRevokeFromActionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedRevokeFromActionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedRevokeFromActionProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedRevokeFromActionProto*>(
               &_ResolvedRevokeFromActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    178;

  void Swap(ResolvedRevokeFromActionProto* other);
  friend void swap(ResolvedRevokeFromActionProto& a, ResolvedRevokeFromActionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedRevokeFromActionProto* New() const final {
    return CreateMaybeMessage<ResolvedRevokeFromActionProto>(NULL);
  }

  ResolvedRevokeFromActionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedRevokeFromActionProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedRevokeFromActionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.AnyResolvedExprProto revokee_expr_list = 2;
  int revokee_expr_list_size() const;
  void clear_revokee_expr_list();
  static const int kRevokeeExprListFieldNumber = 2;
  ::zetasql::AnyResolvedExprProto* mutable_revokee_expr_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
      mutable_revokee_expr_list();
  const ::zetasql::AnyResolvedExprProto& revokee_expr_list(int index) const;
  ::zetasql::AnyResolvedExprProto* add_revokee_expr_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
      revokee_expr_list() const;

  // optional .zetasql.ResolvedAlterActionProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterActionProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterActionProto& parent() const;
  ::zetasql::ResolvedAlterActionProto* release_parent();
  ::zetasql::ResolvedAlterActionProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent);

  // optional bool is_revoke_from_all = 3;
  bool has_is_revoke_from_all() const;
  void clear_is_revoke_from_all();
  static const int kIsRevokeFromAllFieldNumber = 3;
  bool is_revoke_from_all() const;
  void set_is_revoke_from_all(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedRevokeFromActionProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_is_revoke_from_all();
  void clear_has_is_revoke_from_all();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto > revokee_expr_list_;
  ::zetasql::ResolvedAlterActionProto* parent_;
  bool is_revoke_from_all_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedRenameToActionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedRenameToActionProto) */ {
 public:
  ResolvedRenameToActionProto();
  virtual ~ResolvedRenameToActionProto();

  ResolvedRenameToActionProto(const ResolvedRenameToActionProto& from);

  inline ResolvedRenameToActionProto& operator=(const ResolvedRenameToActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedRenameToActionProto(ResolvedRenameToActionProto&& from) noexcept
    : ResolvedRenameToActionProto() {
    *this = ::std::move(from);
  }

  inline ResolvedRenameToActionProto& operator=(ResolvedRenameToActionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedRenameToActionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedRenameToActionProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedRenameToActionProto*>(
               &_ResolvedRenameToActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    179;

  void Swap(ResolvedRenameToActionProto* other);
  friend void swap(ResolvedRenameToActionProto& a, ResolvedRenameToActionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedRenameToActionProto* New() const final {
    return CreateMaybeMessage<ResolvedRenameToActionProto>(NULL);
  }

  ResolvedRenameToActionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedRenameToActionProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedRenameToActionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string new_path = 2;
  int new_path_size() const;
  void clear_new_path();
  static const int kNewPathFieldNumber = 2;
  const ::std::string& new_path(int index) const;
  ::std::string* mutable_new_path(int index);
  void set_new_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_new_path(int index, ::std::string&& value);
  #endif
  void set_new_path(int index, const char* value);
  void set_new_path(int index, const char* value, size_t size);
  ::std::string* add_new_path();
  void add_new_path(const ::std::string& value);
  #if LANG_CXX11
  void add_new_path(::std::string&& value);
  #endif
  void add_new_path(const char* value);
  void add_new_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& new_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_new_path();

  // optional .zetasql.ResolvedAlterActionProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterActionProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterActionProto& parent() const;
  ::zetasql::ResolvedAlterActionProto* release_parent();
  ::zetasql::ResolvedAlterActionProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedRenameToActionProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> new_path_;
  ::zetasql::ResolvedAlterActionProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAlterPrivilegeRestrictionStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAlterPrivilegeRestrictionStmtProto) */ {
 public:
  ResolvedAlterPrivilegeRestrictionStmtProto();
  virtual ~ResolvedAlterPrivilegeRestrictionStmtProto();

  ResolvedAlterPrivilegeRestrictionStmtProto(const ResolvedAlterPrivilegeRestrictionStmtProto& from);

  inline ResolvedAlterPrivilegeRestrictionStmtProto& operator=(const ResolvedAlterPrivilegeRestrictionStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAlterPrivilegeRestrictionStmtProto(ResolvedAlterPrivilegeRestrictionStmtProto&& from) noexcept
    : ResolvedAlterPrivilegeRestrictionStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAlterPrivilegeRestrictionStmtProto& operator=(ResolvedAlterPrivilegeRestrictionStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAlterPrivilegeRestrictionStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAlterPrivilegeRestrictionStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAlterPrivilegeRestrictionStmtProto*>(
               &_ResolvedAlterPrivilegeRestrictionStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    180;

  void Swap(ResolvedAlterPrivilegeRestrictionStmtProto* other);
  friend void swap(ResolvedAlterPrivilegeRestrictionStmtProto& a, ResolvedAlterPrivilegeRestrictionStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAlterPrivilegeRestrictionStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedAlterPrivilegeRestrictionStmtProto>(NULL);
  }

  ResolvedAlterPrivilegeRestrictionStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAlterPrivilegeRestrictionStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAlterPrivilegeRestrictionStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedPrivilegeProto column_privilege_list = 2;
  int column_privilege_list_size() const;
  void clear_column_privilege_list();
  static const int kColumnPrivilegeListFieldNumber = 2;
  ::zetasql::ResolvedPrivilegeProto* mutable_column_privilege_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedPrivilegeProto >*
      mutable_column_privilege_list();
  const ::zetasql::ResolvedPrivilegeProto& column_privilege_list(int index) const;
  ::zetasql::ResolvedPrivilegeProto* add_column_privilege_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedPrivilegeProto >&
      column_privilege_list() const;

  // optional string object_type = 3;
  bool has_object_type() const;
  void clear_object_type();
  static const int kObjectTypeFieldNumber = 3;
  const ::std::string& object_type() const;
  void set_object_type(const ::std::string& value);
  #if LANG_CXX11
  void set_object_type(::std::string&& value);
  #endif
  void set_object_type(const char* value);
  void set_object_type(const char* value, size_t size);
  ::std::string* mutable_object_type();
  ::std::string* release_object_type();
  void set_allocated_object_type(::std::string* object_type);

  // optional .zetasql.ResolvedAlterObjectStmtProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterObjectStmtProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterObjectStmtProto& parent() const;
  ::zetasql::ResolvedAlterObjectStmtProto* release_parent();
  ::zetasql::ResolvedAlterObjectStmtProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterObjectStmtProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAlterPrivilegeRestrictionStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_object_type();
  void clear_has_object_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedPrivilegeProto > column_privilege_list_;
  ::google::protobuf::internal::ArenaStringPtr object_type_;
  ::zetasql::ResolvedAlterObjectStmtProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAlterRowAccessPolicyStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAlterRowAccessPolicyStmtProto) */ {
 public:
  ResolvedAlterRowAccessPolicyStmtProto();
  virtual ~ResolvedAlterRowAccessPolicyStmtProto();

  ResolvedAlterRowAccessPolicyStmtProto(const ResolvedAlterRowAccessPolicyStmtProto& from);

  inline ResolvedAlterRowAccessPolicyStmtProto& operator=(const ResolvedAlterRowAccessPolicyStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAlterRowAccessPolicyStmtProto(ResolvedAlterRowAccessPolicyStmtProto&& from) noexcept
    : ResolvedAlterRowAccessPolicyStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAlterRowAccessPolicyStmtProto& operator=(ResolvedAlterRowAccessPolicyStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAlterRowAccessPolicyStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAlterRowAccessPolicyStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAlterRowAccessPolicyStmtProto*>(
               &_ResolvedAlterRowAccessPolicyStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    181;

  void Swap(ResolvedAlterRowAccessPolicyStmtProto* other);
  friend void swap(ResolvedAlterRowAccessPolicyStmtProto& a, ResolvedAlterRowAccessPolicyStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAlterRowAccessPolicyStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedAlterRowAccessPolicyStmtProto>(NULL);
  }

  ResolvedAlterRowAccessPolicyStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAlterRowAccessPolicyStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAlterRowAccessPolicyStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .zetasql.ResolvedAlterObjectStmtProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterObjectStmtProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterObjectStmtProto& parent() const;
  ::zetasql::ResolvedAlterObjectStmtProto* release_parent();
  ::zetasql::ResolvedAlterObjectStmtProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterObjectStmtProto* parent);

  // optional .zetasql.ResolvedTableScanProto table_scan = 6;
  bool has_table_scan() const;
  void clear_table_scan();
  static const int kTableScanFieldNumber = 6;
  private:
  const ::zetasql::ResolvedTableScanProto& _internal_table_scan() const;
  public:
  const ::zetasql::ResolvedTableScanProto& table_scan() const;
  ::zetasql::ResolvedTableScanProto* release_table_scan();
  ::zetasql::ResolvedTableScanProto* mutable_table_scan();
  void set_allocated_table_scan(::zetasql::ResolvedTableScanProto* table_scan);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAlterRowAccessPolicyStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_name();
  void clear_has_name();
  void set_has_table_scan();
  void clear_has_table_scan();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::zetasql::ResolvedAlterObjectStmtProto* parent_;
  ::zetasql::ResolvedTableScanProto* table_scan_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAlterAllRowAccessPoliciesStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAlterAllRowAccessPoliciesStmtProto) */ {
 public:
  ResolvedAlterAllRowAccessPoliciesStmtProto();
  virtual ~ResolvedAlterAllRowAccessPoliciesStmtProto();

  ResolvedAlterAllRowAccessPoliciesStmtProto(const ResolvedAlterAllRowAccessPoliciesStmtProto& from);

  inline ResolvedAlterAllRowAccessPoliciesStmtProto& operator=(const ResolvedAlterAllRowAccessPoliciesStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAlterAllRowAccessPoliciesStmtProto(ResolvedAlterAllRowAccessPoliciesStmtProto&& from) noexcept
    : ResolvedAlterAllRowAccessPoliciesStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAlterAllRowAccessPoliciesStmtProto& operator=(ResolvedAlterAllRowAccessPoliciesStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAlterAllRowAccessPoliciesStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAlterAllRowAccessPoliciesStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAlterAllRowAccessPoliciesStmtProto*>(
               &_ResolvedAlterAllRowAccessPoliciesStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    182;

  void Swap(ResolvedAlterAllRowAccessPoliciesStmtProto* other);
  friend void swap(ResolvedAlterAllRowAccessPoliciesStmtProto& a, ResolvedAlterAllRowAccessPoliciesStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAlterAllRowAccessPoliciesStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedAlterAllRowAccessPoliciesStmtProto>(NULL);
  }

  ResolvedAlterAllRowAccessPoliciesStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAlterAllRowAccessPoliciesStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAlterAllRowAccessPoliciesStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedAlterObjectStmtProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterObjectStmtProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterObjectStmtProto& parent() const;
  ::zetasql::ResolvedAlterObjectStmtProto* release_parent();
  ::zetasql::ResolvedAlterObjectStmtProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterObjectStmtProto* parent);

  // optional .zetasql.ResolvedTableScanProto table_scan = 6;
  bool has_table_scan() const;
  void clear_table_scan();
  static const int kTableScanFieldNumber = 6;
  private:
  const ::zetasql::ResolvedTableScanProto& _internal_table_scan() const;
  public:
  const ::zetasql::ResolvedTableScanProto& table_scan() const;
  ::zetasql::ResolvedTableScanProto* release_table_scan();
  ::zetasql::ResolvedTableScanProto* mutable_table_scan();
  void set_allocated_table_scan(::zetasql::ResolvedTableScanProto* table_scan);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAlterAllRowAccessPoliciesStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_table_scan();
  void clear_has_table_scan();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedAlterObjectStmtProto* parent_;
  ::zetasql::ResolvedTableScanProto* table_scan_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedCreateConstantStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedCreateConstantStmtProto) */ {
 public:
  ResolvedCreateConstantStmtProto();
  virtual ~ResolvedCreateConstantStmtProto();

  ResolvedCreateConstantStmtProto(const ResolvedCreateConstantStmtProto& from);

  inline ResolvedCreateConstantStmtProto& operator=(const ResolvedCreateConstantStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedCreateConstantStmtProto(ResolvedCreateConstantStmtProto&& from) noexcept
    : ResolvedCreateConstantStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedCreateConstantStmtProto& operator=(ResolvedCreateConstantStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedCreateConstantStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedCreateConstantStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedCreateConstantStmtProto*>(
               &_ResolvedCreateConstantStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    183;

  void Swap(ResolvedCreateConstantStmtProto* other);
  friend void swap(ResolvedCreateConstantStmtProto& a, ResolvedCreateConstantStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedCreateConstantStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedCreateConstantStmtProto>(NULL);
  }

  ResolvedCreateConstantStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedCreateConstantStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedCreateConstantStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedCreateStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedCreateStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedCreateStatementProto& parent() const;
  ::zetasql::ResolvedCreateStatementProto* release_parent();
  ::zetasql::ResolvedCreateStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedCreateStatementProto* parent);

  // optional .zetasql.AnyResolvedExprProto expr = 2;
  bool has_expr() const;
  void clear_expr();
  static const int kExprFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_expr() const;
  public:
  const ::zetasql::AnyResolvedExprProto& expr() const;
  ::zetasql::AnyResolvedExprProto* release_expr();
  ::zetasql::AnyResolvedExprProto* mutable_expr();
  void set_allocated_expr(::zetasql::AnyResolvedExprProto* expr);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedCreateConstantStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_expr();
  void clear_has_expr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedCreateStatementProto* parent_;
  ::zetasql::AnyResolvedExprProto* expr_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedCreateFunctionStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedCreateFunctionStmtProto) */ {
 public:
  ResolvedCreateFunctionStmtProto();
  virtual ~ResolvedCreateFunctionStmtProto();

  ResolvedCreateFunctionStmtProto(const ResolvedCreateFunctionStmtProto& from);

  inline ResolvedCreateFunctionStmtProto& operator=(const ResolvedCreateFunctionStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedCreateFunctionStmtProto(ResolvedCreateFunctionStmtProto&& from) noexcept
    : ResolvedCreateFunctionStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedCreateFunctionStmtProto& operator=(ResolvedCreateFunctionStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedCreateFunctionStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedCreateFunctionStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedCreateFunctionStmtProto*>(
               &_ResolvedCreateFunctionStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    184;

  void Swap(ResolvedCreateFunctionStmtProto* other);
  friend void swap(ResolvedCreateFunctionStmtProto& a, ResolvedCreateFunctionStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedCreateFunctionStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedCreateFunctionStmtProto>(NULL);
  }

  ResolvedCreateFunctionStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedCreateFunctionStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedCreateFunctionStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedOptionProto option_list = 7;
  int option_list_size() const;
  void clear_option_list();
  static const int kOptionListFieldNumber = 7;
  ::zetasql::ResolvedOptionProto* mutable_option_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_option_list();
  const ::zetasql::ResolvedOptionProto& option_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_option_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      option_list() const;

  // repeated .zetasql.ResolvedComputedColumnProto aggregate_expression_list = 9;
  int aggregate_expression_list_size() const;
  void clear_aggregate_expression_list();
  static const int kAggregateExpressionListFieldNumber = 9;
  ::zetasql::ResolvedComputedColumnProto* mutable_aggregate_expression_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >*
      mutable_aggregate_expression_list();
  const ::zetasql::ResolvedComputedColumnProto& aggregate_expression_list(int index) const;
  ::zetasql::ResolvedComputedColumnProto* add_aggregate_expression_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >&
      aggregate_expression_list() const;

  // repeated string argument_name_list = 11;
  int argument_name_list_size() const;
  void clear_argument_name_list();
  static const int kArgumentNameListFieldNumber = 11;
  const ::std::string& argument_name_list(int index) const;
  ::std::string* mutable_argument_name_list(int index);
  void set_argument_name_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_argument_name_list(int index, ::std::string&& value);
  #endif
  void set_argument_name_list(int index, const char* value);
  void set_argument_name_list(int index, const char* value, size_t size);
  ::std::string* add_argument_name_list();
  void add_argument_name_list(const ::std::string& value);
  #if LANG_CXX11
  void add_argument_name_list(::std::string&& value);
  #endif
  void add_argument_name_list(const char* value);
  void add_argument_name_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& argument_name_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_argument_name_list();

  // optional string language = 4;
  bool has_language() const;
  void clear_language();
  static const int kLanguageFieldNumber = 4;
  const ::std::string& language() const;
  void set_language(const ::std::string& value);
  #if LANG_CXX11
  void set_language(::std::string&& value);
  #endif
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  ::std::string* mutable_language();
  ::std::string* release_language();
  void set_allocated_language(::std::string* language);

  // optional string code = 5;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 5;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional .zetasql.ResolvedCreateStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedCreateStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedCreateStatementProto& parent() const;
  ::zetasql::ResolvedCreateStatementProto* release_parent();
  ::zetasql::ResolvedCreateStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedCreateStatementProto* parent);

  // optional .zetasql.TypeProto return_type = 3;
  bool has_return_type() const;
  void clear_return_type();
  static const int kReturnTypeFieldNumber = 3;
  private:
  const ::zetasql::TypeProto& _internal_return_type() const;
  public:
  const ::zetasql::TypeProto& return_type() const;
  ::zetasql::TypeProto* release_return_type();
  ::zetasql::TypeProto* mutable_return_type();
  void set_allocated_return_type(::zetasql::TypeProto* return_type);

  // optional .zetasql.AnyResolvedExprProto function_expression = 6;
  bool has_function_expression() const;
  void clear_function_expression();
  static const int kFunctionExpressionFieldNumber = 6;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_function_expression() const;
  public:
  const ::zetasql::AnyResolvedExprProto& function_expression() const;
  ::zetasql::AnyResolvedExprProto* release_function_expression();
  ::zetasql::AnyResolvedExprProto* mutable_function_expression();
  void set_allocated_function_expression(::zetasql::AnyResolvedExprProto* function_expression);

  // optional .zetasql.FunctionSignatureProto signature = 10;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 10;
  private:
  const ::zetasql::FunctionSignatureProto& _internal_signature() const;
  public:
  const ::zetasql::FunctionSignatureProto& signature() const;
  ::zetasql::FunctionSignatureProto* release_signature();
  ::zetasql::FunctionSignatureProto* mutable_signature();
  void set_allocated_signature(::zetasql::FunctionSignatureProto* signature);

  // optional .zetasql.ResolvedConnectionProto connection = 16;
  bool has_connection() const;
  void clear_connection();
  static const int kConnectionFieldNumber = 16;
  private:
  const ::zetasql::ResolvedConnectionProto& _internal_connection() const;
  public:
  const ::zetasql::ResolvedConnectionProto& connection() const;
  ::zetasql::ResolvedConnectionProto* release_connection();
  ::zetasql::ResolvedConnectionProto* mutable_connection();
  void set_allocated_connection(::zetasql::ResolvedConnectionProto* connection);

  // optional .zetasql.ResolvedCreateStatementEnums.SqlSecurity sql_security = 12;
  bool has_sql_security() const;
  void clear_sql_security();
  static const int kSqlSecurityFieldNumber = 12;
  ::zetasql::ResolvedCreateStatementEnums_SqlSecurity sql_security() const;
  void set_sql_security(::zetasql::ResolvedCreateStatementEnums_SqlSecurity value);

  // optional bool has_explicit_return_type = 13;
  bool has_has_explicit_return_type() const;
  void clear_has_explicit_return_type();
  static const int kHasExplicitReturnTypeFieldNumber = 13;
  bool has_explicit_return_type() const;
  void set_has_explicit_return_type(bool value);

  // optional bool is_aggregate = 8;
  bool has_is_aggregate() const;
  void clear_is_aggregate();
  static const int kIsAggregateFieldNumber = 8;
  bool is_aggregate() const;
  void set_is_aggregate(bool value);

  // optional bool is_remote = 15;
  bool has_is_remote() const;
  void clear_is_remote();
  static const int kIsRemoteFieldNumber = 15;
  bool is_remote() const;
  void set_is_remote(bool value);

  // optional .zetasql.ResolvedCreateStatementEnums.DeterminismLevel determinism_level = 14;
  bool has_determinism_level() const;
  void clear_determinism_level();
  static const int kDeterminismLevelFieldNumber = 14;
  ::zetasql::ResolvedCreateStatementEnums_DeterminismLevel determinism_level() const;
  void set_determinism_level(::zetasql::ResolvedCreateStatementEnums_DeterminismLevel value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedCreateFunctionStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_has_explicit_return_type();
  void clear_has_has_explicit_return_type();
  void set_has_return_type();
  void clear_has_return_type();
  void set_has_signature();
  void clear_has_signature();
  void set_has_is_aggregate();
  void clear_has_is_aggregate();
  void set_has_language();
  void clear_has_language();
  void set_has_code();
  void clear_has_code();
  void set_has_function_expression();
  void clear_has_function_expression();
  void set_has_sql_security();
  void clear_has_sql_security();
  void set_has_determinism_level();
  void clear_has_determinism_level();
  void set_has_is_remote();
  void clear_has_is_remote();
  void set_has_connection();
  void clear_has_connection();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > option_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto > aggregate_expression_list_;
  ::google::protobuf::RepeatedPtrField< ::std::string> argument_name_list_;
  ::google::protobuf::internal::ArenaStringPtr language_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::zetasql::ResolvedCreateStatementProto* parent_;
  ::zetasql::TypeProto* return_type_;
  ::zetasql::AnyResolvedExprProto* function_expression_;
  ::zetasql::FunctionSignatureProto* signature_;
  ::zetasql::ResolvedConnectionProto* connection_;
  int sql_security_;
  bool has_explicit_return_type_;
  bool is_aggregate_;
  bool is_remote_;
  int determinism_level_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedArgumentDefProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedArgumentDefProto) */ {
 public:
  ResolvedArgumentDefProto();
  virtual ~ResolvedArgumentDefProto();

  ResolvedArgumentDefProto(const ResolvedArgumentDefProto& from);

  inline ResolvedArgumentDefProto& operator=(const ResolvedArgumentDefProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedArgumentDefProto(ResolvedArgumentDefProto&& from) noexcept
    : ResolvedArgumentDefProto() {
    *this = ::std::move(from);
  }

  inline ResolvedArgumentDefProto& operator=(ResolvedArgumentDefProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedArgumentDefProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedArgumentDefProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedArgumentDefProto*>(
               &_ResolvedArgumentDefProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    185;

  void Swap(ResolvedArgumentDefProto* other);
  friend void swap(ResolvedArgumentDefProto& a, ResolvedArgumentDefProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedArgumentDefProto* New() const final {
    return CreateMaybeMessage<ResolvedArgumentDefProto>(NULL);
  }

  ResolvedArgumentDefProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedArgumentDefProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedArgumentDefProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.TypeProto type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  private:
  const ::zetasql::TypeProto& _internal_type() const;
  public:
  const ::zetasql::TypeProto& type() const;
  ::zetasql::TypeProto* release_type();
  ::zetasql::TypeProto* mutable_type();
  void set_allocated_type(::zetasql::TypeProto* type);

  // optional .zetasql.ResolvedArgumentDefEnums.ArgumentKind argument_kind = 4;
  bool has_argument_kind() const;
  void clear_argument_kind();
  static const int kArgumentKindFieldNumber = 4;
  ::zetasql::ResolvedArgumentDefEnums_ArgumentKind argument_kind() const;
  void set_argument_kind(::zetasql::ResolvedArgumentDefEnums_ArgumentKind value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedArgumentDefProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_argument_kind();
  void clear_has_argument_kind();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::TypeProto* type_;
  int argument_kind_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedArgumentRefProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedArgumentRefProto) */ {
 public:
  ResolvedArgumentRefProto();
  virtual ~ResolvedArgumentRefProto();

  ResolvedArgumentRefProto(const ResolvedArgumentRefProto& from);

  inline ResolvedArgumentRefProto& operator=(const ResolvedArgumentRefProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedArgumentRefProto(ResolvedArgumentRefProto&& from) noexcept
    : ResolvedArgumentRefProto() {
    *this = ::std::move(from);
  }

  inline ResolvedArgumentRefProto& operator=(ResolvedArgumentRefProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedArgumentRefProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedArgumentRefProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedArgumentRefProto*>(
               &_ResolvedArgumentRefProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    186;

  void Swap(ResolvedArgumentRefProto* other);
  friend void swap(ResolvedArgumentRefProto& a, ResolvedArgumentRefProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedArgumentRefProto* New() const final {
    return CreateMaybeMessage<ResolvedArgumentRefProto>(NULL);
  }

  ResolvedArgumentRefProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedArgumentRefProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedArgumentRefProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .zetasql.ResolvedExprProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedExprProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedExprProto& parent() const;
  ::zetasql::ResolvedExprProto* release_parent();
  ::zetasql::ResolvedExprProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedExprProto* parent);

  // optional .zetasql.ResolvedArgumentDefEnums.ArgumentKind argument_kind = 3;
  bool has_argument_kind() const;
  void clear_argument_kind();
  static const int kArgumentKindFieldNumber = 3;
  ::zetasql::ResolvedArgumentDefEnums_ArgumentKind argument_kind() const;
  void set_argument_kind(::zetasql::ResolvedArgumentDefEnums_ArgumentKind value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedArgumentRefProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_name();
  void clear_has_name();
  void set_has_argument_kind();
  void clear_has_argument_kind();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::zetasql::ResolvedExprProto* parent_;
  int argument_kind_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedCreateTableFunctionStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedCreateTableFunctionStmtProto) */ {
 public:
  ResolvedCreateTableFunctionStmtProto();
  virtual ~ResolvedCreateTableFunctionStmtProto();

  ResolvedCreateTableFunctionStmtProto(const ResolvedCreateTableFunctionStmtProto& from);

  inline ResolvedCreateTableFunctionStmtProto& operator=(const ResolvedCreateTableFunctionStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedCreateTableFunctionStmtProto(ResolvedCreateTableFunctionStmtProto&& from) noexcept
    : ResolvedCreateTableFunctionStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedCreateTableFunctionStmtProto& operator=(ResolvedCreateTableFunctionStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedCreateTableFunctionStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedCreateTableFunctionStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedCreateTableFunctionStmtProto*>(
               &_ResolvedCreateTableFunctionStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    187;

  void Swap(ResolvedCreateTableFunctionStmtProto* other);
  friend void swap(ResolvedCreateTableFunctionStmtProto& a, ResolvedCreateTableFunctionStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedCreateTableFunctionStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedCreateTableFunctionStmtProto>(NULL);
  }

  ResolvedCreateTableFunctionStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedCreateTableFunctionStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedCreateTableFunctionStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string argument_name_list = 2;
  int argument_name_list_size() const;
  void clear_argument_name_list();
  static const int kArgumentNameListFieldNumber = 2;
  const ::std::string& argument_name_list(int index) const;
  ::std::string* mutable_argument_name_list(int index);
  void set_argument_name_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_argument_name_list(int index, ::std::string&& value);
  #endif
  void set_argument_name_list(int index, const char* value);
  void set_argument_name_list(int index, const char* value, size_t size);
  ::std::string* add_argument_name_list();
  void add_argument_name_list(const ::std::string& value);
  #if LANG_CXX11
  void add_argument_name_list(::std::string&& value);
  #endif
  void add_argument_name_list(const char* value);
  void add_argument_name_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& argument_name_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_argument_name_list();

  // repeated .zetasql.ResolvedOptionProto option_list = 4;
  int option_list_size() const;
  void clear_option_list();
  static const int kOptionListFieldNumber = 4;
  ::zetasql::ResolvedOptionProto* mutable_option_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_option_list();
  const ::zetasql::ResolvedOptionProto& option_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_option_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      option_list() const;

  // repeated .zetasql.ResolvedOutputColumnProto output_column_list = 8;
  int output_column_list_size() const;
  void clear_output_column_list();
  static const int kOutputColumnListFieldNumber = 8;
  ::zetasql::ResolvedOutputColumnProto* mutable_output_column_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >*
      mutable_output_column_list();
  const ::zetasql::ResolvedOutputColumnProto& output_column_list(int index) const;
  ::zetasql::ResolvedOutputColumnProto* add_output_column_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >&
      output_column_list() const;

  // optional string language = 5;
  bool has_language() const;
  void clear_language();
  static const int kLanguageFieldNumber = 5;
  const ::std::string& language() const;
  void set_language(const ::std::string& value);
  #if LANG_CXX11
  void set_language(::std::string&& value);
  #endif
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  ::std::string* mutable_language();
  ::std::string* release_language();
  void set_allocated_language(::std::string* language);

  // optional string code = 6;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 6;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional .zetasql.ResolvedCreateStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedCreateStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedCreateStatementProto& parent() const;
  ::zetasql::ResolvedCreateStatementProto* release_parent();
  ::zetasql::ResolvedCreateStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedCreateStatementProto* parent);

  // optional .zetasql.FunctionSignatureProto signature = 3;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 3;
  private:
  const ::zetasql::FunctionSignatureProto& _internal_signature() const;
  public:
  const ::zetasql::FunctionSignatureProto& signature() const;
  ::zetasql::FunctionSignatureProto* release_signature();
  ::zetasql::FunctionSignatureProto* mutable_signature();
  void set_allocated_signature(::zetasql::FunctionSignatureProto* signature);

  // optional .zetasql.AnyResolvedScanProto query = 7;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 7;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_query() const;
  public:
  const ::zetasql::AnyResolvedScanProto& query() const;
  ::zetasql::AnyResolvedScanProto* release_query();
  ::zetasql::AnyResolvedScanProto* mutable_query();
  void set_allocated_query(::zetasql::AnyResolvedScanProto* query);

  // optional .zetasql.ResolvedCreateStatementEnums.SqlSecurity sql_security = 10;
  bool has_sql_security() const;
  void clear_sql_security();
  static const int kSqlSecurityFieldNumber = 10;
  ::zetasql::ResolvedCreateStatementEnums_SqlSecurity sql_security() const;
  void set_sql_security(::zetasql::ResolvedCreateStatementEnums_SqlSecurity value);

  // optional bool has_explicit_return_schema = 11;
  bool has_has_explicit_return_schema() const;
  void clear_has_explicit_return_schema();
  static const int kHasExplicitReturnSchemaFieldNumber = 11;
  bool has_explicit_return_schema() const;
  void set_has_explicit_return_schema(bool value);

  // optional bool is_value_table = 9;
  bool has_is_value_table() const;
  void clear_is_value_table();
  static const int kIsValueTableFieldNumber = 9;
  bool is_value_table() const;
  void set_is_value_table(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedCreateTableFunctionStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_signature();
  void clear_has_signature();
  void set_has_has_explicit_return_schema();
  void clear_has_has_explicit_return_schema();
  void set_has_language();
  void clear_has_language();
  void set_has_code();
  void clear_has_code();
  void set_has_query();
  void clear_has_query();
  void set_has_is_value_table();
  void clear_has_is_value_table();
  void set_has_sql_security();
  void clear_has_sql_security();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> argument_name_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > option_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto > output_column_list_;
  ::google::protobuf::internal::ArenaStringPtr language_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::zetasql::ResolvedCreateStatementProto* parent_;
  ::zetasql::FunctionSignatureProto* signature_;
  ::zetasql::AnyResolvedScanProto* query_;
  int sql_security_;
  bool has_explicit_return_schema_;
  bool is_value_table_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedRelationArgumentScanProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedRelationArgumentScanProto) */ {
 public:
  ResolvedRelationArgumentScanProto();
  virtual ~ResolvedRelationArgumentScanProto();

  ResolvedRelationArgumentScanProto(const ResolvedRelationArgumentScanProto& from);

  inline ResolvedRelationArgumentScanProto& operator=(const ResolvedRelationArgumentScanProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedRelationArgumentScanProto(ResolvedRelationArgumentScanProto&& from) noexcept
    : ResolvedRelationArgumentScanProto() {
    *this = ::std::move(from);
  }

  inline ResolvedRelationArgumentScanProto& operator=(ResolvedRelationArgumentScanProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedRelationArgumentScanProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedRelationArgumentScanProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedRelationArgumentScanProto*>(
               &_ResolvedRelationArgumentScanProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    188;

  void Swap(ResolvedRelationArgumentScanProto* other);
  friend void swap(ResolvedRelationArgumentScanProto& a, ResolvedRelationArgumentScanProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedRelationArgumentScanProto* New() const final {
    return CreateMaybeMessage<ResolvedRelationArgumentScanProto>(NULL);
  }

  ResolvedRelationArgumentScanProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedRelationArgumentScanProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedRelationArgumentScanProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .zetasql.ResolvedScanProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedScanProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedScanProto& parent() const;
  ::zetasql::ResolvedScanProto* release_parent();
  ::zetasql::ResolvedScanProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedScanProto* parent);

  // optional bool is_value_table = 3;
  bool has_is_value_table() const;
  void clear_is_value_table();
  static const int kIsValueTableFieldNumber = 3;
  bool is_value_table() const;
  void set_is_value_table(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedRelationArgumentScanProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_name();
  void clear_has_name();
  void set_has_is_value_table();
  void clear_has_is_value_table();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::zetasql::ResolvedScanProto* parent_;
  bool is_value_table_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedArgumentListProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedArgumentListProto) */ {
 public:
  ResolvedArgumentListProto();
  virtual ~ResolvedArgumentListProto();

  ResolvedArgumentListProto(const ResolvedArgumentListProto& from);

  inline ResolvedArgumentListProto& operator=(const ResolvedArgumentListProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedArgumentListProto(ResolvedArgumentListProto&& from) noexcept
    : ResolvedArgumentListProto() {
    *this = ::std::move(from);
  }

  inline ResolvedArgumentListProto& operator=(ResolvedArgumentListProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedArgumentListProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedArgumentListProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedArgumentListProto*>(
               &_ResolvedArgumentListProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    189;

  void Swap(ResolvedArgumentListProto* other);
  friend void swap(ResolvedArgumentListProto& a, ResolvedArgumentListProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedArgumentListProto* New() const final {
    return CreateMaybeMessage<ResolvedArgumentListProto>(NULL);
  }

  ResolvedArgumentListProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedArgumentListProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedArgumentListProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedArgumentDefProto arg_list = 2;
  int arg_list_size() const;
  void clear_arg_list();
  static const int kArgListFieldNumber = 2;
  ::zetasql::ResolvedArgumentDefProto* mutable_arg_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedArgumentDefProto >*
      mutable_arg_list();
  const ::zetasql::ResolvedArgumentDefProto& arg_list(int index) const;
  ::zetasql::ResolvedArgumentDefProto* add_arg_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedArgumentDefProto >&
      arg_list() const;

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedArgumentListProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedArgumentDefProto > arg_list_;
  ::zetasql::ResolvedArgumentProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedFunctionSignatureHolderProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedFunctionSignatureHolderProto) */ {
 public:
  ResolvedFunctionSignatureHolderProto();
  virtual ~ResolvedFunctionSignatureHolderProto();

  ResolvedFunctionSignatureHolderProto(const ResolvedFunctionSignatureHolderProto& from);

  inline ResolvedFunctionSignatureHolderProto& operator=(const ResolvedFunctionSignatureHolderProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedFunctionSignatureHolderProto(ResolvedFunctionSignatureHolderProto&& from) noexcept
    : ResolvedFunctionSignatureHolderProto() {
    *this = ::std::move(from);
  }

  inline ResolvedFunctionSignatureHolderProto& operator=(ResolvedFunctionSignatureHolderProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedFunctionSignatureHolderProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedFunctionSignatureHolderProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedFunctionSignatureHolderProto*>(
               &_ResolvedFunctionSignatureHolderProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    190;

  void Swap(ResolvedFunctionSignatureHolderProto* other);
  friend void swap(ResolvedFunctionSignatureHolderProto& a, ResolvedFunctionSignatureHolderProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedFunctionSignatureHolderProto* New() const final {
    return CreateMaybeMessage<ResolvedFunctionSignatureHolderProto>(NULL);
  }

  ResolvedFunctionSignatureHolderProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedFunctionSignatureHolderProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedFunctionSignatureHolderProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.FunctionSignatureProto signature = 2;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 2;
  private:
  const ::zetasql::FunctionSignatureProto& _internal_signature() const;
  public:
  const ::zetasql::FunctionSignatureProto& signature() const;
  ::zetasql::FunctionSignatureProto* release_signature();
  ::zetasql::FunctionSignatureProto* mutable_signature();
  void set_allocated_signature(::zetasql::FunctionSignatureProto* signature);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedFunctionSignatureHolderProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_signature();
  void clear_has_signature();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::FunctionSignatureProto* signature_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedDropFunctionStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedDropFunctionStmtProto) */ {
 public:
  ResolvedDropFunctionStmtProto();
  virtual ~ResolvedDropFunctionStmtProto();

  ResolvedDropFunctionStmtProto(const ResolvedDropFunctionStmtProto& from);

  inline ResolvedDropFunctionStmtProto& operator=(const ResolvedDropFunctionStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedDropFunctionStmtProto(ResolvedDropFunctionStmtProto&& from) noexcept
    : ResolvedDropFunctionStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedDropFunctionStmtProto& operator=(ResolvedDropFunctionStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedDropFunctionStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedDropFunctionStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedDropFunctionStmtProto*>(
               &_ResolvedDropFunctionStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    191;

  void Swap(ResolvedDropFunctionStmtProto* other);
  friend void swap(ResolvedDropFunctionStmtProto& a, ResolvedDropFunctionStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedDropFunctionStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedDropFunctionStmtProto>(NULL);
  }

  ResolvedDropFunctionStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedDropFunctionStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedDropFunctionStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name_path = 3;
  int name_path_size() const;
  void clear_name_path();
  static const int kNamePathFieldNumber = 3;
  const ::std::string& name_path(int index) const;
  ::std::string* mutable_name_path(int index);
  void set_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name_path(int index, ::std::string&& value);
  #endif
  void set_name_path(int index, const char* value);
  void set_name_path(int index, const char* value, size_t size);
  ::std::string* add_name_path();
  void add_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_name_path(::std::string&& value);
  #endif
  void add_name_path(const char* value);
  void add_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_path();

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional .zetasql.ResolvedArgumentListProto arguments = 4;
  bool has_arguments() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 4;
  private:
  const ::zetasql::ResolvedArgumentListProto& _internal_arguments() const;
  public:
  const ::zetasql::ResolvedArgumentListProto& arguments() const;
  ::zetasql::ResolvedArgumentListProto* release_arguments();
  ::zetasql::ResolvedArgumentListProto* mutable_arguments();
  void set_allocated_arguments(::zetasql::ResolvedArgumentListProto* arguments);

  // optional .zetasql.ResolvedFunctionSignatureHolderProto signature = 5;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 5;
  private:
  const ::zetasql::ResolvedFunctionSignatureHolderProto& _internal_signature() const;
  public:
  const ::zetasql::ResolvedFunctionSignatureHolderProto& signature() const;
  ::zetasql::ResolvedFunctionSignatureHolderProto* release_signature();
  ::zetasql::ResolvedFunctionSignatureHolderProto* mutable_signature();
  void set_allocated_signature(::zetasql::ResolvedFunctionSignatureHolderProto* signature);

  // optional bool is_if_exists = 2;
  bool has_is_if_exists() const;
  void clear_is_if_exists();
  static const int kIsIfExistsFieldNumber = 2;
  bool is_if_exists() const;
  void set_is_if_exists(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedDropFunctionStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_is_if_exists();
  void clear_has_is_if_exists();
  void set_has_arguments();
  void clear_has_arguments();
  void set_has_signature();
  void clear_has_signature();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_path_;
  ::zetasql::ResolvedStatementProto* parent_;
  ::zetasql::ResolvedArgumentListProto* arguments_;
  ::zetasql::ResolvedFunctionSignatureHolderProto* signature_;
  bool is_if_exists_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedDropTableFunctionStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedDropTableFunctionStmtProto) */ {
 public:
  ResolvedDropTableFunctionStmtProto();
  virtual ~ResolvedDropTableFunctionStmtProto();

  ResolvedDropTableFunctionStmtProto(const ResolvedDropTableFunctionStmtProto& from);

  inline ResolvedDropTableFunctionStmtProto& operator=(const ResolvedDropTableFunctionStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedDropTableFunctionStmtProto(ResolvedDropTableFunctionStmtProto&& from) noexcept
    : ResolvedDropTableFunctionStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedDropTableFunctionStmtProto& operator=(ResolvedDropTableFunctionStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedDropTableFunctionStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedDropTableFunctionStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedDropTableFunctionStmtProto*>(
               &_ResolvedDropTableFunctionStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    192;

  void Swap(ResolvedDropTableFunctionStmtProto* other);
  friend void swap(ResolvedDropTableFunctionStmtProto& a, ResolvedDropTableFunctionStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedDropTableFunctionStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedDropTableFunctionStmtProto>(NULL);
  }

  ResolvedDropTableFunctionStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedDropTableFunctionStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedDropTableFunctionStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name_path = 3;
  int name_path_size() const;
  void clear_name_path();
  static const int kNamePathFieldNumber = 3;
  const ::std::string& name_path(int index) const;
  ::std::string* mutable_name_path(int index);
  void set_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name_path(int index, ::std::string&& value);
  #endif
  void set_name_path(int index, const char* value);
  void set_name_path(int index, const char* value, size_t size);
  ::std::string* add_name_path();
  void add_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_name_path(::std::string&& value);
  #endif
  void add_name_path(const char* value);
  void add_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_path();

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional bool is_if_exists = 2;
  bool has_is_if_exists() const;
  void clear_is_if_exists();
  static const int kIsIfExistsFieldNumber = 2;
  bool is_if_exists() const;
  void set_is_if_exists(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedDropTableFunctionStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_is_if_exists();
  void clear_has_is_if_exists();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_path_;
  ::zetasql::ResolvedStatementProto* parent_;
  bool is_if_exists_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedCallStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedCallStmtProto) */ {
 public:
  ResolvedCallStmtProto();
  virtual ~ResolvedCallStmtProto();

  ResolvedCallStmtProto(const ResolvedCallStmtProto& from);

  inline ResolvedCallStmtProto& operator=(const ResolvedCallStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedCallStmtProto(ResolvedCallStmtProto&& from) noexcept
    : ResolvedCallStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedCallStmtProto& operator=(ResolvedCallStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedCallStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedCallStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedCallStmtProto*>(
               &_ResolvedCallStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    193;

  void Swap(ResolvedCallStmtProto* other);
  friend void swap(ResolvedCallStmtProto& a, ResolvedCallStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedCallStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedCallStmtProto>(NULL);
  }

  ResolvedCallStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedCallStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedCallStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.AnyResolvedExprProto argument_list = 4;
  int argument_list_size() const;
  void clear_argument_list();
  static const int kArgumentListFieldNumber = 4;
  ::zetasql::AnyResolvedExprProto* mutable_argument_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
      mutable_argument_list();
  const ::zetasql::AnyResolvedExprProto& argument_list(int index) const;
  ::zetasql::AnyResolvedExprProto* add_argument_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
      argument_list() const;

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional .zetasql.ProcedureRefProto procedure = 2;
  bool has_procedure() const;
  void clear_procedure();
  static const int kProcedureFieldNumber = 2;
  private:
  const ::zetasql::ProcedureRefProto& _internal_procedure() const;
  public:
  const ::zetasql::ProcedureRefProto& procedure() const;
  ::zetasql::ProcedureRefProto* release_procedure();
  ::zetasql::ProcedureRefProto* mutable_procedure();
  void set_allocated_procedure(::zetasql::ProcedureRefProto* procedure);

  // optional .zetasql.FunctionSignatureProto signature = 3;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 3;
  private:
  const ::zetasql::FunctionSignatureProto& _internal_signature() const;
  public:
  const ::zetasql::FunctionSignatureProto& signature() const;
  ::zetasql::FunctionSignatureProto* release_signature();
  ::zetasql::FunctionSignatureProto* mutable_signature();
  void set_allocated_signature(::zetasql::FunctionSignatureProto* signature);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedCallStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_procedure();
  void clear_has_procedure();
  void set_has_signature();
  void clear_has_signature();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto > argument_list_;
  ::zetasql::ResolvedStatementProto* parent_;
  ::zetasql::ProcedureRefProto* procedure_;
  ::zetasql::FunctionSignatureProto* signature_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedImportStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedImportStmtProto) */ {
 public:
  ResolvedImportStmtProto();
  virtual ~ResolvedImportStmtProto();

  ResolvedImportStmtProto(const ResolvedImportStmtProto& from);

  inline ResolvedImportStmtProto& operator=(const ResolvedImportStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedImportStmtProto(ResolvedImportStmtProto&& from) noexcept
    : ResolvedImportStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedImportStmtProto& operator=(ResolvedImportStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedImportStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedImportStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedImportStmtProto*>(
               &_ResolvedImportStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    194;

  void Swap(ResolvedImportStmtProto* other);
  friend void swap(ResolvedImportStmtProto& a, ResolvedImportStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedImportStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedImportStmtProto>(NULL);
  }

  ResolvedImportStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedImportStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedImportStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name_path = 3;
  int name_path_size() const;
  void clear_name_path();
  static const int kNamePathFieldNumber = 3;
  const ::std::string& name_path(int index) const;
  ::std::string* mutable_name_path(int index);
  void set_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name_path(int index, ::std::string&& value);
  #endif
  void set_name_path(int index, const char* value);
  void set_name_path(int index, const char* value, size_t size);
  ::std::string* add_name_path();
  void add_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_name_path(::std::string&& value);
  #endif
  void add_name_path(const char* value);
  void add_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_path();

  // repeated string alias_path = 5;
  int alias_path_size() const;
  void clear_alias_path();
  static const int kAliasPathFieldNumber = 5;
  const ::std::string& alias_path(int index) const;
  ::std::string* mutable_alias_path(int index);
  void set_alias_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_alias_path(int index, ::std::string&& value);
  #endif
  void set_alias_path(int index, const char* value);
  void set_alias_path(int index, const char* value, size_t size);
  ::std::string* add_alias_path();
  void add_alias_path(const ::std::string& value);
  #if LANG_CXX11
  void add_alias_path(::std::string&& value);
  #endif
  void add_alias_path(const char* value);
  void add_alias_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& alias_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_alias_path();

  // repeated .zetasql.ResolvedOptionProto option_list = 6;
  int option_list_size() const;
  void clear_option_list();
  static const int kOptionListFieldNumber = 6;
  ::zetasql::ResolvedOptionProto* mutable_option_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_option_list();
  const ::zetasql::ResolvedOptionProto& option_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_option_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      option_list() const;

  // repeated string into_alias_path = 7;
  int into_alias_path_size() const;
  void clear_into_alias_path();
  static const int kIntoAliasPathFieldNumber = 7;
  const ::std::string& into_alias_path(int index) const;
  ::std::string* mutable_into_alias_path(int index);
  void set_into_alias_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_into_alias_path(int index, ::std::string&& value);
  #endif
  void set_into_alias_path(int index, const char* value);
  void set_into_alias_path(int index, const char* value, size_t size);
  ::std::string* add_into_alias_path();
  void add_into_alias_path(const ::std::string& value);
  #if LANG_CXX11
  void add_into_alias_path(::std::string&& value);
  #endif
  void add_into_alias_path(const char* value);
  void add_into_alias_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& into_alias_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_into_alias_path();

  // optional string file_path = 4;
  bool has_file_path() const;
  void clear_file_path();
  static const int kFilePathFieldNumber = 4;
  const ::std::string& file_path() const;
  void set_file_path(const ::std::string& value);
  #if LANG_CXX11
  void set_file_path(::std::string&& value);
  #endif
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  ::std::string* mutable_file_path();
  ::std::string* release_file_path();
  void set_allocated_file_path(::std::string* file_path);

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional .zetasql.ResolvedImportStmtEnums.ImportKind import_kind = 2;
  bool has_import_kind() const;
  void clear_import_kind();
  static const int kImportKindFieldNumber = 2;
  ::zetasql::ResolvedImportStmtEnums_ImportKind import_kind() const;
  void set_import_kind(::zetasql::ResolvedImportStmtEnums_ImportKind value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedImportStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_import_kind();
  void clear_has_import_kind();
  void set_has_file_path();
  void clear_has_file_path();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_path_;
  ::google::protobuf::RepeatedPtrField< ::std::string> alias_path_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > option_list_;
  ::google::protobuf::RepeatedPtrField< ::std::string> into_alias_path_;
  ::google::protobuf::internal::ArenaStringPtr file_path_;
  ::zetasql::ResolvedStatementProto* parent_;
  int import_kind_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedModuleStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedModuleStmtProto) */ {
 public:
  ResolvedModuleStmtProto();
  virtual ~ResolvedModuleStmtProto();

  ResolvedModuleStmtProto(const ResolvedModuleStmtProto& from);

  inline ResolvedModuleStmtProto& operator=(const ResolvedModuleStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedModuleStmtProto(ResolvedModuleStmtProto&& from) noexcept
    : ResolvedModuleStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedModuleStmtProto& operator=(ResolvedModuleStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedModuleStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedModuleStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedModuleStmtProto*>(
               &_ResolvedModuleStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    195;

  void Swap(ResolvedModuleStmtProto* other);
  friend void swap(ResolvedModuleStmtProto& a, ResolvedModuleStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedModuleStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedModuleStmtProto>(NULL);
  }

  ResolvedModuleStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedModuleStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedModuleStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name_path = 2;
  int name_path_size() const;
  void clear_name_path();
  static const int kNamePathFieldNumber = 2;
  const ::std::string& name_path(int index) const;
  ::std::string* mutable_name_path(int index);
  void set_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name_path(int index, ::std::string&& value);
  #endif
  void set_name_path(int index, const char* value);
  void set_name_path(int index, const char* value, size_t size);
  ::std::string* add_name_path();
  void add_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_name_path(::std::string&& value);
  #endif
  void add_name_path(const char* value);
  void add_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_path();

  // repeated .zetasql.ResolvedOptionProto option_list = 3;
  int option_list_size() const;
  void clear_option_list();
  static const int kOptionListFieldNumber = 3;
  ::zetasql::ResolvedOptionProto* mutable_option_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_option_list();
  const ::zetasql::ResolvedOptionProto& option_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_option_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      option_list() const;

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedModuleStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_path_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > option_list_;
  ::zetasql::ResolvedStatementProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAggregateHavingModifierProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAggregateHavingModifierProto) */ {
 public:
  ResolvedAggregateHavingModifierProto();
  virtual ~ResolvedAggregateHavingModifierProto();

  ResolvedAggregateHavingModifierProto(const ResolvedAggregateHavingModifierProto& from);

  inline ResolvedAggregateHavingModifierProto& operator=(const ResolvedAggregateHavingModifierProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAggregateHavingModifierProto(ResolvedAggregateHavingModifierProto&& from) noexcept
    : ResolvedAggregateHavingModifierProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAggregateHavingModifierProto& operator=(ResolvedAggregateHavingModifierProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAggregateHavingModifierProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAggregateHavingModifierProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAggregateHavingModifierProto*>(
               &_ResolvedAggregateHavingModifierProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    196;

  void Swap(ResolvedAggregateHavingModifierProto* other);
  friend void swap(ResolvedAggregateHavingModifierProto& a, ResolvedAggregateHavingModifierProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAggregateHavingModifierProto* New() const final {
    return CreateMaybeMessage<ResolvedAggregateHavingModifierProto>(NULL);
  }

  ResolvedAggregateHavingModifierProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAggregateHavingModifierProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAggregateHavingModifierProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.AnyResolvedExprProto having_expr = 3;
  bool has_having_expr() const;
  void clear_having_expr();
  static const int kHavingExprFieldNumber = 3;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_having_expr() const;
  public:
  const ::zetasql::AnyResolvedExprProto& having_expr() const;
  ::zetasql::AnyResolvedExprProto* release_having_expr();
  ::zetasql::AnyResolvedExprProto* mutable_having_expr();
  void set_allocated_having_expr(::zetasql::AnyResolvedExprProto* having_expr);

  // optional .zetasql.ResolvedAggregateHavingModifierEnums.HavingModifierKind kind = 2;
  bool has_kind() const;
  void clear_kind();
  static const int kKindFieldNumber = 2;
  ::zetasql::ResolvedAggregateHavingModifierEnums_HavingModifierKind kind() const;
  void set_kind(::zetasql::ResolvedAggregateHavingModifierEnums_HavingModifierKind value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAggregateHavingModifierProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_kind();
  void clear_has_kind();
  void set_has_having_expr();
  void clear_has_having_expr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::AnyResolvedExprProto* having_expr_;
  int kind_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedCreateMaterializedViewStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedCreateMaterializedViewStmtProto) */ {
 public:
  ResolvedCreateMaterializedViewStmtProto();
  virtual ~ResolvedCreateMaterializedViewStmtProto();

  ResolvedCreateMaterializedViewStmtProto(const ResolvedCreateMaterializedViewStmtProto& from);

  inline ResolvedCreateMaterializedViewStmtProto& operator=(const ResolvedCreateMaterializedViewStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedCreateMaterializedViewStmtProto(ResolvedCreateMaterializedViewStmtProto&& from) noexcept
    : ResolvedCreateMaterializedViewStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedCreateMaterializedViewStmtProto& operator=(ResolvedCreateMaterializedViewStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedCreateMaterializedViewStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedCreateMaterializedViewStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedCreateMaterializedViewStmtProto*>(
               &_ResolvedCreateMaterializedViewStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    197;

  void Swap(ResolvedCreateMaterializedViewStmtProto* other);
  friend void swap(ResolvedCreateMaterializedViewStmtProto& a, ResolvedCreateMaterializedViewStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedCreateMaterializedViewStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedCreateMaterializedViewStmtProto>(NULL);
  }

  ResolvedCreateMaterializedViewStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedCreateMaterializedViewStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedCreateMaterializedViewStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedColumnDefinitionProto column_definition_list = 2;
  int column_definition_list_size() const;
  void clear_column_definition_list();
  static const int kColumnDefinitionListFieldNumber = 2;
  ::zetasql::ResolvedColumnDefinitionProto* mutable_column_definition_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnDefinitionProto >*
      mutable_column_definition_list();
  const ::zetasql::ResolvedColumnDefinitionProto& column_definition_list(int index) const;
  ::zetasql::ResolvedColumnDefinitionProto* add_column_definition_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnDefinitionProto >&
      column_definition_list() const;

  // repeated .zetasql.AnyResolvedExprProto partition_by_list = 3;
  int partition_by_list_size() const;
  void clear_partition_by_list();
  static const int kPartitionByListFieldNumber = 3;
  ::zetasql::AnyResolvedExprProto* mutable_partition_by_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
      mutable_partition_by_list();
  const ::zetasql::AnyResolvedExprProto& partition_by_list(int index) const;
  ::zetasql::AnyResolvedExprProto* add_partition_by_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
      partition_by_list() const;

  // repeated .zetasql.AnyResolvedExprProto cluster_by_list = 4;
  int cluster_by_list_size() const;
  void clear_cluster_by_list();
  static const int kClusterByListFieldNumber = 4;
  ::zetasql::AnyResolvedExprProto* mutable_cluster_by_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
      mutable_cluster_by_list();
  const ::zetasql::AnyResolvedExprProto& cluster_by_list(int index) const;
  ::zetasql::AnyResolvedExprProto* add_cluster_by_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
      cluster_by_list() const;

  // optional .zetasql.ResolvedCreateViewBaseProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedCreateViewBaseProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedCreateViewBaseProto& parent() const;
  ::zetasql::ResolvedCreateViewBaseProto* release_parent();
  ::zetasql::ResolvedCreateViewBaseProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedCreateViewBaseProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedCreateMaterializedViewStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnDefinitionProto > column_definition_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto > partition_by_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto > cluster_by_list_;
  ::zetasql::ResolvedCreateViewBaseProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedCreateProcedureStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedCreateProcedureStmtProto) */ {
 public:
  ResolvedCreateProcedureStmtProto();
  virtual ~ResolvedCreateProcedureStmtProto();

  ResolvedCreateProcedureStmtProto(const ResolvedCreateProcedureStmtProto& from);

  inline ResolvedCreateProcedureStmtProto& operator=(const ResolvedCreateProcedureStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedCreateProcedureStmtProto(ResolvedCreateProcedureStmtProto&& from) noexcept
    : ResolvedCreateProcedureStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedCreateProcedureStmtProto& operator=(ResolvedCreateProcedureStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedCreateProcedureStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedCreateProcedureStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedCreateProcedureStmtProto*>(
               &_ResolvedCreateProcedureStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    198;

  void Swap(ResolvedCreateProcedureStmtProto* other);
  friend void swap(ResolvedCreateProcedureStmtProto& a, ResolvedCreateProcedureStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedCreateProcedureStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedCreateProcedureStmtProto>(NULL);
  }

  ResolvedCreateProcedureStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedCreateProcedureStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedCreateProcedureStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string argument_name_list = 2;
  int argument_name_list_size() const;
  void clear_argument_name_list();
  static const int kArgumentNameListFieldNumber = 2;
  const ::std::string& argument_name_list(int index) const;
  ::std::string* mutable_argument_name_list(int index);
  void set_argument_name_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_argument_name_list(int index, ::std::string&& value);
  #endif
  void set_argument_name_list(int index, const char* value);
  void set_argument_name_list(int index, const char* value, size_t size);
  ::std::string* add_argument_name_list();
  void add_argument_name_list(const ::std::string& value);
  #if LANG_CXX11
  void add_argument_name_list(::std::string&& value);
  #endif
  void add_argument_name_list(const char* value);
  void add_argument_name_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& argument_name_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_argument_name_list();

  // repeated .zetasql.ResolvedOptionProto option_list = 4;
  int option_list_size() const;
  void clear_option_list();
  static const int kOptionListFieldNumber = 4;
  ::zetasql::ResolvedOptionProto* mutable_option_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_option_list();
  const ::zetasql::ResolvedOptionProto& option_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_option_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      option_list() const;

  // optional string procedure_body = 5;
  bool has_procedure_body() const;
  void clear_procedure_body();
  static const int kProcedureBodyFieldNumber = 5;
  const ::std::string& procedure_body() const;
  void set_procedure_body(const ::std::string& value);
  #if LANG_CXX11
  void set_procedure_body(::std::string&& value);
  #endif
  void set_procedure_body(const char* value);
  void set_procedure_body(const char* value, size_t size);
  ::std::string* mutable_procedure_body();
  ::std::string* release_procedure_body();
  void set_allocated_procedure_body(::std::string* procedure_body);

  // optional .zetasql.ResolvedCreateStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedCreateStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedCreateStatementProto& parent() const;
  ::zetasql::ResolvedCreateStatementProto* release_parent();
  ::zetasql::ResolvedCreateStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedCreateStatementProto* parent);

  // optional .zetasql.FunctionSignatureProto signature = 3;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 3;
  private:
  const ::zetasql::FunctionSignatureProto& _internal_signature() const;
  public:
  const ::zetasql::FunctionSignatureProto& signature() const;
  ::zetasql::FunctionSignatureProto* release_signature();
  ::zetasql::FunctionSignatureProto* mutable_signature();
  void set_allocated_signature(::zetasql::FunctionSignatureProto* signature);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedCreateProcedureStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_signature();
  void clear_has_signature();
  void set_has_procedure_body();
  void clear_has_procedure_body();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> argument_name_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > option_list_;
  ::google::protobuf::internal::ArenaStringPtr procedure_body_;
  ::zetasql::ResolvedCreateStatementProto* parent_;
  ::zetasql::FunctionSignatureProto* signature_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedExecuteImmediateArgumentProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedExecuteImmediateArgumentProto) */ {
 public:
  ResolvedExecuteImmediateArgumentProto();
  virtual ~ResolvedExecuteImmediateArgumentProto();

  ResolvedExecuteImmediateArgumentProto(const ResolvedExecuteImmediateArgumentProto& from);

  inline ResolvedExecuteImmediateArgumentProto& operator=(const ResolvedExecuteImmediateArgumentProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedExecuteImmediateArgumentProto(ResolvedExecuteImmediateArgumentProto&& from) noexcept
    : ResolvedExecuteImmediateArgumentProto() {
    *this = ::std::move(from);
  }

  inline ResolvedExecuteImmediateArgumentProto& operator=(ResolvedExecuteImmediateArgumentProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedExecuteImmediateArgumentProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedExecuteImmediateArgumentProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedExecuteImmediateArgumentProto*>(
               &_ResolvedExecuteImmediateArgumentProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    199;

  void Swap(ResolvedExecuteImmediateArgumentProto* other);
  friend void swap(ResolvedExecuteImmediateArgumentProto& a, ResolvedExecuteImmediateArgumentProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedExecuteImmediateArgumentProto* New() const final {
    return CreateMaybeMessage<ResolvedExecuteImmediateArgumentProto>(NULL);
  }

  ResolvedExecuteImmediateArgumentProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedExecuteImmediateArgumentProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedExecuteImmediateArgumentProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.AnyResolvedExprProto expression = 3;
  bool has_expression() const;
  void clear_expression();
  static const int kExpressionFieldNumber = 3;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_expression() const;
  public:
  const ::zetasql::AnyResolvedExprProto& expression() const;
  ::zetasql::AnyResolvedExprProto* release_expression();
  ::zetasql::AnyResolvedExprProto* mutable_expression();
  void set_allocated_expression(::zetasql::AnyResolvedExprProto* expression);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedExecuteImmediateArgumentProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_name();
  void clear_has_name();
  void set_has_expression();
  void clear_has_expression();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::AnyResolvedExprProto* expression_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedExecuteImmediateStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedExecuteImmediateStmtProto) */ {
 public:
  ResolvedExecuteImmediateStmtProto();
  virtual ~ResolvedExecuteImmediateStmtProto();

  ResolvedExecuteImmediateStmtProto(const ResolvedExecuteImmediateStmtProto& from);

  inline ResolvedExecuteImmediateStmtProto& operator=(const ResolvedExecuteImmediateStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedExecuteImmediateStmtProto(ResolvedExecuteImmediateStmtProto&& from) noexcept
    : ResolvedExecuteImmediateStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedExecuteImmediateStmtProto& operator=(ResolvedExecuteImmediateStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedExecuteImmediateStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedExecuteImmediateStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedExecuteImmediateStmtProto*>(
               &_ResolvedExecuteImmediateStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    200;

  void Swap(ResolvedExecuteImmediateStmtProto* other);
  friend void swap(ResolvedExecuteImmediateStmtProto& a, ResolvedExecuteImmediateStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedExecuteImmediateStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedExecuteImmediateStmtProto>(NULL);
  }

  ResolvedExecuteImmediateStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedExecuteImmediateStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedExecuteImmediateStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string into_identifier_list = 3;
  int into_identifier_list_size() const;
  void clear_into_identifier_list();
  static const int kIntoIdentifierListFieldNumber = 3;
  const ::std::string& into_identifier_list(int index) const;
  ::std::string* mutable_into_identifier_list(int index);
  void set_into_identifier_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_into_identifier_list(int index, ::std::string&& value);
  #endif
  void set_into_identifier_list(int index, const char* value);
  void set_into_identifier_list(int index, const char* value, size_t size);
  ::std::string* add_into_identifier_list();
  void add_into_identifier_list(const ::std::string& value);
  #if LANG_CXX11
  void add_into_identifier_list(::std::string&& value);
  #endif
  void add_into_identifier_list(const char* value);
  void add_into_identifier_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& into_identifier_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_into_identifier_list();

  // repeated .zetasql.ResolvedExecuteImmediateArgumentProto using_argument_list = 4;
  int using_argument_list_size() const;
  void clear_using_argument_list();
  static const int kUsingArgumentListFieldNumber = 4;
  ::zetasql::ResolvedExecuteImmediateArgumentProto* mutable_using_argument_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedExecuteImmediateArgumentProto >*
      mutable_using_argument_list();
  const ::zetasql::ResolvedExecuteImmediateArgumentProto& using_argument_list(int index) const;
  ::zetasql::ResolvedExecuteImmediateArgumentProto* add_using_argument_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedExecuteImmediateArgumentProto >&
      using_argument_list() const;

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional .zetasql.AnyResolvedExprProto sql = 2;
  bool has_sql() const;
  void clear_sql();
  static const int kSqlFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_sql() const;
  public:
  const ::zetasql::AnyResolvedExprProto& sql() const;
  ::zetasql::AnyResolvedExprProto* release_sql();
  ::zetasql::AnyResolvedExprProto* mutable_sql();
  void set_allocated_sql(::zetasql::AnyResolvedExprProto* sql);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedExecuteImmediateStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_sql();
  void clear_has_sql();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> into_identifier_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedExecuteImmediateArgumentProto > using_argument_list_;
  ::zetasql::ResolvedStatementProto* parent_;
  ::zetasql::AnyResolvedExprProto* sql_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAssignmentStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAssignmentStmtProto) */ {
 public:
  ResolvedAssignmentStmtProto();
  virtual ~ResolvedAssignmentStmtProto();

  ResolvedAssignmentStmtProto(const ResolvedAssignmentStmtProto& from);

  inline ResolvedAssignmentStmtProto& operator=(const ResolvedAssignmentStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAssignmentStmtProto(ResolvedAssignmentStmtProto&& from) noexcept
    : ResolvedAssignmentStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAssignmentStmtProto& operator=(ResolvedAssignmentStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAssignmentStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAssignmentStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAssignmentStmtProto*>(
               &_ResolvedAssignmentStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    201;

  void Swap(ResolvedAssignmentStmtProto* other);
  friend void swap(ResolvedAssignmentStmtProto& a, ResolvedAssignmentStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAssignmentStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedAssignmentStmtProto>(NULL);
  }

  ResolvedAssignmentStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAssignmentStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAssignmentStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional .zetasql.AnyResolvedExprProto target = 2;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_target() const;
  public:
  const ::zetasql::AnyResolvedExprProto& target() const;
  ::zetasql::AnyResolvedExprProto* release_target();
  ::zetasql::AnyResolvedExprProto* mutable_target();
  void set_allocated_target(::zetasql::AnyResolvedExprProto* target);

  // optional .zetasql.AnyResolvedExprProto expr = 3;
  bool has_expr() const;
  void clear_expr();
  static const int kExprFieldNumber = 3;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_expr() const;
  public:
  const ::zetasql::AnyResolvedExprProto& expr() const;
  ::zetasql::AnyResolvedExprProto* release_expr();
  ::zetasql::AnyResolvedExprProto* mutable_expr();
  void set_allocated_expr(::zetasql::AnyResolvedExprProto* expr);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAssignmentStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_target();
  void clear_has_target();
  void set_has_expr();
  void clear_has_expr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedStatementProto* parent_;
  ::zetasql::AnyResolvedExprProto* target_;
  ::zetasql::AnyResolvedExprProto* expr_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedCreateEntityStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedCreateEntityStmtProto) */ {
 public:
  ResolvedCreateEntityStmtProto();
  virtual ~ResolvedCreateEntityStmtProto();

  ResolvedCreateEntityStmtProto(const ResolvedCreateEntityStmtProto& from);

  inline ResolvedCreateEntityStmtProto& operator=(const ResolvedCreateEntityStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedCreateEntityStmtProto(ResolvedCreateEntityStmtProto&& from) noexcept
    : ResolvedCreateEntityStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedCreateEntityStmtProto& operator=(ResolvedCreateEntityStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedCreateEntityStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedCreateEntityStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedCreateEntityStmtProto*>(
               &_ResolvedCreateEntityStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    202;

  void Swap(ResolvedCreateEntityStmtProto* other);
  friend void swap(ResolvedCreateEntityStmtProto& a, ResolvedCreateEntityStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedCreateEntityStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedCreateEntityStmtProto>(NULL);
  }

  ResolvedCreateEntityStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedCreateEntityStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedCreateEntityStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedOptionProto option_list = 4;
  int option_list_size() const;
  void clear_option_list();
  static const int kOptionListFieldNumber = 4;
  ::zetasql::ResolvedOptionProto* mutable_option_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_option_list();
  const ::zetasql::ResolvedOptionProto& option_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_option_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      option_list() const;

  // optional string entity_type = 2;
  bool has_entity_type() const;
  void clear_entity_type();
  static const int kEntityTypeFieldNumber = 2;
  const ::std::string& entity_type() const;
  void set_entity_type(const ::std::string& value);
  #if LANG_CXX11
  void set_entity_type(::std::string&& value);
  #endif
  void set_entity_type(const char* value);
  void set_entity_type(const char* value, size_t size);
  ::std::string* mutable_entity_type();
  ::std::string* release_entity_type();
  void set_allocated_entity_type(::std::string* entity_type);

  // optional string entity_body_json = 3;
  bool has_entity_body_json() const;
  void clear_entity_body_json();
  static const int kEntityBodyJsonFieldNumber = 3;
  const ::std::string& entity_body_json() const;
  void set_entity_body_json(const ::std::string& value);
  #if LANG_CXX11
  void set_entity_body_json(::std::string&& value);
  #endif
  void set_entity_body_json(const char* value);
  void set_entity_body_json(const char* value, size_t size);
  ::std::string* mutable_entity_body_json();
  ::std::string* release_entity_body_json();
  void set_allocated_entity_body_json(::std::string* entity_body_json);

  // optional string entity_body_text = 5;
  bool has_entity_body_text() const;
  void clear_entity_body_text();
  static const int kEntityBodyTextFieldNumber = 5;
  const ::std::string& entity_body_text() const;
  void set_entity_body_text(const ::std::string& value);
  #if LANG_CXX11
  void set_entity_body_text(::std::string&& value);
  #endif
  void set_entity_body_text(const char* value);
  void set_entity_body_text(const char* value, size_t size);
  ::std::string* mutable_entity_body_text();
  ::std::string* release_entity_body_text();
  void set_allocated_entity_body_text(::std::string* entity_body_text);

  // optional .zetasql.ResolvedCreateStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedCreateStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedCreateStatementProto& parent() const;
  ::zetasql::ResolvedCreateStatementProto* release_parent();
  ::zetasql::ResolvedCreateStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedCreateStatementProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedCreateEntityStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_entity_type();
  void clear_has_entity_type();
  void set_has_entity_body_json();
  void clear_has_entity_body_json();
  void set_has_entity_body_text();
  void clear_has_entity_body_text();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > option_list_;
  ::google::protobuf::internal::ArenaStringPtr entity_type_;
  ::google::protobuf::internal::ArenaStringPtr entity_body_json_;
  ::google::protobuf::internal::ArenaStringPtr entity_body_text_;
  ::zetasql::ResolvedCreateStatementProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAlterEntityStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAlterEntityStmtProto) */ {
 public:
  ResolvedAlterEntityStmtProto();
  virtual ~ResolvedAlterEntityStmtProto();

  ResolvedAlterEntityStmtProto(const ResolvedAlterEntityStmtProto& from);

  inline ResolvedAlterEntityStmtProto& operator=(const ResolvedAlterEntityStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAlterEntityStmtProto(ResolvedAlterEntityStmtProto&& from) noexcept
    : ResolvedAlterEntityStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAlterEntityStmtProto& operator=(ResolvedAlterEntityStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAlterEntityStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAlterEntityStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAlterEntityStmtProto*>(
               &_ResolvedAlterEntityStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    203;

  void Swap(ResolvedAlterEntityStmtProto* other);
  friend void swap(ResolvedAlterEntityStmtProto& a, ResolvedAlterEntityStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAlterEntityStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedAlterEntityStmtProto>(NULL);
  }

  ResolvedAlterEntityStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAlterEntityStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAlterEntityStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string entity_type = 2;
  bool has_entity_type() const;
  void clear_entity_type();
  static const int kEntityTypeFieldNumber = 2;
  const ::std::string& entity_type() const;
  void set_entity_type(const ::std::string& value);
  #if LANG_CXX11
  void set_entity_type(::std::string&& value);
  #endif
  void set_entity_type(const char* value);
  void set_entity_type(const char* value, size_t size);
  ::std::string* mutable_entity_type();
  ::std::string* release_entity_type();
  void set_allocated_entity_type(::std::string* entity_type);

  // optional .zetasql.ResolvedAlterObjectStmtProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedAlterObjectStmtProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedAlterObjectStmtProto& parent() const;
  ::zetasql::ResolvedAlterObjectStmtProto* release_parent();
  ::zetasql::ResolvedAlterObjectStmtProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedAlterObjectStmtProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAlterEntityStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_entity_type();
  void clear_has_entity_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr entity_type_;
  ::zetasql::ResolvedAlterObjectStmtProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedPivotColumnProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedPivotColumnProto) */ {
 public:
  ResolvedPivotColumnProto();
  virtual ~ResolvedPivotColumnProto();

  ResolvedPivotColumnProto(const ResolvedPivotColumnProto& from);

  inline ResolvedPivotColumnProto& operator=(const ResolvedPivotColumnProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedPivotColumnProto(ResolvedPivotColumnProto&& from) noexcept
    : ResolvedPivotColumnProto() {
    *this = ::std::move(from);
  }

  inline ResolvedPivotColumnProto& operator=(ResolvedPivotColumnProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedPivotColumnProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedPivotColumnProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedPivotColumnProto*>(
               &_ResolvedPivotColumnProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    204;

  void Swap(ResolvedPivotColumnProto* other);
  friend void swap(ResolvedPivotColumnProto& a, ResolvedPivotColumnProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedPivotColumnProto* New() const final {
    return CreateMaybeMessage<ResolvedPivotColumnProto>(NULL);
  }

  ResolvedPivotColumnProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedPivotColumnProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedPivotColumnProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.ResolvedColumnProto column = 2;
  bool has_column() const;
  void clear_column();
  static const int kColumnFieldNumber = 2;
  private:
  const ::zetasql::ResolvedColumnProto& _internal_column() const;
  public:
  const ::zetasql::ResolvedColumnProto& column() const;
  ::zetasql::ResolvedColumnProto* release_column();
  ::zetasql::ResolvedColumnProto* mutable_column();
  void set_allocated_column(::zetasql::ResolvedColumnProto* column);

  // optional int64 pivot_expr_index = 3;
  bool has_pivot_expr_index() const;
  void clear_pivot_expr_index();
  static const int kPivotExprIndexFieldNumber = 3;
  ::google::protobuf::int64 pivot_expr_index() const;
  void set_pivot_expr_index(::google::protobuf::int64 value);

  // optional int64 pivot_value_index = 4;
  bool has_pivot_value_index() const;
  void clear_pivot_value_index();
  static const int kPivotValueIndexFieldNumber = 4;
  ::google::protobuf::int64 pivot_value_index() const;
  void set_pivot_value_index(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedPivotColumnProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_column();
  void clear_has_column();
  void set_has_pivot_expr_index();
  void clear_has_pivot_expr_index();
  void set_has_pivot_value_index();
  void clear_has_pivot_value_index();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::ResolvedColumnProto* column_;
  ::google::protobuf::int64 pivot_expr_index_;
  ::google::protobuf::int64 pivot_value_index_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedPivotScanProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedPivotScanProto) */ {
 public:
  ResolvedPivotScanProto();
  virtual ~ResolvedPivotScanProto();

  ResolvedPivotScanProto(const ResolvedPivotScanProto& from);

  inline ResolvedPivotScanProto& operator=(const ResolvedPivotScanProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedPivotScanProto(ResolvedPivotScanProto&& from) noexcept
    : ResolvedPivotScanProto() {
    *this = ::std::move(from);
  }

  inline ResolvedPivotScanProto& operator=(ResolvedPivotScanProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedPivotScanProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedPivotScanProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedPivotScanProto*>(
               &_ResolvedPivotScanProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    205;

  void Swap(ResolvedPivotScanProto* other);
  friend void swap(ResolvedPivotScanProto& a, ResolvedPivotScanProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedPivotScanProto* New() const final {
    return CreateMaybeMessage<ResolvedPivotScanProto>(NULL);
  }

  ResolvedPivotScanProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedPivotScanProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedPivotScanProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedComputedColumnProto group_by_list = 3;
  int group_by_list_size() const;
  void clear_group_by_list();
  static const int kGroupByListFieldNumber = 3;
  ::zetasql::ResolvedComputedColumnProto* mutable_group_by_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >*
      mutable_group_by_list();
  const ::zetasql::ResolvedComputedColumnProto& group_by_list(int index) const;
  ::zetasql::ResolvedComputedColumnProto* add_group_by_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >&
      group_by_list() const;

  // repeated .zetasql.AnyResolvedExprProto pivot_expr_list = 4;
  int pivot_expr_list_size() const;
  void clear_pivot_expr_list();
  static const int kPivotExprListFieldNumber = 4;
  ::zetasql::AnyResolvedExprProto* mutable_pivot_expr_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
      mutable_pivot_expr_list();
  const ::zetasql::AnyResolvedExprProto& pivot_expr_list(int index) const;
  ::zetasql::AnyResolvedExprProto* add_pivot_expr_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
      pivot_expr_list() const;

  // repeated .zetasql.AnyResolvedExprProto pivot_value_list = 6;
  int pivot_value_list_size() const;
  void clear_pivot_value_list();
  static const int kPivotValueListFieldNumber = 6;
  ::zetasql::AnyResolvedExprProto* mutable_pivot_value_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
      mutable_pivot_value_list();
  const ::zetasql::AnyResolvedExprProto& pivot_value_list(int index) const;
  ::zetasql::AnyResolvedExprProto* add_pivot_value_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
      pivot_value_list() const;

  // repeated .zetasql.ResolvedPivotColumnProto pivot_column_list = 7;
  int pivot_column_list_size() const;
  void clear_pivot_column_list();
  static const int kPivotColumnListFieldNumber = 7;
  ::zetasql::ResolvedPivotColumnProto* mutable_pivot_column_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedPivotColumnProto >*
      mutable_pivot_column_list();
  const ::zetasql::ResolvedPivotColumnProto& pivot_column_list(int index) const;
  ::zetasql::ResolvedPivotColumnProto* add_pivot_column_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedPivotColumnProto >&
      pivot_column_list() const;

  // optional .zetasql.ResolvedScanProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedScanProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedScanProto& parent() const;
  ::zetasql::ResolvedScanProto* release_parent();
  ::zetasql::ResolvedScanProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedScanProto* parent);

  // optional .zetasql.AnyResolvedScanProto input_scan = 2;
  bool has_input_scan() const;
  void clear_input_scan();
  static const int kInputScanFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_input_scan() const;
  public:
  const ::zetasql::AnyResolvedScanProto& input_scan() const;
  ::zetasql::AnyResolvedScanProto* release_input_scan();
  ::zetasql::AnyResolvedScanProto* mutable_input_scan();
  void set_allocated_input_scan(::zetasql::AnyResolvedScanProto* input_scan);

  // optional .zetasql.AnyResolvedExprProto for_expr = 5;
  bool has_for_expr() const;
  void clear_for_expr();
  static const int kForExprFieldNumber = 5;
  private:
  const ::zetasql::AnyResolvedExprProto& _internal_for_expr() const;
  public:
  const ::zetasql::AnyResolvedExprProto& for_expr() const;
  ::zetasql::AnyResolvedExprProto* release_for_expr();
  ::zetasql::AnyResolvedExprProto* mutable_for_expr();
  void set_allocated_for_expr(::zetasql::AnyResolvedExprProto* for_expr);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedPivotScanProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_input_scan();
  void clear_has_input_scan();
  void set_has_for_expr();
  void clear_has_for_expr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto > group_by_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto > pivot_expr_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto > pivot_value_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedPivotColumnProto > pivot_column_list_;
  ::zetasql::ResolvedScanProto* parent_;
  ::zetasql::AnyResolvedScanProto* input_scan_;
  ::zetasql::AnyResolvedExprProto* for_expr_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedReturningClauseProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedReturningClauseProto) */ {
 public:
  ResolvedReturningClauseProto();
  virtual ~ResolvedReturningClauseProto();

  ResolvedReturningClauseProto(const ResolvedReturningClauseProto& from);

  inline ResolvedReturningClauseProto& operator=(const ResolvedReturningClauseProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedReturningClauseProto(ResolvedReturningClauseProto&& from) noexcept
    : ResolvedReturningClauseProto() {
    *this = ::std::move(from);
  }

  inline ResolvedReturningClauseProto& operator=(ResolvedReturningClauseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedReturningClauseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedReturningClauseProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedReturningClauseProto*>(
               &_ResolvedReturningClauseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    206;

  void Swap(ResolvedReturningClauseProto* other);
  friend void swap(ResolvedReturningClauseProto& a, ResolvedReturningClauseProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedReturningClauseProto* New() const final {
    return CreateMaybeMessage<ResolvedReturningClauseProto>(NULL);
  }

  ResolvedReturningClauseProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedReturningClauseProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedReturningClauseProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedOutputColumnProto output_column_list = 2;
  int output_column_list_size() const;
  void clear_output_column_list();
  static const int kOutputColumnListFieldNumber = 2;
  ::zetasql::ResolvedOutputColumnProto* mutable_output_column_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >*
      mutable_output_column_list();
  const ::zetasql::ResolvedOutputColumnProto& output_column_list(int index) const;
  ::zetasql::ResolvedOutputColumnProto* add_output_column_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >&
      output_column_list() const;

  // repeated .zetasql.ResolvedComputedColumnProto expr_list = 4;
  int expr_list_size() const;
  void clear_expr_list();
  static const int kExprListFieldNumber = 4;
  ::zetasql::ResolvedComputedColumnProto* mutable_expr_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >*
      mutable_expr_list();
  const ::zetasql::ResolvedComputedColumnProto& expr_list(int index) const;
  ::zetasql::ResolvedComputedColumnProto* add_expr_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >&
      expr_list() const;

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.ResolvedColumnHolderProto action_column = 3;
  bool has_action_column() const;
  void clear_action_column();
  static const int kActionColumnFieldNumber = 3;
  private:
  const ::zetasql::ResolvedColumnHolderProto& _internal_action_column() const;
  public:
  const ::zetasql::ResolvedColumnHolderProto& action_column() const;
  ::zetasql::ResolvedColumnHolderProto* release_action_column();
  ::zetasql::ResolvedColumnHolderProto* mutable_action_column();
  void set_allocated_action_column(::zetasql::ResolvedColumnHolderProto* action_column);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedReturningClauseProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_action_column();
  void clear_has_action_column();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto > output_column_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto > expr_list_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::ResolvedColumnHolderProto* action_column_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedUnpivotArgProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedUnpivotArgProto) */ {
 public:
  ResolvedUnpivotArgProto();
  virtual ~ResolvedUnpivotArgProto();

  ResolvedUnpivotArgProto(const ResolvedUnpivotArgProto& from);

  inline ResolvedUnpivotArgProto& operator=(const ResolvedUnpivotArgProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedUnpivotArgProto(ResolvedUnpivotArgProto&& from) noexcept
    : ResolvedUnpivotArgProto() {
    *this = ::std::move(from);
  }

  inline ResolvedUnpivotArgProto& operator=(ResolvedUnpivotArgProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedUnpivotArgProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedUnpivotArgProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedUnpivotArgProto*>(
               &_ResolvedUnpivotArgProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    207;

  void Swap(ResolvedUnpivotArgProto* other);
  friend void swap(ResolvedUnpivotArgProto& a, ResolvedUnpivotArgProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedUnpivotArgProto* New() const final {
    return CreateMaybeMessage<ResolvedUnpivotArgProto>(NULL);
  }

  ResolvedUnpivotArgProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedUnpivotArgProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedUnpivotArgProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedColumnRefProto column_list = 2;
  int column_list_size() const;
  void clear_column_list();
  static const int kColumnListFieldNumber = 2;
  ::zetasql::ResolvedColumnRefProto* mutable_column_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >*
      mutable_column_list();
  const ::zetasql::ResolvedColumnRefProto& column_list(int index) const;
  ::zetasql::ResolvedColumnRefProto* add_column_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >&
      column_list() const;

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedUnpivotArgProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto > column_list_;
  ::zetasql::ResolvedArgumentProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedUnpivotScanProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedUnpivotScanProto) */ {
 public:
  ResolvedUnpivotScanProto();
  virtual ~ResolvedUnpivotScanProto();

  ResolvedUnpivotScanProto(const ResolvedUnpivotScanProto& from);

  inline ResolvedUnpivotScanProto& operator=(const ResolvedUnpivotScanProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedUnpivotScanProto(ResolvedUnpivotScanProto&& from) noexcept
    : ResolvedUnpivotScanProto() {
    *this = ::std::move(from);
  }

  inline ResolvedUnpivotScanProto& operator=(ResolvedUnpivotScanProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedUnpivotScanProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedUnpivotScanProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedUnpivotScanProto*>(
               &_ResolvedUnpivotScanProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    208;

  void Swap(ResolvedUnpivotScanProto* other);
  friend void swap(ResolvedUnpivotScanProto& a, ResolvedUnpivotScanProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedUnpivotScanProto* New() const final {
    return CreateMaybeMessage<ResolvedUnpivotScanProto>(NULL);
  }

  ResolvedUnpivotScanProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedUnpivotScanProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedUnpivotScanProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedColumnProto value_column_list = 3;
  int value_column_list_size() const;
  void clear_value_column_list();
  static const int kValueColumnListFieldNumber = 3;
  ::zetasql::ResolvedColumnProto* mutable_value_column_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >*
      mutable_value_column_list();
  const ::zetasql::ResolvedColumnProto& value_column_list(int index) const;
  ::zetasql::ResolvedColumnProto* add_value_column_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >&
      value_column_list() const;

  // repeated .zetasql.ResolvedLiteralProto label_list = 5;
  int label_list_size() const;
  void clear_label_list();
  static const int kLabelListFieldNumber = 5;
  ::zetasql::ResolvedLiteralProto* mutable_label_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedLiteralProto >*
      mutable_label_list();
  const ::zetasql::ResolvedLiteralProto& label_list(int index) const;
  ::zetasql::ResolvedLiteralProto* add_label_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedLiteralProto >&
      label_list() const;

  // repeated .zetasql.ResolvedUnpivotArgProto unpivot_arg_list = 6;
  int unpivot_arg_list_size() const;
  void clear_unpivot_arg_list();
  static const int kUnpivotArgListFieldNumber = 6;
  ::zetasql::ResolvedUnpivotArgProto* mutable_unpivot_arg_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUnpivotArgProto >*
      mutable_unpivot_arg_list();
  const ::zetasql::ResolvedUnpivotArgProto& unpivot_arg_list(int index) const;
  ::zetasql::ResolvedUnpivotArgProto* add_unpivot_arg_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUnpivotArgProto >&
      unpivot_arg_list() const;

  // repeated .zetasql.ResolvedComputedColumnProto projected_input_column_list = 7;
  int projected_input_column_list_size() const;
  void clear_projected_input_column_list();
  static const int kProjectedInputColumnListFieldNumber = 7;
  ::zetasql::ResolvedComputedColumnProto* mutable_projected_input_column_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >*
      mutable_projected_input_column_list();
  const ::zetasql::ResolvedComputedColumnProto& projected_input_column_list(int index) const;
  ::zetasql::ResolvedComputedColumnProto* add_projected_input_column_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >&
      projected_input_column_list() const;

  // optional .zetasql.ResolvedScanProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedScanProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedScanProto& parent() const;
  ::zetasql::ResolvedScanProto* release_parent();
  ::zetasql::ResolvedScanProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedScanProto* parent);

  // optional .zetasql.AnyResolvedScanProto input_scan = 2;
  bool has_input_scan() const;
  void clear_input_scan();
  static const int kInputScanFieldNumber = 2;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_input_scan() const;
  public:
  const ::zetasql::AnyResolvedScanProto& input_scan() const;
  ::zetasql::AnyResolvedScanProto* release_input_scan();
  ::zetasql::AnyResolvedScanProto* mutable_input_scan();
  void set_allocated_input_scan(::zetasql::AnyResolvedScanProto* input_scan);

  // optional .zetasql.ResolvedColumnProto label_column = 4;
  bool has_label_column() const;
  void clear_label_column();
  static const int kLabelColumnFieldNumber = 4;
  private:
  const ::zetasql::ResolvedColumnProto& _internal_label_column() const;
  public:
  const ::zetasql::ResolvedColumnProto& label_column() const;
  ::zetasql::ResolvedColumnProto* release_label_column();
  ::zetasql::ResolvedColumnProto* mutable_label_column();
  void set_allocated_label_column(::zetasql::ResolvedColumnProto* label_column);

  // optional bool include_nulls = 8;
  bool has_include_nulls() const;
  void clear_include_nulls();
  static const int kIncludeNullsFieldNumber = 8;
  bool include_nulls() const;
  void set_include_nulls(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedUnpivotScanProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_input_scan();
  void clear_has_input_scan();
  void set_has_label_column();
  void clear_has_label_column();
  void set_has_include_nulls();
  void clear_has_include_nulls();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto > value_column_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedLiteralProto > label_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUnpivotArgProto > unpivot_arg_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto > projected_input_column_list_;
  ::zetasql::ResolvedScanProto* parent_;
  ::zetasql::AnyResolvedScanProto* input_scan_;
  ::zetasql::ResolvedColumnProto* label_column_;
  bool include_nulls_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedCloneDataStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedCloneDataStmtProto) */ {
 public:
  ResolvedCloneDataStmtProto();
  virtual ~ResolvedCloneDataStmtProto();

  ResolvedCloneDataStmtProto(const ResolvedCloneDataStmtProto& from);

  inline ResolvedCloneDataStmtProto& operator=(const ResolvedCloneDataStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedCloneDataStmtProto(ResolvedCloneDataStmtProto&& from) noexcept
    : ResolvedCloneDataStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedCloneDataStmtProto& operator=(ResolvedCloneDataStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedCloneDataStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedCloneDataStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedCloneDataStmtProto*>(
               &_ResolvedCloneDataStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    209;

  void Swap(ResolvedCloneDataStmtProto* other);
  friend void swap(ResolvedCloneDataStmtProto& a, ResolvedCloneDataStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedCloneDataStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedCloneDataStmtProto>(NULL);
  }

  ResolvedCloneDataStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedCloneDataStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedCloneDataStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional .zetasql.ResolvedTableScanProto target_table = 2;
  bool has_target_table() const;
  void clear_target_table();
  static const int kTargetTableFieldNumber = 2;
  private:
  const ::zetasql::ResolvedTableScanProto& _internal_target_table() const;
  public:
  const ::zetasql::ResolvedTableScanProto& target_table() const;
  ::zetasql::ResolvedTableScanProto* release_target_table();
  ::zetasql::ResolvedTableScanProto* mutable_target_table();
  void set_allocated_target_table(::zetasql::ResolvedTableScanProto* target_table);

  // optional .zetasql.AnyResolvedScanProto clone_from = 3;
  bool has_clone_from() const;
  void clear_clone_from();
  static const int kCloneFromFieldNumber = 3;
  private:
  const ::zetasql::AnyResolvedScanProto& _internal_clone_from() const;
  public:
  const ::zetasql::AnyResolvedScanProto& clone_from() const;
  ::zetasql::AnyResolvedScanProto* release_clone_from();
  ::zetasql::AnyResolvedScanProto* mutable_clone_from();
  void set_allocated_clone_from(::zetasql::AnyResolvedScanProto* clone_from);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedCloneDataStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_target_table();
  void clear_has_target_table();
  void set_has_clone_from();
  void clear_has_clone_from();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ResolvedStatementProto* parent_;
  ::zetasql::ResolvedTableScanProto* target_table_;
  ::zetasql::AnyResolvedScanProto* clone_from_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedTableAndColumnInfoProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedTableAndColumnInfoProto) */ {
 public:
  ResolvedTableAndColumnInfoProto();
  virtual ~ResolvedTableAndColumnInfoProto();

  ResolvedTableAndColumnInfoProto(const ResolvedTableAndColumnInfoProto& from);

  inline ResolvedTableAndColumnInfoProto& operator=(const ResolvedTableAndColumnInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedTableAndColumnInfoProto(ResolvedTableAndColumnInfoProto&& from) noexcept
    : ResolvedTableAndColumnInfoProto() {
    *this = ::std::move(from);
  }

  inline ResolvedTableAndColumnInfoProto& operator=(ResolvedTableAndColumnInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedTableAndColumnInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedTableAndColumnInfoProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedTableAndColumnInfoProto*>(
               &_ResolvedTableAndColumnInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    210;

  void Swap(ResolvedTableAndColumnInfoProto* other);
  friend void swap(ResolvedTableAndColumnInfoProto& a, ResolvedTableAndColumnInfoProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedTableAndColumnInfoProto* New() const final {
    return CreateMaybeMessage<ResolvedTableAndColumnInfoProto>(NULL);
  }

  ResolvedTableAndColumnInfoProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedTableAndColumnInfoProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedTableAndColumnInfoProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 column_index_list = 3;
  int column_index_list_size() const;
  void clear_column_index_list();
  static const int kColumnIndexListFieldNumber = 3;
  ::google::protobuf::int64 column_index_list(int index) const;
  void set_column_index_list(int index, ::google::protobuf::int64 value);
  void add_column_index_list(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      column_index_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_column_index_list();

  // optional .zetasql.ResolvedArgumentProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedArgumentProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedArgumentProto& parent() const;
  ::zetasql::ResolvedArgumentProto* release_parent();
  ::zetasql::ResolvedArgumentProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedArgumentProto* parent);

  // optional .zetasql.TableRefProto table = 2;
  bool has_table() const;
  void clear_table();
  static const int kTableFieldNumber = 2;
  private:
  const ::zetasql::TableRefProto& _internal_table() const;
  public:
  const ::zetasql::TableRefProto& table() const;
  ::zetasql::TableRefProto* release_table();
  ::zetasql::TableRefProto* mutable_table();
  void set_allocated_table(::zetasql::TableRefProto* table);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedTableAndColumnInfoProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_table();
  void clear_has_table();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > column_index_list_;
  ::zetasql::ResolvedArgumentProto* parent_;
  ::zetasql::TableRefProto* table_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAnalyzeStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAnalyzeStmtProto) */ {
 public:
  ResolvedAnalyzeStmtProto();
  virtual ~ResolvedAnalyzeStmtProto();

  ResolvedAnalyzeStmtProto(const ResolvedAnalyzeStmtProto& from);

  inline ResolvedAnalyzeStmtProto& operator=(const ResolvedAnalyzeStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAnalyzeStmtProto(ResolvedAnalyzeStmtProto&& from) noexcept
    : ResolvedAnalyzeStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAnalyzeStmtProto& operator=(ResolvedAnalyzeStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAnalyzeStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAnalyzeStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAnalyzeStmtProto*>(
               &_ResolvedAnalyzeStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    211;

  void Swap(ResolvedAnalyzeStmtProto* other);
  friend void swap(ResolvedAnalyzeStmtProto& a, ResolvedAnalyzeStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAnalyzeStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedAnalyzeStmtProto>(NULL);
  }

  ResolvedAnalyzeStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAnalyzeStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAnalyzeStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedOptionProto option_list = 2;
  int option_list_size() const;
  void clear_option_list();
  static const int kOptionListFieldNumber = 2;
  ::zetasql::ResolvedOptionProto* mutable_option_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_option_list();
  const ::zetasql::ResolvedOptionProto& option_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_option_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      option_list() const;

  // repeated .zetasql.ResolvedTableAndColumnInfoProto table_and_column_index_list = 3;
  int table_and_column_index_list_size() const;
  void clear_table_and_column_index_list();
  static const int kTableAndColumnIndexListFieldNumber = 3;
  ::zetasql::ResolvedTableAndColumnInfoProto* mutable_table_and_column_index_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedTableAndColumnInfoProto >*
      mutable_table_and_column_index_list();
  const ::zetasql::ResolvedTableAndColumnInfoProto& table_and_column_index_list(int index) const;
  ::zetasql::ResolvedTableAndColumnInfoProto* add_table_and_column_index_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedTableAndColumnInfoProto >&
      table_and_column_index_list() const;

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAnalyzeStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > option_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedTableAndColumnInfoProto > table_and_column_index_list_;
  ::zetasql::ResolvedStatementProto* parent_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAuxLoadDataStmtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedAuxLoadDataStmtProto) */ {
 public:
  ResolvedAuxLoadDataStmtProto();
  virtual ~ResolvedAuxLoadDataStmtProto();

  ResolvedAuxLoadDataStmtProto(const ResolvedAuxLoadDataStmtProto& from);

  inline ResolvedAuxLoadDataStmtProto& operator=(const ResolvedAuxLoadDataStmtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedAuxLoadDataStmtProto(ResolvedAuxLoadDataStmtProto&& from) noexcept
    : ResolvedAuxLoadDataStmtProto() {
    *this = ::std::move(from);
  }

  inline ResolvedAuxLoadDataStmtProto& operator=(ResolvedAuxLoadDataStmtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAuxLoadDataStmtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedAuxLoadDataStmtProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedAuxLoadDataStmtProto*>(
               &_ResolvedAuxLoadDataStmtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    212;

  void Swap(ResolvedAuxLoadDataStmtProto* other);
  friend void swap(ResolvedAuxLoadDataStmtProto& a, ResolvedAuxLoadDataStmtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedAuxLoadDataStmtProto* New() const final {
    return CreateMaybeMessage<ResolvedAuxLoadDataStmtProto>(NULL);
  }

  ResolvedAuxLoadDataStmtProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedAuxLoadDataStmtProto>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedAuxLoadDataStmtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name_path = 3;
  int name_path_size() const;
  void clear_name_path();
  static const int kNamePathFieldNumber = 3;
  const ::std::string& name_path(int index) const;
  ::std::string* mutable_name_path(int index);
  void set_name_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name_path(int index, ::std::string&& value);
  #endif
  void set_name_path(int index, const char* value);
  void set_name_path(int index, const char* value, size_t size);
  ::std::string* add_name_path();
  void add_name_path(const ::std::string& value);
  #if LANG_CXX11
  void add_name_path(::std::string&& value);
  #endif
  void add_name_path(const char* value);
  void add_name_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_path();

  // repeated .zetasql.ResolvedOutputColumnProto output_column_list = 4;
  int output_column_list_size() const;
  void clear_output_column_list();
  static const int kOutputColumnListFieldNumber = 4;
  ::zetasql::ResolvedOutputColumnProto* mutable_output_column_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >*
      mutable_output_column_list();
  const ::zetasql::ResolvedOutputColumnProto& output_column_list(int index) const;
  ::zetasql::ResolvedOutputColumnProto* add_output_column_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >&
      output_column_list() const;

  // repeated .zetasql.ResolvedColumnDefinitionProto column_definition_list = 5;
  int column_definition_list_size() const;
  void clear_column_definition_list();
  static const int kColumnDefinitionListFieldNumber = 5;
  ::zetasql::ResolvedColumnDefinitionProto* mutable_column_definition_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnDefinitionProto >*
      mutable_column_definition_list();
  const ::zetasql::ResolvedColumnDefinitionProto& column_definition_list(int index) const;
  ::zetasql::ResolvedColumnDefinitionProto* add_column_definition_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnDefinitionProto >&
      column_definition_list() const;

  // repeated .zetasql.ResolvedColumnProto pseudo_column_list = 6;
  int pseudo_column_list_size() const;
  void clear_pseudo_column_list();
  static const int kPseudoColumnListFieldNumber = 6;
  ::zetasql::ResolvedColumnProto* mutable_pseudo_column_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >*
      mutable_pseudo_column_list();
  const ::zetasql::ResolvedColumnProto& pseudo_column_list(int index) const;
  ::zetasql::ResolvedColumnProto* add_pseudo_column_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >&
      pseudo_column_list() const;

  // repeated .zetasql.ResolvedForeignKeyProto foreign_key_list = 8;
  int foreign_key_list_size() const;
  void clear_foreign_key_list();
  static const int kForeignKeyListFieldNumber = 8;
  ::zetasql::ResolvedForeignKeyProto* mutable_foreign_key_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedForeignKeyProto >*
      mutable_foreign_key_list();
  const ::zetasql::ResolvedForeignKeyProto& foreign_key_list(int index) const;
  ::zetasql::ResolvedForeignKeyProto* add_foreign_key_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedForeignKeyProto >&
      foreign_key_list() const;

  // repeated .zetasql.ResolvedCheckConstraintProto check_constraint_list = 9;
  int check_constraint_list_size() const;
  void clear_check_constraint_list();
  static const int kCheckConstraintListFieldNumber = 9;
  ::zetasql::ResolvedCheckConstraintProto* mutable_check_constraint_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedCheckConstraintProto >*
      mutable_check_constraint_list();
  const ::zetasql::ResolvedCheckConstraintProto& check_constraint_list(int index) const;
  ::zetasql::ResolvedCheckConstraintProto* add_check_constraint_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedCheckConstraintProto >&
      check_constraint_list() const;

  // repeated .zetasql.AnyResolvedExprProto partition_by_list = 10;
  int partition_by_list_size() const;
  void clear_partition_by_list();
  static const int kPartitionByListFieldNumber = 10;
  ::zetasql::AnyResolvedExprProto* mutable_partition_by_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
      mutable_partition_by_list();
  const ::zetasql::AnyResolvedExprProto& partition_by_list(int index) const;
  ::zetasql::AnyResolvedExprProto* add_partition_by_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
      partition_by_list() const;

  // repeated .zetasql.AnyResolvedExprProto cluster_by_list = 11;
  int cluster_by_list_size() const;
  void clear_cluster_by_list();
  static const int kClusterByListFieldNumber = 11;
  ::zetasql::AnyResolvedExprProto* mutable_cluster_by_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
      mutable_cluster_by_list();
  const ::zetasql::AnyResolvedExprProto& cluster_by_list(int index) const;
  ::zetasql::AnyResolvedExprProto* add_cluster_by_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
      cluster_by_list() const;

  // repeated .zetasql.ResolvedOptionProto option_list = 12;
  int option_list_size() const;
  void clear_option_list();
  static const int kOptionListFieldNumber = 12;
  ::zetasql::ResolvedOptionProto* mutable_option_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_option_list();
  const ::zetasql::ResolvedOptionProto& option_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_option_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      option_list() const;

  // repeated .zetasql.ResolvedOptionProto from_files_option_list = 15;
  int from_files_option_list_size() const;
  void clear_from_files_option_list();
  static const int kFromFilesOptionListFieldNumber = 15;
  ::zetasql::ResolvedOptionProto* mutable_from_files_option_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
      mutable_from_files_option_list();
  const ::zetasql::ResolvedOptionProto& from_files_option_list(int index) const;
  ::zetasql::ResolvedOptionProto* add_from_files_option_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
      from_files_option_list() const;

  // optional .zetasql.ResolvedStatementProto parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  private:
  const ::zetasql::ResolvedStatementProto& _internal_parent() const;
  public:
  const ::zetasql::ResolvedStatementProto& parent() const;
  ::zetasql::ResolvedStatementProto* release_parent();
  ::zetasql::ResolvedStatementProto* mutable_parent();
  void set_allocated_parent(::zetasql::ResolvedStatementProto* parent);

  // optional .zetasql.ResolvedPrimaryKeyProto primary_key = 7;
  bool has_primary_key() const;
  void clear_primary_key();
  static const int kPrimaryKeyFieldNumber = 7;
  private:
  const ::zetasql::ResolvedPrimaryKeyProto& _internal_primary_key() const;
  public:
  const ::zetasql::ResolvedPrimaryKeyProto& primary_key() const;
  ::zetasql::ResolvedPrimaryKeyProto* release_primary_key();
  ::zetasql::ResolvedPrimaryKeyProto* mutable_primary_key();
  void set_allocated_primary_key(::zetasql::ResolvedPrimaryKeyProto* primary_key);

  // optional .zetasql.ResolvedWithPartitionColumnsProto with_partition_columns = 13;
  bool has_with_partition_columns() const;
  void clear_with_partition_columns();
  static const int kWithPartitionColumnsFieldNumber = 13;
  private:
  const ::zetasql::ResolvedWithPartitionColumnsProto& _internal_with_partition_columns() const;
  public:
  const ::zetasql::ResolvedWithPartitionColumnsProto& with_partition_columns() const;
  ::zetasql::ResolvedWithPartitionColumnsProto* release_with_partition_columns();
  ::zetasql::ResolvedWithPartitionColumnsProto* mutable_with_partition_columns();
  void set_allocated_with_partition_columns(::zetasql::ResolvedWithPartitionColumnsProto* with_partition_columns);

  // optional .zetasql.ResolvedConnectionProto connection = 14;
  bool has_connection() const;
  void clear_connection();
  static const int kConnectionFieldNumber = 14;
  private:
  const ::zetasql::ResolvedConnectionProto& _internal_connection() const;
  public:
  const ::zetasql::ResolvedConnectionProto& connection() const;
  ::zetasql::ResolvedConnectionProto* release_connection();
  ::zetasql::ResolvedConnectionProto* mutable_connection();
  void set_allocated_connection(::zetasql::ResolvedConnectionProto* connection);

  // optional .zetasql.ResolvedAuxLoadDataStmtEnums.InsertionMode insertion_mode = 2;
  bool has_insertion_mode() const;
  void clear_insertion_mode();
  static const int kInsertionModeFieldNumber = 2;
  ::zetasql::ResolvedAuxLoadDataStmtEnums_InsertionMode insertion_mode() const;
  void set_insertion_mode(::zetasql::ResolvedAuxLoadDataStmtEnums_InsertionMode value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedAuxLoadDataStmtProto)
 private:
  void set_has_parent();
  void clear_has_parent();
  void set_has_insertion_mode();
  void clear_has_insertion_mode();
  void set_has_primary_key();
  void clear_has_primary_key();
  void set_has_with_partition_columns();
  void clear_has_with_partition_columns();
  void set_has_connection();
  void clear_has_connection();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_path_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto > output_column_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnDefinitionProto > column_definition_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto > pseudo_column_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedForeignKeyProto > foreign_key_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedCheckConstraintProto > check_constraint_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto > partition_by_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto > cluster_by_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > option_list_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto > from_files_option_list_;
  ::zetasql::ResolvedStatementProto* parent_;
  ::zetasql::ResolvedPrimaryKeyProto* primary_key_;
  ::zetasql::ResolvedWithPartitionColumnsProto* with_partition_columns_;
  ::zetasql::ResolvedConnectionProto* connection_;
  int insertion_mode_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AnyResolvedNodeProto

// optional .zetasql.AnyResolvedArgumentProto resolved_argument_node = 1;
inline bool AnyResolvedNodeProto::has_resolved_argument_node() const {
  return node_case() == kResolvedArgumentNode;
}
inline void AnyResolvedNodeProto::set_has_resolved_argument_node() {
  _oneof_case_[0] = kResolvedArgumentNode;
}
inline void AnyResolvedNodeProto::clear_resolved_argument_node() {
  if (has_resolved_argument_node()) {
    delete node_.resolved_argument_node_;
    clear_has_node();
  }
}
inline const ::zetasql::AnyResolvedArgumentProto& AnyResolvedNodeProto::_internal_resolved_argument_node() const {
  return *node_.resolved_argument_node_;
}
inline ::zetasql::AnyResolvedArgumentProto* AnyResolvedNodeProto::release_resolved_argument_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedNodeProto.resolved_argument_node)
  if (has_resolved_argument_node()) {
    clear_has_node();
      ::zetasql::AnyResolvedArgumentProto* temp = node_.resolved_argument_node_;
    node_.resolved_argument_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::AnyResolvedArgumentProto& AnyResolvedNodeProto::resolved_argument_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedNodeProto.resolved_argument_node)
  return has_resolved_argument_node()
      ? *node_.resolved_argument_node_
      : *reinterpret_cast< ::zetasql::AnyResolvedArgumentProto*>(&::zetasql::_AnyResolvedArgumentProto_default_instance_);
}
inline ::zetasql::AnyResolvedArgumentProto* AnyResolvedNodeProto::mutable_resolved_argument_node() {
  if (!has_resolved_argument_node()) {
    clear_node();
    set_has_resolved_argument_node();
    node_.resolved_argument_node_ = CreateMaybeMessage< ::zetasql::AnyResolvedArgumentProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedNodeProto.resolved_argument_node)
  return node_.resolved_argument_node_;
}

// optional .zetasql.AnyResolvedExprProto resolved_expr_node = 2;
inline bool AnyResolvedNodeProto::has_resolved_expr_node() const {
  return node_case() == kResolvedExprNode;
}
inline void AnyResolvedNodeProto::set_has_resolved_expr_node() {
  _oneof_case_[0] = kResolvedExprNode;
}
inline void AnyResolvedNodeProto::clear_resolved_expr_node() {
  if (has_resolved_expr_node()) {
    delete node_.resolved_expr_node_;
    clear_has_node();
  }
}
inline const ::zetasql::AnyResolvedExprProto& AnyResolvedNodeProto::_internal_resolved_expr_node() const {
  return *node_.resolved_expr_node_;
}
inline ::zetasql::AnyResolvedExprProto* AnyResolvedNodeProto::release_resolved_expr_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedNodeProto.resolved_expr_node)
  if (has_resolved_expr_node()) {
    clear_has_node();
      ::zetasql::AnyResolvedExprProto* temp = node_.resolved_expr_node_;
    node_.resolved_expr_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::AnyResolvedExprProto& AnyResolvedNodeProto::resolved_expr_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedNodeProto.resolved_expr_node)
  return has_resolved_expr_node()
      ? *node_.resolved_expr_node_
      : *reinterpret_cast< ::zetasql::AnyResolvedExprProto*>(&::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* AnyResolvedNodeProto::mutable_resolved_expr_node() {
  if (!has_resolved_expr_node()) {
    clear_node();
    set_has_resolved_expr_node();
    node_.resolved_expr_node_ = CreateMaybeMessage< ::zetasql::AnyResolvedExprProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedNodeProto.resolved_expr_node)
  return node_.resolved_expr_node_;
}

// optional .zetasql.AnyResolvedScanProto resolved_scan_node = 18;
inline bool AnyResolvedNodeProto::has_resolved_scan_node() const {
  return node_case() == kResolvedScanNode;
}
inline void AnyResolvedNodeProto::set_has_resolved_scan_node() {
  _oneof_case_[0] = kResolvedScanNode;
}
inline void AnyResolvedNodeProto::clear_resolved_scan_node() {
  if (has_resolved_scan_node()) {
    delete node_.resolved_scan_node_;
    clear_has_node();
  }
}
inline const ::zetasql::AnyResolvedScanProto& AnyResolvedNodeProto::_internal_resolved_scan_node() const {
  return *node_.resolved_scan_node_;
}
inline ::zetasql::AnyResolvedScanProto* AnyResolvedNodeProto::release_resolved_scan_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedNodeProto.resolved_scan_node)
  if (has_resolved_scan_node()) {
    clear_has_node();
      ::zetasql::AnyResolvedScanProto* temp = node_.resolved_scan_node_;
    node_.resolved_scan_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::AnyResolvedScanProto& AnyResolvedNodeProto::resolved_scan_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedNodeProto.resolved_scan_node)
  return has_resolved_scan_node()
      ? *node_.resolved_scan_node_
      : *reinterpret_cast< ::zetasql::AnyResolvedScanProto*>(&::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* AnyResolvedNodeProto::mutable_resolved_scan_node() {
  if (!has_resolved_scan_node()) {
    clear_node();
    set_has_resolved_scan_node();
    node_.resolved_scan_node_ = CreateMaybeMessage< ::zetasql::AnyResolvedScanProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedNodeProto.resolved_scan_node)
  return node_.resolved_scan_node_;
}

// optional .zetasql.AnyResolvedStatementProto resolved_statement_node = 36;
inline bool AnyResolvedNodeProto::has_resolved_statement_node() const {
  return node_case() == kResolvedStatementNode;
}
inline void AnyResolvedNodeProto::set_has_resolved_statement_node() {
  _oneof_case_[0] = kResolvedStatementNode;
}
inline void AnyResolvedNodeProto::clear_resolved_statement_node() {
  if (has_resolved_statement_node()) {
    delete node_.resolved_statement_node_;
    clear_has_node();
  }
}
inline const ::zetasql::AnyResolvedStatementProto& AnyResolvedNodeProto::_internal_resolved_statement_node() const {
  return *node_.resolved_statement_node_;
}
inline ::zetasql::AnyResolvedStatementProto* AnyResolvedNodeProto::release_resolved_statement_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedNodeProto.resolved_statement_node)
  if (has_resolved_statement_node()) {
    clear_has_node();
      ::zetasql::AnyResolvedStatementProto* temp = node_.resolved_statement_node_;
    node_.resolved_statement_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::AnyResolvedStatementProto& AnyResolvedNodeProto::resolved_statement_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedNodeProto.resolved_statement_node)
  return has_resolved_statement_node()
      ? *node_.resolved_statement_node_
      : *reinterpret_cast< ::zetasql::AnyResolvedStatementProto*>(&::zetasql::_AnyResolvedStatementProto_default_instance_);
}
inline ::zetasql::AnyResolvedStatementProto* AnyResolvedNodeProto::mutable_resolved_statement_node() {
  if (!has_resolved_statement_node()) {
    clear_node();
    set_has_resolved_statement_node();
    node_.resolved_statement_node_ = CreateMaybeMessage< ::zetasql::AnyResolvedStatementProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedNodeProto.resolved_statement_node)
  return node_.resolved_statement_node_;
}

inline bool AnyResolvedNodeProto::has_node() const {
  return node_case() != NODE_NOT_SET;
}
inline void AnyResolvedNodeProto::clear_has_node() {
  _oneof_case_[0] = NODE_NOT_SET;
}
inline AnyResolvedNodeProto::NodeCase AnyResolvedNodeProto::node_case() const {
  return AnyResolvedNodeProto::NodeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AnyResolvedArgumentProto

// optional .zetasql.ResolvedMakeProtoFieldProto resolved_make_proto_field_node = 14;
inline bool AnyResolvedArgumentProto::has_resolved_make_proto_field_node() const {
  return node_case() == kResolvedMakeProtoFieldNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_make_proto_field_node() {
  _oneof_case_[0] = kResolvedMakeProtoFieldNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_make_proto_field_node() {
  if (has_resolved_make_proto_field_node()) {
    delete node_.resolved_make_proto_field_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedMakeProtoFieldProto& AnyResolvedArgumentProto::_internal_resolved_make_proto_field_node() const {
  return *node_.resolved_make_proto_field_node_;
}
inline ::zetasql::ResolvedMakeProtoFieldProto* AnyResolvedArgumentProto::release_resolved_make_proto_field_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_make_proto_field_node)
  if (has_resolved_make_proto_field_node()) {
    clear_has_node();
      ::zetasql::ResolvedMakeProtoFieldProto* temp = node_.resolved_make_proto_field_node_;
    node_.resolved_make_proto_field_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedMakeProtoFieldProto& AnyResolvedArgumentProto::resolved_make_proto_field_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_make_proto_field_node)
  return has_resolved_make_proto_field_node()
      ? *node_.resolved_make_proto_field_node_
      : *reinterpret_cast< ::zetasql::ResolvedMakeProtoFieldProto*>(&::zetasql::_ResolvedMakeProtoFieldProto_default_instance_);
}
inline ::zetasql::ResolvedMakeProtoFieldProto* AnyResolvedArgumentProto::mutable_resolved_make_proto_field_node() {
  if (!has_resolved_make_proto_field_node()) {
    clear_node();
    set_has_resolved_make_proto_field_node();
    node_.resolved_make_proto_field_node_ = CreateMaybeMessage< ::zetasql::ResolvedMakeProtoFieldProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_make_proto_field_node)
  return node_.resolved_make_proto_field_node_;
}

// optional .zetasql.ResolvedColumnHolderProto resolved_column_holder_node = 23;
inline bool AnyResolvedArgumentProto::has_resolved_column_holder_node() const {
  return node_case() == kResolvedColumnHolderNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_column_holder_node() {
  _oneof_case_[0] = kResolvedColumnHolderNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_column_holder_node() {
  if (has_resolved_column_holder_node()) {
    delete node_.resolved_column_holder_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedColumnHolderProto& AnyResolvedArgumentProto::_internal_resolved_column_holder_node() const {
  return *node_.resolved_column_holder_node_;
}
inline ::zetasql::ResolvedColumnHolderProto* AnyResolvedArgumentProto::release_resolved_column_holder_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_column_holder_node)
  if (has_resolved_column_holder_node()) {
    clear_has_node();
      ::zetasql::ResolvedColumnHolderProto* temp = node_.resolved_column_holder_node_;
    node_.resolved_column_holder_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedColumnHolderProto& AnyResolvedArgumentProto::resolved_column_holder_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_column_holder_node)
  return has_resolved_column_holder_node()
      ? *node_.resolved_column_holder_node_
      : *reinterpret_cast< ::zetasql::ResolvedColumnHolderProto*>(&::zetasql::_ResolvedColumnHolderProto_default_instance_);
}
inline ::zetasql::ResolvedColumnHolderProto* AnyResolvedArgumentProto::mutable_resolved_column_holder_node() {
  if (!has_resolved_column_holder_node()) {
    clear_node();
    set_has_resolved_column_holder_node();
    node_.resolved_column_holder_node_ = CreateMaybeMessage< ::zetasql::ResolvedColumnHolderProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_column_holder_node)
  return node_.resolved_column_holder_node_;
}

// optional .zetasql.ResolvedComputedColumnProto resolved_computed_column_node = 32;
inline bool AnyResolvedArgumentProto::has_resolved_computed_column_node() const {
  return node_case() == kResolvedComputedColumnNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_computed_column_node() {
  _oneof_case_[0] = kResolvedComputedColumnNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_computed_column_node() {
  if (has_resolved_computed_column_node()) {
    delete node_.resolved_computed_column_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedComputedColumnProto& AnyResolvedArgumentProto::_internal_resolved_computed_column_node() const {
  return *node_.resolved_computed_column_node_;
}
inline ::zetasql::ResolvedComputedColumnProto* AnyResolvedArgumentProto::release_resolved_computed_column_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_computed_column_node)
  if (has_resolved_computed_column_node()) {
    clear_has_node();
      ::zetasql::ResolvedComputedColumnProto* temp = node_.resolved_computed_column_node_;
    node_.resolved_computed_column_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedComputedColumnProto& AnyResolvedArgumentProto::resolved_computed_column_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_computed_column_node)
  return has_resolved_computed_column_node()
      ? *node_.resolved_computed_column_node_
      : *reinterpret_cast< ::zetasql::ResolvedComputedColumnProto*>(&::zetasql::_ResolvedComputedColumnProto_default_instance_);
}
inline ::zetasql::ResolvedComputedColumnProto* AnyResolvedArgumentProto::mutable_resolved_computed_column_node() {
  if (!has_resolved_computed_column_node()) {
    clear_node();
    set_has_resolved_computed_column_node();
    node_.resolved_computed_column_node_ = CreateMaybeMessage< ::zetasql::ResolvedComputedColumnProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_computed_column_node)
  return node_.resolved_computed_column_node_;
}

// optional .zetasql.ResolvedOrderByItemProto resolved_order_by_item_node = 33;
inline bool AnyResolvedArgumentProto::has_resolved_order_by_item_node() const {
  return node_case() == kResolvedOrderByItemNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_order_by_item_node() {
  _oneof_case_[0] = kResolvedOrderByItemNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_order_by_item_node() {
  if (has_resolved_order_by_item_node()) {
    delete node_.resolved_order_by_item_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedOrderByItemProto& AnyResolvedArgumentProto::_internal_resolved_order_by_item_node() const {
  return *node_.resolved_order_by_item_node_;
}
inline ::zetasql::ResolvedOrderByItemProto* AnyResolvedArgumentProto::release_resolved_order_by_item_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_order_by_item_node)
  if (has_resolved_order_by_item_node()) {
    clear_has_node();
      ::zetasql::ResolvedOrderByItemProto* temp = node_.resolved_order_by_item_node_;
    node_.resolved_order_by_item_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedOrderByItemProto& AnyResolvedArgumentProto::resolved_order_by_item_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_order_by_item_node)
  return has_resolved_order_by_item_node()
      ? *node_.resolved_order_by_item_node_
      : *reinterpret_cast< ::zetasql::ResolvedOrderByItemProto*>(&::zetasql::_ResolvedOrderByItemProto_default_instance_);
}
inline ::zetasql::ResolvedOrderByItemProto* AnyResolvedArgumentProto::mutable_resolved_order_by_item_node() {
  if (!has_resolved_order_by_item_node()) {
    clear_node();
    set_has_resolved_order_by_item_node();
    node_.resolved_order_by_item_node_ = CreateMaybeMessage< ::zetasql::ResolvedOrderByItemProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_order_by_item_node)
  return node_.resolved_order_by_item_node_;
}

// optional .zetasql.ResolvedOutputColumnProto resolved_output_column_node = 34;
inline bool AnyResolvedArgumentProto::has_resolved_output_column_node() const {
  return node_case() == kResolvedOutputColumnNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_output_column_node() {
  _oneof_case_[0] = kResolvedOutputColumnNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_output_column_node() {
  if (has_resolved_output_column_node()) {
    delete node_.resolved_output_column_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedOutputColumnProto& AnyResolvedArgumentProto::_internal_resolved_output_column_node() const {
  return *node_.resolved_output_column_node_;
}
inline ::zetasql::ResolvedOutputColumnProto* AnyResolvedArgumentProto::release_resolved_output_column_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_output_column_node)
  if (has_resolved_output_column_node()) {
    clear_has_node();
      ::zetasql::ResolvedOutputColumnProto* temp = node_.resolved_output_column_node_;
    node_.resolved_output_column_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedOutputColumnProto& AnyResolvedArgumentProto::resolved_output_column_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_output_column_node)
  return has_resolved_output_column_node()
      ? *node_.resolved_output_column_node_
      : *reinterpret_cast< ::zetasql::ResolvedOutputColumnProto*>(&::zetasql::_ResolvedOutputColumnProto_default_instance_);
}
inline ::zetasql::ResolvedOutputColumnProto* AnyResolvedArgumentProto::mutable_resolved_output_column_node() {
  if (!has_resolved_output_column_node()) {
    clear_node();
    set_has_resolved_output_column_node();
    node_.resolved_output_column_node_ = CreateMaybeMessage< ::zetasql::ResolvedOutputColumnProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_output_column_node)
  return node_.resolved_output_column_node_;
}

// optional .zetasql.ResolvedWithEntryProto resolved_with_entry_node = 52;
inline bool AnyResolvedArgumentProto::has_resolved_with_entry_node() const {
  return node_case() == kResolvedWithEntryNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_with_entry_node() {
  _oneof_case_[0] = kResolvedWithEntryNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_with_entry_node() {
  if (has_resolved_with_entry_node()) {
    delete node_.resolved_with_entry_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedWithEntryProto& AnyResolvedArgumentProto::_internal_resolved_with_entry_node() const {
  return *node_.resolved_with_entry_node_;
}
inline ::zetasql::ResolvedWithEntryProto* AnyResolvedArgumentProto::release_resolved_with_entry_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_with_entry_node)
  if (has_resolved_with_entry_node()) {
    clear_has_node();
      ::zetasql::ResolvedWithEntryProto* temp = node_.resolved_with_entry_node_;
    node_.resolved_with_entry_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedWithEntryProto& AnyResolvedArgumentProto::resolved_with_entry_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_with_entry_node)
  return has_resolved_with_entry_node()
      ? *node_.resolved_with_entry_node_
      : *reinterpret_cast< ::zetasql::ResolvedWithEntryProto*>(&::zetasql::_ResolvedWithEntryProto_default_instance_);
}
inline ::zetasql::ResolvedWithEntryProto* AnyResolvedArgumentProto::mutable_resolved_with_entry_node() {
  if (!has_resolved_with_entry_node()) {
    clear_node();
    set_has_resolved_with_entry_node();
    node_.resolved_with_entry_node_ = CreateMaybeMessage< ::zetasql::ResolvedWithEntryProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_with_entry_node)
  return node_.resolved_with_entry_node_;
}

// optional .zetasql.ResolvedOptionProto resolved_option_node = 53;
inline bool AnyResolvedArgumentProto::has_resolved_option_node() const {
  return node_case() == kResolvedOptionNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_option_node() {
  _oneof_case_[0] = kResolvedOptionNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_option_node() {
  if (has_resolved_option_node()) {
    delete node_.resolved_option_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedOptionProto& AnyResolvedArgumentProto::_internal_resolved_option_node() const {
  return *node_.resolved_option_node_;
}
inline ::zetasql::ResolvedOptionProto* AnyResolvedArgumentProto::release_resolved_option_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_option_node)
  if (has_resolved_option_node()) {
    clear_has_node();
      ::zetasql::ResolvedOptionProto* temp = node_.resolved_option_node_;
    node_.resolved_option_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedOptionProto& AnyResolvedArgumentProto::resolved_option_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_option_node)
  return has_resolved_option_node()
      ? *node_.resolved_option_node_
      : *reinterpret_cast< ::zetasql::ResolvedOptionProto*>(&::zetasql::_ResolvedOptionProto_default_instance_);
}
inline ::zetasql::ResolvedOptionProto* AnyResolvedArgumentProto::mutable_resolved_option_node() {
  if (!has_resolved_option_node()) {
    clear_node();
    set_has_resolved_option_node();
    node_.resolved_option_node_ = CreateMaybeMessage< ::zetasql::ResolvedOptionProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_option_node)
  return node_.resolved_option_node_;
}

// optional .zetasql.ResolvedWindowPartitioningProto resolved_window_partitioning_node = 54;
inline bool AnyResolvedArgumentProto::has_resolved_window_partitioning_node() const {
  return node_case() == kResolvedWindowPartitioningNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_window_partitioning_node() {
  _oneof_case_[0] = kResolvedWindowPartitioningNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_window_partitioning_node() {
  if (has_resolved_window_partitioning_node()) {
    delete node_.resolved_window_partitioning_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedWindowPartitioningProto& AnyResolvedArgumentProto::_internal_resolved_window_partitioning_node() const {
  return *node_.resolved_window_partitioning_node_;
}
inline ::zetasql::ResolvedWindowPartitioningProto* AnyResolvedArgumentProto::release_resolved_window_partitioning_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_window_partitioning_node)
  if (has_resolved_window_partitioning_node()) {
    clear_has_node();
      ::zetasql::ResolvedWindowPartitioningProto* temp = node_.resolved_window_partitioning_node_;
    node_.resolved_window_partitioning_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedWindowPartitioningProto& AnyResolvedArgumentProto::resolved_window_partitioning_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_window_partitioning_node)
  return has_resolved_window_partitioning_node()
      ? *node_.resolved_window_partitioning_node_
      : *reinterpret_cast< ::zetasql::ResolvedWindowPartitioningProto*>(&::zetasql::_ResolvedWindowPartitioningProto_default_instance_);
}
inline ::zetasql::ResolvedWindowPartitioningProto* AnyResolvedArgumentProto::mutable_resolved_window_partitioning_node() {
  if (!has_resolved_window_partitioning_node()) {
    clear_node();
    set_has_resolved_window_partitioning_node();
    node_.resolved_window_partitioning_node_ = CreateMaybeMessage< ::zetasql::ResolvedWindowPartitioningProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_window_partitioning_node)
  return node_.resolved_window_partitioning_node_;
}

// optional .zetasql.ResolvedWindowOrderingProto resolved_window_ordering_node = 55;
inline bool AnyResolvedArgumentProto::has_resolved_window_ordering_node() const {
  return node_case() == kResolvedWindowOrderingNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_window_ordering_node() {
  _oneof_case_[0] = kResolvedWindowOrderingNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_window_ordering_node() {
  if (has_resolved_window_ordering_node()) {
    delete node_.resolved_window_ordering_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedWindowOrderingProto& AnyResolvedArgumentProto::_internal_resolved_window_ordering_node() const {
  return *node_.resolved_window_ordering_node_;
}
inline ::zetasql::ResolvedWindowOrderingProto* AnyResolvedArgumentProto::release_resolved_window_ordering_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_window_ordering_node)
  if (has_resolved_window_ordering_node()) {
    clear_has_node();
      ::zetasql::ResolvedWindowOrderingProto* temp = node_.resolved_window_ordering_node_;
    node_.resolved_window_ordering_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedWindowOrderingProto& AnyResolvedArgumentProto::resolved_window_ordering_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_window_ordering_node)
  return has_resolved_window_ordering_node()
      ? *node_.resolved_window_ordering_node_
      : *reinterpret_cast< ::zetasql::ResolvedWindowOrderingProto*>(&::zetasql::_ResolvedWindowOrderingProto_default_instance_);
}
inline ::zetasql::ResolvedWindowOrderingProto* AnyResolvedArgumentProto::mutable_resolved_window_ordering_node() {
  if (!has_resolved_window_ordering_node()) {
    clear_node();
    set_has_resolved_window_ordering_node();
    node_.resolved_window_ordering_node_ = CreateMaybeMessage< ::zetasql::ResolvedWindowOrderingProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_window_ordering_node)
  return node_.resolved_window_ordering_node_;
}

// optional .zetasql.ResolvedWindowFrameProto resolved_window_frame_node = 56;
inline bool AnyResolvedArgumentProto::has_resolved_window_frame_node() const {
  return node_case() == kResolvedWindowFrameNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_window_frame_node() {
  _oneof_case_[0] = kResolvedWindowFrameNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_window_frame_node() {
  if (has_resolved_window_frame_node()) {
    delete node_.resolved_window_frame_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedWindowFrameProto& AnyResolvedArgumentProto::_internal_resolved_window_frame_node() const {
  return *node_.resolved_window_frame_node_;
}
inline ::zetasql::ResolvedWindowFrameProto* AnyResolvedArgumentProto::release_resolved_window_frame_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_window_frame_node)
  if (has_resolved_window_frame_node()) {
    clear_has_node();
      ::zetasql::ResolvedWindowFrameProto* temp = node_.resolved_window_frame_node_;
    node_.resolved_window_frame_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedWindowFrameProto& AnyResolvedArgumentProto::resolved_window_frame_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_window_frame_node)
  return has_resolved_window_frame_node()
      ? *node_.resolved_window_frame_node_
      : *reinterpret_cast< ::zetasql::ResolvedWindowFrameProto*>(&::zetasql::_ResolvedWindowFrameProto_default_instance_);
}
inline ::zetasql::ResolvedWindowFrameProto* AnyResolvedArgumentProto::mutable_resolved_window_frame_node() {
  if (!has_resolved_window_frame_node()) {
    clear_node();
    set_has_resolved_window_frame_node();
    node_.resolved_window_frame_node_ = CreateMaybeMessage< ::zetasql::ResolvedWindowFrameProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_window_frame_node)
  return node_.resolved_window_frame_node_;
}

// optional .zetasql.ResolvedAnalyticFunctionGroupProto resolved_analytic_function_group_node = 57;
inline bool AnyResolvedArgumentProto::has_resolved_analytic_function_group_node() const {
  return node_case() == kResolvedAnalyticFunctionGroupNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_analytic_function_group_node() {
  _oneof_case_[0] = kResolvedAnalyticFunctionGroupNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_analytic_function_group_node() {
  if (has_resolved_analytic_function_group_node()) {
    delete node_.resolved_analytic_function_group_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAnalyticFunctionGroupProto& AnyResolvedArgumentProto::_internal_resolved_analytic_function_group_node() const {
  return *node_.resolved_analytic_function_group_node_;
}
inline ::zetasql::ResolvedAnalyticFunctionGroupProto* AnyResolvedArgumentProto::release_resolved_analytic_function_group_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_analytic_function_group_node)
  if (has_resolved_analytic_function_group_node()) {
    clear_has_node();
      ::zetasql::ResolvedAnalyticFunctionGroupProto* temp = node_.resolved_analytic_function_group_node_;
    node_.resolved_analytic_function_group_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAnalyticFunctionGroupProto& AnyResolvedArgumentProto::resolved_analytic_function_group_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_analytic_function_group_node)
  return has_resolved_analytic_function_group_node()
      ? *node_.resolved_analytic_function_group_node_
      : *reinterpret_cast< ::zetasql::ResolvedAnalyticFunctionGroupProto*>(&::zetasql::_ResolvedAnalyticFunctionGroupProto_default_instance_);
}
inline ::zetasql::ResolvedAnalyticFunctionGroupProto* AnyResolvedArgumentProto::mutable_resolved_analytic_function_group_node() {
  if (!has_resolved_analytic_function_group_node()) {
    clear_node();
    set_has_resolved_analytic_function_group_node();
    node_.resolved_analytic_function_group_node_ = CreateMaybeMessage< ::zetasql::ResolvedAnalyticFunctionGroupProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_analytic_function_group_node)
  return node_.resolved_analytic_function_group_node_;
}

// optional .zetasql.ResolvedWindowFrameExprProto resolved_window_frame_expr_node = 58;
inline bool AnyResolvedArgumentProto::has_resolved_window_frame_expr_node() const {
  return node_case() == kResolvedWindowFrameExprNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_window_frame_expr_node() {
  _oneof_case_[0] = kResolvedWindowFrameExprNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_window_frame_expr_node() {
  if (has_resolved_window_frame_expr_node()) {
    delete node_.resolved_window_frame_expr_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedWindowFrameExprProto& AnyResolvedArgumentProto::_internal_resolved_window_frame_expr_node() const {
  return *node_.resolved_window_frame_expr_node_;
}
inline ::zetasql::ResolvedWindowFrameExprProto* AnyResolvedArgumentProto::release_resolved_window_frame_expr_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_window_frame_expr_node)
  if (has_resolved_window_frame_expr_node()) {
    clear_has_node();
      ::zetasql::ResolvedWindowFrameExprProto* temp = node_.resolved_window_frame_expr_node_;
    node_.resolved_window_frame_expr_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedWindowFrameExprProto& AnyResolvedArgumentProto::resolved_window_frame_expr_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_window_frame_expr_node)
  return has_resolved_window_frame_expr_node()
      ? *node_.resolved_window_frame_expr_node_
      : *reinterpret_cast< ::zetasql::ResolvedWindowFrameExprProto*>(&::zetasql::_ResolvedWindowFrameExprProto_default_instance_);
}
inline ::zetasql::ResolvedWindowFrameExprProto* AnyResolvedArgumentProto::mutable_resolved_window_frame_expr_node() {
  if (!has_resolved_window_frame_expr_node()) {
    clear_node();
    set_has_resolved_window_frame_expr_node();
    node_.resolved_window_frame_expr_node_ = CreateMaybeMessage< ::zetasql::ResolvedWindowFrameExprProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_window_frame_expr_node)
  return node_.resolved_window_frame_expr_node_;
}

// optional .zetasql.ResolvedDMLValueProto resolved_dmlvalue_node = 59;
inline bool AnyResolvedArgumentProto::has_resolved_dmlvalue_node() const {
  return node_case() == kResolvedDmlvalueNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_dmlvalue_node() {
  _oneof_case_[0] = kResolvedDmlvalueNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_dmlvalue_node() {
  if (has_resolved_dmlvalue_node()) {
    delete node_.resolved_dmlvalue_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedDMLValueProto& AnyResolvedArgumentProto::_internal_resolved_dmlvalue_node() const {
  return *node_.resolved_dmlvalue_node_;
}
inline ::zetasql::ResolvedDMLValueProto* AnyResolvedArgumentProto::release_resolved_dmlvalue_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_dmlvalue_node)
  if (has_resolved_dmlvalue_node()) {
    clear_has_node();
      ::zetasql::ResolvedDMLValueProto* temp = node_.resolved_dmlvalue_node_;
    node_.resolved_dmlvalue_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedDMLValueProto& AnyResolvedArgumentProto::resolved_dmlvalue_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_dmlvalue_node)
  return has_resolved_dmlvalue_node()
      ? *node_.resolved_dmlvalue_node_
      : *reinterpret_cast< ::zetasql::ResolvedDMLValueProto*>(&::zetasql::_ResolvedDMLValueProto_default_instance_);
}
inline ::zetasql::ResolvedDMLValueProto* AnyResolvedArgumentProto::mutable_resolved_dmlvalue_node() {
  if (!has_resolved_dmlvalue_node()) {
    clear_node();
    set_has_resolved_dmlvalue_node();
    node_.resolved_dmlvalue_node_ = CreateMaybeMessage< ::zetasql::ResolvedDMLValueProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_dmlvalue_node)
  return node_.resolved_dmlvalue_node_;
}

// optional .zetasql.ResolvedAssertRowsModifiedProto resolved_assert_rows_modified_node = 61;
inline bool AnyResolvedArgumentProto::has_resolved_assert_rows_modified_node() const {
  return node_case() == kResolvedAssertRowsModifiedNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_assert_rows_modified_node() {
  _oneof_case_[0] = kResolvedAssertRowsModifiedNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_assert_rows_modified_node() {
  if (has_resolved_assert_rows_modified_node()) {
    delete node_.resolved_assert_rows_modified_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAssertRowsModifiedProto& AnyResolvedArgumentProto::_internal_resolved_assert_rows_modified_node() const {
  return *node_.resolved_assert_rows_modified_node_;
}
inline ::zetasql::ResolvedAssertRowsModifiedProto* AnyResolvedArgumentProto::release_resolved_assert_rows_modified_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_assert_rows_modified_node)
  if (has_resolved_assert_rows_modified_node()) {
    clear_has_node();
      ::zetasql::ResolvedAssertRowsModifiedProto* temp = node_.resolved_assert_rows_modified_node_;
    node_.resolved_assert_rows_modified_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAssertRowsModifiedProto& AnyResolvedArgumentProto::resolved_assert_rows_modified_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_assert_rows_modified_node)
  return has_resolved_assert_rows_modified_node()
      ? *node_.resolved_assert_rows_modified_node_
      : *reinterpret_cast< ::zetasql::ResolvedAssertRowsModifiedProto*>(&::zetasql::_ResolvedAssertRowsModifiedProto_default_instance_);
}
inline ::zetasql::ResolvedAssertRowsModifiedProto* AnyResolvedArgumentProto::mutable_resolved_assert_rows_modified_node() {
  if (!has_resolved_assert_rows_modified_node()) {
    clear_node();
    set_has_resolved_assert_rows_modified_node();
    node_.resolved_assert_rows_modified_node_ = CreateMaybeMessage< ::zetasql::ResolvedAssertRowsModifiedProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_assert_rows_modified_node)
  return node_.resolved_assert_rows_modified_node_;
}

// optional .zetasql.ResolvedInsertRowProto resolved_insert_row_node = 62;
inline bool AnyResolvedArgumentProto::has_resolved_insert_row_node() const {
  return node_case() == kResolvedInsertRowNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_insert_row_node() {
  _oneof_case_[0] = kResolvedInsertRowNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_insert_row_node() {
  if (has_resolved_insert_row_node()) {
    delete node_.resolved_insert_row_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedInsertRowProto& AnyResolvedArgumentProto::_internal_resolved_insert_row_node() const {
  return *node_.resolved_insert_row_node_;
}
inline ::zetasql::ResolvedInsertRowProto* AnyResolvedArgumentProto::release_resolved_insert_row_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_insert_row_node)
  if (has_resolved_insert_row_node()) {
    clear_has_node();
      ::zetasql::ResolvedInsertRowProto* temp = node_.resolved_insert_row_node_;
    node_.resolved_insert_row_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedInsertRowProto& AnyResolvedArgumentProto::resolved_insert_row_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_insert_row_node)
  return has_resolved_insert_row_node()
      ? *node_.resolved_insert_row_node_
      : *reinterpret_cast< ::zetasql::ResolvedInsertRowProto*>(&::zetasql::_ResolvedInsertRowProto_default_instance_);
}
inline ::zetasql::ResolvedInsertRowProto* AnyResolvedArgumentProto::mutable_resolved_insert_row_node() {
  if (!has_resolved_insert_row_node()) {
    clear_node();
    set_has_resolved_insert_row_node();
    node_.resolved_insert_row_node_ = CreateMaybeMessage< ::zetasql::ResolvedInsertRowProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_insert_row_node)
  return node_.resolved_insert_row_node_;
}

// optional .zetasql.ResolvedUpdateItemProto resolved_update_item_node = 65;
inline bool AnyResolvedArgumentProto::has_resolved_update_item_node() const {
  return node_case() == kResolvedUpdateItemNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_update_item_node() {
  _oneof_case_[0] = kResolvedUpdateItemNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_update_item_node() {
  if (has_resolved_update_item_node()) {
    delete node_.resolved_update_item_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedUpdateItemProto& AnyResolvedArgumentProto::_internal_resolved_update_item_node() const {
  return *node_.resolved_update_item_node_;
}
inline ::zetasql::ResolvedUpdateItemProto* AnyResolvedArgumentProto::release_resolved_update_item_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_update_item_node)
  if (has_resolved_update_item_node()) {
    clear_has_node();
      ::zetasql::ResolvedUpdateItemProto* temp = node_.resolved_update_item_node_;
    node_.resolved_update_item_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedUpdateItemProto& AnyResolvedArgumentProto::resolved_update_item_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_update_item_node)
  return has_resolved_update_item_node()
      ? *node_.resolved_update_item_node_
      : *reinterpret_cast< ::zetasql::ResolvedUpdateItemProto*>(&::zetasql::_ResolvedUpdateItemProto_default_instance_);
}
inline ::zetasql::ResolvedUpdateItemProto* AnyResolvedArgumentProto::mutable_resolved_update_item_node() {
  if (!has_resolved_update_item_node()) {
    clear_node();
    set_has_resolved_update_item_node();
    node_.resolved_update_item_node_ = CreateMaybeMessage< ::zetasql::ResolvedUpdateItemProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_update_item_node)
  return node_.resolved_update_item_node_;
}

// optional .zetasql.ResolvedPrivilegeProto resolved_privilege_node = 67;
inline bool AnyResolvedArgumentProto::has_resolved_privilege_node() const {
  return node_case() == kResolvedPrivilegeNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_privilege_node() {
  _oneof_case_[0] = kResolvedPrivilegeNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_privilege_node() {
  if (has_resolved_privilege_node()) {
    delete node_.resolved_privilege_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedPrivilegeProto& AnyResolvedArgumentProto::_internal_resolved_privilege_node() const {
  return *node_.resolved_privilege_node_;
}
inline ::zetasql::ResolvedPrivilegeProto* AnyResolvedArgumentProto::release_resolved_privilege_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_privilege_node)
  if (has_resolved_privilege_node()) {
    clear_has_node();
      ::zetasql::ResolvedPrivilegeProto* temp = node_.resolved_privilege_node_;
    node_.resolved_privilege_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedPrivilegeProto& AnyResolvedArgumentProto::resolved_privilege_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_privilege_node)
  return has_resolved_privilege_node()
      ? *node_.resolved_privilege_node_
      : *reinterpret_cast< ::zetasql::ResolvedPrivilegeProto*>(&::zetasql::_ResolvedPrivilegeProto_default_instance_);
}
inline ::zetasql::ResolvedPrivilegeProto* AnyResolvedArgumentProto::mutable_resolved_privilege_node() {
  if (!has_resolved_privilege_node()) {
    clear_node();
    set_has_resolved_privilege_node();
    node_.resolved_privilege_node_ = CreateMaybeMessage< ::zetasql::ResolvedPrivilegeProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_privilege_node)
  return node_.resolved_privilege_node_;
}

// optional .zetasql.ResolvedArgumentDefProto resolved_argument_def_node = 77;
inline bool AnyResolvedArgumentProto::has_resolved_argument_def_node() const {
  return node_case() == kResolvedArgumentDefNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_argument_def_node() {
  _oneof_case_[0] = kResolvedArgumentDefNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_argument_def_node() {
  if (has_resolved_argument_def_node()) {
    delete node_.resolved_argument_def_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedArgumentDefProto& AnyResolvedArgumentProto::_internal_resolved_argument_def_node() const {
  return *node_.resolved_argument_def_node_;
}
inline ::zetasql::ResolvedArgumentDefProto* AnyResolvedArgumentProto::release_resolved_argument_def_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_argument_def_node)
  if (has_resolved_argument_def_node()) {
    clear_has_node();
      ::zetasql::ResolvedArgumentDefProto* temp = node_.resolved_argument_def_node_;
    node_.resolved_argument_def_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedArgumentDefProto& AnyResolvedArgumentProto::resolved_argument_def_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_argument_def_node)
  return has_resolved_argument_def_node()
      ? *node_.resolved_argument_def_node_
      : *reinterpret_cast< ::zetasql::ResolvedArgumentDefProto*>(&::zetasql::_ResolvedArgumentDefProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentDefProto* AnyResolvedArgumentProto::mutable_resolved_argument_def_node() {
  if (!has_resolved_argument_def_node()) {
    clear_node();
    set_has_resolved_argument_def_node();
    node_.resolved_argument_def_node_ = CreateMaybeMessage< ::zetasql::ResolvedArgumentDefProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_argument_def_node)
  return node_.resolved_argument_def_node_;
}

// optional .zetasql.ResolvedArgumentListProto resolved_argument_list_node = 79;
inline bool AnyResolvedArgumentProto::has_resolved_argument_list_node() const {
  return node_case() == kResolvedArgumentListNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_argument_list_node() {
  _oneof_case_[0] = kResolvedArgumentListNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_argument_list_node() {
  if (has_resolved_argument_list_node()) {
    delete node_.resolved_argument_list_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedArgumentListProto& AnyResolvedArgumentProto::_internal_resolved_argument_list_node() const {
  return *node_.resolved_argument_list_node_;
}
inline ::zetasql::ResolvedArgumentListProto* AnyResolvedArgumentProto::release_resolved_argument_list_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_argument_list_node)
  if (has_resolved_argument_list_node()) {
    clear_has_node();
      ::zetasql::ResolvedArgumentListProto* temp = node_.resolved_argument_list_node_;
    node_.resolved_argument_list_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedArgumentListProto& AnyResolvedArgumentProto::resolved_argument_list_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_argument_list_node)
  return has_resolved_argument_list_node()
      ? *node_.resolved_argument_list_node_
      : *reinterpret_cast< ::zetasql::ResolvedArgumentListProto*>(&::zetasql::_ResolvedArgumentListProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentListProto* AnyResolvedArgumentProto::mutable_resolved_argument_list_node() {
  if (!has_resolved_argument_list_node()) {
    clear_node();
    set_has_resolved_argument_list_node();
    node_.resolved_argument_list_node_ = CreateMaybeMessage< ::zetasql::ResolvedArgumentListProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_argument_list_node)
  return node_.resolved_argument_list_node_;
}

// optional .zetasql.ResolvedFunctionArgumentProto resolved_function_argument_node = 82;
inline bool AnyResolvedArgumentProto::has_resolved_function_argument_node() const {
  return node_case() == kResolvedFunctionArgumentNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_function_argument_node() {
  _oneof_case_[0] = kResolvedFunctionArgumentNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_function_argument_node() {
  if (has_resolved_function_argument_node()) {
    delete node_.resolved_function_argument_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedFunctionArgumentProto& AnyResolvedArgumentProto::_internal_resolved_function_argument_node() const {
  return *node_.resolved_function_argument_node_;
}
inline ::zetasql::ResolvedFunctionArgumentProto* AnyResolvedArgumentProto::release_resolved_function_argument_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_function_argument_node)
  if (has_resolved_function_argument_node()) {
    clear_has_node();
      ::zetasql::ResolvedFunctionArgumentProto* temp = node_.resolved_function_argument_node_;
    node_.resolved_function_argument_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedFunctionArgumentProto& AnyResolvedArgumentProto::resolved_function_argument_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_function_argument_node)
  return has_resolved_function_argument_node()
      ? *node_.resolved_function_argument_node_
      : *reinterpret_cast< ::zetasql::ResolvedFunctionArgumentProto*>(&::zetasql::_ResolvedFunctionArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedFunctionArgumentProto* AnyResolvedArgumentProto::mutable_resolved_function_argument_node() {
  if (!has_resolved_function_argument_node()) {
    clear_node();
    set_has_resolved_function_argument_node();
    node_.resolved_function_argument_node_ = CreateMaybeMessage< ::zetasql::ResolvedFunctionArgumentProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_function_argument_node)
  return node_.resolved_function_argument_node_;
}

// optional .zetasql.ResolvedFunctionSignatureHolderProto resolved_function_signature_holder_node = 84;
inline bool AnyResolvedArgumentProto::has_resolved_function_signature_holder_node() const {
  return node_case() == kResolvedFunctionSignatureHolderNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_function_signature_holder_node() {
  _oneof_case_[0] = kResolvedFunctionSignatureHolderNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_function_signature_holder_node() {
  if (has_resolved_function_signature_holder_node()) {
    delete node_.resolved_function_signature_holder_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedFunctionSignatureHolderProto& AnyResolvedArgumentProto::_internal_resolved_function_signature_holder_node() const {
  return *node_.resolved_function_signature_holder_node_;
}
inline ::zetasql::ResolvedFunctionSignatureHolderProto* AnyResolvedArgumentProto::release_resolved_function_signature_holder_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_function_signature_holder_node)
  if (has_resolved_function_signature_holder_node()) {
    clear_has_node();
      ::zetasql::ResolvedFunctionSignatureHolderProto* temp = node_.resolved_function_signature_holder_node_;
    node_.resolved_function_signature_holder_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedFunctionSignatureHolderProto& AnyResolvedArgumentProto::resolved_function_signature_holder_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_function_signature_holder_node)
  return has_resolved_function_signature_holder_node()
      ? *node_.resolved_function_signature_holder_node_
      : *reinterpret_cast< ::zetasql::ResolvedFunctionSignatureHolderProto*>(&::zetasql::_ResolvedFunctionSignatureHolderProto_default_instance_);
}
inline ::zetasql::ResolvedFunctionSignatureHolderProto* AnyResolvedArgumentProto::mutable_resolved_function_signature_holder_node() {
  if (!has_resolved_function_signature_holder_node()) {
    clear_node();
    set_has_resolved_function_signature_holder_node();
    node_.resolved_function_signature_holder_node_ = CreateMaybeMessage< ::zetasql::ResolvedFunctionSignatureHolderProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_function_signature_holder_node)
  return node_.resolved_function_signature_holder_node_;
}

// optional .zetasql.ResolvedAggregateHavingModifierProto resolved_aggregate_having_modifier_node = 85;
inline bool AnyResolvedArgumentProto::has_resolved_aggregate_having_modifier_node() const {
  return node_case() == kResolvedAggregateHavingModifierNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_aggregate_having_modifier_node() {
  _oneof_case_[0] = kResolvedAggregateHavingModifierNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_aggregate_having_modifier_node() {
  if (has_resolved_aggregate_having_modifier_node()) {
    delete node_.resolved_aggregate_having_modifier_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAggregateHavingModifierProto& AnyResolvedArgumentProto::_internal_resolved_aggregate_having_modifier_node() const {
  return *node_.resolved_aggregate_having_modifier_node_;
}
inline ::zetasql::ResolvedAggregateHavingModifierProto* AnyResolvedArgumentProto::release_resolved_aggregate_having_modifier_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_aggregate_having_modifier_node)
  if (has_resolved_aggregate_having_modifier_node()) {
    clear_has_node();
      ::zetasql::ResolvedAggregateHavingModifierProto* temp = node_.resolved_aggregate_having_modifier_node_;
    node_.resolved_aggregate_having_modifier_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAggregateHavingModifierProto& AnyResolvedArgumentProto::resolved_aggregate_having_modifier_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_aggregate_having_modifier_node)
  return has_resolved_aggregate_having_modifier_node()
      ? *node_.resolved_aggregate_having_modifier_node_
      : *reinterpret_cast< ::zetasql::ResolvedAggregateHavingModifierProto*>(&::zetasql::_ResolvedAggregateHavingModifierProto_default_instance_);
}
inline ::zetasql::ResolvedAggregateHavingModifierProto* AnyResolvedArgumentProto::mutable_resolved_aggregate_having_modifier_node() {
  if (!has_resolved_aggregate_having_modifier_node()) {
    clear_node();
    set_has_resolved_aggregate_having_modifier_node();
    node_.resolved_aggregate_having_modifier_node_ = CreateMaybeMessage< ::zetasql::ResolvedAggregateHavingModifierProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_aggregate_having_modifier_node)
  return node_.resolved_aggregate_having_modifier_node_;
}

// optional .zetasql.ResolvedColumnDefinitionProto resolved_column_definition_node = 91;
inline bool AnyResolvedArgumentProto::has_resolved_column_definition_node() const {
  return node_case() == kResolvedColumnDefinitionNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_column_definition_node() {
  _oneof_case_[0] = kResolvedColumnDefinitionNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_column_definition_node() {
  if (has_resolved_column_definition_node()) {
    delete node_.resolved_column_definition_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedColumnDefinitionProto& AnyResolvedArgumentProto::_internal_resolved_column_definition_node() const {
  return *node_.resolved_column_definition_node_;
}
inline ::zetasql::ResolvedColumnDefinitionProto* AnyResolvedArgumentProto::release_resolved_column_definition_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_column_definition_node)
  if (has_resolved_column_definition_node()) {
    clear_has_node();
      ::zetasql::ResolvedColumnDefinitionProto* temp = node_.resolved_column_definition_node_;
    node_.resolved_column_definition_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedColumnDefinitionProto& AnyResolvedArgumentProto::resolved_column_definition_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_column_definition_node)
  return has_resolved_column_definition_node()
      ? *node_.resolved_column_definition_node_
      : *reinterpret_cast< ::zetasql::ResolvedColumnDefinitionProto*>(&::zetasql::_ResolvedColumnDefinitionProto_default_instance_);
}
inline ::zetasql::ResolvedColumnDefinitionProto* AnyResolvedArgumentProto::mutable_resolved_column_definition_node() {
  if (!has_resolved_column_definition_node()) {
    clear_node();
    set_has_resolved_column_definition_node();
    node_.resolved_column_definition_node_ = CreateMaybeMessage< ::zetasql::ResolvedColumnDefinitionProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_column_definition_node)
  return node_.resolved_column_definition_node_;
}

// optional .zetasql.ResolvedGroupingSetProto resolved_grouping_set_node = 93;
inline bool AnyResolvedArgumentProto::has_resolved_grouping_set_node() const {
  return node_case() == kResolvedGroupingSetNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_grouping_set_node() {
  _oneof_case_[0] = kResolvedGroupingSetNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_grouping_set_node() {
  if (has_resolved_grouping_set_node()) {
    delete node_.resolved_grouping_set_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedGroupingSetProto& AnyResolvedArgumentProto::_internal_resolved_grouping_set_node() const {
  return *node_.resolved_grouping_set_node_;
}
inline ::zetasql::ResolvedGroupingSetProto* AnyResolvedArgumentProto::release_resolved_grouping_set_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_grouping_set_node)
  if (has_resolved_grouping_set_node()) {
    clear_has_node();
      ::zetasql::ResolvedGroupingSetProto* temp = node_.resolved_grouping_set_node_;
    node_.resolved_grouping_set_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedGroupingSetProto& AnyResolvedArgumentProto::resolved_grouping_set_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_grouping_set_node)
  return has_resolved_grouping_set_node()
      ? *node_.resolved_grouping_set_node_
      : *reinterpret_cast< ::zetasql::ResolvedGroupingSetProto*>(&::zetasql::_ResolvedGroupingSetProto_default_instance_);
}
inline ::zetasql::ResolvedGroupingSetProto* AnyResolvedArgumentProto::mutable_resolved_grouping_set_node() {
  if (!has_resolved_grouping_set_node()) {
    clear_node();
    set_has_resolved_grouping_set_node();
    node_.resolved_grouping_set_node_ = CreateMaybeMessage< ::zetasql::ResolvedGroupingSetProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_grouping_set_node)
  return node_.resolved_grouping_set_node_;
}

// optional .zetasql.ResolvedSetOperationItemProto resolved_set_operation_item_node = 94;
inline bool AnyResolvedArgumentProto::has_resolved_set_operation_item_node() const {
  return node_case() == kResolvedSetOperationItemNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_set_operation_item_node() {
  _oneof_case_[0] = kResolvedSetOperationItemNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_set_operation_item_node() {
  if (has_resolved_set_operation_item_node()) {
    delete node_.resolved_set_operation_item_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedSetOperationItemProto& AnyResolvedArgumentProto::_internal_resolved_set_operation_item_node() const {
  return *node_.resolved_set_operation_item_node_;
}
inline ::zetasql::ResolvedSetOperationItemProto* AnyResolvedArgumentProto::release_resolved_set_operation_item_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_set_operation_item_node)
  if (has_resolved_set_operation_item_node()) {
    clear_has_node();
      ::zetasql::ResolvedSetOperationItemProto* temp = node_.resolved_set_operation_item_node_;
    node_.resolved_set_operation_item_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedSetOperationItemProto& AnyResolvedArgumentProto::resolved_set_operation_item_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_set_operation_item_node)
  return has_resolved_set_operation_item_node()
      ? *node_.resolved_set_operation_item_node_
      : *reinterpret_cast< ::zetasql::ResolvedSetOperationItemProto*>(&::zetasql::_ResolvedSetOperationItemProto_default_instance_);
}
inline ::zetasql::ResolvedSetOperationItemProto* AnyResolvedArgumentProto::mutable_resolved_set_operation_item_node() {
  if (!has_resolved_set_operation_item_node()) {
    clear_node();
    set_has_resolved_set_operation_item_node();
    node_.resolved_set_operation_item_node_ = CreateMaybeMessage< ::zetasql::ResolvedSetOperationItemProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_set_operation_item_node)
  return node_.resolved_set_operation_item_node_;
}

// optional .zetasql.ResolvedIndexItemProto resolved_index_item_node = 96;
inline bool AnyResolvedArgumentProto::has_resolved_index_item_node() const {
  return node_case() == kResolvedIndexItemNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_index_item_node() {
  _oneof_case_[0] = kResolvedIndexItemNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_index_item_node() {
  if (has_resolved_index_item_node()) {
    delete node_.resolved_index_item_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedIndexItemProto& AnyResolvedArgumentProto::_internal_resolved_index_item_node() const {
  return *node_.resolved_index_item_node_;
}
inline ::zetasql::ResolvedIndexItemProto* AnyResolvedArgumentProto::release_resolved_index_item_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_index_item_node)
  if (has_resolved_index_item_node()) {
    clear_has_node();
      ::zetasql::ResolvedIndexItemProto* temp = node_.resolved_index_item_node_;
    node_.resolved_index_item_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedIndexItemProto& AnyResolvedArgumentProto::resolved_index_item_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_index_item_node)
  return has_resolved_index_item_node()
      ? *node_.resolved_index_item_node_
      : *reinterpret_cast< ::zetasql::ResolvedIndexItemProto*>(&::zetasql::_ResolvedIndexItemProto_default_instance_);
}
inline ::zetasql::ResolvedIndexItemProto* AnyResolvedArgumentProto::mutable_resolved_index_item_node() {
  if (!has_resolved_index_item_node()) {
    clear_node();
    set_has_resolved_index_item_node();
    node_.resolved_index_item_node_ = CreateMaybeMessage< ::zetasql::ResolvedIndexItemProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_index_item_node)
  return node_.resolved_index_item_node_;
}

// optional .zetasql.ResolvedMergeWhenProto resolved_merge_when_node = 100;
inline bool AnyResolvedArgumentProto::has_resolved_merge_when_node() const {
  return node_case() == kResolvedMergeWhenNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_merge_when_node() {
  _oneof_case_[0] = kResolvedMergeWhenNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_merge_when_node() {
  if (has_resolved_merge_when_node()) {
    delete node_.resolved_merge_when_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedMergeWhenProto& AnyResolvedArgumentProto::_internal_resolved_merge_when_node() const {
  return *node_.resolved_merge_when_node_;
}
inline ::zetasql::ResolvedMergeWhenProto* AnyResolvedArgumentProto::release_resolved_merge_when_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_merge_when_node)
  if (has_resolved_merge_when_node()) {
    clear_has_node();
      ::zetasql::ResolvedMergeWhenProto* temp = node_.resolved_merge_when_node_;
    node_.resolved_merge_when_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedMergeWhenProto& AnyResolvedArgumentProto::resolved_merge_when_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_merge_when_node)
  return has_resolved_merge_when_node()
      ? *node_.resolved_merge_when_node_
      : *reinterpret_cast< ::zetasql::ResolvedMergeWhenProto*>(&::zetasql::_ResolvedMergeWhenProto_default_instance_);
}
inline ::zetasql::ResolvedMergeWhenProto* AnyResolvedArgumentProto::mutable_resolved_merge_when_node() {
  if (!has_resolved_merge_when_node()) {
    clear_node();
    set_has_resolved_merge_when_node();
    node_.resolved_merge_when_node_ = CreateMaybeMessage< ::zetasql::ResolvedMergeWhenProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_merge_when_node)
  return node_.resolved_merge_when_node_;
}

// optional .zetasql.ResolvedUpdateArrayItemProto resolved_update_array_item_node = 102;
inline bool AnyResolvedArgumentProto::has_resolved_update_array_item_node() const {
  return node_case() == kResolvedUpdateArrayItemNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_update_array_item_node() {
  _oneof_case_[0] = kResolvedUpdateArrayItemNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_update_array_item_node() {
  if (has_resolved_update_array_item_node()) {
    delete node_.resolved_update_array_item_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedUpdateArrayItemProto& AnyResolvedArgumentProto::_internal_resolved_update_array_item_node() const {
  return *node_.resolved_update_array_item_node_;
}
inline ::zetasql::ResolvedUpdateArrayItemProto* AnyResolvedArgumentProto::release_resolved_update_array_item_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_update_array_item_node)
  if (has_resolved_update_array_item_node()) {
    clear_has_node();
      ::zetasql::ResolvedUpdateArrayItemProto* temp = node_.resolved_update_array_item_node_;
    node_.resolved_update_array_item_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedUpdateArrayItemProto& AnyResolvedArgumentProto::resolved_update_array_item_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_update_array_item_node)
  return has_resolved_update_array_item_node()
      ? *node_.resolved_update_array_item_node_
      : *reinterpret_cast< ::zetasql::ResolvedUpdateArrayItemProto*>(&::zetasql::_ResolvedUpdateArrayItemProto_default_instance_);
}
inline ::zetasql::ResolvedUpdateArrayItemProto* AnyResolvedArgumentProto::mutable_resolved_update_array_item_node() {
  if (!has_resolved_update_array_item_node()) {
    clear_node();
    set_has_resolved_update_array_item_node();
    node_.resolved_update_array_item_node_ = CreateMaybeMessage< ::zetasql::ResolvedUpdateArrayItemProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_update_array_item_node)
  return node_.resolved_update_array_item_node_;
}

// optional .zetasql.ResolvedColumnAnnotationsProto resolved_column_annotations_node = 104;
inline bool AnyResolvedArgumentProto::has_resolved_column_annotations_node() const {
  return node_case() == kResolvedColumnAnnotationsNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_column_annotations_node() {
  _oneof_case_[0] = kResolvedColumnAnnotationsNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_column_annotations_node() {
  if (has_resolved_column_annotations_node()) {
    delete node_.resolved_column_annotations_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedColumnAnnotationsProto& AnyResolvedArgumentProto::_internal_resolved_column_annotations_node() const {
  return *node_.resolved_column_annotations_node_;
}
inline ::zetasql::ResolvedColumnAnnotationsProto* AnyResolvedArgumentProto::release_resolved_column_annotations_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_column_annotations_node)
  if (has_resolved_column_annotations_node()) {
    clear_has_node();
      ::zetasql::ResolvedColumnAnnotationsProto* temp = node_.resolved_column_annotations_node_;
    node_.resolved_column_annotations_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedColumnAnnotationsProto& AnyResolvedArgumentProto::resolved_column_annotations_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_column_annotations_node)
  return has_resolved_column_annotations_node()
      ? *node_.resolved_column_annotations_node_
      : *reinterpret_cast< ::zetasql::ResolvedColumnAnnotationsProto*>(&::zetasql::_ResolvedColumnAnnotationsProto_default_instance_);
}
inline ::zetasql::ResolvedColumnAnnotationsProto* AnyResolvedArgumentProto::mutable_resolved_column_annotations_node() {
  if (!has_resolved_column_annotations_node()) {
    clear_node();
    set_has_resolved_column_annotations_node();
    node_.resolved_column_annotations_node_ = CreateMaybeMessage< ::zetasql::ResolvedColumnAnnotationsProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_column_annotations_node)
  return node_.resolved_column_annotations_node_;
}

// optional .zetasql.ResolvedGeneratedColumnInfoProto resolved_generated_column_info_node = 105;
inline bool AnyResolvedArgumentProto::has_resolved_generated_column_info_node() const {
  return node_case() == kResolvedGeneratedColumnInfoNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_generated_column_info_node() {
  _oneof_case_[0] = kResolvedGeneratedColumnInfoNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_generated_column_info_node() {
  if (has_resolved_generated_column_info_node()) {
    delete node_.resolved_generated_column_info_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedGeneratedColumnInfoProto& AnyResolvedArgumentProto::_internal_resolved_generated_column_info_node() const {
  return *node_.resolved_generated_column_info_node_;
}
inline ::zetasql::ResolvedGeneratedColumnInfoProto* AnyResolvedArgumentProto::release_resolved_generated_column_info_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_generated_column_info_node)
  if (has_resolved_generated_column_info_node()) {
    clear_has_node();
      ::zetasql::ResolvedGeneratedColumnInfoProto* temp = node_.resolved_generated_column_info_node_;
    node_.resolved_generated_column_info_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedGeneratedColumnInfoProto& AnyResolvedArgumentProto::resolved_generated_column_info_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_generated_column_info_node)
  return has_resolved_generated_column_info_node()
      ? *node_.resolved_generated_column_info_node_
      : *reinterpret_cast< ::zetasql::ResolvedGeneratedColumnInfoProto*>(&::zetasql::_ResolvedGeneratedColumnInfoProto_default_instance_);
}
inline ::zetasql::ResolvedGeneratedColumnInfoProto* AnyResolvedArgumentProto::mutable_resolved_generated_column_info_node() {
  if (!has_resolved_generated_column_info_node()) {
    clear_node();
    set_has_resolved_generated_column_info_node();
    node_.resolved_generated_column_info_node_ = CreateMaybeMessage< ::zetasql::ResolvedGeneratedColumnInfoProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_generated_column_info_node)
  return node_.resolved_generated_column_info_node_;
}

// optional .zetasql.ResolvedModelProto resolved_model_node = 109;
inline bool AnyResolvedArgumentProto::has_resolved_model_node() const {
  return node_case() == kResolvedModelNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_model_node() {
  _oneof_case_[0] = kResolvedModelNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_model_node() {
  if (has_resolved_model_node()) {
    delete node_.resolved_model_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedModelProto& AnyResolvedArgumentProto::_internal_resolved_model_node() const {
  return *node_.resolved_model_node_;
}
inline ::zetasql::ResolvedModelProto* AnyResolvedArgumentProto::release_resolved_model_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_model_node)
  if (has_resolved_model_node()) {
    clear_has_node();
      ::zetasql::ResolvedModelProto* temp = node_.resolved_model_node_;
    node_.resolved_model_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedModelProto& AnyResolvedArgumentProto::resolved_model_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_model_node)
  return has_resolved_model_node()
      ? *node_.resolved_model_node_
      : *reinterpret_cast< ::zetasql::ResolvedModelProto*>(&::zetasql::_ResolvedModelProto_default_instance_);
}
inline ::zetasql::ResolvedModelProto* AnyResolvedArgumentProto::mutable_resolved_model_node() {
  if (!has_resolved_model_node()) {
    clear_node();
    set_has_resolved_model_node();
    node_.resolved_model_node_ = CreateMaybeMessage< ::zetasql::ResolvedModelProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_model_node)
  return node_.resolved_model_node_;
}

// optional .zetasql.AnyResolvedAlterActionProto resolved_alter_action_node = 116;
inline bool AnyResolvedArgumentProto::has_resolved_alter_action_node() const {
  return node_case() == kResolvedAlterActionNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_alter_action_node() {
  _oneof_case_[0] = kResolvedAlterActionNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_alter_action_node() {
  if (has_resolved_alter_action_node()) {
    delete node_.resolved_alter_action_node_;
    clear_has_node();
  }
}
inline const ::zetasql::AnyResolvedAlterActionProto& AnyResolvedArgumentProto::_internal_resolved_alter_action_node() const {
  return *node_.resolved_alter_action_node_;
}
inline ::zetasql::AnyResolvedAlterActionProto* AnyResolvedArgumentProto::release_resolved_alter_action_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_alter_action_node)
  if (has_resolved_alter_action_node()) {
    clear_has_node();
      ::zetasql::AnyResolvedAlterActionProto* temp = node_.resolved_alter_action_node_;
    node_.resolved_alter_action_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::AnyResolvedAlterActionProto& AnyResolvedArgumentProto::resolved_alter_action_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_alter_action_node)
  return has_resolved_alter_action_node()
      ? *node_.resolved_alter_action_node_
      : *reinterpret_cast< ::zetasql::AnyResolvedAlterActionProto*>(&::zetasql::_AnyResolvedAlterActionProto_default_instance_);
}
inline ::zetasql::AnyResolvedAlterActionProto* AnyResolvedArgumentProto::mutable_resolved_alter_action_node() {
  if (!has_resolved_alter_action_node()) {
    clear_node();
    set_has_resolved_alter_action_node();
    node_.resolved_alter_action_node_ = CreateMaybeMessage< ::zetasql::AnyResolvedAlterActionProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_alter_action_node)
  return node_.resolved_alter_action_node_;
}

// optional .zetasql.ResolvedUnnestItemProto resolved_unnest_item_node = 126;
inline bool AnyResolvedArgumentProto::has_resolved_unnest_item_node() const {
  return node_case() == kResolvedUnnestItemNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_unnest_item_node() {
  _oneof_case_[0] = kResolvedUnnestItemNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_unnest_item_node() {
  if (has_resolved_unnest_item_node()) {
    delete node_.resolved_unnest_item_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedUnnestItemProto& AnyResolvedArgumentProto::_internal_resolved_unnest_item_node() const {
  return *node_.resolved_unnest_item_node_;
}
inline ::zetasql::ResolvedUnnestItemProto* AnyResolvedArgumentProto::release_resolved_unnest_item_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_unnest_item_node)
  if (has_resolved_unnest_item_node()) {
    clear_has_node();
      ::zetasql::ResolvedUnnestItemProto* temp = node_.resolved_unnest_item_node_;
    node_.resolved_unnest_item_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedUnnestItemProto& AnyResolvedArgumentProto::resolved_unnest_item_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_unnest_item_node)
  return has_resolved_unnest_item_node()
      ? *node_.resolved_unnest_item_node_
      : *reinterpret_cast< ::zetasql::ResolvedUnnestItemProto*>(&::zetasql::_ResolvedUnnestItemProto_default_instance_);
}
inline ::zetasql::ResolvedUnnestItemProto* AnyResolvedArgumentProto::mutable_resolved_unnest_item_node() {
  if (!has_resolved_unnest_item_node()) {
    clear_node();
    set_has_resolved_unnest_item_node();
    node_.resolved_unnest_item_node_ = CreateMaybeMessage< ::zetasql::ResolvedUnnestItemProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_unnest_item_node)
  return node_.resolved_unnest_item_node_;
}

// optional .zetasql.ResolvedReplaceFieldItemProto resolved_replace_field_item_node = 128;
inline bool AnyResolvedArgumentProto::has_resolved_replace_field_item_node() const {
  return node_case() == kResolvedReplaceFieldItemNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_replace_field_item_node() {
  _oneof_case_[0] = kResolvedReplaceFieldItemNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_replace_field_item_node() {
  if (has_resolved_replace_field_item_node()) {
    delete node_.resolved_replace_field_item_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedReplaceFieldItemProto& AnyResolvedArgumentProto::_internal_resolved_replace_field_item_node() const {
  return *node_.resolved_replace_field_item_node_;
}
inline ::zetasql::ResolvedReplaceFieldItemProto* AnyResolvedArgumentProto::release_resolved_replace_field_item_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_replace_field_item_node)
  if (has_resolved_replace_field_item_node()) {
    clear_has_node();
      ::zetasql::ResolvedReplaceFieldItemProto* temp = node_.resolved_replace_field_item_node_;
    node_.resolved_replace_field_item_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedReplaceFieldItemProto& AnyResolvedArgumentProto::resolved_replace_field_item_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_replace_field_item_node)
  return has_resolved_replace_field_item_node()
      ? *node_.resolved_replace_field_item_node_
      : *reinterpret_cast< ::zetasql::ResolvedReplaceFieldItemProto*>(&::zetasql::_ResolvedReplaceFieldItemProto_default_instance_);
}
inline ::zetasql::ResolvedReplaceFieldItemProto* AnyResolvedArgumentProto::mutable_resolved_replace_field_item_node() {
  if (!has_resolved_replace_field_item_node()) {
    clear_node();
    set_has_resolved_replace_field_item_node();
    node_.resolved_replace_field_item_node_ = CreateMaybeMessage< ::zetasql::ResolvedReplaceFieldItemProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_replace_field_item_node)
  return node_.resolved_replace_field_item_node_;
}

// optional .zetasql.ResolvedConnectionProto resolved_connection_node = 141;
inline bool AnyResolvedArgumentProto::has_resolved_connection_node() const {
  return node_case() == kResolvedConnectionNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_connection_node() {
  _oneof_case_[0] = kResolvedConnectionNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_connection_node() {
  if (has_resolved_connection_node()) {
    delete node_.resolved_connection_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedConnectionProto& AnyResolvedArgumentProto::_internal_resolved_connection_node() const {
  return *node_.resolved_connection_node_;
}
inline ::zetasql::ResolvedConnectionProto* AnyResolvedArgumentProto::release_resolved_connection_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_connection_node)
  if (has_resolved_connection_node()) {
    clear_has_node();
      ::zetasql::ResolvedConnectionProto* temp = node_.resolved_connection_node_;
    node_.resolved_connection_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedConnectionProto& AnyResolvedArgumentProto::resolved_connection_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_connection_node)
  return has_resolved_connection_node()
      ? *node_.resolved_connection_node_
      : *reinterpret_cast< ::zetasql::ResolvedConnectionProto*>(&::zetasql::_ResolvedConnectionProto_default_instance_);
}
inline ::zetasql::ResolvedConnectionProto* AnyResolvedArgumentProto::mutable_resolved_connection_node() {
  if (!has_resolved_connection_node()) {
    clear_node();
    set_has_resolved_connection_node();
    node_.resolved_connection_node_ = CreateMaybeMessage< ::zetasql::ResolvedConnectionProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_connection_node)
  return node_.resolved_connection_node_;
}

// optional .zetasql.ResolvedExecuteImmediateArgumentProto resolved_execute_immediate_argument_node = 143;
inline bool AnyResolvedArgumentProto::has_resolved_execute_immediate_argument_node() const {
  return node_case() == kResolvedExecuteImmediateArgumentNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_execute_immediate_argument_node() {
  _oneof_case_[0] = kResolvedExecuteImmediateArgumentNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_execute_immediate_argument_node() {
  if (has_resolved_execute_immediate_argument_node()) {
    delete node_.resolved_execute_immediate_argument_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedExecuteImmediateArgumentProto& AnyResolvedArgumentProto::_internal_resolved_execute_immediate_argument_node() const {
  return *node_.resolved_execute_immediate_argument_node_;
}
inline ::zetasql::ResolvedExecuteImmediateArgumentProto* AnyResolvedArgumentProto::release_resolved_execute_immediate_argument_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_execute_immediate_argument_node)
  if (has_resolved_execute_immediate_argument_node()) {
    clear_has_node();
      ::zetasql::ResolvedExecuteImmediateArgumentProto* temp = node_.resolved_execute_immediate_argument_node_;
    node_.resolved_execute_immediate_argument_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedExecuteImmediateArgumentProto& AnyResolvedArgumentProto::resolved_execute_immediate_argument_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_execute_immediate_argument_node)
  return has_resolved_execute_immediate_argument_node()
      ? *node_.resolved_execute_immediate_argument_node_
      : *reinterpret_cast< ::zetasql::ResolvedExecuteImmediateArgumentProto*>(&::zetasql::_ResolvedExecuteImmediateArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedExecuteImmediateArgumentProto* AnyResolvedArgumentProto::mutable_resolved_execute_immediate_argument_node() {
  if (!has_resolved_execute_immediate_argument_node()) {
    clear_node();
    set_has_resolved_execute_immediate_argument_node();
    node_.resolved_execute_immediate_argument_node_ = CreateMaybeMessage< ::zetasql::ResolvedExecuteImmediateArgumentProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_execute_immediate_argument_node)
  return node_.resolved_execute_immediate_argument_node_;
}

// optional .zetasql.ResolvedDescriptorProto resolved_descriptor_node = 144;
inline bool AnyResolvedArgumentProto::has_resolved_descriptor_node() const {
  return node_case() == kResolvedDescriptorNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_descriptor_node() {
  _oneof_case_[0] = kResolvedDescriptorNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_descriptor_node() {
  if (has_resolved_descriptor_node()) {
    delete node_.resolved_descriptor_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedDescriptorProto& AnyResolvedArgumentProto::_internal_resolved_descriptor_node() const {
  return *node_.resolved_descriptor_node_;
}
inline ::zetasql::ResolvedDescriptorProto* AnyResolvedArgumentProto::release_resolved_descriptor_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_descriptor_node)
  if (has_resolved_descriptor_node()) {
    clear_has_node();
      ::zetasql::ResolvedDescriptorProto* temp = node_.resolved_descriptor_node_;
    node_.resolved_descriptor_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedDescriptorProto& AnyResolvedArgumentProto::resolved_descriptor_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_descriptor_node)
  return has_resolved_descriptor_node()
      ? *node_.resolved_descriptor_node_
      : *reinterpret_cast< ::zetasql::ResolvedDescriptorProto*>(&::zetasql::_ResolvedDescriptorProto_default_instance_);
}
inline ::zetasql::ResolvedDescriptorProto* AnyResolvedArgumentProto::mutable_resolved_descriptor_node() {
  if (!has_resolved_descriptor_node()) {
    clear_node();
    set_has_resolved_descriptor_node();
    node_.resolved_descriptor_node_ = CreateMaybeMessage< ::zetasql::ResolvedDescriptorProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_descriptor_node)
  return node_.resolved_descriptor_node_;
}

// optional .zetasql.ResolvedExtendedCastElementProto resolved_extended_cast_element_node = 151;
inline bool AnyResolvedArgumentProto::has_resolved_extended_cast_element_node() const {
  return node_case() == kResolvedExtendedCastElementNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_extended_cast_element_node() {
  _oneof_case_[0] = kResolvedExtendedCastElementNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_extended_cast_element_node() {
  if (has_resolved_extended_cast_element_node()) {
    delete node_.resolved_extended_cast_element_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedExtendedCastElementProto& AnyResolvedArgumentProto::_internal_resolved_extended_cast_element_node() const {
  return *node_.resolved_extended_cast_element_node_;
}
inline ::zetasql::ResolvedExtendedCastElementProto* AnyResolvedArgumentProto::release_resolved_extended_cast_element_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_extended_cast_element_node)
  if (has_resolved_extended_cast_element_node()) {
    clear_has_node();
      ::zetasql::ResolvedExtendedCastElementProto* temp = node_.resolved_extended_cast_element_node_;
    node_.resolved_extended_cast_element_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedExtendedCastElementProto& AnyResolvedArgumentProto::resolved_extended_cast_element_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_extended_cast_element_node)
  return has_resolved_extended_cast_element_node()
      ? *node_.resolved_extended_cast_element_node_
      : *reinterpret_cast< ::zetasql::ResolvedExtendedCastElementProto*>(&::zetasql::_ResolvedExtendedCastElementProto_default_instance_);
}
inline ::zetasql::ResolvedExtendedCastElementProto* AnyResolvedArgumentProto::mutable_resolved_extended_cast_element_node() {
  if (!has_resolved_extended_cast_element_node()) {
    clear_node();
    set_has_resolved_extended_cast_element_node();
    node_.resolved_extended_cast_element_node_ = CreateMaybeMessage< ::zetasql::ResolvedExtendedCastElementProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_extended_cast_element_node)
  return node_.resolved_extended_cast_element_node_;
}

// optional .zetasql.ResolvedWithPartitionColumnsProto resolved_with_partition_columns_node = 153;
inline bool AnyResolvedArgumentProto::has_resolved_with_partition_columns_node() const {
  return node_case() == kResolvedWithPartitionColumnsNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_with_partition_columns_node() {
  _oneof_case_[0] = kResolvedWithPartitionColumnsNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_with_partition_columns_node() {
  if (has_resolved_with_partition_columns_node()) {
    delete node_.resolved_with_partition_columns_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedWithPartitionColumnsProto& AnyResolvedArgumentProto::_internal_resolved_with_partition_columns_node() const {
  return *node_.resolved_with_partition_columns_node_;
}
inline ::zetasql::ResolvedWithPartitionColumnsProto* AnyResolvedArgumentProto::release_resolved_with_partition_columns_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_with_partition_columns_node)
  if (has_resolved_with_partition_columns_node()) {
    clear_has_node();
      ::zetasql::ResolvedWithPartitionColumnsProto* temp = node_.resolved_with_partition_columns_node_;
    node_.resolved_with_partition_columns_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedWithPartitionColumnsProto& AnyResolvedArgumentProto::resolved_with_partition_columns_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_with_partition_columns_node)
  return has_resolved_with_partition_columns_node()
      ? *node_.resolved_with_partition_columns_node_
      : *reinterpret_cast< ::zetasql::ResolvedWithPartitionColumnsProto*>(&::zetasql::_ResolvedWithPartitionColumnsProto_default_instance_);
}
inline ::zetasql::ResolvedWithPartitionColumnsProto* AnyResolvedArgumentProto::mutable_resolved_with_partition_columns_node() {
  if (!has_resolved_with_partition_columns_node()) {
    clear_node();
    set_has_resolved_with_partition_columns_node();
    node_.resolved_with_partition_columns_node_ = CreateMaybeMessage< ::zetasql::ResolvedWithPartitionColumnsProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_with_partition_columns_node)
  return node_.resolved_with_partition_columns_node_;
}

// optional .zetasql.ResolvedExtendedCastProto resolved_extended_cast_node = 158;
inline bool AnyResolvedArgumentProto::has_resolved_extended_cast_node() const {
  return node_case() == kResolvedExtendedCastNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_extended_cast_node() {
  _oneof_case_[0] = kResolvedExtendedCastNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_extended_cast_node() {
  if (has_resolved_extended_cast_node()) {
    delete node_.resolved_extended_cast_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedExtendedCastProto& AnyResolvedArgumentProto::_internal_resolved_extended_cast_node() const {
  return *node_.resolved_extended_cast_node_;
}
inline ::zetasql::ResolvedExtendedCastProto* AnyResolvedArgumentProto::release_resolved_extended_cast_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_extended_cast_node)
  if (has_resolved_extended_cast_node()) {
    clear_has_node();
      ::zetasql::ResolvedExtendedCastProto* temp = node_.resolved_extended_cast_node_;
    node_.resolved_extended_cast_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedExtendedCastProto& AnyResolvedArgumentProto::resolved_extended_cast_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_extended_cast_node)
  return has_resolved_extended_cast_node()
      ? *node_.resolved_extended_cast_node_
      : *reinterpret_cast< ::zetasql::ResolvedExtendedCastProto*>(&::zetasql::_ResolvedExtendedCastProto_default_instance_);
}
inline ::zetasql::ResolvedExtendedCastProto* AnyResolvedArgumentProto::mutable_resolved_extended_cast_node() {
  if (!has_resolved_extended_cast_node()) {
    clear_node();
    set_has_resolved_extended_cast_node();
    node_.resolved_extended_cast_node_ = CreateMaybeMessage< ::zetasql::ResolvedExtendedCastProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_extended_cast_node)
  return node_.resolved_extended_cast_node_;
}

// optional .zetasql.ResolvedInlineLambdaProto resolved_inline_lambda_node = 159;
inline bool AnyResolvedArgumentProto::has_resolved_inline_lambda_node() const {
  return node_case() == kResolvedInlineLambdaNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_inline_lambda_node() {
  _oneof_case_[0] = kResolvedInlineLambdaNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_inline_lambda_node() {
  if (has_resolved_inline_lambda_node()) {
    delete node_.resolved_inline_lambda_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedInlineLambdaProto& AnyResolvedArgumentProto::_internal_resolved_inline_lambda_node() const {
  return *node_.resolved_inline_lambda_node_;
}
inline ::zetasql::ResolvedInlineLambdaProto* AnyResolvedArgumentProto::release_resolved_inline_lambda_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_inline_lambda_node)
  if (has_resolved_inline_lambda_node()) {
    clear_has_node();
      ::zetasql::ResolvedInlineLambdaProto* temp = node_.resolved_inline_lambda_node_;
    node_.resolved_inline_lambda_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedInlineLambdaProto& AnyResolvedArgumentProto::resolved_inline_lambda_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_inline_lambda_node)
  return has_resolved_inline_lambda_node()
      ? *node_.resolved_inline_lambda_node_
      : *reinterpret_cast< ::zetasql::ResolvedInlineLambdaProto*>(&::zetasql::_ResolvedInlineLambdaProto_default_instance_);
}
inline ::zetasql::ResolvedInlineLambdaProto* AnyResolvedArgumentProto::mutable_resolved_inline_lambda_node() {
  if (!has_resolved_inline_lambda_node()) {
    clear_node();
    set_has_resolved_inline_lambda_node();
    node_.resolved_inline_lambda_node_ = CreateMaybeMessage< ::zetasql::ResolvedInlineLambdaProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_inline_lambda_node)
  return node_.resolved_inline_lambda_node_;
}

// optional .zetasql.AnyResolvedConstraintProto resolved_constraint_node = 162;
inline bool AnyResolvedArgumentProto::has_resolved_constraint_node() const {
  return node_case() == kResolvedConstraintNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_constraint_node() {
  _oneof_case_[0] = kResolvedConstraintNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_constraint_node() {
  if (has_resolved_constraint_node()) {
    delete node_.resolved_constraint_node_;
    clear_has_node();
  }
}
inline const ::zetasql::AnyResolvedConstraintProto& AnyResolvedArgumentProto::_internal_resolved_constraint_node() const {
  return *node_.resolved_constraint_node_;
}
inline ::zetasql::AnyResolvedConstraintProto* AnyResolvedArgumentProto::release_resolved_constraint_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_constraint_node)
  if (has_resolved_constraint_node()) {
    clear_has_node();
      ::zetasql::AnyResolvedConstraintProto* temp = node_.resolved_constraint_node_;
    node_.resolved_constraint_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::AnyResolvedConstraintProto& AnyResolvedArgumentProto::resolved_constraint_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_constraint_node)
  return has_resolved_constraint_node()
      ? *node_.resolved_constraint_node_
      : *reinterpret_cast< ::zetasql::AnyResolvedConstraintProto*>(&::zetasql::_AnyResolvedConstraintProto_default_instance_);
}
inline ::zetasql::AnyResolvedConstraintProto* AnyResolvedArgumentProto::mutable_resolved_constraint_node() {
  if (!has_resolved_constraint_node()) {
    clear_node();
    set_has_resolved_constraint_node();
    node_.resolved_constraint_node_ = CreateMaybeMessage< ::zetasql::AnyResolvedConstraintProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_constraint_node)
  return node_.resolved_constraint_node_;
}

// optional .zetasql.ResolvedPivotColumnProto resolved_pivot_column_node = 166;
inline bool AnyResolvedArgumentProto::has_resolved_pivot_column_node() const {
  return node_case() == kResolvedPivotColumnNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_pivot_column_node() {
  _oneof_case_[0] = kResolvedPivotColumnNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_pivot_column_node() {
  if (has_resolved_pivot_column_node()) {
    delete node_.resolved_pivot_column_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedPivotColumnProto& AnyResolvedArgumentProto::_internal_resolved_pivot_column_node() const {
  return *node_.resolved_pivot_column_node_;
}
inline ::zetasql::ResolvedPivotColumnProto* AnyResolvedArgumentProto::release_resolved_pivot_column_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_pivot_column_node)
  if (has_resolved_pivot_column_node()) {
    clear_has_node();
      ::zetasql::ResolvedPivotColumnProto* temp = node_.resolved_pivot_column_node_;
    node_.resolved_pivot_column_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedPivotColumnProto& AnyResolvedArgumentProto::resolved_pivot_column_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_pivot_column_node)
  return has_resolved_pivot_column_node()
      ? *node_.resolved_pivot_column_node_
      : *reinterpret_cast< ::zetasql::ResolvedPivotColumnProto*>(&::zetasql::_ResolvedPivotColumnProto_default_instance_);
}
inline ::zetasql::ResolvedPivotColumnProto* AnyResolvedArgumentProto::mutable_resolved_pivot_column_node() {
  if (!has_resolved_pivot_column_node()) {
    clear_node();
    set_has_resolved_pivot_column_node();
    node_.resolved_pivot_column_node_ = CreateMaybeMessage< ::zetasql::ResolvedPivotColumnProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_pivot_column_node)
  return node_.resolved_pivot_column_node_;
}

// optional .zetasql.ResolvedReturningClauseProto resolved_returning_clause_node = 170;
inline bool AnyResolvedArgumentProto::has_resolved_returning_clause_node() const {
  return node_case() == kResolvedReturningClauseNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_returning_clause_node() {
  _oneof_case_[0] = kResolvedReturningClauseNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_returning_clause_node() {
  if (has_resolved_returning_clause_node()) {
    delete node_.resolved_returning_clause_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedReturningClauseProto& AnyResolvedArgumentProto::_internal_resolved_returning_clause_node() const {
  return *node_.resolved_returning_clause_node_;
}
inline ::zetasql::ResolvedReturningClauseProto* AnyResolvedArgumentProto::release_resolved_returning_clause_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_returning_clause_node)
  if (has_resolved_returning_clause_node()) {
    clear_has_node();
      ::zetasql::ResolvedReturningClauseProto* temp = node_.resolved_returning_clause_node_;
    node_.resolved_returning_clause_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedReturningClauseProto& AnyResolvedArgumentProto::resolved_returning_clause_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_returning_clause_node)
  return has_resolved_returning_clause_node()
      ? *node_.resolved_returning_clause_node_
      : *reinterpret_cast< ::zetasql::ResolvedReturningClauseProto*>(&::zetasql::_ResolvedReturningClauseProto_default_instance_);
}
inline ::zetasql::ResolvedReturningClauseProto* AnyResolvedArgumentProto::mutable_resolved_returning_clause_node() {
  if (!has_resolved_returning_clause_node()) {
    clear_node();
    set_has_resolved_returning_clause_node();
    node_.resolved_returning_clause_node_ = CreateMaybeMessage< ::zetasql::ResolvedReturningClauseProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_returning_clause_node)
  return node_.resolved_returning_clause_node_;
}

// optional .zetasql.ResolvedUnpivotArgProto resolved_unpivot_arg_node = 171;
inline bool AnyResolvedArgumentProto::has_resolved_unpivot_arg_node() const {
  return node_case() == kResolvedUnpivotArgNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_unpivot_arg_node() {
  _oneof_case_[0] = kResolvedUnpivotArgNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_unpivot_arg_node() {
  if (has_resolved_unpivot_arg_node()) {
    delete node_.resolved_unpivot_arg_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedUnpivotArgProto& AnyResolvedArgumentProto::_internal_resolved_unpivot_arg_node() const {
  return *node_.resolved_unpivot_arg_node_;
}
inline ::zetasql::ResolvedUnpivotArgProto* AnyResolvedArgumentProto::release_resolved_unpivot_arg_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_unpivot_arg_node)
  if (has_resolved_unpivot_arg_node()) {
    clear_has_node();
      ::zetasql::ResolvedUnpivotArgProto* temp = node_.resolved_unpivot_arg_node_;
    node_.resolved_unpivot_arg_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedUnpivotArgProto& AnyResolvedArgumentProto::resolved_unpivot_arg_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_unpivot_arg_node)
  return has_resolved_unpivot_arg_node()
      ? *node_.resolved_unpivot_arg_node_
      : *reinterpret_cast< ::zetasql::ResolvedUnpivotArgProto*>(&::zetasql::_ResolvedUnpivotArgProto_default_instance_);
}
inline ::zetasql::ResolvedUnpivotArgProto* AnyResolvedArgumentProto::mutable_resolved_unpivot_arg_node() {
  if (!has_resolved_unpivot_arg_node()) {
    clear_node();
    set_has_resolved_unpivot_arg_node();
    node_.resolved_unpivot_arg_node_ = CreateMaybeMessage< ::zetasql::ResolvedUnpivotArgProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_unpivot_arg_node)
  return node_.resolved_unpivot_arg_node_;
}

// optional .zetasql.ResolvedFilterFieldArgProto resolved_filter_field_arg_node = 173;
inline bool AnyResolvedArgumentProto::has_resolved_filter_field_arg_node() const {
  return node_case() == kResolvedFilterFieldArgNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_filter_field_arg_node() {
  _oneof_case_[0] = kResolvedFilterFieldArgNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_filter_field_arg_node() {
  if (has_resolved_filter_field_arg_node()) {
    delete node_.resolved_filter_field_arg_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedFilterFieldArgProto& AnyResolvedArgumentProto::_internal_resolved_filter_field_arg_node() const {
  return *node_.resolved_filter_field_arg_node_;
}
inline ::zetasql::ResolvedFilterFieldArgProto* AnyResolvedArgumentProto::release_resolved_filter_field_arg_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_filter_field_arg_node)
  if (has_resolved_filter_field_arg_node()) {
    clear_has_node();
      ::zetasql::ResolvedFilterFieldArgProto* temp = node_.resolved_filter_field_arg_node_;
    node_.resolved_filter_field_arg_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedFilterFieldArgProto& AnyResolvedArgumentProto::resolved_filter_field_arg_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_filter_field_arg_node)
  return has_resolved_filter_field_arg_node()
      ? *node_.resolved_filter_field_arg_node_
      : *reinterpret_cast< ::zetasql::ResolvedFilterFieldArgProto*>(&::zetasql::_ResolvedFilterFieldArgProto_default_instance_);
}
inline ::zetasql::ResolvedFilterFieldArgProto* AnyResolvedArgumentProto::mutable_resolved_filter_field_arg_node() {
  if (!has_resolved_filter_field_arg_node()) {
    clear_node();
    set_has_resolved_filter_field_arg_node();
    node_.resolved_filter_field_arg_node_ = CreateMaybeMessage< ::zetasql::ResolvedFilterFieldArgProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_filter_field_arg_node)
  return node_.resolved_filter_field_arg_node_;
}

// optional .zetasql.ResolvedTableAndColumnInfoProto resolved_table_and_column_info_node = 179;
inline bool AnyResolvedArgumentProto::has_resolved_table_and_column_info_node() const {
  return node_case() == kResolvedTableAndColumnInfoNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_table_and_column_info_node() {
  _oneof_case_[0] = kResolvedTableAndColumnInfoNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_table_and_column_info_node() {
  if (has_resolved_table_and_column_info_node()) {
    delete node_.resolved_table_and_column_info_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedTableAndColumnInfoProto& AnyResolvedArgumentProto::_internal_resolved_table_and_column_info_node() const {
  return *node_.resolved_table_and_column_info_node_;
}
inline ::zetasql::ResolvedTableAndColumnInfoProto* AnyResolvedArgumentProto::release_resolved_table_and_column_info_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_table_and_column_info_node)
  if (has_resolved_table_and_column_info_node()) {
    clear_has_node();
      ::zetasql::ResolvedTableAndColumnInfoProto* temp = node_.resolved_table_and_column_info_node_;
    node_.resolved_table_and_column_info_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedTableAndColumnInfoProto& AnyResolvedArgumentProto::resolved_table_and_column_info_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_table_and_column_info_node)
  return has_resolved_table_and_column_info_node()
      ? *node_.resolved_table_and_column_info_node_
      : *reinterpret_cast< ::zetasql::ResolvedTableAndColumnInfoProto*>(&::zetasql::_ResolvedTableAndColumnInfoProto_default_instance_);
}
inline ::zetasql::ResolvedTableAndColumnInfoProto* AnyResolvedArgumentProto::mutable_resolved_table_and_column_info_node() {
  if (!has_resolved_table_and_column_info_node()) {
    clear_node();
    set_has_resolved_table_and_column_info_node();
    node_.resolved_table_and_column_info_node_ = CreateMaybeMessage< ::zetasql::ResolvedTableAndColumnInfoProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_table_and_column_info_node)
  return node_.resolved_table_and_column_info_node_;
}

// optional .zetasql.ResolvedColumnDefaultValueProto resolved_column_default_value_node = 188;
inline bool AnyResolvedArgumentProto::has_resolved_column_default_value_node() const {
  return node_case() == kResolvedColumnDefaultValueNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_column_default_value_node() {
  _oneof_case_[0] = kResolvedColumnDefaultValueNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_column_default_value_node() {
  if (has_resolved_column_default_value_node()) {
    delete node_.resolved_column_default_value_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedColumnDefaultValueProto& AnyResolvedArgumentProto::_internal_resolved_column_default_value_node() const {
  return *node_.resolved_column_default_value_node_;
}
inline ::zetasql::ResolvedColumnDefaultValueProto* AnyResolvedArgumentProto::release_resolved_column_default_value_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_column_default_value_node)
  if (has_resolved_column_default_value_node()) {
    clear_has_node();
      ::zetasql::ResolvedColumnDefaultValueProto* temp = node_.resolved_column_default_value_node_;
    node_.resolved_column_default_value_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedColumnDefaultValueProto& AnyResolvedArgumentProto::resolved_column_default_value_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_column_default_value_node)
  return has_resolved_column_default_value_node()
      ? *node_.resolved_column_default_value_node_
      : *reinterpret_cast< ::zetasql::ResolvedColumnDefaultValueProto*>(&::zetasql::_ResolvedColumnDefaultValueProto_default_instance_);
}
inline ::zetasql::ResolvedColumnDefaultValueProto* AnyResolvedArgumentProto::mutable_resolved_column_default_value_node() {
  if (!has_resolved_column_default_value_node()) {
    clear_node();
    set_has_resolved_column_default_value_node();
    node_.resolved_column_default_value_node_ = CreateMaybeMessage< ::zetasql::ResolvedColumnDefaultValueProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_column_default_value_node)
  return node_.resolved_column_default_value_node_;
}

// optional .zetasql.ResolvedObjectUnitProto resolved_object_unit_node = 200;
inline bool AnyResolvedArgumentProto::has_resolved_object_unit_node() const {
  return node_case() == kResolvedObjectUnitNode;
}
inline void AnyResolvedArgumentProto::set_has_resolved_object_unit_node() {
  _oneof_case_[0] = kResolvedObjectUnitNode;
}
inline void AnyResolvedArgumentProto::clear_resolved_object_unit_node() {
  if (has_resolved_object_unit_node()) {
    delete node_.resolved_object_unit_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedObjectUnitProto& AnyResolvedArgumentProto::_internal_resolved_object_unit_node() const {
  return *node_.resolved_object_unit_node_;
}
inline ::zetasql::ResolvedObjectUnitProto* AnyResolvedArgumentProto::release_resolved_object_unit_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedArgumentProto.resolved_object_unit_node)
  if (has_resolved_object_unit_node()) {
    clear_has_node();
      ::zetasql::ResolvedObjectUnitProto* temp = node_.resolved_object_unit_node_;
    node_.resolved_object_unit_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedObjectUnitProto& AnyResolvedArgumentProto::resolved_object_unit_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedArgumentProto.resolved_object_unit_node)
  return has_resolved_object_unit_node()
      ? *node_.resolved_object_unit_node_
      : *reinterpret_cast< ::zetasql::ResolvedObjectUnitProto*>(&::zetasql::_ResolvedObjectUnitProto_default_instance_);
}
inline ::zetasql::ResolvedObjectUnitProto* AnyResolvedArgumentProto::mutable_resolved_object_unit_node() {
  if (!has_resolved_object_unit_node()) {
    clear_node();
    set_has_resolved_object_unit_node();
    node_.resolved_object_unit_node_ = CreateMaybeMessage< ::zetasql::ResolvedObjectUnitProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedArgumentProto.resolved_object_unit_node)
  return node_.resolved_object_unit_node_;
}

inline bool AnyResolvedArgumentProto::has_node() const {
  return node_case() != NODE_NOT_SET;
}
inline void AnyResolvedArgumentProto::clear_has_node() {
  _oneof_case_[0] = NODE_NOT_SET;
}
inline AnyResolvedArgumentProto::NodeCase AnyResolvedArgumentProto::node_case() const {
  return AnyResolvedArgumentProto::NodeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResolvedArgumentProto

// optional .zetasql.ResolvedNodeProto parent = 1;
inline bool ResolvedArgumentProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedArgumentProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedArgumentProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::zetasql::ResolvedNodeProto& ResolvedArgumentProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedNodeProto& ResolvedArgumentProto::parent() const {
  const ::zetasql::ResolvedNodeProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedArgumentProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedNodeProto*>(
      &::zetasql::_ResolvedNodeProto_default_instance_);
}
inline ::zetasql::ResolvedNodeProto* ResolvedArgumentProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedArgumentProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedNodeProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedNodeProto* ResolvedArgumentProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedNodeProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedArgumentProto.parent)
  return parent_;
}
inline void ResolvedArgumentProto::set_allocated_parent(::zetasql::ResolvedNodeProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(parent_);
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedArgumentProto.parent)
}

// -------------------------------------------------------------------

// AnyResolvedExprProto

// optional .zetasql.ResolvedLiteralProto resolved_literal_node = 3;
inline bool AnyResolvedExprProto::has_resolved_literal_node() const {
  return node_case() == kResolvedLiteralNode;
}
inline void AnyResolvedExprProto::set_has_resolved_literal_node() {
  _oneof_case_[0] = kResolvedLiteralNode;
}
inline void AnyResolvedExprProto::clear_resolved_literal_node() {
  if (has_resolved_literal_node()) {
    delete node_.resolved_literal_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedLiteralProto& AnyResolvedExprProto::_internal_resolved_literal_node() const {
  return *node_.resolved_literal_node_;
}
inline ::zetasql::ResolvedLiteralProto* AnyResolvedExprProto::release_resolved_literal_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedExprProto.resolved_literal_node)
  if (has_resolved_literal_node()) {
    clear_has_node();
      ::zetasql::ResolvedLiteralProto* temp = node_.resolved_literal_node_;
    node_.resolved_literal_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedLiteralProto& AnyResolvedExprProto::resolved_literal_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedExprProto.resolved_literal_node)
  return has_resolved_literal_node()
      ? *node_.resolved_literal_node_
      : *reinterpret_cast< ::zetasql::ResolvedLiteralProto*>(&::zetasql::_ResolvedLiteralProto_default_instance_);
}
inline ::zetasql::ResolvedLiteralProto* AnyResolvedExprProto::mutable_resolved_literal_node() {
  if (!has_resolved_literal_node()) {
    clear_node();
    set_has_resolved_literal_node();
    node_.resolved_literal_node_ = CreateMaybeMessage< ::zetasql::ResolvedLiteralProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedExprProto.resolved_literal_node)
  return node_.resolved_literal_node_;
}

// optional .zetasql.ResolvedParameterProto resolved_parameter_node = 4;
inline bool AnyResolvedExprProto::has_resolved_parameter_node() const {
  return node_case() == kResolvedParameterNode;
}
inline void AnyResolvedExprProto::set_has_resolved_parameter_node() {
  _oneof_case_[0] = kResolvedParameterNode;
}
inline void AnyResolvedExprProto::clear_resolved_parameter_node() {
  if (has_resolved_parameter_node()) {
    delete node_.resolved_parameter_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedParameterProto& AnyResolvedExprProto::_internal_resolved_parameter_node() const {
  return *node_.resolved_parameter_node_;
}
inline ::zetasql::ResolvedParameterProto* AnyResolvedExprProto::release_resolved_parameter_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedExprProto.resolved_parameter_node)
  if (has_resolved_parameter_node()) {
    clear_has_node();
      ::zetasql::ResolvedParameterProto* temp = node_.resolved_parameter_node_;
    node_.resolved_parameter_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedParameterProto& AnyResolvedExprProto::resolved_parameter_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedExprProto.resolved_parameter_node)
  return has_resolved_parameter_node()
      ? *node_.resolved_parameter_node_
      : *reinterpret_cast< ::zetasql::ResolvedParameterProto*>(&::zetasql::_ResolvedParameterProto_default_instance_);
}
inline ::zetasql::ResolvedParameterProto* AnyResolvedExprProto::mutable_resolved_parameter_node() {
  if (!has_resolved_parameter_node()) {
    clear_node();
    set_has_resolved_parameter_node();
    node_.resolved_parameter_node_ = CreateMaybeMessage< ::zetasql::ResolvedParameterProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedExprProto.resolved_parameter_node)
  return node_.resolved_parameter_node_;
}

// optional .zetasql.ResolvedExpressionColumnProto resolved_expression_column_node = 5;
inline bool AnyResolvedExprProto::has_resolved_expression_column_node() const {
  return node_case() == kResolvedExpressionColumnNode;
}
inline void AnyResolvedExprProto::set_has_resolved_expression_column_node() {
  _oneof_case_[0] = kResolvedExpressionColumnNode;
}
inline void AnyResolvedExprProto::clear_resolved_expression_column_node() {
  if (has_resolved_expression_column_node()) {
    delete node_.resolved_expression_column_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedExpressionColumnProto& AnyResolvedExprProto::_internal_resolved_expression_column_node() const {
  return *node_.resolved_expression_column_node_;
}
inline ::zetasql::ResolvedExpressionColumnProto* AnyResolvedExprProto::release_resolved_expression_column_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedExprProto.resolved_expression_column_node)
  if (has_resolved_expression_column_node()) {
    clear_has_node();
      ::zetasql::ResolvedExpressionColumnProto* temp = node_.resolved_expression_column_node_;
    node_.resolved_expression_column_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedExpressionColumnProto& AnyResolvedExprProto::resolved_expression_column_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedExprProto.resolved_expression_column_node)
  return has_resolved_expression_column_node()
      ? *node_.resolved_expression_column_node_
      : *reinterpret_cast< ::zetasql::ResolvedExpressionColumnProto*>(&::zetasql::_ResolvedExpressionColumnProto_default_instance_);
}
inline ::zetasql::ResolvedExpressionColumnProto* AnyResolvedExprProto::mutable_resolved_expression_column_node() {
  if (!has_resolved_expression_column_node()) {
    clear_node();
    set_has_resolved_expression_column_node();
    node_.resolved_expression_column_node_ = CreateMaybeMessage< ::zetasql::ResolvedExpressionColumnProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedExprProto.resolved_expression_column_node)
  return node_.resolved_expression_column_node_;
}

// optional .zetasql.ResolvedColumnRefProto resolved_column_ref_node = 6;
inline bool AnyResolvedExprProto::has_resolved_column_ref_node() const {
  return node_case() == kResolvedColumnRefNode;
}
inline void AnyResolvedExprProto::set_has_resolved_column_ref_node() {
  _oneof_case_[0] = kResolvedColumnRefNode;
}
inline void AnyResolvedExprProto::clear_resolved_column_ref_node() {
  if (has_resolved_column_ref_node()) {
    delete node_.resolved_column_ref_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedColumnRefProto& AnyResolvedExprProto::_internal_resolved_column_ref_node() const {
  return *node_.resolved_column_ref_node_;
}
inline ::zetasql::ResolvedColumnRefProto* AnyResolvedExprProto::release_resolved_column_ref_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedExprProto.resolved_column_ref_node)
  if (has_resolved_column_ref_node()) {
    clear_has_node();
      ::zetasql::ResolvedColumnRefProto* temp = node_.resolved_column_ref_node_;
    node_.resolved_column_ref_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedColumnRefProto& AnyResolvedExprProto::resolved_column_ref_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedExprProto.resolved_column_ref_node)
  return has_resolved_column_ref_node()
      ? *node_.resolved_column_ref_node_
      : *reinterpret_cast< ::zetasql::ResolvedColumnRefProto*>(&::zetasql::_ResolvedColumnRefProto_default_instance_);
}
inline ::zetasql::ResolvedColumnRefProto* AnyResolvedExprProto::mutable_resolved_column_ref_node() {
  if (!has_resolved_column_ref_node()) {
    clear_node();
    set_has_resolved_column_ref_node();
    node_.resolved_column_ref_node_ = CreateMaybeMessage< ::zetasql::ResolvedColumnRefProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedExprProto.resolved_column_ref_node)
  return node_.resolved_column_ref_node_;
}

// optional .zetasql.AnyResolvedFunctionCallBaseProto resolved_function_call_base_node = 7;
inline bool AnyResolvedExprProto::has_resolved_function_call_base_node() const {
  return node_case() == kResolvedFunctionCallBaseNode;
}
inline void AnyResolvedExprProto::set_has_resolved_function_call_base_node() {
  _oneof_case_[0] = kResolvedFunctionCallBaseNode;
}
inline void AnyResolvedExprProto::clear_resolved_function_call_base_node() {
  if (has_resolved_function_call_base_node()) {
    delete node_.resolved_function_call_base_node_;
    clear_has_node();
  }
}
inline const ::zetasql::AnyResolvedFunctionCallBaseProto& AnyResolvedExprProto::_internal_resolved_function_call_base_node() const {
  return *node_.resolved_function_call_base_node_;
}
inline ::zetasql::AnyResolvedFunctionCallBaseProto* AnyResolvedExprProto::release_resolved_function_call_base_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedExprProto.resolved_function_call_base_node)
  if (has_resolved_function_call_base_node()) {
    clear_has_node();
      ::zetasql::AnyResolvedFunctionCallBaseProto* temp = node_.resolved_function_call_base_node_;
    node_.resolved_function_call_base_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::AnyResolvedFunctionCallBaseProto& AnyResolvedExprProto::resolved_function_call_base_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedExprProto.resolved_function_call_base_node)
  return has_resolved_function_call_base_node()
      ? *node_.resolved_function_call_base_node_
      : *reinterpret_cast< ::zetasql::AnyResolvedFunctionCallBaseProto*>(&::zetasql::_AnyResolvedFunctionCallBaseProto_default_instance_);
}
inline ::zetasql::AnyResolvedFunctionCallBaseProto* AnyResolvedExprProto::mutable_resolved_function_call_base_node() {
  if (!has_resolved_function_call_base_node()) {
    clear_node();
    set_has_resolved_function_call_base_node();
    node_.resolved_function_call_base_node_ = CreateMaybeMessage< ::zetasql::AnyResolvedFunctionCallBaseProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedExprProto.resolved_function_call_base_node)
  return node_.resolved_function_call_base_node_;
}

// optional .zetasql.ResolvedCastProto resolved_cast_node = 11;
inline bool AnyResolvedExprProto::has_resolved_cast_node() const {
  return node_case() == kResolvedCastNode;
}
inline void AnyResolvedExprProto::set_has_resolved_cast_node() {
  _oneof_case_[0] = kResolvedCastNode;
}
inline void AnyResolvedExprProto::clear_resolved_cast_node() {
  if (has_resolved_cast_node()) {
    delete node_.resolved_cast_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedCastProto& AnyResolvedExprProto::_internal_resolved_cast_node() const {
  return *node_.resolved_cast_node_;
}
inline ::zetasql::ResolvedCastProto* AnyResolvedExprProto::release_resolved_cast_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedExprProto.resolved_cast_node)
  if (has_resolved_cast_node()) {
    clear_has_node();
      ::zetasql::ResolvedCastProto* temp = node_.resolved_cast_node_;
    node_.resolved_cast_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedCastProto& AnyResolvedExprProto::resolved_cast_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedExprProto.resolved_cast_node)
  return has_resolved_cast_node()
      ? *node_.resolved_cast_node_
      : *reinterpret_cast< ::zetasql::ResolvedCastProto*>(&::zetasql::_ResolvedCastProto_default_instance_);
}
inline ::zetasql::ResolvedCastProto* AnyResolvedExprProto::mutable_resolved_cast_node() {
  if (!has_resolved_cast_node()) {
    clear_node();
    set_has_resolved_cast_node();
    node_.resolved_cast_node_ = CreateMaybeMessage< ::zetasql::ResolvedCastProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedExprProto.resolved_cast_node)
  return node_.resolved_cast_node_;
}

// optional .zetasql.ResolvedMakeStructProto resolved_make_struct_node = 12;
inline bool AnyResolvedExprProto::has_resolved_make_struct_node() const {
  return node_case() == kResolvedMakeStructNode;
}
inline void AnyResolvedExprProto::set_has_resolved_make_struct_node() {
  _oneof_case_[0] = kResolvedMakeStructNode;
}
inline void AnyResolvedExprProto::clear_resolved_make_struct_node() {
  if (has_resolved_make_struct_node()) {
    delete node_.resolved_make_struct_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedMakeStructProto& AnyResolvedExprProto::_internal_resolved_make_struct_node() const {
  return *node_.resolved_make_struct_node_;
}
inline ::zetasql::ResolvedMakeStructProto* AnyResolvedExprProto::release_resolved_make_struct_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedExprProto.resolved_make_struct_node)
  if (has_resolved_make_struct_node()) {
    clear_has_node();
      ::zetasql::ResolvedMakeStructProto* temp = node_.resolved_make_struct_node_;
    node_.resolved_make_struct_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedMakeStructProto& AnyResolvedExprProto::resolved_make_struct_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedExprProto.resolved_make_struct_node)
  return has_resolved_make_struct_node()
      ? *node_.resolved_make_struct_node_
      : *reinterpret_cast< ::zetasql::ResolvedMakeStructProto*>(&::zetasql::_ResolvedMakeStructProto_default_instance_);
}
inline ::zetasql::ResolvedMakeStructProto* AnyResolvedExprProto::mutable_resolved_make_struct_node() {
  if (!has_resolved_make_struct_node()) {
    clear_node();
    set_has_resolved_make_struct_node();
    node_.resolved_make_struct_node_ = CreateMaybeMessage< ::zetasql::ResolvedMakeStructProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedExprProto.resolved_make_struct_node)
  return node_.resolved_make_struct_node_;
}

// optional .zetasql.ResolvedMakeProtoProto resolved_make_proto_node = 13;
inline bool AnyResolvedExprProto::has_resolved_make_proto_node() const {
  return node_case() == kResolvedMakeProtoNode;
}
inline void AnyResolvedExprProto::set_has_resolved_make_proto_node() {
  _oneof_case_[0] = kResolvedMakeProtoNode;
}
inline void AnyResolvedExprProto::clear_resolved_make_proto_node() {
  if (has_resolved_make_proto_node()) {
    delete node_.resolved_make_proto_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedMakeProtoProto& AnyResolvedExprProto::_internal_resolved_make_proto_node() const {
  return *node_.resolved_make_proto_node_;
}
inline ::zetasql::ResolvedMakeProtoProto* AnyResolvedExprProto::release_resolved_make_proto_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedExprProto.resolved_make_proto_node)
  if (has_resolved_make_proto_node()) {
    clear_has_node();
      ::zetasql::ResolvedMakeProtoProto* temp = node_.resolved_make_proto_node_;
    node_.resolved_make_proto_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedMakeProtoProto& AnyResolvedExprProto::resolved_make_proto_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedExprProto.resolved_make_proto_node)
  return has_resolved_make_proto_node()
      ? *node_.resolved_make_proto_node_
      : *reinterpret_cast< ::zetasql::ResolvedMakeProtoProto*>(&::zetasql::_ResolvedMakeProtoProto_default_instance_);
}
inline ::zetasql::ResolvedMakeProtoProto* AnyResolvedExprProto::mutable_resolved_make_proto_node() {
  if (!has_resolved_make_proto_node()) {
    clear_node();
    set_has_resolved_make_proto_node();
    node_.resolved_make_proto_node_ = CreateMaybeMessage< ::zetasql::ResolvedMakeProtoProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedExprProto.resolved_make_proto_node)
  return node_.resolved_make_proto_node_;
}

// optional .zetasql.ResolvedGetStructFieldProto resolved_get_struct_field_node = 15;
inline bool AnyResolvedExprProto::has_resolved_get_struct_field_node() const {
  return node_case() == kResolvedGetStructFieldNode;
}
inline void AnyResolvedExprProto::set_has_resolved_get_struct_field_node() {
  _oneof_case_[0] = kResolvedGetStructFieldNode;
}
inline void AnyResolvedExprProto::clear_resolved_get_struct_field_node() {
  if (has_resolved_get_struct_field_node()) {
    delete node_.resolved_get_struct_field_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedGetStructFieldProto& AnyResolvedExprProto::_internal_resolved_get_struct_field_node() const {
  return *node_.resolved_get_struct_field_node_;
}
inline ::zetasql::ResolvedGetStructFieldProto* AnyResolvedExprProto::release_resolved_get_struct_field_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedExprProto.resolved_get_struct_field_node)
  if (has_resolved_get_struct_field_node()) {
    clear_has_node();
      ::zetasql::ResolvedGetStructFieldProto* temp = node_.resolved_get_struct_field_node_;
    node_.resolved_get_struct_field_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedGetStructFieldProto& AnyResolvedExprProto::resolved_get_struct_field_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedExprProto.resolved_get_struct_field_node)
  return has_resolved_get_struct_field_node()
      ? *node_.resolved_get_struct_field_node_
      : *reinterpret_cast< ::zetasql::ResolvedGetStructFieldProto*>(&::zetasql::_ResolvedGetStructFieldProto_default_instance_);
}
inline ::zetasql::ResolvedGetStructFieldProto* AnyResolvedExprProto::mutable_resolved_get_struct_field_node() {
  if (!has_resolved_get_struct_field_node()) {
    clear_node();
    set_has_resolved_get_struct_field_node();
    node_.resolved_get_struct_field_node_ = CreateMaybeMessage< ::zetasql::ResolvedGetStructFieldProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedExprProto.resolved_get_struct_field_node)
  return node_.resolved_get_struct_field_node_;
}

// optional .zetasql.ResolvedGetProtoFieldProto resolved_get_proto_field_node = 16;
inline bool AnyResolvedExprProto::has_resolved_get_proto_field_node() const {
  return node_case() == kResolvedGetProtoFieldNode;
}
inline void AnyResolvedExprProto::set_has_resolved_get_proto_field_node() {
  _oneof_case_[0] = kResolvedGetProtoFieldNode;
}
inline void AnyResolvedExprProto::clear_resolved_get_proto_field_node() {
  if (has_resolved_get_proto_field_node()) {
    delete node_.resolved_get_proto_field_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedGetProtoFieldProto& AnyResolvedExprProto::_internal_resolved_get_proto_field_node() const {
  return *node_.resolved_get_proto_field_node_;
}
inline ::zetasql::ResolvedGetProtoFieldProto* AnyResolvedExprProto::release_resolved_get_proto_field_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedExprProto.resolved_get_proto_field_node)
  if (has_resolved_get_proto_field_node()) {
    clear_has_node();
      ::zetasql::ResolvedGetProtoFieldProto* temp = node_.resolved_get_proto_field_node_;
    node_.resolved_get_proto_field_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedGetProtoFieldProto& AnyResolvedExprProto::resolved_get_proto_field_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedExprProto.resolved_get_proto_field_node)
  return has_resolved_get_proto_field_node()
      ? *node_.resolved_get_proto_field_node_
      : *reinterpret_cast< ::zetasql::ResolvedGetProtoFieldProto*>(&::zetasql::_ResolvedGetProtoFieldProto_default_instance_);
}
inline ::zetasql::ResolvedGetProtoFieldProto* AnyResolvedExprProto::mutable_resolved_get_proto_field_node() {
  if (!has_resolved_get_proto_field_node()) {
    clear_node();
    set_has_resolved_get_proto_field_node();
    node_.resolved_get_proto_field_node_ = CreateMaybeMessage< ::zetasql::ResolvedGetProtoFieldProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedExprProto.resolved_get_proto_field_node)
  return node_.resolved_get_proto_field_node_;
}

// optional .zetasql.ResolvedSubqueryExprProto resolved_subquery_expr_node = 17;
inline bool AnyResolvedExprProto::has_resolved_subquery_expr_node() const {
  return node_case() == kResolvedSubqueryExprNode;
}
inline void AnyResolvedExprProto::set_has_resolved_subquery_expr_node() {
  _oneof_case_[0] = kResolvedSubqueryExprNode;
}
inline void AnyResolvedExprProto::clear_resolved_subquery_expr_node() {
  if (has_resolved_subquery_expr_node()) {
    delete node_.resolved_subquery_expr_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedSubqueryExprProto& AnyResolvedExprProto::_internal_resolved_subquery_expr_node() const {
  return *node_.resolved_subquery_expr_node_;
}
inline ::zetasql::ResolvedSubqueryExprProto* AnyResolvedExprProto::release_resolved_subquery_expr_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedExprProto.resolved_subquery_expr_node)
  if (has_resolved_subquery_expr_node()) {
    clear_has_node();
      ::zetasql::ResolvedSubqueryExprProto* temp = node_.resolved_subquery_expr_node_;
    node_.resolved_subquery_expr_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedSubqueryExprProto& AnyResolvedExprProto::resolved_subquery_expr_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedExprProto.resolved_subquery_expr_node)
  return has_resolved_subquery_expr_node()
      ? *node_.resolved_subquery_expr_node_
      : *reinterpret_cast< ::zetasql::ResolvedSubqueryExprProto*>(&::zetasql::_ResolvedSubqueryExprProto_default_instance_);
}
inline ::zetasql::ResolvedSubqueryExprProto* AnyResolvedExprProto::mutable_resolved_subquery_expr_node() {
  if (!has_resolved_subquery_expr_node()) {
    clear_node();
    set_has_resolved_subquery_expr_node();
    node_.resolved_subquery_expr_node_ = CreateMaybeMessage< ::zetasql::ResolvedSubqueryExprProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedExprProto.resolved_subquery_expr_node)
  return node_.resolved_subquery_expr_node_;
}

// optional .zetasql.ResolvedDMLDefaultProto resolved_dmldefault_node = 60;
inline bool AnyResolvedExprProto::has_resolved_dmldefault_node() const {
  return node_case() == kResolvedDmldefaultNode;
}
inline void AnyResolvedExprProto::set_has_resolved_dmldefault_node() {
  _oneof_case_[0] = kResolvedDmldefaultNode;
}
inline void AnyResolvedExprProto::clear_resolved_dmldefault_node() {
  if (has_resolved_dmldefault_node()) {
    delete node_.resolved_dmldefault_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedDMLDefaultProto& AnyResolvedExprProto::_internal_resolved_dmldefault_node() const {
  return *node_.resolved_dmldefault_node_;
}
inline ::zetasql::ResolvedDMLDefaultProto* AnyResolvedExprProto::release_resolved_dmldefault_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedExprProto.resolved_dmldefault_node)
  if (has_resolved_dmldefault_node()) {
    clear_has_node();
      ::zetasql::ResolvedDMLDefaultProto* temp = node_.resolved_dmldefault_node_;
    node_.resolved_dmldefault_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedDMLDefaultProto& AnyResolvedExprProto::resolved_dmldefault_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedExprProto.resolved_dmldefault_node)
  return has_resolved_dmldefault_node()
      ? *node_.resolved_dmldefault_node_
      : *reinterpret_cast< ::zetasql::ResolvedDMLDefaultProto*>(&::zetasql::_ResolvedDMLDefaultProto_default_instance_);
}
inline ::zetasql::ResolvedDMLDefaultProto* AnyResolvedExprProto::mutable_resolved_dmldefault_node() {
  if (!has_resolved_dmldefault_node()) {
    clear_node();
    set_has_resolved_dmldefault_node();
    node_.resolved_dmldefault_node_ = CreateMaybeMessage< ::zetasql::ResolvedDMLDefaultProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedExprProto.resolved_dmldefault_node)
  return node_.resolved_dmldefault_node_;
}

// optional .zetasql.ResolvedArgumentRefProto resolved_argument_ref_node = 78;
inline bool AnyResolvedExprProto::has_resolved_argument_ref_node() const {
  return node_case() == kResolvedArgumentRefNode;
}
inline void AnyResolvedExprProto::set_has_resolved_argument_ref_node() {
  _oneof_case_[0] = kResolvedArgumentRefNode;
}
inline void AnyResolvedExprProto::clear_resolved_argument_ref_node() {
  if (has_resolved_argument_ref_node()) {
    delete node_.resolved_argument_ref_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedArgumentRefProto& AnyResolvedExprProto::_internal_resolved_argument_ref_node() const {
  return *node_.resolved_argument_ref_node_;
}
inline ::zetasql::ResolvedArgumentRefProto* AnyResolvedExprProto::release_resolved_argument_ref_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedExprProto.resolved_argument_ref_node)
  if (has_resolved_argument_ref_node()) {
    clear_has_node();
      ::zetasql::ResolvedArgumentRefProto* temp = node_.resolved_argument_ref_node_;
    node_.resolved_argument_ref_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedArgumentRefProto& AnyResolvedExprProto::resolved_argument_ref_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedExprProto.resolved_argument_ref_node)
  return has_resolved_argument_ref_node()
      ? *node_.resolved_argument_ref_node_
      : *reinterpret_cast< ::zetasql::ResolvedArgumentRefProto*>(&::zetasql::_ResolvedArgumentRefProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentRefProto* AnyResolvedExprProto::mutable_resolved_argument_ref_node() {
  if (!has_resolved_argument_ref_node()) {
    clear_node();
    set_has_resolved_argument_ref_node();
    node_.resolved_argument_ref_node_ = CreateMaybeMessage< ::zetasql::ResolvedArgumentRefProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedExprProto.resolved_argument_ref_node)
  return node_.resolved_argument_ref_node_;
}

// optional .zetasql.ResolvedConstantProto resolved_constant_node = 103;
inline bool AnyResolvedExprProto::has_resolved_constant_node() const {
  return node_case() == kResolvedConstantNode;
}
inline void AnyResolvedExprProto::set_has_resolved_constant_node() {
  _oneof_case_[0] = kResolvedConstantNode;
}
inline void AnyResolvedExprProto::clear_resolved_constant_node() {
  if (has_resolved_constant_node()) {
    delete node_.resolved_constant_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedConstantProto& AnyResolvedExprProto::_internal_resolved_constant_node() const {
  return *node_.resolved_constant_node_;
}
inline ::zetasql::ResolvedConstantProto* AnyResolvedExprProto::release_resolved_constant_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedExprProto.resolved_constant_node)
  if (has_resolved_constant_node()) {
    clear_has_node();
      ::zetasql::ResolvedConstantProto* temp = node_.resolved_constant_node_;
    node_.resolved_constant_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedConstantProto& AnyResolvedExprProto::resolved_constant_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedExprProto.resolved_constant_node)
  return has_resolved_constant_node()
      ? *node_.resolved_constant_node_
      : *reinterpret_cast< ::zetasql::ResolvedConstantProto*>(&::zetasql::_ResolvedConstantProto_default_instance_);
}
inline ::zetasql::ResolvedConstantProto* AnyResolvedExprProto::mutable_resolved_constant_node() {
  if (!has_resolved_constant_node()) {
    clear_node();
    set_has_resolved_constant_node();
    node_.resolved_constant_node_ = CreateMaybeMessage< ::zetasql::ResolvedConstantProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedExprProto.resolved_constant_node)
  return node_.resolved_constant_node_;
}

// optional .zetasql.ResolvedReplaceFieldProto resolved_replace_field_node = 129;
inline bool AnyResolvedExprProto::has_resolved_replace_field_node() const {
  return node_case() == kResolvedReplaceFieldNode;
}
inline void AnyResolvedExprProto::set_has_resolved_replace_field_node() {
  _oneof_case_[0] = kResolvedReplaceFieldNode;
}
inline void AnyResolvedExprProto::clear_resolved_replace_field_node() {
  if (has_resolved_replace_field_node()) {
    delete node_.resolved_replace_field_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedReplaceFieldProto& AnyResolvedExprProto::_internal_resolved_replace_field_node() const {
  return *node_.resolved_replace_field_node_;
}
inline ::zetasql::ResolvedReplaceFieldProto* AnyResolvedExprProto::release_resolved_replace_field_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedExprProto.resolved_replace_field_node)
  if (has_resolved_replace_field_node()) {
    clear_has_node();
      ::zetasql::ResolvedReplaceFieldProto* temp = node_.resolved_replace_field_node_;
    node_.resolved_replace_field_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedReplaceFieldProto& AnyResolvedExprProto::resolved_replace_field_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedExprProto.resolved_replace_field_node)
  return has_resolved_replace_field_node()
      ? *node_.resolved_replace_field_node_
      : *reinterpret_cast< ::zetasql::ResolvedReplaceFieldProto*>(&::zetasql::_ResolvedReplaceFieldProto_default_instance_);
}
inline ::zetasql::ResolvedReplaceFieldProto* AnyResolvedExprProto::mutable_resolved_replace_field_node() {
  if (!has_resolved_replace_field_node()) {
    clear_node();
    set_has_resolved_replace_field_node();
    node_.resolved_replace_field_node_ = CreateMaybeMessage< ::zetasql::ResolvedReplaceFieldProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedExprProto.resolved_replace_field_node)
  return node_.resolved_replace_field_node_;
}

// optional .zetasql.ResolvedSystemVariableProto resolved_system_variable_node = 139;
inline bool AnyResolvedExprProto::has_resolved_system_variable_node() const {
  return node_case() == kResolvedSystemVariableNode;
}
inline void AnyResolvedExprProto::set_has_resolved_system_variable_node() {
  _oneof_case_[0] = kResolvedSystemVariableNode;
}
inline void AnyResolvedExprProto::clear_resolved_system_variable_node() {
  if (has_resolved_system_variable_node()) {
    delete node_.resolved_system_variable_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedSystemVariableProto& AnyResolvedExprProto::_internal_resolved_system_variable_node() const {
  return *node_.resolved_system_variable_node_;
}
inline ::zetasql::ResolvedSystemVariableProto* AnyResolvedExprProto::release_resolved_system_variable_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedExprProto.resolved_system_variable_node)
  if (has_resolved_system_variable_node()) {
    clear_has_node();
      ::zetasql::ResolvedSystemVariableProto* temp = node_.resolved_system_variable_node_;
    node_.resolved_system_variable_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedSystemVariableProto& AnyResolvedExprProto::resolved_system_variable_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedExprProto.resolved_system_variable_node)
  return has_resolved_system_variable_node()
      ? *node_.resolved_system_variable_node_
      : *reinterpret_cast< ::zetasql::ResolvedSystemVariableProto*>(&::zetasql::_ResolvedSystemVariableProto_default_instance_);
}
inline ::zetasql::ResolvedSystemVariableProto* AnyResolvedExprProto::mutable_resolved_system_variable_node() {
  if (!has_resolved_system_variable_node()) {
    clear_node();
    set_has_resolved_system_variable_node();
    node_.resolved_system_variable_node_ = CreateMaybeMessage< ::zetasql::ResolvedSystemVariableProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedExprProto.resolved_system_variable_node)
  return node_.resolved_system_variable_node_;
}

// optional .zetasql.ResolvedFlattenProto resolved_flatten_node = 149;
inline bool AnyResolvedExprProto::has_resolved_flatten_node() const {
  return node_case() == kResolvedFlattenNode;
}
inline void AnyResolvedExprProto::set_has_resolved_flatten_node() {
  _oneof_case_[0] = kResolvedFlattenNode;
}
inline void AnyResolvedExprProto::clear_resolved_flatten_node() {
  if (has_resolved_flatten_node()) {
    delete node_.resolved_flatten_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedFlattenProto& AnyResolvedExprProto::_internal_resolved_flatten_node() const {
  return *node_.resolved_flatten_node_;
}
inline ::zetasql::ResolvedFlattenProto* AnyResolvedExprProto::release_resolved_flatten_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedExprProto.resolved_flatten_node)
  if (has_resolved_flatten_node()) {
    clear_has_node();
      ::zetasql::ResolvedFlattenProto* temp = node_.resolved_flatten_node_;
    node_.resolved_flatten_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedFlattenProto& AnyResolvedExprProto::resolved_flatten_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedExprProto.resolved_flatten_node)
  return has_resolved_flatten_node()
      ? *node_.resolved_flatten_node_
      : *reinterpret_cast< ::zetasql::ResolvedFlattenProto*>(&::zetasql::_ResolvedFlattenProto_default_instance_);
}
inline ::zetasql::ResolvedFlattenProto* AnyResolvedExprProto::mutable_resolved_flatten_node() {
  if (!has_resolved_flatten_node()) {
    clear_node();
    set_has_resolved_flatten_node();
    node_.resolved_flatten_node_ = CreateMaybeMessage< ::zetasql::ResolvedFlattenProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedExprProto.resolved_flatten_node)
  return node_.resolved_flatten_node_;
}

// optional .zetasql.ResolvedFlattenedArgProto resolved_flattened_arg_node = 150;
inline bool AnyResolvedExprProto::has_resolved_flattened_arg_node() const {
  return node_case() == kResolvedFlattenedArgNode;
}
inline void AnyResolvedExprProto::set_has_resolved_flattened_arg_node() {
  _oneof_case_[0] = kResolvedFlattenedArgNode;
}
inline void AnyResolvedExprProto::clear_resolved_flattened_arg_node() {
  if (has_resolved_flattened_arg_node()) {
    delete node_.resolved_flattened_arg_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedFlattenedArgProto& AnyResolvedExprProto::_internal_resolved_flattened_arg_node() const {
  return *node_.resolved_flattened_arg_node_;
}
inline ::zetasql::ResolvedFlattenedArgProto* AnyResolvedExprProto::release_resolved_flattened_arg_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedExprProto.resolved_flattened_arg_node)
  if (has_resolved_flattened_arg_node()) {
    clear_has_node();
      ::zetasql::ResolvedFlattenedArgProto* temp = node_.resolved_flattened_arg_node_;
    node_.resolved_flattened_arg_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedFlattenedArgProto& AnyResolvedExprProto::resolved_flattened_arg_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedExprProto.resolved_flattened_arg_node)
  return has_resolved_flattened_arg_node()
      ? *node_.resolved_flattened_arg_node_
      : *reinterpret_cast< ::zetasql::ResolvedFlattenedArgProto*>(&::zetasql::_ResolvedFlattenedArgProto_default_instance_);
}
inline ::zetasql::ResolvedFlattenedArgProto* AnyResolvedExprProto::mutable_resolved_flattened_arg_node() {
  if (!has_resolved_flattened_arg_node()) {
    clear_node();
    set_has_resolved_flattened_arg_node();
    node_.resolved_flattened_arg_node_ = CreateMaybeMessage< ::zetasql::ResolvedFlattenedArgProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedExprProto.resolved_flattened_arg_node)
  return node_.resolved_flattened_arg_node_;
}

// optional .zetasql.ResolvedGetJsonFieldProto resolved_get_json_field_node = 165;
inline bool AnyResolvedExprProto::has_resolved_get_json_field_node() const {
  return node_case() == kResolvedGetJsonFieldNode;
}
inline void AnyResolvedExprProto::set_has_resolved_get_json_field_node() {
  _oneof_case_[0] = kResolvedGetJsonFieldNode;
}
inline void AnyResolvedExprProto::clear_resolved_get_json_field_node() {
  if (has_resolved_get_json_field_node()) {
    delete node_.resolved_get_json_field_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedGetJsonFieldProto& AnyResolvedExprProto::_internal_resolved_get_json_field_node() const {
  return *node_.resolved_get_json_field_node_;
}
inline ::zetasql::ResolvedGetJsonFieldProto* AnyResolvedExprProto::release_resolved_get_json_field_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedExprProto.resolved_get_json_field_node)
  if (has_resolved_get_json_field_node()) {
    clear_has_node();
      ::zetasql::ResolvedGetJsonFieldProto* temp = node_.resolved_get_json_field_node_;
    node_.resolved_get_json_field_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedGetJsonFieldProto& AnyResolvedExprProto::resolved_get_json_field_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedExprProto.resolved_get_json_field_node)
  return has_resolved_get_json_field_node()
      ? *node_.resolved_get_json_field_node_
      : *reinterpret_cast< ::zetasql::ResolvedGetJsonFieldProto*>(&::zetasql::_ResolvedGetJsonFieldProto_default_instance_);
}
inline ::zetasql::ResolvedGetJsonFieldProto* AnyResolvedExprProto::mutable_resolved_get_json_field_node() {
  if (!has_resolved_get_json_field_node()) {
    clear_node();
    set_has_resolved_get_json_field_node();
    node_.resolved_get_json_field_node_ = CreateMaybeMessage< ::zetasql::ResolvedGetJsonFieldProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedExprProto.resolved_get_json_field_node)
  return node_.resolved_get_json_field_node_;
}

// optional .zetasql.ResolvedFilterFieldProto resolved_filter_field_node = 174;
inline bool AnyResolvedExprProto::has_resolved_filter_field_node() const {
  return node_case() == kResolvedFilterFieldNode;
}
inline void AnyResolvedExprProto::set_has_resolved_filter_field_node() {
  _oneof_case_[0] = kResolvedFilterFieldNode;
}
inline void AnyResolvedExprProto::clear_resolved_filter_field_node() {
  if (has_resolved_filter_field_node()) {
    delete node_.resolved_filter_field_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedFilterFieldProto& AnyResolvedExprProto::_internal_resolved_filter_field_node() const {
  return *node_.resolved_filter_field_node_;
}
inline ::zetasql::ResolvedFilterFieldProto* AnyResolvedExprProto::release_resolved_filter_field_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedExprProto.resolved_filter_field_node)
  if (has_resolved_filter_field_node()) {
    clear_has_node();
      ::zetasql::ResolvedFilterFieldProto* temp = node_.resolved_filter_field_node_;
    node_.resolved_filter_field_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedFilterFieldProto& AnyResolvedExprProto::resolved_filter_field_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedExprProto.resolved_filter_field_node)
  return has_resolved_filter_field_node()
      ? *node_.resolved_filter_field_node_
      : *reinterpret_cast< ::zetasql::ResolvedFilterFieldProto*>(&::zetasql::_ResolvedFilterFieldProto_default_instance_);
}
inline ::zetasql::ResolvedFilterFieldProto* AnyResolvedExprProto::mutable_resolved_filter_field_node() {
  if (!has_resolved_filter_field_node()) {
    clear_node();
    set_has_resolved_filter_field_node();
    node_.resolved_filter_field_node_ = CreateMaybeMessage< ::zetasql::ResolvedFilterFieldProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedExprProto.resolved_filter_field_node)
  return node_.resolved_filter_field_node_;
}

// optional .zetasql.ResolvedLetExprProto resolved_let_expr_node = 197;
inline bool AnyResolvedExprProto::has_resolved_let_expr_node() const {
  return node_case() == kResolvedLetExprNode;
}
inline void AnyResolvedExprProto::set_has_resolved_let_expr_node() {
  _oneof_case_[0] = kResolvedLetExprNode;
}
inline void AnyResolvedExprProto::clear_resolved_let_expr_node() {
  if (has_resolved_let_expr_node()) {
    delete node_.resolved_let_expr_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedLetExprProto& AnyResolvedExprProto::_internal_resolved_let_expr_node() const {
  return *node_.resolved_let_expr_node_;
}
inline ::zetasql::ResolvedLetExprProto* AnyResolvedExprProto::release_resolved_let_expr_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedExprProto.resolved_let_expr_node)
  if (has_resolved_let_expr_node()) {
    clear_has_node();
      ::zetasql::ResolvedLetExprProto* temp = node_.resolved_let_expr_node_;
    node_.resolved_let_expr_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedLetExprProto& AnyResolvedExprProto::resolved_let_expr_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedExprProto.resolved_let_expr_node)
  return has_resolved_let_expr_node()
      ? *node_.resolved_let_expr_node_
      : *reinterpret_cast< ::zetasql::ResolvedLetExprProto*>(&::zetasql::_ResolvedLetExprProto_default_instance_);
}
inline ::zetasql::ResolvedLetExprProto* AnyResolvedExprProto::mutable_resolved_let_expr_node() {
  if (!has_resolved_let_expr_node()) {
    clear_node();
    set_has_resolved_let_expr_node();
    node_.resolved_let_expr_node_ = CreateMaybeMessage< ::zetasql::ResolvedLetExprProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedExprProto.resolved_let_expr_node)
  return node_.resolved_let_expr_node_;
}

inline bool AnyResolvedExprProto::has_node() const {
  return node_case() != NODE_NOT_SET;
}
inline void AnyResolvedExprProto::clear_has_node() {
  _oneof_case_[0] = NODE_NOT_SET;
}
inline AnyResolvedExprProto::NodeCase AnyResolvedExprProto::node_case() const {
  return AnyResolvedExprProto::NodeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResolvedExprProto

// optional .zetasql.ResolvedNodeProto parent = 1;
inline bool ResolvedExprProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedExprProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedExprProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::zetasql::ResolvedNodeProto& ResolvedExprProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedNodeProto& ResolvedExprProto::parent() const {
  const ::zetasql::ResolvedNodeProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExprProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedNodeProto*>(
      &::zetasql::_ResolvedNodeProto_default_instance_);
}
inline ::zetasql::ResolvedNodeProto* ResolvedExprProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedExprProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedNodeProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedNodeProto* ResolvedExprProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedNodeProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExprProto.parent)
  return parent_;
}
inline void ResolvedExprProto::set_allocated_parent(::zetasql::ResolvedNodeProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(parent_);
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedExprProto.parent)
}

// optional .zetasql.TypeProto type = 2;
inline bool ResolvedExprProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedExprProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedExprProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::TypeProto& ResolvedExprProto::_internal_type() const {
  return *type_;
}
inline const ::zetasql::TypeProto& ResolvedExprProto::type() const {
  const ::zetasql::TypeProto* p = type_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExprProto.type)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TypeProto*>(
      &::zetasql::_TypeProto_default_instance_);
}
inline ::zetasql::TypeProto* ResolvedExprProto::release_type() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedExprProto.type)
  clear_has_type();
  ::zetasql::TypeProto* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::zetasql::TypeProto* ResolvedExprProto::mutable_type() {
  set_has_type();
  if (type_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExprProto.type)
  return type_;
}
inline void ResolvedExprProto::set_allocated_type(::zetasql::TypeProto* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_);
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(type)->GetArena();
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    set_has_type();
  } else {
    clear_has_type();
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedExprProto.type)
}

// optional .zetasql.AnnotationMapProto type_annotation_map = 3;
inline bool ResolvedExprProto::has_type_annotation_map() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedExprProto::set_has_type_annotation_map() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedExprProto::clear_has_type_annotation_map() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasql::AnnotationMapProto& ResolvedExprProto::_internal_type_annotation_map() const {
  return *type_annotation_map_;
}
inline const ::zetasql::AnnotationMapProto& ResolvedExprProto::type_annotation_map() const {
  const ::zetasql::AnnotationMapProto* p = type_annotation_map_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExprProto.type_annotation_map)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnnotationMapProto*>(
      &::zetasql::_AnnotationMapProto_default_instance_);
}
inline ::zetasql::AnnotationMapProto* ResolvedExprProto::release_type_annotation_map() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedExprProto.type_annotation_map)
  clear_has_type_annotation_map();
  ::zetasql::AnnotationMapProto* temp = type_annotation_map_;
  type_annotation_map_ = NULL;
  return temp;
}
inline ::zetasql::AnnotationMapProto* ResolvedExprProto::mutable_type_annotation_map() {
  set_has_type_annotation_map();
  if (type_annotation_map_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnnotationMapProto>(GetArenaNoVirtual());
    type_annotation_map_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExprProto.type_annotation_map)
  return type_annotation_map_;
}
inline void ResolvedExprProto::set_allocated_type_annotation_map(::zetasql::AnnotationMapProto* type_annotation_map) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_annotation_map_);
  }
  if (type_annotation_map) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(type_annotation_map)->GetArena();
    if (message_arena != submessage_arena) {
      type_annotation_map = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type_annotation_map, submessage_arena);
    }
    set_has_type_annotation_map();
  } else {
    clear_has_type_annotation_map();
  }
  type_annotation_map_ = type_annotation_map;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedExprProto.type_annotation_map)
}

// -------------------------------------------------------------------

// ResolvedLiteralProto

// optional .zetasql.ResolvedExprProto parent = 1;
inline bool ResolvedLiteralProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedLiteralProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedLiteralProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedLiteralProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedExprProto& ResolvedLiteralProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedExprProto& ResolvedLiteralProto::parent() const {
  const ::zetasql::ResolvedExprProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedLiteralProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedExprProto*>(
      &::zetasql::_ResolvedExprProto_default_instance_);
}
inline ::zetasql::ResolvedExprProto* ResolvedLiteralProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedLiteralProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedExprProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedExprProto* ResolvedLiteralProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedExprProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedLiteralProto.parent)
  return parent_;
}
inline void ResolvedLiteralProto::set_allocated_parent(::zetasql::ResolvedExprProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedLiteralProto.parent)
}

// optional .zetasql.ValueWithTypeProto value = 2;
inline bool ResolvedLiteralProto::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedLiteralProto::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedLiteralProto::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::ValueWithTypeProto& ResolvedLiteralProto::_internal_value() const {
  return *value_;
}
inline const ::zetasql::ValueWithTypeProto& ResolvedLiteralProto::value() const {
  const ::zetasql::ValueWithTypeProto* p = value_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedLiteralProto.value)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ValueWithTypeProto*>(
      &::zetasql::_ValueWithTypeProto_default_instance_);
}
inline ::zetasql::ValueWithTypeProto* ResolvedLiteralProto::release_value() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedLiteralProto.value)
  clear_has_value();
  ::zetasql::ValueWithTypeProto* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::zetasql::ValueWithTypeProto* ResolvedLiteralProto::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ValueWithTypeProto>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedLiteralProto.value)
  return value_;
}
inline void ResolvedLiteralProto::set_allocated_value(::zetasql::ValueWithTypeProto* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_);
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    set_has_value();
  } else {
    clear_has_value();
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedLiteralProto.value)
}

// optional bool has_explicit_type = 3;
inline bool ResolvedLiteralProto::has_has_explicit_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedLiteralProto::set_has_has_explicit_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedLiteralProto::clear_has_has_explicit_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedLiteralProto::clear_has_explicit_type() {
  has_explicit_type_ = false;
  clear_has_has_explicit_type();
}
inline bool ResolvedLiteralProto::has_explicit_type() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedLiteralProto.has_explicit_type)
  return has_explicit_type_;
}
inline void ResolvedLiteralProto::set_has_explicit_type(bool value) {
  set_has_has_explicit_type();
  has_explicit_type_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedLiteralProto.has_explicit_type)
}

// optional int64 float_literal_id = 4;
inline bool ResolvedLiteralProto::has_float_literal_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedLiteralProto::set_has_float_literal_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedLiteralProto::clear_has_float_literal_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedLiteralProto::clear_float_literal_id() {
  float_literal_id_ = GOOGLE_LONGLONG(0);
  clear_has_float_literal_id();
}
inline ::google::protobuf::int64 ResolvedLiteralProto::float_literal_id() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedLiteralProto.float_literal_id)
  return float_literal_id_;
}
inline void ResolvedLiteralProto::set_float_literal_id(::google::protobuf::int64 value) {
  set_has_float_literal_id();
  float_literal_id_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedLiteralProto.float_literal_id)
}

// optional bool preserve_in_literal_remover = 5;
inline bool ResolvedLiteralProto::has_preserve_in_literal_remover() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResolvedLiteralProto::set_has_preserve_in_literal_remover() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResolvedLiteralProto::clear_has_preserve_in_literal_remover() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResolvedLiteralProto::clear_preserve_in_literal_remover() {
  preserve_in_literal_remover_ = false;
  clear_has_preserve_in_literal_remover();
}
inline bool ResolvedLiteralProto::preserve_in_literal_remover() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedLiteralProto.preserve_in_literal_remover)
  return preserve_in_literal_remover_;
}
inline void ResolvedLiteralProto::set_preserve_in_literal_remover(bool value) {
  set_has_preserve_in_literal_remover();
  preserve_in_literal_remover_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedLiteralProto.preserve_in_literal_remover)
}

// -------------------------------------------------------------------

// ResolvedParameterProto

// optional .zetasql.ResolvedExprProto parent = 1;
inline bool ResolvedParameterProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedParameterProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedParameterProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedParameterProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedExprProto& ResolvedParameterProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedExprProto& ResolvedParameterProto::parent() const {
  const ::zetasql::ResolvedExprProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedParameterProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedExprProto*>(
      &::zetasql::_ResolvedExprProto_default_instance_);
}
inline ::zetasql::ResolvedExprProto* ResolvedParameterProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedParameterProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedExprProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedExprProto* ResolvedParameterProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedExprProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedParameterProto.parent)
  return parent_;
}
inline void ResolvedParameterProto::set_allocated_parent(::zetasql::ResolvedExprProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedParameterProto.parent)
}

// optional string name = 2;
inline bool ResolvedParameterProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedParameterProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedParameterProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedParameterProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ResolvedParameterProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedParameterProto.name)
  return name_.GetNoArena();
}
inline void ResolvedParameterProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedParameterProto.name)
}
#if LANG_CXX11
inline void ResolvedParameterProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedParameterProto.name)
}
#endif
inline void ResolvedParameterProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedParameterProto.name)
}
inline void ResolvedParameterProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedParameterProto.name)
}
inline ::std::string* ResolvedParameterProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedParameterProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedParameterProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedParameterProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedParameterProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedParameterProto.name)
}

// optional int64 position = 5;
inline bool ResolvedParameterProto::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedParameterProto::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedParameterProto::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedParameterProto::clear_position() {
  position_ = GOOGLE_LONGLONG(0);
  clear_has_position();
}
inline ::google::protobuf::int64 ResolvedParameterProto::position() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedParameterProto.position)
  return position_;
}
inline void ResolvedParameterProto::set_position(::google::protobuf::int64 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedParameterProto.position)
}

// optional bool is_untyped = 3;
inline bool ResolvedParameterProto::has_is_untyped() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedParameterProto::set_has_is_untyped() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedParameterProto::clear_has_is_untyped() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedParameterProto::clear_is_untyped() {
  is_untyped_ = false;
  clear_has_is_untyped();
}
inline bool ResolvedParameterProto::is_untyped() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedParameterProto.is_untyped)
  return is_untyped_;
}
inline void ResolvedParameterProto::set_is_untyped(bool value) {
  set_has_is_untyped();
  is_untyped_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedParameterProto.is_untyped)
}

// -------------------------------------------------------------------

// ResolvedExpressionColumnProto

// optional .zetasql.ResolvedExprProto parent = 1;
inline bool ResolvedExpressionColumnProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedExpressionColumnProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedExpressionColumnProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedExpressionColumnProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedExprProto& ResolvedExpressionColumnProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedExprProto& ResolvedExpressionColumnProto::parent() const {
  const ::zetasql::ResolvedExprProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExpressionColumnProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedExprProto*>(
      &::zetasql::_ResolvedExprProto_default_instance_);
}
inline ::zetasql::ResolvedExprProto* ResolvedExpressionColumnProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedExpressionColumnProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedExprProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedExprProto* ResolvedExpressionColumnProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedExprProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExpressionColumnProto.parent)
  return parent_;
}
inline void ResolvedExpressionColumnProto::set_allocated_parent(::zetasql::ResolvedExprProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedExpressionColumnProto.parent)
}

// optional string name = 2;
inline bool ResolvedExpressionColumnProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedExpressionColumnProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedExpressionColumnProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedExpressionColumnProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ResolvedExpressionColumnProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExpressionColumnProto.name)
  return name_.GetNoArena();
}
inline void ResolvedExpressionColumnProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedExpressionColumnProto.name)
}
#if LANG_CXX11
inline void ResolvedExpressionColumnProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedExpressionColumnProto.name)
}
#endif
inline void ResolvedExpressionColumnProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedExpressionColumnProto.name)
}
inline void ResolvedExpressionColumnProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedExpressionColumnProto.name)
}
inline ::std::string* ResolvedExpressionColumnProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExpressionColumnProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedExpressionColumnProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedExpressionColumnProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedExpressionColumnProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedExpressionColumnProto.name)
}

// -------------------------------------------------------------------

// ResolvedColumnRefProto

// optional .zetasql.ResolvedExprProto parent = 1;
inline bool ResolvedColumnRefProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedColumnRefProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedColumnRefProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedColumnRefProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedExprProto& ResolvedColumnRefProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedExprProto& ResolvedColumnRefProto::parent() const {
  const ::zetasql::ResolvedExprProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedColumnRefProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedExprProto*>(
      &::zetasql::_ResolvedExprProto_default_instance_);
}
inline ::zetasql::ResolvedExprProto* ResolvedColumnRefProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedColumnRefProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedExprProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedExprProto* ResolvedColumnRefProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedExprProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedColumnRefProto.parent)
  return parent_;
}
inline void ResolvedColumnRefProto::set_allocated_parent(::zetasql::ResolvedExprProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedColumnRefProto.parent)
}

// optional .zetasql.ResolvedColumnProto column = 2;
inline bool ResolvedColumnRefProto::has_column() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedColumnRefProto::set_has_column() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedColumnRefProto::clear_has_column() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedColumnRefProto::_internal_column() const {
  return *column_;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedColumnRefProto::column() const {
  const ::zetasql::ResolvedColumnProto* p = column_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedColumnRefProto.column)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedColumnProto*>(
      &::zetasql::_ResolvedColumnProto_default_instance_);
}
inline ::zetasql::ResolvedColumnProto* ResolvedColumnRefProto::release_column() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedColumnRefProto.column)
  clear_has_column();
  ::zetasql::ResolvedColumnProto* temp = column_;
  column_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedColumnProto* ResolvedColumnRefProto::mutable_column() {
  set_has_column();
  if (column_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedColumnProto>(GetArenaNoVirtual());
    column_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedColumnRefProto.column)
  return column_;
}
inline void ResolvedColumnRefProto::set_allocated_column(::zetasql::ResolvedColumnProto* column) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(column_);
  }
  if (column) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      column = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, column, submessage_arena);
    }
    set_has_column();
  } else {
    clear_has_column();
  }
  column_ = column;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedColumnRefProto.column)
}

// optional bool is_correlated = 3;
inline bool ResolvedColumnRefProto::has_is_correlated() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedColumnRefProto::set_has_is_correlated() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedColumnRefProto::clear_has_is_correlated() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedColumnRefProto::clear_is_correlated() {
  is_correlated_ = false;
  clear_has_is_correlated();
}
inline bool ResolvedColumnRefProto::is_correlated() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedColumnRefProto.is_correlated)
  return is_correlated_;
}
inline void ResolvedColumnRefProto::set_is_correlated(bool value) {
  set_has_is_correlated();
  is_correlated_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedColumnRefProto.is_correlated)
}

// -------------------------------------------------------------------

// ResolvedConstantProto

// optional .zetasql.ResolvedExprProto parent = 1;
inline bool ResolvedConstantProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedConstantProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedConstantProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedConstantProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedExprProto& ResolvedConstantProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedExprProto& ResolvedConstantProto::parent() const {
  const ::zetasql::ResolvedExprProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedConstantProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedExprProto*>(
      &::zetasql::_ResolvedExprProto_default_instance_);
}
inline ::zetasql::ResolvedExprProto* ResolvedConstantProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedConstantProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedExprProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedExprProto* ResolvedConstantProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedExprProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedConstantProto.parent)
  return parent_;
}
inline void ResolvedConstantProto::set_allocated_parent(::zetasql::ResolvedExprProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedConstantProto.parent)
}

// optional .zetasql.ConstantRefProto constant = 2;
inline bool ResolvedConstantProto::has_constant() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedConstantProto::set_has_constant() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedConstantProto::clear_has_constant() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::ConstantRefProto& ResolvedConstantProto::_internal_constant() const {
  return *constant_;
}
inline const ::zetasql::ConstantRefProto& ResolvedConstantProto::constant() const {
  const ::zetasql::ConstantRefProto* p = constant_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedConstantProto.constant)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ConstantRefProto*>(
      &::zetasql::_ConstantRefProto_default_instance_);
}
inline ::zetasql::ConstantRefProto* ResolvedConstantProto::release_constant() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedConstantProto.constant)
  clear_has_constant();
  ::zetasql::ConstantRefProto* temp = constant_;
  constant_ = NULL;
  return temp;
}
inline ::zetasql::ConstantRefProto* ResolvedConstantProto::mutable_constant() {
  set_has_constant();
  if (constant_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ConstantRefProto>(GetArenaNoVirtual());
    constant_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedConstantProto.constant)
  return constant_;
}
inline void ResolvedConstantProto::set_allocated_constant(::zetasql::ConstantRefProto* constant) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(constant_);
  }
  if (constant) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      constant = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, constant, submessage_arena);
    }
    set_has_constant();
  } else {
    clear_has_constant();
  }
  constant_ = constant;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedConstantProto.constant)
}

// -------------------------------------------------------------------

// ResolvedSystemVariableProto

// optional .zetasql.ResolvedExprProto parent = 1;
inline bool ResolvedSystemVariableProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedSystemVariableProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedSystemVariableProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedSystemVariableProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedExprProto& ResolvedSystemVariableProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedExprProto& ResolvedSystemVariableProto::parent() const {
  const ::zetasql::ResolvedExprProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSystemVariableProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedExprProto*>(
      &::zetasql::_ResolvedExprProto_default_instance_);
}
inline ::zetasql::ResolvedExprProto* ResolvedSystemVariableProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedSystemVariableProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedExprProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedExprProto* ResolvedSystemVariableProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedExprProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSystemVariableProto.parent)
  return parent_;
}
inline void ResolvedSystemVariableProto::set_allocated_parent(::zetasql::ResolvedExprProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedSystemVariableProto.parent)
}

// repeated string name_path = 2;
inline int ResolvedSystemVariableProto::name_path_size() const {
  return name_path_.size();
}
inline void ResolvedSystemVariableProto::clear_name_path() {
  name_path_.Clear();
}
inline const ::std::string& ResolvedSystemVariableProto::name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSystemVariableProto.name_path)
  return name_path_.Get(index);
}
inline ::std::string* ResolvedSystemVariableProto::mutable_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSystemVariableProto.name_path)
  return name_path_.Mutable(index);
}
inline void ResolvedSystemVariableProto::set_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedSystemVariableProto.name_path)
  name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedSystemVariableProto::set_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedSystemVariableProto.name_path)
  name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedSystemVariableProto::set_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedSystemVariableProto.name_path)
}
inline void ResolvedSystemVariableProto::set_name_path(int index, const char* value, size_t size) {
  name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedSystemVariableProto.name_path)
}
inline ::std::string* ResolvedSystemVariableProto::add_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedSystemVariableProto.name_path)
  return name_path_.Add();
}
inline void ResolvedSystemVariableProto::add_name_path(const ::std::string& value) {
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedSystemVariableProto.name_path)
}
#if LANG_CXX11
inline void ResolvedSystemVariableProto::add_name_path(::std::string&& value) {
  name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedSystemVariableProto.name_path)
}
#endif
inline void ResolvedSystemVariableProto::add_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedSystemVariableProto.name_path)
}
inline void ResolvedSystemVariableProto::add_name_path(const char* value, size_t size) {
  name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedSystemVariableProto.name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedSystemVariableProto::name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedSystemVariableProto.name_path)
  return name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedSystemVariableProto::mutable_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedSystemVariableProto.name_path)
  return &name_path_;
}

// -------------------------------------------------------------------

// ResolvedInlineLambdaProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedInlineLambdaProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedInlineLambdaProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedInlineLambdaProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedInlineLambdaProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedInlineLambdaProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedInlineLambdaProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedInlineLambdaProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedInlineLambdaProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedInlineLambdaProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedInlineLambdaProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedInlineLambdaProto.parent)
  return parent_;
}
inline void ResolvedInlineLambdaProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedInlineLambdaProto.parent)
}

// repeated .zetasql.ResolvedColumnProto argument_list = 2;
inline int ResolvedInlineLambdaProto::argument_list_size() const {
  return argument_list_.size();
}
inline ::zetasql::ResolvedColumnProto* ResolvedInlineLambdaProto::mutable_argument_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedInlineLambdaProto.argument_list)
  return argument_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >*
ResolvedInlineLambdaProto::mutable_argument_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedInlineLambdaProto.argument_list)
  return &argument_list_;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedInlineLambdaProto::argument_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedInlineLambdaProto.argument_list)
  return argument_list_.Get(index);
}
inline ::zetasql::ResolvedColumnProto* ResolvedInlineLambdaProto::add_argument_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedInlineLambdaProto.argument_list)
  return argument_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >&
ResolvedInlineLambdaProto::argument_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedInlineLambdaProto.argument_list)
  return argument_list_;
}

// repeated .zetasql.ResolvedColumnRefProto parameter_list = 3;
inline int ResolvedInlineLambdaProto::parameter_list_size() const {
  return parameter_list_.size();
}
inline void ResolvedInlineLambdaProto::clear_parameter_list() {
  parameter_list_.Clear();
}
inline ::zetasql::ResolvedColumnRefProto* ResolvedInlineLambdaProto::mutable_parameter_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedInlineLambdaProto.parameter_list)
  return parameter_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >*
ResolvedInlineLambdaProto::mutable_parameter_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedInlineLambdaProto.parameter_list)
  return &parameter_list_;
}
inline const ::zetasql::ResolvedColumnRefProto& ResolvedInlineLambdaProto::parameter_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedInlineLambdaProto.parameter_list)
  return parameter_list_.Get(index);
}
inline ::zetasql::ResolvedColumnRefProto* ResolvedInlineLambdaProto::add_parameter_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedInlineLambdaProto.parameter_list)
  return parameter_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >&
ResolvedInlineLambdaProto::parameter_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedInlineLambdaProto.parameter_list)
  return parameter_list_;
}

// optional .zetasql.AnyResolvedExprProto body = 4;
inline bool ResolvedInlineLambdaProto::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedInlineLambdaProto::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedInlineLambdaProto::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedInlineLambdaProto::clear_body() {
  if (body_ != NULL) body_->Clear();
  clear_has_body();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedInlineLambdaProto::_internal_body() const {
  return *body_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedInlineLambdaProto::body() const {
  const ::zetasql::AnyResolvedExprProto* p = body_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedInlineLambdaProto.body)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedInlineLambdaProto::release_body() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedInlineLambdaProto.body)
  clear_has_body();
  ::zetasql::AnyResolvedExprProto* temp = body_;
  body_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedInlineLambdaProto::mutable_body() {
  set_has_body();
  if (body_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    body_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedInlineLambdaProto.body)
  return body_;
}
inline void ResolvedInlineLambdaProto::set_allocated_body(::zetasql::AnyResolvedExprProto* body) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete body_;
  }
  if (body) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      body = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    set_has_body();
  } else {
    clear_has_body();
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedInlineLambdaProto.body)
}

// -------------------------------------------------------------------

// ResolvedFilterFieldArgProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedFilterFieldArgProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedFilterFieldArgProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedFilterFieldArgProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedFilterFieldArgProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedFilterFieldArgProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedFilterFieldArgProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFilterFieldArgProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedFilterFieldArgProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedFilterFieldArgProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedFilterFieldArgProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFilterFieldArgProto.parent)
  return parent_;
}
inline void ResolvedFilterFieldArgProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedFilterFieldArgProto.parent)
}

// optional bool include = 2;
inline bool ResolvedFilterFieldArgProto::has_include() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedFilterFieldArgProto::set_has_include() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedFilterFieldArgProto::clear_has_include() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedFilterFieldArgProto::clear_include() {
  include_ = false;
  clear_has_include();
}
inline bool ResolvedFilterFieldArgProto::include() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFilterFieldArgProto.include)
  return include_;
}
inline void ResolvedFilterFieldArgProto::set_include(bool value) {
  set_has_include();
  include_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedFilterFieldArgProto.include)
}

// repeated .zetasql.FieldDescriptorRefProto field_descriptor_path = 3;
inline int ResolvedFilterFieldArgProto::field_descriptor_path_size() const {
  return field_descriptor_path_.size();
}
inline ::zetasql::FieldDescriptorRefProto* ResolvedFilterFieldArgProto::mutable_field_descriptor_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFilterFieldArgProto.field_descriptor_path)
  return field_descriptor_path_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::FieldDescriptorRefProto >*
ResolvedFilterFieldArgProto::mutable_field_descriptor_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedFilterFieldArgProto.field_descriptor_path)
  return &field_descriptor_path_;
}
inline const ::zetasql::FieldDescriptorRefProto& ResolvedFilterFieldArgProto::field_descriptor_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFilterFieldArgProto.field_descriptor_path)
  return field_descriptor_path_.Get(index);
}
inline ::zetasql::FieldDescriptorRefProto* ResolvedFilterFieldArgProto::add_field_descriptor_path() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedFilterFieldArgProto.field_descriptor_path)
  return field_descriptor_path_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::FieldDescriptorRefProto >&
ResolvedFilterFieldArgProto::field_descriptor_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedFilterFieldArgProto.field_descriptor_path)
  return field_descriptor_path_;
}

// -------------------------------------------------------------------

// ResolvedFilterFieldProto

// optional .zetasql.ResolvedExprProto parent = 1;
inline bool ResolvedFilterFieldProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedFilterFieldProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedFilterFieldProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedFilterFieldProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedExprProto& ResolvedFilterFieldProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedExprProto& ResolvedFilterFieldProto::parent() const {
  const ::zetasql::ResolvedExprProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFilterFieldProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedExprProto*>(
      &::zetasql::_ResolvedExprProto_default_instance_);
}
inline ::zetasql::ResolvedExprProto* ResolvedFilterFieldProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedFilterFieldProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedExprProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedExprProto* ResolvedFilterFieldProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedExprProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFilterFieldProto.parent)
  return parent_;
}
inline void ResolvedFilterFieldProto::set_allocated_parent(::zetasql::ResolvedExprProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedFilterFieldProto.parent)
}

// optional .zetasql.AnyResolvedExprProto expr = 2;
inline bool ResolvedFilterFieldProto::has_expr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedFilterFieldProto::set_has_expr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedFilterFieldProto::clear_has_expr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedFilterFieldProto::clear_expr() {
  if (expr_ != NULL) expr_->Clear();
  clear_has_expr();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedFilterFieldProto::_internal_expr() const {
  return *expr_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedFilterFieldProto::expr() const {
  const ::zetasql::AnyResolvedExprProto* p = expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFilterFieldProto.expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedFilterFieldProto::release_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedFilterFieldProto.expr)
  clear_has_expr();
  ::zetasql::AnyResolvedExprProto* temp = expr_;
  expr_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedFilterFieldProto::mutable_expr() {
  set_has_expr();
  if (expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFilterFieldProto.expr)
  return expr_;
}
inline void ResolvedFilterFieldProto::set_allocated_expr(::zetasql::AnyResolvedExprProto* expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete expr_;
  }
  if (expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expr, submessage_arena);
    }
    set_has_expr();
  } else {
    clear_has_expr();
  }
  expr_ = expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedFilterFieldProto.expr)
}

// repeated .zetasql.ResolvedFilterFieldArgProto filter_field_arg_list = 3;
inline int ResolvedFilterFieldProto::filter_field_arg_list_size() const {
  return filter_field_arg_list_.size();
}
inline void ResolvedFilterFieldProto::clear_filter_field_arg_list() {
  filter_field_arg_list_.Clear();
}
inline ::zetasql::ResolvedFilterFieldArgProto* ResolvedFilterFieldProto::mutable_filter_field_arg_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFilterFieldProto.filter_field_arg_list)
  return filter_field_arg_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedFilterFieldArgProto >*
ResolvedFilterFieldProto::mutable_filter_field_arg_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedFilterFieldProto.filter_field_arg_list)
  return &filter_field_arg_list_;
}
inline const ::zetasql::ResolvedFilterFieldArgProto& ResolvedFilterFieldProto::filter_field_arg_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFilterFieldProto.filter_field_arg_list)
  return filter_field_arg_list_.Get(index);
}
inline ::zetasql::ResolvedFilterFieldArgProto* ResolvedFilterFieldProto::add_filter_field_arg_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedFilterFieldProto.filter_field_arg_list)
  return filter_field_arg_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedFilterFieldArgProto >&
ResolvedFilterFieldProto::filter_field_arg_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedFilterFieldProto.filter_field_arg_list)
  return filter_field_arg_list_;
}

// optional bool reset_cleared_required_fields = 4;
inline bool ResolvedFilterFieldProto::has_reset_cleared_required_fields() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedFilterFieldProto::set_has_reset_cleared_required_fields() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedFilterFieldProto::clear_has_reset_cleared_required_fields() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedFilterFieldProto::clear_reset_cleared_required_fields() {
  reset_cleared_required_fields_ = false;
  clear_has_reset_cleared_required_fields();
}
inline bool ResolvedFilterFieldProto::reset_cleared_required_fields() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFilterFieldProto.reset_cleared_required_fields)
  return reset_cleared_required_fields_;
}
inline void ResolvedFilterFieldProto::set_reset_cleared_required_fields(bool value) {
  set_has_reset_cleared_required_fields();
  reset_cleared_required_fields_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedFilterFieldProto.reset_cleared_required_fields)
}

// -------------------------------------------------------------------

// AnyResolvedFunctionCallBaseProto

// optional .zetasql.ResolvedFunctionCallProto resolved_function_call_node = 8;
inline bool AnyResolvedFunctionCallBaseProto::has_resolved_function_call_node() const {
  return node_case() == kResolvedFunctionCallNode;
}
inline void AnyResolvedFunctionCallBaseProto::set_has_resolved_function_call_node() {
  _oneof_case_[0] = kResolvedFunctionCallNode;
}
inline void AnyResolvedFunctionCallBaseProto::clear_resolved_function_call_node() {
  if (has_resolved_function_call_node()) {
    delete node_.resolved_function_call_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedFunctionCallProto& AnyResolvedFunctionCallBaseProto::_internal_resolved_function_call_node() const {
  return *node_.resolved_function_call_node_;
}
inline ::zetasql::ResolvedFunctionCallProto* AnyResolvedFunctionCallBaseProto::release_resolved_function_call_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedFunctionCallBaseProto.resolved_function_call_node)
  if (has_resolved_function_call_node()) {
    clear_has_node();
      ::zetasql::ResolvedFunctionCallProto* temp = node_.resolved_function_call_node_;
    node_.resolved_function_call_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedFunctionCallProto& AnyResolvedFunctionCallBaseProto::resolved_function_call_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedFunctionCallBaseProto.resolved_function_call_node)
  return has_resolved_function_call_node()
      ? *node_.resolved_function_call_node_
      : *reinterpret_cast< ::zetasql::ResolvedFunctionCallProto*>(&::zetasql::_ResolvedFunctionCallProto_default_instance_);
}
inline ::zetasql::ResolvedFunctionCallProto* AnyResolvedFunctionCallBaseProto::mutable_resolved_function_call_node() {
  if (!has_resolved_function_call_node()) {
    clear_node();
    set_has_resolved_function_call_node();
    node_.resolved_function_call_node_ = CreateMaybeMessage< ::zetasql::ResolvedFunctionCallProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedFunctionCallBaseProto.resolved_function_call_node)
  return node_.resolved_function_call_node_;
}

// optional .zetasql.AnyResolvedNonScalarFunctionCallBaseProto resolved_non_scalar_function_call_base_node = 86;
inline bool AnyResolvedFunctionCallBaseProto::has_resolved_non_scalar_function_call_base_node() const {
  return node_case() == kResolvedNonScalarFunctionCallBaseNode;
}
inline void AnyResolvedFunctionCallBaseProto::set_has_resolved_non_scalar_function_call_base_node() {
  _oneof_case_[0] = kResolvedNonScalarFunctionCallBaseNode;
}
inline void AnyResolvedFunctionCallBaseProto::clear_resolved_non_scalar_function_call_base_node() {
  if (has_resolved_non_scalar_function_call_base_node()) {
    delete node_.resolved_non_scalar_function_call_base_node_;
    clear_has_node();
  }
}
inline const ::zetasql::AnyResolvedNonScalarFunctionCallBaseProto& AnyResolvedFunctionCallBaseProto::_internal_resolved_non_scalar_function_call_base_node() const {
  return *node_.resolved_non_scalar_function_call_base_node_;
}
inline ::zetasql::AnyResolvedNonScalarFunctionCallBaseProto* AnyResolvedFunctionCallBaseProto::release_resolved_non_scalar_function_call_base_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedFunctionCallBaseProto.resolved_non_scalar_function_call_base_node)
  if (has_resolved_non_scalar_function_call_base_node()) {
    clear_has_node();
      ::zetasql::AnyResolvedNonScalarFunctionCallBaseProto* temp = node_.resolved_non_scalar_function_call_base_node_;
    node_.resolved_non_scalar_function_call_base_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::AnyResolvedNonScalarFunctionCallBaseProto& AnyResolvedFunctionCallBaseProto::resolved_non_scalar_function_call_base_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedFunctionCallBaseProto.resolved_non_scalar_function_call_base_node)
  return has_resolved_non_scalar_function_call_base_node()
      ? *node_.resolved_non_scalar_function_call_base_node_
      : *reinterpret_cast< ::zetasql::AnyResolvedNonScalarFunctionCallBaseProto*>(&::zetasql::_AnyResolvedNonScalarFunctionCallBaseProto_default_instance_);
}
inline ::zetasql::AnyResolvedNonScalarFunctionCallBaseProto* AnyResolvedFunctionCallBaseProto::mutable_resolved_non_scalar_function_call_base_node() {
  if (!has_resolved_non_scalar_function_call_base_node()) {
    clear_node();
    set_has_resolved_non_scalar_function_call_base_node();
    node_.resolved_non_scalar_function_call_base_node_ = CreateMaybeMessage< ::zetasql::AnyResolvedNonScalarFunctionCallBaseProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedFunctionCallBaseProto.resolved_non_scalar_function_call_base_node)
  return node_.resolved_non_scalar_function_call_base_node_;
}

inline bool AnyResolvedFunctionCallBaseProto::has_node() const {
  return node_case() != NODE_NOT_SET;
}
inline void AnyResolvedFunctionCallBaseProto::clear_has_node() {
  _oneof_case_[0] = NODE_NOT_SET;
}
inline AnyResolvedFunctionCallBaseProto::NodeCase AnyResolvedFunctionCallBaseProto::node_case() const {
  return AnyResolvedFunctionCallBaseProto::NodeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResolvedFunctionCallBaseProto

// optional .zetasql.ResolvedExprProto parent = 1;
inline bool ResolvedFunctionCallBaseProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedFunctionCallBaseProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedFunctionCallBaseProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedFunctionCallBaseProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedExprProto& ResolvedFunctionCallBaseProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedExprProto& ResolvedFunctionCallBaseProto::parent() const {
  const ::zetasql::ResolvedExprProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFunctionCallBaseProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedExprProto*>(
      &::zetasql::_ResolvedExprProto_default_instance_);
}
inline ::zetasql::ResolvedExprProto* ResolvedFunctionCallBaseProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedFunctionCallBaseProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedExprProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedExprProto* ResolvedFunctionCallBaseProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedExprProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFunctionCallBaseProto.parent)
  return parent_;
}
inline void ResolvedFunctionCallBaseProto::set_allocated_parent(::zetasql::ResolvedExprProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedFunctionCallBaseProto.parent)
}

// optional .zetasql.FunctionRefProto function = 2;
inline bool ResolvedFunctionCallBaseProto::has_function() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedFunctionCallBaseProto::set_has_function() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedFunctionCallBaseProto::clear_has_function() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::FunctionRefProto& ResolvedFunctionCallBaseProto::_internal_function() const {
  return *function_;
}
inline const ::zetasql::FunctionRefProto& ResolvedFunctionCallBaseProto::function() const {
  const ::zetasql::FunctionRefProto* p = function_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFunctionCallBaseProto.function)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::FunctionRefProto*>(
      &::zetasql::_FunctionRefProto_default_instance_);
}
inline ::zetasql::FunctionRefProto* ResolvedFunctionCallBaseProto::release_function() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedFunctionCallBaseProto.function)
  clear_has_function();
  ::zetasql::FunctionRefProto* temp = function_;
  function_ = NULL;
  return temp;
}
inline ::zetasql::FunctionRefProto* ResolvedFunctionCallBaseProto::mutable_function() {
  set_has_function();
  if (function_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::FunctionRefProto>(GetArenaNoVirtual());
    function_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFunctionCallBaseProto.function)
  return function_;
}
inline void ResolvedFunctionCallBaseProto::set_allocated_function(::zetasql::FunctionRefProto* function) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(function_);
  }
  if (function) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      function = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, function, submessage_arena);
    }
    set_has_function();
  } else {
    clear_has_function();
  }
  function_ = function;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedFunctionCallBaseProto.function)
}

// optional .zetasql.FunctionSignatureProto signature = 3;
inline bool ResolvedFunctionCallBaseProto::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedFunctionCallBaseProto::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedFunctionCallBaseProto::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasql::FunctionSignatureProto& ResolvedFunctionCallBaseProto::_internal_signature() const {
  return *signature_;
}
inline const ::zetasql::FunctionSignatureProto& ResolvedFunctionCallBaseProto::signature() const {
  const ::zetasql::FunctionSignatureProto* p = signature_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFunctionCallBaseProto.signature)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::FunctionSignatureProto*>(
      &::zetasql::_FunctionSignatureProto_default_instance_);
}
inline ::zetasql::FunctionSignatureProto* ResolvedFunctionCallBaseProto::release_signature() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedFunctionCallBaseProto.signature)
  clear_has_signature();
  ::zetasql::FunctionSignatureProto* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline ::zetasql::FunctionSignatureProto* ResolvedFunctionCallBaseProto::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::FunctionSignatureProto>(GetArenaNoVirtual());
    signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFunctionCallBaseProto.signature)
  return signature_;
}
inline void ResolvedFunctionCallBaseProto::set_allocated_signature(::zetasql::FunctionSignatureProto* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(signature_);
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedFunctionCallBaseProto.signature)
}

// repeated .zetasql.AnyResolvedExprProto argument_list = 4;
inline int ResolvedFunctionCallBaseProto::argument_list_size() const {
  return argument_list_.size();
}
inline void ResolvedFunctionCallBaseProto::clear_argument_list() {
  argument_list_.Clear();
}
inline ::zetasql::AnyResolvedExprProto* ResolvedFunctionCallBaseProto::mutable_argument_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFunctionCallBaseProto.argument_list)
  return argument_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
ResolvedFunctionCallBaseProto::mutable_argument_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedFunctionCallBaseProto.argument_list)
  return &argument_list_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedFunctionCallBaseProto::argument_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFunctionCallBaseProto.argument_list)
  return argument_list_.Get(index);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedFunctionCallBaseProto::add_argument_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedFunctionCallBaseProto.argument_list)
  return argument_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
ResolvedFunctionCallBaseProto::argument_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedFunctionCallBaseProto.argument_list)
  return argument_list_;
}

// repeated .zetasql.ResolvedFunctionArgumentProto generic_argument_list = 6;
inline int ResolvedFunctionCallBaseProto::generic_argument_list_size() const {
  return generic_argument_list_.size();
}
inline void ResolvedFunctionCallBaseProto::clear_generic_argument_list() {
  generic_argument_list_.Clear();
}
inline ::zetasql::ResolvedFunctionArgumentProto* ResolvedFunctionCallBaseProto::mutable_generic_argument_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFunctionCallBaseProto.generic_argument_list)
  return generic_argument_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedFunctionArgumentProto >*
ResolvedFunctionCallBaseProto::mutable_generic_argument_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedFunctionCallBaseProto.generic_argument_list)
  return &generic_argument_list_;
}
inline const ::zetasql::ResolvedFunctionArgumentProto& ResolvedFunctionCallBaseProto::generic_argument_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFunctionCallBaseProto.generic_argument_list)
  return generic_argument_list_.Get(index);
}
inline ::zetasql::ResolvedFunctionArgumentProto* ResolvedFunctionCallBaseProto::add_generic_argument_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedFunctionCallBaseProto.generic_argument_list)
  return generic_argument_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedFunctionArgumentProto >&
ResolvedFunctionCallBaseProto::generic_argument_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedFunctionCallBaseProto.generic_argument_list)
  return generic_argument_list_;
}

// optional .zetasql.ResolvedFunctionCallBaseEnums.ErrorMode error_mode = 5;
inline bool ResolvedFunctionCallBaseProto::has_error_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedFunctionCallBaseProto::set_has_error_mode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedFunctionCallBaseProto::clear_has_error_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedFunctionCallBaseProto::clear_error_mode() {
  error_mode_ = 0;
  clear_has_error_mode();
}
inline ::zetasql::ResolvedFunctionCallBaseEnums_ErrorMode ResolvedFunctionCallBaseProto::error_mode() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFunctionCallBaseProto.error_mode)
  return static_cast< ::zetasql::ResolvedFunctionCallBaseEnums_ErrorMode >(error_mode_);
}
inline void ResolvedFunctionCallBaseProto::set_error_mode(::zetasql::ResolvedFunctionCallBaseEnums_ErrorMode value) {
  assert(::zetasql::ResolvedFunctionCallBaseEnums_ErrorMode_IsValid(value));
  set_has_error_mode();
  error_mode_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedFunctionCallBaseProto.error_mode)
}

// repeated .zetasql.ResolvedOptionProto hint_list = 7;
inline int ResolvedFunctionCallBaseProto::hint_list_size() const {
  return hint_list_.size();
}
inline void ResolvedFunctionCallBaseProto::clear_hint_list() {
  hint_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedFunctionCallBaseProto::mutable_hint_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFunctionCallBaseProto.hint_list)
  return hint_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedFunctionCallBaseProto::mutable_hint_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedFunctionCallBaseProto.hint_list)
  return &hint_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedFunctionCallBaseProto::hint_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFunctionCallBaseProto.hint_list)
  return hint_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedFunctionCallBaseProto::add_hint_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedFunctionCallBaseProto.hint_list)
  return hint_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedFunctionCallBaseProto::hint_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedFunctionCallBaseProto.hint_list)
  return hint_list_;
}

// repeated .zetasql.ResolvedCollationProto collation_list = 8;
inline int ResolvedFunctionCallBaseProto::collation_list_size() const {
  return collation_list_.size();
}
inline ::zetasql::ResolvedCollationProto* ResolvedFunctionCallBaseProto::mutable_collation_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFunctionCallBaseProto.collation_list)
  return collation_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedCollationProto >*
ResolvedFunctionCallBaseProto::mutable_collation_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedFunctionCallBaseProto.collation_list)
  return &collation_list_;
}
inline const ::zetasql::ResolvedCollationProto& ResolvedFunctionCallBaseProto::collation_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFunctionCallBaseProto.collation_list)
  return collation_list_.Get(index);
}
inline ::zetasql::ResolvedCollationProto* ResolvedFunctionCallBaseProto::add_collation_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedFunctionCallBaseProto.collation_list)
  return collation_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedCollationProto >&
ResolvedFunctionCallBaseProto::collation_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedFunctionCallBaseProto.collation_list)
  return collation_list_;
}

// -------------------------------------------------------------------

// ResolvedFunctionCallProto

// optional .zetasql.ResolvedFunctionCallBaseProto parent = 1;
inline bool ResolvedFunctionCallProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedFunctionCallProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedFunctionCallProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedFunctionCallProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedFunctionCallBaseProto& ResolvedFunctionCallProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedFunctionCallBaseProto& ResolvedFunctionCallProto::parent() const {
  const ::zetasql::ResolvedFunctionCallBaseProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFunctionCallProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedFunctionCallBaseProto*>(
      &::zetasql::_ResolvedFunctionCallBaseProto_default_instance_);
}
inline ::zetasql::ResolvedFunctionCallBaseProto* ResolvedFunctionCallProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedFunctionCallProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedFunctionCallBaseProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedFunctionCallBaseProto* ResolvedFunctionCallProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedFunctionCallBaseProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFunctionCallProto.parent)
  return parent_;
}
inline void ResolvedFunctionCallProto::set_allocated_parent(::zetasql::ResolvedFunctionCallBaseProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedFunctionCallProto.parent)
}

// optional .zetasql.ResolvedFunctionCallInfoProto function_call_info = 2;
inline bool ResolvedFunctionCallProto::has_function_call_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedFunctionCallProto::set_has_function_call_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedFunctionCallProto::clear_has_function_call_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::ResolvedFunctionCallInfoProto& ResolvedFunctionCallProto::_internal_function_call_info() const {
  return *function_call_info_;
}
inline const ::zetasql::ResolvedFunctionCallInfoProto& ResolvedFunctionCallProto::function_call_info() const {
  const ::zetasql::ResolvedFunctionCallInfoProto* p = function_call_info_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFunctionCallProto.function_call_info)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedFunctionCallInfoProto*>(
      &::zetasql::_ResolvedFunctionCallInfoProto_default_instance_);
}
inline ::zetasql::ResolvedFunctionCallInfoProto* ResolvedFunctionCallProto::release_function_call_info() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedFunctionCallProto.function_call_info)
  clear_has_function_call_info();
  ::zetasql::ResolvedFunctionCallInfoProto* temp = function_call_info_;
  function_call_info_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedFunctionCallInfoProto* ResolvedFunctionCallProto::mutable_function_call_info() {
  set_has_function_call_info();
  if (function_call_info_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedFunctionCallInfoProto>(GetArenaNoVirtual());
    function_call_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFunctionCallProto.function_call_info)
  return function_call_info_;
}
inline void ResolvedFunctionCallProto::set_allocated_function_call_info(::zetasql::ResolvedFunctionCallInfoProto* function_call_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(function_call_info_);
  }
  if (function_call_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      function_call_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, function_call_info, submessage_arena);
    }
    set_has_function_call_info();
  } else {
    clear_has_function_call_info();
  }
  function_call_info_ = function_call_info;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedFunctionCallProto.function_call_info)
}

// -------------------------------------------------------------------

// AnyResolvedNonScalarFunctionCallBaseProto

// optional .zetasql.ResolvedAggregateFunctionCallProto resolved_aggregate_function_call_node = 9;
inline bool AnyResolvedNonScalarFunctionCallBaseProto::has_resolved_aggregate_function_call_node() const {
  return node_case() == kResolvedAggregateFunctionCallNode;
}
inline void AnyResolvedNonScalarFunctionCallBaseProto::set_has_resolved_aggregate_function_call_node() {
  _oneof_case_[0] = kResolvedAggregateFunctionCallNode;
}
inline void AnyResolvedNonScalarFunctionCallBaseProto::clear_resolved_aggregate_function_call_node() {
  if (has_resolved_aggregate_function_call_node()) {
    delete node_.resolved_aggregate_function_call_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAggregateFunctionCallProto& AnyResolvedNonScalarFunctionCallBaseProto::_internal_resolved_aggregate_function_call_node() const {
  return *node_.resolved_aggregate_function_call_node_;
}
inline ::zetasql::ResolvedAggregateFunctionCallProto* AnyResolvedNonScalarFunctionCallBaseProto::release_resolved_aggregate_function_call_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedNonScalarFunctionCallBaseProto.resolved_aggregate_function_call_node)
  if (has_resolved_aggregate_function_call_node()) {
    clear_has_node();
      ::zetasql::ResolvedAggregateFunctionCallProto* temp = node_.resolved_aggregate_function_call_node_;
    node_.resolved_aggregate_function_call_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAggregateFunctionCallProto& AnyResolvedNonScalarFunctionCallBaseProto::resolved_aggregate_function_call_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedNonScalarFunctionCallBaseProto.resolved_aggregate_function_call_node)
  return has_resolved_aggregate_function_call_node()
      ? *node_.resolved_aggregate_function_call_node_
      : *reinterpret_cast< ::zetasql::ResolvedAggregateFunctionCallProto*>(&::zetasql::_ResolvedAggregateFunctionCallProto_default_instance_);
}
inline ::zetasql::ResolvedAggregateFunctionCallProto* AnyResolvedNonScalarFunctionCallBaseProto::mutable_resolved_aggregate_function_call_node() {
  if (!has_resolved_aggregate_function_call_node()) {
    clear_node();
    set_has_resolved_aggregate_function_call_node();
    node_.resolved_aggregate_function_call_node_ = CreateMaybeMessage< ::zetasql::ResolvedAggregateFunctionCallProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedNonScalarFunctionCallBaseProto.resolved_aggregate_function_call_node)
  return node_.resolved_aggregate_function_call_node_;
}

// optional .zetasql.ResolvedAnalyticFunctionCallProto resolved_analytic_function_call_node = 10;
inline bool AnyResolvedNonScalarFunctionCallBaseProto::has_resolved_analytic_function_call_node() const {
  return node_case() == kResolvedAnalyticFunctionCallNode;
}
inline void AnyResolvedNonScalarFunctionCallBaseProto::set_has_resolved_analytic_function_call_node() {
  _oneof_case_[0] = kResolvedAnalyticFunctionCallNode;
}
inline void AnyResolvedNonScalarFunctionCallBaseProto::clear_resolved_analytic_function_call_node() {
  if (has_resolved_analytic_function_call_node()) {
    delete node_.resolved_analytic_function_call_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAnalyticFunctionCallProto& AnyResolvedNonScalarFunctionCallBaseProto::_internal_resolved_analytic_function_call_node() const {
  return *node_.resolved_analytic_function_call_node_;
}
inline ::zetasql::ResolvedAnalyticFunctionCallProto* AnyResolvedNonScalarFunctionCallBaseProto::release_resolved_analytic_function_call_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedNonScalarFunctionCallBaseProto.resolved_analytic_function_call_node)
  if (has_resolved_analytic_function_call_node()) {
    clear_has_node();
      ::zetasql::ResolvedAnalyticFunctionCallProto* temp = node_.resolved_analytic_function_call_node_;
    node_.resolved_analytic_function_call_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAnalyticFunctionCallProto& AnyResolvedNonScalarFunctionCallBaseProto::resolved_analytic_function_call_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedNonScalarFunctionCallBaseProto.resolved_analytic_function_call_node)
  return has_resolved_analytic_function_call_node()
      ? *node_.resolved_analytic_function_call_node_
      : *reinterpret_cast< ::zetasql::ResolvedAnalyticFunctionCallProto*>(&::zetasql::_ResolvedAnalyticFunctionCallProto_default_instance_);
}
inline ::zetasql::ResolvedAnalyticFunctionCallProto* AnyResolvedNonScalarFunctionCallBaseProto::mutable_resolved_analytic_function_call_node() {
  if (!has_resolved_analytic_function_call_node()) {
    clear_node();
    set_has_resolved_analytic_function_call_node();
    node_.resolved_analytic_function_call_node_ = CreateMaybeMessage< ::zetasql::ResolvedAnalyticFunctionCallProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedNonScalarFunctionCallBaseProto.resolved_analytic_function_call_node)
  return node_.resolved_analytic_function_call_node_;
}

inline bool AnyResolvedNonScalarFunctionCallBaseProto::has_node() const {
  return node_case() != NODE_NOT_SET;
}
inline void AnyResolvedNonScalarFunctionCallBaseProto::clear_has_node() {
  _oneof_case_[0] = NODE_NOT_SET;
}
inline AnyResolvedNonScalarFunctionCallBaseProto::NodeCase AnyResolvedNonScalarFunctionCallBaseProto::node_case() const {
  return AnyResolvedNonScalarFunctionCallBaseProto::NodeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResolvedNonScalarFunctionCallBaseProto

// optional .zetasql.ResolvedFunctionCallBaseProto parent = 1;
inline bool ResolvedNonScalarFunctionCallBaseProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedNonScalarFunctionCallBaseProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedNonScalarFunctionCallBaseProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedNonScalarFunctionCallBaseProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedFunctionCallBaseProto& ResolvedNonScalarFunctionCallBaseProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedFunctionCallBaseProto& ResolvedNonScalarFunctionCallBaseProto::parent() const {
  const ::zetasql::ResolvedFunctionCallBaseProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedNonScalarFunctionCallBaseProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedFunctionCallBaseProto*>(
      &::zetasql::_ResolvedFunctionCallBaseProto_default_instance_);
}
inline ::zetasql::ResolvedFunctionCallBaseProto* ResolvedNonScalarFunctionCallBaseProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedNonScalarFunctionCallBaseProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedFunctionCallBaseProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedFunctionCallBaseProto* ResolvedNonScalarFunctionCallBaseProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedFunctionCallBaseProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedNonScalarFunctionCallBaseProto.parent)
  return parent_;
}
inline void ResolvedNonScalarFunctionCallBaseProto::set_allocated_parent(::zetasql::ResolvedFunctionCallBaseProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedNonScalarFunctionCallBaseProto.parent)
}

// optional bool distinct = 2;
inline bool ResolvedNonScalarFunctionCallBaseProto::has_distinct() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedNonScalarFunctionCallBaseProto::set_has_distinct() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedNonScalarFunctionCallBaseProto::clear_has_distinct() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedNonScalarFunctionCallBaseProto::clear_distinct() {
  distinct_ = false;
  clear_has_distinct();
}
inline bool ResolvedNonScalarFunctionCallBaseProto::distinct() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedNonScalarFunctionCallBaseProto.distinct)
  return distinct_;
}
inline void ResolvedNonScalarFunctionCallBaseProto::set_distinct(bool value) {
  set_has_distinct();
  distinct_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedNonScalarFunctionCallBaseProto.distinct)
}

// optional .zetasql.ResolvedNonScalarFunctionCallBaseEnums.NullHandlingModifier null_handling_modifier = 3;
inline bool ResolvedNonScalarFunctionCallBaseProto::has_null_handling_modifier() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedNonScalarFunctionCallBaseProto::set_has_null_handling_modifier() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedNonScalarFunctionCallBaseProto::clear_has_null_handling_modifier() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedNonScalarFunctionCallBaseProto::clear_null_handling_modifier() {
  null_handling_modifier_ = 0;
  clear_has_null_handling_modifier();
}
inline ::zetasql::ResolvedNonScalarFunctionCallBaseEnums_NullHandlingModifier ResolvedNonScalarFunctionCallBaseProto::null_handling_modifier() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedNonScalarFunctionCallBaseProto.null_handling_modifier)
  return static_cast< ::zetasql::ResolvedNonScalarFunctionCallBaseEnums_NullHandlingModifier >(null_handling_modifier_);
}
inline void ResolvedNonScalarFunctionCallBaseProto::set_null_handling_modifier(::zetasql::ResolvedNonScalarFunctionCallBaseEnums_NullHandlingModifier value) {
  assert(::zetasql::ResolvedNonScalarFunctionCallBaseEnums_NullHandlingModifier_IsValid(value));
  set_has_null_handling_modifier();
  null_handling_modifier_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedNonScalarFunctionCallBaseProto.null_handling_modifier)
}

// optional .zetasql.AnyResolvedScanProto with_group_rows_subquery = 4;
inline bool ResolvedNonScalarFunctionCallBaseProto::has_with_group_rows_subquery() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedNonScalarFunctionCallBaseProto::set_has_with_group_rows_subquery() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedNonScalarFunctionCallBaseProto::clear_has_with_group_rows_subquery() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedNonScalarFunctionCallBaseProto::clear_with_group_rows_subquery() {
  if (with_group_rows_subquery_ != NULL) with_group_rows_subquery_->Clear();
  clear_has_with_group_rows_subquery();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedNonScalarFunctionCallBaseProto::_internal_with_group_rows_subquery() const {
  return *with_group_rows_subquery_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedNonScalarFunctionCallBaseProto::with_group_rows_subquery() const {
  const ::zetasql::AnyResolvedScanProto* p = with_group_rows_subquery_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedNonScalarFunctionCallBaseProto.with_group_rows_subquery)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedNonScalarFunctionCallBaseProto::release_with_group_rows_subquery() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedNonScalarFunctionCallBaseProto.with_group_rows_subquery)
  clear_has_with_group_rows_subquery();
  ::zetasql::AnyResolvedScanProto* temp = with_group_rows_subquery_;
  with_group_rows_subquery_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedNonScalarFunctionCallBaseProto::mutable_with_group_rows_subquery() {
  set_has_with_group_rows_subquery();
  if (with_group_rows_subquery_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    with_group_rows_subquery_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedNonScalarFunctionCallBaseProto.with_group_rows_subquery)
  return with_group_rows_subquery_;
}
inline void ResolvedNonScalarFunctionCallBaseProto::set_allocated_with_group_rows_subquery(::zetasql::AnyResolvedScanProto* with_group_rows_subquery) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete with_group_rows_subquery_;
  }
  if (with_group_rows_subquery) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      with_group_rows_subquery = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, with_group_rows_subquery, submessage_arena);
    }
    set_has_with_group_rows_subquery();
  } else {
    clear_has_with_group_rows_subquery();
  }
  with_group_rows_subquery_ = with_group_rows_subquery;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedNonScalarFunctionCallBaseProto.with_group_rows_subquery)
}

// repeated .zetasql.ResolvedColumnRefProto with_group_rows_parameter_list = 5;
inline int ResolvedNonScalarFunctionCallBaseProto::with_group_rows_parameter_list_size() const {
  return with_group_rows_parameter_list_.size();
}
inline void ResolvedNonScalarFunctionCallBaseProto::clear_with_group_rows_parameter_list() {
  with_group_rows_parameter_list_.Clear();
}
inline ::zetasql::ResolvedColumnRefProto* ResolvedNonScalarFunctionCallBaseProto::mutable_with_group_rows_parameter_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedNonScalarFunctionCallBaseProto.with_group_rows_parameter_list)
  return with_group_rows_parameter_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >*
ResolvedNonScalarFunctionCallBaseProto::mutable_with_group_rows_parameter_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedNonScalarFunctionCallBaseProto.with_group_rows_parameter_list)
  return &with_group_rows_parameter_list_;
}
inline const ::zetasql::ResolvedColumnRefProto& ResolvedNonScalarFunctionCallBaseProto::with_group_rows_parameter_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedNonScalarFunctionCallBaseProto.with_group_rows_parameter_list)
  return with_group_rows_parameter_list_.Get(index);
}
inline ::zetasql::ResolvedColumnRefProto* ResolvedNonScalarFunctionCallBaseProto::add_with_group_rows_parameter_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedNonScalarFunctionCallBaseProto.with_group_rows_parameter_list)
  return with_group_rows_parameter_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >&
ResolvedNonScalarFunctionCallBaseProto::with_group_rows_parameter_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedNonScalarFunctionCallBaseProto.with_group_rows_parameter_list)
  return with_group_rows_parameter_list_;
}

// -------------------------------------------------------------------

// ResolvedAggregateFunctionCallProto

// optional .zetasql.ResolvedNonScalarFunctionCallBaseProto parent = 1;
inline bool ResolvedAggregateFunctionCallProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAggregateFunctionCallProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAggregateFunctionCallProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAggregateFunctionCallProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedNonScalarFunctionCallBaseProto& ResolvedAggregateFunctionCallProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedNonScalarFunctionCallBaseProto& ResolvedAggregateFunctionCallProto::parent() const {
  const ::zetasql::ResolvedNonScalarFunctionCallBaseProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAggregateFunctionCallProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedNonScalarFunctionCallBaseProto*>(
      &::zetasql::_ResolvedNonScalarFunctionCallBaseProto_default_instance_);
}
inline ::zetasql::ResolvedNonScalarFunctionCallBaseProto* ResolvedAggregateFunctionCallProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAggregateFunctionCallProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedNonScalarFunctionCallBaseProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedNonScalarFunctionCallBaseProto* ResolvedAggregateFunctionCallProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedNonScalarFunctionCallBaseProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAggregateFunctionCallProto.parent)
  return parent_;
}
inline void ResolvedAggregateFunctionCallProto::set_allocated_parent(::zetasql::ResolvedNonScalarFunctionCallBaseProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAggregateFunctionCallProto.parent)
}

// optional .zetasql.ResolvedAggregateHavingModifierProto having_modifier = 5;
inline bool ResolvedAggregateFunctionCallProto::has_having_modifier() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedAggregateFunctionCallProto::set_has_having_modifier() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedAggregateFunctionCallProto::clear_has_having_modifier() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedAggregateFunctionCallProto::clear_having_modifier() {
  if (having_modifier_ != NULL) having_modifier_->Clear();
  clear_has_having_modifier();
}
inline const ::zetasql::ResolvedAggregateHavingModifierProto& ResolvedAggregateFunctionCallProto::_internal_having_modifier() const {
  return *having_modifier_;
}
inline const ::zetasql::ResolvedAggregateHavingModifierProto& ResolvedAggregateFunctionCallProto::having_modifier() const {
  const ::zetasql::ResolvedAggregateHavingModifierProto* p = having_modifier_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAggregateFunctionCallProto.having_modifier)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAggregateHavingModifierProto*>(
      &::zetasql::_ResolvedAggregateHavingModifierProto_default_instance_);
}
inline ::zetasql::ResolvedAggregateHavingModifierProto* ResolvedAggregateFunctionCallProto::release_having_modifier() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAggregateFunctionCallProto.having_modifier)
  clear_has_having_modifier();
  ::zetasql::ResolvedAggregateHavingModifierProto* temp = having_modifier_;
  having_modifier_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAggregateHavingModifierProto* ResolvedAggregateFunctionCallProto::mutable_having_modifier() {
  set_has_having_modifier();
  if (having_modifier_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAggregateHavingModifierProto>(GetArenaNoVirtual());
    having_modifier_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAggregateFunctionCallProto.having_modifier)
  return having_modifier_;
}
inline void ResolvedAggregateFunctionCallProto::set_allocated_having_modifier(::zetasql::ResolvedAggregateHavingModifierProto* having_modifier) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete having_modifier_;
  }
  if (having_modifier) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      having_modifier = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, having_modifier, submessage_arena);
    }
    set_has_having_modifier();
  } else {
    clear_has_having_modifier();
  }
  having_modifier_ = having_modifier;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAggregateFunctionCallProto.having_modifier)
}

// repeated .zetasql.ResolvedOrderByItemProto order_by_item_list = 3;
inline int ResolvedAggregateFunctionCallProto::order_by_item_list_size() const {
  return order_by_item_list_.size();
}
inline void ResolvedAggregateFunctionCallProto::clear_order_by_item_list() {
  order_by_item_list_.Clear();
}
inline ::zetasql::ResolvedOrderByItemProto* ResolvedAggregateFunctionCallProto::mutable_order_by_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAggregateFunctionCallProto.order_by_item_list)
  return order_by_item_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOrderByItemProto >*
ResolvedAggregateFunctionCallProto::mutable_order_by_item_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedAggregateFunctionCallProto.order_by_item_list)
  return &order_by_item_list_;
}
inline const ::zetasql::ResolvedOrderByItemProto& ResolvedAggregateFunctionCallProto::order_by_item_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAggregateFunctionCallProto.order_by_item_list)
  return order_by_item_list_.Get(index);
}
inline ::zetasql::ResolvedOrderByItemProto* ResolvedAggregateFunctionCallProto::add_order_by_item_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAggregateFunctionCallProto.order_by_item_list)
  return order_by_item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOrderByItemProto >&
ResolvedAggregateFunctionCallProto::order_by_item_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedAggregateFunctionCallProto.order_by_item_list)
  return order_by_item_list_;
}

// optional .zetasql.AnyResolvedExprProto limit = 4;
inline bool ResolvedAggregateFunctionCallProto::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedAggregateFunctionCallProto::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedAggregateFunctionCallProto::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedAggregateFunctionCallProto::clear_limit() {
  if (limit_ != NULL) limit_->Clear();
  clear_has_limit();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedAggregateFunctionCallProto::_internal_limit() const {
  return *limit_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedAggregateFunctionCallProto::limit() const {
  const ::zetasql::AnyResolvedExprProto* p = limit_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAggregateFunctionCallProto.limit)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedAggregateFunctionCallProto::release_limit() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAggregateFunctionCallProto.limit)
  clear_has_limit();
  ::zetasql::AnyResolvedExprProto* temp = limit_;
  limit_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedAggregateFunctionCallProto::mutable_limit() {
  set_has_limit();
  if (limit_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    limit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAggregateFunctionCallProto.limit)
  return limit_;
}
inline void ResolvedAggregateFunctionCallProto::set_allocated_limit(::zetasql::AnyResolvedExprProto* limit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete limit_;
  }
  if (limit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      limit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, limit, submessage_arena);
    }
    set_has_limit();
  } else {
    clear_has_limit();
  }
  limit_ = limit;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAggregateFunctionCallProto.limit)
}

// optional .zetasql.ResolvedFunctionCallInfoProto function_call_info = 6;
inline bool ResolvedAggregateFunctionCallProto::has_function_call_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedAggregateFunctionCallProto::set_has_function_call_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedAggregateFunctionCallProto::clear_has_function_call_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::zetasql::ResolvedFunctionCallInfoProto& ResolvedAggregateFunctionCallProto::_internal_function_call_info() const {
  return *function_call_info_;
}
inline const ::zetasql::ResolvedFunctionCallInfoProto& ResolvedAggregateFunctionCallProto::function_call_info() const {
  const ::zetasql::ResolvedFunctionCallInfoProto* p = function_call_info_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAggregateFunctionCallProto.function_call_info)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedFunctionCallInfoProto*>(
      &::zetasql::_ResolvedFunctionCallInfoProto_default_instance_);
}
inline ::zetasql::ResolvedFunctionCallInfoProto* ResolvedAggregateFunctionCallProto::release_function_call_info() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAggregateFunctionCallProto.function_call_info)
  clear_has_function_call_info();
  ::zetasql::ResolvedFunctionCallInfoProto* temp = function_call_info_;
  function_call_info_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedFunctionCallInfoProto* ResolvedAggregateFunctionCallProto::mutable_function_call_info() {
  set_has_function_call_info();
  if (function_call_info_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedFunctionCallInfoProto>(GetArenaNoVirtual());
    function_call_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAggregateFunctionCallProto.function_call_info)
  return function_call_info_;
}
inline void ResolvedAggregateFunctionCallProto::set_allocated_function_call_info(::zetasql::ResolvedFunctionCallInfoProto* function_call_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(function_call_info_);
  }
  if (function_call_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      function_call_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, function_call_info, submessage_arena);
    }
    set_has_function_call_info();
  } else {
    clear_has_function_call_info();
  }
  function_call_info_ = function_call_info;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAggregateFunctionCallProto.function_call_info)
}

// -------------------------------------------------------------------

// ResolvedAnalyticFunctionCallProto

// optional .zetasql.ResolvedNonScalarFunctionCallBaseProto parent = 1;
inline bool ResolvedAnalyticFunctionCallProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAnalyticFunctionCallProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAnalyticFunctionCallProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAnalyticFunctionCallProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedNonScalarFunctionCallBaseProto& ResolvedAnalyticFunctionCallProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedNonScalarFunctionCallBaseProto& ResolvedAnalyticFunctionCallProto::parent() const {
  const ::zetasql::ResolvedNonScalarFunctionCallBaseProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAnalyticFunctionCallProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedNonScalarFunctionCallBaseProto*>(
      &::zetasql::_ResolvedNonScalarFunctionCallBaseProto_default_instance_);
}
inline ::zetasql::ResolvedNonScalarFunctionCallBaseProto* ResolvedAnalyticFunctionCallProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAnalyticFunctionCallProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedNonScalarFunctionCallBaseProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedNonScalarFunctionCallBaseProto* ResolvedAnalyticFunctionCallProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedNonScalarFunctionCallBaseProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAnalyticFunctionCallProto.parent)
  return parent_;
}
inline void ResolvedAnalyticFunctionCallProto::set_allocated_parent(::zetasql::ResolvedNonScalarFunctionCallBaseProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAnalyticFunctionCallProto.parent)
}

// optional .zetasql.ResolvedWindowFrameProto window_frame = 2;
inline bool ResolvedAnalyticFunctionCallProto::has_window_frame() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedAnalyticFunctionCallProto::set_has_window_frame() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedAnalyticFunctionCallProto::clear_has_window_frame() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedAnalyticFunctionCallProto::clear_window_frame() {
  if (window_frame_ != NULL) window_frame_->Clear();
  clear_has_window_frame();
}
inline const ::zetasql::ResolvedWindowFrameProto& ResolvedAnalyticFunctionCallProto::_internal_window_frame() const {
  return *window_frame_;
}
inline const ::zetasql::ResolvedWindowFrameProto& ResolvedAnalyticFunctionCallProto::window_frame() const {
  const ::zetasql::ResolvedWindowFrameProto* p = window_frame_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAnalyticFunctionCallProto.window_frame)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedWindowFrameProto*>(
      &::zetasql::_ResolvedWindowFrameProto_default_instance_);
}
inline ::zetasql::ResolvedWindowFrameProto* ResolvedAnalyticFunctionCallProto::release_window_frame() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAnalyticFunctionCallProto.window_frame)
  clear_has_window_frame();
  ::zetasql::ResolvedWindowFrameProto* temp = window_frame_;
  window_frame_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedWindowFrameProto* ResolvedAnalyticFunctionCallProto::mutable_window_frame() {
  set_has_window_frame();
  if (window_frame_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedWindowFrameProto>(GetArenaNoVirtual());
    window_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAnalyticFunctionCallProto.window_frame)
  return window_frame_;
}
inline void ResolvedAnalyticFunctionCallProto::set_allocated_window_frame(::zetasql::ResolvedWindowFrameProto* window_frame) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete window_frame_;
  }
  if (window_frame) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      window_frame = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, window_frame, submessage_arena);
    }
    set_has_window_frame();
  } else {
    clear_has_window_frame();
  }
  window_frame_ = window_frame;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAnalyticFunctionCallProto.window_frame)
}

// -------------------------------------------------------------------

// ResolvedExtendedCastElementProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedExtendedCastElementProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedExtendedCastElementProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedExtendedCastElementProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedExtendedCastElementProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedExtendedCastElementProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedExtendedCastElementProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExtendedCastElementProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedExtendedCastElementProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedExtendedCastElementProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedExtendedCastElementProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExtendedCastElementProto.parent)
  return parent_;
}
inline void ResolvedExtendedCastElementProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedExtendedCastElementProto.parent)
}

// optional .zetasql.TypeProto from_type = 2;
inline bool ResolvedExtendedCastElementProto::has_from_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedExtendedCastElementProto::set_has_from_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedExtendedCastElementProto::clear_has_from_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::TypeProto& ResolvedExtendedCastElementProto::_internal_from_type() const {
  return *from_type_;
}
inline const ::zetasql::TypeProto& ResolvedExtendedCastElementProto::from_type() const {
  const ::zetasql::TypeProto* p = from_type_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExtendedCastElementProto.from_type)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TypeProto*>(
      &::zetasql::_TypeProto_default_instance_);
}
inline ::zetasql::TypeProto* ResolvedExtendedCastElementProto::release_from_type() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedExtendedCastElementProto.from_type)
  clear_has_from_type();
  ::zetasql::TypeProto* temp = from_type_;
  from_type_ = NULL;
  return temp;
}
inline ::zetasql::TypeProto* ResolvedExtendedCastElementProto::mutable_from_type() {
  set_has_from_type();
  if (from_type_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaNoVirtual());
    from_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExtendedCastElementProto.from_type)
  return from_type_;
}
inline void ResolvedExtendedCastElementProto::set_allocated_from_type(::zetasql::TypeProto* from_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(from_type_);
  }
  if (from_type) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(from_type)->GetArena();
    if (message_arena != submessage_arena) {
      from_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, from_type, submessage_arena);
    }
    set_has_from_type();
  } else {
    clear_has_from_type();
  }
  from_type_ = from_type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedExtendedCastElementProto.from_type)
}

// optional .zetasql.TypeProto to_type = 3;
inline bool ResolvedExtendedCastElementProto::has_to_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedExtendedCastElementProto::set_has_to_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedExtendedCastElementProto::clear_has_to_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasql::TypeProto& ResolvedExtendedCastElementProto::_internal_to_type() const {
  return *to_type_;
}
inline const ::zetasql::TypeProto& ResolvedExtendedCastElementProto::to_type() const {
  const ::zetasql::TypeProto* p = to_type_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExtendedCastElementProto.to_type)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TypeProto*>(
      &::zetasql::_TypeProto_default_instance_);
}
inline ::zetasql::TypeProto* ResolvedExtendedCastElementProto::release_to_type() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedExtendedCastElementProto.to_type)
  clear_has_to_type();
  ::zetasql::TypeProto* temp = to_type_;
  to_type_ = NULL;
  return temp;
}
inline ::zetasql::TypeProto* ResolvedExtendedCastElementProto::mutable_to_type() {
  set_has_to_type();
  if (to_type_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaNoVirtual());
    to_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExtendedCastElementProto.to_type)
  return to_type_;
}
inline void ResolvedExtendedCastElementProto::set_allocated_to_type(::zetasql::TypeProto* to_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(to_type_);
  }
  if (to_type) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(to_type)->GetArena();
    if (message_arena != submessage_arena) {
      to_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, to_type, submessage_arena);
    }
    set_has_to_type();
  } else {
    clear_has_to_type();
  }
  to_type_ = to_type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedExtendedCastElementProto.to_type)
}

// optional .zetasql.FunctionRefProto function = 4;
inline bool ResolvedExtendedCastElementProto::has_function() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedExtendedCastElementProto::set_has_function() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedExtendedCastElementProto::clear_has_function() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::zetasql::FunctionRefProto& ResolvedExtendedCastElementProto::_internal_function() const {
  return *function_;
}
inline const ::zetasql::FunctionRefProto& ResolvedExtendedCastElementProto::function() const {
  const ::zetasql::FunctionRefProto* p = function_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExtendedCastElementProto.function)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::FunctionRefProto*>(
      &::zetasql::_FunctionRefProto_default_instance_);
}
inline ::zetasql::FunctionRefProto* ResolvedExtendedCastElementProto::release_function() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedExtendedCastElementProto.function)
  clear_has_function();
  ::zetasql::FunctionRefProto* temp = function_;
  function_ = NULL;
  return temp;
}
inline ::zetasql::FunctionRefProto* ResolvedExtendedCastElementProto::mutable_function() {
  set_has_function();
  if (function_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::FunctionRefProto>(GetArenaNoVirtual());
    function_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExtendedCastElementProto.function)
  return function_;
}
inline void ResolvedExtendedCastElementProto::set_allocated_function(::zetasql::FunctionRefProto* function) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(function_);
  }
  if (function) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      function = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, function, submessage_arena);
    }
    set_has_function();
  } else {
    clear_has_function();
  }
  function_ = function;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedExtendedCastElementProto.function)
}

// -------------------------------------------------------------------

// ResolvedExtendedCastProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedExtendedCastProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedExtendedCastProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedExtendedCastProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedExtendedCastProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedExtendedCastProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedExtendedCastProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExtendedCastProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedExtendedCastProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedExtendedCastProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedExtendedCastProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExtendedCastProto.parent)
  return parent_;
}
inline void ResolvedExtendedCastProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedExtendedCastProto.parent)
}

// repeated .zetasql.ResolvedExtendedCastElementProto element_list = 2;
inline int ResolvedExtendedCastProto::element_list_size() const {
  return element_list_.size();
}
inline void ResolvedExtendedCastProto::clear_element_list() {
  element_list_.Clear();
}
inline ::zetasql::ResolvedExtendedCastElementProto* ResolvedExtendedCastProto::mutable_element_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExtendedCastProto.element_list)
  return element_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedExtendedCastElementProto >*
ResolvedExtendedCastProto::mutable_element_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedExtendedCastProto.element_list)
  return &element_list_;
}
inline const ::zetasql::ResolvedExtendedCastElementProto& ResolvedExtendedCastProto::element_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExtendedCastProto.element_list)
  return element_list_.Get(index);
}
inline ::zetasql::ResolvedExtendedCastElementProto* ResolvedExtendedCastProto::add_element_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedExtendedCastProto.element_list)
  return element_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedExtendedCastElementProto >&
ResolvedExtendedCastProto::element_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedExtendedCastProto.element_list)
  return element_list_;
}

// -------------------------------------------------------------------

// ResolvedCastProto

// optional .zetasql.ResolvedExprProto parent = 1;
inline bool ResolvedCastProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedCastProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedCastProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedCastProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedExprProto& ResolvedCastProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedExprProto& ResolvedCastProto::parent() const {
  const ::zetasql::ResolvedExprProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCastProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedExprProto*>(
      &::zetasql::_ResolvedExprProto_default_instance_);
}
inline ::zetasql::ResolvedExprProto* ResolvedCastProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCastProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedExprProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedExprProto* ResolvedCastProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedExprProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCastProto.parent)
  return parent_;
}
inline void ResolvedCastProto::set_allocated_parent(::zetasql::ResolvedExprProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCastProto.parent)
}

// optional .zetasql.AnyResolvedExprProto expr = 2;
inline bool ResolvedCastProto::has_expr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedCastProto::set_has_expr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedCastProto::clear_has_expr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedCastProto::clear_expr() {
  if (expr_ != NULL) expr_->Clear();
  clear_has_expr();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedCastProto::_internal_expr() const {
  return *expr_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedCastProto::expr() const {
  const ::zetasql::AnyResolvedExprProto* p = expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCastProto.expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCastProto::release_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCastProto.expr)
  clear_has_expr();
  ::zetasql::AnyResolvedExprProto* temp = expr_;
  expr_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCastProto::mutable_expr() {
  set_has_expr();
  if (expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCastProto.expr)
  return expr_;
}
inline void ResolvedCastProto::set_allocated_expr(::zetasql::AnyResolvedExprProto* expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete expr_;
  }
  if (expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expr, submessage_arena);
    }
    set_has_expr();
  } else {
    clear_has_expr();
  }
  expr_ = expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCastProto.expr)
}

// optional bool return_null_on_error = 3;
inline bool ResolvedCastProto::has_return_null_on_error() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResolvedCastProto::set_has_return_null_on_error() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ResolvedCastProto::clear_has_return_null_on_error() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ResolvedCastProto::clear_return_null_on_error() {
  return_null_on_error_ = false;
  clear_has_return_null_on_error();
}
inline bool ResolvedCastProto::return_null_on_error() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCastProto.return_null_on_error)
  return return_null_on_error_;
}
inline void ResolvedCastProto::set_return_null_on_error(bool value) {
  set_has_return_null_on_error();
  return_null_on_error_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCastProto.return_null_on_error)
}

// optional .zetasql.ResolvedExtendedCastProto extended_cast = 4;
inline bool ResolvedCastProto::has_extended_cast() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedCastProto::set_has_extended_cast() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedCastProto::clear_has_extended_cast() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedCastProto::clear_extended_cast() {
  if (extended_cast_ != NULL) extended_cast_->Clear();
  clear_has_extended_cast();
}
inline const ::zetasql::ResolvedExtendedCastProto& ResolvedCastProto::_internal_extended_cast() const {
  return *extended_cast_;
}
inline const ::zetasql::ResolvedExtendedCastProto& ResolvedCastProto::extended_cast() const {
  const ::zetasql::ResolvedExtendedCastProto* p = extended_cast_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCastProto.extended_cast)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedExtendedCastProto*>(
      &::zetasql::_ResolvedExtendedCastProto_default_instance_);
}
inline ::zetasql::ResolvedExtendedCastProto* ResolvedCastProto::release_extended_cast() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCastProto.extended_cast)
  clear_has_extended_cast();
  ::zetasql::ResolvedExtendedCastProto* temp = extended_cast_;
  extended_cast_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedExtendedCastProto* ResolvedCastProto::mutable_extended_cast() {
  set_has_extended_cast();
  if (extended_cast_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedExtendedCastProto>(GetArenaNoVirtual());
    extended_cast_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCastProto.extended_cast)
  return extended_cast_;
}
inline void ResolvedCastProto::set_allocated_extended_cast(::zetasql::ResolvedExtendedCastProto* extended_cast) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete extended_cast_;
  }
  if (extended_cast) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      extended_cast = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, extended_cast, submessage_arena);
    }
    set_has_extended_cast();
  } else {
    clear_has_extended_cast();
  }
  extended_cast_ = extended_cast;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCastProto.extended_cast)
}

// optional .zetasql.AnyResolvedExprProto format = 5;
inline bool ResolvedCastProto::has_format() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedCastProto::set_has_format() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedCastProto::clear_has_format() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedCastProto::clear_format() {
  if (format_ != NULL) format_->Clear();
  clear_has_format();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedCastProto::_internal_format() const {
  return *format_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedCastProto::format() const {
  const ::zetasql::AnyResolvedExprProto* p = format_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCastProto.format)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCastProto::release_format() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCastProto.format)
  clear_has_format();
  ::zetasql::AnyResolvedExprProto* temp = format_;
  format_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCastProto::mutable_format() {
  set_has_format();
  if (format_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    format_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCastProto.format)
  return format_;
}
inline void ResolvedCastProto::set_allocated_format(::zetasql::AnyResolvedExprProto* format) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete format_;
  }
  if (format) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      format = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, format, submessage_arena);
    }
    set_has_format();
  } else {
    clear_has_format();
  }
  format_ = format;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCastProto.format)
}

// optional .zetasql.AnyResolvedExprProto time_zone = 6;
inline bool ResolvedCastProto::has_time_zone() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResolvedCastProto::set_has_time_zone() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResolvedCastProto::clear_has_time_zone() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResolvedCastProto::clear_time_zone() {
  if (time_zone_ != NULL) time_zone_->Clear();
  clear_has_time_zone();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedCastProto::_internal_time_zone() const {
  return *time_zone_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedCastProto::time_zone() const {
  const ::zetasql::AnyResolvedExprProto* p = time_zone_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCastProto.time_zone)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCastProto::release_time_zone() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCastProto.time_zone)
  clear_has_time_zone();
  ::zetasql::AnyResolvedExprProto* temp = time_zone_;
  time_zone_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCastProto::mutable_time_zone() {
  set_has_time_zone();
  if (time_zone_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    time_zone_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCastProto.time_zone)
  return time_zone_;
}
inline void ResolvedCastProto::set_allocated_time_zone(::zetasql::AnyResolvedExprProto* time_zone) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete time_zone_;
  }
  if (time_zone) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      time_zone = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time_zone, submessage_arena);
    }
    set_has_time_zone();
  } else {
    clear_has_time_zone();
  }
  time_zone_ = time_zone;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCastProto.time_zone)
}

// optional .zetasql.TypeParametersProto type_parameters = 7;
inline bool ResolvedCastProto::has_type_parameters() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResolvedCastProto::set_has_type_parameters() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResolvedCastProto::clear_has_type_parameters() {
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::zetasql::TypeParametersProto& ResolvedCastProto::_internal_type_parameters() const {
  return *type_parameters_;
}
inline const ::zetasql::TypeParametersProto& ResolvedCastProto::type_parameters() const {
  const ::zetasql::TypeParametersProto* p = type_parameters_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCastProto.type_parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TypeParametersProto*>(
      &::zetasql::_TypeParametersProto_default_instance_);
}
inline ::zetasql::TypeParametersProto* ResolvedCastProto::release_type_parameters() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCastProto.type_parameters)
  clear_has_type_parameters();
  ::zetasql::TypeParametersProto* temp = type_parameters_;
  type_parameters_ = NULL;
  return temp;
}
inline ::zetasql::TypeParametersProto* ResolvedCastProto::mutable_type_parameters() {
  set_has_type_parameters();
  if (type_parameters_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TypeParametersProto>(GetArenaNoVirtual());
    type_parameters_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCastProto.type_parameters)
  return type_parameters_;
}
inline void ResolvedCastProto::set_allocated_type_parameters(::zetasql::TypeParametersProto* type_parameters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_parameters_);
  }
  if (type_parameters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      type_parameters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type_parameters, submessage_arena);
    }
    set_has_type_parameters();
  } else {
    clear_has_type_parameters();
  }
  type_parameters_ = type_parameters;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCastProto.type_parameters)
}

// -------------------------------------------------------------------

// ResolvedMakeStructProto

// optional .zetasql.ResolvedExprProto parent = 1;
inline bool ResolvedMakeStructProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedMakeStructProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedMakeStructProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedMakeStructProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedExprProto& ResolvedMakeStructProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedExprProto& ResolvedMakeStructProto::parent() const {
  const ::zetasql::ResolvedExprProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedMakeStructProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedExprProto*>(
      &::zetasql::_ResolvedExprProto_default_instance_);
}
inline ::zetasql::ResolvedExprProto* ResolvedMakeStructProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedMakeStructProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedExprProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedExprProto* ResolvedMakeStructProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedExprProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedMakeStructProto.parent)
  return parent_;
}
inline void ResolvedMakeStructProto::set_allocated_parent(::zetasql::ResolvedExprProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedMakeStructProto.parent)
}

// repeated .zetasql.AnyResolvedExprProto field_list = 2;
inline int ResolvedMakeStructProto::field_list_size() const {
  return field_list_.size();
}
inline void ResolvedMakeStructProto::clear_field_list() {
  field_list_.Clear();
}
inline ::zetasql::AnyResolvedExprProto* ResolvedMakeStructProto::mutable_field_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedMakeStructProto.field_list)
  return field_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
ResolvedMakeStructProto::mutable_field_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedMakeStructProto.field_list)
  return &field_list_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedMakeStructProto::field_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedMakeStructProto.field_list)
  return field_list_.Get(index);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedMakeStructProto::add_field_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedMakeStructProto.field_list)
  return field_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
ResolvedMakeStructProto::field_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedMakeStructProto.field_list)
  return field_list_;
}

// -------------------------------------------------------------------

// ResolvedMakeProtoProto

// optional .zetasql.ResolvedExprProto parent = 1;
inline bool ResolvedMakeProtoProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedMakeProtoProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedMakeProtoProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedMakeProtoProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedExprProto& ResolvedMakeProtoProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedExprProto& ResolvedMakeProtoProto::parent() const {
  const ::zetasql::ResolvedExprProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedMakeProtoProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedExprProto*>(
      &::zetasql::_ResolvedExprProto_default_instance_);
}
inline ::zetasql::ResolvedExprProto* ResolvedMakeProtoProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedMakeProtoProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedExprProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedExprProto* ResolvedMakeProtoProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedExprProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedMakeProtoProto.parent)
  return parent_;
}
inline void ResolvedMakeProtoProto::set_allocated_parent(::zetasql::ResolvedExprProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedMakeProtoProto.parent)
}

// repeated .zetasql.ResolvedMakeProtoFieldProto field_list = 2;
inline int ResolvedMakeProtoProto::field_list_size() const {
  return field_list_.size();
}
inline void ResolvedMakeProtoProto::clear_field_list() {
  field_list_.Clear();
}
inline ::zetasql::ResolvedMakeProtoFieldProto* ResolvedMakeProtoProto::mutable_field_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedMakeProtoProto.field_list)
  return field_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedMakeProtoFieldProto >*
ResolvedMakeProtoProto::mutable_field_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedMakeProtoProto.field_list)
  return &field_list_;
}
inline const ::zetasql::ResolvedMakeProtoFieldProto& ResolvedMakeProtoProto::field_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedMakeProtoProto.field_list)
  return field_list_.Get(index);
}
inline ::zetasql::ResolvedMakeProtoFieldProto* ResolvedMakeProtoProto::add_field_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedMakeProtoProto.field_list)
  return field_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedMakeProtoFieldProto >&
ResolvedMakeProtoProto::field_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedMakeProtoProto.field_list)
  return field_list_;
}

// -------------------------------------------------------------------

// ResolvedMakeProtoFieldProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedMakeProtoFieldProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedMakeProtoFieldProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedMakeProtoFieldProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedMakeProtoFieldProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedMakeProtoFieldProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedMakeProtoFieldProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedMakeProtoFieldProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedMakeProtoFieldProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedMakeProtoFieldProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedMakeProtoFieldProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedMakeProtoFieldProto.parent)
  return parent_;
}
inline void ResolvedMakeProtoFieldProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedMakeProtoFieldProto.parent)
}

// optional .zetasql.FieldDescriptorRefProto field_descriptor = 2;
inline bool ResolvedMakeProtoFieldProto::has_field_descriptor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedMakeProtoFieldProto::set_has_field_descriptor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedMakeProtoFieldProto::clear_has_field_descriptor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::FieldDescriptorRefProto& ResolvedMakeProtoFieldProto::_internal_field_descriptor() const {
  return *field_descriptor_;
}
inline const ::zetasql::FieldDescriptorRefProto& ResolvedMakeProtoFieldProto::field_descriptor() const {
  const ::zetasql::FieldDescriptorRefProto* p = field_descriptor_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedMakeProtoFieldProto.field_descriptor)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::FieldDescriptorRefProto*>(
      &::zetasql::_FieldDescriptorRefProto_default_instance_);
}
inline ::zetasql::FieldDescriptorRefProto* ResolvedMakeProtoFieldProto::release_field_descriptor() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedMakeProtoFieldProto.field_descriptor)
  clear_has_field_descriptor();
  ::zetasql::FieldDescriptorRefProto* temp = field_descriptor_;
  field_descriptor_ = NULL;
  return temp;
}
inline ::zetasql::FieldDescriptorRefProto* ResolvedMakeProtoFieldProto::mutable_field_descriptor() {
  set_has_field_descriptor();
  if (field_descriptor_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::FieldDescriptorRefProto>(GetArenaNoVirtual());
    field_descriptor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedMakeProtoFieldProto.field_descriptor)
  return field_descriptor_;
}
inline void ResolvedMakeProtoFieldProto::set_allocated_field_descriptor(::zetasql::FieldDescriptorRefProto* field_descriptor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(field_descriptor_);
  }
  if (field_descriptor) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      field_descriptor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, field_descriptor, submessage_arena);
    }
    set_has_field_descriptor();
  } else {
    clear_has_field_descriptor();
  }
  field_descriptor_ = field_descriptor;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedMakeProtoFieldProto.field_descriptor)
}

// optional .zetasql.FieldFormat.Format format = 3;
inline bool ResolvedMakeProtoFieldProto::has_format() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedMakeProtoFieldProto::set_has_format() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedMakeProtoFieldProto::clear_has_format() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedMakeProtoFieldProto::clear_format() {
  format_ = 0;
  clear_has_format();
}
inline ::zetasql::FieldFormat_Format ResolvedMakeProtoFieldProto::format() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedMakeProtoFieldProto.format)
  return static_cast< ::zetasql::FieldFormat_Format >(format_);
}
inline void ResolvedMakeProtoFieldProto::set_format(::zetasql::FieldFormat_Format value) {
  assert(::zetasql::FieldFormat_Format_IsValid(value));
  set_has_format();
  format_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedMakeProtoFieldProto.format)
}

// optional .zetasql.AnyResolvedExprProto expr = 4;
inline bool ResolvedMakeProtoFieldProto::has_expr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedMakeProtoFieldProto::set_has_expr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedMakeProtoFieldProto::clear_has_expr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedMakeProtoFieldProto::clear_expr() {
  if (expr_ != NULL) expr_->Clear();
  clear_has_expr();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedMakeProtoFieldProto::_internal_expr() const {
  return *expr_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedMakeProtoFieldProto::expr() const {
  const ::zetasql::AnyResolvedExprProto* p = expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedMakeProtoFieldProto.expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedMakeProtoFieldProto::release_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedMakeProtoFieldProto.expr)
  clear_has_expr();
  ::zetasql::AnyResolvedExprProto* temp = expr_;
  expr_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedMakeProtoFieldProto::mutable_expr() {
  set_has_expr();
  if (expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedMakeProtoFieldProto.expr)
  return expr_;
}
inline void ResolvedMakeProtoFieldProto::set_allocated_expr(::zetasql::AnyResolvedExprProto* expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete expr_;
  }
  if (expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expr, submessage_arena);
    }
    set_has_expr();
  } else {
    clear_has_expr();
  }
  expr_ = expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedMakeProtoFieldProto.expr)
}

// -------------------------------------------------------------------

// ResolvedGetStructFieldProto

// optional .zetasql.ResolvedExprProto parent = 1;
inline bool ResolvedGetStructFieldProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedGetStructFieldProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedGetStructFieldProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedGetStructFieldProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedExprProto& ResolvedGetStructFieldProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedExprProto& ResolvedGetStructFieldProto::parent() const {
  const ::zetasql::ResolvedExprProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGetStructFieldProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedExprProto*>(
      &::zetasql::_ResolvedExprProto_default_instance_);
}
inline ::zetasql::ResolvedExprProto* ResolvedGetStructFieldProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedGetStructFieldProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedExprProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedExprProto* ResolvedGetStructFieldProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedExprProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedGetStructFieldProto.parent)
  return parent_;
}
inline void ResolvedGetStructFieldProto::set_allocated_parent(::zetasql::ResolvedExprProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedGetStructFieldProto.parent)
}

// optional .zetasql.AnyResolvedExprProto expr = 2;
inline bool ResolvedGetStructFieldProto::has_expr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedGetStructFieldProto::set_has_expr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedGetStructFieldProto::clear_has_expr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedGetStructFieldProto::clear_expr() {
  if (expr_ != NULL) expr_->Clear();
  clear_has_expr();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedGetStructFieldProto::_internal_expr() const {
  return *expr_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedGetStructFieldProto::expr() const {
  const ::zetasql::AnyResolvedExprProto* p = expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGetStructFieldProto.expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedGetStructFieldProto::release_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedGetStructFieldProto.expr)
  clear_has_expr();
  ::zetasql::AnyResolvedExprProto* temp = expr_;
  expr_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedGetStructFieldProto::mutable_expr() {
  set_has_expr();
  if (expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedGetStructFieldProto.expr)
  return expr_;
}
inline void ResolvedGetStructFieldProto::set_allocated_expr(::zetasql::AnyResolvedExprProto* expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete expr_;
  }
  if (expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expr, submessage_arena);
    }
    set_has_expr();
  } else {
    clear_has_expr();
  }
  expr_ = expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedGetStructFieldProto.expr)
}

// optional int64 field_idx = 3;
inline bool ResolvedGetStructFieldProto::has_field_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedGetStructFieldProto::set_has_field_idx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedGetStructFieldProto::clear_has_field_idx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedGetStructFieldProto::clear_field_idx() {
  field_idx_ = GOOGLE_LONGLONG(0);
  clear_has_field_idx();
}
inline ::google::protobuf::int64 ResolvedGetStructFieldProto::field_idx() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGetStructFieldProto.field_idx)
  return field_idx_;
}
inline void ResolvedGetStructFieldProto::set_field_idx(::google::protobuf::int64 value) {
  set_has_field_idx();
  field_idx_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedGetStructFieldProto.field_idx)
}

// -------------------------------------------------------------------

// ResolvedGetProtoFieldProto

// optional .zetasql.ResolvedExprProto parent = 1;
inline bool ResolvedGetProtoFieldProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedGetProtoFieldProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedGetProtoFieldProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedGetProtoFieldProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedExprProto& ResolvedGetProtoFieldProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedExprProto& ResolvedGetProtoFieldProto::parent() const {
  const ::zetasql::ResolvedExprProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGetProtoFieldProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedExprProto*>(
      &::zetasql::_ResolvedExprProto_default_instance_);
}
inline ::zetasql::ResolvedExprProto* ResolvedGetProtoFieldProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedGetProtoFieldProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedExprProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedExprProto* ResolvedGetProtoFieldProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedExprProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedGetProtoFieldProto.parent)
  return parent_;
}
inline void ResolvedGetProtoFieldProto::set_allocated_parent(::zetasql::ResolvedExprProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedGetProtoFieldProto.parent)
}

// optional .zetasql.AnyResolvedExprProto expr = 2;
inline bool ResolvedGetProtoFieldProto::has_expr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedGetProtoFieldProto::set_has_expr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedGetProtoFieldProto::clear_has_expr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedGetProtoFieldProto::clear_expr() {
  if (expr_ != NULL) expr_->Clear();
  clear_has_expr();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedGetProtoFieldProto::_internal_expr() const {
  return *expr_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedGetProtoFieldProto::expr() const {
  const ::zetasql::AnyResolvedExprProto* p = expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGetProtoFieldProto.expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedGetProtoFieldProto::release_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedGetProtoFieldProto.expr)
  clear_has_expr();
  ::zetasql::AnyResolvedExprProto* temp = expr_;
  expr_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedGetProtoFieldProto::mutable_expr() {
  set_has_expr();
  if (expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedGetProtoFieldProto.expr)
  return expr_;
}
inline void ResolvedGetProtoFieldProto::set_allocated_expr(::zetasql::AnyResolvedExprProto* expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete expr_;
  }
  if (expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expr, submessage_arena);
    }
    set_has_expr();
  } else {
    clear_has_expr();
  }
  expr_ = expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedGetProtoFieldProto.expr)
}

// optional .zetasql.FieldDescriptorRefProto field_descriptor = 3;
inline bool ResolvedGetProtoFieldProto::has_field_descriptor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedGetProtoFieldProto::set_has_field_descriptor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedGetProtoFieldProto::clear_has_field_descriptor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasql::FieldDescriptorRefProto& ResolvedGetProtoFieldProto::_internal_field_descriptor() const {
  return *field_descriptor_;
}
inline const ::zetasql::FieldDescriptorRefProto& ResolvedGetProtoFieldProto::field_descriptor() const {
  const ::zetasql::FieldDescriptorRefProto* p = field_descriptor_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGetProtoFieldProto.field_descriptor)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::FieldDescriptorRefProto*>(
      &::zetasql::_FieldDescriptorRefProto_default_instance_);
}
inline ::zetasql::FieldDescriptorRefProto* ResolvedGetProtoFieldProto::release_field_descriptor() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedGetProtoFieldProto.field_descriptor)
  clear_has_field_descriptor();
  ::zetasql::FieldDescriptorRefProto* temp = field_descriptor_;
  field_descriptor_ = NULL;
  return temp;
}
inline ::zetasql::FieldDescriptorRefProto* ResolvedGetProtoFieldProto::mutable_field_descriptor() {
  set_has_field_descriptor();
  if (field_descriptor_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::FieldDescriptorRefProto>(GetArenaNoVirtual());
    field_descriptor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedGetProtoFieldProto.field_descriptor)
  return field_descriptor_;
}
inline void ResolvedGetProtoFieldProto::set_allocated_field_descriptor(::zetasql::FieldDescriptorRefProto* field_descriptor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(field_descriptor_);
  }
  if (field_descriptor) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      field_descriptor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, field_descriptor, submessage_arena);
    }
    set_has_field_descriptor();
  } else {
    clear_has_field_descriptor();
  }
  field_descriptor_ = field_descriptor;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedGetProtoFieldProto.field_descriptor)
}

// optional .zetasql.ValueWithTypeProto default_value = 4;
inline bool ResolvedGetProtoFieldProto::has_default_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedGetProtoFieldProto::set_has_default_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedGetProtoFieldProto::clear_has_default_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::zetasql::ValueWithTypeProto& ResolvedGetProtoFieldProto::_internal_default_value() const {
  return *default_value_;
}
inline const ::zetasql::ValueWithTypeProto& ResolvedGetProtoFieldProto::default_value() const {
  const ::zetasql::ValueWithTypeProto* p = default_value_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGetProtoFieldProto.default_value)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ValueWithTypeProto*>(
      &::zetasql::_ValueWithTypeProto_default_instance_);
}
inline ::zetasql::ValueWithTypeProto* ResolvedGetProtoFieldProto::release_default_value() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedGetProtoFieldProto.default_value)
  clear_has_default_value();
  ::zetasql::ValueWithTypeProto* temp = default_value_;
  default_value_ = NULL;
  return temp;
}
inline ::zetasql::ValueWithTypeProto* ResolvedGetProtoFieldProto::mutable_default_value() {
  set_has_default_value();
  if (default_value_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ValueWithTypeProto>(GetArenaNoVirtual());
    default_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedGetProtoFieldProto.default_value)
  return default_value_;
}
inline void ResolvedGetProtoFieldProto::set_allocated_default_value(::zetasql::ValueWithTypeProto* default_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(default_value_);
  }
  if (default_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      default_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, default_value, submessage_arena);
    }
    set_has_default_value();
  } else {
    clear_has_default_value();
  }
  default_value_ = default_value;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedGetProtoFieldProto.default_value)
}

// optional bool get_has_bit = 5;
inline bool ResolvedGetProtoFieldProto::has_get_has_bit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResolvedGetProtoFieldProto::set_has_get_has_bit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResolvedGetProtoFieldProto::clear_has_get_has_bit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ResolvedGetProtoFieldProto::clear_get_has_bit() {
  get_has_bit_ = false;
  clear_has_get_has_bit();
}
inline bool ResolvedGetProtoFieldProto::get_has_bit() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGetProtoFieldProto.get_has_bit)
  return get_has_bit_;
}
inline void ResolvedGetProtoFieldProto::set_get_has_bit(bool value) {
  set_has_get_has_bit();
  get_has_bit_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedGetProtoFieldProto.get_has_bit)
}

// optional .zetasql.FieldFormat.Format format = 6;
inline bool ResolvedGetProtoFieldProto::has_format() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResolvedGetProtoFieldProto::set_has_format() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResolvedGetProtoFieldProto::clear_has_format() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResolvedGetProtoFieldProto::clear_format() {
  format_ = 0;
  clear_has_format();
}
inline ::zetasql::FieldFormat_Format ResolvedGetProtoFieldProto::format() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGetProtoFieldProto.format)
  return static_cast< ::zetasql::FieldFormat_Format >(format_);
}
inline void ResolvedGetProtoFieldProto::set_format(::zetasql::FieldFormat_Format value) {
  assert(::zetasql::FieldFormat_Format_IsValid(value));
  set_has_format();
  format_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedGetProtoFieldProto.format)
}

// optional bool return_default_value_when_unset = 7;
inline bool ResolvedGetProtoFieldProto::has_return_default_value_when_unset() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResolvedGetProtoFieldProto::set_has_return_default_value_when_unset() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ResolvedGetProtoFieldProto::clear_has_return_default_value_when_unset() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ResolvedGetProtoFieldProto::clear_return_default_value_when_unset() {
  return_default_value_when_unset_ = false;
  clear_has_return_default_value_when_unset();
}
inline bool ResolvedGetProtoFieldProto::return_default_value_when_unset() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGetProtoFieldProto.return_default_value_when_unset)
  return return_default_value_when_unset_;
}
inline void ResolvedGetProtoFieldProto::set_return_default_value_when_unset(bool value) {
  set_has_return_default_value_when_unset();
  return_default_value_when_unset_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedGetProtoFieldProto.return_default_value_when_unset)
}

// -------------------------------------------------------------------

// ResolvedGetJsonFieldProto

// optional .zetasql.ResolvedExprProto parent = 1;
inline bool ResolvedGetJsonFieldProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedGetJsonFieldProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedGetJsonFieldProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedGetJsonFieldProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedExprProto& ResolvedGetJsonFieldProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedExprProto& ResolvedGetJsonFieldProto::parent() const {
  const ::zetasql::ResolvedExprProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGetJsonFieldProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedExprProto*>(
      &::zetasql::_ResolvedExprProto_default_instance_);
}
inline ::zetasql::ResolvedExprProto* ResolvedGetJsonFieldProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedGetJsonFieldProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedExprProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedExprProto* ResolvedGetJsonFieldProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedExprProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedGetJsonFieldProto.parent)
  return parent_;
}
inline void ResolvedGetJsonFieldProto::set_allocated_parent(::zetasql::ResolvedExprProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedGetJsonFieldProto.parent)
}

// optional .zetasql.AnyResolvedExprProto expr = 2;
inline bool ResolvedGetJsonFieldProto::has_expr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedGetJsonFieldProto::set_has_expr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedGetJsonFieldProto::clear_has_expr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedGetJsonFieldProto::clear_expr() {
  if (expr_ != NULL) expr_->Clear();
  clear_has_expr();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedGetJsonFieldProto::_internal_expr() const {
  return *expr_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedGetJsonFieldProto::expr() const {
  const ::zetasql::AnyResolvedExprProto* p = expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGetJsonFieldProto.expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedGetJsonFieldProto::release_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedGetJsonFieldProto.expr)
  clear_has_expr();
  ::zetasql::AnyResolvedExprProto* temp = expr_;
  expr_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedGetJsonFieldProto::mutable_expr() {
  set_has_expr();
  if (expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedGetJsonFieldProto.expr)
  return expr_;
}
inline void ResolvedGetJsonFieldProto::set_allocated_expr(::zetasql::AnyResolvedExprProto* expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete expr_;
  }
  if (expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expr, submessage_arena);
    }
    set_has_expr();
  } else {
    clear_has_expr();
  }
  expr_ = expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedGetJsonFieldProto.expr)
}

// optional string field_name = 3;
inline bool ResolvedGetJsonFieldProto::has_field_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedGetJsonFieldProto::set_has_field_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedGetJsonFieldProto::clear_has_field_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedGetJsonFieldProto::clear_field_name() {
  field_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_field_name();
}
inline const ::std::string& ResolvedGetJsonFieldProto::field_name() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGetJsonFieldProto.field_name)
  return field_name_.GetNoArena();
}
inline void ResolvedGetJsonFieldProto::set_field_name(const ::std::string& value) {
  set_has_field_name();
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedGetJsonFieldProto.field_name)
}
#if LANG_CXX11
inline void ResolvedGetJsonFieldProto::set_field_name(::std::string&& value) {
  set_has_field_name();
  field_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedGetJsonFieldProto.field_name)
}
#endif
inline void ResolvedGetJsonFieldProto::set_field_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_field_name();
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedGetJsonFieldProto.field_name)
}
inline void ResolvedGetJsonFieldProto::set_field_name(const char* value, size_t size) {
  set_has_field_name();
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedGetJsonFieldProto.field_name)
}
inline ::std::string* ResolvedGetJsonFieldProto::mutable_field_name() {
  set_has_field_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedGetJsonFieldProto.field_name)
  return field_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedGetJsonFieldProto::release_field_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedGetJsonFieldProto.field_name)
  if (!has_field_name()) {
    return NULL;
  }
  clear_has_field_name();
  return field_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedGetJsonFieldProto::set_allocated_field_name(::std::string* field_name) {
  if (field_name != NULL) {
    set_has_field_name();
  } else {
    clear_has_field_name();
  }
  field_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field_name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedGetJsonFieldProto.field_name)
}

// -------------------------------------------------------------------

// ResolvedFlattenProto

// optional .zetasql.ResolvedExprProto parent = 1;
inline bool ResolvedFlattenProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedFlattenProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedFlattenProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedFlattenProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedExprProto& ResolvedFlattenProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedExprProto& ResolvedFlattenProto::parent() const {
  const ::zetasql::ResolvedExprProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFlattenProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedExprProto*>(
      &::zetasql::_ResolvedExprProto_default_instance_);
}
inline ::zetasql::ResolvedExprProto* ResolvedFlattenProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedFlattenProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedExprProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedExprProto* ResolvedFlattenProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedExprProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFlattenProto.parent)
  return parent_;
}
inline void ResolvedFlattenProto::set_allocated_parent(::zetasql::ResolvedExprProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedFlattenProto.parent)
}

// optional .zetasql.AnyResolvedExprProto expr = 2;
inline bool ResolvedFlattenProto::has_expr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedFlattenProto::set_has_expr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedFlattenProto::clear_has_expr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedFlattenProto::clear_expr() {
  if (expr_ != NULL) expr_->Clear();
  clear_has_expr();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedFlattenProto::_internal_expr() const {
  return *expr_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedFlattenProto::expr() const {
  const ::zetasql::AnyResolvedExprProto* p = expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFlattenProto.expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedFlattenProto::release_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedFlattenProto.expr)
  clear_has_expr();
  ::zetasql::AnyResolvedExprProto* temp = expr_;
  expr_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedFlattenProto::mutable_expr() {
  set_has_expr();
  if (expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFlattenProto.expr)
  return expr_;
}
inline void ResolvedFlattenProto::set_allocated_expr(::zetasql::AnyResolvedExprProto* expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete expr_;
  }
  if (expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expr, submessage_arena);
    }
    set_has_expr();
  } else {
    clear_has_expr();
  }
  expr_ = expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedFlattenProto.expr)
}

// repeated .zetasql.AnyResolvedExprProto get_field_list = 3;
inline int ResolvedFlattenProto::get_field_list_size() const {
  return get_field_list_.size();
}
inline void ResolvedFlattenProto::clear_get_field_list() {
  get_field_list_.Clear();
}
inline ::zetasql::AnyResolvedExprProto* ResolvedFlattenProto::mutable_get_field_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFlattenProto.get_field_list)
  return get_field_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
ResolvedFlattenProto::mutable_get_field_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedFlattenProto.get_field_list)
  return &get_field_list_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedFlattenProto::get_field_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFlattenProto.get_field_list)
  return get_field_list_.Get(index);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedFlattenProto::add_get_field_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedFlattenProto.get_field_list)
  return get_field_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
ResolvedFlattenProto::get_field_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedFlattenProto.get_field_list)
  return get_field_list_;
}

// -------------------------------------------------------------------

// ResolvedFlattenedArgProto

// optional .zetasql.ResolvedExprProto parent = 1;
inline bool ResolvedFlattenedArgProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedFlattenedArgProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedFlattenedArgProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedFlattenedArgProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedExprProto& ResolvedFlattenedArgProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedExprProto& ResolvedFlattenedArgProto::parent() const {
  const ::zetasql::ResolvedExprProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFlattenedArgProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedExprProto*>(
      &::zetasql::_ResolvedExprProto_default_instance_);
}
inline ::zetasql::ResolvedExprProto* ResolvedFlattenedArgProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedFlattenedArgProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedExprProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedExprProto* ResolvedFlattenedArgProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedExprProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFlattenedArgProto.parent)
  return parent_;
}
inline void ResolvedFlattenedArgProto::set_allocated_parent(::zetasql::ResolvedExprProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedFlattenedArgProto.parent)
}

// -------------------------------------------------------------------

// ResolvedReplaceFieldItemProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedReplaceFieldItemProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedReplaceFieldItemProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedReplaceFieldItemProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedReplaceFieldItemProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedReplaceFieldItemProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedReplaceFieldItemProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedReplaceFieldItemProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedReplaceFieldItemProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedReplaceFieldItemProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedReplaceFieldItemProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedReplaceFieldItemProto.parent)
  return parent_;
}
inline void ResolvedReplaceFieldItemProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedReplaceFieldItemProto.parent)
}

// optional .zetasql.AnyResolvedExprProto expr = 2;
inline bool ResolvedReplaceFieldItemProto::has_expr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedReplaceFieldItemProto::set_has_expr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedReplaceFieldItemProto::clear_has_expr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedReplaceFieldItemProto::clear_expr() {
  if (expr_ != NULL) expr_->Clear();
  clear_has_expr();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedReplaceFieldItemProto::_internal_expr() const {
  return *expr_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedReplaceFieldItemProto::expr() const {
  const ::zetasql::AnyResolvedExprProto* p = expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedReplaceFieldItemProto.expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedReplaceFieldItemProto::release_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedReplaceFieldItemProto.expr)
  clear_has_expr();
  ::zetasql::AnyResolvedExprProto* temp = expr_;
  expr_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedReplaceFieldItemProto::mutable_expr() {
  set_has_expr();
  if (expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedReplaceFieldItemProto.expr)
  return expr_;
}
inline void ResolvedReplaceFieldItemProto::set_allocated_expr(::zetasql::AnyResolvedExprProto* expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete expr_;
  }
  if (expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expr, submessage_arena);
    }
    set_has_expr();
  } else {
    clear_has_expr();
  }
  expr_ = expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedReplaceFieldItemProto.expr)
}

// repeated int64 struct_index_path = 3;
inline int ResolvedReplaceFieldItemProto::struct_index_path_size() const {
  return struct_index_path_.size();
}
inline void ResolvedReplaceFieldItemProto::clear_struct_index_path() {
  struct_index_path_.Clear();
}
inline ::google::protobuf::int64 ResolvedReplaceFieldItemProto::struct_index_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedReplaceFieldItemProto.struct_index_path)
  return struct_index_path_.Get(index);
}
inline void ResolvedReplaceFieldItemProto::set_struct_index_path(int index, ::google::protobuf::int64 value) {
  struct_index_path_.Set(index, value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedReplaceFieldItemProto.struct_index_path)
}
inline void ResolvedReplaceFieldItemProto::add_struct_index_path(::google::protobuf::int64 value) {
  struct_index_path_.Add(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedReplaceFieldItemProto.struct_index_path)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ResolvedReplaceFieldItemProto::struct_index_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedReplaceFieldItemProto.struct_index_path)
  return struct_index_path_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ResolvedReplaceFieldItemProto::mutable_struct_index_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedReplaceFieldItemProto.struct_index_path)
  return &struct_index_path_;
}

// repeated .zetasql.FieldDescriptorRefProto proto_field_path = 4;
inline int ResolvedReplaceFieldItemProto::proto_field_path_size() const {
  return proto_field_path_.size();
}
inline ::zetasql::FieldDescriptorRefProto* ResolvedReplaceFieldItemProto::mutable_proto_field_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedReplaceFieldItemProto.proto_field_path)
  return proto_field_path_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::FieldDescriptorRefProto >*
ResolvedReplaceFieldItemProto::mutable_proto_field_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedReplaceFieldItemProto.proto_field_path)
  return &proto_field_path_;
}
inline const ::zetasql::FieldDescriptorRefProto& ResolvedReplaceFieldItemProto::proto_field_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedReplaceFieldItemProto.proto_field_path)
  return proto_field_path_.Get(index);
}
inline ::zetasql::FieldDescriptorRefProto* ResolvedReplaceFieldItemProto::add_proto_field_path() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedReplaceFieldItemProto.proto_field_path)
  return proto_field_path_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::FieldDescriptorRefProto >&
ResolvedReplaceFieldItemProto::proto_field_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedReplaceFieldItemProto.proto_field_path)
  return proto_field_path_;
}

// -------------------------------------------------------------------

// ResolvedReplaceFieldProto

// optional .zetasql.ResolvedExprProto parent = 1;
inline bool ResolvedReplaceFieldProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedReplaceFieldProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedReplaceFieldProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedReplaceFieldProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedExprProto& ResolvedReplaceFieldProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedExprProto& ResolvedReplaceFieldProto::parent() const {
  const ::zetasql::ResolvedExprProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedReplaceFieldProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedExprProto*>(
      &::zetasql::_ResolvedExprProto_default_instance_);
}
inline ::zetasql::ResolvedExprProto* ResolvedReplaceFieldProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedReplaceFieldProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedExprProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedExprProto* ResolvedReplaceFieldProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedExprProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedReplaceFieldProto.parent)
  return parent_;
}
inline void ResolvedReplaceFieldProto::set_allocated_parent(::zetasql::ResolvedExprProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedReplaceFieldProto.parent)
}

// optional .zetasql.AnyResolvedExprProto expr = 2;
inline bool ResolvedReplaceFieldProto::has_expr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedReplaceFieldProto::set_has_expr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedReplaceFieldProto::clear_has_expr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedReplaceFieldProto::clear_expr() {
  if (expr_ != NULL) expr_->Clear();
  clear_has_expr();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedReplaceFieldProto::_internal_expr() const {
  return *expr_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedReplaceFieldProto::expr() const {
  const ::zetasql::AnyResolvedExprProto* p = expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedReplaceFieldProto.expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedReplaceFieldProto::release_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedReplaceFieldProto.expr)
  clear_has_expr();
  ::zetasql::AnyResolvedExprProto* temp = expr_;
  expr_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedReplaceFieldProto::mutable_expr() {
  set_has_expr();
  if (expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedReplaceFieldProto.expr)
  return expr_;
}
inline void ResolvedReplaceFieldProto::set_allocated_expr(::zetasql::AnyResolvedExprProto* expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete expr_;
  }
  if (expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expr, submessage_arena);
    }
    set_has_expr();
  } else {
    clear_has_expr();
  }
  expr_ = expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedReplaceFieldProto.expr)
}

// repeated .zetasql.ResolvedReplaceFieldItemProto replace_field_item_list = 3;
inline int ResolvedReplaceFieldProto::replace_field_item_list_size() const {
  return replace_field_item_list_.size();
}
inline void ResolvedReplaceFieldProto::clear_replace_field_item_list() {
  replace_field_item_list_.Clear();
}
inline ::zetasql::ResolvedReplaceFieldItemProto* ResolvedReplaceFieldProto::mutable_replace_field_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedReplaceFieldProto.replace_field_item_list)
  return replace_field_item_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedReplaceFieldItemProto >*
ResolvedReplaceFieldProto::mutable_replace_field_item_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedReplaceFieldProto.replace_field_item_list)
  return &replace_field_item_list_;
}
inline const ::zetasql::ResolvedReplaceFieldItemProto& ResolvedReplaceFieldProto::replace_field_item_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedReplaceFieldProto.replace_field_item_list)
  return replace_field_item_list_.Get(index);
}
inline ::zetasql::ResolvedReplaceFieldItemProto* ResolvedReplaceFieldProto::add_replace_field_item_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedReplaceFieldProto.replace_field_item_list)
  return replace_field_item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedReplaceFieldItemProto >&
ResolvedReplaceFieldProto::replace_field_item_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedReplaceFieldProto.replace_field_item_list)
  return replace_field_item_list_;
}

// -------------------------------------------------------------------

// ResolvedSubqueryExprProto

// optional .zetasql.ResolvedExprProto parent = 1;
inline bool ResolvedSubqueryExprProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedSubqueryExprProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedSubqueryExprProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedSubqueryExprProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedExprProto& ResolvedSubqueryExprProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedExprProto& ResolvedSubqueryExprProto::parent() const {
  const ::zetasql::ResolvedExprProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSubqueryExprProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedExprProto*>(
      &::zetasql::_ResolvedExprProto_default_instance_);
}
inline ::zetasql::ResolvedExprProto* ResolvedSubqueryExprProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedSubqueryExprProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedExprProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedExprProto* ResolvedSubqueryExprProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedExprProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSubqueryExprProto.parent)
  return parent_;
}
inline void ResolvedSubqueryExprProto::set_allocated_parent(::zetasql::ResolvedExprProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedSubqueryExprProto.parent)
}

// optional .zetasql.ResolvedSubqueryExprEnums.SubqueryType subquery_type = 2;
inline bool ResolvedSubqueryExprProto::has_subquery_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResolvedSubqueryExprProto::set_has_subquery_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResolvedSubqueryExprProto::clear_has_subquery_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResolvedSubqueryExprProto::clear_subquery_type() {
  subquery_type_ = 0;
  clear_has_subquery_type();
}
inline ::zetasql::ResolvedSubqueryExprEnums_SubqueryType ResolvedSubqueryExprProto::subquery_type() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSubqueryExprProto.subquery_type)
  return static_cast< ::zetasql::ResolvedSubqueryExprEnums_SubqueryType >(subquery_type_);
}
inline void ResolvedSubqueryExprProto::set_subquery_type(::zetasql::ResolvedSubqueryExprEnums_SubqueryType value) {
  assert(::zetasql::ResolvedSubqueryExprEnums_SubqueryType_IsValid(value));
  set_has_subquery_type();
  subquery_type_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedSubqueryExprProto.subquery_type)
}

// repeated .zetasql.ResolvedColumnRefProto parameter_list = 3;
inline int ResolvedSubqueryExprProto::parameter_list_size() const {
  return parameter_list_.size();
}
inline void ResolvedSubqueryExprProto::clear_parameter_list() {
  parameter_list_.Clear();
}
inline ::zetasql::ResolvedColumnRefProto* ResolvedSubqueryExprProto::mutable_parameter_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSubqueryExprProto.parameter_list)
  return parameter_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >*
ResolvedSubqueryExprProto::mutable_parameter_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedSubqueryExprProto.parameter_list)
  return &parameter_list_;
}
inline const ::zetasql::ResolvedColumnRefProto& ResolvedSubqueryExprProto::parameter_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSubqueryExprProto.parameter_list)
  return parameter_list_.Get(index);
}
inline ::zetasql::ResolvedColumnRefProto* ResolvedSubqueryExprProto::add_parameter_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedSubqueryExprProto.parameter_list)
  return parameter_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >&
ResolvedSubqueryExprProto::parameter_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedSubqueryExprProto.parameter_list)
  return parameter_list_;
}

// optional .zetasql.AnyResolvedExprProto in_expr = 4;
inline bool ResolvedSubqueryExprProto::has_in_expr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedSubqueryExprProto::set_has_in_expr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedSubqueryExprProto::clear_has_in_expr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedSubqueryExprProto::clear_in_expr() {
  if (in_expr_ != NULL) in_expr_->Clear();
  clear_has_in_expr();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedSubqueryExprProto::_internal_in_expr() const {
  return *in_expr_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedSubqueryExprProto::in_expr() const {
  const ::zetasql::AnyResolvedExprProto* p = in_expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSubqueryExprProto.in_expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedSubqueryExprProto::release_in_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedSubqueryExprProto.in_expr)
  clear_has_in_expr();
  ::zetasql::AnyResolvedExprProto* temp = in_expr_;
  in_expr_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedSubqueryExprProto::mutable_in_expr() {
  set_has_in_expr();
  if (in_expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    in_expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSubqueryExprProto.in_expr)
  return in_expr_;
}
inline void ResolvedSubqueryExprProto::set_allocated_in_expr(::zetasql::AnyResolvedExprProto* in_expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete in_expr_;
  }
  if (in_expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      in_expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, in_expr, submessage_arena);
    }
    set_has_in_expr();
  } else {
    clear_has_in_expr();
  }
  in_expr_ = in_expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedSubqueryExprProto.in_expr)
}

// optional .zetasql.ResolvedCollationProto in_collation = 7;
inline bool ResolvedSubqueryExprProto::has_in_collation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedSubqueryExprProto::set_has_in_collation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedSubqueryExprProto::clear_has_in_collation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::zetasql::ResolvedCollationProto& ResolvedSubqueryExprProto::_internal_in_collation() const {
  return *in_collation_;
}
inline const ::zetasql::ResolvedCollationProto& ResolvedSubqueryExprProto::in_collation() const {
  const ::zetasql::ResolvedCollationProto* p = in_collation_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSubqueryExprProto.in_collation)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedCollationProto*>(
      &::zetasql::_ResolvedCollationProto_default_instance_);
}
inline ::zetasql::ResolvedCollationProto* ResolvedSubqueryExprProto::release_in_collation() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedSubqueryExprProto.in_collation)
  clear_has_in_collation();
  ::zetasql::ResolvedCollationProto* temp = in_collation_;
  in_collation_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedCollationProto* ResolvedSubqueryExprProto::mutable_in_collation() {
  set_has_in_collation();
  if (in_collation_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedCollationProto>(GetArenaNoVirtual());
    in_collation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSubqueryExprProto.in_collation)
  return in_collation_;
}
inline void ResolvedSubqueryExprProto::set_allocated_in_collation(::zetasql::ResolvedCollationProto* in_collation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(in_collation_);
  }
  if (in_collation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      in_collation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, in_collation, submessage_arena);
    }
    set_has_in_collation();
  } else {
    clear_has_in_collation();
  }
  in_collation_ = in_collation;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedSubqueryExprProto.in_collation)
}

// optional .zetasql.AnyResolvedScanProto subquery = 5;
inline bool ResolvedSubqueryExprProto::has_subquery() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedSubqueryExprProto::set_has_subquery() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedSubqueryExprProto::clear_has_subquery() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedSubqueryExprProto::clear_subquery() {
  if (subquery_ != NULL) subquery_->Clear();
  clear_has_subquery();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedSubqueryExprProto::_internal_subquery() const {
  return *subquery_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedSubqueryExprProto::subquery() const {
  const ::zetasql::AnyResolvedScanProto* p = subquery_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSubqueryExprProto.subquery)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedSubqueryExprProto::release_subquery() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedSubqueryExprProto.subquery)
  clear_has_subquery();
  ::zetasql::AnyResolvedScanProto* temp = subquery_;
  subquery_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedSubqueryExprProto::mutable_subquery() {
  set_has_subquery();
  if (subquery_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    subquery_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSubqueryExprProto.subquery)
  return subquery_;
}
inline void ResolvedSubqueryExprProto::set_allocated_subquery(::zetasql::AnyResolvedScanProto* subquery) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete subquery_;
  }
  if (subquery) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      subquery = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, subquery, submessage_arena);
    }
    set_has_subquery();
  } else {
    clear_has_subquery();
  }
  subquery_ = subquery;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedSubqueryExprProto.subquery)
}

// repeated .zetasql.ResolvedOptionProto hint_list = 6;
inline int ResolvedSubqueryExprProto::hint_list_size() const {
  return hint_list_.size();
}
inline void ResolvedSubqueryExprProto::clear_hint_list() {
  hint_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedSubqueryExprProto::mutable_hint_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSubqueryExprProto.hint_list)
  return hint_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedSubqueryExprProto::mutable_hint_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedSubqueryExprProto.hint_list)
  return &hint_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedSubqueryExprProto::hint_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSubqueryExprProto.hint_list)
  return hint_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedSubqueryExprProto::add_hint_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedSubqueryExprProto.hint_list)
  return hint_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedSubqueryExprProto::hint_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedSubqueryExprProto.hint_list)
  return hint_list_;
}

// -------------------------------------------------------------------

// ResolvedLetExprProto

// optional .zetasql.ResolvedExprProto parent = 1;
inline bool ResolvedLetExprProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedLetExprProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedLetExprProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedLetExprProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedExprProto& ResolvedLetExprProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedExprProto& ResolvedLetExprProto::parent() const {
  const ::zetasql::ResolvedExprProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedLetExprProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedExprProto*>(
      &::zetasql::_ResolvedExprProto_default_instance_);
}
inline ::zetasql::ResolvedExprProto* ResolvedLetExprProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedLetExprProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedExprProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedExprProto* ResolvedLetExprProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedExprProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedLetExprProto.parent)
  return parent_;
}
inline void ResolvedLetExprProto::set_allocated_parent(::zetasql::ResolvedExprProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedLetExprProto.parent)
}

// repeated .zetasql.ResolvedComputedColumnProto assignment_list = 2;
inline int ResolvedLetExprProto::assignment_list_size() const {
  return assignment_list_.size();
}
inline void ResolvedLetExprProto::clear_assignment_list() {
  assignment_list_.Clear();
}
inline ::zetasql::ResolvedComputedColumnProto* ResolvedLetExprProto::mutable_assignment_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedLetExprProto.assignment_list)
  return assignment_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >*
ResolvedLetExprProto::mutable_assignment_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedLetExprProto.assignment_list)
  return &assignment_list_;
}
inline const ::zetasql::ResolvedComputedColumnProto& ResolvedLetExprProto::assignment_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedLetExprProto.assignment_list)
  return assignment_list_.Get(index);
}
inline ::zetasql::ResolvedComputedColumnProto* ResolvedLetExprProto::add_assignment_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedLetExprProto.assignment_list)
  return assignment_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >&
ResolvedLetExprProto::assignment_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedLetExprProto.assignment_list)
  return assignment_list_;
}

// optional .zetasql.AnyResolvedExprProto expr = 3;
inline bool ResolvedLetExprProto::has_expr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedLetExprProto::set_has_expr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedLetExprProto::clear_has_expr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedLetExprProto::clear_expr() {
  if (expr_ != NULL) expr_->Clear();
  clear_has_expr();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedLetExprProto::_internal_expr() const {
  return *expr_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedLetExprProto::expr() const {
  const ::zetasql::AnyResolvedExprProto* p = expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedLetExprProto.expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedLetExprProto::release_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedLetExprProto.expr)
  clear_has_expr();
  ::zetasql::AnyResolvedExprProto* temp = expr_;
  expr_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedLetExprProto::mutable_expr() {
  set_has_expr();
  if (expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedLetExprProto.expr)
  return expr_;
}
inline void ResolvedLetExprProto::set_allocated_expr(::zetasql::AnyResolvedExprProto* expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete expr_;
  }
  if (expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expr, submessage_arena);
    }
    set_has_expr();
  } else {
    clear_has_expr();
  }
  expr_ = expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedLetExprProto.expr)
}

// -------------------------------------------------------------------

// AnyResolvedScanProto

// optional .zetasql.ResolvedSingleRowScanProto resolved_single_row_scan_node = 19;
inline bool AnyResolvedScanProto::has_resolved_single_row_scan_node() const {
  return node_case() == kResolvedSingleRowScanNode;
}
inline void AnyResolvedScanProto::set_has_resolved_single_row_scan_node() {
  _oneof_case_[0] = kResolvedSingleRowScanNode;
}
inline void AnyResolvedScanProto::clear_resolved_single_row_scan_node() {
  if (has_resolved_single_row_scan_node()) {
    delete node_.resolved_single_row_scan_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedSingleRowScanProto& AnyResolvedScanProto::_internal_resolved_single_row_scan_node() const {
  return *node_.resolved_single_row_scan_node_;
}
inline ::zetasql::ResolvedSingleRowScanProto* AnyResolvedScanProto::release_resolved_single_row_scan_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedScanProto.resolved_single_row_scan_node)
  if (has_resolved_single_row_scan_node()) {
    clear_has_node();
      ::zetasql::ResolvedSingleRowScanProto* temp = node_.resolved_single_row_scan_node_;
    node_.resolved_single_row_scan_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedSingleRowScanProto& AnyResolvedScanProto::resolved_single_row_scan_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedScanProto.resolved_single_row_scan_node)
  return has_resolved_single_row_scan_node()
      ? *node_.resolved_single_row_scan_node_
      : *reinterpret_cast< ::zetasql::ResolvedSingleRowScanProto*>(&::zetasql::_ResolvedSingleRowScanProto_default_instance_);
}
inline ::zetasql::ResolvedSingleRowScanProto* AnyResolvedScanProto::mutable_resolved_single_row_scan_node() {
  if (!has_resolved_single_row_scan_node()) {
    clear_node();
    set_has_resolved_single_row_scan_node();
    node_.resolved_single_row_scan_node_ = CreateMaybeMessage< ::zetasql::ResolvedSingleRowScanProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedScanProto.resolved_single_row_scan_node)
  return node_.resolved_single_row_scan_node_;
}

// optional .zetasql.ResolvedTableScanProto resolved_table_scan_node = 20;
inline bool AnyResolvedScanProto::has_resolved_table_scan_node() const {
  return node_case() == kResolvedTableScanNode;
}
inline void AnyResolvedScanProto::set_has_resolved_table_scan_node() {
  _oneof_case_[0] = kResolvedTableScanNode;
}
inline void AnyResolvedScanProto::clear_resolved_table_scan_node() {
  if (has_resolved_table_scan_node()) {
    delete node_.resolved_table_scan_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedTableScanProto& AnyResolvedScanProto::_internal_resolved_table_scan_node() const {
  return *node_.resolved_table_scan_node_;
}
inline ::zetasql::ResolvedTableScanProto* AnyResolvedScanProto::release_resolved_table_scan_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedScanProto.resolved_table_scan_node)
  if (has_resolved_table_scan_node()) {
    clear_has_node();
      ::zetasql::ResolvedTableScanProto* temp = node_.resolved_table_scan_node_;
    node_.resolved_table_scan_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedTableScanProto& AnyResolvedScanProto::resolved_table_scan_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedScanProto.resolved_table_scan_node)
  return has_resolved_table_scan_node()
      ? *node_.resolved_table_scan_node_
      : *reinterpret_cast< ::zetasql::ResolvedTableScanProto*>(&::zetasql::_ResolvedTableScanProto_default_instance_);
}
inline ::zetasql::ResolvedTableScanProto* AnyResolvedScanProto::mutable_resolved_table_scan_node() {
  if (!has_resolved_table_scan_node()) {
    clear_node();
    set_has_resolved_table_scan_node();
    node_.resolved_table_scan_node_ = CreateMaybeMessage< ::zetasql::ResolvedTableScanProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedScanProto.resolved_table_scan_node)
  return node_.resolved_table_scan_node_;
}

// optional .zetasql.ResolvedJoinScanProto resolved_join_scan_node = 21;
inline bool AnyResolvedScanProto::has_resolved_join_scan_node() const {
  return node_case() == kResolvedJoinScanNode;
}
inline void AnyResolvedScanProto::set_has_resolved_join_scan_node() {
  _oneof_case_[0] = kResolvedJoinScanNode;
}
inline void AnyResolvedScanProto::clear_resolved_join_scan_node() {
  if (has_resolved_join_scan_node()) {
    delete node_.resolved_join_scan_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedJoinScanProto& AnyResolvedScanProto::_internal_resolved_join_scan_node() const {
  return *node_.resolved_join_scan_node_;
}
inline ::zetasql::ResolvedJoinScanProto* AnyResolvedScanProto::release_resolved_join_scan_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedScanProto.resolved_join_scan_node)
  if (has_resolved_join_scan_node()) {
    clear_has_node();
      ::zetasql::ResolvedJoinScanProto* temp = node_.resolved_join_scan_node_;
    node_.resolved_join_scan_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedJoinScanProto& AnyResolvedScanProto::resolved_join_scan_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedScanProto.resolved_join_scan_node)
  return has_resolved_join_scan_node()
      ? *node_.resolved_join_scan_node_
      : *reinterpret_cast< ::zetasql::ResolvedJoinScanProto*>(&::zetasql::_ResolvedJoinScanProto_default_instance_);
}
inline ::zetasql::ResolvedJoinScanProto* AnyResolvedScanProto::mutable_resolved_join_scan_node() {
  if (!has_resolved_join_scan_node()) {
    clear_node();
    set_has_resolved_join_scan_node();
    node_.resolved_join_scan_node_ = CreateMaybeMessage< ::zetasql::ResolvedJoinScanProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedScanProto.resolved_join_scan_node)
  return node_.resolved_join_scan_node_;
}

// optional .zetasql.ResolvedArrayScanProto resolved_array_scan_node = 22;
inline bool AnyResolvedScanProto::has_resolved_array_scan_node() const {
  return node_case() == kResolvedArrayScanNode;
}
inline void AnyResolvedScanProto::set_has_resolved_array_scan_node() {
  _oneof_case_[0] = kResolvedArrayScanNode;
}
inline void AnyResolvedScanProto::clear_resolved_array_scan_node() {
  if (has_resolved_array_scan_node()) {
    delete node_.resolved_array_scan_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedArrayScanProto& AnyResolvedScanProto::_internal_resolved_array_scan_node() const {
  return *node_.resolved_array_scan_node_;
}
inline ::zetasql::ResolvedArrayScanProto* AnyResolvedScanProto::release_resolved_array_scan_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedScanProto.resolved_array_scan_node)
  if (has_resolved_array_scan_node()) {
    clear_has_node();
      ::zetasql::ResolvedArrayScanProto* temp = node_.resolved_array_scan_node_;
    node_.resolved_array_scan_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedArrayScanProto& AnyResolvedScanProto::resolved_array_scan_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedScanProto.resolved_array_scan_node)
  return has_resolved_array_scan_node()
      ? *node_.resolved_array_scan_node_
      : *reinterpret_cast< ::zetasql::ResolvedArrayScanProto*>(&::zetasql::_ResolvedArrayScanProto_default_instance_);
}
inline ::zetasql::ResolvedArrayScanProto* AnyResolvedScanProto::mutable_resolved_array_scan_node() {
  if (!has_resolved_array_scan_node()) {
    clear_node();
    set_has_resolved_array_scan_node();
    node_.resolved_array_scan_node_ = CreateMaybeMessage< ::zetasql::ResolvedArrayScanProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedScanProto.resolved_array_scan_node)
  return node_.resolved_array_scan_node_;
}

// optional .zetasql.ResolvedFilterScanProto resolved_filter_scan_node = 24;
inline bool AnyResolvedScanProto::has_resolved_filter_scan_node() const {
  return node_case() == kResolvedFilterScanNode;
}
inline void AnyResolvedScanProto::set_has_resolved_filter_scan_node() {
  _oneof_case_[0] = kResolvedFilterScanNode;
}
inline void AnyResolvedScanProto::clear_resolved_filter_scan_node() {
  if (has_resolved_filter_scan_node()) {
    delete node_.resolved_filter_scan_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedFilterScanProto& AnyResolvedScanProto::_internal_resolved_filter_scan_node() const {
  return *node_.resolved_filter_scan_node_;
}
inline ::zetasql::ResolvedFilterScanProto* AnyResolvedScanProto::release_resolved_filter_scan_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedScanProto.resolved_filter_scan_node)
  if (has_resolved_filter_scan_node()) {
    clear_has_node();
      ::zetasql::ResolvedFilterScanProto* temp = node_.resolved_filter_scan_node_;
    node_.resolved_filter_scan_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedFilterScanProto& AnyResolvedScanProto::resolved_filter_scan_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedScanProto.resolved_filter_scan_node)
  return has_resolved_filter_scan_node()
      ? *node_.resolved_filter_scan_node_
      : *reinterpret_cast< ::zetasql::ResolvedFilterScanProto*>(&::zetasql::_ResolvedFilterScanProto_default_instance_);
}
inline ::zetasql::ResolvedFilterScanProto* AnyResolvedScanProto::mutable_resolved_filter_scan_node() {
  if (!has_resolved_filter_scan_node()) {
    clear_node();
    set_has_resolved_filter_scan_node();
    node_.resolved_filter_scan_node_ = CreateMaybeMessage< ::zetasql::ResolvedFilterScanProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedScanProto.resolved_filter_scan_node)
  return node_.resolved_filter_scan_node_;
}

// optional .zetasql.ResolvedSetOperationScanProto resolved_set_operation_scan_node = 26;
inline bool AnyResolvedScanProto::has_resolved_set_operation_scan_node() const {
  return node_case() == kResolvedSetOperationScanNode;
}
inline void AnyResolvedScanProto::set_has_resolved_set_operation_scan_node() {
  _oneof_case_[0] = kResolvedSetOperationScanNode;
}
inline void AnyResolvedScanProto::clear_resolved_set_operation_scan_node() {
  if (has_resolved_set_operation_scan_node()) {
    delete node_.resolved_set_operation_scan_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedSetOperationScanProto& AnyResolvedScanProto::_internal_resolved_set_operation_scan_node() const {
  return *node_.resolved_set_operation_scan_node_;
}
inline ::zetasql::ResolvedSetOperationScanProto* AnyResolvedScanProto::release_resolved_set_operation_scan_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedScanProto.resolved_set_operation_scan_node)
  if (has_resolved_set_operation_scan_node()) {
    clear_has_node();
      ::zetasql::ResolvedSetOperationScanProto* temp = node_.resolved_set_operation_scan_node_;
    node_.resolved_set_operation_scan_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedSetOperationScanProto& AnyResolvedScanProto::resolved_set_operation_scan_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedScanProto.resolved_set_operation_scan_node)
  return has_resolved_set_operation_scan_node()
      ? *node_.resolved_set_operation_scan_node_
      : *reinterpret_cast< ::zetasql::ResolvedSetOperationScanProto*>(&::zetasql::_ResolvedSetOperationScanProto_default_instance_);
}
inline ::zetasql::ResolvedSetOperationScanProto* AnyResolvedScanProto::mutable_resolved_set_operation_scan_node() {
  if (!has_resolved_set_operation_scan_node()) {
    clear_node();
    set_has_resolved_set_operation_scan_node();
    node_.resolved_set_operation_scan_node_ = CreateMaybeMessage< ::zetasql::ResolvedSetOperationScanProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedScanProto.resolved_set_operation_scan_node)
  return node_.resolved_set_operation_scan_node_;
}

// optional .zetasql.ResolvedOrderByScanProto resolved_order_by_scan_node = 27;
inline bool AnyResolvedScanProto::has_resolved_order_by_scan_node() const {
  return node_case() == kResolvedOrderByScanNode;
}
inline void AnyResolvedScanProto::set_has_resolved_order_by_scan_node() {
  _oneof_case_[0] = kResolvedOrderByScanNode;
}
inline void AnyResolvedScanProto::clear_resolved_order_by_scan_node() {
  if (has_resolved_order_by_scan_node()) {
    delete node_.resolved_order_by_scan_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedOrderByScanProto& AnyResolvedScanProto::_internal_resolved_order_by_scan_node() const {
  return *node_.resolved_order_by_scan_node_;
}
inline ::zetasql::ResolvedOrderByScanProto* AnyResolvedScanProto::release_resolved_order_by_scan_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedScanProto.resolved_order_by_scan_node)
  if (has_resolved_order_by_scan_node()) {
    clear_has_node();
      ::zetasql::ResolvedOrderByScanProto* temp = node_.resolved_order_by_scan_node_;
    node_.resolved_order_by_scan_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedOrderByScanProto& AnyResolvedScanProto::resolved_order_by_scan_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedScanProto.resolved_order_by_scan_node)
  return has_resolved_order_by_scan_node()
      ? *node_.resolved_order_by_scan_node_
      : *reinterpret_cast< ::zetasql::ResolvedOrderByScanProto*>(&::zetasql::_ResolvedOrderByScanProto_default_instance_);
}
inline ::zetasql::ResolvedOrderByScanProto* AnyResolvedScanProto::mutable_resolved_order_by_scan_node() {
  if (!has_resolved_order_by_scan_node()) {
    clear_node();
    set_has_resolved_order_by_scan_node();
    node_.resolved_order_by_scan_node_ = CreateMaybeMessage< ::zetasql::ResolvedOrderByScanProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedScanProto.resolved_order_by_scan_node)
  return node_.resolved_order_by_scan_node_;
}

// optional .zetasql.ResolvedLimitOffsetScanProto resolved_limit_offset_scan_node = 28;
inline bool AnyResolvedScanProto::has_resolved_limit_offset_scan_node() const {
  return node_case() == kResolvedLimitOffsetScanNode;
}
inline void AnyResolvedScanProto::set_has_resolved_limit_offset_scan_node() {
  _oneof_case_[0] = kResolvedLimitOffsetScanNode;
}
inline void AnyResolvedScanProto::clear_resolved_limit_offset_scan_node() {
  if (has_resolved_limit_offset_scan_node()) {
    delete node_.resolved_limit_offset_scan_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedLimitOffsetScanProto& AnyResolvedScanProto::_internal_resolved_limit_offset_scan_node() const {
  return *node_.resolved_limit_offset_scan_node_;
}
inline ::zetasql::ResolvedLimitOffsetScanProto* AnyResolvedScanProto::release_resolved_limit_offset_scan_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedScanProto.resolved_limit_offset_scan_node)
  if (has_resolved_limit_offset_scan_node()) {
    clear_has_node();
      ::zetasql::ResolvedLimitOffsetScanProto* temp = node_.resolved_limit_offset_scan_node_;
    node_.resolved_limit_offset_scan_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedLimitOffsetScanProto& AnyResolvedScanProto::resolved_limit_offset_scan_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedScanProto.resolved_limit_offset_scan_node)
  return has_resolved_limit_offset_scan_node()
      ? *node_.resolved_limit_offset_scan_node_
      : *reinterpret_cast< ::zetasql::ResolvedLimitOffsetScanProto*>(&::zetasql::_ResolvedLimitOffsetScanProto_default_instance_);
}
inline ::zetasql::ResolvedLimitOffsetScanProto* AnyResolvedScanProto::mutable_resolved_limit_offset_scan_node() {
  if (!has_resolved_limit_offset_scan_node()) {
    clear_node();
    set_has_resolved_limit_offset_scan_node();
    node_.resolved_limit_offset_scan_node_ = CreateMaybeMessage< ::zetasql::ResolvedLimitOffsetScanProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedScanProto.resolved_limit_offset_scan_node)
  return node_.resolved_limit_offset_scan_node_;
}

// optional .zetasql.ResolvedWithRefScanProto resolved_with_ref_scan_node = 29;
inline bool AnyResolvedScanProto::has_resolved_with_ref_scan_node() const {
  return node_case() == kResolvedWithRefScanNode;
}
inline void AnyResolvedScanProto::set_has_resolved_with_ref_scan_node() {
  _oneof_case_[0] = kResolvedWithRefScanNode;
}
inline void AnyResolvedScanProto::clear_resolved_with_ref_scan_node() {
  if (has_resolved_with_ref_scan_node()) {
    delete node_.resolved_with_ref_scan_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedWithRefScanProto& AnyResolvedScanProto::_internal_resolved_with_ref_scan_node() const {
  return *node_.resolved_with_ref_scan_node_;
}
inline ::zetasql::ResolvedWithRefScanProto* AnyResolvedScanProto::release_resolved_with_ref_scan_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedScanProto.resolved_with_ref_scan_node)
  if (has_resolved_with_ref_scan_node()) {
    clear_has_node();
      ::zetasql::ResolvedWithRefScanProto* temp = node_.resolved_with_ref_scan_node_;
    node_.resolved_with_ref_scan_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedWithRefScanProto& AnyResolvedScanProto::resolved_with_ref_scan_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedScanProto.resolved_with_ref_scan_node)
  return has_resolved_with_ref_scan_node()
      ? *node_.resolved_with_ref_scan_node_
      : *reinterpret_cast< ::zetasql::ResolvedWithRefScanProto*>(&::zetasql::_ResolvedWithRefScanProto_default_instance_);
}
inline ::zetasql::ResolvedWithRefScanProto* AnyResolvedScanProto::mutable_resolved_with_ref_scan_node() {
  if (!has_resolved_with_ref_scan_node()) {
    clear_node();
    set_has_resolved_with_ref_scan_node();
    node_.resolved_with_ref_scan_node_ = CreateMaybeMessage< ::zetasql::ResolvedWithRefScanProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedScanProto.resolved_with_ref_scan_node)
  return node_.resolved_with_ref_scan_node_;
}

// optional .zetasql.ResolvedAnalyticScanProto resolved_analytic_scan_node = 30;
inline bool AnyResolvedScanProto::has_resolved_analytic_scan_node() const {
  return node_case() == kResolvedAnalyticScanNode;
}
inline void AnyResolvedScanProto::set_has_resolved_analytic_scan_node() {
  _oneof_case_[0] = kResolvedAnalyticScanNode;
}
inline void AnyResolvedScanProto::clear_resolved_analytic_scan_node() {
  if (has_resolved_analytic_scan_node()) {
    delete node_.resolved_analytic_scan_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAnalyticScanProto& AnyResolvedScanProto::_internal_resolved_analytic_scan_node() const {
  return *node_.resolved_analytic_scan_node_;
}
inline ::zetasql::ResolvedAnalyticScanProto* AnyResolvedScanProto::release_resolved_analytic_scan_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedScanProto.resolved_analytic_scan_node)
  if (has_resolved_analytic_scan_node()) {
    clear_has_node();
      ::zetasql::ResolvedAnalyticScanProto* temp = node_.resolved_analytic_scan_node_;
    node_.resolved_analytic_scan_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAnalyticScanProto& AnyResolvedScanProto::resolved_analytic_scan_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedScanProto.resolved_analytic_scan_node)
  return has_resolved_analytic_scan_node()
      ? *node_.resolved_analytic_scan_node_
      : *reinterpret_cast< ::zetasql::ResolvedAnalyticScanProto*>(&::zetasql::_ResolvedAnalyticScanProto_default_instance_);
}
inline ::zetasql::ResolvedAnalyticScanProto* AnyResolvedScanProto::mutable_resolved_analytic_scan_node() {
  if (!has_resolved_analytic_scan_node()) {
    clear_node();
    set_has_resolved_analytic_scan_node();
    node_.resolved_analytic_scan_node_ = CreateMaybeMessage< ::zetasql::ResolvedAnalyticScanProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedScanProto.resolved_analytic_scan_node)
  return node_.resolved_analytic_scan_node_;
}

// optional .zetasql.ResolvedSampleScanProto resolved_sample_scan_node = 31;
inline bool AnyResolvedScanProto::has_resolved_sample_scan_node() const {
  return node_case() == kResolvedSampleScanNode;
}
inline void AnyResolvedScanProto::set_has_resolved_sample_scan_node() {
  _oneof_case_[0] = kResolvedSampleScanNode;
}
inline void AnyResolvedScanProto::clear_resolved_sample_scan_node() {
  if (has_resolved_sample_scan_node()) {
    delete node_.resolved_sample_scan_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedSampleScanProto& AnyResolvedScanProto::_internal_resolved_sample_scan_node() const {
  return *node_.resolved_sample_scan_node_;
}
inline ::zetasql::ResolvedSampleScanProto* AnyResolvedScanProto::release_resolved_sample_scan_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedScanProto.resolved_sample_scan_node)
  if (has_resolved_sample_scan_node()) {
    clear_has_node();
      ::zetasql::ResolvedSampleScanProto* temp = node_.resolved_sample_scan_node_;
    node_.resolved_sample_scan_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedSampleScanProto& AnyResolvedScanProto::resolved_sample_scan_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedScanProto.resolved_sample_scan_node)
  return has_resolved_sample_scan_node()
      ? *node_.resolved_sample_scan_node_
      : *reinterpret_cast< ::zetasql::ResolvedSampleScanProto*>(&::zetasql::_ResolvedSampleScanProto_default_instance_);
}
inline ::zetasql::ResolvedSampleScanProto* AnyResolvedScanProto::mutable_resolved_sample_scan_node() {
  if (!has_resolved_sample_scan_node()) {
    clear_node();
    set_has_resolved_sample_scan_node();
    node_.resolved_sample_scan_node_ = CreateMaybeMessage< ::zetasql::ResolvedSampleScanProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedScanProto.resolved_sample_scan_node)
  return node_.resolved_sample_scan_node_;
}

// optional .zetasql.ResolvedProjectScanProto resolved_project_scan_node = 35;
inline bool AnyResolvedScanProto::has_resolved_project_scan_node() const {
  return node_case() == kResolvedProjectScanNode;
}
inline void AnyResolvedScanProto::set_has_resolved_project_scan_node() {
  _oneof_case_[0] = kResolvedProjectScanNode;
}
inline void AnyResolvedScanProto::clear_resolved_project_scan_node() {
  if (has_resolved_project_scan_node()) {
    delete node_.resolved_project_scan_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedProjectScanProto& AnyResolvedScanProto::_internal_resolved_project_scan_node() const {
  return *node_.resolved_project_scan_node_;
}
inline ::zetasql::ResolvedProjectScanProto* AnyResolvedScanProto::release_resolved_project_scan_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedScanProto.resolved_project_scan_node)
  if (has_resolved_project_scan_node()) {
    clear_has_node();
      ::zetasql::ResolvedProjectScanProto* temp = node_.resolved_project_scan_node_;
    node_.resolved_project_scan_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedProjectScanProto& AnyResolvedScanProto::resolved_project_scan_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedScanProto.resolved_project_scan_node)
  return has_resolved_project_scan_node()
      ? *node_.resolved_project_scan_node_
      : *reinterpret_cast< ::zetasql::ResolvedProjectScanProto*>(&::zetasql::_ResolvedProjectScanProto_default_instance_);
}
inline ::zetasql::ResolvedProjectScanProto* AnyResolvedScanProto::mutable_resolved_project_scan_node() {
  if (!has_resolved_project_scan_node()) {
    clear_node();
    set_has_resolved_project_scan_node();
    node_.resolved_project_scan_node_ = CreateMaybeMessage< ::zetasql::ResolvedProjectScanProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedScanProto.resolved_project_scan_node)
  return node_.resolved_project_scan_node_;
}

// optional .zetasql.ResolvedWithScanProto resolved_with_scan_node = 51;
inline bool AnyResolvedScanProto::has_resolved_with_scan_node() const {
  return node_case() == kResolvedWithScanNode;
}
inline void AnyResolvedScanProto::set_has_resolved_with_scan_node() {
  _oneof_case_[0] = kResolvedWithScanNode;
}
inline void AnyResolvedScanProto::clear_resolved_with_scan_node() {
  if (has_resolved_with_scan_node()) {
    delete node_.resolved_with_scan_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedWithScanProto& AnyResolvedScanProto::_internal_resolved_with_scan_node() const {
  return *node_.resolved_with_scan_node_;
}
inline ::zetasql::ResolvedWithScanProto* AnyResolvedScanProto::release_resolved_with_scan_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedScanProto.resolved_with_scan_node)
  if (has_resolved_with_scan_node()) {
    clear_has_node();
      ::zetasql::ResolvedWithScanProto* temp = node_.resolved_with_scan_node_;
    node_.resolved_with_scan_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedWithScanProto& AnyResolvedScanProto::resolved_with_scan_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedScanProto.resolved_with_scan_node)
  return has_resolved_with_scan_node()
      ? *node_.resolved_with_scan_node_
      : *reinterpret_cast< ::zetasql::ResolvedWithScanProto*>(&::zetasql::_ResolvedWithScanProto_default_instance_);
}
inline ::zetasql::ResolvedWithScanProto* AnyResolvedScanProto::mutable_resolved_with_scan_node() {
  if (!has_resolved_with_scan_node()) {
    clear_node();
    set_has_resolved_with_scan_node();
    node_.resolved_with_scan_node_ = CreateMaybeMessage< ::zetasql::ResolvedWithScanProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedScanProto.resolved_with_scan_node)
  return node_.resolved_with_scan_node_;
}

// optional .zetasql.ResolvedTVFScanProto resolved_tvfscan_node = 81;
inline bool AnyResolvedScanProto::has_resolved_tvfscan_node() const {
  return node_case() == kResolvedTvfscanNode;
}
inline void AnyResolvedScanProto::set_has_resolved_tvfscan_node() {
  _oneof_case_[0] = kResolvedTvfscanNode;
}
inline void AnyResolvedScanProto::clear_resolved_tvfscan_node() {
  if (has_resolved_tvfscan_node()) {
    delete node_.resolved_tvfscan_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedTVFScanProto& AnyResolvedScanProto::_internal_resolved_tvfscan_node() const {
  return *node_.resolved_tvfscan_node_;
}
inline ::zetasql::ResolvedTVFScanProto* AnyResolvedScanProto::release_resolved_tvfscan_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedScanProto.resolved_tvfscan_node)
  if (has_resolved_tvfscan_node()) {
    clear_has_node();
      ::zetasql::ResolvedTVFScanProto* temp = node_.resolved_tvfscan_node_;
    node_.resolved_tvfscan_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedTVFScanProto& AnyResolvedScanProto::resolved_tvfscan_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedScanProto.resolved_tvfscan_node)
  return has_resolved_tvfscan_node()
      ? *node_.resolved_tvfscan_node_
      : *reinterpret_cast< ::zetasql::ResolvedTVFScanProto*>(&::zetasql::_ResolvedTVFScanProto_default_instance_);
}
inline ::zetasql::ResolvedTVFScanProto* AnyResolvedScanProto::mutable_resolved_tvfscan_node() {
  if (!has_resolved_tvfscan_node()) {
    clear_node();
    set_has_resolved_tvfscan_node();
    node_.resolved_tvfscan_node_ = CreateMaybeMessage< ::zetasql::ResolvedTVFScanProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedScanProto.resolved_tvfscan_node)
  return node_.resolved_tvfscan_node_;
}

// optional .zetasql.ResolvedRelationArgumentScanProto resolved_relation_argument_scan_node = 89;
inline bool AnyResolvedScanProto::has_resolved_relation_argument_scan_node() const {
  return node_case() == kResolvedRelationArgumentScanNode;
}
inline void AnyResolvedScanProto::set_has_resolved_relation_argument_scan_node() {
  _oneof_case_[0] = kResolvedRelationArgumentScanNode;
}
inline void AnyResolvedScanProto::clear_resolved_relation_argument_scan_node() {
  if (has_resolved_relation_argument_scan_node()) {
    delete node_.resolved_relation_argument_scan_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedRelationArgumentScanProto& AnyResolvedScanProto::_internal_resolved_relation_argument_scan_node() const {
  return *node_.resolved_relation_argument_scan_node_;
}
inline ::zetasql::ResolvedRelationArgumentScanProto* AnyResolvedScanProto::release_resolved_relation_argument_scan_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedScanProto.resolved_relation_argument_scan_node)
  if (has_resolved_relation_argument_scan_node()) {
    clear_has_node();
      ::zetasql::ResolvedRelationArgumentScanProto* temp = node_.resolved_relation_argument_scan_node_;
    node_.resolved_relation_argument_scan_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedRelationArgumentScanProto& AnyResolvedScanProto::resolved_relation_argument_scan_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedScanProto.resolved_relation_argument_scan_node)
  return has_resolved_relation_argument_scan_node()
      ? *node_.resolved_relation_argument_scan_node_
      : *reinterpret_cast< ::zetasql::ResolvedRelationArgumentScanProto*>(&::zetasql::_ResolvedRelationArgumentScanProto_default_instance_);
}
inline ::zetasql::ResolvedRelationArgumentScanProto* AnyResolvedScanProto::mutable_resolved_relation_argument_scan_node() {
  if (!has_resolved_relation_argument_scan_node()) {
    clear_node();
    set_has_resolved_relation_argument_scan_node();
    node_.resolved_relation_argument_scan_node_ = CreateMaybeMessage< ::zetasql::ResolvedRelationArgumentScanProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedScanProto.resolved_relation_argument_scan_node)
  return node_.resolved_relation_argument_scan_node_;
}

// optional .zetasql.AnyResolvedAggregateScanBaseProto resolved_aggregate_scan_base_node = 111;
inline bool AnyResolvedScanProto::has_resolved_aggregate_scan_base_node() const {
  return node_case() == kResolvedAggregateScanBaseNode;
}
inline void AnyResolvedScanProto::set_has_resolved_aggregate_scan_base_node() {
  _oneof_case_[0] = kResolvedAggregateScanBaseNode;
}
inline void AnyResolvedScanProto::clear_resolved_aggregate_scan_base_node() {
  if (has_resolved_aggregate_scan_base_node()) {
    delete node_.resolved_aggregate_scan_base_node_;
    clear_has_node();
  }
}
inline const ::zetasql::AnyResolvedAggregateScanBaseProto& AnyResolvedScanProto::_internal_resolved_aggregate_scan_base_node() const {
  return *node_.resolved_aggregate_scan_base_node_;
}
inline ::zetasql::AnyResolvedAggregateScanBaseProto* AnyResolvedScanProto::release_resolved_aggregate_scan_base_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedScanProto.resolved_aggregate_scan_base_node)
  if (has_resolved_aggregate_scan_base_node()) {
    clear_has_node();
      ::zetasql::AnyResolvedAggregateScanBaseProto* temp = node_.resolved_aggregate_scan_base_node_;
    node_.resolved_aggregate_scan_base_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::AnyResolvedAggregateScanBaseProto& AnyResolvedScanProto::resolved_aggregate_scan_base_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedScanProto.resolved_aggregate_scan_base_node)
  return has_resolved_aggregate_scan_base_node()
      ? *node_.resolved_aggregate_scan_base_node_
      : *reinterpret_cast< ::zetasql::AnyResolvedAggregateScanBaseProto*>(&::zetasql::_AnyResolvedAggregateScanBaseProto_default_instance_);
}
inline ::zetasql::AnyResolvedAggregateScanBaseProto* AnyResolvedScanProto::mutable_resolved_aggregate_scan_base_node() {
  if (!has_resolved_aggregate_scan_base_node()) {
    clear_node();
    set_has_resolved_aggregate_scan_base_node();
    node_.resolved_aggregate_scan_base_node_ = CreateMaybeMessage< ::zetasql::AnyResolvedAggregateScanBaseProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedScanProto.resolved_aggregate_scan_base_node)
  return node_.resolved_aggregate_scan_base_node_;
}

// optional .zetasql.ResolvedRecursiveRefScanProto resolved_recursive_ref_scan_node = 147;
inline bool AnyResolvedScanProto::has_resolved_recursive_ref_scan_node() const {
  return node_case() == kResolvedRecursiveRefScanNode;
}
inline void AnyResolvedScanProto::set_has_resolved_recursive_ref_scan_node() {
  _oneof_case_[0] = kResolvedRecursiveRefScanNode;
}
inline void AnyResolvedScanProto::clear_resolved_recursive_ref_scan_node() {
  if (has_resolved_recursive_ref_scan_node()) {
    delete node_.resolved_recursive_ref_scan_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedRecursiveRefScanProto& AnyResolvedScanProto::_internal_resolved_recursive_ref_scan_node() const {
  return *node_.resolved_recursive_ref_scan_node_;
}
inline ::zetasql::ResolvedRecursiveRefScanProto* AnyResolvedScanProto::release_resolved_recursive_ref_scan_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedScanProto.resolved_recursive_ref_scan_node)
  if (has_resolved_recursive_ref_scan_node()) {
    clear_has_node();
      ::zetasql::ResolvedRecursiveRefScanProto* temp = node_.resolved_recursive_ref_scan_node_;
    node_.resolved_recursive_ref_scan_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedRecursiveRefScanProto& AnyResolvedScanProto::resolved_recursive_ref_scan_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedScanProto.resolved_recursive_ref_scan_node)
  return has_resolved_recursive_ref_scan_node()
      ? *node_.resolved_recursive_ref_scan_node_
      : *reinterpret_cast< ::zetasql::ResolvedRecursiveRefScanProto*>(&::zetasql::_ResolvedRecursiveRefScanProto_default_instance_);
}
inline ::zetasql::ResolvedRecursiveRefScanProto* AnyResolvedScanProto::mutable_resolved_recursive_ref_scan_node() {
  if (!has_resolved_recursive_ref_scan_node()) {
    clear_node();
    set_has_resolved_recursive_ref_scan_node();
    node_.resolved_recursive_ref_scan_node_ = CreateMaybeMessage< ::zetasql::ResolvedRecursiveRefScanProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedScanProto.resolved_recursive_ref_scan_node)
  return node_.resolved_recursive_ref_scan_node_;
}

// optional .zetasql.ResolvedRecursiveScanProto resolved_recursive_scan_node = 148;
inline bool AnyResolvedScanProto::has_resolved_recursive_scan_node() const {
  return node_case() == kResolvedRecursiveScanNode;
}
inline void AnyResolvedScanProto::set_has_resolved_recursive_scan_node() {
  _oneof_case_[0] = kResolvedRecursiveScanNode;
}
inline void AnyResolvedScanProto::clear_resolved_recursive_scan_node() {
  if (has_resolved_recursive_scan_node()) {
    delete node_.resolved_recursive_scan_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedRecursiveScanProto& AnyResolvedScanProto::_internal_resolved_recursive_scan_node() const {
  return *node_.resolved_recursive_scan_node_;
}
inline ::zetasql::ResolvedRecursiveScanProto* AnyResolvedScanProto::release_resolved_recursive_scan_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedScanProto.resolved_recursive_scan_node)
  if (has_resolved_recursive_scan_node()) {
    clear_has_node();
      ::zetasql::ResolvedRecursiveScanProto* temp = node_.resolved_recursive_scan_node_;
    node_.resolved_recursive_scan_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedRecursiveScanProto& AnyResolvedScanProto::resolved_recursive_scan_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedScanProto.resolved_recursive_scan_node)
  return has_resolved_recursive_scan_node()
      ? *node_.resolved_recursive_scan_node_
      : *reinterpret_cast< ::zetasql::ResolvedRecursiveScanProto*>(&::zetasql::_ResolvedRecursiveScanProto_default_instance_);
}
inline ::zetasql::ResolvedRecursiveScanProto* AnyResolvedScanProto::mutable_resolved_recursive_scan_node() {
  if (!has_resolved_recursive_scan_node()) {
    clear_node();
    set_has_resolved_recursive_scan_node();
    node_.resolved_recursive_scan_node_ = CreateMaybeMessage< ::zetasql::ResolvedRecursiveScanProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedScanProto.resolved_recursive_scan_node)
  return node_.resolved_recursive_scan_node_;
}

// optional .zetasql.ResolvedPivotScanProto resolved_pivot_scan_node = 161;
inline bool AnyResolvedScanProto::has_resolved_pivot_scan_node() const {
  return node_case() == kResolvedPivotScanNode;
}
inline void AnyResolvedScanProto::set_has_resolved_pivot_scan_node() {
  _oneof_case_[0] = kResolvedPivotScanNode;
}
inline void AnyResolvedScanProto::clear_resolved_pivot_scan_node() {
  if (has_resolved_pivot_scan_node()) {
    delete node_.resolved_pivot_scan_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedPivotScanProto& AnyResolvedScanProto::_internal_resolved_pivot_scan_node() const {
  return *node_.resolved_pivot_scan_node_;
}
inline ::zetasql::ResolvedPivotScanProto* AnyResolvedScanProto::release_resolved_pivot_scan_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedScanProto.resolved_pivot_scan_node)
  if (has_resolved_pivot_scan_node()) {
    clear_has_node();
      ::zetasql::ResolvedPivotScanProto* temp = node_.resolved_pivot_scan_node_;
    node_.resolved_pivot_scan_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedPivotScanProto& AnyResolvedScanProto::resolved_pivot_scan_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedScanProto.resolved_pivot_scan_node)
  return has_resolved_pivot_scan_node()
      ? *node_.resolved_pivot_scan_node_
      : *reinterpret_cast< ::zetasql::ResolvedPivotScanProto*>(&::zetasql::_ResolvedPivotScanProto_default_instance_);
}
inline ::zetasql::ResolvedPivotScanProto* AnyResolvedScanProto::mutable_resolved_pivot_scan_node() {
  if (!has_resolved_pivot_scan_node()) {
    clear_node();
    set_has_resolved_pivot_scan_node();
    node_.resolved_pivot_scan_node_ = CreateMaybeMessage< ::zetasql::ResolvedPivotScanProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedScanProto.resolved_pivot_scan_node)
  return node_.resolved_pivot_scan_node_;
}

// optional .zetasql.ResolvedUnpivotScanProto resolved_unpivot_scan_node = 172;
inline bool AnyResolvedScanProto::has_resolved_unpivot_scan_node() const {
  return node_case() == kResolvedUnpivotScanNode;
}
inline void AnyResolvedScanProto::set_has_resolved_unpivot_scan_node() {
  _oneof_case_[0] = kResolvedUnpivotScanNode;
}
inline void AnyResolvedScanProto::clear_resolved_unpivot_scan_node() {
  if (has_resolved_unpivot_scan_node()) {
    delete node_.resolved_unpivot_scan_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedUnpivotScanProto& AnyResolvedScanProto::_internal_resolved_unpivot_scan_node() const {
  return *node_.resolved_unpivot_scan_node_;
}
inline ::zetasql::ResolvedUnpivotScanProto* AnyResolvedScanProto::release_resolved_unpivot_scan_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedScanProto.resolved_unpivot_scan_node)
  if (has_resolved_unpivot_scan_node()) {
    clear_has_node();
      ::zetasql::ResolvedUnpivotScanProto* temp = node_.resolved_unpivot_scan_node_;
    node_.resolved_unpivot_scan_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedUnpivotScanProto& AnyResolvedScanProto::resolved_unpivot_scan_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedScanProto.resolved_unpivot_scan_node)
  return has_resolved_unpivot_scan_node()
      ? *node_.resolved_unpivot_scan_node_
      : *reinterpret_cast< ::zetasql::ResolvedUnpivotScanProto*>(&::zetasql::_ResolvedUnpivotScanProto_default_instance_);
}
inline ::zetasql::ResolvedUnpivotScanProto* AnyResolvedScanProto::mutable_resolved_unpivot_scan_node() {
  if (!has_resolved_unpivot_scan_node()) {
    clear_node();
    set_has_resolved_unpivot_scan_node();
    node_.resolved_unpivot_scan_node_ = CreateMaybeMessage< ::zetasql::ResolvedUnpivotScanProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedScanProto.resolved_unpivot_scan_node)
  return node_.resolved_unpivot_scan_node_;
}

// optional .zetasql.ResolvedGroupRowsScanProto resolved_group_rows_scan_node = 176;
inline bool AnyResolvedScanProto::has_resolved_group_rows_scan_node() const {
  return node_case() == kResolvedGroupRowsScanNode;
}
inline void AnyResolvedScanProto::set_has_resolved_group_rows_scan_node() {
  _oneof_case_[0] = kResolvedGroupRowsScanNode;
}
inline void AnyResolvedScanProto::clear_resolved_group_rows_scan_node() {
  if (has_resolved_group_rows_scan_node()) {
    delete node_.resolved_group_rows_scan_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedGroupRowsScanProto& AnyResolvedScanProto::_internal_resolved_group_rows_scan_node() const {
  return *node_.resolved_group_rows_scan_node_;
}
inline ::zetasql::ResolvedGroupRowsScanProto* AnyResolvedScanProto::release_resolved_group_rows_scan_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedScanProto.resolved_group_rows_scan_node)
  if (has_resolved_group_rows_scan_node()) {
    clear_has_node();
      ::zetasql::ResolvedGroupRowsScanProto* temp = node_.resolved_group_rows_scan_node_;
    node_.resolved_group_rows_scan_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedGroupRowsScanProto& AnyResolvedScanProto::resolved_group_rows_scan_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedScanProto.resolved_group_rows_scan_node)
  return has_resolved_group_rows_scan_node()
      ? *node_.resolved_group_rows_scan_node_
      : *reinterpret_cast< ::zetasql::ResolvedGroupRowsScanProto*>(&::zetasql::_ResolvedGroupRowsScanProto_default_instance_);
}
inline ::zetasql::ResolvedGroupRowsScanProto* AnyResolvedScanProto::mutable_resolved_group_rows_scan_node() {
  if (!has_resolved_group_rows_scan_node()) {
    clear_node();
    set_has_resolved_group_rows_scan_node();
    node_.resolved_group_rows_scan_node_ = CreateMaybeMessage< ::zetasql::ResolvedGroupRowsScanProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedScanProto.resolved_group_rows_scan_node)
  return node_.resolved_group_rows_scan_node_;
}

inline bool AnyResolvedScanProto::has_node() const {
  return node_case() != NODE_NOT_SET;
}
inline void AnyResolvedScanProto::clear_has_node() {
  _oneof_case_[0] = NODE_NOT_SET;
}
inline AnyResolvedScanProto::NodeCase AnyResolvedScanProto::node_case() const {
  return AnyResolvedScanProto::NodeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResolvedScanProto

// optional .zetasql.ResolvedNodeProto parent = 1;
inline bool ResolvedScanProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedScanProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedScanProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::zetasql::ResolvedNodeProto& ResolvedScanProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedNodeProto& ResolvedScanProto::parent() const {
  const ::zetasql::ResolvedNodeProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedScanProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedNodeProto*>(
      &::zetasql::_ResolvedNodeProto_default_instance_);
}
inline ::zetasql::ResolvedNodeProto* ResolvedScanProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedScanProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedNodeProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedNodeProto* ResolvedScanProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedNodeProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedScanProto.parent)
  return parent_;
}
inline void ResolvedScanProto::set_allocated_parent(::zetasql::ResolvedNodeProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(parent_);
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedScanProto.parent)
}

// repeated .zetasql.ResolvedColumnProto column_list = 2;
inline int ResolvedScanProto::column_list_size() const {
  return column_list_.size();
}
inline ::zetasql::ResolvedColumnProto* ResolvedScanProto::mutable_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedScanProto.column_list)
  return column_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >*
ResolvedScanProto::mutable_column_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedScanProto.column_list)
  return &column_list_;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedScanProto::column_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedScanProto.column_list)
  return column_list_.Get(index);
}
inline ::zetasql::ResolvedColumnProto* ResolvedScanProto::add_column_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedScanProto.column_list)
  return column_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >&
ResolvedScanProto::column_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedScanProto.column_list)
  return column_list_;
}

// repeated .zetasql.ResolvedOptionProto hint_list = 3;
inline int ResolvedScanProto::hint_list_size() const {
  return hint_list_.size();
}
inline void ResolvedScanProto::clear_hint_list() {
  hint_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedScanProto::mutable_hint_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedScanProto.hint_list)
  return hint_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedScanProto::mutable_hint_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedScanProto.hint_list)
  return &hint_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedScanProto::hint_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedScanProto.hint_list)
  return hint_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedScanProto::add_hint_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedScanProto.hint_list)
  return hint_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedScanProto::hint_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedScanProto.hint_list)
  return hint_list_;
}

// optional bool is_ordered = 4;
inline bool ResolvedScanProto::has_is_ordered() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedScanProto::set_has_is_ordered() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedScanProto::clear_has_is_ordered() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedScanProto::clear_is_ordered() {
  is_ordered_ = false;
  clear_has_is_ordered();
}
inline bool ResolvedScanProto::is_ordered() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedScanProto.is_ordered)
  return is_ordered_;
}
inline void ResolvedScanProto::set_is_ordered(bool value) {
  set_has_is_ordered();
  is_ordered_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedScanProto.is_ordered)
}

// -------------------------------------------------------------------

// ResolvedModelProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedModelProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedModelProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedModelProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedModelProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedModelProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedModelProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedModelProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedModelProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedModelProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedModelProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedModelProto.parent)
  return parent_;
}
inline void ResolvedModelProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedModelProto.parent)
}

// optional .zetasql.ModelRefProto model = 2;
inline bool ResolvedModelProto::has_model() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedModelProto::set_has_model() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedModelProto::clear_has_model() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::ModelRefProto& ResolvedModelProto::_internal_model() const {
  return *model_;
}
inline const ::zetasql::ModelRefProto& ResolvedModelProto::model() const {
  const ::zetasql::ModelRefProto* p = model_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedModelProto.model)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ModelRefProto*>(
      &::zetasql::_ModelRefProto_default_instance_);
}
inline ::zetasql::ModelRefProto* ResolvedModelProto::release_model() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedModelProto.model)
  clear_has_model();
  ::zetasql::ModelRefProto* temp = model_;
  model_ = NULL;
  return temp;
}
inline ::zetasql::ModelRefProto* ResolvedModelProto::mutable_model() {
  set_has_model();
  if (model_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ModelRefProto>(GetArenaNoVirtual());
    model_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedModelProto.model)
  return model_;
}
inline void ResolvedModelProto::set_allocated_model(::zetasql::ModelRefProto* model) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(model_);
  }
  if (model) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      model = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    set_has_model();
  } else {
    clear_has_model();
  }
  model_ = model;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedModelProto.model)
}

// -------------------------------------------------------------------

// ResolvedConnectionProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedConnectionProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedConnectionProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedConnectionProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedConnectionProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedConnectionProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedConnectionProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedConnectionProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedConnectionProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedConnectionProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedConnectionProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedConnectionProto.parent)
  return parent_;
}
inline void ResolvedConnectionProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedConnectionProto.parent)
}

// optional .zetasql.ConnectionRefProto connection = 2;
inline bool ResolvedConnectionProto::has_connection() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedConnectionProto::set_has_connection() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedConnectionProto::clear_has_connection() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::ConnectionRefProto& ResolvedConnectionProto::_internal_connection() const {
  return *connection_;
}
inline const ::zetasql::ConnectionRefProto& ResolvedConnectionProto::connection() const {
  const ::zetasql::ConnectionRefProto* p = connection_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedConnectionProto.connection)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ConnectionRefProto*>(
      &::zetasql::_ConnectionRefProto_default_instance_);
}
inline ::zetasql::ConnectionRefProto* ResolvedConnectionProto::release_connection() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedConnectionProto.connection)
  clear_has_connection();
  ::zetasql::ConnectionRefProto* temp = connection_;
  connection_ = NULL;
  return temp;
}
inline ::zetasql::ConnectionRefProto* ResolvedConnectionProto::mutable_connection() {
  set_has_connection();
  if (connection_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ConnectionRefProto>(GetArenaNoVirtual());
    connection_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedConnectionProto.connection)
  return connection_;
}
inline void ResolvedConnectionProto::set_allocated_connection(::zetasql::ConnectionRefProto* connection) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(connection_);
  }
  if (connection) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      connection = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, connection, submessage_arena);
    }
    set_has_connection();
  } else {
    clear_has_connection();
  }
  connection_ = connection;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedConnectionProto.connection)
}

// -------------------------------------------------------------------

// ResolvedDescriptorProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedDescriptorProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedDescriptorProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedDescriptorProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedDescriptorProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedDescriptorProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedDescriptorProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDescriptorProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedDescriptorProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDescriptorProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedDescriptorProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDescriptorProto.parent)
  return parent_;
}
inline void ResolvedDescriptorProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDescriptorProto.parent)
}

// repeated .zetasql.ResolvedColumnProto descriptor_column_list = 2;
inline int ResolvedDescriptorProto::descriptor_column_list_size() const {
  return descriptor_column_list_.size();
}
inline ::zetasql::ResolvedColumnProto* ResolvedDescriptorProto::mutable_descriptor_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDescriptorProto.descriptor_column_list)
  return descriptor_column_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >*
ResolvedDescriptorProto::mutable_descriptor_column_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedDescriptorProto.descriptor_column_list)
  return &descriptor_column_list_;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedDescriptorProto::descriptor_column_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDescriptorProto.descriptor_column_list)
  return descriptor_column_list_.Get(index);
}
inline ::zetasql::ResolvedColumnProto* ResolvedDescriptorProto::add_descriptor_column_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedDescriptorProto.descriptor_column_list)
  return descriptor_column_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >&
ResolvedDescriptorProto::descriptor_column_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedDescriptorProto.descriptor_column_list)
  return descriptor_column_list_;
}

// repeated string descriptor_column_name_list = 3;
inline int ResolvedDescriptorProto::descriptor_column_name_list_size() const {
  return descriptor_column_name_list_.size();
}
inline void ResolvedDescriptorProto::clear_descriptor_column_name_list() {
  descriptor_column_name_list_.Clear();
}
inline const ::std::string& ResolvedDescriptorProto::descriptor_column_name_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDescriptorProto.descriptor_column_name_list)
  return descriptor_column_name_list_.Get(index);
}
inline ::std::string* ResolvedDescriptorProto::mutable_descriptor_column_name_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDescriptorProto.descriptor_column_name_list)
  return descriptor_column_name_list_.Mutable(index);
}
inline void ResolvedDescriptorProto::set_descriptor_column_name_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDescriptorProto.descriptor_column_name_list)
  descriptor_column_name_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedDescriptorProto::set_descriptor_column_name_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDescriptorProto.descriptor_column_name_list)
  descriptor_column_name_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedDescriptorProto::set_descriptor_column_name_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  descriptor_column_name_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedDescriptorProto.descriptor_column_name_list)
}
inline void ResolvedDescriptorProto::set_descriptor_column_name_list(int index, const char* value, size_t size) {
  descriptor_column_name_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedDescriptorProto.descriptor_column_name_list)
}
inline ::std::string* ResolvedDescriptorProto::add_descriptor_column_name_list() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedDescriptorProto.descriptor_column_name_list)
  return descriptor_column_name_list_.Add();
}
inline void ResolvedDescriptorProto::add_descriptor_column_name_list(const ::std::string& value) {
  descriptor_column_name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedDescriptorProto.descriptor_column_name_list)
}
#if LANG_CXX11
inline void ResolvedDescriptorProto::add_descriptor_column_name_list(::std::string&& value) {
  descriptor_column_name_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedDescriptorProto.descriptor_column_name_list)
}
#endif
inline void ResolvedDescriptorProto::add_descriptor_column_name_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  descriptor_column_name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedDescriptorProto.descriptor_column_name_list)
}
inline void ResolvedDescriptorProto::add_descriptor_column_name_list(const char* value, size_t size) {
  descriptor_column_name_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedDescriptorProto.descriptor_column_name_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedDescriptorProto::descriptor_column_name_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedDescriptorProto.descriptor_column_name_list)
  return descriptor_column_name_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedDescriptorProto::mutable_descriptor_column_name_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedDescriptorProto.descriptor_column_name_list)
  return &descriptor_column_name_list_;
}

// -------------------------------------------------------------------

// ResolvedSingleRowScanProto

// optional .zetasql.ResolvedScanProto parent = 1;
inline bool ResolvedSingleRowScanProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedSingleRowScanProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedSingleRowScanProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedSingleRowScanProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedScanProto& ResolvedSingleRowScanProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedScanProto& ResolvedSingleRowScanProto::parent() const {
  const ::zetasql::ResolvedScanProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSingleRowScanProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedScanProto*>(
      &::zetasql::_ResolvedScanProto_default_instance_);
}
inline ::zetasql::ResolvedScanProto* ResolvedSingleRowScanProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedSingleRowScanProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedScanProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedScanProto* ResolvedSingleRowScanProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedScanProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSingleRowScanProto.parent)
  return parent_;
}
inline void ResolvedSingleRowScanProto::set_allocated_parent(::zetasql::ResolvedScanProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedSingleRowScanProto.parent)
}

// -------------------------------------------------------------------

// ResolvedTableScanProto

// optional .zetasql.ResolvedScanProto parent = 1;
inline bool ResolvedTableScanProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedTableScanProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedTableScanProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedTableScanProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedScanProto& ResolvedTableScanProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedScanProto& ResolvedTableScanProto::parent() const {
  const ::zetasql::ResolvedScanProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedTableScanProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedScanProto*>(
      &::zetasql::_ResolvedScanProto_default_instance_);
}
inline ::zetasql::ResolvedScanProto* ResolvedTableScanProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedTableScanProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedScanProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedScanProto* ResolvedTableScanProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedScanProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedTableScanProto.parent)
  return parent_;
}
inline void ResolvedTableScanProto::set_allocated_parent(::zetasql::ResolvedScanProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedTableScanProto.parent)
}

// optional .zetasql.TableRefProto table = 2;
inline bool ResolvedTableScanProto::has_table() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedTableScanProto::set_has_table() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedTableScanProto::clear_has_table() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasql::TableRefProto& ResolvedTableScanProto::_internal_table() const {
  return *table_;
}
inline const ::zetasql::TableRefProto& ResolvedTableScanProto::table() const {
  const ::zetasql::TableRefProto* p = table_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedTableScanProto.table)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TableRefProto*>(
      &::zetasql::_TableRefProto_default_instance_);
}
inline ::zetasql::TableRefProto* ResolvedTableScanProto::release_table() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedTableScanProto.table)
  clear_has_table();
  ::zetasql::TableRefProto* temp = table_;
  table_ = NULL;
  return temp;
}
inline ::zetasql::TableRefProto* ResolvedTableScanProto::mutable_table() {
  set_has_table();
  if (table_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TableRefProto>(GetArenaNoVirtual());
    table_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedTableScanProto.table)
  return table_;
}
inline void ResolvedTableScanProto::set_allocated_table(::zetasql::TableRefProto* table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(table_);
  }
  if (table) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    set_has_table();
  } else {
    clear_has_table();
  }
  table_ = table;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedTableScanProto.table)
}

// optional .zetasql.AnyResolvedExprProto for_system_time_expr = 3;
inline bool ResolvedTableScanProto::has_for_system_time_expr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedTableScanProto::set_has_for_system_time_expr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedTableScanProto::clear_has_for_system_time_expr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedTableScanProto::clear_for_system_time_expr() {
  if (for_system_time_expr_ != NULL) for_system_time_expr_->Clear();
  clear_has_for_system_time_expr();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedTableScanProto::_internal_for_system_time_expr() const {
  return *for_system_time_expr_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedTableScanProto::for_system_time_expr() const {
  const ::zetasql::AnyResolvedExprProto* p = for_system_time_expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedTableScanProto.for_system_time_expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedTableScanProto::release_for_system_time_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedTableScanProto.for_system_time_expr)
  clear_has_for_system_time_expr();
  ::zetasql::AnyResolvedExprProto* temp = for_system_time_expr_;
  for_system_time_expr_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedTableScanProto::mutable_for_system_time_expr() {
  set_has_for_system_time_expr();
  if (for_system_time_expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    for_system_time_expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedTableScanProto.for_system_time_expr)
  return for_system_time_expr_;
}
inline void ResolvedTableScanProto::set_allocated_for_system_time_expr(::zetasql::AnyResolvedExprProto* for_system_time_expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete for_system_time_expr_;
  }
  if (for_system_time_expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      for_system_time_expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, for_system_time_expr, submessage_arena);
    }
    set_has_for_system_time_expr();
  } else {
    clear_has_for_system_time_expr();
  }
  for_system_time_expr_ = for_system_time_expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedTableScanProto.for_system_time_expr)
}

// repeated int64 column_index_list = 4;
inline int ResolvedTableScanProto::column_index_list_size() const {
  return column_index_list_.size();
}
inline void ResolvedTableScanProto::clear_column_index_list() {
  column_index_list_.Clear();
}
inline ::google::protobuf::int64 ResolvedTableScanProto::column_index_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedTableScanProto.column_index_list)
  return column_index_list_.Get(index);
}
inline void ResolvedTableScanProto::set_column_index_list(int index, ::google::protobuf::int64 value) {
  column_index_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedTableScanProto.column_index_list)
}
inline void ResolvedTableScanProto::add_column_index_list(::google::protobuf::int64 value) {
  column_index_list_.Add(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedTableScanProto.column_index_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ResolvedTableScanProto::column_index_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedTableScanProto.column_index_list)
  return column_index_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ResolvedTableScanProto::mutable_column_index_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedTableScanProto.column_index_list)
  return &column_index_list_;
}

// optional string alias = 5;
inline bool ResolvedTableScanProto::has_alias() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedTableScanProto::set_has_alias() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedTableScanProto::clear_has_alias() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedTableScanProto::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
inline const ::std::string& ResolvedTableScanProto::alias() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedTableScanProto.alias)
  return alias_.GetNoArena();
}
inline void ResolvedTableScanProto::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedTableScanProto.alias)
}
#if LANG_CXX11
inline void ResolvedTableScanProto::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedTableScanProto.alias)
}
#endif
inline void ResolvedTableScanProto::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedTableScanProto.alias)
}
inline void ResolvedTableScanProto::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedTableScanProto.alias)
}
inline ::std::string* ResolvedTableScanProto::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedTableScanProto.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedTableScanProto::release_alias() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedTableScanProto.alias)
  if (!has_alias()) {
    return NULL;
  }
  clear_has_alias();
  return alias_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedTableScanProto::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedTableScanProto.alias)
}

// -------------------------------------------------------------------

// ResolvedJoinScanProto

// optional .zetasql.ResolvedScanProto parent = 1;
inline bool ResolvedJoinScanProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedJoinScanProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedJoinScanProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedJoinScanProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedScanProto& ResolvedJoinScanProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedScanProto& ResolvedJoinScanProto::parent() const {
  const ::zetasql::ResolvedScanProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedJoinScanProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedScanProto*>(
      &::zetasql::_ResolvedScanProto_default_instance_);
}
inline ::zetasql::ResolvedScanProto* ResolvedJoinScanProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedJoinScanProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedScanProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedScanProto* ResolvedJoinScanProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedScanProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedJoinScanProto.parent)
  return parent_;
}
inline void ResolvedJoinScanProto::set_allocated_parent(::zetasql::ResolvedScanProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedJoinScanProto.parent)
}

// optional .zetasql.ResolvedJoinScanEnums.JoinType join_type = 2;
inline bool ResolvedJoinScanProto::has_join_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResolvedJoinScanProto::set_has_join_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResolvedJoinScanProto::clear_has_join_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResolvedJoinScanProto::clear_join_type() {
  join_type_ = 0;
  clear_has_join_type();
}
inline ::zetasql::ResolvedJoinScanEnums_JoinType ResolvedJoinScanProto::join_type() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedJoinScanProto.join_type)
  return static_cast< ::zetasql::ResolvedJoinScanEnums_JoinType >(join_type_);
}
inline void ResolvedJoinScanProto::set_join_type(::zetasql::ResolvedJoinScanEnums_JoinType value) {
  assert(::zetasql::ResolvedJoinScanEnums_JoinType_IsValid(value));
  set_has_join_type();
  join_type_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedJoinScanProto.join_type)
}

// optional .zetasql.AnyResolvedScanProto left_scan = 3;
inline bool ResolvedJoinScanProto::has_left_scan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedJoinScanProto::set_has_left_scan() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedJoinScanProto::clear_has_left_scan() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedJoinScanProto::clear_left_scan() {
  if (left_scan_ != NULL) left_scan_->Clear();
  clear_has_left_scan();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedJoinScanProto::_internal_left_scan() const {
  return *left_scan_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedJoinScanProto::left_scan() const {
  const ::zetasql::AnyResolvedScanProto* p = left_scan_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedJoinScanProto.left_scan)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedJoinScanProto::release_left_scan() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedJoinScanProto.left_scan)
  clear_has_left_scan();
  ::zetasql::AnyResolvedScanProto* temp = left_scan_;
  left_scan_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedJoinScanProto::mutable_left_scan() {
  set_has_left_scan();
  if (left_scan_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    left_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedJoinScanProto.left_scan)
  return left_scan_;
}
inline void ResolvedJoinScanProto::set_allocated_left_scan(::zetasql::AnyResolvedScanProto* left_scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete left_scan_;
  }
  if (left_scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      left_scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, left_scan, submessage_arena);
    }
    set_has_left_scan();
  } else {
    clear_has_left_scan();
  }
  left_scan_ = left_scan;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedJoinScanProto.left_scan)
}

// optional .zetasql.AnyResolvedScanProto right_scan = 4;
inline bool ResolvedJoinScanProto::has_right_scan() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedJoinScanProto::set_has_right_scan() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedJoinScanProto::clear_has_right_scan() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedJoinScanProto::clear_right_scan() {
  if (right_scan_ != NULL) right_scan_->Clear();
  clear_has_right_scan();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedJoinScanProto::_internal_right_scan() const {
  return *right_scan_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedJoinScanProto::right_scan() const {
  const ::zetasql::AnyResolvedScanProto* p = right_scan_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedJoinScanProto.right_scan)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedJoinScanProto::release_right_scan() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedJoinScanProto.right_scan)
  clear_has_right_scan();
  ::zetasql::AnyResolvedScanProto* temp = right_scan_;
  right_scan_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedJoinScanProto::mutable_right_scan() {
  set_has_right_scan();
  if (right_scan_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    right_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedJoinScanProto.right_scan)
  return right_scan_;
}
inline void ResolvedJoinScanProto::set_allocated_right_scan(::zetasql::AnyResolvedScanProto* right_scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete right_scan_;
  }
  if (right_scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      right_scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, right_scan, submessage_arena);
    }
    set_has_right_scan();
  } else {
    clear_has_right_scan();
  }
  right_scan_ = right_scan;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedJoinScanProto.right_scan)
}

// optional .zetasql.AnyResolvedExprProto join_expr = 5;
inline bool ResolvedJoinScanProto::has_join_expr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedJoinScanProto::set_has_join_expr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedJoinScanProto::clear_has_join_expr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedJoinScanProto::clear_join_expr() {
  if (join_expr_ != NULL) join_expr_->Clear();
  clear_has_join_expr();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedJoinScanProto::_internal_join_expr() const {
  return *join_expr_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedJoinScanProto::join_expr() const {
  const ::zetasql::AnyResolvedExprProto* p = join_expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedJoinScanProto.join_expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedJoinScanProto::release_join_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedJoinScanProto.join_expr)
  clear_has_join_expr();
  ::zetasql::AnyResolvedExprProto* temp = join_expr_;
  join_expr_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedJoinScanProto::mutable_join_expr() {
  set_has_join_expr();
  if (join_expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    join_expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedJoinScanProto.join_expr)
  return join_expr_;
}
inline void ResolvedJoinScanProto::set_allocated_join_expr(::zetasql::AnyResolvedExprProto* join_expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete join_expr_;
  }
  if (join_expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      join_expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, join_expr, submessage_arena);
    }
    set_has_join_expr();
  } else {
    clear_has_join_expr();
  }
  join_expr_ = join_expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedJoinScanProto.join_expr)
}

// -------------------------------------------------------------------

// ResolvedArrayScanProto

// optional .zetasql.ResolvedScanProto parent = 1;
inline bool ResolvedArrayScanProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedArrayScanProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedArrayScanProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedArrayScanProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedScanProto& ResolvedArrayScanProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedScanProto& ResolvedArrayScanProto::parent() const {
  const ::zetasql::ResolvedScanProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedArrayScanProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedScanProto*>(
      &::zetasql::_ResolvedScanProto_default_instance_);
}
inline ::zetasql::ResolvedScanProto* ResolvedArrayScanProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedArrayScanProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedScanProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedScanProto* ResolvedArrayScanProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedScanProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedArrayScanProto.parent)
  return parent_;
}
inline void ResolvedArrayScanProto::set_allocated_parent(::zetasql::ResolvedScanProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedArrayScanProto.parent)
}

// optional .zetasql.AnyResolvedScanProto input_scan = 2;
inline bool ResolvedArrayScanProto::has_input_scan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedArrayScanProto::set_has_input_scan() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedArrayScanProto::clear_has_input_scan() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedArrayScanProto::clear_input_scan() {
  if (input_scan_ != NULL) input_scan_->Clear();
  clear_has_input_scan();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedArrayScanProto::_internal_input_scan() const {
  return *input_scan_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedArrayScanProto::input_scan() const {
  const ::zetasql::AnyResolvedScanProto* p = input_scan_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedArrayScanProto.input_scan)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedArrayScanProto::release_input_scan() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedArrayScanProto.input_scan)
  clear_has_input_scan();
  ::zetasql::AnyResolvedScanProto* temp = input_scan_;
  input_scan_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedArrayScanProto::mutable_input_scan() {
  set_has_input_scan();
  if (input_scan_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    input_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedArrayScanProto.input_scan)
  return input_scan_;
}
inline void ResolvedArrayScanProto::set_allocated_input_scan(::zetasql::AnyResolvedScanProto* input_scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete input_scan_;
  }
  if (input_scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      input_scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input_scan, submessage_arena);
    }
    set_has_input_scan();
  } else {
    clear_has_input_scan();
  }
  input_scan_ = input_scan;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedArrayScanProto.input_scan)
}

// optional .zetasql.AnyResolvedExprProto array_expr = 3;
inline bool ResolvedArrayScanProto::has_array_expr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedArrayScanProto::set_has_array_expr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedArrayScanProto::clear_has_array_expr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedArrayScanProto::clear_array_expr() {
  if (array_expr_ != NULL) array_expr_->Clear();
  clear_has_array_expr();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedArrayScanProto::_internal_array_expr() const {
  return *array_expr_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedArrayScanProto::array_expr() const {
  const ::zetasql::AnyResolvedExprProto* p = array_expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedArrayScanProto.array_expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedArrayScanProto::release_array_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedArrayScanProto.array_expr)
  clear_has_array_expr();
  ::zetasql::AnyResolvedExprProto* temp = array_expr_;
  array_expr_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedArrayScanProto::mutable_array_expr() {
  set_has_array_expr();
  if (array_expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    array_expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedArrayScanProto.array_expr)
  return array_expr_;
}
inline void ResolvedArrayScanProto::set_allocated_array_expr(::zetasql::AnyResolvedExprProto* array_expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete array_expr_;
  }
  if (array_expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      array_expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, array_expr, submessage_arena);
    }
    set_has_array_expr();
  } else {
    clear_has_array_expr();
  }
  array_expr_ = array_expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedArrayScanProto.array_expr)
}

// optional .zetasql.ResolvedColumnProto element_column = 4;
inline bool ResolvedArrayScanProto::has_element_column() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedArrayScanProto::set_has_element_column() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedArrayScanProto::clear_has_element_column() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedArrayScanProto::_internal_element_column() const {
  return *element_column_;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedArrayScanProto::element_column() const {
  const ::zetasql::ResolvedColumnProto* p = element_column_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedArrayScanProto.element_column)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedColumnProto*>(
      &::zetasql::_ResolvedColumnProto_default_instance_);
}
inline ::zetasql::ResolvedColumnProto* ResolvedArrayScanProto::release_element_column() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedArrayScanProto.element_column)
  clear_has_element_column();
  ::zetasql::ResolvedColumnProto* temp = element_column_;
  element_column_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedColumnProto* ResolvedArrayScanProto::mutable_element_column() {
  set_has_element_column();
  if (element_column_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedColumnProto>(GetArenaNoVirtual());
    element_column_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedArrayScanProto.element_column)
  return element_column_;
}
inline void ResolvedArrayScanProto::set_allocated_element_column(::zetasql::ResolvedColumnProto* element_column) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(element_column_);
  }
  if (element_column) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      element_column = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, element_column, submessage_arena);
    }
    set_has_element_column();
  } else {
    clear_has_element_column();
  }
  element_column_ = element_column;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedArrayScanProto.element_column)
}

// optional .zetasql.ResolvedColumnHolderProto array_offset_column = 5;
inline bool ResolvedArrayScanProto::has_array_offset_column() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResolvedArrayScanProto::set_has_array_offset_column() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResolvedArrayScanProto::clear_has_array_offset_column() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResolvedArrayScanProto::clear_array_offset_column() {
  if (array_offset_column_ != NULL) array_offset_column_->Clear();
  clear_has_array_offset_column();
}
inline const ::zetasql::ResolvedColumnHolderProto& ResolvedArrayScanProto::_internal_array_offset_column() const {
  return *array_offset_column_;
}
inline const ::zetasql::ResolvedColumnHolderProto& ResolvedArrayScanProto::array_offset_column() const {
  const ::zetasql::ResolvedColumnHolderProto* p = array_offset_column_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedArrayScanProto.array_offset_column)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedColumnHolderProto*>(
      &::zetasql::_ResolvedColumnHolderProto_default_instance_);
}
inline ::zetasql::ResolvedColumnHolderProto* ResolvedArrayScanProto::release_array_offset_column() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedArrayScanProto.array_offset_column)
  clear_has_array_offset_column();
  ::zetasql::ResolvedColumnHolderProto* temp = array_offset_column_;
  array_offset_column_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedColumnHolderProto* ResolvedArrayScanProto::mutable_array_offset_column() {
  set_has_array_offset_column();
  if (array_offset_column_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedColumnHolderProto>(GetArenaNoVirtual());
    array_offset_column_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedArrayScanProto.array_offset_column)
  return array_offset_column_;
}
inline void ResolvedArrayScanProto::set_allocated_array_offset_column(::zetasql::ResolvedColumnHolderProto* array_offset_column) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete array_offset_column_;
  }
  if (array_offset_column) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      array_offset_column = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, array_offset_column, submessage_arena);
    }
    set_has_array_offset_column();
  } else {
    clear_has_array_offset_column();
  }
  array_offset_column_ = array_offset_column;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedArrayScanProto.array_offset_column)
}

// optional .zetasql.AnyResolvedExprProto join_expr = 6;
inline bool ResolvedArrayScanProto::has_join_expr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResolvedArrayScanProto::set_has_join_expr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResolvedArrayScanProto::clear_has_join_expr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ResolvedArrayScanProto::clear_join_expr() {
  if (join_expr_ != NULL) join_expr_->Clear();
  clear_has_join_expr();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedArrayScanProto::_internal_join_expr() const {
  return *join_expr_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedArrayScanProto::join_expr() const {
  const ::zetasql::AnyResolvedExprProto* p = join_expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedArrayScanProto.join_expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedArrayScanProto::release_join_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedArrayScanProto.join_expr)
  clear_has_join_expr();
  ::zetasql::AnyResolvedExprProto* temp = join_expr_;
  join_expr_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedArrayScanProto::mutable_join_expr() {
  set_has_join_expr();
  if (join_expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    join_expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedArrayScanProto.join_expr)
  return join_expr_;
}
inline void ResolvedArrayScanProto::set_allocated_join_expr(::zetasql::AnyResolvedExprProto* join_expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete join_expr_;
  }
  if (join_expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      join_expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, join_expr, submessage_arena);
    }
    set_has_join_expr();
  } else {
    clear_has_join_expr();
  }
  join_expr_ = join_expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedArrayScanProto.join_expr)
}

// optional bool is_outer = 7;
inline bool ResolvedArrayScanProto::has_is_outer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResolvedArrayScanProto::set_has_is_outer() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ResolvedArrayScanProto::clear_has_is_outer() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ResolvedArrayScanProto::clear_is_outer() {
  is_outer_ = false;
  clear_has_is_outer();
}
inline bool ResolvedArrayScanProto::is_outer() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedArrayScanProto.is_outer)
  return is_outer_;
}
inline void ResolvedArrayScanProto::set_is_outer(bool value) {
  set_has_is_outer();
  is_outer_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedArrayScanProto.is_outer)
}

// -------------------------------------------------------------------

// ResolvedColumnHolderProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedColumnHolderProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedColumnHolderProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedColumnHolderProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedColumnHolderProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedColumnHolderProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedColumnHolderProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedColumnHolderProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedColumnHolderProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedColumnHolderProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedColumnHolderProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedColumnHolderProto.parent)
  return parent_;
}
inline void ResolvedColumnHolderProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedColumnHolderProto.parent)
}

// optional .zetasql.ResolvedColumnProto column = 2;
inline bool ResolvedColumnHolderProto::has_column() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedColumnHolderProto::set_has_column() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedColumnHolderProto::clear_has_column() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedColumnHolderProto::_internal_column() const {
  return *column_;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedColumnHolderProto::column() const {
  const ::zetasql::ResolvedColumnProto* p = column_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedColumnHolderProto.column)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedColumnProto*>(
      &::zetasql::_ResolvedColumnProto_default_instance_);
}
inline ::zetasql::ResolvedColumnProto* ResolvedColumnHolderProto::release_column() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedColumnHolderProto.column)
  clear_has_column();
  ::zetasql::ResolvedColumnProto* temp = column_;
  column_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedColumnProto* ResolvedColumnHolderProto::mutable_column() {
  set_has_column();
  if (column_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedColumnProto>(GetArenaNoVirtual());
    column_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedColumnHolderProto.column)
  return column_;
}
inline void ResolvedColumnHolderProto::set_allocated_column(::zetasql::ResolvedColumnProto* column) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(column_);
  }
  if (column) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      column = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, column, submessage_arena);
    }
    set_has_column();
  } else {
    clear_has_column();
  }
  column_ = column;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedColumnHolderProto.column)
}

// -------------------------------------------------------------------

// ResolvedFilterScanProto

// optional .zetasql.ResolvedScanProto parent = 1;
inline bool ResolvedFilterScanProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedFilterScanProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedFilterScanProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedFilterScanProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedScanProto& ResolvedFilterScanProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedScanProto& ResolvedFilterScanProto::parent() const {
  const ::zetasql::ResolvedScanProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFilterScanProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedScanProto*>(
      &::zetasql::_ResolvedScanProto_default_instance_);
}
inline ::zetasql::ResolvedScanProto* ResolvedFilterScanProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedFilterScanProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedScanProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedScanProto* ResolvedFilterScanProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedScanProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFilterScanProto.parent)
  return parent_;
}
inline void ResolvedFilterScanProto::set_allocated_parent(::zetasql::ResolvedScanProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedFilterScanProto.parent)
}

// optional .zetasql.AnyResolvedScanProto input_scan = 2;
inline bool ResolvedFilterScanProto::has_input_scan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedFilterScanProto::set_has_input_scan() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedFilterScanProto::clear_has_input_scan() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedFilterScanProto::clear_input_scan() {
  if (input_scan_ != NULL) input_scan_->Clear();
  clear_has_input_scan();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedFilterScanProto::_internal_input_scan() const {
  return *input_scan_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedFilterScanProto::input_scan() const {
  const ::zetasql::AnyResolvedScanProto* p = input_scan_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFilterScanProto.input_scan)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedFilterScanProto::release_input_scan() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedFilterScanProto.input_scan)
  clear_has_input_scan();
  ::zetasql::AnyResolvedScanProto* temp = input_scan_;
  input_scan_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedFilterScanProto::mutable_input_scan() {
  set_has_input_scan();
  if (input_scan_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    input_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFilterScanProto.input_scan)
  return input_scan_;
}
inline void ResolvedFilterScanProto::set_allocated_input_scan(::zetasql::AnyResolvedScanProto* input_scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete input_scan_;
  }
  if (input_scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      input_scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input_scan, submessage_arena);
    }
    set_has_input_scan();
  } else {
    clear_has_input_scan();
  }
  input_scan_ = input_scan;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedFilterScanProto.input_scan)
}

// optional .zetasql.AnyResolvedExprProto filter_expr = 3;
inline bool ResolvedFilterScanProto::has_filter_expr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedFilterScanProto::set_has_filter_expr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedFilterScanProto::clear_has_filter_expr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedFilterScanProto::clear_filter_expr() {
  if (filter_expr_ != NULL) filter_expr_->Clear();
  clear_has_filter_expr();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedFilterScanProto::_internal_filter_expr() const {
  return *filter_expr_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedFilterScanProto::filter_expr() const {
  const ::zetasql::AnyResolvedExprProto* p = filter_expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFilterScanProto.filter_expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedFilterScanProto::release_filter_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedFilterScanProto.filter_expr)
  clear_has_filter_expr();
  ::zetasql::AnyResolvedExprProto* temp = filter_expr_;
  filter_expr_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedFilterScanProto::mutable_filter_expr() {
  set_has_filter_expr();
  if (filter_expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    filter_expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFilterScanProto.filter_expr)
  return filter_expr_;
}
inline void ResolvedFilterScanProto::set_allocated_filter_expr(::zetasql::AnyResolvedExprProto* filter_expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete filter_expr_;
  }
  if (filter_expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      filter_expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, filter_expr, submessage_arena);
    }
    set_has_filter_expr();
  } else {
    clear_has_filter_expr();
  }
  filter_expr_ = filter_expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedFilterScanProto.filter_expr)
}

// -------------------------------------------------------------------

// ResolvedGroupingSetProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedGroupingSetProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedGroupingSetProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedGroupingSetProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedGroupingSetProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedGroupingSetProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedGroupingSetProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGroupingSetProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedGroupingSetProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedGroupingSetProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedGroupingSetProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedGroupingSetProto.parent)
  return parent_;
}
inline void ResolvedGroupingSetProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedGroupingSetProto.parent)
}

// repeated .zetasql.ResolvedColumnRefProto group_by_column_list = 2;
inline int ResolvedGroupingSetProto::group_by_column_list_size() const {
  return group_by_column_list_.size();
}
inline void ResolvedGroupingSetProto::clear_group_by_column_list() {
  group_by_column_list_.Clear();
}
inline ::zetasql::ResolvedColumnRefProto* ResolvedGroupingSetProto::mutable_group_by_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedGroupingSetProto.group_by_column_list)
  return group_by_column_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >*
ResolvedGroupingSetProto::mutable_group_by_column_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedGroupingSetProto.group_by_column_list)
  return &group_by_column_list_;
}
inline const ::zetasql::ResolvedColumnRefProto& ResolvedGroupingSetProto::group_by_column_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGroupingSetProto.group_by_column_list)
  return group_by_column_list_.Get(index);
}
inline ::zetasql::ResolvedColumnRefProto* ResolvedGroupingSetProto::add_group_by_column_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedGroupingSetProto.group_by_column_list)
  return group_by_column_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >&
ResolvedGroupingSetProto::group_by_column_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedGroupingSetProto.group_by_column_list)
  return group_by_column_list_;
}

// -------------------------------------------------------------------

// AnyResolvedAggregateScanBaseProto

// optional .zetasql.ResolvedAggregateScanProto resolved_aggregate_scan_node = 25;
inline bool AnyResolvedAggregateScanBaseProto::has_resolved_aggregate_scan_node() const {
  return node_case() == kResolvedAggregateScanNode;
}
inline void AnyResolvedAggregateScanBaseProto::set_has_resolved_aggregate_scan_node() {
  _oneof_case_[0] = kResolvedAggregateScanNode;
}
inline void AnyResolvedAggregateScanBaseProto::clear_resolved_aggregate_scan_node() {
  if (has_resolved_aggregate_scan_node()) {
    delete node_.resolved_aggregate_scan_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAggregateScanProto& AnyResolvedAggregateScanBaseProto::_internal_resolved_aggregate_scan_node() const {
  return *node_.resolved_aggregate_scan_node_;
}
inline ::zetasql::ResolvedAggregateScanProto* AnyResolvedAggregateScanBaseProto::release_resolved_aggregate_scan_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAggregateScanBaseProto.resolved_aggregate_scan_node)
  if (has_resolved_aggregate_scan_node()) {
    clear_has_node();
      ::zetasql::ResolvedAggregateScanProto* temp = node_.resolved_aggregate_scan_node_;
    node_.resolved_aggregate_scan_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAggregateScanProto& AnyResolvedAggregateScanBaseProto::resolved_aggregate_scan_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAggregateScanBaseProto.resolved_aggregate_scan_node)
  return has_resolved_aggregate_scan_node()
      ? *node_.resolved_aggregate_scan_node_
      : *reinterpret_cast< ::zetasql::ResolvedAggregateScanProto*>(&::zetasql::_ResolvedAggregateScanProto_default_instance_);
}
inline ::zetasql::ResolvedAggregateScanProto* AnyResolvedAggregateScanBaseProto::mutable_resolved_aggregate_scan_node() {
  if (!has_resolved_aggregate_scan_node()) {
    clear_node();
    set_has_resolved_aggregate_scan_node();
    node_.resolved_aggregate_scan_node_ = CreateMaybeMessage< ::zetasql::ResolvedAggregateScanProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAggregateScanBaseProto.resolved_aggregate_scan_node)
  return node_.resolved_aggregate_scan_node_;
}

// optional .zetasql.ResolvedAnonymizedAggregateScanProto resolved_anonymized_aggregate_scan_node = 112;
inline bool AnyResolvedAggregateScanBaseProto::has_resolved_anonymized_aggregate_scan_node() const {
  return node_case() == kResolvedAnonymizedAggregateScanNode;
}
inline void AnyResolvedAggregateScanBaseProto::set_has_resolved_anonymized_aggregate_scan_node() {
  _oneof_case_[0] = kResolvedAnonymizedAggregateScanNode;
}
inline void AnyResolvedAggregateScanBaseProto::clear_resolved_anonymized_aggregate_scan_node() {
  if (has_resolved_anonymized_aggregate_scan_node()) {
    delete node_.resolved_anonymized_aggregate_scan_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAnonymizedAggregateScanProto& AnyResolvedAggregateScanBaseProto::_internal_resolved_anonymized_aggregate_scan_node() const {
  return *node_.resolved_anonymized_aggregate_scan_node_;
}
inline ::zetasql::ResolvedAnonymizedAggregateScanProto* AnyResolvedAggregateScanBaseProto::release_resolved_anonymized_aggregate_scan_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAggregateScanBaseProto.resolved_anonymized_aggregate_scan_node)
  if (has_resolved_anonymized_aggregate_scan_node()) {
    clear_has_node();
      ::zetasql::ResolvedAnonymizedAggregateScanProto* temp = node_.resolved_anonymized_aggregate_scan_node_;
    node_.resolved_anonymized_aggregate_scan_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAnonymizedAggregateScanProto& AnyResolvedAggregateScanBaseProto::resolved_anonymized_aggregate_scan_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAggregateScanBaseProto.resolved_anonymized_aggregate_scan_node)
  return has_resolved_anonymized_aggregate_scan_node()
      ? *node_.resolved_anonymized_aggregate_scan_node_
      : *reinterpret_cast< ::zetasql::ResolvedAnonymizedAggregateScanProto*>(&::zetasql::_ResolvedAnonymizedAggregateScanProto_default_instance_);
}
inline ::zetasql::ResolvedAnonymizedAggregateScanProto* AnyResolvedAggregateScanBaseProto::mutable_resolved_anonymized_aggregate_scan_node() {
  if (!has_resolved_anonymized_aggregate_scan_node()) {
    clear_node();
    set_has_resolved_anonymized_aggregate_scan_node();
    node_.resolved_anonymized_aggregate_scan_node_ = CreateMaybeMessage< ::zetasql::ResolvedAnonymizedAggregateScanProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAggregateScanBaseProto.resolved_anonymized_aggregate_scan_node)
  return node_.resolved_anonymized_aggregate_scan_node_;
}

inline bool AnyResolvedAggregateScanBaseProto::has_node() const {
  return node_case() != NODE_NOT_SET;
}
inline void AnyResolvedAggregateScanBaseProto::clear_has_node() {
  _oneof_case_[0] = NODE_NOT_SET;
}
inline AnyResolvedAggregateScanBaseProto::NodeCase AnyResolvedAggregateScanBaseProto::node_case() const {
  return AnyResolvedAggregateScanBaseProto::NodeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResolvedAggregateScanBaseProto

// optional .zetasql.ResolvedScanProto parent = 1;
inline bool ResolvedAggregateScanBaseProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAggregateScanBaseProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAggregateScanBaseProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAggregateScanBaseProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedScanProto& ResolvedAggregateScanBaseProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedScanProto& ResolvedAggregateScanBaseProto::parent() const {
  const ::zetasql::ResolvedScanProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAggregateScanBaseProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedScanProto*>(
      &::zetasql::_ResolvedScanProto_default_instance_);
}
inline ::zetasql::ResolvedScanProto* ResolvedAggregateScanBaseProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAggregateScanBaseProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedScanProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedScanProto* ResolvedAggregateScanBaseProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedScanProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAggregateScanBaseProto.parent)
  return parent_;
}
inline void ResolvedAggregateScanBaseProto::set_allocated_parent(::zetasql::ResolvedScanProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAggregateScanBaseProto.parent)
}

// optional .zetasql.AnyResolvedScanProto input_scan = 2;
inline bool ResolvedAggregateScanBaseProto::has_input_scan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedAggregateScanBaseProto::set_has_input_scan() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedAggregateScanBaseProto::clear_has_input_scan() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedAggregateScanBaseProto::clear_input_scan() {
  if (input_scan_ != NULL) input_scan_->Clear();
  clear_has_input_scan();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedAggregateScanBaseProto::_internal_input_scan() const {
  return *input_scan_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedAggregateScanBaseProto::input_scan() const {
  const ::zetasql::AnyResolvedScanProto* p = input_scan_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAggregateScanBaseProto.input_scan)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedAggregateScanBaseProto::release_input_scan() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAggregateScanBaseProto.input_scan)
  clear_has_input_scan();
  ::zetasql::AnyResolvedScanProto* temp = input_scan_;
  input_scan_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedAggregateScanBaseProto::mutable_input_scan() {
  set_has_input_scan();
  if (input_scan_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    input_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAggregateScanBaseProto.input_scan)
  return input_scan_;
}
inline void ResolvedAggregateScanBaseProto::set_allocated_input_scan(::zetasql::AnyResolvedScanProto* input_scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete input_scan_;
  }
  if (input_scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      input_scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input_scan, submessage_arena);
    }
    set_has_input_scan();
  } else {
    clear_has_input_scan();
  }
  input_scan_ = input_scan;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAggregateScanBaseProto.input_scan)
}

// repeated .zetasql.ResolvedComputedColumnProto group_by_list = 3;
inline int ResolvedAggregateScanBaseProto::group_by_list_size() const {
  return group_by_list_.size();
}
inline void ResolvedAggregateScanBaseProto::clear_group_by_list() {
  group_by_list_.Clear();
}
inline ::zetasql::ResolvedComputedColumnProto* ResolvedAggregateScanBaseProto::mutable_group_by_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAggregateScanBaseProto.group_by_list)
  return group_by_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >*
ResolvedAggregateScanBaseProto::mutable_group_by_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedAggregateScanBaseProto.group_by_list)
  return &group_by_list_;
}
inline const ::zetasql::ResolvedComputedColumnProto& ResolvedAggregateScanBaseProto::group_by_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAggregateScanBaseProto.group_by_list)
  return group_by_list_.Get(index);
}
inline ::zetasql::ResolvedComputedColumnProto* ResolvedAggregateScanBaseProto::add_group_by_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAggregateScanBaseProto.group_by_list)
  return group_by_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >&
ResolvedAggregateScanBaseProto::group_by_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedAggregateScanBaseProto.group_by_list)
  return group_by_list_;
}

// repeated .zetasql.ResolvedCollationProto collation_list = 5;
inline int ResolvedAggregateScanBaseProto::collation_list_size() const {
  return collation_list_.size();
}
inline ::zetasql::ResolvedCollationProto* ResolvedAggregateScanBaseProto::mutable_collation_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAggregateScanBaseProto.collation_list)
  return collation_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedCollationProto >*
ResolvedAggregateScanBaseProto::mutable_collation_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedAggregateScanBaseProto.collation_list)
  return &collation_list_;
}
inline const ::zetasql::ResolvedCollationProto& ResolvedAggregateScanBaseProto::collation_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAggregateScanBaseProto.collation_list)
  return collation_list_.Get(index);
}
inline ::zetasql::ResolvedCollationProto* ResolvedAggregateScanBaseProto::add_collation_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAggregateScanBaseProto.collation_list)
  return collation_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedCollationProto >&
ResolvedAggregateScanBaseProto::collation_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedAggregateScanBaseProto.collation_list)
  return collation_list_;
}

// repeated .zetasql.ResolvedComputedColumnProto aggregate_list = 4;
inline int ResolvedAggregateScanBaseProto::aggregate_list_size() const {
  return aggregate_list_.size();
}
inline void ResolvedAggregateScanBaseProto::clear_aggregate_list() {
  aggregate_list_.Clear();
}
inline ::zetasql::ResolvedComputedColumnProto* ResolvedAggregateScanBaseProto::mutable_aggregate_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAggregateScanBaseProto.aggregate_list)
  return aggregate_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >*
ResolvedAggregateScanBaseProto::mutable_aggregate_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedAggregateScanBaseProto.aggregate_list)
  return &aggregate_list_;
}
inline const ::zetasql::ResolvedComputedColumnProto& ResolvedAggregateScanBaseProto::aggregate_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAggregateScanBaseProto.aggregate_list)
  return aggregate_list_.Get(index);
}
inline ::zetasql::ResolvedComputedColumnProto* ResolvedAggregateScanBaseProto::add_aggregate_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAggregateScanBaseProto.aggregate_list)
  return aggregate_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >&
ResolvedAggregateScanBaseProto::aggregate_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedAggregateScanBaseProto.aggregate_list)
  return aggregate_list_;
}

// -------------------------------------------------------------------

// ResolvedAggregateScanProto

// optional .zetasql.ResolvedAggregateScanBaseProto parent = 1;
inline bool ResolvedAggregateScanProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAggregateScanProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAggregateScanProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAggregateScanProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAggregateScanBaseProto& ResolvedAggregateScanProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAggregateScanBaseProto& ResolvedAggregateScanProto::parent() const {
  const ::zetasql::ResolvedAggregateScanBaseProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAggregateScanProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAggregateScanBaseProto*>(
      &::zetasql::_ResolvedAggregateScanBaseProto_default_instance_);
}
inline ::zetasql::ResolvedAggregateScanBaseProto* ResolvedAggregateScanProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAggregateScanProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAggregateScanBaseProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAggregateScanBaseProto* ResolvedAggregateScanProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAggregateScanBaseProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAggregateScanProto.parent)
  return parent_;
}
inline void ResolvedAggregateScanProto::set_allocated_parent(::zetasql::ResolvedAggregateScanBaseProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAggregateScanProto.parent)
}

// repeated .zetasql.ResolvedGroupingSetProto grouping_set_list = 5;
inline int ResolvedAggregateScanProto::grouping_set_list_size() const {
  return grouping_set_list_.size();
}
inline void ResolvedAggregateScanProto::clear_grouping_set_list() {
  grouping_set_list_.Clear();
}
inline ::zetasql::ResolvedGroupingSetProto* ResolvedAggregateScanProto::mutable_grouping_set_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAggregateScanProto.grouping_set_list)
  return grouping_set_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedGroupingSetProto >*
ResolvedAggregateScanProto::mutable_grouping_set_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedAggregateScanProto.grouping_set_list)
  return &grouping_set_list_;
}
inline const ::zetasql::ResolvedGroupingSetProto& ResolvedAggregateScanProto::grouping_set_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAggregateScanProto.grouping_set_list)
  return grouping_set_list_.Get(index);
}
inline ::zetasql::ResolvedGroupingSetProto* ResolvedAggregateScanProto::add_grouping_set_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAggregateScanProto.grouping_set_list)
  return grouping_set_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedGroupingSetProto >&
ResolvedAggregateScanProto::grouping_set_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedAggregateScanProto.grouping_set_list)
  return grouping_set_list_;
}

// repeated .zetasql.ResolvedColumnRefProto rollup_column_list = 6;
inline int ResolvedAggregateScanProto::rollup_column_list_size() const {
  return rollup_column_list_.size();
}
inline void ResolvedAggregateScanProto::clear_rollup_column_list() {
  rollup_column_list_.Clear();
}
inline ::zetasql::ResolvedColumnRefProto* ResolvedAggregateScanProto::mutable_rollup_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAggregateScanProto.rollup_column_list)
  return rollup_column_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >*
ResolvedAggregateScanProto::mutable_rollup_column_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedAggregateScanProto.rollup_column_list)
  return &rollup_column_list_;
}
inline const ::zetasql::ResolvedColumnRefProto& ResolvedAggregateScanProto::rollup_column_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAggregateScanProto.rollup_column_list)
  return rollup_column_list_.Get(index);
}
inline ::zetasql::ResolvedColumnRefProto* ResolvedAggregateScanProto::add_rollup_column_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAggregateScanProto.rollup_column_list)
  return rollup_column_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >&
ResolvedAggregateScanProto::rollup_column_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedAggregateScanProto.rollup_column_list)
  return rollup_column_list_;
}

// -------------------------------------------------------------------

// ResolvedAnonymizedAggregateScanProto

// optional .zetasql.ResolvedAggregateScanBaseProto parent = 1;
inline bool ResolvedAnonymizedAggregateScanProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAnonymizedAggregateScanProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAnonymizedAggregateScanProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAnonymizedAggregateScanProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAggregateScanBaseProto& ResolvedAnonymizedAggregateScanProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAggregateScanBaseProto& ResolvedAnonymizedAggregateScanProto::parent() const {
  const ::zetasql::ResolvedAggregateScanBaseProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAnonymizedAggregateScanProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAggregateScanBaseProto*>(
      &::zetasql::_ResolvedAggregateScanBaseProto_default_instance_);
}
inline ::zetasql::ResolvedAggregateScanBaseProto* ResolvedAnonymizedAggregateScanProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAnonymizedAggregateScanProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAggregateScanBaseProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAggregateScanBaseProto* ResolvedAnonymizedAggregateScanProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAggregateScanBaseProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAnonymizedAggregateScanProto.parent)
  return parent_;
}
inline void ResolvedAnonymizedAggregateScanProto::set_allocated_parent(::zetasql::ResolvedAggregateScanBaseProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAnonymizedAggregateScanProto.parent)
}

// optional .zetasql.ResolvedColumnRefProto k_threshold_expr = 5;
inline bool ResolvedAnonymizedAggregateScanProto::has_k_threshold_expr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedAnonymizedAggregateScanProto::set_has_k_threshold_expr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedAnonymizedAggregateScanProto::clear_has_k_threshold_expr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedAnonymizedAggregateScanProto::clear_k_threshold_expr() {
  if (k_threshold_expr_ != NULL) k_threshold_expr_->Clear();
  clear_has_k_threshold_expr();
}
inline const ::zetasql::ResolvedColumnRefProto& ResolvedAnonymizedAggregateScanProto::_internal_k_threshold_expr() const {
  return *k_threshold_expr_;
}
inline const ::zetasql::ResolvedColumnRefProto& ResolvedAnonymizedAggregateScanProto::k_threshold_expr() const {
  const ::zetasql::ResolvedColumnRefProto* p = k_threshold_expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAnonymizedAggregateScanProto.k_threshold_expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedColumnRefProto*>(
      &::zetasql::_ResolvedColumnRefProto_default_instance_);
}
inline ::zetasql::ResolvedColumnRefProto* ResolvedAnonymizedAggregateScanProto::release_k_threshold_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAnonymizedAggregateScanProto.k_threshold_expr)
  clear_has_k_threshold_expr();
  ::zetasql::ResolvedColumnRefProto* temp = k_threshold_expr_;
  k_threshold_expr_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedColumnRefProto* ResolvedAnonymizedAggregateScanProto::mutable_k_threshold_expr() {
  set_has_k_threshold_expr();
  if (k_threshold_expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedColumnRefProto>(GetArenaNoVirtual());
    k_threshold_expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAnonymizedAggregateScanProto.k_threshold_expr)
  return k_threshold_expr_;
}
inline void ResolvedAnonymizedAggregateScanProto::set_allocated_k_threshold_expr(::zetasql::ResolvedColumnRefProto* k_threshold_expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete k_threshold_expr_;
  }
  if (k_threshold_expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      k_threshold_expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, k_threshold_expr, submessage_arena);
    }
    set_has_k_threshold_expr();
  } else {
    clear_has_k_threshold_expr();
  }
  k_threshold_expr_ = k_threshold_expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAnonymizedAggregateScanProto.k_threshold_expr)
}

// repeated .zetasql.ResolvedOptionProto anonymization_option_list = 6;
inline int ResolvedAnonymizedAggregateScanProto::anonymization_option_list_size() const {
  return anonymization_option_list_.size();
}
inline void ResolvedAnonymizedAggregateScanProto::clear_anonymization_option_list() {
  anonymization_option_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedAnonymizedAggregateScanProto::mutable_anonymization_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAnonymizedAggregateScanProto.anonymization_option_list)
  return anonymization_option_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedAnonymizedAggregateScanProto::mutable_anonymization_option_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedAnonymizedAggregateScanProto.anonymization_option_list)
  return &anonymization_option_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedAnonymizedAggregateScanProto::anonymization_option_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAnonymizedAggregateScanProto.anonymization_option_list)
  return anonymization_option_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedAnonymizedAggregateScanProto::add_anonymization_option_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAnonymizedAggregateScanProto.anonymization_option_list)
  return anonymization_option_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedAnonymizedAggregateScanProto::anonymization_option_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedAnonymizedAggregateScanProto.anonymization_option_list)
  return anonymization_option_list_;
}

// -------------------------------------------------------------------

// ResolvedSetOperationItemProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedSetOperationItemProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedSetOperationItemProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedSetOperationItemProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedSetOperationItemProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedSetOperationItemProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedSetOperationItemProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSetOperationItemProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedSetOperationItemProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedSetOperationItemProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedSetOperationItemProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSetOperationItemProto.parent)
  return parent_;
}
inline void ResolvedSetOperationItemProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedSetOperationItemProto.parent)
}

// optional .zetasql.AnyResolvedScanProto scan = 2;
inline bool ResolvedSetOperationItemProto::has_scan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedSetOperationItemProto::set_has_scan() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedSetOperationItemProto::clear_has_scan() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedSetOperationItemProto::clear_scan() {
  if (scan_ != NULL) scan_->Clear();
  clear_has_scan();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedSetOperationItemProto::_internal_scan() const {
  return *scan_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedSetOperationItemProto::scan() const {
  const ::zetasql::AnyResolvedScanProto* p = scan_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSetOperationItemProto.scan)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedSetOperationItemProto::release_scan() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedSetOperationItemProto.scan)
  clear_has_scan();
  ::zetasql::AnyResolvedScanProto* temp = scan_;
  scan_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedSetOperationItemProto::mutable_scan() {
  set_has_scan();
  if (scan_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSetOperationItemProto.scan)
  return scan_;
}
inline void ResolvedSetOperationItemProto::set_allocated_scan(::zetasql::AnyResolvedScanProto* scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scan_;
  }
  if (scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scan, submessage_arena);
    }
    set_has_scan();
  } else {
    clear_has_scan();
  }
  scan_ = scan;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedSetOperationItemProto.scan)
}

// repeated .zetasql.ResolvedColumnProto output_column_list = 3;
inline int ResolvedSetOperationItemProto::output_column_list_size() const {
  return output_column_list_.size();
}
inline ::zetasql::ResolvedColumnProto* ResolvedSetOperationItemProto::mutable_output_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSetOperationItemProto.output_column_list)
  return output_column_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >*
ResolvedSetOperationItemProto::mutable_output_column_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedSetOperationItemProto.output_column_list)
  return &output_column_list_;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedSetOperationItemProto::output_column_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSetOperationItemProto.output_column_list)
  return output_column_list_.Get(index);
}
inline ::zetasql::ResolvedColumnProto* ResolvedSetOperationItemProto::add_output_column_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedSetOperationItemProto.output_column_list)
  return output_column_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >&
ResolvedSetOperationItemProto::output_column_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedSetOperationItemProto.output_column_list)
  return output_column_list_;
}

// -------------------------------------------------------------------

// ResolvedSetOperationScanProto

// optional .zetasql.ResolvedScanProto parent = 1;
inline bool ResolvedSetOperationScanProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedSetOperationScanProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedSetOperationScanProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedSetOperationScanProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedScanProto& ResolvedSetOperationScanProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedScanProto& ResolvedSetOperationScanProto::parent() const {
  const ::zetasql::ResolvedScanProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSetOperationScanProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedScanProto*>(
      &::zetasql::_ResolvedScanProto_default_instance_);
}
inline ::zetasql::ResolvedScanProto* ResolvedSetOperationScanProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedSetOperationScanProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedScanProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedScanProto* ResolvedSetOperationScanProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedScanProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSetOperationScanProto.parent)
  return parent_;
}
inline void ResolvedSetOperationScanProto::set_allocated_parent(::zetasql::ResolvedScanProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedSetOperationScanProto.parent)
}

// optional .zetasql.ResolvedSetOperationScanEnums.SetOperationType op_type = 2;
inline bool ResolvedSetOperationScanProto::has_op_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedSetOperationScanProto::set_has_op_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedSetOperationScanProto::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedSetOperationScanProto::clear_op_type() {
  op_type_ = 0;
  clear_has_op_type();
}
inline ::zetasql::ResolvedSetOperationScanEnums_SetOperationType ResolvedSetOperationScanProto::op_type() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSetOperationScanProto.op_type)
  return static_cast< ::zetasql::ResolvedSetOperationScanEnums_SetOperationType >(op_type_);
}
inline void ResolvedSetOperationScanProto::set_op_type(::zetasql::ResolvedSetOperationScanEnums_SetOperationType value) {
  assert(::zetasql::ResolvedSetOperationScanEnums_SetOperationType_IsValid(value));
  set_has_op_type();
  op_type_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedSetOperationScanProto.op_type)
}

// repeated .zetasql.ResolvedSetOperationItemProto input_item_list = 4;
inline int ResolvedSetOperationScanProto::input_item_list_size() const {
  return input_item_list_.size();
}
inline void ResolvedSetOperationScanProto::clear_input_item_list() {
  input_item_list_.Clear();
}
inline ::zetasql::ResolvedSetOperationItemProto* ResolvedSetOperationScanProto::mutable_input_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSetOperationScanProto.input_item_list)
  return input_item_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedSetOperationItemProto >*
ResolvedSetOperationScanProto::mutable_input_item_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedSetOperationScanProto.input_item_list)
  return &input_item_list_;
}
inline const ::zetasql::ResolvedSetOperationItemProto& ResolvedSetOperationScanProto::input_item_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSetOperationScanProto.input_item_list)
  return input_item_list_.Get(index);
}
inline ::zetasql::ResolvedSetOperationItemProto* ResolvedSetOperationScanProto::add_input_item_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedSetOperationScanProto.input_item_list)
  return input_item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedSetOperationItemProto >&
ResolvedSetOperationScanProto::input_item_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedSetOperationScanProto.input_item_list)
  return input_item_list_;
}

// -------------------------------------------------------------------

// ResolvedOrderByScanProto

// optional .zetasql.ResolvedScanProto parent = 1;
inline bool ResolvedOrderByScanProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedOrderByScanProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedOrderByScanProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedOrderByScanProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedScanProto& ResolvedOrderByScanProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedScanProto& ResolvedOrderByScanProto::parent() const {
  const ::zetasql::ResolvedScanProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedOrderByScanProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedScanProto*>(
      &::zetasql::_ResolvedScanProto_default_instance_);
}
inline ::zetasql::ResolvedScanProto* ResolvedOrderByScanProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedOrderByScanProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedScanProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedScanProto* ResolvedOrderByScanProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedScanProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedOrderByScanProto.parent)
  return parent_;
}
inline void ResolvedOrderByScanProto::set_allocated_parent(::zetasql::ResolvedScanProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedOrderByScanProto.parent)
}

// optional .zetasql.AnyResolvedScanProto input_scan = 2;
inline bool ResolvedOrderByScanProto::has_input_scan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedOrderByScanProto::set_has_input_scan() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedOrderByScanProto::clear_has_input_scan() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedOrderByScanProto::clear_input_scan() {
  if (input_scan_ != NULL) input_scan_->Clear();
  clear_has_input_scan();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedOrderByScanProto::_internal_input_scan() const {
  return *input_scan_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedOrderByScanProto::input_scan() const {
  const ::zetasql::AnyResolvedScanProto* p = input_scan_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedOrderByScanProto.input_scan)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedOrderByScanProto::release_input_scan() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedOrderByScanProto.input_scan)
  clear_has_input_scan();
  ::zetasql::AnyResolvedScanProto* temp = input_scan_;
  input_scan_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedOrderByScanProto::mutable_input_scan() {
  set_has_input_scan();
  if (input_scan_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    input_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedOrderByScanProto.input_scan)
  return input_scan_;
}
inline void ResolvedOrderByScanProto::set_allocated_input_scan(::zetasql::AnyResolvedScanProto* input_scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete input_scan_;
  }
  if (input_scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      input_scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input_scan, submessage_arena);
    }
    set_has_input_scan();
  } else {
    clear_has_input_scan();
  }
  input_scan_ = input_scan;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedOrderByScanProto.input_scan)
}

// repeated .zetasql.ResolvedOrderByItemProto order_by_item_list = 3;
inline int ResolvedOrderByScanProto::order_by_item_list_size() const {
  return order_by_item_list_.size();
}
inline void ResolvedOrderByScanProto::clear_order_by_item_list() {
  order_by_item_list_.Clear();
}
inline ::zetasql::ResolvedOrderByItemProto* ResolvedOrderByScanProto::mutable_order_by_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedOrderByScanProto.order_by_item_list)
  return order_by_item_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOrderByItemProto >*
ResolvedOrderByScanProto::mutable_order_by_item_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedOrderByScanProto.order_by_item_list)
  return &order_by_item_list_;
}
inline const ::zetasql::ResolvedOrderByItemProto& ResolvedOrderByScanProto::order_by_item_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedOrderByScanProto.order_by_item_list)
  return order_by_item_list_.Get(index);
}
inline ::zetasql::ResolvedOrderByItemProto* ResolvedOrderByScanProto::add_order_by_item_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedOrderByScanProto.order_by_item_list)
  return order_by_item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOrderByItemProto >&
ResolvedOrderByScanProto::order_by_item_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedOrderByScanProto.order_by_item_list)
  return order_by_item_list_;
}

// -------------------------------------------------------------------

// ResolvedLimitOffsetScanProto

// optional .zetasql.ResolvedScanProto parent = 1;
inline bool ResolvedLimitOffsetScanProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedLimitOffsetScanProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedLimitOffsetScanProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedLimitOffsetScanProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedScanProto& ResolvedLimitOffsetScanProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedScanProto& ResolvedLimitOffsetScanProto::parent() const {
  const ::zetasql::ResolvedScanProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedLimitOffsetScanProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedScanProto*>(
      &::zetasql::_ResolvedScanProto_default_instance_);
}
inline ::zetasql::ResolvedScanProto* ResolvedLimitOffsetScanProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedLimitOffsetScanProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedScanProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedScanProto* ResolvedLimitOffsetScanProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedScanProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedLimitOffsetScanProto.parent)
  return parent_;
}
inline void ResolvedLimitOffsetScanProto::set_allocated_parent(::zetasql::ResolvedScanProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedLimitOffsetScanProto.parent)
}

// optional .zetasql.AnyResolvedScanProto input_scan = 2;
inline bool ResolvedLimitOffsetScanProto::has_input_scan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedLimitOffsetScanProto::set_has_input_scan() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedLimitOffsetScanProto::clear_has_input_scan() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedLimitOffsetScanProto::clear_input_scan() {
  if (input_scan_ != NULL) input_scan_->Clear();
  clear_has_input_scan();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedLimitOffsetScanProto::_internal_input_scan() const {
  return *input_scan_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedLimitOffsetScanProto::input_scan() const {
  const ::zetasql::AnyResolvedScanProto* p = input_scan_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedLimitOffsetScanProto.input_scan)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedLimitOffsetScanProto::release_input_scan() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedLimitOffsetScanProto.input_scan)
  clear_has_input_scan();
  ::zetasql::AnyResolvedScanProto* temp = input_scan_;
  input_scan_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedLimitOffsetScanProto::mutable_input_scan() {
  set_has_input_scan();
  if (input_scan_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    input_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedLimitOffsetScanProto.input_scan)
  return input_scan_;
}
inline void ResolvedLimitOffsetScanProto::set_allocated_input_scan(::zetasql::AnyResolvedScanProto* input_scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete input_scan_;
  }
  if (input_scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      input_scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input_scan, submessage_arena);
    }
    set_has_input_scan();
  } else {
    clear_has_input_scan();
  }
  input_scan_ = input_scan;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedLimitOffsetScanProto.input_scan)
}

// optional .zetasql.AnyResolvedExprProto limit = 3;
inline bool ResolvedLimitOffsetScanProto::has_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedLimitOffsetScanProto::set_has_limit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedLimitOffsetScanProto::clear_has_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedLimitOffsetScanProto::clear_limit() {
  if (limit_ != NULL) limit_->Clear();
  clear_has_limit();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedLimitOffsetScanProto::_internal_limit() const {
  return *limit_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedLimitOffsetScanProto::limit() const {
  const ::zetasql::AnyResolvedExprProto* p = limit_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedLimitOffsetScanProto.limit)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedLimitOffsetScanProto::release_limit() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedLimitOffsetScanProto.limit)
  clear_has_limit();
  ::zetasql::AnyResolvedExprProto* temp = limit_;
  limit_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedLimitOffsetScanProto::mutable_limit() {
  set_has_limit();
  if (limit_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    limit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedLimitOffsetScanProto.limit)
  return limit_;
}
inline void ResolvedLimitOffsetScanProto::set_allocated_limit(::zetasql::AnyResolvedExprProto* limit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete limit_;
  }
  if (limit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      limit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, limit, submessage_arena);
    }
    set_has_limit();
  } else {
    clear_has_limit();
  }
  limit_ = limit;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedLimitOffsetScanProto.limit)
}

// optional .zetasql.AnyResolvedExprProto offset = 4;
inline bool ResolvedLimitOffsetScanProto::has_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedLimitOffsetScanProto::set_has_offset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedLimitOffsetScanProto::clear_has_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedLimitOffsetScanProto::clear_offset() {
  if (offset_ != NULL) offset_->Clear();
  clear_has_offset();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedLimitOffsetScanProto::_internal_offset() const {
  return *offset_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedLimitOffsetScanProto::offset() const {
  const ::zetasql::AnyResolvedExprProto* p = offset_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedLimitOffsetScanProto.offset)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedLimitOffsetScanProto::release_offset() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedLimitOffsetScanProto.offset)
  clear_has_offset();
  ::zetasql::AnyResolvedExprProto* temp = offset_;
  offset_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedLimitOffsetScanProto::mutable_offset() {
  set_has_offset();
  if (offset_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    offset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedLimitOffsetScanProto.offset)
  return offset_;
}
inline void ResolvedLimitOffsetScanProto::set_allocated_offset(::zetasql::AnyResolvedExprProto* offset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete offset_;
  }
  if (offset) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      offset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, offset, submessage_arena);
    }
    set_has_offset();
  } else {
    clear_has_offset();
  }
  offset_ = offset;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedLimitOffsetScanProto.offset)
}

// -------------------------------------------------------------------

// ResolvedWithRefScanProto

// optional .zetasql.ResolvedScanProto parent = 1;
inline bool ResolvedWithRefScanProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedWithRefScanProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedWithRefScanProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedWithRefScanProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedScanProto& ResolvedWithRefScanProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedScanProto& ResolvedWithRefScanProto::parent() const {
  const ::zetasql::ResolvedScanProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedWithRefScanProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedScanProto*>(
      &::zetasql::_ResolvedScanProto_default_instance_);
}
inline ::zetasql::ResolvedScanProto* ResolvedWithRefScanProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedWithRefScanProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedScanProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedScanProto* ResolvedWithRefScanProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedScanProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedWithRefScanProto.parent)
  return parent_;
}
inline void ResolvedWithRefScanProto::set_allocated_parent(::zetasql::ResolvedScanProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedWithRefScanProto.parent)
}

// optional string with_query_name = 2;
inline bool ResolvedWithRefScanProto::has_with_query_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedWithRefScanProto::set_has_with_query_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedWithRefScanProto::clear_has_with_query_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedWithRefScanProto::clear_with_query_name() {
  with_query_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_with_query_name();
}
inline const ::std::string& ResolvedWithRefScanProto::with_query_name() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedWithRefScanProto.with_query_name)
  return with_query_name_.GetNoArena();
}
inline void ResolvedWithRefScanProto::set_with_query_name(const ::std::string& value) {
  set_has_with_query_name();
  with_query_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedWithRefScanProto.with_query_name)
}
#if LANG_CXX11
inline void ResolvedWithRefScanProto::set_with_query_name(::std::string&& value) {
  set_has_with_query_name();
  with_query_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedWithRefScanProto.with_query_name)
}
#endif
inline void ResolvedWithRefScanProto::set_with_query_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_with_query_name();
  with_query_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedWithRefScanProto.with_query_name)
}
inline void ResolvedWithRefScanProto::set_with_query_name(const char* value, size_t size) {
  set_has_with_query_name();
  with_query_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedWithRefScanProto.with_query_name)
}
inline ::std::string* ResolvedWithRefScanProto::mutable_with_query_name() {
  set_has_with_query_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedWithRefScanProto.with_query_name)
  return with_query_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedWithRefScanProto::release_with_query_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedWithRefScanProto.with_query_name)
  if (!has_with_query_name()) {
    return NULL;
  }
  clear_has_with_query_name();
  return with_query_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedWithRefScanProto::set_allocated_with_query_name(::std::string* with_query_name) {
  if (with_query_name != NULL) {
    set_has_with_query_name();
  } else {
    clear_has_with_query_name();
  }
  with_query_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), with_query_name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedWithRefScanProto.with_query_name)
}

// -------------------------------------------------------------------

// ResolvedAnalyticScanProto

// optional .zetasql.ResolvedScanProto parent = 1;
inline bool ResolvedAnalyticScanProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAnalyticScanProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAnalyticScanProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAnalyticScanProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedScanProto& ResolvedAnalyticScanProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedScanProto& ResolvedAnalyticScanProto::parent() const {
  const ::zetasql::ResolvedScanProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAnalyticScanProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedScanProto*>(
      &::zetasql::_ResolvedScanProto_default_instance_);
}
inline ::zetasql::ResolvedScanProto* ResolvedAnalyticScanProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAnalyticScanProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedScanProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedScanProto* ResolvedAnalyticScanProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedScanProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAnalyticScanProto.parent)
  return parent_;
}
inline void ResolvedAnalyticScanProto::set_allocated_parent(::zetasql::ResolvedScanProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAnalyticScanProto.parent)
}

// optional .zetasql.AnyResolvedScanProto input_scan = 2;
inline bool ResolvedAnalyticScanProto::has_input_scan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedAnalyticScanProto::set_has_input_scan() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedAnalyticScanProto::clear_has_input_scan() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedAnalyticScanProto::clear_input_scan() {
  if (input_scan_ != NULL) input_scan_->Clear();
  clear_has_input_scan();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedAnalyticScanProto::_internal_input_scan() const {
  return *input_scan_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedAnalyticScanProto::input_scan() const {
  const ::zetasql::AnyResolvedScanProto* p = input_scan_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAnalyticScanProto.input_scan)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedAnalyticScanProto::release_input_scan() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAnalyticScanProto.input_scan)
  clear_has_input_scan();
  ::zetasql::AnyResolvedScanProto* temp = input_scan_;
  input_scan_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedAnalyticScanProto::mutable_input_scan() {
  set_has_input_scan();
  if (input_scan_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    input_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAnalyticScanProto.input_scan)
  return input_scan_;
}
inline void ResolvedAnalyticScanProto::set_allocated_input_scan(::zetasql::AnyResolvedScanProto* input_scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete input_scan_;
  }
  if (input_scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      input_scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input_scan, submessage_arena);
    }
    set_has_input_scan();
  } else {
    clear_has_input_scan();
  }
  input_scan_ = input_scan;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAnalyticScanProto.input_scan)
}

// repeated .zetasql.ResolvedAnalyticFunctionGroupProto function_group_list = 3;
inline int ResolvedAnalyticScanProto::function_group_list_size() const {
  return function_group_list_.size();
}
inline void ResolvedAnalyticScanProto::clear_function_group_list() {
  function_group_list_.Clear();
}
inline ::zetasql::ResolvedAnalyticFunctionGroupProto* ResolvedAnalyticScanProto::mutable_function_group_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAnalyticScanProto.function_group_list)
  return function_group_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedAnalyticFunctionGroupProto >*
ResolvedAnalyticScanProto::mutable_function_group_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedAnalyticScanProto.function_group_list)
  return &function_group_list_;
}
inline const ::zetasql::ResolvedAnalyticFunctionGroupProto& ResolvedAnalyticScanProto::function_group_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAnalyticScanProto.function_group_list)
  return function_group_list_.Get(index);
}
inline ::zetasql::ResolvedAnalyticFunctionGroupProto* ResolvedAnalyticScanProto::add_function_group_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAnalyticScanProto.function_group_list)
  return function_group_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedAnalyticFunctionGroupProto >&
ResolvedAnalyticScanProto::function_group_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedAnalyticScanProto.function_group_list)
  return function_group_list_;
}

// -------------------------------------------------------------------

// ResolvedSampleScanProto

// optional .zetasql.ResolvedScanProto parent = 1;
inline bool ResolvedSampleScanProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedSampleScanProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedSampleScanProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedSampleScanProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedScanProto& ResolvedSampleScanProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedScanProto& ResolvedSampleScanProto::parent() const {
  const ::zetasql::ResolvedScanProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSampleScanProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedScanProto*>(
      &::zetasql::_ResolvedScanProto_default_instance_);
}
inline ::zetasql::ResolvedScanProto* ResolvedSampleScanProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedSampleScanProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedScanProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedScanProto* ResolvedSampleScanProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedScanProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSampleScanProto.parent)
  return parent_;
}
inline void ResolvedSampleScanProto::set_allocated_parent(::zetasql::ResolvedScanProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedSampleScanProto.parent)
}

// optional .zetasql.AnyResolvedScanProto input_scan = 2;
inline bool ResolvedSampleScanProto::has_input_scan() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedSampleScanProto::set_has_input_scan() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedSampleScanProto::clear_has_input_scan() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedSampleScanProto::clear_input_scan() {
  if (input_scan_ != NULL) input_scan_->Clear();
  clear_has_input_scan();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedSampleScanProto::_internal_input_scan() const {
  return *input_scan_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedSampleScanProto::input_scan() const {
  const ::zetasql::AnyResolvedScanProto* p = input_scan_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSampleScanProto.input_scan)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedSampleScanProto::release_input_scan() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedSampleScanProto.input_scan)
  clear_has_input_scan();
  ::zetasql::AnyResolvedScanProto* temp = input_scan_;
  input_scan_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedSampleScanProto::mutable_input_scan() {
  set_has_input_scan();
  if (input_scan_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    input_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSampleScanProto.input_scan)
  return input_scan_;
}
inline void ResolvedSampleScanProto::set_allocated_input_scan(::zetasql::AnyResolvedScanProto* input_scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete input_scan_;
  }
  if (input_scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      input_scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input_scan, submessage_arena);
    }
    set_has_input_scan();
  } else {
    clear_has_input_scan();
  }
  input_scan_ = input_scan;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedSampleScanProto.input_scan)
}

// optional string method = 3;
inline bool ResolvedSampleScanProto::has_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedSampleScanProto::set_has_method() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedSampleScanProto::clear_has_method() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedSampleScanProto::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_method();
}
inline const ::std::string& ResolvedSampleScanProto::method() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSampleScanProto.method)
  return method_.GetNoArena();
}
inline void ResolvedSampleScanProto::set_method(const ::std::string& value) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedSampleScanProto.method)
}
#if LANG_CXX11
inline void ResolvedSampleScanProto::set_method(::std::string&& value) {
  set_has_method();
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedSampleScanProto.method)
}
#endif
inline void ResolvedSampleScanProto::set_method(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedSampleScanProto.method)
}
inline void ResolvedSampleScanProto::set_method(const char* value, size_t size) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedSampleScanProto.method)
}
inline ::std::string* ResolvedSampleScanProto::mutable_method() {
  set_has_method();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSampleScanProto.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedSampleScanProto::release_method() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedSampleScanProto.method)
  if (!has_method()) {
    return NULL;
  }
  clear_has_method();
  return method_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedSampleScanProto::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    set_has_method();
  } else {
    clear_has_method();
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedSampleScanProto.method)
}

// optional .zetasql.AnyResolvedExprProto size = 4;
inline bool ResolvedSampleScanProto::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedSampleScanProto::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedSampleScanProto::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedSampleScanProto::clear_size() {
  if (size_ != NULL) size_->Clear();
  clear_has_size();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedSampleScanProto::_internal_size() const {
  return *size_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedSampleScanProto::size() const {
  const ::zetasql::AnyResolvedExprProto* p = size_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSampleScanProto.size)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedSampleScanProto::release_size() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedSampleScanProto.size)
  clear_has_size();
  ::zetasql::AnyResolvedExprProto* temp = size_;
  size_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedSampleScanProto::mutable_size() {
  set_has_size();
  if (size_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSampleScanProto.size)
  return size_;
}
inline void ResolvedSampleScanProto::set_allocated_size(::zetasql::AnyResolvedExprProto* size) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete size_;
  }
  if (size) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      size = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    set_has_size();
  } else {
    clear_has_size();
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedSampleScanProto.size)
}

// optional .zetasql.ResolvedSampleScanEnums.SampleUnit unit = 5;
inline bool ResolvedSampleScanProto::has_unit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResolvedSampleScanProto::set_has_unit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ResolvedSampleScanProto::clear_has_unit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ResolvedSampleScanProto::clear_unit() {
  unit_ = 0;
  clear_has_unit();
}
inline ::zetasql::ResolvedSampleScanEnums_SampleUnit ResolvedSampleScanProto::unit() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSampleScanProto.unit)
  return static_cast< ::zetasql::ResolvedSampleScanEnums_SampleUnit >(unit_);
}
inline void ResolvedSampleScanProto::set_unit(::zetasql::ResolvedSampleScanEnums_SampleUnit value) {
  assert(::zetasql::ResolvedSampleScanEnums_SampleUnit_IsValid(value));
  set_has_unit();
  unit_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedSampleScanProto.unit)
}

// optional .zetasql.AnyResolvedExprProto repeatable_argument = 6;
inline bool ResolvedSampleScanProto::has_repeatable_argument() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResolvedSampleScanProto::set_has_repeatable_argument() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResolvedSampleScanProto::clear_has_repeatable_argument() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResolvedSampleScanProto::clear_repeatable_argument() {
  if (repeatable_argument_ != NULL) repeatable_argument_->Clear();
  clear_has_repeatable_argument();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedSampleScanProto::_internal_repeatable_argument() const {
  return *repeatable_argument_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedSampleScanProto::repeatable_argument() const {
  const ::zetasql::AnyResolvedExprProto* p = repeatable_argument_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSampleScanProto.repeatable_argument)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedSampleScanProto::release_repeatable_argument() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedSampleScanProto.repeatable_argument)
  clear_has_repeatable_argument();
  ::zetasql::AnyResolvedExprProto* temp = repeatable_argument_;
  repeatable_argument_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedSampleScanProto::mutable_repeatable_argument() {
  set_has_repeatable_argument();
  if (repeatable_argument_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    repeatable_argument_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSampleScanProto.repeatable_argument)
  return repeatable_argument_;
}
inline void ResolvedSampleScanProto::set_allocated_repeatable_argument(::zetasql::AnyResolvedExprProto* repeatable_argument) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete repeatable_argument_;
  }
  if (repeatable_argument) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      repeatable_argument = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, repeatable_argument, submessage_arena);
    }
    set_has_repeatable_argument();
  } else {
    clear_has_repeatable_argument();
  }
  repeatable_argument_ = repeatable_argument;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedSampleScanProto.repeatable_argument)
}

// optional .zetasql.ResolvedColumnHolderProto weight_column = 7;
inline bool ResolvedSampleScanProto::has_weight_column() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResolvedSampleScanProto::set_has_weight_column() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResolvedSampleScanProto::clear_has_weight_column() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ResolvedSampleScanProto::clear_weight_column() {
  if (weight_column_ != NULL) weight_column_->Clear();
  clear_has_weight_column();
}
inline const ::zetasql::ResolvedColumnHolderProto& ResolvedSampleScanProto::_internal_weight_column() const {
  return *weight_column_;
}
inline const ::zetasql::ResolvedColumnHolderProto& ResolvedSampleScanProto::weight_column() const {
  const ::zetasql::ResolvedColumnHolderProto* p = weight_column_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSampleScanProto.weight_column)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedColumnHolderProto*>(
      &::zetasql::_ResolvedColumnHolderProto_default_instance_);
}
inline ::zetasql::ResolvedColumnHolderProto* ResolvedSampleScanProto::release_weight_column() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedSampleScanProto.weight_column)
  clear_has_weight_column();
  ::zetasql::ResolvedColumnHolderProto* temp = weight_column_;
  weight_column_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedColumnHolderProto* ResolvedSampleScanProto::mutable_weight_column() {
  set_has_weight_column();
  if (weight_column_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedColumnHolderProto>(GetArenaNoVirtual());
    weight_column_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSampleScanProto.weight_column)
  return weight_column_;
}
inline void ResolvedSampleScanProto::set_allocated_weight_column(::zetasql::ResolvedColumnHolderProto* weight_column) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete weight_column_;
  }
  if (weight_column) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      weight_column = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, weight_column, submessage_arena);
    }
    set_has_weight_column();
  } else {
    clear_has_weight_column();
  }
  weight_column_ = weight_column;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedSampleScanProto.weight_column)
}

// repeated .zetasql.AnyResolvedExprProto partition_by_list = 8;
inline int ResolvedSampleScanProto::partition_by_list_size() const {
  return partition_by_list_.size();
}
inline void ResolvedSampleScanProto::clear_partition_by_list() {
  partition_by_list_.Clear();
}
inline ::zetasql::AnyResolvedExprProto* ResolvedSampleScanProto::mutable_partition_by_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSampleScanProto.partition_by_list)
  return partition_by_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
ResolvedSampleScanProto::mutable_partition_by_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedSampleScanProto.partition_by_list)
  return &partition_by_list_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedSampleScanProto::partition_by_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSampleScanProto.partition_by_list)
  return partition_by_list_.Get(index);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedSampleScanProto::add_partition_by_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedSampleScanProto.partition_by_list)
  return partition_by_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
ResolvedSampleScanProto::partition_by_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedSampleScanProto.partition_by_list)
  return partition_by_list_;
}

// -------------------------------------------------------------------

// ResolvedComputedColumnProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedComputedColumnProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedComputedColumnProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedComputedColumnProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedComputedColumnProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedComputedColumnProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedComputedColumnProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedComputedColumnProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedComputedColumnProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedComputedColumnProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedComputedColumnProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedComputedColumnProto.parent)
  return parent_;
}
inline void ResolvedComputedColumnProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedComputedColumnProto.parent)
}

// optional .zetasql.ResolvedColumnProto column = 2;
inline bool ResolvedComputedColumnProto::has_column() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedComputedColumnProto::set_has_column() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedComputedColumnProto::clear_has_column() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedComputedColumnProto::_internal_column() const {
  return *column_;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedComputedColumnProto::column() const {
  const ::zetasql::ResolvedColumnProto* p = column_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedComputedColumnProto.column)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedColumnProto*>(
      &::zetasql::_ResolvedColumnProto_default_instance_);
}
inline ::zetasql::ResolvedColumnProto* ResolvedComputedColumnProto::release_column() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedComputedColumnProto.column)
  clear_has_column();
  ::zetasql::ResolvedColumnProto* temp = column_;
  column_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedColumnProto* ResolvedComputedColumnProto::mutable_column() {
  set_has_column();
  if (column_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedColumnProto>(GetArenaNoVirtual());
    column_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedComputedColumnProto.column)
  return column_;
}
inline void ResolvedComputedColumnProto::set_allocated_column(::zetasql::ResolvedColumnProto* column) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(column_);
  }
  if (column) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      column = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, column, submessage_arena);
    }
    set_has_column();
  } else {
    clear_has_column();
  }
  column_ = column;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedComputedColumnProto.column)
}

// optional .zetasql.AnyResolvedExprProto expr = 3;
inline bool ResolvedComputedColumnProto::has_expr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedComputedColumnProto::set_has_expr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedComputedColumnProto::clear_has_expr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedComputedColumnProto::clear_expr() {
  if (expr_ != NULL) expr_->Clear();
  clear_has_expr();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedComputedColumnProto::_internal_expr() const {
  return *expr_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedComputedColumnProto::expr() const {
  const ::zetasql::AnyResolvedExprProto* p = expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedComputedColumnProto.expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedComputedColumnProto::release_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedComputedColumnProto.expr)
  clear_has_expr();
  ::zetasql::AnyResolvedExprProto* temp = expr_;
  expr_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedComputedColumnProto::mutable_expr() {
  set_has_expr();
  if (expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedComputedColumnProto.expr)
  return expr_;
}
inline void ResolvedComputedColumnProto::set_allocated_expr(::zetasql::AnyResolvedExprProto* expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete expr_;
  }
  if (expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expr, submessage_arena);
    }
    set_has_expr();
  } else {
    clear_has_expr();
  }
  expr_ = expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedComputedColumnProto.expr)
}

// -------------------------------------------------------------------

// ResolvedOrderByItemProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedOrderByItemProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedOrderByItemProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedOrderByItemProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedOrderByItemProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedOrderByItemProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedOrderByItemProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedOrderByItemProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedOrderByItemProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedOrderByItemProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedOrderByItemProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedOrderByItemProto.parent)
  return parent_;
}
inline void ResolvedOrderByItemProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedOrderByItemProto.parent)
}

// optional .zetasql.ResolvedColumnRefProto column_ref = 2;
inline bool ResolvedOrderByItemProto::has_column_ref() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedOrderByItemProto::set_has_column_ref() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedOrderByItemProto::clear_has_column_ref() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedOrderByItemProto::clear_column_ref() {
  if (column_ref_ != NULL) column_ref_->Clear();
  clear_has_column_ref();
}
inline const ::zetasql::ResolvedColumnRefProto& ResolvedOrderByItemProto::_internal_column_ref() const {
  return *column_ref_;
}
inline const ::zetasql::ResolvedColumnRefProto& ResolvedOrderByItemProto::column_ref() const {
  const ::zetasql::ResolvedColumnRefProto* p = column_ref_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedOrderByItemProto.column_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedColumnRefProto*>(
      &::zetasql::_ResolvedColumnRefProto_default_instance_);
}
inline ::zetasql::ResolvedColumnRefProto* ResolvedOrderByItemProto::release_column_ref() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedOrderByItemProto.column_ref)
  clear_has_column_ref();
  ::zetasql::ResolvedColumnRefProto* temp = column_ref_;
  column_ref_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedColumnRefProto* ResolvedOrderByItemProto::mutable_column_ref() {
  set_has_column_ref();
  if (column_ref_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedColumnRefProto>(GetArenaNoVirtual());
    column_ref_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedOrderByItemProto.column_ref)
  return column_ref_;
}
inline void ResolvedOrderByItemProto::set_allocated_column_ref(::zetasql::ResolvedColumnRefProto* column_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete column_ref_;
  }
  if (column_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      column_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, column_ref, submessage_arena);
    }
    set_has_column_ref();
  } else {
    clear_has_column_ref();
  }
  column_ref_ = column_ref;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedOrderByItemProto.column_ref)
}

// optional .zetasql.AnyResolvedExprProto collation_name = 3;
inline bool ResolvedOrderByItemProto::has_collation_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedOrderByItemProto::set_has_collation_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedOrderByItemProto::clear_has_collation_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedOrderByItemProto::clear_collation_name() {
  if (collation_name_ != NULL) collation_name_->Clear();
  clear_has_collation_name();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedOrderByItemProto::_internal_collation_name() const {
  return *collation_name_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedOrderByItemProto::collation_name() const {
  const ::zetasql::AnyResolvedExprProto* p = collation_name_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedOrderByItemProto.collation_name)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedOrderByItemProto::release_collation_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedOrderByItemProto.collation_name)
  clear_has_collation_name();
  ::zetasql::AnyResolvedExprProto* temp = collation_name_;
  collation_name_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedOrderByItemProto::mutable_collation_name() {
  set_has_collation_name();
  if (collation_name_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    collation_name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedOrderByItemProto.collation_name)
  return collation_name_;
}
inline void ResolvedOrderByItemProto::set_allocated_collation_name(::zetasql::AnyResolvedExprProto* collation_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete collation_name_;
  }
  if (collation_name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      collation_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, collation_name, submessage_arena);
    }
    set_has_collation_name();
  } else {
    clear_has_collation_name();
  }
  collation_name_ = collation_name;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedOrderByItemProto.collation_name)
}

// optional bool is_descending = 4;
inline bool ResolvedOrderByItemProto::has_is_descending() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResolvedOrderByItemProto::set_has_is_descending() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResolvedOrderByItemProto::clear_has_is_descending() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResolvedOrderByItemProto::clear_is_descending() {
  is_descending_ = false;
  clear_has_is_descending();
}
inline bool ResolvedOrderByItemProto::is_descending() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedOrderByItemProto.is_descending)
  return is_descending_;
}
inline void ResolvedOrderByItemProto::set_is_descending(bool value) {
  set_has_is_descending();
  is_descending_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedOrderByItemProto.is_descending)
}

// optional .zetasql.ResolvedOrderByItemEnums.NullOrderMode null_order = 5;
inline bool ResolvedOrderByItemProto::has_null_order() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResolvedOrderByItemProto::set_has_null_order() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResolvedOrderByItemProto::clear_has_null_order() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ResolvedOrderByItemProto::clear_null_order() {
  null_order_ = 0;
  clear_has_null_order();
}
inline ::zetasql::ResolvedOrderByItemEnums_NullOrderMode ResolvedOrderByItemProto::null_order() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedOrderByItemProto.null_order)
  return static_cast< ::zetasql::ResolvedOrderByItemEnums_NullOrderMode >(null_order_);
}
inline void ResolvedOrderByItemProto::set_null_order(::zetasql::ResolvedOrderByItemEnums_NullOrderMode value) {
  assert(::zetasql::ResolvedOrderByItemEnums_NullOrderMode_IsValid(value));
  set_has_null_order();
  null_order_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedOrderByItemProto.null_order)
}

// optional .zetasql.ResolvedCollationProto collation = 6;
inline bool ResolvedOrderByItemProto::has_collation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedOrderByItemProto::set_has_collation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedOrderByItemProto::clear_has_collation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::zetasql::ResolvedCollationProto& ResolvedOrderByItemProto::_internal_collation() const {
  return *collation_;
}
inline const ::zetasql::ResolvedCollationProto& ResolvedOrderByItemProto::collation() const {
  const ::zetasql::ResolvedCollationProto* p = collation_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedOrderByItemProto.collation)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedCollationProto*>(
      &::zetasql::_ResolvedCollationProto_default_instance_);
}
inline ::zetasql::ResolvedCollationProto* ResolvedOrderByItemProto::release_collation() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedOrderByItemProto.collation)
  clear_has_collation();
  ::zetasql::ResolvedCollationProto* temp = collation_;
  collation_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedCollationProto* ResolvedOrderByItemProto::mutable_collation() {
  set_has_collation();
  if (collation_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedCollationProto>(GetArenaNoVirtual());
    collation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedOrderByItemProto.collation)
  return collation_;
}
inline void ResolvedOrderByItemProto::set_allocated_collation(::zetasql::ResolvedCollationProto* collation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(collation_);
  }
  if (collation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      collation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, collation, submessage_arena);
    }
    set_has_collation();
  } else {
    clear_has_collation();
  }
  collation_ = collation;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedOrderByItemProto.collation)
}

// -------------------------------------------------------------------

// ResolvedColumnAnnotationsProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedColumnAnnotationsProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedColumnAnnotationsProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedColumnAnnotationsProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedColumnAnnotationsProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedColumnAnnotationsProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedColumnAnnotationsProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedColumnAnnotationsProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedColumnAnnotationsProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedColumnAnnotationsProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedColumnAnnotationsProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedColumnAnnotationsProto.parent)
  return parent_;
}
inline void ResolvedColumnAnnotationsProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedColumnAnnotationsProto.parent)
}

// optional .zetasql.AnyResolvedExprProto collation_name = 6;
inline bool ResolvedColumnAnnotationsProto::has_collation_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedColumnAnnotationsProto::set_has_collation_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedColumnAnnotationsProto::clear_has_collation_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedColumnAnnotationsProto::clear_collation_name() {
  if (collation_name_ != NULL) collation_name_->Clear();
  clear_has_collation_name();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedColumnAnnotationsProto::_internal_collation_name() const {
  return *collation_name_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedColumnAnnotationsProto::collation_name() const {
  const ::zetasql::AnyResolvedExprProto* p = collation_name_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedColumnAnnotationsProto.collation_name)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedColumnAnnotationsProto::release_collation_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedColumnAnnotationsProto.collation_name)
  clear_has_collation_name();
  ::zetasql::AnyResolvedExprProto* temp = collation_name_;
  collation_name_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedColumnAnnotationsProto::mutable_collation_name() {
  set_has_collation_name();
  if (collation_name_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    collation_name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedColumnAnnotationsProto.collation_name)
  return collation_name_;
}
inline void ResolvedColumnAnnotationsProto::set_allocated_collation_name(::zetasql::AnyResolvedExprProto* collation_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete collation_name_;
  }
  if (collation_name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      collation_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, collation_name, submessage_arena);
    }
    set_has_collation_name();
  } else {
    clear_has_collation_name();
  }
  collation_name_ = collation_name;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedColumnAnnotationsProto.collation_name)
}

// optional bool not_null = 2;
inline bool ResolvedColumnAnnotationsProto::has_not_null() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedColumnAnnotationsProto::set_has_not_null() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedColumnAnnotationsProto::clear_has_not_null() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedColumnAnnotationsProto::clear_not_null() {
  not_null_ = false;
  clear_has_not_null();
}
inline bool ResolvedColumnAnnotationsProto::not_null() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedColumnAnnotationsProto.not_null)
  return not_null_;
}
inline void ResolvedColumnAnnotationsProto::set_not_null(bool value) {
  set_has_not_null();
  not_null_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedColumnAnnotationsProto.not_null)
}

// repeated .zetasql.ResolvedOptionProto option_list = 3;
inline int ResolvedColumnAnnotationsProto::option_list_size() const {
  return option_list_.size();
}
inline void ResolvedColumnAnnotationsProto::clear_option_list() {
  option_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedColumnAnnotationsProto::mutable_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedColumnAnnotationsProto.option_list)
  return option_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedColumnAnnotationsProto::mutable_option_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedColumnAnnotationsProto.option_list)
  return &option_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedColumnAnnotationsProto::option_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedColumnAnnotationsProto.option_list)
  return option_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedColumnAnnotationsProto::add_option_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedColumnAnnotationsProto.option_list)
  return option_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedColumnAnnotationsProto::option_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedColumnAnnotationsProto.option_list)
  return option_list_;
}

// repeated .zetasql.ResolvedColumnAnnotationsProto child_list = 4;
inline int ResolvedColumnAnnotationsProto::child_list_size() const {
  return child_list_.size();
}
inline void ResolvedColumnAnnotationsProto::clear_child_list() {
  child_list_.Clear();
}
inline ::zetasql::ResolvedColumnAnnotationsProto* ResolvedColumnAnnotationsProto::mutable_child_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedColumnAnnotationsProto.child_list)
  return child_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnAnnotationsProto >*
ResolvedColumnAnnotationsProto::mutable_child_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedColumnAnnotationsProto.child_list)
  return &child_list_;
}
inline const ::zetasql::ResolvedColumnAnnotationsProto& ResolvedColumnAnnotationsProto::child_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedColumnAnnotationsProto.child_list)
  return child_list_.Get(index);
}
inline ::zetasql::ResolvedColumnAnnotationsProto* ResolvedColumnAnnotationsProto::add_child_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedColumnAnnotationsProto.child_list)
  return child_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnAnnotationsProto >&
ResolvedColumnAnnotationsProto::child_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedColumnAnnotationsProto.child_list)
  return child_list_;
}

// optional .zetasql.TypeParametersProto type_parameters = 5;
inline bool ResolvedColumnAnnotationsProto::has_type_parameters() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedColumnAnnotationsProto::set_has_type_parameters() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedColumnAnnotationsProto::clear_has_type_parameters() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::TypeParametersProto& ResolvedColumnAnnotationsProto::_internal_type_parameters() const {
  return *type_parameters_;
}
inline const ::zetasql::TypeParametersProto& ResolvedColumnAnnotationsProto::type_parameters() const {
  const ::zetasql::TypeParametersProto* p = type_parameters_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedColumnAnnotationsProto.type_parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TypeParametersProto*>(
      &::zetasql::_TypeParametersProto_default_instance_);
}
inline ::zetasql::TypeParametersProto* ResolvedColumnAnnotationsProto::release_type_parameters() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedColumnAnnotationsProto.type_parameters)
  clear_has_type_parameters();
  ::zetasql::TypeParametersProto* temp = type_parameters_;
  type_parameters_ = NULL;
  return temp;
}
inline ::zetasql::TypeParametersProto* ResolvedColumnAnnotationsProto::mutable_type_parameters() {
  set_has_type_parameters();
  if (type_parameters_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TypeParametersProto>(GetArenaNoVirtual());
    type_parameters_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedColumnAnnotationsProto.type_parameters)
  return type_parameters_;
}
inline void ResolvedColumnAnnotationsProto::set_allocated_type_parameters(::zetasql::TypeParametersProto* type_parameters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_parameters_);
  }
  if (type_parameters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      type_parameters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type_parameters, submessage_arena);
    }
    set_has_type_parameters();
  } else {
    clear_has_type_parameters();
  }
  type_parameters_ = type_parameters;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedColumnAnnotationsProto.type_parameters)
}

// -------------------------------------------------------------------

// ResolvedGeneratedColumnInfoProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedGeneratedColumnInfoProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedGeneratedColumnInfoProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedGeneratedColumnInfoProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedGeneratedColumnInfoProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedGeneratedColumnInfoProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedGeneratedColumnInfoProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGeneratedColumnInfoProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedGeneratedColumnInfoProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedGeneratedColumnInfoProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedGeneratedColumnInfoProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedGeneratedColumnInfoProto.parent)
  return parent_;
}
inline void ResolvedGeneratedColumnInfoProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedGeneratedColumnInfoProto.parent)
}

// optional .zetasql.AnyResolvedExprProto expression = 2;
inline bool ResolvedGeneratedColumnInfoProto::has_expression() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedGeneratedColumnInfoProto::set_has_expression() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedGeneratedColumnInfoProto::clear_has_expression() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedGeneratedColumnInfoProto::clear_expression() {
  if (expression_ != NULL) expression_->Clear();
  clear_has_expression();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedGeneratedColumnInfoProto::_internal_expression() const {
  return *expression_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedGeneratedColumnInfoProto::expression() const {
  const ::zetasql::AnyResolvedExprProto* p = expression_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGeneratedColumnInfoProto.expression)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedGeneratedColumnInfoProto::release_expression() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedGeneratedColumnInfoProto.expression)
  clear_has_expression();
  ::zetasql::AnyResolvedExprProto* temp = expression_;
  expression_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedGeneratedColumnInfoProto::mutable_expression() {
  set_has_expression();
  if (expression_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    expression_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedGeneratedColumnInfoProto.expression)
  return expression_;
}
inline void ResolvedGeneratedColumnInfoProto::set_allocated_expression(::zetasql::AnyResolvedExprProto* expression) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete expression_;
  }
  if (expression) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expression = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    set_has_expression();
  } else {
    clear_has_expression();
  }
  expression_ = expression;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedGeneratedColumnInfoProto.expression)
}

// optional .zetasql.ResolvedGeneratedColumnInfoEnums.StoredMode stored_mode = 5;
inline bool ResolvedGeneratedColumnInfoProto::has_stored_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedGeneratedColumnInfoProto::set_has_stored_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedGeneratedColumnInfoProto::clear_has_stored_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedGeneratedColumnInfoProto::clear_stored_mode() {
  stored_mode_ = 0;
  clear_has_stored_mode();
}
inline ::zetasql::ResolvedGeneratedColumnInfoEnums_StoredMode ResolvedGeneratedColumnInfoProto::stored_mode() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGeneratedColumnInfoProto.stored_mode)
  return static_cast< ::zetasql::ResolvedGeneratedColumnInfoEnums_StoredMode >(stored_mode_);
}
inline void ResolvedGeneratedColumnInfoProto::set_stored_mode(::zetasql::ResolvedGeneratedColumnInfoEnums_StoredMode value) {
  assert(::zetasql::ResolvedGeneratedColumnInfoEnums_StoredMode_IsValid(value));
  set_has_stored_mode();
  stored_mode_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedGeneratedColumnInfoProto.stored_mode)
}

// -------------------------------------------------------------------

// ResolvedColumnDefaultValueProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedColumnDefaultValueProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedColumnDefaultValueProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedColumnDefaultValueProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedColumnDefaultValueProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedColumnDefaultValueProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedColumnDefaultValueProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedColumnDefaultValueProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedColumnDefaultValueProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedColumnDefaultValueProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedColumnDefaultValueProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedColumnDefaultValueProto.parent)
  return parent_;
}
inline void ResolvedColumnDefaultValueProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedColumnDefaultValueProto.parent)
}

// optional .zetasql.AnyResolvedExprProto expression = 2;
inline bool ResolvedColumnDefaultValueProto::has_expression() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedColumnDefaultValueProto::set_has_expression() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedColumnDefaultValueProto::clear_has_expression() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedColumnDefaultValueProto::clear_expression() {
  if (expression_ != NULL) expression_->Clear();
  clear_has_expression();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedColumnDefaultValueProto::_internal_expression() const {
  return *expression_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedColumnDefaultValueProto::expression() const {
  const ::zetasql::AnyResolvedExprProto* p = expression_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedColumnDefaultValueProto.expression)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedColumnDefaultValueProto::release_expression() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedColumnDefaultValueProto.expression)
  clear_has_expression();
  ::zetasql::AnyResolvedExprProto* temp = expression_;
  expression_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedColumnDefaultValueProto::mutable_expression() {
  set_has_expression();
  if (expression_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    expression_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedColumnDefaultValueProto.expression)
  return expression_;
}
inline void ResolvedColumnDefaultValueProto::set_allocated_expression(::zetasql::AnyResolvedExprProto* expression) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete expression_;
  }
  if (expression) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expression = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    set_has_expression();
  } else {
    clear_has_expression();
  }
  expression_ = expression;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedColumnDefaultValueProto.expression)
}

// optional string sql = 3;
inline bool ResolvedColumnDefaultValueProto::has_sql() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedColumnDefaultValueProto::set_has_sql() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedColumnDefaultValueProto::clear_has_sql() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedColumnDefaultValueProto::clear_sql() {
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sql();
}
inline const ::std::string& ResolvedColumnDefaultValueProto::sql() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedColumnDefaultValueProto.sql)
  return sql_.GetNoArena();
}
inline void ResolvedColumnDefaultValueProto::set_sql(const ::std::string& value) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedColumnDefaultValueProto.sql)
}
#if LANG_CXX11
inline void ResolvedColumnDefaultValueProto::set_sql(::std::string&& value) {
  set_has_sql();
  sql_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedColumnDefaultValueProto.sql)
}
#endif
inline void ResolvedColumnDefaultValueProto::set_sql(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedColumnDefaultValueProto.sql)
}
inline void ResolvedColumnDefaultValueProto::set_sql(const char* value, size_t size) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedColumnDefaultValueProto.sql)
}
inline ::std::string* ResolvedColumnDefaultValueProto::mutable_sql() {
  set_has_sql();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedColumnDefaultValueProto.sql)
  return sql_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedColumnDefaultValueProto::release_sql() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedColumnDefaultValueProto.sql)
  if (!has_sql()) {
    return NULL;
  }
  clear_has_sql();
  return sql_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedColumnDefaultValueProto::set_allocated_sql(::std::string* sql) {
  if (sql != NULL) {
    set_has_sql();
  } else {
    clear_has_sql();
  }
  sql_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedColumnDefaultValueProto.sql)
}

// -------------------------------------------------------------------

// ResolvedColumnDefinitionProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedColumnDefinitionProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedColumnDefinitionProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedColumnDefinitionProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedColumnDefinitionProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedColumnDefinitionProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedColumnDefinitionProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedColumnDefinitionProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedColumnDefinitionProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedColumnDefinitionProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedColumnDefinitionProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedColumnDefinitionProto.parent)
  return parent_;
}
inline void ResolvedColumnDefinitionProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedColumnDefinitionProto.parent)
}

// optional string name = 2;
inline bool ResolvedColumnDefinitionProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedColumnDefinitionProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedColumnDefinitionProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedColumnDefinitionProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ResolvedColumnDefinitionProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedColumnDefinitionProto.name)
  return name_.GetNoArena();
}
inline void ResolvedColumnDefinitionProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedColumnDefinitionProto.name)
}
#if LANG_CXX11
inline void ResolvedColumnDefinitionProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedColumnDefinitionProto.name)
}
#endif
inline void ResolvedColumnDefinitionProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedColumnDefinitionProto.name)
}
inline void ResolvedColumnDefinitionProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedColumnDefinitionProto.name)
}
inline ::std::string* ResolvedColumnDefinitionProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedColumnDefinitionProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedColumnDefinitionProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedColumnDefinitionProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedColumnDefinitionProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedColumnDefinitionProto.name)
}

// optional .zetasql.TypeProto type = 3;
inline bool ResolvedColumnDefinitionProto::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedColumnDefinitionProto::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedColumnDefinitionProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasql::TypeProto& ResolvedColumnDefinitionProto::_internal_type() const {
  return *type_;
}
inline const ::zetasql::TypeProto& ResolvedColumnDefinitionProto::type() const {
  const ::zetasql::TypeProto* p = type_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedColumnDefinitionProto.type)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TypeProto*>(
      &::zetasql::_TypeProto_default_instance_);
}
inline ::zetasql::TypeProto* ResolvedColumnDefinitionProto::release_type() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedColumnDefinitionProto.type)
  clear_has_type();
  ::zetasql::TypeProto* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::zetasql::TypeProto* ResolvedColumnDefinitionProto::mutable_type() {
  set_has_type();
  if (type_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedColumnDefinitionProto.type)
  return type_;
}
inline void ResolvedColumnDefinitionProto::set_allocated_type(::zetasql::TypeProto* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_);
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(type)->GetArena();
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    set_has_type();
  } else {
    clear_has_type();
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedColumnDefinitionProto.type)
}

// optional .zetasql.ResolvedColumnAnnotationsProto annotations = 4;
inline bool ResolvedColumnDefinitionProto::has_annotations() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedColumnDefinitionProto::set_has_annotations() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedColumnDefinitionProto::clear_has_annotations() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedColumnDefinitionProto::clear_annotations() {
  if (annotations_ != NULL) annotations_->Clear();
  clear_has_annotations();
}
inline const ::zetasql::ResolvedColumnAnnotationsProto& ResolvedColumnDefinitionProto::_internal_annotations() const {
  return *annotations_;
}
inline const ::zetasql::ResolvedColumnAnnotationsProto& ResolvedColumnDefinitionProto::annotations() const {
  const ::zetasql::ResolvedColumnAnnotationsProto* p = annotations_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedColumnDefinitionProto.annotations)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedColumnAnnotationsProto*>(
      &::zetasql::_ResolvedColumnAnnotationsProto_default_instance_);
}
inline ::zetasql::ResolvedColumnAnnotationsProto* ResolvedColumnDefinitionProto::release_annotations() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedColumnDefinitionProto.annotations)
  clear_has_annotations();
  ::zetasql::ResolvedColumnAnnotationsProto* temp = annotations_;
  annotations_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedColumnAnnotationsProto* ResolvedColumnDefinitionProto::mutable_annotations() {
  set_has_annotations();
  if (annotations_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedColumnAnnotationsProto>(GetArenaNoVirtual());
    annotations_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedColumnDefinitionProto.annotations)
  return annotations_;
}
inline void ResolvedColumnDefinitionProto::set_allocated_annotations(::zetasql::ResolvedColumnAnnotationsProto* annotations) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete annotations_;
  }
  if (annotations) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      annotations = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, annotations, submessage_arena);
    }
    set_has_annotations();
  } else {
    clear_has_annotations();
  }
  annotations_ = annotations;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedColumnDefinitionProto.annotations)
}

// optional bool is_hidden = 5;
inline bool ResolvedColumnDefinitionProto::has_is_hidden() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ResolvedColumnDefinitionProto::set_has_is_hidden() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ResolvedColumnDefinitionProto::clear_has_is_hidden() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ResolvedColumnDefinitionProto::clear_is_hidden() {
  is_hidden_ = false;
  clear_has_is_hidden();
}
inline bool ResolvedColumnDefinitionProto::is_hidden() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedColumnDefinitionProto.is_hidden)
  return is_hidden_;
}
inline void ResolvedColumnDefinitionProto::set_is_hidden(bool value) {
  set_has_is_hidden();
  is_hidden_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedColumnDefinitionProto.is_hidden)
}

// optional .zetasql.ResolvedColumnProto column = 6;
inline bool ResolvedColumnDefinitionProto::has_column() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResolvedColumnDefinitionProto::set_has_column() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResolvedColumnDefinitionProto::clear_has_column() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedColumnDefinitionProto::_internal_column() const {
  return *column_;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedColumnDefinitionProto::column() const {
  const ::zetasql::ResolvedColumnProto* p = column_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedColumnDefinitionProto.column)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedColumnProto*>(
      &::zetasql::_ResolvedColumnProto_default_instance_);
}
inline ::zetasql::ResolvedColumnProto* ResolvedColumnDefinitionProto::release_column() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedColumnDefinitionProto.column)
  clear_has_column();
  ::zetasql::ResolvedColumnProto* temp = column_;
  column_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedColumnProto* ResolvedColumnDefinitionProto::mutable_column() {
  set_has_column();
  if (column_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedColumnProto>(GetArenaNoVirtual());
    column_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedColumnDefinitionProto.column)
  return column_;
}
inline void ResolvedColumnDefinitionProto::set_allocated_column(::zetasql::ResolvedColumnProto* column) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(column_);
  }
  if (column) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      column = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, column, submessage_arena);
    }
    set_has_column();
  } else {
    clear_has_column();
  }
  column_ = column;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedColumnDefinitionProto.column)
}

// optional .zetasql.ResolvedGeneratedColumnInfoProto generated_column_info = 7;
inline bool ResolvedColumnDefinitionProto::has_generated_column_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResolvedColumnDefinitionProto::set_has_generated_column_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResolvedColumnDefinitionProto::clear_has_generated_column_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ResolvedColumnDefinitionProto::clear_generated_column_info() {
  if (generated_column_info_ != NULL) generated_column_info_->Clear();
  clear_has_generated_column_info();
}
inline const ::zetasql::ResolvedGeneratedColumnInfoProto& ResolvedColumnDefinitionProto::_internal_generated_column_info() const {
  return *generated_column_info_;
}
inline const ::zetasql::ResolvedGeneratedColumnInfoProto& ResolvedColumnDefinitionProto::generated_column_info() const {
  const ::zetasql::ResolvedGeneratedColumnInfoProto* p = generated_column_info_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedColumnDefinitionProto.generated_column_info)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedGeneratedColumnInfoProto*>(
      &::zetasql::_ResolvedGeneratedColumnInfoProto_default_instance_);
}
inline ::zetasql::ResolvedGeneratedColumnInfoProto* ResolvedColumnDefinitionProto::release_generated_column_info() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedColumnDefinitionProto.generated_column_info)
  clear_has_generated_column_info();
  ::zetasql::ResolvedGeneratedColumnInfoProto* temp = generated_column_info_;
  generated_column_info_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedGeneratedColumnInfoProto* ResolvedColumnDefinitionProto::mutable_generated_column_info() {
  set_has_generated_column_info();
  if (generated_column_info_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedGeneratedColumnInfoProto>(GetArenaNoVirtual());
    generated_column_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedColumnDefinitionProto.generated_column_info)
  return generated_column_info_;
}
inline void ResolvedColumnDefinitionProto::set_allocated_generated_column_info(::zetasql::ResolvedGeneratedColumnInfoProto* generated_column_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete generated_column_info_;
  }
  if (generated_column_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      generated_column_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, generated_column_info, submessage_arena);
    }
    set_has_generated_column_info();
  } else {
    clear_has_generated_column_info();
  }
  generated_column_info_ = generated_column_info;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedColumnDefinitionProto.generated_column_info)
}

// optional .zetasql.ResolvedColumnDefaultValueProto default_value = 9;
inline bool ResolvedColumnDefinitionProto::has_default_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResolvedColumnDefinitionProto::set_has_default_value() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ResolvedColumnDefinitionProto::clear_has_default_value() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ResolvedColumnDefinitionProto::clear_default_value() {
  if (default_value_ != NULL) default_value_->Clear();
  clear_has_default_value();
}
inline const ::zetasql::ResolvedColumnDefaultValueProto& ResolvedColumnDefinitionProto::_internal_default_value() const {
  return *default_value_;
}
inline const ::zetasql::ResolvedColumnDefaultValueProto& ResolvedColumnDefinitionProto::default_value() const {
  const ::zetasql::ResolvedColumnDefaultValueProto* p = default_value_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedColumnDefinitionProto.default_value)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedColumnDefaultValueProto*>(
      &::zetasql::_ResolvedColumnDefaultValueProto_default_instance_);
}
inline ::zetasql::ResolvedColumnDefaultValueProto* ResolvedColumnDefinitionProto::release_default_value() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedColumnDefinitionProto.default_value)
  clear_has_default_value();
  ::zetasql::ResolvedColumnDefaultValueProto* temp = default_value_;
  default_value_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedColumnDefaultValueProto* ResolvedColumnDefinitionProto::mutable_default_value() {
  set_has_default_value();
  if (default_value_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedColumnDefaultValueProto>(GetArenaNoVirtual());
    default_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedColumnDefinitionProto.default_value)
  return default_value_;
}
inline void ResolvedColumnDefinitionProto::set_allocated_default_value(::zetasql::ResolvedColumnDefaultValueProto* default_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete default_value_;
  }
  if (default_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      default_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, default_value, submessage_arena);
    }
    set_has_default_value();
  } else {
    clear_has_default_value();
  }
  default_value_ = default_value;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedColumnDefinitionProto.default_value)
}

// -------------------------------------------------------------------

// AnyResolvedConstraintProto

// optional .zetasql.ResolvedPrimaryKeyProto resolved_primary_key_node = 92;
inline bool AnyResolvedConstraintProto::has_resolved_primary_key_node() const {
  return node_case() == kResolvedPrimaryKeyNode;
}
inline void AnyResolvedConstraintProto::set_has_resolved_primary_key_node() {
  _oneof_case_[0] = kResolvedPrimaryKeyNode;
}
inline void AnyResolvedConstraintProto::clear_resolved_primary_key_node() {
  if (has_resolved_primary_key_node()) {
    delete node_.resolved_primary_key_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedPrimaryKeyProto& AnyResolvedConstraintProto::_internal_resolved_primary_key_node() const {
  return *node_.resolved_primary_key_node_;
}
inline ::zetasql::ResolvedPrimaryKeyProto* AnyResolvedConstraintProto::release_resolved_primary_key_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedConstraintProto.resolved_primary_key_node)
  if (has_resolved_primary_key_node()) {
    clear_has_node();
      ::zetasql::ResolvedPrimaryKeyProto* temp = node_.resolved_primary_key_node_;
    node_.resolved_primary_key_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedPrimaryKeyProto& AnyResolvedConstraintProto::resolved_primary_key_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedConstraintProto.resolved_primary_key_node)
  return has_resolved_primary_key_node()
      ? *node_.resolved_primary_key_node_
      : *reinterpret_cast< ::zetasql::ResolvedPrimaryKeyProto*>(&::zetasql::_ResolvedPrimaryKeyProto_default_instance_);
}
inline ::zetasql::ResolvedPrimaryKeyProto* AnyResolvedConstraintProto::mutable_resolved_primary_key_node() {
  if (!has_resolved_primary_key_node()) {
    clear_node();
    set_has_resolved_primary_key_node();
    node_.resolved_primary_key_node_ = CreateMaybeMessage< ::zetasql::ResolvedPrimaryKeyProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedConstraintProto.resolved_primary_key_node)
  return node_.resolved_primary_key_node_;
}

// optional .zetasql.ResolvedForeignKeyProto resolved_foreign_key_node = 110;
inline bool AnyResolvedConstraintProto::has_resolved_foreign_key_node() const {
  return node_case() == kResolvedForeignKeyNode;
}
inline void AnyResolvedConstraintProto::set_has_resolved_foreign_key_node() {
  _oneof_case_[0] = kResolvedForeignKeyNode;
}
inline void AnyResolvedConstraintProto::clear_resolved_foreign_key_node() {
  if (has_resolved_foreign_key_node()) {
    delete node_.resolved_foreign_key_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedForeignKeyProto& AnyResolvedConstraintProto::_internal_resolved_foreign_key_node() const {
  return *node_.resolved_foreign_key_node_;
}
inline ::zetasql::ResolvedForeignKeyProto* AnyResolvedConstraintProto::release_resolved_foreign_key_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedConstraintProto.resolved_foreign_key_node)
  if (has_resolved_foreign_key_node()) {
    clear_has_node();
      ::zetasql::ResolvedForeignKeyProto* temp = node_.resolved_foreign_key_node_;
    node_.resolved_foreign_key_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedForeignKeyProto& AnyResolvedConstraintProto::resolved_foreign_key_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedConstraintProto.resolved_foreign_key_node)
  return has_resolved_foreign_key_node()
      ? *node_.resolved_foreign_key_node_
      : *reinterpret_cast< ::zetasql::ResolvedForeignKeyProto*>(&::zetasql::_ResolvedForeignKeyProto_default_instance_);
}
inline ::zetasql::ResolvedForeignKeyProto* AnyResolvedConstraintProto::mutable_resolved_foreign_key_node() {
  if (!has_resolved_foreign_key_node()) {
    clear_node();
    set_has_resolved_foreign_key_node();
    node_.resolved_foreign_key_node_ = CreateMaybeMessage< ::zetasql::ResolvedForeignKeyProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedConstraintProto.resolved_foreign_key_node)
  return node_.resolved_foreign_key_node_;
}

// optional .zetasql.ResolvedCheckConstraintProto resolved_check_constraint_node = 113;
inline bool AnyResolvedConstraintProto::has_resolved_check_constraint_node() const {
  return node_case() == kResolvedCheckConstraintNode;
}
inline void AnyResolvedConstraintProto::set_has_resolved_check_constraint_node() {
  _oneof_case_[0] = kResolvedCheckConstraintNode;
}
inline void AnyResolvedConstraintProto::clear_resolved_check_constraint_node() {
  if (has_resolved_check_constraint_node()) {
    delete node_.resolved_check_constraint_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedCheckConstraintProto& AnyResolvedConstraintProto::_internal_resolved_check_constraint_node() const {
  return *node_.resolved_check_constraint_node_;
}
inline ::zetasql::ResolvedCheckConstraintProto* AnyResolvedConstraintProto::release_resolved_check_constraint_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedConstraintProto.resolved_check_constraint_node)
  if (has_resolved_check_constraint_node()) {
    clear_has_node();
      ::zetasql::ResolvedCheckConstraintProto* temp = node_.resolved_check_constraint_node_;
    node_.resolved_check_constraint_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedCheckConstraintProto& AnyResolvedConstraintProto::resolved_check_constraint_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedConstraintProto.resolved_check_constraint_node)
  return has_resolved_check_constraint_node()
      ? *node_.resolved_check_constraint_node_
      : *reinterpret_cast< ::zetasql::ResolvedCheckConstraintProto*>(&::zetasql::_ResolvedCheckConstraintProto_default_instance_);
}
inline ::zetasql::ResolvedCheckConstraintProto* AnyResolvedConstraintProto::mutable_resolved_check_constraint_node() {
  if (!has_resolved_check_constraint_node()) {
    clear_node();
    set_has_resolved_check_constraint_node();
    node_.resolved_check_constraint_node_ = CreateMaybeMessage< ::zetasql::ResolvedCheckConstraintProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedConstraintProto.resolved_check_constraint_node)
  return node_.resolved_check_constraint_node_;
}

inline bool AnyResolvedConstraintProto::has_node() const {
  return node_case() != NODE_NOT_SET;
}
inline void AnyResolvedConstraintProto::clear_has_node() {
  _oneof_case_[0] = NODE_NOT_SET;
}
inline AnyResolvedConstraintProto::NodeCase AnyResolvedConstraintProto::node_case() const {
  return AnyResolvedConstraintProto::NodeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResolvedConstraintProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedConstraintProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedConstraintProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedConstraintProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedConstraintProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedConstraintProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedConstraintProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedConstraintProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedConstraintProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedConstraintProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedConstraintProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedConstraintProto.parent)
  return parent_;
}
inline void ResolvedConstraintProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedConstraintProto.parent)
}

// -------------------------------------------------------------------

// ResolvedPrimaryKeyProto

// optional .zetasql.ResolvedConstraintProto parent = 1;
inline bool ResolvedPrimaryKeyProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedPrimaryKeyProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedPrimaryKeyProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedPrimaryKeyProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedConstraintProto& ResolvedPrimaryKeyProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedConstraintProto& ResolvedPrimaryKeyProto::parent() const {
  const ::zetasql::ResolvedConstraintProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedPrimaryKeyProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedConstraintProto*>(
      &::zetasql::_ResolvedConstraintProto_default_instance_);
}
inline ::zetasql::ResolvedConstraintProto* ResolvedPrimaryKeyProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedPrimaryKeyProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedConstraintProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedConstraintProto* ResolvedPrimaryKeyProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedConstraintProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedPrimaryKeyProto.parent)
  return parent_;
}
inline void ResolvedPrimaryKeyProto::set_allocated_parent(::zetasql::ResolvedConstraintProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedPrimaryKeyProto.parent)
}

// repeated int64 column_offset_list = 2;
inline int ResolvedPrimaryKeyProto::column_offset_list_size() const {
  return column_offset_list_.size();
}
inline void ResolvedPrimaryKeyProto::clear_column_offset_list() {
  column_offset_list_.Clear();
}
inline ::google::protobuf::int64 ResolvedPrimaryKeyProto::column_offset_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedPrimaryKeyProto.column_offset_list)
  return column_offset_list_.Get(index);
}
inline void ResolvedPrimaryKeyProto::set_column_offset_list(int index, ::google::protobuf::int64 value) {
  column_offset_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedPrimaryKeyProto.column_offset_list)
}
inline void ResolvedPrimaryKeyProto::add_column_offset_list(::google::protobuf::int64 value) {
  column_offset_list_.Add(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedPrimaryKeyProto.column_offset_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ResolvedPrimaryKeyProto::column_offset_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedPrimaryKeyProto.column_offset_list)
  return column_offset_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ResolvedPrimaryKeyProto::mutable_column_offset_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedPrimaryKeyProto.column_offset_list)
  return &column_offset_list_;
}

// repeated .zetasql.ResolvedOptionProto option_list = 3;
inline int ResolvedPrimaryKeyProto::option_list_size() const {
  return option_list_.size();
}
inline void ResolvedPrimaryKeyProto::clear_option_list() {
  option_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedPrimaryKeyProto::mutable_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedPrimaryKeyProto.option_list)
  return option_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedPrimaryKeyProto::mutable_option_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedPrimaryKeyProto.option_list)
  return &option_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedPrimaryKeyProto::option_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedPrimaryKeyProto.option_list)
  return option_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedPrimaryKeyProto::add_option_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedPrimaryKeyProto.option_list)
  return option_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedPrimaryKeyProto::option_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedPrimaryKeyProto.option_list)
  return option_list_;
}

// optional bool unenforced = 4;
inline bool ResolvedPrimaryKeyProto::has_unenforced() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedPrimaryKeyProto::set_has_unenforced() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedPrimaryKeyProto::clear_has_unenforced() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedPrimaryKeyProto::clear_unenforced() {
  unenforced_ = false;
  clear_has_unenforced();
}
inline bool ResolvedPrimaryKeyProto::unenforced() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedPrimaryKeyProto.unenforced)
  return unenforced_;
}
inline void ResolvedPrimaryKeyProto::set_unenforced(bool value) {
  set_has_unenforced();
  unenforced_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedPrimaryKeyProto.unenforced)
}

// optional string constraint_name = 5;
inline bool ResolvedPrimaryKeyProto::has_constraint_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedPrimaryKeyProto::set_has_constraint_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedPrimaryKeyProto::clear_has_constraint_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedPrimaryKeyProto::clear_constraint_name() {
  constraint_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_constraint_name();
}
inline const ::std::string& ResolvedPrimaryKeyProto::constraint_name() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedPrimaryKeyProto.constraint_name)
  return constraint_name_.GetNoArena();
}
inline void ResolvedPrimaryKeyProto::set_constraint_name(const ::std::string& value) {
  set_has_constraint_name();
  constraint_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedPrimaryKeyProto.constraint_name)
}
#if LANG_CXX11
inline void ResolvedPrimaryKeyProto::set_constraint_name(::std::string&& value) {
  set_has_constraint_name();
  constraint_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedPrimaryKeyProto.constraint_name)
}
#endif
inline void ResolvedPrimaryKeyProto::set_constraint_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_constraint_name();
  constraint_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedPrimaryKeyProto.constraint_name)
}
inline void ResolvedPrimaryKeyProto::set_constraint_name(const char* value, size_t size) {
  set_has_constraint_name();
  constraint_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedPrimaryKeyProto.constraint_name)
}
inline ::std::string* ResolvedPrimaryKeyProto::mutable_constraint_name() {
  set_has_constraint_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedPrimaryKeyProto.constraint_name)
  return constraint_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedPrimaryKeyProto::release_constraint_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedPrimaryKeyProto.constraint_name)
  if (!has_constraint_name()) {
    return NULL;
  }
  clear_has_constraint_name();
  return constraint_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedPrimaryKeyProto::set_allocated_constraint_name(::std::string* constraint_name) {
  if (constraint_name != NULL) {
    set_has_constraint_name();
  } else {
    clear_has_constraint_name();
  }
  constraint_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), constraint_name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedPrimaryKeyProto.constraint_name)
}

// repeated string column_name_list = 6;
inline int ResolvedPrimaryKeyProto::column_name_list_size() const {
  return column_name_list_.size();
}
inline void ResolvedPrimaryKeyProto::clear_column_name_list() {
  column_name_list_.Clear();
}
inline const ::std::string& ResolvedPrimaryKeyProto::column_name_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedPrimaryKeyProto.column_name_list)
  return column_name_list_.Get(index);
}
inline ::std::string* ResolvedPrimaryKeyProto::mutable_column_name_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedPrimaryKeyProto.column_name_list)
  return column_name_list_.Mutable(index);
}
inline void ResolvedPrimaryKeyProto::set_column_name_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedPrimaryKeyProto.column_name_list)
  column_name_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedPrimaryKeyProto::set_column_name_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedPrimaryKeyProto.column_name_list)
  column_name_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedPrimaryKeyProto::set_column_name_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  column_name_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedPrimaryKeyProto.column_name_list)
}
inline void ResolvedPrimaryKeyProto::set_column_name_list(int index, const char* value, size_t size) {
  column_name_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedPrimaryKeyProto.column_name_list)
}
inline ::std::string* ResolvedPrimaryKeyProto::add_column_name_list() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedPrimaryKeyProto.column_name_list)
  return column_name_list_.Add();
}
inline void ResolvedPrimaryKeyProto::add_column_name_list(const ::std::string& value) {
  column_name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedPrimaryKeyProto.column_name_list)
}
#if LANG_CXX11
inline void ResolvedPrimaryKeyProto::add_column_name_list(::std::string&& value) {
  column_name_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedPrimaryKeyProto.column_name_list)
}
#endif
inline void ResolvedPrimaryKeyProto::add_column_name_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  column_name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedPrimaryKeyProto.column_name_list)
}
inline void ResolvedPrimaryKeyProto::add_column_name_list(const char* value, size_t size) {
  column_name_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedPrimaryKeyProto.column_name_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedPrimaryKeyProto::column_name_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedPrimaryKeyProto.column_name_list)
  return column_name_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedPrimaryKeyProto::mutable_column_name_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedPrimaryKeyProto.column_name_list)
  return &column_name_list_;
}

// -------------------------------------------------------------------

// ResolvedForeignKeyProto

// optional .zetasql.ResolvedConstraintProto parent = 1;
inline bool ResolvedForeignKeyProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedForeignKeyProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedForeignKeyProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedForeignKeyProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedConstraintProto& ResolvedForeignKeyProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedConstraintProto& ResolvedForeignKeyProto::parent() const {
  const ::zetasql::ResolvedConstraintProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedForeignKeyProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedConstraintProto*>(
      &::zetasql::_ResolvedConstraintProto_default_instance_);
}
inline ::zetasql::ResolvedConstraintProto* ResolvedForeignKeyProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedForeignKeyProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedConstraintProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedConstraintProto* ResolvedForeignKeyProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedConstraintProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedForeignKeyProto.parent)
  return parent_;
}
inline void ResolvedForeignKeyProto::set_allocated_parent(::zetasql::ResolvedConstraintProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedForeignKeyProto.parent)
}

// optional string constraint_name = 2;
inline bool ResolvedForeignKeyProto::has_constraint_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedForeignKeyProto::set_has_constraint_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedForeignKeyProto::clear_has_constraint_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedForeignKeyProto::clear_constraint_name() {
  constraint_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_constraint_name();
}
inline const ::std::string& ResolvedForeignKeyProto::constraint_name() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedForeignKeyProto.constraint_name)
  return constraint_name_.GetNoArena();
}
inline void ResolvedForeignKeyProto::set_constraint_name(const ::std::string& value) {
  set_has_constraint_name();
  constraint_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedForeignKeyProto.constraint_name)
}
#if LANG_CXX11
inline void ResolvedForeignKeyProto::set_constraint_name(::std::string&& value) {
  set_has_constraint_name();
  constraint_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedForeignKeyProto.constraint_name)
}
#endif
inline void ResolvedForeignKeyProto::set_constraint_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_constraint_name();
  constraint_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedForeignKeyProto.constraint_name)
}
inline void ResolvedForeignKeyProto::set_constraint_name(const char* value, size_t size) {
  set_has_constraint_name();
  constraint_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedForeignKeyProto.constraint_name)
}
inline ::std::string* ResolvedForeignKeyProto::mutable_constraint_name() {
  set_has_constraint_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedForeignKeyProto.constraint_name)
  return constraint_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedForeignKeyProto::release_constraint_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedForeignKeyProto.constraint_name)
  if (!has_constraint_name()) {
    return NULL;
  }
  clear_has_constraint_name();
  return constraint_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedForeignKeyProto::set_allocated_constraint_name(::std::string* constraint_name) {
  if (constraint_name != NULL) {
    set_has_constraint_name();
  } else {
    clear_has_constraint_name();
  }
  constraint_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), constraint_name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedForeignKeyProto.constraint_name)
}

// repeated int64 referencing_column_offset_list = 3;
inline int ResolvedForeignKeyProto::referencing_column_offset_list_size() const {
  return referencing_column_offset_list_.size();
}
inline void ResolvedForeignKeyProto::clear_referencing_column_offset_list() {
  referencing_column_offset_list_.Clear();
}
inline ::google::protobuf::int64 ResolvedForeignKeyProto::referencing_column_offset_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedForeignKeyProto.referencing_column_offset_list)
  return referencing_column_offset_list_.Get(index);
}
inline void ResolvedForeignKeyProto::set_referencing_column_offset_list(int index, ::google::protobuf::int64 value) {
  referencing_column_offset_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedForeignKeyProto.referencing_column_offset_list)
}
inline void ResolvedForeignKeyProto::add_referencing_column_offset_list(::google::protobuf::int64 value) {
  referencing_column_offset_list_.Add(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedForeignKeyProto.referencing_column_offset_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ResolvedForeignKeyProto::referencing_column_offset_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedForeignKeyProto.referencing_column_offset_list)
  return referencing_column_offset_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ResolvedForeignKeyProto::mutable_referencing_column_offset_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedForeignKeyProto.referencing_column_offset_list)
  return &referencing_column_offset_list_;
}

// optional .zetasql.TableRefProto referenced_table = 4;
inline bool ResolvedForeignKeyProto::has_referenced_table() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedForeignKeyProto::set_has_referenced_table() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedForeignKeyProto::clear_has_referenced_table() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasql::TableRefProto& ResolvedForeignKeyProto::_internal_referenced_table() const {
  return *referenced_table_;
}
inline const ::zetasql::TableRefProto& ResolvedForeignKeyProto::referenced_table() const {
  const ::zetasql::TableRefProto* p = referenced_table_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedForeignKeyProto.referenced_table)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TableRefProto*>(
      &::zetasql::_TableRefProto_default_instance_);
}
inline ::zetasql::TableRefProto* ResolvedForeignKeyProto::release_referenced_table() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedForeignKeyProto.referenced_table)
  clear_has_referenced_table();
  ::zetasql::TableRefProto* temp = referenced_table_;
  referenced_table_ = NULL;
  return temp;
}
inline ::zetasql::TableRefProto* ResolvedForeignKeyProto::mutable_referenced_table() {
  set_has_referenced_table();
  if (referenced_table_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TableRefProto>(GetArenaNoVirtual());
    referenced_table_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedForeignKeyProto.referenced_table)
  return referenced_table_;
}
inline void ResolvedForeignKeyProto::set_allocated_referenced_table(::zetasql::TableRefProto* referenced_table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(referenced_table_);
  }
  if (referenced_table) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      referenced_table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, referenced_table, submessage_arena);
    }
    set_has_referenced_table();
  } else {
    clear_has_referenced_table();
  }
  referenced_table_ = referenced_table;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedForeignKeyProto.referenced_table)
}

// repeated int64 referenced_column_offset_list = 5;
inline int ResolvedForeignKeyProto::referenced_column_offset_list_size() const {
  return referenced_column_offset_list_.size();
}
inline void ResolvedForeignKeyProto::clear_referenced_column_offset_list() {
  referenced_column_offset_list_.Clear();
}
inline ::google::protobuf::int64 ResolvedForeignKeyProto::referenced_column_offset_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedForeignKeyProto.referenced_column_offset_list)
  return referenced_column_offset_list_.Get(index);
}
inline void ResolvedForeignKeyProto::set_referenced_column_offset_list(int index, ::google::protobuf::int64 value) {
  referenced_column_offset_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedForeignKeyProto.referenced_column_offset_list)
}
inline void ResolvedForeignKeyProto::add_referenced_column_offset_list(::google::protobuf::int64 value) {
  referenced_column_offset_list_.Add(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedForeignKeyProto.referenced_column_offset_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ResolvedForeignKeyProto::referenced_column_offset_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedForeignKeyProto.referenced_column_offset_list)
  return referenced_column_offset_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ResolvedForeignKeyProto::mutable_referenced_column_offset_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedForeignKeyProto.referenced_column_offset_list)
  return &referenced_column_offset_list_;
}

// optional .zetasql.ResolvedForeignKeyEnums.MatchMode match_mode = 6;
inline bool ResolvedForeignKeyProto::has_match_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedForeignKeyProto::set_has_match_mode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedForeignKeyProto::clear_has_match_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedForeignKeyProto::clear_match_mode() {
  match_mode_ = 0;
  clear_has_match_mode();
}
inline ::zetasql::ResolvedForeignKeyEnums_MatchMode ResolvedForeignKeyProto::match_mode() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedForeignKeyProto.match_mode)
  return static_cast< ::zetasql::ResolvedForeignKeyEnums_MatchMode >(match_mode_);
}
inline void ResolvedForeignKeyProto::set_match_mode(::zetasql::ResolvedForeignKeyEnums_MatchMode value) {
  assert(::zetasql::ResolvedForeignKeyEnums_MatchMode_IsValid(value));
  set_has_match_mode();
  match_mode_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedForeignKeyProto.match_mode)
}

// optional .zetasql.ResolvedForeignKeyEnums.ActionOperation update_action = 7;
inline bool ResolvedForeignKeyProto::has_update_action() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResolvedForeignKeyProto::set_has_update_action() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResolvedForeignKeyProto::clear_has_update_action() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResolvedForeignKeyProto::clear_update_action() {
  update_action_ = 0;
  clear_has_update_action();
}
inline ::zetasql::ResolvedForeignKeyEnums_ActionOperation ResolvedForeignKeyProto::update_action() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedForeignKeyProto.update_action)
  return static_cast< ::zetasql::ResolvedForeignKeyEnums_ActionOperation >(update_action_);
}
inline void ResolvedForeignKeyProto::set_update_action(::zetasql::ResolvedForeignKeyEnums_ActionOperation value) {
  assert(::zetasql::ResolvedForeignKeyEnums_ActionOperation_IsValid(value));
  set_has_update_action();
  update_action_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedForeignKeyProto.update_action)
}

// optional .zetasql.ResolvedForeignKeyEnums.ActionOperation delete_action = 8;
inline bool ResolvedForeignKeyProto::has_delete_action() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResolvedForeignKeyProto::set_has_delete_action() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResolvedForeignKeyProto::clear_has_delete_action() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ResolvedForeignKeyProto::clear_delete_action() {
  delete_action_ = 0;
  clear_has_delete_action();
}
inline ::zetasql::ResolvedForeignKeyEnums_ActionOperation ResolvedForeignKeyProto::delete_action() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedForeignKeyProto.delete_action)
  return static_cast< ::zetasql::ResolvedForeignKeyEnums_ActionOperation >(delete_action_);
}
inline void ResolvedForeignKeyProto::set_delete_action(::zetasql::ResolvedForeignKeyEnums_ActionOperation value) {
  assert(::zetasql::ResolvedForeignKeyEnums_ActionOperation_IsValid(value));
  set_has_delete_action();
  delete_action_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedForeignKeyProto.delete_action)
}

// optional bool enforced = 9;
inline bool ResolvedForeignKeyProto::has_enforced() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResolvedForeignKeyProto::set_has_enforced() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ResolvedForeignKeyProto::clear_has_enforced() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ResolvedForeignKeyProto::clear_enforced() {
  enforced_ = false;
  clear_has_enforced();
}
inline bool ResolvedForeignKeyProto::enforced() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedForeignKeyProto.enforced)
  return enforced_;
}
inline void ResolvedForeignKeyProto::set_enforced(bool value) {
  set_has_enforced();
  enforced_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedForeignKeyProto.enforced)
}

// repeated .zetasql.ResolvedOptionProto option_list = 10;
inline int ResolvedForeignKeyProto::option_list_size() const {
  return option_list_.size();
}
inline void ResolvedForeignKeyProto::clear_option_list() {
  option_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedForeignKeyProto::mutable_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedForeignKeyProto.option_list)
  return option_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedForeignKeyProto::mutable_option_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedForeignKeyProto.option_list)
  return &option_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedForeignKeyProto::option_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedForeignKeyProto.option_list)
  return option_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedForeignKeyProto::add_option_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedForeignKeyProto.option_list)
  return option_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedForeignKeyProto::option_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedForeignKeyProto.option_list)
  return option_list_;
}

// repeated string referencing_column_list = 11;
inline int ResolvedForeignKeyProto::referencing_column_list_size() const {
  return referencing_column_list_.size();
}
inline void ResolvedForeignKeyProto::clear_referencing_column_list() {
  referencing_column_list_.Clear();
}
inline const ::std::string& ResolvedForeignKeyProto::referencing_column_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedForeignKeyProto.referencing_column_list)
  return referencing_column_list_.Get(index);
}
inline ::std::string* ResolvedForeignKeyProto::mutable_referencing_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedForeignKeyProto.referencing_column_list)
  return referencing_column_list_.Mutable(index);
}
inline void ResolvedForeignKeyProto::set_referencing_column_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedForeignKeyProto.referencing_column_list)
  referencing_column_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedForeignKeyProto::set_referencing_column_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedForeignKeyProto.referencing_column_list)
  referencing_column_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedForeignKeyProto::set_referencing_column_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  referencing_column_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedForeignKeyProto.referencing_column_list)
}
inline void ResolvedForeignKeyProto::set_referencing_column_list(int index, const char* value, size_t size) {
  referencing_column_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedForeignKeyProto.referencing_column_list)
}
inline ::std::string* ResolvedForeignKeyProto::add_referencing_column_list() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedForeignKeyProto.referencing_column_list)
  return referencing_column_list_.Add();
}
inline void ResolvedForeignKeyProto::add_referencing_column_list(const ::std::string& value) {
  referencing_column_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedForeignKeyProto.referencing_column_list)
}
#if LANG_CXX11
inline void ResolvedForeignKeyProto::add_referencing_column_list(::std::string&& value) {
  referencing_column_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedForeignKeyProto.referencing_column_list)
}
#endif
inline void ResolvedForeignKeyProto::add_referencing_column_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  referencing_column_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedForeignKeyProto.referencing_column_list)
}
inline void ResolvedForeignKeyProto::add_referencing_column_list(const char* value, size_t size) {
  referencing_column_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedForeignKeyProto.referencing_column_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedForeignKeyProto::referencing_column_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedForeignKeyProto.referencing_column_list)
  return referencing_column_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedForeignKeyProto::mutable_referencing_column_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedForeignKeyProto.referencing_column_list)
  return &referencing_column_list_;
}

// -------------------------------------------------------------------

// ResolvedCheckConstraintProto

// optional .zetasql.ResolvedConstraintProto parent = 1;
inline bool ResolvedCheckConstraintProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedCheckConstraintProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedCheckConstraintProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedCheckConstraintProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedConstraintProto& ResolvedCheckConstraintProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedConstraintProto& ResolvedCheckConstraintProto::parent() const {
  const ::zetasql::ResolvedConstraintProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCheckConstraintProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedConstraintProto*>(
      &::zetasql::_ResolvedConstraintProto_default_instance_);
}
inline ::zetasql::ResolvedConstraintProto* ResolvedCheckConstraintProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCheckConstraintProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedConstraintProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedConstraintProto* ResolvedCheckConstraintProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedConstraintProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCheckConstraintProto.parent)
  return parent_;
}
inline void ResolvedCheckConstraintProto::set_allocated_parent(::zetasql::ResolvedConstraintProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCheckConstraintProto.parent)
}

// optional string constraint_name = 2;
inline bool ResolvedCheckConstraintProto::has_constraint_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedCheckConstraintProto::set_has_constraint_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedCheckConstraintProto::clear_has_constraint_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedCheckConstraintProto::clear_constraint_name() {
  constraint_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_constraint_name();
}
inline const ::std::string& ResolvedCheckConstraintProto::constraint_name() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCheckConstraintProto.constraint_name)
  return constraint_name_.GetNoArena();
}
inline void ResolvedCheckConstraintProto::set_constraint_name(const ::std::string& value) {
  set_has_constraint_name();
  constraint_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCheckConstraintProto.constraint_name)
}
#if LANG_CXX11
inline void ResolvedCheckConstraintProto::set_constraint_name(::std::string&& value) {
  set_has_constraint_name();
  constraint_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedCheckConstraintProto.constraint_name)
}
#endif
inline void ResolvedCheckConstraintProto::set_constraint_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_constraint_name();
  constraint_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedCheckConstraintProto.constraint_name)
}
inline void ResolvedCheckConstraintProto::set_constraint_name(const char* value, size_t size) {
  set_has_constraint_name();
  constraint_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedCheckConstraintProto.constraint_name)
}
inline ::std::string* ResolvedCheckConstraintProto::mutable_constraint_name() {
  set_has_constraint_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCheckConstraintProto.constraint_name)
  return constraint_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedCheckConstraintProto::release_constraint_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCheckConstraintProto.constraint_name)
  if (!has_constraint_name()) {
    return NULL;
  }
  clear_has_constraint_name();
  return constraint_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedCheckConstraintProto::set_allocated_constraint_name(::std::string* constraint_name) {
  if (constraint_name != NULL) {
    set_has_constraint_name();
  } else {
    clear_has_constraint_name();
  }
  constraint_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), constraint_name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCheckConstraintProto.constraint_name)
}

// optional .zetasql.AnyResolvedExprProto expression = 3;
inline bool ResolvedCheckConstraintProto::has_expression() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedCheckConstraintProto::set_has_expression() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedCheckConstraintProto::clear_has_expression() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedCheckConstraintProto::clear_expression() {
  if (expression_ != NULL) expression_->Clear();
  clear_has_expression();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedCheckConstraintProto::_internal_expression() const {
  return *expression_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedCheckConstraintProto::expression() const {
  const ::zetasql::AnyResolvedExprProto* p = expression_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCheckConstraintProto.expression)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCheckConstraintProto::release_expression() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCheckConstraintProto.expression)
  clear_has_expression();
  ::zetasql::AnyResolvedExprProto* temp = expression_;
  expression_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCheckConstraintProto::mutable_expression() {
  set_has_expression();
  if (expression_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    expression_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCheckConstraintProto.expression)
  return expression_;
}
inline void ResolvedCheckConstraintProto::set_allocated_expression(::zetasql::AnyResolvedExprProto* expression) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete expression_;
  }
  if (expression) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expression = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    set_has_expression();
  } else {
    clear_has_expression();
  }
  expression_ = expression;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCheckConstraintProto.expression)
}

// optional bool enforced = 4;
inline bool ResolvedCheckConstraintProto::has_enforced() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedCheckConstraintProto::set_has_enforced() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedCheckConstraintProto::clear_has_enforced() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedCheckConstraintProto::clear_enforced() {
  enforced_ = false;
  clear_has_enforced();
}
inline bool ResolvedCheckConstraintProto::enforced() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCheckConstraintProto.enforced)
  return enforced_;
}
inline void ResolvedCheckConstraintProto::set_enforced(bool value) {
  set_has_enforced();
  enforced_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCheckConstraintProto.enforced)
}

// repeated .zetasql.ResolvedOptionProto option_list = 5;
inline int ResolvedCheckConstraintProto::option_list_size() const {
  return option_list_.size();
}
inline void ResolvedCheckConstraintProto::clear_option_list() {
  option_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedCheckConstraintProto::mutable_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCheckConstraintProto.option_list)
  return option_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedCheckConstraintProto::mutable_option_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCheckConstraintProto.option_list)
  return &option_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedCheckConstraintProto::option_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCheckConstraintProto.option_list)
  return option_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedCheckConstraintProto::add_option_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCheckConstraintProto.option_list)
  return option_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedCheckConstraintProto::option_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCheckConstraintProto.option_list)
  return option_list_;
}

// -------------------------------------------------------------------

// ResolvedOutputColumnProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedOutputColumnProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedOutputColumnProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedOutputColumnProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedOutputColumnProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedOutputColumnProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedOutputColumnProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedOutputColumnProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedOutputColumnProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedOutputColumnProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedOutputColumnProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedOutputColumnProto.parent)
  return parent_;
}
inline void ResolvedOutputColumnProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedOutputColumnProto.parent)
}

// optional string name = 2;
inline bool ResolvedOutputColumnProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedOutputColumnProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedOutputColumnProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedOutputColumnProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ResolvedOutputColumnProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedOutputColumnProto.name)
  return name_.GetNoArena();
}
inline void ResolvedOutputColumnProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedOutputColumnProto.name)
}
#if LANG_CXX11
inline void ResolvedOutputColumnProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedOutputColumnProto.name)
}
#endif
inline void ResolvedOutputColumnProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedOutputColumnProto.name)
}
inline void ResolvedOutputColumnProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedOutputColumnProto.name)
}
inline ::std::string* ResolvedOutputColumnProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedOutputColumnProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedOutputColumnProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedOutputColumnProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedOutputColumnProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedOutputColumnProto.name)
}

// optional .zetasql.ResolvedColumnProto column = 3;
inline bool ResolvedOutputColumnProto::has_column() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedOutputColumnProto::set_has_column() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedOutputColumnProto::clear_has_column() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedOutputColumnProto::_internal_column() const {
  return *column_;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedOutputColumnProto::column() const {
  const ::zetasql::ResolvedColumnProto* p = column_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedOutputColumnProto.column)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedColumnProto*>(
      &::zetasql::_ResolvedColumnProto_default_instance_);
}
inline ::zetasql::ResolvedColumnProto* ResolvedOutputColumnProto::release_column() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedOutputColumnProto.column)
  clear_has_column();
  ::zetasql::ResolvedColumnProto* temp = column_;
  column_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedColumnProto* ResolvedOutputColumnProto::mutable_column() {
  set_has_column();
  if (column_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedColumnProto>(GetArenaNoVirtual());
    column_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedOutputColumnProto.column)
  return column_;
}
inline void ResolvedOutputColumnProto::set_allocated_column(::zetasql::ResolvedColumnProto* column) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(column_);
  }
  if (column) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      column = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, column, submessage_arena);
    }
    set_has_column();
  } else {
    clear_has_column();
  }
  column_ = column;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedOutputColumnProto.column)
}

// -------------------------------------------------------------------

// ResolvedProjectScanProto

// optional .zetasql.ResolvedScanProto parent = 1;
inline bool ResolvedProjectScanProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedProjectScanProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedProjectScanProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedProjectScanProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedScanProto& ResolvedProjectScanProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedScanProto& ResolvedProjectScanProto::parent() const {
  const ::zetasql::ResolvedScanProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedProjectScanProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedScanProto*>(
      &::zetasql::_ResolvedScanProto_default_instance_);
}
inline ::zetasql::ResolvedScanProto* ResolvedProjectScanProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedProjectScanProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedScanProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedScanProto* ResolvedProjectScanProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedScanProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedProjectScanProto.parent)
  return parent_;
}
inline void ResolvedProjectScanProto::set_allocated_parent(::zetasql::ResolvedScanProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedProjectScanProto.parent)
}

// repeated .zetasql.ResolvedComputedColumnProto expr_list = 2;
inline int ResolvedProjectScanProto::expr_list_size() const {
  return expr_list_.size();
}
inline void ResolvedProjectScanProto::clear_expr_list() {
  expr_list_.Clear();
}
inline ::zetasql::ResolvedComputedColumnProto* ResolvedProjectScanProto::mutable_expr_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedProjectScanProto.expr_list)
  return expr_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >*
ResolvedProjectScanProto::mutable_expr_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedProjectScanProto.expr_list)
  return &expr_list_;
}
inline const ::zetasql::ResolvedComputedColumnProto& ResolvedProjectScanProto::expr_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedProjectScanProto.expr_list)
  return expr_list_.Get(index);
}
inline ::zetasql::ResolvedComputedColumnProto* ResolvedProjectScanProto::add_expr_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedProjectScanProto.expr_list)
  return expr_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >&
ResolvedProjectScanProto::expr_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedProjectScanProto.expr_list)
  return expr_list_;
}

// optional .zetasql.AnyResolvedScanProto input_scan = 3;
inline bool ResolvedProjectScanProto::has_input_scan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedProjectScanProto::set_has_input_scan() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedProjectScanProto::clear_has_input_scan() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedProjectScanProto::clear_input_scan() {
  if (input_scan_ != NULL) input_scan_->Clear();
  clear_has_input_scan();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedProjectScanProto::_internal_input_scan() const {
  return *input_scan_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedProjectScanProto::input_scan() const {
  const ::zetasql::AnyResolvedScanProto* p = input_scan_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedProjectScanProto.input_scan)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedProjectScanProto::release_input_scan() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedProjectScanProto.input_scan)
  clear_has_input_scan();
  ::zetasql::AnyResolvedScanProto* temp = input_scan_;
  input_scan_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedProjectScanProto::mutable_input_scan() {
  set_has_input_scan();
  if (input_scan_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    input_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedProjectScanProto.input_scan)
  return input_scan_;
}
inline void ResolvedProjectScanProto::set_allocated_input_scan(::zetasql::AnyResolvedScanProto* input_scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete input_scan_;
  }
  if (input_scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      input_scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input_scan, submessage_arena);
    }
    set_has_input_scan();
  } else {
    clear_has_input_scan();
  }
  input_scan_ = input_scan;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedProjectScanProto.input_scan)
}

// -------------------------------------------------------------------

// ResolvedTVFScanProto

// optional .zetasql.ResolvedScanProto parent = 1;
inline bool ResolvedTVFScanProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedTVFScanProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedTVFScanProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedTVFScanProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedScanProto& ResolvedTVFScanProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedScanProto& ResolvedTVFScanProto::parent() const {
  const ::zetasql::ResolvedScanProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedTVFScanProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedScanProto*>(
      &::zetasql::_ResolvedScanProto_default_instance_);
}
inline ::zetasql::ResolvedScanProto* ResolvedTVFScanProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedTVFScanProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedScanProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedScanProto* ResolvedTVFScanProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedScanProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedTVFScanProto.parent)
  return parent_;
}
inline void ResolvedTVFScanProto::set_allocated_parent(::zetasql::ResolvedScanProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedTVFScanProto.parent)
}

// optional .zetasql.TableValuedFunctionRefProto tvf = 2;
inline bool ResolvedTVFScanProto::has_tvf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedTVFScanProto::set_has_tvf() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedTVFScanProto::clear_has_tvf() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasql::TableValuedFunctionRefProto& ResolvedTVFScanProto::_internal_tvf() const {
  return *tvf_;
}
inline const ::zetasql::TableValuedFunctionRefProto& ResolvedTVFScanProto::tvf() const {
  const ::zetasql::TableValuedFunctionRefProto* p = tvf_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedTVFScanProto.tvf)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TableValuedFunctionRefProto*>(
      &::zetasql::_TableValuedFunctionRefProto_default_instance_);
}
inline ::zetasql::TableValuedFunctionRefProto* ResolvedTVFScanProto::release_tvf() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedTVFScanProto.tvf)
  clear_has_tvf();
  ::zetasql::TableValuedFunctionRefProto* temp = tvf_;
  tvf_ = NULL;
  return temp;
}
inline ::zetasql::TableValuedFunctionRefProto* ResolvedTVFScanProto::mutable_tvf() {
  set_has_tvf();
  if (tvf_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TableValuedFunctionRefProto>(GetArenaNoVirtual());
    tvf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedTVFScanProto.tvf)
  return tvf_;
}
inline void ResolvedTVFScanProto::set_allocated_tvf(::zetasql::TableValuedFunctionRefProto* tvf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tvf_);
  }
  if (tvf) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tvf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tvf, submessage_arena);
    }
    set_has_tvf();
  } else {
    clear_has_tvf();
  }
  tvf_ = tvf;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedTVFScanProto.tvf)
}

// optional .zetasql.TVFSignatureProto signature = 3;
inline bool ResolvedTVFScanProto::has_signature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedTVFScanProto::set_has_signature() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedTVFScanProto::clear_has_signature() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::zetasql::TVFSignatureProto& ResolvedTVFScanProto::_internal_signature() const {
  return *signature_;
}
inline const ::zetasql::TVFSignatureProto& ResolvedTVFScanProto::signature() const {
  const ::zetasql::TVFSignatureProto* p = signature_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedTVFScanProto.signature)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TVFSignatureProto*>(
      &::zetasql::_TVFSignatureProto_default_instance_);
}
inline ::zetasql::TVFSignatureProto* ResolvedTVFScanProto::release_signature() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedTVFScanProto.signature)
  clear_has_signature();
  ::zetasql::TVFSignatureProto* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline ::zetasql::TVFSignatureProto* ResolvedTVFScanProto::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TVFSignatureProto>(GetArenaNoVirtual());
    signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedTVFScanProto.signature)
  return signature_;
}
inline void ResolvedTVFScanProto::set_allocated_signature(::zetasql::TVFSignatureProto* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(signature_);
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedTVFScanProto.signature)
}

// repeated .zetasql.ResolvedFunctionArgumentProto argument_list = 5;
inline int ResolvedTVFScanProto::argument_list_size() const {
  return argument_list_.size();
}
inline void ResolvedTVFScanProto::clear_argument_list() {
  argument_list_.Clear();
}
inline ::zetasql::ResolvedFunctionArgumentProto* ResolvedTVFScanProto::mutable_argument_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedTVFScanProto.argument_list)
  return argument_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedFunctionArgumentProto >*
ResolvedTVFScanProto::mutable_argument_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedTVFScanProto.argument_list)
  return &argument_list_;
}
inline const ::zetasql::ResolvedFunctionArgumentProto& ResolvedTVFScanProto::argument_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedTVFScanProto.argument_list)
  return argument_list_.Get(index);
}
inline ::zetasql::ResolvedFunctionArgumentProto* ResolvedTVFScanProto::add_argument_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedTVFScanProto.argument_list)
  return argument_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedFunctionArgumentProto >&
ResolvedTVFScanProto::argument_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedTVFScanProto.argument_list)
  return argument_list_;
}

// repeated int64 column_index_list = 8;
inline int ResolvedTVFScanProto::column_index_list_size() const {
  return column_index_list_.size();
}
inline void ResolvedTVFScanProto::clear_column_index_list() {
  column_index_list_.Clear();
}
inline ::google::protobuf::int64 ResolvedTVFScanProto::column_index_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedTVFScanProto.column_index_list)
  return column_index_list_.Get(index);
}
inline void ResolvedTVFScanProto::set_column_index_list(int index, ::google::protobuf::int64 value) {
  column_index_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedTVFScanProto.column_index_list)
}
inline void ResolvedTVFScanProto::add_column_index_list(::google::protobuf::int64 value) {
  column_index_list_.Add(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedTVFScanProto.column_index_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ResolvedTVFScanProto::column_index_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedTVFScanProto.column_index_list)
  return column_index_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ResolvedTVFScanProto::mutable_column_index_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedTVFScanProto.column_index_list)
  return &column_index_list_;
}

// optional string alias = 6;
inline bool ResolvedTVFScanProto::has_alias() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedTVFScanProto::set_has_alias() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedTVFScanProto::clear_has_alias() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedTVFScanProto::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
inline const ::std::string& ResolvedTVFScanProto::alias() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedTVFScanProto.alias)
  return alias_.GetNoArena();
}
inline void ResolvedTVFScanProto::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedTVFScanProto.alias)
}
#if LANG_CXX11
inline void ResolvedTVFScanProto::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedTVFScanProto.alias)
}
#endif
inline void ResolvedTVFScanProto::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedTVFScanProto.alias)
}
inline void ResolvedTVFScanProto::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedTVFScanProto.alias)
}
inline ::std::string* ResolvedTVFScanProto::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedTVFScanProto.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedTVFScanProto::release_alias() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedTVFScanProto.alias)
  if (!has_alias()) {
    return NULL;
  }
  clear_has_alias();
  return alias_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedTVFScanProto::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedTVFScanProto.alias)
}

// optional .zetasql.FunctionSignatureProto function_call_signature = 7;
inline bool ResolvedTVFScanProto::has_function_call_signature() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResolvedTVFScanProto::set_has_function_call_signature() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResolvedTVFScanProto::clear_has_function_call_signature() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::zetasql::FunctionSignatureProto& ResolvedTVFScanProto::_internal_function_call_signature() const {
  return *function_call_signature_;
}
inline const ::zetasql::FunctionSignatureProto& ResolvedTVFScanProto::function_call_signature() const {
  const ::zetasql::FunctionSignatureProto* p = function_call_signature_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedTVFScanProto.function_call_signature)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::FunctionSignatureProto*>(
      &::zetasql::_FunctionSignatureProto_default_instance_);
}
inline ::zetasql::FunctionSignatureProto* ResolvedTVFScanProto::release_function_call_signature() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedTVFScanProto.function_call_signature)
  clear_has_function_call_signature();
  ::zetasql::FunctionSignatureProto* temp = function_call_signature_;
  function_call_signature_ = NULL;
  return temp;
}
inline ::zetasql::FunctionSignatureProto* ResolvedTVFScanProto::mutable_function_call_signature() {
  set_has_function_call_signature();
  if (function_call_signature_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::FunctionSignatureProto>(GetArenaNoVirtual());
    function_call_signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedTVFScanProto.function_call_signature)
  return function_call_signature_;
}
inline void ResolvedTVFScanProto::set_allocated_function_call_signature(::zetasql::FunctionSignatureProto* function_call_signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(function_call_signature_);
  }
  if (function_call_signature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      function_call_signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, function_call_signature, submessage_arena);
    }
    set_has_function_call_signature();
  } else {
    clear_has_function_call_signature();
  }
  function_call_signature_ = function_call_signature;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedTVFScanProto.function_call_signature)
}

// -------------------------------------------------------------------

// ResolvedGroupRowsScanProto

// optional .zetasql.ResolvedScanProto parent = 1;
inline bool ResolvedGroupRowsScanProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedGroupRowsScanProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedGroupRowsScanProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedGroupRowsScanProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedScanProto& ResolvedGroupRowsScanProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedScanProto& ResolvedGroupRowsScanProto::parent() const {
  const ::zetasql::ResolvedScanProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGroupRowsScanProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedScanProto*>(
      &::zetasql::_ResolvedScanProto_default_instance_);
}
inline ::zetasql::ResolvedScanProto* ResolvedGroupRowsScanProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedGroupRowsScanProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedScanProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedScanProto* ResolvedGroupRowsScanProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedScanProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedGroupRowsScanProto.parent)
  return parent_;
}
inline void ResolvedGroupRowsScanProto::set_allocated_parent(::zetasql::ResolvedScanProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedGroupRowsScanProto.parent)
}

// repeated .zetasql.ResolvedComputedColumnProto input_column_list = 2;
inline int ResolvedGroupRowsScanProto::input_column_list_size() const {
  return input_column_list_.size();
}
inline void ResolvedGroupRowsScanProto::clear_input_column_list() {
  input_column_list_.Clear();
}
inline ::zetasql::ResolvedComputedColumnProto* ResolvedGroupRowsScanProto::mutable_input_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedGroupRowsScanProto.input_column_list)
  return input_column_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >*
ResolvedGroupRowsScanProto::mutable_input_column_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedGroupRowsScanProto.input_column_list)
  return &input_column_list_;
}
inline const ::zetasql::ResolvedComputedColumnProto& ResolvedGroupRowsScanProto::input_column_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGroupRowsScanProto.input_column_list)
  return input_column_list_.Get(index);
}
inline ::zetasql::ResolvedComputedColumnProto* ResolvedGroupRowsScanProto::add_input_column_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedGroupRowsScanProto.input_column_list)
  return input_column_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >&
ResolvedGroupRowsScanProto::input_column_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedGroupRowsScanProto.input_column_list)
  return input_column_list_;
}

// optional string alias = 3;
inline bool ResolvedGroupRowsScanProto::has_alias() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedGroupRowsScanProto::set_has_alias() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedGroupRowsScanProto::clear_has_alias() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedGroupRowsScanProto::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
inline const ::std::string& ResolvedGroupRowsScanProto::alias() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGroupRowsScanProto.alias)
  return alias_.GetNoArena();
}
inline void ResolvedGroupRowsScanProto::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedGroupRowsScanProto.alias)
}
#if LANG_CXX11
inline void ResolvedGroupRowsScanProto::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedGroupRowsScanProto.alias)
}
#endif
inline void ResolvedGroupRowsScanProto::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedGroupRowsScanProto.alias)
}
inline void ResolvedGroupRowsScanProto::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedGroupRowsScanProto.alias)
}
inline ::std::string* ResolvedGroupRowsScanProto::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedGroupRowsScanProto.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedGroupRowsScanProto::release_alias() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedGroupRowsScanProto.alias)
  if (!has_alias()) {
    return NULL;
  }
  clear_has_alias();
  return alias_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedGroupRowsScanProto::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedGroupRowsScanProto.alias)
}

// -------------------------------------------------------------------

// ResolvedFunctionArgumentProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedFunctionArgumentProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedFunctionArgumentProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedFunctionArgumentProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedFunctionArgumentProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedFunctionArgumentProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedFunctionArgumentProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFunctionArgumentProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedFunctionArgumentProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedFunctionArgumentProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedFunctionArgumentProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFunctionArgumentProto.parent)
  return parent_;
}
inline void ResolvedFunctionArgumentProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedFunctionArgumentProto.parent)
}

// optional .zetasql.AnyResolvedExprProto expr = 2;
inline bool ResolvedFunctionArgumentProto::has_expr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedFunctionArgumentProto::set_has_expr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedFunctionArgumentProto::clear_has_expr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedFunctionArgumentProto::clear_expr() {
  if (expr_ != NULL) expr_->Clear();
  clear_has_expr();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedFunctionArgumentProto::_internal_expr() const {
  return *expr_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedFunctionArgumentProto::expr() const {
  const ::zetasql::AnyResolvedExprProto* p = expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFunctionArgumentProto.expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedFunctionArgumentProto::release_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedFunctionArgumentProto.expr)
  clear_has_expr();
  ::zetasql::AnyResolvedExprProto* temp = expr_;
  expr_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedFunctionArgumentProto::mutable_expr() {
  set_has_expr();
  if (expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFunctionArgumentProto.expr)
  return expr_;
}
inline void ResolvedFunctionArgumentProto::set_allocated_expr(::zetasql::AnyResolvedExprProto* expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete expr_;
  }
  if (expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expr, submessage_arena);
    }
    set_has_expr();
  } else {
    clear_has_expr();
  }
  expr_ = expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedFunctionArgumentProto.expr)
}

// optional .zetasql.AnyResolvedScanProto scan = 3;
inline bool ResolvedFunctionArgumentProto::has_scan() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedFunctionArgumentProto::set_has_scan() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedFunctionArgumentProto::clear_has_scan() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedFunctionArgumentProto::clear_scan() {
  if (scan_ != NULL) scan_->Clear();
  clear_has_scan();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedFunctionArgumentProto::_internal_scan() const {
  return *scan_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedFunctionArgumentProto::scan() const {
  const ::zetasql::AnyResolvedScanProto* p = scan_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFunctionArgumentProto.scan)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedFunctionArgumentProto::release_scan() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedFunctionArgumentProto.scan)
  clear_has_scan();
  ::zetasql::AnyResolvedScanProto* temp = scan_;
  scan_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedFunctionArgumentProto::mutable_scan() {
  set_has_scan();
  if (scan_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFunctionArgumentProto.scan)
  return scan_;
}
inline void ResolvedFunctionArgumentProto::set_allocated_scan(::zetasql::AnyResolvedScanProto* scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scan_;
  }
  if (scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scan, submessage_arena);
    }
    set_has_scan();
  } else {
    clear_has_scan();
  }
  scan_ = scan;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedFunctionArgumentProto.scan)
}

// optional .zetasql.ResolvedModelProto model = 5;
inline bool ResolvedFunctionArgumentProto::has_model() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedFunctionArgumentProto::set_has_model() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedFunctionArgumentProto::clear_has_model() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedFunctionArgumentProto::clear_model() {
  if (model_ != NULL) model_->Clear();
  clear_has_model();
}
inline const ::zetasql::ResolvedModelProto& ResolvedFunctionArgumentProto::_internal_model() const {
  return *model_;
}
inline const ::zetasql::ResolvedModelProto& ResolvedFunctionArgumentProto::model() const {
  const ::zetasql::ResolvedModelProto* p = model_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFunctionArgumentProto.model)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedModelProto*>(
      &::zetasql::_ResolvedModelProto_default_instance_);
}
inline ::zetasql::ResolvedModelProto* ResolvedFunctionArgumentProto::release_model() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedFunctionArgumentProto.model)
  clear_has_model();
  ::zetasql::ResolvedModelProto* temp = model_;
  model_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedModelProto* ResolvedFunctionArgumentProto::mutable_model() {
  set_has_model();
  if (model_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedModelProto>(GetArenaNoVirtual());
    model_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFunctionArgumentProto.model)
  return model_;
}
inline void ResolvedFunctionArgumentProto::set_allocated_model(::zetasql::ResolvedModelProto* model) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete model_;
  }
  if (model) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      model = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    set_has_model();
  } else {
    clear_has_model();
  }
  model_ = model;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedFunctionArgumentProto.model)
}

// optional .zetasql.ResolvedConnectionProto connection = 6;
inline bool ResolvedFunctionArgumentProto::has_connection() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResolvedFunctionArgumentProto::set_has_connection() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResolvedFunctionArgumentProto::clear_has_connection() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResolvedFunctionArgumentProto::clear_connection() {
  if (connection_ != NULL) connection_->Clear();
  clear_has_connection();
}
inline const ::zetasql::ResolvedConnectionProto& ResolvedFunctionArgumentProto::_internal_connection() const {
  return *connection_;
}
inline const ::zetasql::ResolvedConnectionProto& ResolvedFunctionArgumentProto::connection() const {
  const ::zetasql::ResolvedConnectionProto* p = connection_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFunctionArgumentProto.connection)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedConnectionProto*>(
      &::zetasql::_ResolvedConnectionProto_default_instance_);
}
inline ::zetasql::ResolvedConnectionProto* ResolvedFunctionArgumentProto::release_connection() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedFunctionArgumentProto.connection)
  clear_has_connection();
  ::zetasql::ResolvedConnectionProto* temp = connection_;
  connection_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedConnectionProto* ResolvedFunctionArgumentProto::mutable_connection() {
  set_has_connection();
  if (connection_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedConnectionProto>(GetArenaNoVirtual());
    connection_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFunctionArgumentProto.connection)
  return connection_;
}
inline void ResolvedFunctionArgumentProto::set_allocated_connection(::zetasql::ResolvedConnectionProto* connection) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete connection_;
  }
  if (connection) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      connection = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, connection, submessage_arena);
    }
    set_has_connection();
  } else {
    clear_has_connection();
  }
  connection_ = connection;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedFunctionArgumentProto.connection)
}

// optional .zetasql.ResolvedDescriptorProto descriptor_arg = 7;
inline bool ResolvedFunctionArgumentProto::has_descriptor_arg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResolvedFunctionArgumentProto::set_has_descriptor_arg() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResolvedFunctionArgumentProto::clear_has_descriptor_arg() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ResolvedFunctionArgumentProto::clear_descriptor_arg() {
  if (descriptor_arg_ != NULL) descriptor_arg_->Clear();
  clear_has_descriptor_arg();
}
inline const ::zetasql::ResolvedDescriptorProto& ResolvedFunctionArgumentProto::_internal_descriptor_arg() const {
  return *descriptor_arg_;
}
inline const ::zetasql::ResolvedDescriptorProto& ResolvedFunctionArgumentProto::descriptor_arg() const {
  const ::zetasql::ResolvedDescriptorProto* p = descriptor_arg_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFunctionArgumentProto.descriptor_arg)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedDescriptorProto*>(
      &::zetasql::_ResolvedDescriptorProto_default_instance_);
}
inline ::zetasql::ResolvedDescriptorProto* ResolvedFunctionArgumentProto::release_descriptor_arg() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedFunctionArgumentProto.descriptor_arg)
  clear_has_descriptor_arg();
  ::zetasql::ResolvedDescriptorProto* temp = descriptor_arg_;
  descriptor_arg_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedDescriptorProto* ResolvedFunctionArgumentProto::mutable_descriptor_arg() {
  set_has_descriptor_arg();
  if (descriptor_arg_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedDescriptorProto>(GetArenaNoVirtual());
    descriptor_arg_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFunctionArgumentProto.descriptor_arg)
  return descriptor_arg_;
}
inline void ResolvedFunctionArgumentProto::set_allocated_descriptor_arg(::zetasql::ResolvedDescriptorProto* descriptor_arg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete descriptor_arg_;
  }
  if (descriptor_arg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      descriptor_arg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, descriptor_arg, submessage_arena);
    }
    set_has_descriptor_arg();
  } else {
    clear_has_descriptor_arg();
  }
  descriptor_arg_ = descriptor_arg;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedFunctionArgumentProto.descriptor_arg)
}

// repeated .zetasql.ResolvedColumnProto argument_column_list = 4;
inline int ResolvedFunctionArgumentProto::argument_column_list_size() const {
  return argument_column_list_.size();
}
inline ::zetasql::ResolvedColumnProto* ResolvedFunctionArgumentProto::mutable_argument_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFunctionArgumentProto.argument_column_list)
  return argument_column_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >*
ResolvedFunctionArgumentProto::mutable_argument_column_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedFunctionArgumentProto.argument_column_list)
  return &argument_column_list_;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedFunctionArgumentProto::argument_column_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFunctionArgumentProto.argument_column_list)
  return argument_column_list_.Get(index);
}
inline ::zetasql::ResolvedColumnProto* ResolvedFunctionArgumentProto::add_argument_column_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedFunctionArgumentProto.argument_column_list)
  return argument_column_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >&
ResolvedFunctionArgumentProto::argument_column_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedFunctionArgumentProto.argument_column_list)
  return argument_column_list_;
}

// optional .zetasql.ResolvedInlineLambdaProto inline_lambda = 8;
inline bool ResolvedFunctionArgumentProto::has_inline_lambda() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResolvedFunctionArgumentProto::set_has_inline_lambda() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ResolvedFunctionArgumentProto::clear_has_inline_lambda() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ResolvedFunctionArgumentProto::clear_inline_lambda() {
  if (inline_lambda_ != NULL) inline_lambda_->Clear();
  clear_has_inline_lambda();
}
inline const ::zetasql::ResolvedInlineLambdaProto& ResolvedFunctionArgumentProto::_internal_inline_lambda() const {
  return *inline_lambda_;
}
inline const ::zetasql::ResolvedInlineLambdaProto& ResolvedFunctionArgumentProto::inline_lambda() const {
  const ::zetasql::ResolvedInlineLambdaProto* p = inline_lambda_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFunctionArgumentProto.inline_lambda)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedInlineLambdaProto*>(
      &::zetasql::_ResolvedInlineLambdaProto_default_instance_);
}
inline ::zetasql::ResolvedInlineLambdaProto* ResolvedFunctionArgumentProto::release_inline_lambda() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedFunctionArgumentProto.inline_lambda)
  clear_has_inline_lambda();
  ::zetasql::ResolvedInlineLambdaProto* temp = inline_lambda_;
  inline_lambda_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedInlineLambdaProto* ResolvedFunctionArgumentProto::mutable_inline_lambda() {
  set_has_inline_lambda();
  if (inline_lambda_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedInlineLambdaProto>(GetArenaNoVirtual());
    inline_lambda_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFunctionArgumentProto.inline_lambda)
  return inline_lambda_;
}
inline void ResolvedFunctionArgumentProto::set_allocated_inline_lambda(::zetasql::ResolvedInlineLambdaProto* inline_lambda) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inline_lambda_;
  }
  if (inline_lambda) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inline_lambda = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inline_lambda, submessage_arena);
    }
    set_has_inline_lambda();
  } else {
    clear_has_inline_lambda();
  }
  inline_lambda_ = inline_lambda;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedFunctionArgumentProto.inline_lambda)
}

// -------------------------------------------------------------------

// AnyResolvedStatementProto

// optional .zetasql.ResolvedExplainStmtProto resolved_explain_stmt_node = 37;
inline bool AnyResolvedStatementProto::has_resolved_explain_stmt_node() const {
  return node_case() == kResolvedExplainStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_explain_stmt_node() {
  _oneof_case_[0] = kResolvedExplainStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_explain_stmt_node() {
  if (has_resolved_explain_stmt_node()) {
    delete node_.resolved_explain_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedExplainStmtProto& AnyResolvedStatementProto::_internal_resolved_explain_stmt_node() const {
  return *node_.resolved_explain_stmt_node_;
}
inline ::zetasql::ResolvedExplainStmtProto* AnyResolvedStatementProto::release_resolved_explain_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_explain_stmt_node)
  if (has_resolved_explain_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedExplainStmtProto* temp = node_.resolved_explain_stmt_node_;
    node_.resolved_explain_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedExplainStmtProto& AnyResolvedStatementProto::resolved_explain_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_explain_stmt_node)
  return has_resolved_explain_stmt_node()
      ? *node_.resolved_explain_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedExplainStmtProto*>(&::zetasql::_ResolvedExplainStmtProto_default_instance_);
}
inline ::zetasql::ResolvedExplainStmtProto* AnyResolvedStatementProto::mutable_resolved_explain_stmt_node() {
  if (!has_resolved_explain_stmt_node()) {
    clear_node();
    set_has_resolved_explain_stmt_node();
    node_.resolved_explain_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedExplainStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_explain_stmt_node)
  return node_.resolved_explain_stmt_node_;
}

// optional .zetasql.ResolvedQueryStmtProto resolved_query_stmt_node = 38;
inline bool AnyResolvedStatementProto::has_resolved_query_stmt_node() const {
  return node_case() == kResolvedQueryStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_query_stmt_node() {
  _oneof_case_[0] = kResolvedQueryStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_query_stmt_node() {
  if (has_resolved_query_stmt_node()) {
    delete node_.resolved_query_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedQueryStmtProto& AnyResolvedStatementProto::_internal_resolved_query_stmt_node() const {
  return *node_.resolved_query_stmt_node_;
}
inline ::zetasql::ResolvedQueryStmtProto* AnyResolvedStatementProto::release_resolved_query_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_query_stmt_node)
  if (has_resolved_query_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedQueryStmtProto* temp = node_.resolved_query_stmt_node_;
    node_.resolved_query_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedQueryStmtProto& AnyResolvedStatementProto::resolved_query_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_query_stmt_node)
  return has_resolved_query_stmt_node()
      ? *node_.resolved_query_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedQueryStmtProto*>(&::zetasql::_ResolvedQueryStmtProto_default_instance_);
}
inline ::zetasql::ResolvedQueryStmtProto* AnyResolvedStatementProto::mutable_resolved_query_stmt_node() {
  if (!has_resolved_query_stmt_node()) {
    clear_node();
    set_has_resolved_query_stmt_node();
    node_.resolved_query_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedQueryStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_query_stmt_node)
  return node_.resolved_query_stmt_node_;
}

// optional .zetasql.AnyResolvedCreateStatementProto resolved_create_statement_node = 39;
inline bool AnyResolvedStatementProto::has_resolved_create_statement_node() const {
  return node_case() == kResolvedCreateStatementNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_create_statement_node() {
  _oneof_case_[0] = kResolvedCreateStatementNode;
}
inline void AnyResolvedStatementProto::clear_resolved_create_statement_node() {
  if (has_resolved_create_statement_node()) {
    delete node_.resolved_create_statement_node_;
    clear_has_node();
  }
}
inline const ::zetasql::AnyResolvedCreateStatementProto& AnyResolvedStatementProto::_internal_resolved_create_statement_node() const {
  return *node_.resolved_create_statement_node_;
}
inline ::zetasql::AnyResolvedCreateStatementProto* AnyResolvedStatementProto::release_resolved_create_statement_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_create_statement_node)
  if (has_resolved_create_statement_node()) {
    clear_has_node();
      ::zetasql::AnyResolvedCreateStatementProto* temp = node_.resolved_create_statement_node_;
    node_.resolved_create_statement_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::AnyResolvedCreateStatementProto& AnyResolvedStatementProto::resolved_create_statement_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_create_statement_node)
  return has_resolved_create_statement_node()
      ? *node_.resolved_create_statement_node_
      : *reinterpret_cast< ::zetasql::AnyResolvedCreateStatementProto*>(&::zetasql::_AnyResolvedCreateStatementProto_default_instance_);
}
inline ::zetasql::AnyResolvedCreateStatementProto* AnyResolvedStatementProto::mutable_resolved_create_statement_node() {
  if (!has_resolved_create_statement_node()) {
    clear_node();
    set_has_resolved_create_statement_node();
    node_.resolved_create_statement_node_ = CreateMaybeMessage< ::zetasql::AnyResolvedCreateStatementProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_create_statement_node)
  return node_.resolved_create_statement_node_;
}

// optional .zetasql.ResolvedExportDataStmtProto resolved_export_data_stmt_node = 43;
inline bool AnyResolvedStatementProto::has_resolved_export_data_stmt_node() const {
  return node_case() == kResolvedExportDataStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_export_data_stmt_node() {
  _oneof_case_[0] = kResolvedExportDataStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_export_data_stmt_node() {
  if (has_resolved_export_data_stmt_node()) {
    delete node_.resolved_export_data_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedExportDataStmtProto& AnyResolvedStatementProto::_internal_resolved_export_data_stmt_node() const {
  return *node_.resolved_export_data_stmt_node_;
}
inline ::zetasql::ResolvedExportDataStmtProto* AnyResolvedStatementProto::release_resolved_export_data_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_export_data_stmt_node)
  if (has_resolved_export_data_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedExportDataStmtProto* temp = node_.resolved_export_data_stmt_node_;
    node_.resolved_export_data_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedExportDataStmtProto& AnyResolvedStatementProto::resolved_export_data_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_export_data_stmt_node)
  return has_resolved_export_data_stmt_node()
      ? *node_.resolved_export_data_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedExportDataStmtProto*>(&::zetasql::_ResolvedExportDataStmtProto_default_instance_);
}
inline ::zetasql::ResolvedExportDataStmtProto* AnyResolvedStatementProto::mutable_resolved_export_data_stmt_node() {
  if (!has_resolved_export_data_stmt_node()) {
    clear_node();
    set_has_resolved_export_data_stmt_node();
    node_.resolved_export_data_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedExportDataStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_export_data_stmt_node)
  return node_.resolved_export_data_stmt_node_;
}

// optional .zetasql.ResolvedDefineTableStmtProto resolved_define_table_stmt_node = 44;
inline bool AnyResolvedStatementProto::has_resolved_define_table_stmt_node() const {
  return node_case() == kResolvedDefineTableStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_define_table_stmt_node() {
  _oneof_case_[0] = kResolvedDefineTableStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_define_table_stmt_node() {
  if (has_resolved_define_table_stmt_node()) {
    delete node_.resolved_define_table_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedDefineTableStmtProto& AnyResolvedStatementProto::_internal_resolved_define_table_stmt_node() const {
  return *node_.resolved_define_table_stmt_node_;
}
inline ::zetasql::ResolvedDefineTableStmtProto* AnyResolvedStatementProto::release_resolved_define_table_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_define_table_stmt_node)
  if (has_resolved_define_table_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedDefineTableStmtProto* temp = node_.resolved_define_table_stmt_node_;
    node_.resolved_define_table_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedDefineTableStmtProto& AnyResolvedStatementProto::resolved_define_table_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_define_table_stmt_node)
  return has_resolved_define_table_stmt_node()
      ? *node_.resolved_define_table_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedDefineTableStmtProto*>(&::zetasql::_ResolvedDefineTableStmtProto_default_instance_);
}
inline ::zetasql::ResolvedDefineTableStmtProto* AnyResolvedStatementProto::mutable_resolved_define_table_stmt_node() {
  if (!has_resolved_define_table_stmt_node()) {
    clear_node();
    set_has_resolved_define_table_stmt_node();
    node_.resolved_define_table_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedDefineTableStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_define_table_stmt_node)
  return node_.resolved_define_table_stmt_node_;
}

// optional .zetasql.ResolvedDescribeStmtProto resolved_describe_stmt_node = 45;
inline bool AnyResolvedStatementProto::has_resolved_describe_stmt_node() const {
  return node_case() == kResolvedDescribeStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_describe_stmt_node() {
  _oneof_case_[0] = kResolvedDescribeStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_describe_stmt_node() {
  if (has_resolved_describe_stmt_node()) {
    delete node_.resolved_describe_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedDescribeStmtProto& AnyResolvedStatementProto::_internal_resolved_describe_stmt_node() const {
  return *node_.resolved_describe_stmt_node_;
}
inline ::zetasql::ResolvedDescribeStmtProto* AnyResolvedStatementProto::release_resolved_describe_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_describe_stmt_node)
  if (has_resolved_describe_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedDescribeStmtProto* temp = node_.resolved_describe_stmt_node_;
    node_.resolved_describe_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedDescribeStmtProto& AnyResolvedStatementProto::resolved_describe_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_describe_stmt_node)
  return has_resolved_describe_stmt_node()
      ? *node_.resolved_describe_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedDescribeStmtProto*>(&::zetasql::_ResolvedDescribeStmtProto_default_instance_);
}
inline ::zetasql::ResolvedDescribeStmtProto* AnyResolvedStatementProto::mutable_resolved_describe_stmt_node() {
  if (!has_resolved_describe_stmt_node()) {
    clear_node();
    set_has_resolved_describe_stmt_node();
    node_.resolved_describe_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedDescribeStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_describe_stmt_node)
  return node_.resolved_describe_stmt_node_;
}

// optional .zetasql.ResolvedShowStmtProto resolved_show_stmt_node = 46;
inline bool AnyResolvedStatementProto::has_resolved_show_stmt_node() const {
  return node_case() == kResolvedShowStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_show_stmt_node() {
  _oneof_case_[0] = kResolvedShowStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_show_stmt_node() {
  if (has_resolved_show_stmt_node()) {
    delete node_.resolved_show_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedShowStmtProto& AnyResolvedStatementProto::_internal_resolved_show_stmt_node() const {
  return *node_.resolved_show_stmt_node_;
}
inline ::zetasql::ResolvedShowStmtProto* AnyResolvedStatementProto::release_resolved_show_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_show_stmt_node)
  if (has_resolved_show_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedShowStmtProto* temp = node_.resolved_show_stmt_node_;
    node_.resolved_show_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedShowStmtProto& AnyResolvedStatementProto::resolved_show_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_show_stmt_node)
  return has_resolved_show_stmt_node()
      ? *node_.resolved_show_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedShowStmtProto*>(&::zetasql::_ResolvedShowStmtProto_default_instance_);
}
inline ::zetasql::ResolvedShowStmtProto* AnyResolvedStatementProto::mutable_resolved_show_stmt_node() {
  if (!has_resolved_show_stmt_node()) {
    clear_node();
    set_has_resolved_show_stmt_node();
    node_.resolved_show_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedShowStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_show_stmt_node)
  return node_.resolved_show_stmt_node_;
}

// optional .zetasql.ResolvedBeginStmtProto resolved_begin_stmt_node = 47;
inline bool AnyResolvedStatementProto::has_resolved_begin_stmt_node() const {
  return node_case() == kResolvedBeginStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_begin_stmt_node() {
  _oneof_case_[0] = kResolvedBeginStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_begin_stmt_node() {
  if (has_resolved_begin_stmt_node()) {
    delete node_.resolved_begin_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedBeginStmtProto& AnyResolvedStatementProto::_internal_resolved_begin_stmt_node() const {
  return *node_.resolved_begin_stmt_node_;
}
inline ::zetasql::ResolvedBeginStmtProto* AnyResolvedStatementProto::release_resolved_begin_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_begin_stmt_node)
  if (has_resolved_begin_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedBeginStmtProto* temp = node_.resolved_begin_stmt_node_;
    node_.resolved_begin_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedBeginStmtProto& AnyResolvedStatementProto::resolved_begin_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_begin_stmt_node)
  return has_resolved_begin_stmt_node()
      ? *node_.resolved_begin_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedBeginStmtProto*>(&::zetasql::_ResolvedBeginStmtProto_default_instance_);
}
inline ::zetasql::ResolvedBeginStmtProto* AnyResolvedStatementProto::mutable_resolved_begin_stmt_node() {
  if (!has_resolved_begin_stmt_node()) {
    clear_node();
    set_has_resolved_begin_stmt_node();
    node_.resolved_begin_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedBeginStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_begin_stmt_node)
  return node_.resolved_begin_stmt_node_;
}

// optional .zetasql.ResolvedCommitStmtProto resolved_commit_stmt_node = 48;
inline bool AnyResolvedStatementProto::has_resolved_commit_stmt_node() const {
  return node_case() == kResolvedCommitStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_commit_stmt_node() {
  _oneof_case_[0] = kResolvedCommitStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_commit_stmt_node() {
  if (has_resolved_commit_stmt_node()) {
    delete node_.resolved_commit_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedCommitStmtProto& AnyResolvedStatementProto::_internal_resolved_commit_stmt_node() const {
  return *node_.resolved_commit_stmt_node_;
}
inline ::zetasql::ResolvedCommitStmtProto* AnyResolvedStatementProto::release_resolved_commit_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_commit_stmt_node)
  if (has_resolved_commit_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedCommitStmtProto* temp = node_.resolved_commit_stmt_node_;
    node_.resolved_commit_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedCommitStmtProto& AnyResolvedStatementProto::resolved_commit_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_commit_stmt_node)
  return has_resolved_commit_stmt_node()
      ? *node_.resolved_commit_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedCommitStmtProto*>(&::zetasql::_ResolvedCommitStmtProto_default_instance_);
}
inline ::zetasql::ResolvedCommitStmtProto* AnyResolvedStatementProto::mutable_resolved_commit_stmt_node() {
  if (!has_resolved_commit_stmt_node()) {
    clear_node();
    set_has_resolved_commit_stmt_node();
    node_.resolved_commit_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedCommitStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_commit_stmt_node)
  return node_.resolved_commit_stmt_node_;
}

// optional .zetasql.ResolvedRollbackStmtProto resolved_rollback_stmt_node = 49;
inline bool AnyResolvedStatementProto::has_resolved_rollback_stmt_node() const {
  return node_case() == kResolvedRollbackStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_rollback_stmt_node() {
  _oneof_case_[0] = kResolvedRollbackStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_rollback_stmt_node() {
  if (has_resolved_rollback_stmt_node()) {
    delete node_.resolved_rollback_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedRollbackStmtProto& AnyResolvedStatementProto::_internal_resolved_rollback_stmt_node() const {
  return *node_.resolved_rollback_stmt_node_;
}
inline ::zetasql::ResolvedRollbackStmtProto* AnyResolvedStatementProto::release_resolved_rollback_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_rollback_stmt_node)
  if (has_resolved_rollback_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedRollbackStmtProto* temp = node_.resolved_rollback_stmt_node_;
    node_.resolved_rollback_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedRollbackStmtProto& AnyResolvedStatementProto::resolved_rollback_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_rollback_stmt_node)
  return has_resolved_rollback_stmt_node()
      ? *node_.resolved_rollback_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedRollbackStmtProto*>(&::zetasql::_ResolvedRollbackStmtProto_default_instance_);
}
inline ::zetasql::ResolvedRollbackStmtProto* AnyResolvedStatementProto::mutable_resolved_rollback_stmt_node() {
  if (!has_resolved_rollback_stmt_node()) {
    clear_node();
    set_has_resolved_rollback_stmt_node();
    node_.resolved_rollback_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedRollbackStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_rollback_stmt_node)
  return node_.resolved_rollback_stmt_node_;
}

// optional .zetasql.ResolvedDropStmtProto resolved_drop_stmt_node = 50;
inline bool AnyResolvedStatementProto::has_resolved_drop_stmt_node() const {
  return node_case() == kResolvedDropStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_drop_stmt_node() {
  _oneof_case_[0] = kResolvedDropStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_drop_stmt_node() {
  if (has_resolved_drop_stmt_node()) {
    delete node_.resolved_drop_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedDropStmtProto& AnyResolvedStatementProto::_internal_resolved_drop_stmt_node() const {
  return *node_.resolved_drop_stmt_node_;
}
inline ::zetasql::ResolvedDropStmtProto* AnyResolvedStatementProto::release_resolved_drop_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_drop_stmt_node)
  if (has_resolved_drop_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedDropStmtProto* temp = node_.resolved_drop_stmt_node_;
    node_.resolved_drop_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedDropStmtProto& AnyResolvedStatementProto::resolved_drop_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_drop_stmt_node)
  return has_resolved_drop_stmt_node()
      ? *node_.resolved_drop_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedDropStmtProto*>(&::zetasql::_ResolvedDropStmtProto_default_instance_);
}
inline ::zetasql::ResolvedDropStmtProto* AnyResolvedStatementProto::mutable_resolved_drop_stmt_node() {
  if (!has_resolved_drop_stmt_node()) {
    clear_node();
    set_has_resolved_drop_stmt_node();
    node_.resolved_drop_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedDropStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_drop_stmt_node)
  return node_.resolved_drop_stmt_node_;
}

// optional .zetasql.ResolvedInsertStmtProto resolved_insert_stmt_node = 63;
inline bool AnyResolvedStatementProto::has_resolved_insert_stmt_node() const {
  return node_case() == kResolvedInsertStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_insert_stmt_node() {
  _oneof_case_[0] = kResolvedInsertStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_insert_stmt_node() {
  if (has_resolved_insert_stmt_node()) {
    delete node_.resolved_insert_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedInsertStmtProto& AnyResolvedStatementProto::_internal_resolved_insert_stmt_node() const {
  return *node_.resolved_insert_stmt_node_;
}
inline ::zetasql::ResolvedInsertStmtProto* AnyResolvedStatementProto::release_resolved_insert_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_insert_stmt_node)
  if (has_resolved_insert_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedInsertStmtProto* temp = node_.resolved_insert_stmt_node_;
    node_.resolved_insert_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedInsertStmtProto& AnyResolvedStatementProto::resolved_insert_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_insert_stmt_node)
  return has_resolved_insert_stmt_node()
      ? *node_.resolved_insert_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedInsertStmtProto*>(&::zetasql::_ResolvedInsertStmtProto_default_instance_);
}
inline ::zetasql::ResolvedInsertStmtProto* AnyResolvedStatementProto::mutable_resolved_insert_stmt_node() {
  if (!has_resolved_insert_stmt_node()) {
    clear_node();
    set_has_resolved_insert_stmt_node();
    node_.resolved_insert_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedInsertStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_insert_stmt_node)
  return node_.resolved_insert_stmt_node_;
}

// optional .zetasql.ResolvedDeleteStmtProto resolved_delete_stmt_node = 64;
inline bool AnyResolvedStatementProto::has_resolved_delete_stmt_node() const {
  return node_case() == kResolvedDeleteStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_delete_stmt_node() {
  _oneof_case_[0] = kResolvedDeleteStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_delete_stmt_node() {
  if (has_resolved_delete_stmt_node()) {
    delete node_.resolved_delete_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedDeleteStmtProto& AnyResolvedStatementProto::_internal_resolved_delete_stmt_node() const {
  return *node_.resolved_delete_stmt_node_;
}
inline ::zetasql::ResolvedDeleteStmtProto* AnyResolvedStatementProto::release_resolved_delete_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_delete_stmt_node)
  if (has_resolved_delete_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedDeleteStmtProto* temp = node_.resolved_delete_stmt_node_;
    node_.resolved_delete_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedDeleteStmtProto& AnyResolvedStatementProto::resolved_delete_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_delete_stmt_node)
  return has_resolved_delete_stmt_node()
      ? *node_.resolved_delete_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedDeleteStmtProto*>(&::zetasql::_ResolvedDeleteStmtProto_default_instance_);
}
inline ::zetasql::ResolvedDeleteStmtProto* AnyResolvedStatementProto::mutable_resolved_delete_stmt_node() {
  if (!has_resolved_delete_stmt_node()) {
    clear_node();
    set_has_resolved_delete_stmt_node();
    node_.resolved_delete_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedDeleteStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_delete_stmt_node)
  return node_.resolved_delete_stmt_node_;
}

// optional .zetasql.ResolvedUpdateStmtProto resolved_update_stmt_node = 66;
inline bool AnyResolvedStatementProto::has_resolved_update_stmt_node() const {
  return node_case() == kResolvedUpdateStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_update_stmt_node() {
  _oneof_case_[0] = kResolvedUpdateStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_update_stmt_node() {
  if (has_resolved_update_stmt_node()) {
    delete node_.resolved_update_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedUpdateStmtProto& AnyResolvedStatementProto::_internal_resolved_update_stmt_node() const {
  return *node_.resolved_update_stmt_node_;
}
inline ::zetasql::ResolvedUpdateStmtProto* AnyResolvedStatementProto::release_resolved_update_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_update_stmt_node)
  if (has_resolved_update_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedUpdateStmtProto* temp = node_.resolved_update_stmt_node_;
    node_.resolved_update_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedUpdateStmtProto& AnyResolvedStatementProto::resolved_update_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_update_stmt_node)
  return has_resolved_update_stmt_node()
      ? *node_.resolved_update_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedUpdateStmtProto*>(&::zetasql::_ResolvedUpdateStmtProto_default_instance_);
}
inline ::zetasql::ResolvedUpdateStmtProto* AnyResolvedStatementProto::mutable_resolved_update_stmt_node() {
  if (!has_resolved_update_stmt_node()) {
    clear_node();
    set_has_resolved_update_stmt_node();
    node_.resolved_update_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedUpdateStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_update_stmt_node)
  return node_.resolved_update_stmt_node_;
}

// optional .zetasql.AnyResolvedGrantOrRevokeStmtProto resolved_grant_or_revoke_stmt_node = 68;
inline bool AnyResolvedStatementProto::has_resolved_grant_or_revoke_stmt_node() const {
  return node_case() == kResolvedGrantOrRevokeStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_grant_or_revoke_stmt_node() {
  _oneof_case_[0] = kResolvedGrantOrRevokeStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_grant_or_revoke_stmt_node() {
  if (has_resolved_grant_or_revoke_stmt_node()) {
    delete node_.resolved_grant_or_revoke_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::AnyResolvedGrantOrRevokeStmtProto& AnyResolvedStatementProto::_internal_resolved_grant_or_revoke_stmt_node() const {
  return *node_.resolved_grant_or_revoke_stmt_node_;
}
inline ::zetasql::AnyResolvedGrantOrRevokeStmtProto* AnyResolvedStatementProto::release_resolved_grant_or_revoke_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_grant_or_revoke_stmt_node)
  if (has_resolved_grant_or_revoke_stmt_node()) {
    clear_has_node();
      ::zetasql::AnyResolvedGrantOrRevokeStmtProto* temp = node_.resolved_grant_or_revoke_stmt_node_;
    node_.resolved_grant_or_revoke_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::AnyResolvedGrantOrRevokeStmtProto& AnyResolvedStatementProto::resolved_grant_or_revoke_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_grant_or_revoke_stmt_node)
  return has_resolved_grant_or_revoke_stmt_node()
      ? *node_.resolved_grant_or_revoke_stmt_node_
      : *reinterpret_cast< ::zetasql::AnyResolvedGrantOrRevokeStmtProto*>(&::zetasql::_AnyResolvedGrantOrRevokeStmtProto_default_instance_);
}
inline ::zetasql::AnyResolvedGrantOrRevokeStmtProto* AnyResolvedStatementProto::mutable_resolved_grant_or_revoke_stmt_node() {
  if (!has_resolved_grant_or_revoke_stmt_node()) {
    clear_node();
    set_has_resolved_grant_or_revoke_stmt_node();
    node_.resolved_grant_or_revoke_stmt_node_ = CreateMaybeMessage< ::zetasql::AnyResolvedGrantOrRevokeStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_grant_or_revoke_stmt_node)
  return node_.resolved_grant_or_revoke_stmt_node_;
}

// optional .zetasql.ResolvedAlterTableSetOptionsStmtProto resolved_alter_table_set_options_stmt_node = 71;
inline bool AnyResolvedStatementProto::has_resolved_alter_table_set_options_stmt_node() const {
  return node_case() == kResolvedAlterTableSetOptionsStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_alter_table_set_options_stmt_node() {
  _oneof_case_[0] = kResolvedAlterTableSetOptionsStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_alter_table_set_options_stmt_node() {
  if (has_resolved_alter_table_set_options_stmt_node()) {
    delete node_.resolved_alter_table_set_options_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAlterTableSetOptionsStmtProto& AnyResolvedStatementProto::_internal_resolved_alter_table_set_options_stmt_node() const {
  return *node_.resolved_alter_table_set_options_stmt_node_;
}
inline ::zetasql::ResolvedAlterTableSetOptionsStmtProto* AnyResolvedStatementProto::release_resolved_alter_table_set_options_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_alter_table_set_options_stmt_node)
  if (has_resolved_alter_table_set_options_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedAlterTableSetOptionsStmtProto* temp = node_.resolved_alter_table_set_options_stmt_node_;
    node_.resolved_alter_table_set_options_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAlterTableSetOptionsStmtProto& AnyResolvedStatementProto::resolved_alter_table_set_options_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_alter_table_set_options_stmt_node)
  return has_resolved_alter_table_set_options_stmt_node()
      ? *node_.resolved_alter_table_set_options_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedAlterTableSetOptionsStmtProto*>(&::zetasql::_ResolvedAlterTableSetOptionsStmtProto_default_instance_);
}
inline ::zetasql::ResolvedAlterTableSetOptionsStmtProto* AnyResolvedStatementProto::mutable_resolved_alter_table_set_options_stmt_node() {
  if (!has_resolved_alter_table_set_options_stmt_node()) {
    clear_node();
    set_has_resolved_alter_table_set_options_stmt_node();
    node_.resolved_alter_table_set_options_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedAlterTableSetOptionsStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_alter_table_set_options_stmt_node)
  return node_.resolved_alter_table_set_options_stmt_node_;
}

// optional .zetasql.ResolvedRenameStmtProto resolved_rename_stmt_node = 72;
inline bool AnyResolvedStatementProto::has_resolved_rename_stmt_node() const {
  return node_case() == kResolvedRenameStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_rename_stmt_node() {
  _oneof_case_[0] = kResolvedRenameStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_rename_stmt_node() {
  if (has_resolved_rename_stmt_node()) {
    delete node_.resolved_rename_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedRenameStmtProto& AnyResolvedStatementProto::_internal_resolved_rename_stmt_node() const {
  return *node_.resolved_rename_stmt_node_;
}
inline ::zetasql::ResolvedRenameStmtProto* AnyResolvedStatementProto::release_resolved_rename_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_rename_stmt_node)
  if (has_resolved_rename_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedRenameStmtProto* temp = node_.resolved_rename_stmt_node_;
    node_.resolved_rename_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedRenameStmtProto& AnyResolvedStatementProto::resolved_rename_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_rename_stmt_node)
  return has_resolved_rename_stmt_node()
      ? *node_.resolved_rename_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedRenameStmtProto*>(&::zetasql::_ResolvedRenameStmtProto_default_instance_);
}
inline ::zetasql::ResolvedRenameStmtProto* AnyResolvedStatementProto::mutable_resolved_rename_stmt_node() {
  if (!has_resolved_rename_stmt_node()) {
    clear_node();
    set_has_resolved_rename_stmt_node();
    node_.resolved_rename_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedRenameStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_rename_stmt_node)
  return node_.resolved_rename_stmt_node_;
}

// optional .zetasql.ResolvedCreateRowAccessPolicyStmtProto resolved_create_row_access_policy_stmt_node = 73;
inline bool AnyResolvedStatementProto::has_resolved_create_row_access_policy_stmt_node() const {
  return node_case() == kResolvedCreateRowAccessPolicyStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_create_row_access_policy_stmt_node() {
  _oneof_case_[0] = kResolvedCreateRowAccessPolicyStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_create_row_access_policy_stmt_node() {
  if (has_resolved_create_row_access_policy_stmt_node()) {
    delete node_.resolved_create_row_access_policy_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedCreateRowAccessPolicyStmtProto& AnyResolvedStatementProto::_internal_resolved_create_row_access_policy_stmt_node() const {
  return *node_.resolved_create_row_access_policy_stmt_node_;
}
inline ::zetasql::ResolvedCreateRowAccessPolicyStmtProto* AnyResolvedStatementProto::release_resolved_create_row_access_policy_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_create_row_access_policy_stmt_node)
  if (has_resolved_create_row_access_policy_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedCreateRowAccessPolicyStmtProto* temp = node_.resolved_create_row_access_policy_stmt_node_;
    node_.resolved_create_row_access_policy_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedCreateRowAccessPolicyStmtProto& AnyResolvedStatementProto::resolved_create_row_access_policy_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_create_row_access_policy_stmt_node)
  return has_resolved_create_row_access_policy_stmt_node()
      ? *node_.resolved_create_row_access_policy_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedCreateRowAccessPolicyStmtProto*>(&::zetasql::_ResolvedCreateRowAccessPolicyStmtProto_default_instance_);
}
inline ::zetasql::ResolvedCreateRowAccessPolicyStmtProto* AnyResolvedStatementProto::mutable_resolved_create_row_access_policy_stmt_node() {
  if (!has_resolved_create_row_access_policy_stmt_node()) {
    clear_node();
    set_has_resolved_create_row_access_policy_stmt_node();
    node_.resolved_create_row_access_policy_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedCreateRowAccessPolicyStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_create_row_access_policy_stmt_node)
  return node_.resolved_create_row_access_policy_stmt_node_;
}

// optional .zetasql.ResolvedDropRowAccessPolicyStmtProto resolved_drop_row_access_policy_stmt_node = 74;
inline bool AnyResolvedStatementProto::has_resolved_drop_row_access_policy_stmt_node() const {
  return node_case() == kResolvedDropRowAccessPolicyStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_drop_row_access_policy_stmt_node() {
  _oneof_case_[0] = kResolvedDropRowAccessPolicyStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_drop_row_access_policy_stmt_node() {
  if (has_resolved_drop_row_access_policy_stmt_node()) {
    delete node_.resolved_drop_row_access_policy_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedDropRowAccessPolicyStmtProto& AnyResolvedStatementProto::_internal_resolved_drop_row_access_policy_stmt_node() const {
  return *node_.resolved_drop_row_access_policy_stmt_node_;
}
inline ::zetasql::ResolvedDropRowAccessPolicyStmtProto* AnyResolvedStatementProto::release_resolved_drop_row_access_policy_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_drop_row_access_policy_stmt_node)
  if (has_resolved_drop_row_access_policy_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedDropRowAccessPolicyStmtProto* temp = node_.resolved_drop_row_access_policy_stmt_node_;
    node_.resolved_drop_row_access_policy_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedDropRowAccessPolicyStmtProto& AnyResolvedStatementProto::resolved_drop_row_access_policy_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_drop_row_access_policy_stmt_node)
  return has_resolved_drop_row_access_policy_stmt_node()
      ? *node_.resolved_drop_row_access_policy_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedDropRowAccessPolicyStmtProto*>(&::zetasql::_ResolvedDropRowAccessPolicyStmtProto_default_instance_);
}
inline ::zetasql::ResolvedDropRowAccessPolicyStmtProto* AnyResolvedStatementProto::mutable_resolved_drop_row_access_policy_stmt_node() {
  if (!has_resolved_drop_row_access_policy_stmt_node()) {
    clear_node();
    set_has_resolved_drop_row_access_policy_stmt_node();
    node_.resolved_drop_row_access_policy_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedDropRowAccessPolicyStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_drop_row_access_policy_stmt_node)
  return node_.resolved_drop_row_access_policy_stmt_node_;
}

// optional .zetasql.ResolvedDropFunctionStmtProto resolved_drop_function_stmt_node = 80;
inline bool AnyResolvedStatementProto::has_resolved_drop_function_stmt_node() const {
  return node_case() == kResolvedDropFunctionStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_drop_function_stmt_node() {
  _oneof_case_[0] = kResolvedDropFunctionStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_drop_function_stmt_node() {
  if (has_resolved_drop_function_stmt_node()) {
    delete node_.resolved_drop_function_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedDropFunctionStmtProto& AnyResolvedStatementProto::_internal_resolved_drop_function_stmt_node() const {
  return *node_.resolved_drop_function_stmt_node_;
}
inline ::zetasql::ResolvedDropFunctionStmtProto* AnyResolvedStatementProto::release_resolved_drop_function_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_drop_function_stmt_node)
  if (has_resolved_drop_function_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedDropFunctionStmtProto* temp = node_.resolved_drop_function_stmt_node_;
    node_.resolved_drop_function_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedDropFunctionStmtProto& AnyResolvedStatementProto::resolved_drop_function_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_drop_function_stmt_node)
  return has_resolved_drop_function_stmt_node()
      ? *node_.resolved_drop_function_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedDropFunctionStmtProto*>(&::zetasql::_ResolvedDropFunctionStmtProto_default_instance_);
}
inline ::zetasql::ResolvedDropFunctionStmtProto* AnyResolvedStatementProto::mutable_resolved_drop_function_stmt_node() {
  if (!has_resolved_drop_function_stmt_node()) {
    clear_node();
    set_has_resolved_drop_function_stmt_node();
    node_.resolved_drop_function_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedDropFunctionStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_drop_function_stmt_node)
  return node_.resolved_drop_function_stmt_node_;
}

// optional .zetasql.ResolvedCallStmtProto resolved_call_stmt_node = 83;
inline bool AnyResolvedStatementProto::has_resolved_call_stmt_node() const {
  return node_case() == kResolvedCallStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_call_stmt_node() {
  _oneof_case_[0] = kResolvedCallStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_call_stmt_node() {
  if (has_resolved_call_stmt_node()) {
    delete node_.resolved_call_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedCallStmtProto& AnyResolvedStatementProto::_internal_resolved_call_stmt_node() const {
  return *node_.resolved_call_stmt_node_;
}
inline ::zetasql::ResolvedCallStmtProto* AnyResolvedStatementProto::release_resolved_call_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_call_stmt_node)
  if (has_resolved_call_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedCallStmtProto* temp = node_.resolved_call_stmt_node_;
    node_.resolved_call_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedCallStmtProto& AnyResolvedStatementProto::resolved_call_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_call_stmt_node)
  return has_resolved_call_stmt_node()
      ? *node_.resolved_call_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedCallStmtProto*>(&::zetasql::_ResolvedCallStmtProto_default_instance_);
}
inline ::zetasql::ResolvedCallStmtProto* AnyResolvedStatementProto::mutable_resolved_call_stmt_node() {
  if (!has_resolved_call_stmt_node()) {
    clear_node();
    set_has_resolved_call_stmt_node();
    node_.resolved_call_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedCallStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_call_stmt_node)
  return node_.resolved_call_stmt_node_;
}

// optional .zetasql.ResolvedImportStmtProto resolved_import_stmt_node = 86;
inline bool AnyResolvedStatementProto::has_resolved_import_stmt_node() const {
  return node_case() == kResolvedImportStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_import_stmt_node() {
  _oneof_case_[0] = kResolvedImportStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_import_stmt_node() {
  if (has_resolved_import_stmt_node()) {
    delete node_.resolved_import_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedImportStmtProto& AnyResolvedStatementProto::_internal_resolved_import_stmt_node() const {
  return *node_.resolved_import_stmt_node_;
}
inline ::zetasql::ResolvedImportStmtProto* AnyResolvedStatementProto::release_resolved_import_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_import_stmt_node)
  if (has_resolved_import_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedImportStmtProto* temp = node_.resolved_import_stmt_node_;
    node_.resolved_import_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedImportStmtProto& AnyResolvedStatementProto::resolved_import_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_import_stmt_node)
  return has_resolved_import_stmt_node()
      ? *node_.resolved_import_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedImportStmtProto*>(&::zetasql::_ResolvedImportStmtProto_default_instance_);
}
inline ::zetasql::ResolvedImportStmtProto* AnyResolvedStatementProto::mutable_resolved_import_stmt_node() {
  if (!has_resolved_import_stmt_node()) {
    clear_node();
    set_has_resolved_import_stmt_node();
    node_.resolved_import_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedImportStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_import_stmt_node)
  return node_.resolved_import_stmt_node_;
}

// optional .zetasql.ResolvedModuleStmtProto resolved_module_stmt_node = 87;
inline bool AnyResolvedStatementProto::has_resolved_module_stmt_node() const {
  return node_case() == kResolvedModuleStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_module_stmt_node() {
  _oneof_case_[0] = kResolvedModuleStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_module_stmt_node() {
  if (has_resolved_module_stmt_node()) {
    delete node_.resolved_module_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedModuleStmtProto& AnyResolvedStatementProto::_internal_resolved_module_stmt_node() const {
  return *node_.resolved_module_stmt_node_;
}
inline ::zetasql::ResolvedModuleStmtProto* AnyResolvedStatementProto::release_resolved_module_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_module_stmt_node)
  if (has_resolved_module_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedModuleStmtProto* temp = node_.resolved_module_stmt_node_;
    node_.resolved_module_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedModuleStmtProto& AnyResolvedStatementProto::resolved_module_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_module_stmt_node)
  return has_resolved_module_stmt_node()
      ? *node_.resolved_module_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedModuleStmtProto*>(&::zetasql::_ResolvedModuleStmtProto_default_instance_);
}
inline ::zetasql::ResolvedModuleStmtProto* AnyResolvedStatementProto::mutable_resolved_module_stmt_node() {
  if (!has_resolved_module_stmt_node()) {
    clear_node();
    set_has_resolved_module_stmt_node();
    node_.resolved_module_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedModuleStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_module_stmt_node)
  return node_.resolved_module_stmt_node_;
}

// optional .zetasql.ResolvedCreateDatabaseStmtProto resolved_create_database_stmt_node = 95;
inline bool AnyResolvedStatementProto::has_resolved_create_database_stmt_node() const {
  return node_case() == kResolvedCreateDatabaseStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_create_database_stmt_node() {
  _oneof_case_[0] = kResolvedCreateDatabaseStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_create_database_stmt_node() {
  if (has_resolved_create_database_stmt_node()) {
    delete node_.resolved_create_database_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedCreateDatabaseStmtProto& AnyResolvedStatementProto::_internal_resolved_create_database_stmt_node() const {
  return *node_.resolved_create_database_stmt_node_;
}
inline ::zetasql::ResolvedCreateDatabaseStmtProto* AnyResolvedStatementProto::release_resolved_create_database_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_create_database_stmt_node)
  if (has_resolved_create_database_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedCreateDatabaseStmtProto* temp = node_.resolved_create_database_stmt_node_;
    node_.resolved_create_database_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedCreateDatabaseStmtProto& AnyResolvedStatementProto::resolved_create_database_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_create_database_stmt_node)
  return has_resolved_create_database_stmt_node()
      ? *node_.resolved_create_database_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedCreateDatabaseStmtProto*>(&::zetasql::_ResolvedCreateDatabaseStmtProto_default_instance_);
}
inline ::zetasql::ResolvedCreateDatabaseStmtProto* AnyResolvedStatementProto::mutable_resolved_create_database_stmt_node() {
  if (!has_resolved_create_database_stmt_node()) {
    clear_node();
    set_has_resolved_create_database_stmt_node();
    node_.resolved_create_database_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedCreateDatabaseStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_create_database_stmt_node)
  return node_.resolved_create_database_stmt_node_;
}

// optional .zetasql.ResolvedAssertStmtProto resolved_assert_stmt_node = 98;
inline bool AnyResolvedStatementProto::has_resolved_assert_stmt_node() const {
  return node_case() == kResolvedAssertStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_assert_stmt_node() {
  _oneof_case_[0] = kResolvedAssertStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_assert_stmt_node() {
  if (has_resolved_assert_stmt_node()) {
    delete node_.resolved_assert_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAssertStmtProto& AnyResolvedStatementProto::_internal_resolved_assert_stmt_node() const {
  return *node_.resolved_assert_stmt_node_;
}
inline ::zetasql::ResolvedAssertStmtProto* AnyResolvedStatementProto::release_resolved_assert_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_assert_stmt_node)
  if (has_resolved_assert_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedAssertStmtProto* temp = node_.resolved_assert_stmt_node_;
    node_.resolved_assert_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAssertStmtProto& AnyResolvedStatementProto::resolved_assert_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_assert_stmt_node)
  return has_resolved_assert_stmt_node()
      ? *node_.resolved_assert_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedAssertStmtProto*>(&::zetasql::_ResolvedAssertStmtProto_default_instance_);
}
inline ::zetasql::ResolvedAssertStmtProto* AnyResolvedStatementProto::mutable_resolved_assert_stmt_node() {
  if (!has_resolved_assert_stmt_node()) {
    clear_node();
    set_has_resolved_assert_stmt_node();
    node_.resolved_assert_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedAssertStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_assert_stmt_node)
  return node_.resolved_assert_stmt_node_;
}

// optional .zetasql.ResolvedMergeStmtProto resolved_merge_stmt_node = 101;
inline bool AnyResolvedStatementProto::has_resolved_merge_stmt_node() const {
  return node_case() == kResolvedMergeStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_merge_stmt_node() {
  _oneof_case_[0] = kResolvedMergeStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_merge_stmt_node() {
  if (has_resolved_merge_stmt_node()) {
    delete node_.resolved_merge_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedMergeStmtProto& AnyResolvedStatementProto::_internal_resolved_merge_stmt_node() const {
  return *node_.resolved_merge_stmt_node_;
}
inline ::zetasql::ResolvedMergeStmtProto* AnyResolvedStatementProto::release_resolved_merge_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_merge_stmt_node)
  if (has_resolved_merge_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedMergeStmtProto* temp = node_.resolved_merge_stmt_node_;
    node_.resolved_merge_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedMergeStmtProto& AnyResolvedStatementProto::resolved_merge_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_merge_stmt_node)
  return has_resolved_merge_stmt_node()
      ? *node_.resolved_merge_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedMergeStmtProto*>(&::zetasql::_ResolvedMergeStmtProto_default_instance_);
}
inline ::zetasql::ResolvedMergeStmtProto* AnyResolvedStatementProto::mutable_resolved_merge_stmt_node() {
  if (!has_resolved_merge_stmt_node()) {
    clear_node();
    set_has_resolved_merge_stmt_node();
    node_.resolved_merge_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedMergeStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_merge_stmt_node)
  return node_.resolved_merge_stmt_node_;
}

// optional .zetasql.AnyResolvedAlterObjectStmtProto resolved_alter_object_stmt_node = 114;
inline bool AnyResolvedStatementProto::has_resolved_alter_object_stmt_node() const {
  return node_case() == kResolvedAlterObjectStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_alter_object_stmt_node() {
  _oneof_case_[0] = kResolvedAlterObjectStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_alter_object_stmt_node() {
  if (has_resolved_alter_object_stmt_node()) {
    delete node_.resolved_alter_object_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::AnyResolvedAlterObjectStmtProto& AnyResolvedStatementProto::_internal_resolved_alter_object_stmt_node() const {
  return *node_.resolved_alter_object_stmt_node_;
}
inline ::zetasql::AnyResolvedAlterObjectStmtProto* AnyResolvedStatementProto::release_resolved_alter_object_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_alter_object_stmt_node)
  if (has_resolved_alter_object_stmt_node()) {
    clear_has_node();
      ::zetasql::AnyResolvedAlterObjectStmtProto* temp = node_.resolved_alter_object_stmt_node_;
    node_.resolved_alter_object_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::AnyResolvedAlterObjectStmtProto& AnyResolvedStatementProto::resolved_alter_object_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_alter_object_stmt_node)
  return has_resolved_alter_object_stmt_node()
      ? *node_.resolved_alter_object_stmt_node_
      : *reinterpret_cast< ::zetasql::AnyResolvedAlterObjectStmtProto*>(&::zetasql::_AnyResolvedAlterObjectStmtProto_default_instance_);
}
inline ::zetasql::AnyResolvedAlterObjectStmtProto* AnyResolvedStatementProto::mutable_resolved_alter_object_stmt_node() {
  if (!has_resolved_alter_object_stmt_node()) {
    clear_node();
    set_has_resolved_alter_object_stmt_node();
    node_.resolved_alter_object_stmt_node_ = CreateMaybeMessage< ::zetasql::AnyResolvedAlterObjectStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_alter_object_stmt_node)
  return node_.resolved_alter_object_stmt_node_;
}

// optional .zetasql.ResolvedSetTransactionStmtProto resolved_set_transaction_stmt_node = 120;
inline bool AnyResolvedStatementProto::has_resolved_set_transaction_stmt_node() const {
  return node_case() == kResolvedSetTransactionStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_set_transaction_stmt_node() {
  _oneof_case_[0] = kResolvedSetTransactionStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_set_transaction_stmt_node() {
  if (has_resolved_set_transaction_stmt_node()) {
    delete node_.resolved_set_transaction_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedSetTransactionStmtProto& AnyResolvedStatementProto::_internal_resolved_set_transaction_stmt_node() const {
  return *node_.resolved_set_transaction_stmt_node_;
}
inline ::zetasql::ResolvedSetTransactionStmtProto* AnyResolvedStatementProto::release_resolved_set_transaction_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_set_transaction_stmt_node)
  if (has_resolved_set_transaction_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedSetTransactionStmtProto* temp = node_.resolved_set_transaction_stmt_node_;
    node_.resolved_set_transaction_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedSetTransactionStmtProto& AnyResolvedStatementProto::resolved_set_transaction_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_set_transaction_stmt_node)
  return has_resolved_set_transaction_stmt_node()
      ? *node_.resolved_set_transaction_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedSetTransactionStmtProto*>(&::zetasql::_ResolvedSetTransactionStmtProto_default_instance_);
}
inline ::zetasql::ResolvedSetTransactionStmtProto* AnyResolvedStatementProto::mutable_resolved_set_transaction_stmt_node() {
  if (!has_resolved_set_transaction_stmt_node()) {
    clear_node();
    set_has_resolved_set_transaction_stmt_node();
    node_.resolved_set_transaction_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedSetTransactionStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_set_transaction_stmt_node)
  return node_.resolved_set_transaction_stmt_node_;
}

// optional .zetasql.ResolvedDropMaterializedViewStmtProto resolved_drop_materialized_view_stmt_node = 121;
inline bool AnyResolvedStatementProto::has_resolved_drop_materialized_view_stmt_node() const {
  return node_case() == kResolvedDropMaterializedViewStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_drop_materialized_view_stmt_node() {
  _oneof_case_[0] = kResolvedDropMaterializedViewStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_drop_materialized_view_stmt_node() {
  if (has_resolved_drop_materialized_view_stmt_node()) {
    delete node_.resolved_drop_materialized_view_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedDropMaterializedViewStmtProto& AnyResolvedStatementProto::_internal_resolved_drop_materialized_view_stmt_node() const {
  return *node_.resolved_drop_materialized_view_stmt_node_;
}
inline ::zetasql::ResolvedDropMaterializedViewStmtProto* AnyResolvedStatementProto::release_resolved_drop_materialized_view_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_drop_materialized_view_stmt_node)
  if (has_resolved_drop_materialized_view_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedDropMaterializedViewStmtProto* temp = node_.resolved_drop_materialized_view_stmt_node_;
    node_.resolved_drop_materialized_view_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedDropMaterializedViewStmtProto& AnyResolvedStatementProto::resolved_drop_materialized_view_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_drop_materialized_view_stmt_node)
  return has_resolved_drop_materialized_view_stmt_node()
      ? *node_.resolved_drop_materialized_view_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedDropMaterializedViewStmtProto*>(&::zetasql::_ResolvedDropMaterializedViewStmtProto_default_instance_);
}
inline ::zetasql::ResolvedDropMaterializedViewStmtProto* AnyResolvedStatementProto::mutable_resolved_drop_materialized_view_stmt_node() {
  if (!has_resolved_drop_materialized_view_stmt_node()) {
    clear_node();
    set_has_resolved_drop_materialized_view_stmt_node();
    node_.resolved_drop_materialized_view_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedDropMaterializedViewStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_drop_materialized_view_stmt_node)
  return node_.resolved_drop_materialized_view_stmt_node_;
}

// optional .zetasql.ResolvedStartBatchStmtProto resolved_start_batch_stmt_node = 122;
inline bool AnyResolvedStatementProto::has_resolved_start_batch_stmt_node() const {
  return node_case() == kResolvedStartBatchStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_start_batch_stmt_node() {
  _oneof_case_[0] = kResolvedStartBatchStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_start_batch_stmt_node() {
  if (has_resolved_start_batch_stmt_node()) {
    delete node_.resolved_start_batch_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedStartBatchStmtProto& AnyResolvedStatementProto::_internal_resolved_start_batch_stmt_node() const {
  return *node_.resolved_start_batch_stmt_node_;
}
inline ::zetasql::ResolvedStartBatchStmtProto* AnyResolvedStatementProto::release_resolved_start_batch_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_start_batch_stmt_node)
  if (has_resolved_start_batch_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedStartBatchStmtProto* temp = node_.resolved_start_batch_stmt_node_;
    node_.resolved_start_batch_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedStartBatchStmtProto& AnyResolvedStatementProto::resolved_start_batch_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_start_batch_stmt_node)
  return has_resolved_start_batch_stmt_node()
      ? *node_.resolved_start_batch_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedStartBatchStmtProto*>(&::zetasql::_ResolvedStartBatchStmtProto_default_instance_);
}
inline ::zetasql::ResolvedStartBatchStmtProto* AnyResolvedStatementProto::mutable_resolved_start_batch_stmt_node() {
  if (!has_resolved_start_batch_stmt_node()) {
    clear_node();
    set_has_resolved_start_batch_stmt_node();
    node_.resolved_start_batch_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedStartBatchStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_start_batch_stmt_node)
  return node_.resolved_start_batch_stmt_node_;
}

// optional .zetasql.ResolvedRunBatchStmtProto resolved_run_batch_stmt_node = 123;
inline bool AnyResolvedStatementProto::has_resolved_run_batch_stmt_node() const {
  return node_case() == kResolvedRunBatchStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_run_batch_stmt_node() {
  _oneof_case_[0] = kResolvedRunBatchStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_run_batch_stmt_node() {
  if (has_resolved_run_batch_stmt_node()) {
    delete node_.resolved_run_batch_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedRunBatchStmtProto& AnyResolvedStatementProto::_internal_resolved_run_batch_stmt_node() const {
  return *node_.resolved_run_batch_stmt_node_;
}
inline ::zetasql::ResolvedRunBatchStmtProto* AnyResolvedStatementProto::release_resolved_run_batch_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_run_batch_stmt_node)
  if (has_resolved_run_batch_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedRunBatchStmtProto* temp = node_.resolved_run_batch_stmt_node_;
    node_.resolved_run_batch_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedRunBatchStmtProto& AnyResolvedStatementProto::resolved_run_batch_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_run_batch_stmt_node)
  return has_resolved_run_batch_stmt_node()
      ? *node_.resolved_run_batch_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedRunBatchStmtProto*>(&::zetasql::_ResolvedRunBatchStmtProto_default_instance_);
}
inline ::zetasql::ResolvedRunBatchStmtProto* AnyResolvedStatementProto::mutable_resolved_run_batch_stmt_node() {
  if (!has_resolved_run_batch_stmt_node()) {
    clear_node();
    set_has_resolved_run_batch_stmt_node();
    node_.resolved_run_batch_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedRunBatchStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_run_batch_stmt_node)
  return node_.resolved_run_batch_stmt_node_;
}

// optional .zetasql.ResolvedAbortBatchStmtProto resolved_abort_batch_stmt_node = 124;
inline bool AnyResolvedStatementProto::has_resolved_abort_batch_stmt_node() const {
  return node_case() == kResolvedAbortBatchStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_abort_batch_stmt_node() {
  _oneof_case_[0] = kResolvedAbortBatchStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_abort_batch_stmt_node() {
  if (has_resolved_abort_batch_stmt_node()) {
    delete node_.resolved_abort_batch_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAbortBatchStmtProto& AnyResolvedStatementProto::_internal_resolved_abort_batch_stmt_node() const {
  return *node_.resolved_abort_batch_stmt_node_;
}
inline ::zetasql::ResolvedAbortBatchStmtProto* AnyResolvedStatementProto::release_resolved_abort_batch_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_abort_batch_stmt_node)
  if (has_resolved_abort_batch_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedAbortBatchStmtProto* temp = node_.resolved_abort_batch_stmt_node_;
    node_.resolved_abort_batch_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAbortBatchStmtProto& AnyResolvedStatementProto::resolved_abort_batch_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_abort_batch_stmt_node)
  return has_resolved_abort_batch_stmt_node()
      ? *node_.resolved_abort_batch_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedAbortBatchStmtProto*>(&::zetasql::_ResolvedAbortBatchStmtProto_default_instance_);
}
inline ::zetasql::ResolvedAbortBatchStmtProto* AnyResolvedStatementProto::mutable_resolved_abort_batch_stmt_node() {
  if (!has_resolved_abort_batch_stmt_node()) {
    clear_node();
    set_has_resolved_abort_batch_stmt_node();
    node_.resolved_abort_batch_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedAbortBatchStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_abort_batch_stmt_node)
  return node_.resolved_abort_batch_stmt_node_;
}

// optional .zetasql.ResolvedTruncateStmtProto resolved_truncate_stmt_node = 133;
inline bool AnyResolvedStatementProto::has_resolved_truncate_stmt_node() const {
  return node_case() == kResolvedTruncateStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_truncate_stmt_node() {
  _oneof_case_[0] = kResolvedTruncateStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_truncate_stmt_node() {
  if (has_resolved_truncate_stmt_node()) {
    delete node_.resolved_truncate_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedTruncateStmtProto& AnyResolvedStatementProto::_internal_resolved_truncate_stmt_node() const {
  return *node_.resolved_truncate_stmt_node_;
}
inline ::zetasql::ResolvedTruncateStmtProto* AnyResolvedStatementProto::release_resolved_truncate_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_truncate_stmt_node)
  if (has_resolved_truncate_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedTruncateStmtProto* temp = node_.resolved_truncate_stmt_node_;
    node_.resolved_truncate_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedTruncateStmtProto& AnyResolvedStatementProto::resolved_truncate_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_truncate_stmt_node)
  return has_resolved_truncate_stmt_node()
      ? *node_.resolved_truncate_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedTruncateStmtProto*>(&::zetasql::_ResolvedTruncateStmtProto_default_instance_);
}
inline ::zetasql::ResolvedTruncateStmtProto* AnyResolvedStatementProto::mutable_resolved_truncate_stmt_node() {
  if (!has_resolved_truncate_stmt_node()) {
    clear_node();
    set_has_resolved_truncate_stmt_node();
    node_.resolved_truncate_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedTruncateStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_truncate_stmt_node)
  return node_.resolved_truncate_stmt_node_;
}

// optional .zetasql.ResolvedExecuteImmediateStmtProto resolved_execute_immediate_stmt_node = 140;
inline bool AnyResolvedStatementProto::has_resolved_execute_immediate_stmt_node() const {
  return node_case() == kResolvedExecuteImmediateStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_execute_immediate_stmt_node() {
  _oneof_case_[0] = kResolvedExecuteImmediateStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_execute_immediate_stmt_node() {
  if (has_resolved_execute_immediate_stmt_node()) {
    delete node_.resolved_execute_immediate_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedExecuteImmediateStmtProto& AnyResolvedStatementProto::_internal_resolved_execute_immediate_stmt_node() const {
  return *node_.resolved_execute_immediate_stmt_node_;
}
inline ::zetasql::ResolvedExecuteImmediateStmtProto* AnyResolvedStatementProto::release_resolved_execute_immediate_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_execute_immediate_stmt_node)
  if (has_resolved_execute_immediate_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedExecuteImmediateStmtProto* temp = node_.resolved_execute_immediate_stmt_node_;
    node_.resolved_execute_immediate_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedExecuteImmediateStmtProto& AnyResolvedStatementProto::resolved_execute_immediate_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_execute_immediate_stmt_node)
  return has_resolved_execute_immediate_stmt_node()
      ? *node_.resolved_execute_immediate_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedExecuteImmediateStmtProto*>(&::zetasql::_ResolvedExecuteImmediateStmtProto_default_instance_);
}
inline ::zetasql::ResolvedExecuteImmediateStmtProto* AnyResolvedStatementProto::mutable_resolved_execute_immediate_stmt_node() {
  if (!has_resolved_execute_immediate_stmt_node()) {
    clear_node();
    set_has_resolved_execute_immediate_stmt_node();
    node_.resolved_execute_immediate_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedExecuteImmediateStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_execute_immediate_stmt_node)
  return node_.resolved_execute_immediate_stmt_node_;
}

// optional .zetasql.ResolvedAssignmentStmtProto resolved_assignment_stmt_node = 142;
inline bool AnyResolvedStatementProto::has_resolved_assignment_stmt_node() const {
  return node_case() == kResolvedAssignmentStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_assignment_stmt_node() {
  _oneof_case_[0] = kResolvedAssignmentStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_assignment_stmt_node() {
  if (has_resolved_assignment_stmt_node()) {
    delete node_.resolved_assignment_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAssignmentStmtProto& AnyResolvedStatementProto::_internal_resolved_assignment_stmt_node() const {
  return *node_.resolved_assignment_stmt_node_;
}
inline ::zetasql::ResolvedAssignmentStmtProto* AnyResolvedStatementProto::release_resolved_assignment_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_assignment_stmt_node)
  if (has_resolved_assignment_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedAssignmentStmtProto* temp = node_.resolved_assignment_stmt_node_;
    node_.resolved_assignment_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAssignmentStmtProto& AnyResolvedStatementProto::resolved_assignment_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_assignment_stmt_node)
  return has_resolved_assignment_stmt_node()
      ? *node_.resolved_assignment_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedAssignmentStmtProto*>(&::zetasql::_ResolvedAssignmentStmtProto_default_instance_);
}
inline ::zetasql::ResolvedAssignmentStmtProto* AnyResolvedStatementProto::mutable_resolved_assignment_stmt_node() {
  if (!has_resolved_assignment_stmt_node()) {
    clear_node();
    set_has_resolved_assignment_stmt_node();
    node_.resolved_assignment_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedAssignmentStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_assignment_stmt_node)
  return node_.resolved_assignment_stmt_node_;
}

// optional .zetasql.ResolvedExportModelStmtProto resolved_export_model_stmt_node = 152;
inline bool AnyResolvedStatementProto::has_resolved_export_model_stmt_node() const {
  return node_case() == kResolvedExportModelStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_export_model_stmt_node() {
  _oneof_case_[0] = kResolvedExportModelStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_export_model_stmt_node() {
  if (has_resolved_export_model_stmt_node()) {
    delete node_.resolved_export_model_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedExportModelStmtProto& AnyResolvedStatementProto::_internal_resolved_export_model_stmt_node() const {
  return *node_.resolved_export_model_stmt_node_;
}
inline ::zetasql::ResolvedExportModelStmtProto* AnyResolvedStatementProto::release_resolved_export_model_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_export_model_stmt_node)
  if (has_resolved_export_model_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedExportModelStmtProto* temp = node_.resolved_export_model_stmt_node_;
    node_.resolved_export_model_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedExportModelStmtProto& AnyResolvedStatementProto::resolved_export_model_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_export_model_stmt_node)
  return has_resolved_export_model_stmt_node()
      ? *node_.resolved_export_model_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedExportModelStmtProto*>(&::zetasql::_ResolvedExportModelStmtProto_default_instance_);
}
inline ::zetasql::ResolvedExportModelStmtProto* AnyResolvedStatementProto::mutable_resolved_export_model_stmt_node() {
  if (!has_resolved_export_model_stmt_node()) {
    clear_node();
    set_has_resolved_export_model_stmt_node();
    node_.resolved_export_model_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedExportModelStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_export_model_stmt_node)
  return node_.resolved_export_model_stmt_node_;
}

// optional .zetasql.ResolvedDropTableFunctionStmtProto resolved_drop_table_function_stmt_node = 175;
inline bool AnyResolvedStatementProto::has_resolved_drop_table_function_stmt_node() const {
  return node_case() == kResolvedDropTableFunctionStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_drop_table_function_stmt_node() {
  _oneof_case_[0] = kResolvedDropTableFunctionStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_drop_table_function_stmt_node() {
  if (has_resolved_drop_table_function_stmt_node()) {
    delete node_.resolved_drop_table_function_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedDropTableFunctionStmtProto& AnyResolvedStatementProto::_internal_resolved_drop_table_function_stmt_node() const {
  return *node_.resolved_drop_table_function_stmt_node_;
}
inline ::zetasql::ResolvedDropTableFunctionStmtProto* AnyResolvedStatementProto::release_resolved_drop_table_function_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_drop_table_function_stmt_node)
  if (has_resolved_drop_table_function_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedDropTableFunctionStmtProto* temp = node_.resolved_drop_table_function_stmt_node_;
    node_.resolved_drop_table_function_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedDropTableFunctionStmtProto& AnyResolvedStatementProto::resolved_drop_table_function_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_drop_table_function_stmt_node)
  return has_resolved_drop_table_function_stmt_node()
      ? *node_.resolved_drop_table_function_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedDropTableFunctionStmtProto*>(&::zetasql::_ResolvedDropTableFunctionStmtProto_default_instance_);
}
inline ::zetasql::ResolvedDropTableFunctionStmtProto* AnyResolvedStatementProto::mutable_resolved_drop_table_function_stmt_node() {
  if (!has_resolved_drop_table_function_stmt_node()) {
    clear_node();
    set_has_resolved_drop_table_function_stmt_node();
    node_.resolved_drop_table_function_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedDropTableFunctionStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_drop_table_function_stmt_node)
  return node_.resolved_drop_table_function_stmt_node_;
}

// optional .zetasql.ResolvedCloneDataStmtProto resolved_clone_data_stmt_node = 177;
inline bool AnyResolvedStatementProto::has_resolved_clone_data_stmt_node() const {
  return node_case() == kResolvedCloneDataStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_clone_data_stmt_node() {
  _oneof_case_[0] = kResolvedCloneDataStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_clone_data_stmt_node() {
  if (has_resolved_clone_data_stmt_node()) {
    delete node_.resolved_clone_data_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedCloneDataStmtProto& AnyResolvedStatementProto::_internal_resolved_clone_data_stmt_node() const {
  return *node_.resolved_clone_data_stmt_node_;
}
inline ::zetasql::ResolvedCloneDataStmtProto* AnyResolvedStatementProto::release_resolved_clone_data_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_clone_data_stmt_node)
  if (has_resolved_clone_data_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedCloneDataStmtProto* temp = node_.resolved_clone_data_stmt_node_;
    node_.resolved_clone_data_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedCloneDataStmtProto& AnyResolvedStatementProto::resolved_clone_data_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_clone_data_stmt_node)
  return has_resolved_clone_data_stmt_node()
      ? *node_.resolved_clone_data_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedCloneDataStmtProto*>(&::zetasql::_ResolvedCloneDataStmtProto_default_instance_);
}
inline ::zetasql::ResolvedCloneDataStmtProto* AnyResolvedStatementProto::mutable_resolved_clone_data_stmt_node() {
  if (!has_resolved_clone_data_stmt_node()) {
    clear_node();
    set_has_resolved_clone_data_stmt_node();
    node_.resolved_clone_data_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedCloneDataStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_clone_data_stmt_node)
  return node_.resolved_clone_data_stmt_node_;
}

// optional .zetasql.ResolvedAnalyzeStmtProto resolved_analyze_stmt_node = 180;
inline bool AnyResolvedStatementProto::has_resolved_analyze_stmt_node() const {
  return node_case() == kResolvedAnalyzeStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_analyze_stmt_node() {
  _oneof_case_[0] = kResolvedAnalyzeStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_analyze_stmt_node() {
  if (has_resolved_analyze_stmt_node()) {
    delete node_.resolved_analyze_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAnalyzeStmtProto& AnyResolvedStatementProto::_internal_resolved_analyze_stmt_node() const {
  return *node_.resolved_analyze_stmt_node_;
}
inline ::zetasql::ResolvedAnalyzeStmtProto* AnyResolvedStatementProto::release_resolved_analyze_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_analyze_stmt_node)
  if (has_resolved_analyze_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedAnalyzeStmtProto* temp = node_.resolved_analyze_stmt_node_;
    node_.resolved_analyze_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAnalyzeStmtProto& AnyResolvedStatementProto::resolved_analyze_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_analyze_stmt_node)
  return has_resolved_analyze_stmt_node()
      ? *node_.resolved_analyze_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedAnalyzeStmtProto*>(&::zetasql::_ResolvedAnalyzeStmtProto_default_instance_);
}
inline ::zetasql::ResolvedAnalyzeStmtProto* AnyResolvedStatementProto::mutable_resolved_analyze_stmt_node() {
  if (!has_resolved_analyze_stmt_node()) {
    clear_node();
    set_has_resolved_analyze_stmt_node();
    node_.resolved_analyze_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedAnalyzeStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_analyze_stmt_node)
  return node_.resolved_analyze_stmt_node_;
}

// optional .zetasql.ResolvedDropSnapshotTableStmtProto resolved_drop_snapshot_table_stmt_node = 183;
inline bool AnyResolvedStatementProto::has_resolved_drop_snapshot_table_stmt_node() const {
  return node_case() == kResolvedDropSnapshotTableStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_drop_snapshot_table_stmt_node() {
  _oneof_case_[0] = kResolvedDropSnapshotTableStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_drop_snapshot_table_stmt_node() {
  if (has_resolved_drop_snapshot_table_stmt_node()) {
    delete node_.resolved_drop_snapshot_table_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedDropSnapshotTableStmtProto& AnyResolvedStatementProto::_internal_resolved_drop_snapshot_table_stmt_node() const {
  return *node_.resolved_drop_snapshot_table_stmt_node_;
}
inline ::zetasql::ResolvedDropSnapshotTableStmtProto* AnyResolvedStatementProto::release_resolved_drop_snapshot_table_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_drop_snapshot_table_stmt_node)
  if (has_resolved_drop_snapshot_table_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedDropSnapshotTableStmtProto* temp = node_.resolved_drop_snapshot_table_stmt_node_;
    node_.resolved_drop_snapshot_table_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedDropSnapshotTableStmtProto& AnyResolvedStatementProto::resolved_drop_snapshot_table_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_drop_snapshot_table_stmt_node)
  return has_resolved_drop_snapshot_table_stmt_node()
      ? *node_.resolved_drop_snapshot_table_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedDropSnapshotTableStmtProto*>(&::zetasql::_ResolvedDropSnapshotTableStmtProto_default_instance_);
}
inline ::zetasql::ResolvedDropSnapshotTableStmtProto* AnyResolvedStatementProto::mutable_resolved_drop_snapshot_table_stmt_node() {
  if (!has_resolved_drop_snapshot_table_stmt_node()) {
    clear_node();
    set_has_resolved_drop_snapshot_table_stmt_node();
    node_.resolved_drop_snapshot_table_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedDropSnapshotTableStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_drop_snapshot_table_stmt_node)
  return node_.resolved_drop_snapshot_table_stmt_node_;
}

// optional .zetasql.ResolvedAuxLoadDataStmtProto resolved_aux_load_data_stmt_node = 186;
inline bool AnyResolvedStatementProto::has_resolved_aux_load_data_stmt_node() const {
  return node_case() == kResolvedAuxLoadDataStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_aux_load_data_stmt_node() {
  _oneof_case_[0] = kResolvedAuxLoadDataStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_aux_load_data_stmt_node() {
  if (has_resolved_aux_load_data_stmt_node()) {
    delete node_.resolved_aux_load_data_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAuxLoadDataStmtProto& AnyResolvedStatementProto::_internal_resolved_aux_load_data_stmt_node() const {
  return *node_.resolved_aux_load_data_stmt_node_;
}
inline ::zetasql::ResolvedAuxLoadDataStmtProto* AnyResolvedStatementProto::release_resolved_aux_load_data_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_aux_load_data_stmt_node)
  if (has_resolved_aux_load_data_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedAuxLoadDataStmtProto* temp = node_.resolved_aux_load_data_stmt_node_;
    node_.resolved_aux_load_data_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAuxLoadDataStmtProto& AnyResolvedStatementProto::resolved_aux_load_data_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_aux_load_data_stmt_node)
  return has_resolved_aux_load_data_stmt_node()
      ? *node_.resolved_aux_load_data_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedAuxLoadDataStmtProto*>(&::zetasql::_ResolvedAuxLoadDataStmtProto_default_instance_);
}
inline ::zetasql::ResolvedAuxLoadDataStmtProto* AnyResolvedStatementProto::mutable_resolved_aux_load_data_stmt_node() {
  if (!has_resolved_aux_load_data_stmt_node()) {
    clear_node();
    set_has_resolved_aux_load_data_stmt_node();
    node_.resolved_aux_load_data_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedAuxLoadDataStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_aux_load_data_stmt_node)
  return node_.resolved_aux_load_data_stmt_node_;
}

// optional .zetasql.ResolvedDropSearchIndexStmtProto resolved_drop_search_index_stmt_node = 190;
inline bool AnyResolvedStatementProto::has_resolved_drop_search_index_stmt_node() const {
  return node_case() == kResolvedDropSearchIndexStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_drop_search_index_stmt_node() {
  _oneof_case_[0] = kResolvedDropSearchIndexStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_drop_search_index_stmt_node() {
  if (has_resolved_drop_search_index_stmt_node()) {
    delete node_.resolved_drop_search_index_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedDropSearchIndexStmtProto& AnyResolvedStatementProto::_internal_resolved_drop_search_index_stmt_node() const {
  return *node_.resolved_drop_search_index_stmt_node_;
}
inline ::zetasql::ResolvedDropSearchIndexStmtProto* AnyResolvedStatementProto::release_resolved_drop_search_index_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_drop_search_index_stmt_node)
  if (has_resolved_drop_search_index_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedDropSearchIndexStmtProto* temp = node_.resolved_drop_search_index_stmt_node_;
    node_.resolved_drop_search_index_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedDropSearchIndexStmtProto& AnyResolvedStatementProto::resolved_drop_search_index_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_drop_search_index_stmt_node)
  return has_resolved_drop_search_index_stmt_node()
      ? *node_.resolved_drop_search_index_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedDropSearchIndexStmtProto*>(&::zetasql::_ResolvedDropSearchIndexStmtProto_default_instance_);
}
inline ::zetasql::ResolvedDropSearchIndexStmtProto* AnyResolvedStatementProto::mutable_resolved_drop_search_index_stmt_node() {
  if (!has_resolved_drop_search_index_stmt_node()) {
    clear_node();
    set_has_resolved_drop_search_index_stmt_node();
    node_.resolved_drop_search_index_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedDropSearchIndexStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_drop_search_index_stmt_node)
  return node_.resolved_drop_search_index_stmt_node_;
}

// optional .zetasql.ResolvedDropPrivilegeRestrictionStmtProto resolved_drop_privilege_restriction_stmt_node = 192;
inline bool AnyResolvedStatementProto::has_resolved_drop_privilege_restriction_stmt_node() const {
  return node_case() == kResolvedDropPrivilegeRestrictionStmtNode;
}
inline void AnyResolvedStatementProto::set_has_resolved_drop_privilege_restriction_stmt_node() {
  _oneof_case_[0] = kResolvedDropPrivilegeRestrictionStmtNode;
}
inline void AnyResolvedStatementProto::clear_resolved_drop_privilege_restriction_stmt_node() {
  if (has_resolved_drop_privilege_restriction_stmt_node()) {
    delete node_.resolved_drop_privilege_restriction_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedDropPrivilegeRestrictionStmtProto& AnyResolvedStatementProto::_internal_resolved_drop_privilege_restriction_stmt_node() const {
  return *node_.resolved_drop_privilege_restriction_stmt_node_;
}
inline ::zetasql::ResolvedDropPrivilegeRestrictionStmtProto* AnyResolvedStatementProto::release_resolved_drop_privilege_restriction_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedStatementProto.resolved_drop_privilege_restriction_stmt_node)
  if (has_resolved_drop_privilege_restriction_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedDropPrivilegeRestrictionStmtProto* temp = node_.resolved_drop_privilege_restriction_stmt_node_;
    node_.resolved_drop_privilege_restriction_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedDropPrivilegeRestrictionStmtProto& AnyResolvedStatementProto::resolved_drop_privilege_restriction_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedStatementProto.resolved_drop_privilege_restriction_stmt_node)
  return has_resolved_drop_privilege_restriction_stmt_node()
      ? *node_.resolved_drop_privilege_restriction_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedDropPrivilegeRestrictionStmtProto*>(&::zetasql::_ResolvedDropPrivilegeRestrictionStmtProto_default_instance_);
}
inline ::zetasql::ResolvedDropPrivilegeRestrictionStmtProto* AnyResolvedStatementProto::mutable_resolved_drop_privilege_restriction_stmt_node() {
  if (!has_resolved_drop_privilege_restriction_stmt_node()) {
    clear_node();
    set_has_resolved_drop_privilege_restriction_stmt_node();
    node_.resolved_drop_privilege_restriction_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedDropPrivilegeRestrictionStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedStatementProto.resolved_drop_privilege_restriction_stmt_node)
  return node_.resolved_drop_privilege_restriction_stmt_node_;
}

inline bool AnyResolvedStatementProto::has_node() const {
  return node_case() != NODE_NOT_SET;
}
inline void AnyResolvedStatementProto::clear_has_node() {
  _oneof_case_[0] = NODE_NOT_SET;
}
inline AnyResolvedStatementProto::NodeCase AnyResolvedStatementProto::node_case() const {
  return AnyResolvedStatementProto::NodeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResolvedStatementProto

// optional .zetasql.ResolvedNodeProto parent = 1;
inline bool ResolvedStatementProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedStatementProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedStatementProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::zetasql::ResolvedNodeProto& ResolvedStatementProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedNodeProto& ResolvedStatementProto::parent() const {
  const ::zetasql::ResolvedNodeProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedStatementProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedNodeProto*>(
      &::zetasql::_ResolvedNodeProto_default_instance_);
}
inline ::zetasql::ResolvedNodeProto* ResolvedStatementProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedStatementProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedNodeProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedNodeProto* ResolvedStatementProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedNodeProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedStatementProto.parent)
  return parent_;
}
inline void ResolvedStatementProto::set_allocated_parent(::zetasql::ResolvedNodeProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(parent_);
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedStatementProto.parent)
}

// repeated .zetasql.ResolvedOptionProto hint_list = 2;
inline int ResolvedStatementProto::hint_list_size() const {
  return hint_list_.size();
}
inline void ResolvedStatementProto::clear_hint_list() {
  hint_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedStatementProto::mutable_hint_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedStatementProto.hint_list)
  return hint_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedStatementProto::mutable_hint_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedStatementProto.hint_list)
  return &hint_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedStatementProto::hint_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedStatementProto.hint_list)
  return hint_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedStatementProto::add_hint_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedStatementProto.hint_list)
  return hint_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedStatementProto::hint_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedStatementProto.hint_list)
  return hint_list_;
}

// -------------------------------------------------------------------

// ResolvedExplainStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedExplainStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedExplainStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedExplainStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedExplainStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedExplainStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedExplainStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExplainStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedExplainStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedExplainStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedExplainStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExplainStmtProto.parent)
  return parent_;
}
inline void ResolvedExplainStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedExplainStmtProto.parent)
}

// optional .zetasql.AnyResolvedStatementProto statement = 2;
inline bool ResolvedExplainStmtProto::has_statement() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedExplainStmtProto::set_has_statement() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedExplainStmtProto::clear_has_statement() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedExplainStmtProto::clear_statement() {
  if (statement_ != NULL) statement_->Clear();
  clear_has_statement();
}
inline const ::zetasql::AnyResolvedStatementProto& ResolvedExplainStmtProto::_internal_statement() const {
  return *statement_;
}
inline const ::zetasql::AnyResolvedStatementProto& ResolvedExplainStmtProto::statement() const {
  const ::zetasql::AnyResolvedStatementProto* p = statement_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExplainStmtProto.statement)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedStatementProto*>(
      &::zetasql::_AnyResolvedStatementProto_default_instance_);
}
inline ::zetasql::AnyResolvedStatementProto* ResolvedExplainStmtProto::release_statement() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedExplainStmtProto.statement)
  clear_has_statement();
  ::zetasql::AnyResolvedStatementProto* temp = statement_;
  statement_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedStatementProto* ResolvedExplainStmtProto::mutable_statement() {
  set_has_statement();
  if (statement_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedStatementProto>(GetArenaNoVirtual());
    statement_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExplainStmtProto.statement)
  return statement_;
}
inline void ResolvedExplainStmtProto::set_allocated_statement(::zetasql::AnyResolvedStatementProto* statement) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete statement_;
  }
  if (statement) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      statement = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, statement, submessage_arena);
    }
    set_has_statement();
  } else {
    clear_has_statement();
  }
  statement_ = statement;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedExplainStmtProto.statement)
}

// -------------------------------------------------------------------

// ResolvedQueryStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedQueryStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedQueryStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedQueryStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedQueryStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedQueryStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedQueryStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedQueryStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedQueryStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedQueryStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedQueryStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedQueryStmtProto.parent)
  return parent_;
}
inline void ResolvedQueryStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedQueryStmtProto.parent)
}

// repeated .zetasql.ResolvedOutputColumnProto output_column_list = 2;
inline int ResolvedQueryStmtProto::output_column_list_size() const {
  return output_column_list_.size();
}
inline void ResolvedQueryStmtProto::clear_output_column_list() {
  output_column_list_.Clear();
}
inline ::zetasql::ResolvedOutputColumnProto* ResolvedQueryStmtProto::mutable_output_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedQueryStmtProto.output_column_list)
  return output_column_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >*
ResolvedQueryStmtProto::mutable_output_column_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedQueryStmtProto.output_column_list)
  return &output_column_list_;
}
inline const ::zetasql::ResolvedOutputColumnProto& ResolvedQueryStmtProto::output_column_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedQueryStmtProto.output_column_list)
  return output_column_list_.Get(index);
}
inline ::zetasql::ResolvedOutputColumnProto* ResolvedQueryStmtProto::add_output_column_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedQueryStmtProto.output_column_list)
  return output_column_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >&
ResolvedQueryStmtProto::output_column_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedQueryStmtProto.output_column_list)
  return output_column_list_;
}

// optional bool is_value_table = 3;
inline bool ResolvedQueryStmtProto::has_is_value_table() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedQueryStmtProto::set_has_is_value_table() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedQueryStmtProto::clear_has_is_value_table() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedQueryStmtProto::clear_is_value_table() {
  is_value_table_ = false;
  clear_has_is_value_table();
}
inline bool ResolvedQueryStmtProto::is_value_table() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedQueryStmtProto.is_value_table)
  return is_value_table_;
}
inline void ResolvedQueryStmtProto::set_is_value_table(bool value) {
  set_has_is_value_table();
  is_value_table_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedQueryStmtProto.is_value_table)
}

// optional .zetasql.AnyResolvedScanProto query = 4;
inline bool ResolvedQueryStmtProto::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedQueryStmtProto::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedQueryStmtProto::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedQueryStmtProto::clear_query() {
  if (query_ != NULL) query_->Clear();
  clear_has_query();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedQueryStmtProto::_internal_query() const {
  return *query_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedQueryStmtProto::query() const {
  const ::zetasql::AnyResolvedScanProto* p = query_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedQueryStmtProto.query)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedQueryStmtProto::release_query() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedQueryStmtProto.query)
  clear_has_query();
  ::zetasql::AnyResolvedScanProto* temp = query_;
  query_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedQueryStmtProto::mutable_query() {
  set_has_query();
  if (query_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    query_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedQueryStmtProto.query)
  return query_;
}
inline void ResolvedQueryStmtProto::set_allocated_query(::zetasql::AnyResolvedScanProto* query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete query_;
  }
  if (query) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    set_has_query();
  } else {
    clear_has_query();
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedQueryStmtProto.query)
}

// -------------------------------------------------------------------

// ResolvedCreateDatabaseStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedCreateDatabaseStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedCreateDatabaseStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedCreateDatabaseStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedCreateDatabaseStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedCreateDatabaseStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedCreateDatabaseStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateDatabaseStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedCreateDatabaseStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateDatabaseStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedCreateDatabaseStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateDatabaseStmtProto.parent)
  return parent_;
}
inline void ResolvedCreateDatabaseStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateDatabaseStmtProto.parent)
}

// repeated string name_path = 2;
inline int ResolvedCreateDatabaseStmtProto::name_path_size() const {
  return name_path_.size();
}
inline void ResolvedCreateDatabaseStmtProto::clear_name_path() {
  name_path_.Clear();
}
inline const ::std::string& ResolvedCreateDatabaseStmtProto::name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateDatabaseStmtProto.name_path)
  return name_path_.Get(index);
}
inline ::std::string* ResolvedCreateDatabaseStmtProto::mutable_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateDatabaseStmtProto.name_path)
  return name_path_.Mutable(index);
}
inline void ResolvedCreateDatabaseStmtProto::set_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateDatabaseStmtProto.name_path)
  name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedCreateDatabaseStmtProto::set_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateDatabaseStmtProto.name_path)
  name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedCreateDatabaseStmtProto::set_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedCreateDatabaseStmtProto.name_path)
}
inline void ResolvedCreateDatabaseStmtProto::set_name_path(int index, const char* value, size_t size) {
  name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedCreateDatabaseStmtProto.name_path)
}
inline ::std::string* ResolvedCreateDatabaseStmtProto::add_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedCreateDatabaseStmtProto.name_path)
  return name_path_.Add();
}
inline void ResolvedCreateDatabaseStmtProto::add_name_path(const ::std::string& value) {
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateDatabaseStmtProto.name_path)
}
#if LANG_CXX11
inline void ResolvedCreateDatabaseStmtProto::add_name_path(::std::string&& value) {
  name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateDatabaseStmtProto.name_path)
}
#endif
inline void ResolvedCreateDatabaseStmtProto::add_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedCreateDatabaseStmtProto.name_path)
}
inline void ResolvedCreateDatabaseStmtProto::add_name_path(const char* value, size_t size) {
  name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedCreateDatabaseStmtProto.name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedCreateDatabaseStmtProto::name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateDatabaseStmtProto.name_path)
  return name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedCreateDatabaseStmtProto::mutable_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateDatabaseStmtProto.name_path)
  return &name_path_;
}

// repeated .zetasql.ResolvedOptionProto option_list = 3;
inline int ResolvedCreateDatabaseStmtProto::option_list_size() const {
  return option_list_.size();
}
inline void ResolvedCreateDatabaseStmtProto::clear_option_list() {
  option_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedCreateDatabaseStmtProto::mutable_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateDatabaseStmtProto.option_list)
  return option_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedCreateDatabaseStmtProto::mutable_option_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateDatabaseStmtProto.option_list)
  return &option_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedCreateDatabaseStmtProto::option_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateDatabaseStmtProto.option_list)
  return option_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedCreateDatabaseStmtProto::add_option_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateDatabaseStmtProto.option_list)
  return option_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedCreateDatabaseStmtProto::option_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateDatabaseStmtProto.option_list)
  return option_list_;
}

// -------------------------------------------------------------------

// AnyResolvedCreateStatementProto

// optional .zetasql.ResolvedCreateFunctionStmtProto resolved_create_function_stmt_node = 76;
inline bool AnyResolvedCreateStatementProto::has_resolved_create_function_stmt_node() const {
  return node_case() == kResolvedCreateFunctionStmtNode;
}
inline void AnyResolvedCreateStatementProto::set_has_resolved_create_function_stmt_node() {
  _oneof_case_[0] = kResolvedCreateFunctionStmtNode;
}
inline void AnyResolvedCreateStatementProto::clear_resolved_create_function_stmt_node() {
  if (has_resolved_create_function_stmt_node()) {
    delete node_.resolved_create_function_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedCreateFunctionStmtProto& AnyResolvedCreateStatementProto::_internal_resolved_create_function_stmt_node() const {
  return *node_.resolved_create_function_stmt_node_;
}
inline ::zetasql::ResolvedCreateFunctionStmtProto* AnyResolvedCreateStatementProto::release_resolved_create_function_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedCreateStatementProto.resolved_create_function_stmt_node)
  if (has_resolved_create_function_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedCreateFunctionStmtProto* temp = node_.resolved_create_function_stmt_node_;
    node_.resolved_create_function_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedCreateFunctionStmtProto& AnyResolvedCreateStatementProto::resolved_create_function_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedCreateStatementProto.resolved_create_function_stmt_node)
  return has_resolved_create_function_stmt_node()
      ? *node_.resolved_create_function_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedCreateFunctionStmtProto*>(&::zetasql::_ResolvedCreateFunctionStmtProto_default_instance_);
}
inline ::zetasql::ResolvedCreateFunctionStmtProto* AnyResolvedCreateStatementProto::mutable_resolved_create_function_stmt_node() {
  if (!has_resolved_create_function_stmt_node()) {
    clear_node();
    set_has_resolved_create_function_stmt_node();
    node_.resolved_create_function_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedCreateFunctionStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedCreateStatementProto.resolved_create_function_stmt_node)
  return node_.resolved_create_function_stmt_node_;
}

// optional .zetasql.ResolvedCreateTableFunctionStmtProto resolved_create_table_function_stmt_node = 88;
inline bool AnyResolvedCreateStatementProto::has_resolved_create_table_function_stmt_node() const {
  return node_case() == kResolvedCreateTableFunctionStmtNode;
}
inline void AnyResolvedCreateStatementProto::set_has_resolved_create_table_function_stmt_node() {
  _oneof_case_[0] = kResolvedCreateTableFunctionStmtNode;
}
inline void AnyResolvedCreateStatementProto::clear_resolved_create_table_function_stmt_node() {
  if (has_resolved_create_table_function_stmt_node()) {
    delete node_.resolved_create_table_function_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedCreateTableFunctionStmtProto& AnyResolvedCreateStatementProto::_internal_resolved_create_table_function_stmt_node() const {
  return *node_.resolved_create_table_function_stmt_node_;
}
inline ::zetasql::ResolvedCreateTableFunctionStmtProto* AnyResolvedCreateStatementProto::release_resolved_create_table_function_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedCreateStatementProto.resolved_create_table_function_stmt_node)
  if (has_resolved_create_table_function_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedCreateTableFunctionStmtProto* temp = node_.resolved_create_table_function_stmt_node_;
    node_.resolved_create_table_function_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedCreateTableFunctionStmtProto& AnyResolvedCreateStatementProto::resolved_create_table_function_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedCreateStatementProto.resolved_create_table_function_stmt_node)
  return has_resolved_create_table_function_stmt_node()
      ? *node_.resolved_create_table_function_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedCreateTableFunctionStmtProto*>(&::zetasql::_ResolvedCreateTableFunctionStmtProto_default_instance_);
}
inline ::zetasql::ResolvedCreateTableFunctionStmtProto* AnyResolvedCreateStatementProto::mutable_resolved_create_table_function_stmt_node() {
  if (!has_resolved_create_table_function_stmt_node()) {
    clear_node();
    set_has_resolved_create_table_function_stmt_node();
    node_.resolved_create_table_function_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedCreateTableFunctionStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedCreateStatementProto.resolved_create_table_function_stmt_node)
  return node_.resolved_create_table_function_stmt_node_;
}

// optional .zetasql.ResolvedCreateIndexStmtProto resolved_create_index_stmt_node = 97;
inline bool AnyResolvedCreateStatementProto::has_resolved_create_index_stmt_node() const {
  return node_case() == kResolvedCreateIndexStmtNode;
}
inline void AnyResolvedCreateStatementProto::set_has_resolved_create_index_stmt_node() {
  _oneof_case_[0] = kResolvedCreateIndexStmtNode;
}
inline void AnyResolvedCreateStatementProto::clear_resolved_create_index_stmt_node() {
  if (has_resolved_create_index_stmt_node()) {
    delete node_.resolved_create_index_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedCreateIndexStmtProto& AnyResolvedCreateStatementProto::_internal_resolved_create_index_stmt_node() const {
  return *node_.resolved_create_index_stmt_node_;
}
inline ::zetasql::ResolvedCreateIndexStmtProto* AnyResolvedCreateStatementProto::release_resolved_create_index_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedCreateStatementProto.resolved_create_index_stmt_node)
  if (has_resolved_create_index_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedCreateIndexStmtProto* temp = node_.resolved_create_index_stmt_node_;
    node_.resolved_create_index_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedCreateIndexStmtProto& AnyResolvedCreateStatementProto::resolved_create_index_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedCreateStatementProto.resolved_create_index_stmt_node)
  return has_resolved_create_index_stmt_node()
      ? *node_.resolved_create_index_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedCreateIndexStmtProto*>(&::zetasql::_ResolvedCreateIndexStmtProto_default_instance_);
}
inline ::zetasql::ResolvedCreateIndexStmtProto* AnyResolvedCreateStatementProto::mutable_resolved_create_index_stmt_node() {
  if (!has_resolved_create_index_stmt_node()) {
    clear_node();
    set_has_resolved_create_index_stmt_node();
    node_.resolved_create_index_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedCreateIndexStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedCreateStatementProto.resolved_create_index_stmt_node)
  return node_.resolved_create_index_stmt_node_;
}

// optional .zetasql.ResolvedCreateConstantStmtProto resolved_create_constant_stmt_node = 99;
inline bool AnyResolvedCreateStatementProto::has_resolved_create_constant_stmt_node() const {
  return node_case() == kResolvedCreateConstantStmtNode;
}
inline void AnyResolvedCreateStatementProto::set_has_resolved_create_constant_stmt_node() {
  _oneof_case_[0] = kResolvedCreateConstantStmtNode;
}
inline void AnyResolvedCreateStatementProto::clear_resolved_create_constant_stmt_node() {
  if (has_resolved_create_constant_stmt_node()) {
    delete node_.resolved_create_constant_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedCreateConstantStmtProto& AnyResolvedCreateStatementProto::_internal_resolved_create_constant_stmt_node() const {
  return *node_.resolved_create_constant_stmt_node_;
}
inline ::zetasql::ResolvedCreateConstantStmtProto* AnyResolvedCreateStatementProto::release_resolved_create_constant_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedCreateStatementProto.resolved_create_constant_stmt_node)
  if (has_resolved_create_constant_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedCreateConstantStmtProto* temp = node_.resolved_create_constant_stmt_node_;
    node_.resolved_create_constant_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedCreateConstantStmtProto& AnyResolvedCreateStatementProto::resolved_create_constant_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedCreateStatementProto.resolved_create_constant_stmt_node)
  return has_resolved_create_constant_stmt_node()
      ? *node_.resolved_create_constant_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedCreateConstantStmtProto*>(&::zetasql::_ResolvedCreateConstantStmtProto_default_instance_);
}
inline ::zetasql::ResolvedCreateConstantStmtProto* AnyResolvedCreateStatementProto::mutable_resolved_create_constant_stmt_node() {
  if (!has_resolved_create_constant_stmt_node()) {
    clear_node();
    set_has_resolved_create_constant_stmt_node();
    node_.resolved_create_constant_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedCreateConstantStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedCreateStatementProto.resolved_create_constant_stmt_node)
  return node_.resolved_create_constant_stmt_node_;
}

// optional .zetasql.AnyResolvedCreateTableStmtBaseProto resolved_create_table_stmt_base_node = 106;
inline bool AnyResolvedCreateStatementProto::has_resolved_create_table_stmt_base_node() const {
  return node_case() == kResolvedCreateTableStmtBaseNode;
}
inline void AnyResolvedCreateStatementProto::set_has_resolved_create_table_stmt_base_node() {
  _oneof_case_[0] = kResolvedCreateTableStmtBaseNode;
}
inline void AnyResolvedCreateStatementProto::clear_resolved_create_table_stmt_base_node() {
  if (has_resolved_create_table_stmt_base_node()) {
    delete node_.resolved_create_table_stmt_base_node_;
    clear_has_node();
  }
}
inline const ::zetasql::AnyResolvedCreateTableStmtBaseProto& AnyResolvedCreateStatementProto::_internal_resolved_create_table_stmt_base_node() const {
  return *node_.resolved_create_table_stmt_base_node_;
}
inline ::zetasql::AnyResolvedCreateTableStmtBaseProto* AnyResolvedCreateStatementProto::release_resolved_create_table_stmt_base_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedCreateStatementProto.resolved_create_table_stmt_base_node)
  if (has_resolved_create_table_stmt_base_node()) {
    clear_has_node();
      ::zetasql::AnyResolvedCreateTableStmtBaseProto* temp = node_.resolved_create_table_stmt_base_node_;
    node_.resolved_create_table_stmt_base_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::AnyResolvedCreateTableStmtBaseProto& AnyResolvedCreateStatementProto::resolved_create_table_stmt_base_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedCreateStatementProto.resolved_create_table_stmt_base_node)
  return has_resolved_create_table_stmt_base_node()
      ? *node_.resolved_create_table_stmt_base_node_
      : *reinterpret_cast< ::zetasql::AnyResolvedCreateTableStmtBaseProto*>(&::zetasql::_AnyResolvedCreateTableStmtBaseProto_default_instance_);
}
inline ::zetasql::AnyResolvedCreateTableStmtBaseProto* AnyResolvedCreateStatementProto::mutable_resolved_create_table_stmt_base_node() {
  if (!has_resolved_create_table_stmt_base_node()) {
    clear_node();
    set_has_resolved_create_table_stmt_base_node();
    node_.resolved_create_table_stmt_base_node_ = CreateMaybeMessage< ::zetasql::AnyResolvedCreateTableStmtBaseProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedCreateStatementProto.resolved_create_table_stmt_base_node)
  return node_.resolved_create_table_stmt_base_node_;
}

// optional .zetasql.ResolvedCreateModelStmtProto resolved_create_model_stmt_node = 107;
inline bool AnyResolvedCreateStatementProto::has_resolved_create_model_stmt_node() const {
  return node_case() == kResolvedCreateModelStmtNode;
}
inline void AnyResolvedCreateStatementProto::set_has_resolved_create_model_stmt_node() {
  _oneof_case_[0] = kResolvedCreateModelStmtNode;
}
inline void AnyResolvedCreateStatementProto::clear_resolved_create_model_stmt_node() {
  if (has_resolved_create_model_stmt_node()) {
    delete node_.resolved_create_model_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedCreateModelStmtProto& AnyResolvedCreateStatementProto::_internal_resolved_create_model_stmt_node() const {
  return *node_.resolved_create_model_stmt_node_;
}
inline ::zetasql::ResolvedCreateModelStmtProto* AnyResolvedCreateStatementProto::release_resolved_create_model_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedCreateStatementProto.resolved_create_model_stmt_node)
  if (has_resolved_create_model_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedCreateModelStmtProto* temp = node_.resolved_create_model_stmt_node_;
    node_.resolved_create_model_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedCreateModelStmtProto& AnyResolvedCreateStatementProto::resolved_create_model_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedCreateStatementProto.resolved_create_model_stmt_node)
  return has_resolved_create_model_stmt_node()
      ? *node_.resolved_create_model_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedCreateModelStmtProto*>(&::zetasql::_ResolvedCreateModelStmtProto_default_instance_);
}
inline ::zetasql::ResolvedCreateModelStmtProto* AnyResolvedCreateStatementProto::mutable_resolved_create_model_stmt_node() {
  if (!has_resolved_create_model_stmt_node()) {
    clear_node();
    set_has_resolved_create_model_stmt_node();
    node_.resolved_create_model_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedCreateModelStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedCreateStatementProto.resolved_create_model_stmt_node)
  return node_.resolved_create_model_stmt_node_;
}

// optional .zetasql.AnyResolvedCreateViewBaseProto resolved_create_view_base_node = 108;
inline bool AnyResolvedCreateStatementProto::has_resolved_create_view_base_node() const {
  return node_case() == kResolvedCreateViewBaseNode;
}
inline void AnyResolvedCreateStatementProto::set_has_resolved_create_view_base_node() {
  _oneof_case_[0] = kResolvedCreateViewBaseNode;
}
inline void AnyResolvedCreateStatementProto::clear_resolved_create_view_base_node() {
  if (has_resolved_create_view_base_node()) {
    delete node_.resolved_create_view_base_node_;
    clear_has_node();
  }
}
inline const ::zetasql::AnyResolvedCreateViewBaseProto& AnyResolvedCreateStatementProto::_internal_resolved_create_view_base_node() const {
  return *node_.resolved_create_view_base_node_;
}
inline ::zetasql::AnyResolvedCreateViewBaseProto* AnyResolvedCreateStatementProto::release_resolved_create_view_base_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedCreateStatementProto.resolved_create_view_base_node)
  if (has_resolved_create_view_base_node()) {
    clear_has_node();
      ::zetasql::AnyResolvedCreateViewBaseProto* temp = node_.resolved_create_view_base_node_;
    node_.resolved_create_view_base_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::AnyResolvedCreateViewBaseProto& AnyResolvedCreateStatementProto::resolved_create_view_base_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedCreateStatementProto.resolved_create_view_base_node)
  return has_resolved_create_view_base_node()
      ? *node_.resolved_create_view_base_node_
      : *reinterpret_cast< ::zetasql::AnyResolvedCreateViewBaseProto*>(&::zetasql::_AnyResolvedCreateViewBaseProto_default_instance_);
}
inline ::zetasql::AnyResolvedCreateViewBaseProto* AnyResolvedCreateStatementProto::mutable_resolved_create_view_base_node() {
  if (!has_resolved_create_view_base_node()) {
    clear_node();
    set_has_resolved_create_view_base_node();
    node_.resolved_create_view_base_node_ = CreateMaybeMessage< ::zetasql::AnyResolvedCreateViewBaseProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedCreateStatementProto.resolved_create_view_base_node)
  return node_.resolved_create_view_base_node_;
}

// optional .zetasql.ResolvedCreateProcedureStmtProto resolved_create_procedure_stmt_node = 125;
inline bool AnyResolvedCreateStatementProto::has_resolved_create_procedure_stmt_node() const {
  return node_case() == kResolvedCreateProcedureStmtNode;
}
inline void AnyResolvedCreateStatementProto::set_has_resolved_create_procedure_stmt_node() {
  _oneof_case_[0] = kResolvedCreateProcedureStmtNode;
}
inline void AnyResolvedCreateStatementProto::clear_resolved_create_procedure_stmt_node() {
  if (has_resolved_create_procedure_stmt_node()) {
    delete node_.resolved_create_procedure_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedCreateProcedureStmtProto& AnyResolvedCreateStatementProto::_internal_resolved_create_procedure_stmt_node() const {
  return *node_.resolved_create_procedure_stmt_node_;
}
inline ::zetasql::ResolvedCreateProcedureStmtProto* AnyResolvedCreateStatementProto::release_resolved_create_procedure_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedCreateStatementProto.resolved_create_procedure_stmt_node)
  if (has_resolved_create_procedure_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedCreateProcedureStmtProto* temp = node_.resolved_create_procedure_stmt_node_;
    node_.resolved_create_procedure_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedCreateProcedureStmtProto& AnyResolvedCreateStatementProto::resolved_create_procedure_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedCreateStatementProto.resolved_create_procedure_stmt_node)
  return has_resolved_create_procedure_stmt_node()
      ? *node_.resolved_create_procedure_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedCreateProcedureStmtProto*>(&::zetasql::_ResolvedCreateProcedureStmtProto_default_instance_);
}
inline ::zetasql::ResolvedCreateProcedureStmtProto* AnyResolvedCreateStatementProto::mutable_resolved_create_procedure_stmt_node() {
  if (!has_resolved_create_procedure_stmt_node()) {
    clear_node();
    set_has_resolved_create_procedure_stmt_node();
    node_.resolved_create_procedure_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedCreateProcedureStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedCreateStatementProto.resolved_create_procedure_stmt_node)
  return node_.resolved_create_procedure_stmt_node_;
}

// optional .zetasql.ResolvedCreateEntityStmtProto resolved_create_entity_stmt_node = 154;
inline bool AnyResolvedCreateStatementProto::has_resolved_create_entity_stmt_node() const {
  return node_case() == kResolvedCreateEntityStmtNode;
}
inline void AnyResolvedCreateStatementProto::set_has_resolved_create_entity_stmt_node() {
  _oneof_case_[0] = kResolvedCreateEntityStmtNode;
}
inline void AnyResolvedCreateStatementProto::clear_resolved_create_entity_stmt_node() {
  if (has_resolved_create_entity_stmt_node()) {
    delete node_.resolved_create_entity_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedCreateEntityStmtProto& AnyResolvedCreateStatementProto::_internal_resolved_create_entity_stmt_node() const {
  return *node_.resolved_create_entity_stmt_node_;
}
inline ::zetasql::ResolvedCreateEntityStmtProto* AnyResolvedCreateStatementProto::release_resolved_create_entity_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedCreateStatementProto.resolved_create_entity_stmt_node)
  if (has_resolved_create_entity_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedCreateEntityStmtProto* temp = node_.resolved_create_entity_stmt_node_;
    node_.resolved_create_entity_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedCreateEntityStmtProto& AnyResolvedCreateStatementProto::resolved_create_entity_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedCreateStatementProto.resolved_create_entity_stmt_node)
  return has_resolved_create_entity_stmt_node()
      ? *node_.resolved_create_entity_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedCreateEntityStmtProto*>(&::zetasql::_ResolvedCreateEntityStmtProto_default_instance_);
}
inline ::zetasql::ResolvedCreateEntityStmtProto* AnyResolvedCreateStatementProto::mutable_resolved_create_entity_stmt_node() {
  if (!has_resolved_create_entity_stmt_node()) {
    clear_node();
    set_has_resolved_create_entity_stmt_node();
    node_.resolved_create_entity_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedCreateEntityStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedCreateStatementProto.resolved_create_entity_stmt_node)
  return node_.resolved_create_entity_stmt_node_;
}

// optional .zetasql.ResolvedCreateSchemaStmtProto resolved_create_schema_stmt_node = 157;
inline bool AnyResolvedCreateStatementProto::has_resolved_create_schema_stmt_node() const {
  return node_case() == kResolvedCreateSchemaStmtNode;
}
inline void AnyResolvedCreateStatementProto::set_has_resolved_create_schema_stmt_node() {
  _oneof_case_[0] = kResolvedCreateSchemaStmtNode;
}
inline void AnyResolvedCreateStatementProto::clear_resolved_create_schema_stmt_node() {
  if (has_resolved_create_schema_stmt_node()) {
    delete node_.resolved_create_schema_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedCreateSchemaStmtProto& AnyResolvedCreateStatementProto::_internal_resolved_create_schema_stmt_node() const {
  return *node_.resolved_create_schema_stmt_node_;
}
inline ::zetasql::ResolvedCreateSchemaStmtProto* AnyResolvedCreateStatementProto::release_resolved_create_schema_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedCreateStatementProto.resolved_create_schema_stmt_node)
  if (has_resolved_create_schema_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedCreateSchemaStmtProto* temp = node_.resolved_create_schema_stmt_node_;
    node_.resolved_create_schema_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedCreateSchemaStmtProto& AnyResolvedCreateStatementProto::resolved_create_schema_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedCreateStatementProto.resolved_create_schema_stmt_node)
  return has_resolved_create_schema_stmt_node()
      ? *node_.resolved_create_schema_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedCreateSchemaStmtProto*>(&::zetasql::_ResolvedCreateSchemaStmtProto_default_instance_);
}
inline ::zetasql::ResolvedCreateSchemaStmtProto* AnyResolvedCreateStatementProto::mutable_resolved_create_schema_stmt_node() {
  if (!has_resolved_create_schema_stmt_node()) {
    clear_node();
    set_has_resolved_create_schema_stmt_node();
    node_.resolved_create_schema_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedCreateSchemaStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedCreateStatementProto.resolved_create_schema_stmt_node)
  return node_.resolved_create_schema_stmt_node_;
}

// optional .zetasql.ResolvedCreateSnapshotTableStmtProto resolved_create_snapshot_table_stmt_node = 182;
inline bool AnyResolvedCreateStatementProto::has_resolved_create_snapshot_table_stmt_node() const {
  return node_case() == kResolvedCreateSnapshotTableStmtNode;
}
inline void AnyResolvedCreateStatementProto::set_has_resolved_create_snapshot_table_stmt_node() {
  _oneof_case_[0] = kResolvedCreateSnapshotTableStmtNode;
}
inline void AnyResolvedCreateStatementProto::clear_resolved_create_snapshot_table_stmt_node() {
  if (has_resolved_create_snapshot_table_stmt_node()) {
    delete node_.resolved_create_snapshot_table_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedCreateSnapshotTableStmtProto& AnyResolvedCreateStatementProto::_internal_resolved_create_snapshot_table_stmt_node() const {
  return *node_.resolved_create_snapshot_table_stmt_node_;
}
inline ::zetasql::ResolvedCreateSnapshotTableStmtProto* AnyResolvedCreateStatementProto::release_resolved_create_snapshot_table_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedCreateStatementProto.resolved_create_snapshot_table_stmt_node)
  if (has_resolved_create_snapshot_table_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedCreateSnapshotTableStmtProto* temp = node_.resolved_create_snapshot_table_stmt_node_;
    node_.resolved_create_snapshot_table_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedCreateSnapshotTableStmtProto& AnyResolvedCreateStatementProto::resolved_create_snapshot_table_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedCreateStatementProto.resolved_create_snapshot_table_stmt_node)
  return has_resolved_create_snapshot_table_stmt_node()
      ? *node_.resolved_create_snapshot_table_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedCreateSnapshotTableStmtProto*>(&::zetasql::_ResolvedCreateSnapshotTableStmtProto_default_instance_);
}
inline ::zetasql::ResolvedCreateSnapshotTableStmtProto* AnyResolvedCreateStatementProto::mutable_resolved_create_snapshot_table_stmt_node() {
  if (!has_resolved_create_snapshot_table_stmt_node()) {
    clear_node();
    set_has_resolved_create_snapshot_table_stmt_node();
    node_.resolved_create_snapshot_table_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedCreateSnapshotTableStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedCreateStatementProto.resolved_create_snapshot_table_stmt_node)
  return node_.resolved_create_snapshot_table_stmt_node_;
}

// optional .zetasql.ResolvedCreatePrivilegeRestrictionStmtProto resolved_create_privilege_restriction_stmt_node = 191;
inline bool AnyResolvedCreateStatementProto::has_resolved_create_privilege_restriction_stmt_node() const {
  return node_case() == kResolvedCreatePrivilegeRestrictionStmtNode;
}
inline void AnyResolvedCreateStatementProto::set_has_resolved_create_privilege_restriction_stmt_node() {
  _oneof_case_[0] = kResolvedCreatePrivilegeRestrictionStmtNode;
}
inline void AnyResolvedCreateStatementProto::clear_resolved_create_privilege_restriction_stmt_node() {
  if (has_resolved_create_privilege_restriction_stmt_node()) {
    delete node_.resolved_create_privilege_restriction_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto& AnyResolvedCreateStatementProto::_internal_resolved_create_privilege_restriction_stmt_node() const {
  return *node_.resolved_create_privilege_restriction_stmt_node_;
}
inline ::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto* AnyResolvedCreateStatementProto::release_resolved_create_privilege_restriction_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedCreateStatementProto.resolved_create_privilege_restriction_stmt_node)
  if (has_resolved_create_privilege_restriction_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto* temp = node_.resolved_create_privilege_restriction_stmt_node_;
    node_.resolved_create_privilege_restriction_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto& AnyResolvedCreateStatementProto::resolved_create_privilege_restriction_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedCreateStatementProto.resolved_create_privilege_restriction_stmt_node)
  return has_resolved_create_privilege_restriction_stmt_node()
      ? *node_.resolved_create_privilege_restriction_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto*>(&::zetasql::_ResolvedCreatePrivilegeRestrictionStmtProto_default_instance_);
}
inline ::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto* AnyResolvedCreateStatementProto::mutable_resolved_create_privilege_restriction_stmt_node() {
  if (!has_resolved_create_privilege_restriction_stmt_node()) {
    clear_node();
    set_has_resolved_create_privilege_restriction_stmt_node();
    node_.resolved_create_privilege_restriction_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedCreateStatementProto.resolved_create_privilege_restriction_stmt_node)
  return node_.resolved_create_privilege_restriction_stmt_node_;
}

inline bool AnyResolvedCreateStatementProto::has_node() const {
  return node_case() != NODE_NOT_SET;
}
inline void AnyResolvedCreateStatementProto::clear_has_node() {
  _oneof_case_[0] = NODE_NOT_SET;
}
inline AnyResolvedCreateStatementProto::NodeCase AnyResolvedCreateStatementProto::node_case() const {
  return AnyResolvedCreateStatementProto::NodeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResolvedCreateStatementProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedCreateStatementProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedCreateStatementProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedCreateStatementProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedCreateStatementProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedCreateStatementProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedCreateStatementProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateStatementProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedCreateStatementProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateStatementProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedCreateStatementProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateStatementProto.parent)
  return parent_;
}
inline void ResolvedCreateStatementProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateStatementProto.parent)
}

// repeated string name_path = 2;
inline int ResolvedCreateStatementProto::name_path_size() const {
  return name_path_.size();
}
inline void ResolvedCreateStatementProto::clear_name_path() {
  name_path_.Clear();
}
inline const ::std::string& ResolvedCreateStatementProto::name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateStatementProto.name_path)
  return name_path_.Get(index);
}
inline ::std::string* ResolvedCreateStatementProto::mutable_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateStatementProto.name_path)
  return name_path_.Mutable(index);
}
inline void ResolvedCreateStatementProto::set_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateStatementProto.name_path)
  name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedCreateStatementProto::set_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateStatementProto.name_path)
  name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedCreateStatementProto::set_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedCreateStatementProto.name_path)
}
inline void ResolvedCreateStatementProto::set_name_path(int index, const char* value, size_t size) {
  name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedCreateStatementProto.name_path)
}
inline ::std::string* ResolvedCreateStatementProto::add_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedCreateStatementProto.name_path)
  return name_path_.Add();
}
inline void ResolvedCreateStatementProto::add_name_path(const ::std::string& value) {
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateStatementProto.name_path)
}
#if LANG_CXX11
inline void ResolvedCreateStatementProto::add_name_path(::std::string&& value) {
  name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateStatementProto.name_path)
}
#endif
inline void ResolvedCreateStatementProto::add_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedCreateStatementProto.name_path)
}
inline void ResolvedCreateStatementProto::add_name_path(const char* value, size_t size) {
  name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedCreateStatementProto.name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedCreateStatementProto::name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateStatementProto.name_path)
  return name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedCreateStatementProto::mutable_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateStatementProto.name_path)
  return &name_path_;
}

// optional .zetasql.ResolvedCreateStatementEnums.CreateScope create_scope = 5;
inline bool ResolvedCreateStatementProto::has_create_scope() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedCreateStatementProto::set_has_create_scope() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedCreateStatementProto::clear_has_create_scope() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedCreateStatementProto::clear_create_scope() {
  create_scope_ = 0;
  clear_has_create_scope();
}
inline ::zetasql::ResolvedCreateStatementEnums_CreateScope ResolvedCreateStatementProto::create_scope() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateStatementProto.create_scope)
  return static_cast< ::zetasql::ResolvedCreateStatementEnums_CreateScope >(create_scope_);
}
inline void ResolvedCreateStatementProto::set_create_scope(::zetasql::ResolvedCreateStatementEnums_CreateScope value) {
  assert(::zetasql::ResolvedCreateStatementEnums_CreateScope_IsValid(value));
  set_has_create_scope();
  create_scope_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateStatementProto.create_scope)
}

// optional .zetasql.ResolvedCreateStatementEnums.CreateMode create_mode = 4;
inline bool ResolvedCreateStatementProto::has_create_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedCreateStatementProto::set_has_create_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedCreateStatementProto::clear_has_create_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedCreateStatementProto::clear_create_mode() {
  create_mode_ = 0;
  clear_has_create_mode();
}
inline ::zetasql::ResolvedCreateStatementEnums_CreateMode ResolvedCreateStatementProto::create_mode() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateStatementProto.create_mode)
  return static_cast< ::zetasql::ResolvedCreateStatementEnums_CreateMode >(create_mode_);
}
inline void ResolvedCreateStatementProto::set_create_mode(::zetasql::ResolvedCreateStatementEnums_CreateMode value) {
  assert(::zetasql::ResolvedCreateStatementEnums_CreateMode_IsValid(value));
  set_has_create_mode();
  create_mode_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateStatementProto.create_mode)
}

// -------------------------------------------------------------------

// ResolvedIndexItemProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedIndexItemProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedIndexItemProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedIndexItemProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedIndexItemProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedIndexItemProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedIndexItemProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedIndexItemProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedIndexItemProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedIndexItemProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedIndexItemProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedIndexItemProto.parent)
  return parent_;
}
inline void ResolvedIndexItemProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedIndexItemProto.parent)
}

// optional .zetasql.ResolvedColumnRefProto column_ref = 2;
inline bool ResolvedIndexItemProto::has_column_ref() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedIndexItemProto::set_has_column_ref() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedIndexItemProto::clear_has_column_ref() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedIndexItemProto::clear_column_ref() {
  if (column_ref_ != NULL) column_ref_->Clear();
  clear_has_column_ref();
}
inline const ::zetasql::ResolvedColumnRefProto& ResolvedIndexItemProto::_internal_column_ref() const {
  return *column_ref_;
}
inline const ::zetasql::ResolvedColumnRefProto& ResolvedIndexItemProto::column_ref() const {
  const ::zetasql::ResolvedColumnRefProto* p = column_ref_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedIndexItemProto.column_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedColumnRefProto*>(
      &::zetasql::_ResolvedColumnRefProto_default_instance_);
}
inline ::zetasql::ResolvedColumnRefProto* ResolvedIndexItemProto::release_column_ref() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedIndexItemProto.column_ref)
  clear_has_column_ref();
  ::zetasql::ResolvedColumnRefProto* temp = column_ref_;
  column_ref_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedColumnRefProto* ResolvedIndexItemProto::mutable_column_ref() {
  set_has_column_ref();
  if (column_ref_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedColumnRefProto>(GetArenaNoVirtual());
    column_ref_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedIndexItemProto.column_ref)
  return column_ref_;
}
inline void ResolvedIndexItemProto::set_allocated_column_ref(::zetasql::ResolvedColumnRefProto* column_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete column_ref_;
  }
  if (column_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      column_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, column_ref, submessage_arena);
    }
    set_has_column_ref();
  } else {
    clear_has_column_ref();
  }
  column_ref_ = column_ref;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedIndexItemProto.column_ref)
}

// optional bool descending = 3;
inline bool ResolvedIndexItemProto::has_descending() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedIndexItemProto::set_has_descending() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedIndexItemProto::clear_has_descending() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedIndexItemProto::clear_descending() {
  descending_ = false;
  clear_has_descending();
}
inline bool ResolvedIndexItemProto::descending() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedIndexItemProto.descending)
  return descending_;
}
inline void ResolvedIndexItemProto::set_descending(bool value) {
  set_has_descending();
  descending_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedIndexItemProto.descending)
}

// -------------------------------------------------------------------

// ResolvedUnnestItemProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedUnnestItemProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedUnnestItemProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedUnnestItemProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedUnnestItemProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedUnnestItemProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedUnnestItemProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUnnestItemProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedUnnestItemProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedUnnestItemProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedUnnestItemProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUnnestItemProto.parent)
  return parent_;
}
inline void ResolvedUnnestItemProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedUnnestItemProto.parent)
}

// optional .zetasql.AnyResolvedExprProto array_expr = 2;
inline bool ResolvedUnnestItemProto::has_array_expr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedUnnestItemProto::set_has_array_expr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedUnnestItemProto::clear_has_array_expr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedUnnestItemProto::clear_array_expr() {
  if (array_expr_ != NULL) array_expr_->Clear();
  clear_has_array_expr();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedUnnestItemProto::_internal_array_expr() const {
  return *array_expr_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedUnnestItemProto::array_expr() const {
  const ::zetasql::AnyResolvedExprProto* p = array_expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUnnestItemProto.array_expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedUnnestItemProto::release_array_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedUnnestItemProto.array_expr)
  clear_has_array_expr();
  ::zetasql::AnyResolvedExprProto* temp = array_expr_;
  array_expr_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedUnnestItemProto::mutable_array_expr() {
  set_has_array_expr();
  if (array_expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    array_expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUnnestItemProto.array_expr)
  return array_expr_;
}
inline void ResolvedUnnestItemProto::set_allocated_array_expr(::zetasql::AnyResolvedExprProto* array_expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete array_expr_;
  }
  if (array_expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      array_expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, array_expr, submessage_arena);
    }
    set_has_array_expr();
  } else {
    clear_has_array_expr();
  }
  array_expr_ = array_expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedUnnestItemProto.array_expr)
}

// optional .zetasql.ResolvedColumnProto element_column = 3;
inline bool ResolvedUnnestItemProto::has_element_column() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedUnnestItemProto::set_has_element_column() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedUnnestItemProto::clear_has_element_column() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedUnnestItemProto::_internal_element_column() const {
  return *element_column_;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedUnnestItemProto::element_column() const {
  const ::zetasql::ResolvedColumnProto* p = element_column_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUnnestItemProto.element_column)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedColumnProto*>(
      &::zetasql::_ResolvedColumnProto_default_instance_);
}
inline ::zetasql::ResolvedColumnProto* ResolvedUnnestItemProto::release_element_column() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedUnnestItemProto.element_column)
  clear_has_element_column();
  ::zetasql::ResolvedColumnProto* temp = element_column_;
  element_column_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedColumnProto* ResolvedUnnestItemProto::mutable_element_column() {
  set_has_element_column();
  if (element_column_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedColumnProto>(GetArenaNoVirtual());
    element_column_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUnnestItemProto.element_column)
  return element_column_;
}
inline void ResolvedUnnestItemProto::set_allocated_element_column(::zetasql::ResolvedColumnProto* element_column) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(element_column_);
  }
  if (element_column) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      element_column = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, element_column, submessage_arena);
    }
    set_has_element_column();
  } else {
    clear_has_element_column();
  }
  element_column_ = element_column;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedUnnestItemProto.element_column)
}

// optional .zetasql.ResolvedColumnHolderProto array_offset_column = 4;
inline bool ResolvedUnnestItemProto::has_array_offset_column() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedUnnestItemProto::set_has_array_offset_column() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedUnnestItemProto::clear_has_array_offset_column() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedUnnestItemProto::clear_array_offset_column() {
  if (array_offset_column_ != NULL) array_offset_column_->Clear();
  clear_has_array_offset_column();
}
inline const ::zetasql::ResolvedColumnHolderProto& ResolvedUnnestItemProto::_internal_array_offset_column() const {
  return *array_offset_column_;
}
inline const ::zetasql::ResolvedColumnHolderProto& ResolvedUnnestItemProto::array_offset_column() const {
  const ::zetasql::ResolvedColumnHolderProto* p = array_offset_column_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUnnestItemProto.array_offset_column)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedColumnHolderProto*>(
      &::zetasql::_ResolvedColumnHolderProto_default_instance_);
}
inline ::zetasql::ResolvedColumnHolderProto* ResolvedUnnestItemProto::release_array_offset_column() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedUnnestItemProto.array_offset_column)
  clear_has_array_offset_column();
  ::zetasql::ResolvedColumnHolderProto* temp = array_offset_column_;
  array_offset_column_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedColumnHolderProto* ResolvedUnnestItemProto::mutable_array_offset_column() {
  set_has_array_offset_column();
  if (array_offset_column_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedColumnHolderProto>(GetArenaNoVirtual());
    array_offset_column_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUnnestItemProto.array_offset_column)
  return array_offset_column_;
}
inline void ResolvedUnnestItemProto::set_allocated_array_offset_column(::zetasql::ResolvedColumnHolderProto* array_offset_column) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete array_offset_column_;
  }
  if (array_offset_column) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      array_offset_column = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, array_offset_column, submessage_arena);
    }
    set_has_array_offset_column();
  } else {
    clear_has_array_offset_column();
  }
  array_offset_column_ = array_offset_column;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedUnnestItemProto.array_offset_column)
}

// -------------------------------------------------------------------

// ResolvedCreateIndexStmtProto

// optional .zetasql.ResolvedCreateStatementProto parent = 1;
inline bool ResolvedCreateIndexStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedCreateIndexStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedCreateIndexStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedCreateIndexStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedCreateStatementProto& ResolvedCreateIndexStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedCreateStatementProto& ResolvedCreateIndexStmtProto::parent() const {
  const ::zetasql::ResolvedCreateStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateIndexStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedCreateStatementProto*>(
      &::zetasql::_ResolvedCreateStatementProto_default_instance_);
}
inline ::zetasql::ResolvedCreateStatementProto* ResolvedCreateIndexStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateIndexStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedCreateStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedCreateStatementProto* ResolvedCreateIndexStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedCreateStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateIndexStmtProto.parent)
  return parent_;
}
inline void ResolvedCreateIndexStmtProto::set_allocated_parent(::zetasql::ResolvedCreateStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateIndexStmtProto.parent)
}

// repeated string table_name_path = 2;
inline int ResolvedCreateIndexStmtProto::table_name_path_size() const {
  return table_name_path_.size();
}
inline void ResolvedCreateIndexStmtProto::clear_table_name_path() {
  table_name_path_.Clear();
}
inline const ::std::string& ResolvedCreateIndexStmtProto::table_name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateIndexStmtProto.table_name_path)
  return table_name_path_.Get(index);
}
inline ::std::string* ResolvedCreateIndexStmtProto::mutable_table_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateIndexStmtProto.table_name_path)
  return table_name_path_.Mutable(index);
}
inline void ResolvedCreateIndexStmtProto::set_table_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateIndexStmtProto.table_name_path)
  table_name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedCreateIndexStmtProto::set_table_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateIndexStmtProto.table_name_path)
  table_name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedCreateIndexStmtProto::set_table_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  table_name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedCreateIndexStmtProto.table_name_path)
}
inline void ResolvedCreateIndexStmtProto::set_table_name_path(int index, const char* value, size_t size) {
  table_name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedCreateIndexStmtProto.table_name_path)
}
inline ::std::string* ResolvedCreateIndexStmtProto::add_table_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedCreateIndexStmtProto.table_name_path)
  return table_name_path_.Add();
}
inline void ResolvedCreateIndexStmtProto::add_table_name_path(const ::std::string& value) {
  table_name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateIndexStmtProto.table_name_path)
}
#if LANG_CXX11
inline void ResolvedCreateIndexStmtProto::add_table_name_path(::std::string&& value) {
  table_name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateIndexStmtProto.table_name_path)
}
#endif
inline void ResolvedCreateIndexStmtProto::add_table_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  table_name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedCreateIndexStmtProto.table_name_path)
}
inline void ResolvedCreateIndexStmtProto::add_table_name_path(const char* value, size_t size) {
  table_name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedCreateIndexStmtProto.table_name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedCreateIndexStmtProto::table_name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateIndexStmtProto.table_name_path)
  return table_name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedCreateIndexStmtProto::mutable_table_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateIndexStmtProto.table_name_path)
  return &table_name_path_;
}

// optional .zetasql.ResolvedTableScanProto table_scan = 3;
inline bool ResolvedCreateIndexStmtProto::has_table_scan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedCreateIndexStmtProto::set_has_table_scan() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedCreateIndexStmtProto::clear_has_table_scan() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedCreateIndexStmtProto::clear_table_scan() {
  if (table_scan_ != NULL) table_scan_->Clear();
  clear_has_table_scan();
}
inline const ::zetasql::ResolvedTableScanProto& ResolvedCreateIndexStmtProto::_internal_table_scan() const {
  return *table_scan_;
}
inline const ::zetasql::ResolvedTableScanProto& ResolvedCreateIndexStmtProto::table_scan() const {
  const ::zetasql::ResolvedTableScanProto* p = table_scan_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateIndexStmtProto.table_scan)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedTableScanProto*>(
      &::zetasql::_ResolvedTableScanProto_default_instance_);
}
inline ::zetasql::ResolvedTableScanProto* ResolvedCreateIndexStmtProto::release_table_scan() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateIndexStmtProto.table_scan)
  clear_has_table_scan();
  ::zetasql::ResolvedTableScanProto* temp = table_scan_;
  table_scan_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedTableScanProto* ResolvedCreateIndexStmtProto::mutable_table_scan() {
  set_has_table_scan();
  if (table_scan_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedTableScanProto>(GetArenaNoVirtual());
    table_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateIndexStmtProto.table_scan)
  return table_scan_;
}
inline void ResolvedCreateIndexStmtProto::set_allocated_table_scan(::zetasql::ResolvedTableScanProto* table_scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete table_scan_;
  }
  if (table_scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table_scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table_scan, submessage_arena);
    }
    set_has_table_scan();
  } else {
    clear_has_table_scan();
  }
  table_scan_ = table_scan;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateIndexStmtProto.table_scan)
}

// optional bool is_unique = 4;
inline bool ResolvedCreateIndexStmtProto::has_is_unique() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedCreateIndexStmtProto::set_has_is_unique() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedCreateIndexStmtProto::clear_has_is_unique() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedCreateIndexStmtProto::clear_is_unique() {
  is_unique_ = false;
  clear_has_is_unique();
}
inline bool ResolvedCreateIndexStmtProto::is_unique() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateIndexStmtProto.is_unique)
  return is_unique_;
}
inline void ResolvedCreateIndexStmtProto::set_is_unique(bool value) {
  set_has_is_unique();
  is_unique_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateIndexStmtProto.is_unique)
}

// optional bool is_search = 10;
inline bool ResolvedCreateIndexStmtProto::has_is_search() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedCreateIndexStmtProto::set_has_is_search() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedCreateIndexStmtProto::clear_has_is_search() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedCreateIndexStmtProto::clear_is_search() {
  is_search_ = false;
  clear_has_is_search();
}
inline bool ResolvedCreateIndexStmtProto::is_search() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateIndexStmtProto.is_search)
  return is_search_;
}
inline void ResolvedCreateIndexStmtProto::set_is_search(bool value) {
  set_has_is_search();
  is_search_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateIndexStmtProto.is_search)
}

// optional bool index_all_columns = 11;
inline bool ResolvedCreateIndexStmtProto::has_index_all_columns() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResolvedCreateIndexStmtProto::set_has_index_all_columns() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResolvedCreateIndexStmtProto::clear_has_index_all_columns() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResolvedCreateIndexStmtProto::clear_index_all_columns() {
  index_all_columns_ = false;
  clear_has_index_all_columns();
}
inline bool ResolvedCreateIndexStmtProto::index_all_columns() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateIndexStmtProto.index_all_columns)
  return index_all_columns_;
}
inline void ResolvedCreateIndexStmtProto::set_index_all_columns(bool value) {
  set_has_index_all_columns();
  index_all_columns_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateIndexStmtProto.index_all_columns)
}

// repeated .zetasql.ResolvedIndexItemProto index_item_list = 5;
inline int ResolvedCreateIndexStmtProto::index_item_list_size() const {
  return index_item_list_.size();
}
inline void ResolvedCreateIndexStmtProto::clear_index_item_list() {
  index_item_list_.Clear();
}
inline ::zetasql::ResolvedIndexItemProto* ResolvedCreateIndexStmtProto::mutable_index_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateIndexStmtProto.index_item_list)
  return index_item_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedIndexItemProto >*
ResolvedCreateIndexStmtProto::mutable_index_item_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateIndexStmtProto.index_item_list)
  return &index_item_list_;
}
inline const ::zetasql::ResolvedIndexItemProto& ResolvedCreateIndexStmtProto::index_item_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateIndexStmtProto.index_item_list)
  return index_item_list_.Get(index);
}
inline ::zetasql::ResolvedIndexItemProto* ResolvedCreateIndexStmtProto::add_index_item_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateIndexStmtProto.index_item_list)
  return index_item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedIndexItemProto >&
ResolvedCreateIndexStmtProto::index_item_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateIndexStmtProto.index_item_list)
  return index_item_list_;
}

// repeated .zetasql.AnyResolvedExprProto storing_expression_list = 9;
inline int ResolvedCreateIndexStmtProto::storing_expression_list_size() const {
  return storing_expression_list_.size();
}
inline void ResolvedCreateIndexStmtProto::clear_storing_expression_list() {
  storing_expression_list_.Clear();
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCreateIndexStmtProto::mutable_storing_expression_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateIndexStmtProto.storing_expression_list)
  return storing_expression_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
ResolvedCreateIndexStmtProto::mutable_storing_expression_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateIndexStmtProto.storing_expression_list)
  return &storing_expression_list_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedCreateIndexStmtProto::storing_expression_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateIndexStmtProto.storing_expression_list)
  return storing_expression_list_.Get(index);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCreateIndexStmtProto::add_storing_expression_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateIndexStmtProto.storing_expression_list)
  return storing_expression_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
ResolvedCreateIndexStmtProto::storing_expression_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateIndexStmtProto.storing_expression_list)
  return storing_expression_list_;
}

// repeated .zetasql.ResolvedOptionProto option_list = 6;
inline int ResolvedCreateIndexStmtProto::option_list_size() const {
  return option_list_.size();
}
inline void ResolvedCreateIndexStmtProto::clear_option_list() {
  option_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedCreateIndexStmtProto::mutable_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateIndexStmtProto.option_list)
  return option_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedCreateIndexStmtProto::mutable_option_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateIndexStmtProto.option_list)
  return &option_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedCreateIndexStmtProto::option_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateIndexStmtProto.option_list)
  return option_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedCreateIndexStmtProto::add_option_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateIndexStmtProto.option_list)
  return option_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedCreateIndexStmtProto::option_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateIndexStmtProto.option_list)
  return option_list_;
}

// repeated .zetasql.ResolvedComputedColumnProto computed_columns_list = 7;
inline int ResolvedCreateIndexStmtProto::computed_columns_list_size() const {
  return computed_columns_list_.size();
}
inline void ResolvedCreateIndexStmtProto::clear_computed_columns_list() {
  computed_columns_list_.Clear();
}
inline ::zetasql::ResolvedComputedColumnProto* ResolvedCreateIndexStmtProto::mutable_computed_columns_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateIndexStmtProto.computed_columns_list)
  return computed_columns_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >*
ResolvedCreateIndexStmtProto::mutable_computed_columns_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateIndexStmtProto.computed_columns_list)
  return &computed_columns_list_;
}
inline const ::zetasql::ResolvedComputedColumnProto& ResolvedCreateIndexStmtProto::computed_columns_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateIndexStmtProto.computed_columns_list)
  return computed_columns_list_.Get(index);
}
inline ::zetasql::ResolvedComputedColumnProto* ResolvedCreateIndexStmtProto::add_computed_columns_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateIndexStmtProto.computed_columns_list)
  return computed_columns_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >&
ResolvedCreateIndexStmtProto::computed_columns_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateIndexStmtProto.computed_columns_list)
  return computed_columns_list_;
}

// repeated .zetasql.ResolvedUnnestItemProto unnest_expressions_list = 8;
inline int ResolvedCreateIndexStmtProto::unnest_expressions_list_size() const {
  return unnest_expressions_list_.size();
}
inline void ResolvedCreateIndexStmtProto::clear_unnest_expressions_list() {
  unnest_expressions_list_.Clear();
}
inline ::zetasql::ResolvedUnnestItemProto* ResolvedCreateIndexStmtProto::mutable_unnest_expressions_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateIndexStmtProto.unnest_expressions_list)
  return unnest_expressions_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUnnestItemProto >*
ResolvedCreateIndexStmtProto::mutable_unnest_expressions_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateIndexStmtProto.unnest_expressions_list)
  return &unnest_expressions_list_;
}
inline const ::zetasql::ResolvedUnnestItemProto& ResolvedCreateIndexStmtProto::unnest_expressions_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateIndexStmtProto.unnest_expressions_list)
  return unnest_expressions_list_.Get(index);
}
inline ::zetasql::ResolvedUnnestItemProto* ResolvedCreateIndexStmtProto::add_unnest_expressions_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateIndexStmtProto.unnest_expressions_list)
  return unnest_expressions_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUnnestItemProto >&
ResolvedCreateIndexStmtProto::unnest_expressions_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateIndexStmtProto.unnest_expressions_list)
  return unnest_expressions_list_;
}

// -------------------------------------------------------------------

// ResolvedCreateSchemaStmtProto

// optional .zetasql.ResolvedCreateStatementProto parent = 1;
inline bool ResolvedCreateSchemaStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedCreateSchemaStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedCreateSchemaStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedCreateSchemaStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedCreateStatementProto& ResolvedCreateSchemaStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedCreateStatementProto& ResolvedCreateSchemaStmtProto::parent() const {
  const ::zetasql::ResolvedCreateStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateSchemaStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedCreateStatementProto*>(
      &::zetasql::_ResolvedCreateStatementProto_default_instance_);
}
inline ::zetasql::ResolvedCreateStatementProto* ResolvedCreateSchemaStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateSchemaStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedCreateStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedCreateStatementProto* ResolvedCreateSchemaStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedCreateStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateSchemaStmtProto.parent)
  return parent_;
}
inline void ResolvedCreateSchemaStmtProto::set_allocated_parent(::zetasql::ResolvedCreateStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateSchemaStmtProto.parent)
}

// optional .zetasql.AnyResolvedExprProto collation_name = 3;
inline bool ResolvedCreateSchemaStmtProto::has_collation_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedCreateSchemaStmtProto::set_has_collation_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedCreateSchemaStmtProto::clear_has_collation_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedCreateSchemaStmtProto::clear_collation_name() {
  if (collation_name_ != NULL) collation_name_->Clear();
  clear_has_collation_name();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedCreateSchemaStmtProto::_internal_collation_name() const {
  return *collation_name_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedCreateSchemaStmtProto::collation_name() const {
  const ::zetasql::AnyResolvedExprProto* p = collation_name_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateSchemaStmtProto.collation_name)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCreateSchemaStmtProto::release_collation_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateSchemaStmtProto.collation_name)
  clear_has_collation_name();
  ::zetasql::AnyResolvedExprProto* temp = collation_name_;
  collation_name_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCreateSchemaStmtProto::mutable_collation_name() {
  set_has_collation_name();
  if (collation_name_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    collation_name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateSchemaStmtProto.collation_name)
  return collation_name_;
}
inline void ResolvedCreateSchemaStmtProto::set_allocated_collation_name(::zetasql::AnyResolvedExprProto* collation_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete collation_name_;
  }
  if (collation_name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      collation_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, collation_name, submessage_arena);
    }
    set_has_collation_name();
  } else {
    clear_has_collation_name();
  }
  collation_name_ = collation_name;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateSchemaStmtProto.collation_name)
}

// repeated .zetasql.ResolvedOptionProto option_list = 2;
inline int ResolvedCreateSchemaStmtProto::option_list_size() const {
  return option_list_.size();
}
inline void ResolvedCreateSchemaStmtProto::clear_option_list() {
  option_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedCreateSchemaStmtProto::mutable_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateSchemaStmtProto.option_list)
  return option_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedCreateSchemaStmtProto::mutable_option_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateSchemaStmtProto.option_list)
  return &option_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedCreateSchemaStmtProto::option_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateSchemaStmtProto.option_list)
  return option_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedCreateSchemaStmtProto::add_option_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateSchemaStmtProto.option_list)
  return option_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedCreateSchemaStmtProto::option_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateSchemaStmtProto.option_list)
  return option_list_;
}

// -------------------------------------------------------------------

// AnyResolvedCreateTableStmtBaseProto

// optional .zetasql.ResolvedCreateTableAsSelectStmtProto resolved_create_table_as_select_stmt_node = 40;
inline bool AnyResolvedCreateTableStmtBaseProto::has_resolved_create_table_as_select_stmt_node() const {
  return node_case() == kResolvedCreateTableAsSelectStmtNode;
}
inline void AnyResolvedCreateTableStmtBaseProto::set_has_resolved_create_table_as_select_stmt_node() {
  _oneof_case_[0] = kResolvedCreateTableAsSelectStmtNode;
}
inline void AnyResolvedCreateTableStmtBaseProto::clear_resolved_create_table_as_select_stmt_node() {
  if (has_resolved_create_table_as_select_stmt_node()) {
    delete node_.resolved_create_table_as_select_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedCreateTableAsSelectStmtProto& AnyResolvedCreateTableStmtBaseProto::_internal_resolved_create_table_as_select_stmt_node() const {
  return *node_.resolved_create_table_as_select_stmt_node_;
}
inline ::zetasql::ResolvedCreateTableAsSelectStmtProto* AnyResolvedCreateTableStmtBaseProto::release_resolved_create_table_as_select_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedCreateTableStmtBaseProto.resolved_create_table_as_select_stmt_node)
  if (has_resolved_create_table_as_select_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedCreateTableAsSelectStmtProto* temp = node_.resolved_create_table_as_select_stmt_node_;
    node_.resolved_create_table_as_select_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedCreateTableAsSelectStmtProto& AnyResolvedCreateTableStmtBaseProto::resolved_create_table_as_select_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedCreateTableStmtBaseProto.resolved_create_table_as_select_stmt_node)
  return has_resolved_create_table_as_select_stmt_node()
      ? *node_.resolved_create_table_as_select_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedCreateTableAsSelectStmtProto*>(&::zetasql::_ResolvedCreateTableAsSelectStmtProto_default_instance_);
}
inline ::zetasql::ResolvedCreateTableAsSelectStmtProto* AnyResolvedCreateTableStmtBaseProto::mutable_resolved_create_table_as_select_stmt_node() {
  if (!has_resolved_create_table_as_select_stmt_node()) {
    clear_node();
    set_has_resolved_create_table_as_select_stmt_node();
    node_.resolved_create_table_as_select_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedCreateTableAsSelectStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedCreateTableStmtBaseProto.resolved_create_table_as_select_stmt_node)
  return node_.resolved_create_table_as_select_stmt_node_;
}

// optional .zetasql.ResolvedCreateExternalTableStmtProto resolved_create_external_table_stmt_node = 42;
inline bool AnyResolvedCreateTableStmtBaseProto::has_resolved_create_external_table_stmt_node() const {
  return node_case() == kResolvedCreateExternalTableStmtNode;
}
inline void AnyResolvedCreateTableStmtBaseProto::set_has_resolved_create_external_table_stmt_node() {
  _oneof_case_[0] = kResolvedCreateExternalTableStmtNode;
}
inline void AnyResolvedCreateTableStmtBaseProto::clear_resolved_create_external_table_stmt_node() {
  if (has_resolved_create_external_table_stmt_node()) {
    delete node_.resolved_create_external_table_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedCreateExternalTableStmtProto& AnyResolvedCreateTableStmtBaseProto::_internal_resolved_create_external_table_stmt_node() const {
  return *node_.resolved_create_external_table_stmt_node_;
}
inline ::zetasql::ResolvedCreateExternalTableStmtProto* AnyResolvedCreateTableStmtBaseProto::release_resolved_create_external_table_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedCreateTableStmtBaseProto.resolved_create_external_table_stmt_node)
  if (has_resolved_create_external_table_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedCreateExternalTableStmtProto* temp = node_.resolved_create_external_table_stmt_node_;
    node_.resolved_create_external_table_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedCreateExternalTableStmtProto& AnyResolvedCreateTableStmtBaseProto::resolved_create_external_table_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedCreateTableStmtBaseProto.resolved_create_external_table_stmt_node)
  return has_resolved_create_external_table_stmt_node()
      ? *node_.resolved_create_external_table_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedCreateExternalTableStmtProto*>(&::zetasql::_ResolvedCreateExternalTableStmtProto_default_instance_);
}
inline ::zetasql::ResolvedCreateExternalTableStmtProto* AnyResolvedCreateTableStmtBaseProto::mutable_resolved_create_external_table_stmt_node() {
  if (!has_resolved_create_external_table_stmt_node()) {
    clear_node();
    set_has_resolved_create_external_table_stmt_node();
    node_.resolved_create_external_table_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedCreateExternalTableStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedCreateTableStmtBaseProto.resolved_create_external_table_stmt_node)
  return node_.resolved_create_external_table_stmt_node_;
}

// optional .zetasql.ResolvedCreateTableStmtProto resolved_create_table_stmt_node = 90;
inline bool AnyResolvedCreateTableStmtBaseProto::has_resolved_create_table_stmt_node() const {
  return node_case() == kResolvedCreateTableStmtNode;
}
inline void AnyResolvedCreateTableStmtBaseProto::set_has_resolved_create_table_stmt_node() {
  _oneof_case_[0] = kResolvedCreateTableStmtNode;
}
inline void AnyResolvedCreateTableStmtBaseProto::clear_resolved_create_table_stmt_node() {
  if (has_resolved_create_table_stmt_node()) {
    delete node_.resolved_create_table_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedCreateTableStmtProto& AnyResolvedCreateTableStmtBaseProto::_internal_resolved_create_table_stmt_node() const {
  return *node_.resolved_create_table_stmt_node_;
}
inline ::zetasql::ResolvedCreateTableStmtProto* AnyResolvedCreateTableStmtBaseProto::release_resolved_create_table_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedCreateTableStmtBaseProto.resolved_create_table_stmt_node)
  if (has_resolved_create_table_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedCreateTableStmtProto* temp = node_.resolved_create_table_stmt_node_;
    node_.resolved_create_table_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedCreateTableStmtProto& AnyResolvedCreateTableStmtBaseProto::resolved_create_table_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedCreateTableStmtBaseProto.resolved_create_table_stmt_node)
  return has_resolved_create_table_stmt_node()
      ? *node_.resolved_create_table_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedCreateTableStmtProto*>(&::zetasql::_ResolvedCreateTableStmtProto_default_instance_);
}
inline ::zetasql::ResolvedCreateTableStmtProto* AnyResolvedCreateTableStmtBaseProto::mutable_resolved_create_table_stmt_node() {
  if (!has_resolved_create_table_stmt_node()) {
    clear_node();
    set_has_resolved_create_table_stmt_node();
    node_.resolved_create_table_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedCreateTableStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedCreateTableStmtBaseProto.resolved_create_table_stmt_node)
  return node_.resolved_create_table_stmt_node_;
}

inline bool AnyResolvedCreateTableStmtBaseProto::has_node() const {
  return node_case() != NODE_NOT_SET;
}
inline void AnyResolvedCreateTableStmtBaseProto::clear_has_node() {
  _oneof_case_[0] = NODE_NOT_SET;
}
inline AnyResolvedCreateTableStmtBaseProto::NodeCase AnyResolvedCreateTableStmtBaseProto::node_case() const {
  return AnyResolvedCreateTableStmtBaseProto::NodeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResolvedCreateTableStmtBaseProto

// optional .zetasql.ResolvedCreateStatementProto parent = 1;
inline bool ResolvedCreateTableStmtBaseProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedCreateTableStmtBaseProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedCreateTableStmtBaseProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedCreateTableStmtBaseProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedCreateStatementProto& ResolvedCreateTableStmtBaseProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedCreateStatementProto& ResolvedCreateTableStmtBaseProto::parent() const {
  const ::zetasql::ResolvedCreateStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableStmtBaseProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedCreateStatementProto*>(
      &::zetasql::_ResolvedCreateStatementProto_default_instance_);
}
inline ::zetasql::ResolvedCreateStatementProto* ResolvedCreateTableStmtBaseProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateTableStmtBaseProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedCreateStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedCreateStatementProto* ResolvedCreateTableStmtBaseProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedCreateStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateTableStmtBaseProto.parent)
  return parent_;
}
inline void ResolvedCreateTableStmtBaseProto::set_allocated_parent(::zetasql::ResolvedCreateStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateTableStmtBaseProto.parent)
}

// repeated .zetasql.ResolvedOptionProto option_list = 2;
inline int ResolvedCreateTableStmtBaseProto::option_list_size() const {
  return option_list_.size();
}
inline void ResolvedCreateTableStmtBaseProto::clear_option_list() {
  option_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedCreateTableStmtBaseProto::mutable_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateTableStmtBaseProto.option_list)
  return option_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedCreateTableStmtBaseProto::mutable_option_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateTableStmtBaseProto.option_list)
  return &option_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedCreateTableStmtBaseProto::option_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableStmtBaseProto.option_list)
  return option_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedCreateTableStmtBaseProto::add_option_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateTableStmtBaseProto.option_list)
  return option_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedCreateTableStmtBaseProto::option_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateTableStmtBaseProto.option_list)
  return option_list_;
}

// repeated .zetasql.ResolvedColumnDefinitionProto column_definition_list = 3;
inline int ResolvedCreateTableStmtBaseProto::column_definition_list_size() const {
  return column_definition_list_.size();
}
inline void ResolvedCreateTableStmtBaseProto::clear_column_definition_list() {
  column_definition_list_.Clear();
}
inline ::zetasql::ResolvedColumnDefinitionProto* ResolvedCreateTableStmtBaseProto::mutable_column_definition_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateTableStmtBaseProto.column_definition_list)
  return column_definition_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnDefinitionProto >*
ResolvedCreateTableStmtBaseProto::mutable_column_definition_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateTableStmtBaseProto.column_definition_list)
  return &column_definition_list_;
}
inline const ::zetasql::ResolvedColumnDefinitionProto& ResolvedCreateTableStmtBaseProto::column_definition_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableStmtBaseProto.column_definition_list)
  return column_definition_list_.Get(index);
}
inline ::zetasql::ResolvedColumnDefinitionProto* ResolvedCreateTableStmtBaseProto::add_column_definition_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateTableStmtBaseProto.column_definition_list)
  return column_definition_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnDefinitionProto >&
ResolvedCreateTableStmtBaseProto::column_definition_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateTableStmtBaseProto.column_definition_list)
  return column_definition_list_;
}

// repeated .zetasql.ResolvedColumnProto pseudo_column_list = 7;
inline int ResolvedCreateTableStmtBaseProto::pseudo_column_list_size() const {
  return pseudo_column_list_.size();
}
inline ::zetasql::ResolvedColumnProto* ResolvedCreateTableStmtBaseProto::mutable_pseudo_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateTableStmtBaseProto.pseudo_column_list)
  return pseudo_column_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >*
ResolvedCreateTableStmtBaseProto::mutable_pseudo_column_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateTableStmtBaseProto.pseudo_column_list)
  return &pseudo_column_list_;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedCreateTableStmtBaseProto::pseudo_column_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableStmtBaseProto.pseudo_column_list)
  return pseudo_column_list_.Get(index);
}
inline ::zetasql::ResolvedColumnProto* ResolvedCreateTableStmtBaseProto::add_pseudo_column_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateTableStmtBaseProto.pseudo_column_list)
  return pseudo_column_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >&
ResolvedCreateTableStmtBaseProto::pseudo_column_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateTableStmtBaseProto.pseudo_column_list)
  return pseudo_column_list_;
}

// optional .zetasql.ResolvedPrimaryKeyProto primary_key = 4;
inline bool ResolvedCreateTableStmtBaseProto::has_primary_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedCreateTableStmtBaseProto::set_has_primary_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedCreateTableStmtBaseProto::clear_has_primary_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedCreateTableStmtBaseProto::clear_primary_key() {
  if (primary_key_ != NULL) primary_key_->Clear();
  clear_has_primary_key();
}
inline const ::zetasql::ResolvedPrimaryKeyProto& ResolvedCreateTableStmtBaseProto::_internal_primary_key() const {
  return *primary_key_;
}
inline const ::zetasql::ResolvedPrimaryKeyProto& ResolvedCreateTableStmtBaseProto::primary_key() const {
  const ::zetasql::ResolvedPrimaryKeyProto* p = primary_key_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableStmtBaseProto.primary_key)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedPrimaryKeyProto*>(
      &::zetasql::_ResolvedPrimaryKeyProto_default_instance_);
}
inline ::zetasql::ResolvedPrimaryKeyProto* ResolvedCreateTableStmtBaseProto::release_primary_key() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateTableStmtBaseProto.primary_key)
  clear_has_primary_key();
  ::zetasql::ResolvedPrimaryKeyProto* temp = primary_key_;
  primary_key_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedPrimaryKeyProto* ResolvedCreateTableStmtBaseProto::mutable_primary_key() {
  set_has_primary_key();
  if (primary_key_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedPrimaryKeyProto>(GetArenaNoVirtual());
    primary_key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateTableStmtBaseProto.primary_key)
  return primary_key_;
}
inline void ResolvedCreateTableStmtBaseProto::set_allocated_primary_key(::zetasql::ResolvedPrimaryKeyProto* primary_key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete primary_key_;
  }
  if (primary_key) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      primary_key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, primary_key, submessage_arena);
    }
    set_has_primary_key();
  } else {
    clear_has_primary_key();
  }
  primary_key_ = primary_key;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateTableStmtBaseProto.primary_key)
}

// repeated .zetasql.ResolvedForeignKeyProto foreign_key_list = 9;
inline int ResolvedCreateTableStmtBaseProto::foreign_key_list_size() const {
  return foreign_key_list_.size();
}
inline void ResolvedCreateTableStmtBaseProto::clear_foreign_key_list() {
  foreign_key_list_.Clear();
}
inline ::zetasql::ResolvedForeignKeyProto* ResolvedCreateTableStmtBaseProto::mutable_foreign_key_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateTableStmtBaseProto.foreign_key_list)
  return foreign_key_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedForeignKeyProto >*
ResolvedCreateTableStmtBaseProto::mutable_foreign_key_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateTableStmtBaseProto.foreign_key_list)
  return &foreign_key_list_;
}
inline const ::zetasql::ResolvedForeignKeyProto& ResolvedCreateTableStmtBaseProto::foreign_key_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableStmtBaseProto.foreign_key_list)
  return foreign_key_list_.Get(index);
}
inline ::zetasql::ResolvedForeignKeyProto* ResolvedCreateTableStmtBaseProto::add_foreign_key_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateTableStmtBaseProto.foreign_key_list)
  return foreign_key_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedForeignKeyProto >&
ResolvedCreateTableStmtBaseProto::foreign_key_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateTableStmtBaseProto.foreign_key_list)
  return foreign_key_list_;
}

// repeated .zetasql.ResolvedCheckConstraintProto check_constraint_list = 10;
inline int ResolvedCreateTableStmtBaseProto::check_constraint_list_size() const {
  return check_constraint_list_.size();
}
inline void ResolvedCreateTableStmtBaseProto::clear_check_constraint_list() {
  check_constraint_list_.Clear();
}
inline ::zetasql::ResolvedCheckConstraintProto* ResolvedCreateTableStmtBaseProto::mutable_check_constraint_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateTableStmtBaseProto.check_constraint_list)
  return check_constraint_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedCheckConstraintProto >*
ResolvedCreateTableStmtBaseProto::mutable_check_constraint_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateTableStmtBaseProto.check_constraint_list)
  return &check_constraint_list_;
}
inline const ::zetasql::ResolvedCheckConstraintProto& ResolvedCreateTableStmtBaseProto::check_constraint_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableStmtBaseProto.check_constraint_list)
  return check_constraint_list_.Get(index);
}
inline ::zetasql::ResolvedCheckConstraintProto* ResolvedCreateTableStmtBaseProto::add_check_constraint_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateTableStmtBaseProto.check_constraint_list)
  return check_constraint_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedCheckConstraintProto >&
ResolvedCreateTableStmtBaseProto::check_constraint_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateTableStmtBaseProto.check_constraint_list)
  return check_constraint_list_;
}

// optional bool is_value_table = 8;
inline bool ResolvedCreateTableStmtBaseProto::has_is_value_table() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResolvedCreateTableStmtBaseProto::set_has_is_value_table() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResolvedCreateTableStmtBaseProto::clear_has_is_value_table() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResolvedCreateTableStmtBaseProto::clear_is_value_table() {
  is_value_table_ = false;
  clear_has_is_value_table();
}
inline bool ResolvedCreateTableStmtBaseProto::is_value_table() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableStmtBaseProto.is_value_table)
  return is_value_table_;
}
inline void ResolvedCreateTableStmtBaseProto::set_is_value_table(bool value) {
  set_has_is_value_table();
  is_value_table_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateTableStmtBaseProto.is_value_table)
}

// optional .zetasql.TableRefProto like_table = 11;
inline bool ResolvedCreateTableStmtBaseProto::has_like_table() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedCreateTableStmtBaseProto::set_has_like_table() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedCreateTableStmtBaseProto::clear_has_like_table() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasql::TableRefProto& ResolvedCreateTableStmtBaseProto::_internal_like_table() const {
  return *like_table_;
}
inline const ::zetasql::TableRefProto& ResolvedCreateTableStmtBaseProto::like_table() const {
  const ::zetasql::TableRefProto* p = like_table_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableStmtBaseProto.like_table)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TableRefProto*>(
      &::zetasql::_TableRefProto_default_instance_);
}
inline ::zetasql::TableRefProto* ResolvedCreateTableStmtBaseProto::release_like_table() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateTableStmtBaseProto.like_table)
  clear_has_like_table();
  ::zetasql::TableRefProto* temp = like_table_;
  like_table_ = NULL;
  return temp;
}
inline ::zetasql::TableRefProto* ResolvedCreateTableStmtBaseProto::mutable_like_table() {
  set_has_like_table();
  if (like_table_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TableRefProto>(GetArenaNoVirtual());
    like_table_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateTableStmtBaseProto.like_table)
  return like_table_;
}
inline void ResolvedCreateTableStmtBaseProto::set_allocated_like_table(::zetasql::TableRefProto* like_table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(like_table_);
  }
  if (like_table) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      like_table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, like_table, submessage_arena);
    }
    set_has_like_table();
  } else {
    clear_has_like_table();
  }
  like_table_ = like_table;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateTableStmtBaseProto.like_table)
}

// optional .zetasql.AnyResolvedExprProto collation_name = 12;
inline bool ResolvedCreateTableStmtBaseProto::has_collation_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedCreateTableStmtBaseProto::set_has_collation_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedCreateTableStmtBaseProto::clear_has_collation_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedCreateTableStmtBaseProto::clear_collation_name() {
  if (collation_name_ != NULL) collation_name_->Clear();
  clear_has_collation_name();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedCreateTableStmtBaseProto::_internal_collation_name() const {
  return *collation_name_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedCreateTableStmtBaseProto::collation_name() const {
  const ::zetasql::AnyResolvedExprProto* p = collation_name_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableStmtBaseProto.collation_name)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCreateTableStmtBaseProto::release_collation_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateTableStmtBaseProto.collation_name)
  clear_has_collation_name();
  ::zetasql::AnyResolvedExprProto* temp = collation_name_;
  collation_name_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCreateTableStmtBaseProto::mutable_collation_name() {
  set_has_collation_name();
  if (collation_name_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    collation_name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateTableStmtBaseProto.collation_name)
  return collation_name_;
}
inline void ResolvedCreateTableStmtBaseProto::set_allocated_collation_name(::zetasql::AnyResolvedExprProto* collation_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete collation_name_;
  }
  if (collation_name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      collation_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, collation_name, submessage_arena);
    }
    set_has_collation_name();
  } else {
    clear_has_collation_name();
  }
  collation_name_ = collation_name;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateTableStmtBaseProto.collation_name)
}

// -------------------------------------------------------------------

// ResolvedCreateTableStmtProto

// optional .zetasql.ResolvedCreateTableStmtBaseProto parent = 1;
inline bool ResolvedCreateTableStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedCreateTableStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedCreateTableStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedCreateTableStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedCreateTableStmtBaseProto& ResolvedCreateTableStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedCreateTableStmtBaseProto& ResolvedCreateTableStmtProto::parent() const {
  const ::zetasql::ResolvedCreateTableStmtBaseProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedCreateTableStmtBaseProto*>(
      &::zetasql::_ResolvedCreateTableStmtBaseProto_default_instance_);
}
inline ::zetasql::ResolvedCreateTableStmtBaseProto* ResolvedCreateTableStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateTableStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedCreateTableStmtBaseProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedCreateTableStmtBaseProto* ResolvedCreateTableStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedCreateTableStmtBaseProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateTableStmtProto.parent)
  return parent_;
}
inline void ResolvedCreateTableStmtProto::set_allocated_parent(::zetasql::ResolvedCreateTableStmtBaseProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateTableStmtProto.parent)
}

// optional .zetasql.AnyResolvedScanProto clone_from = 7;
inline bool ResolvedCreateTableStmtProto::has_clone_from() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedCreateTableStmtProto::set_has_clone_from() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedCreateTableStmtProto::clear_has_clone_from() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedCreateTableStmtProto::clear_clone_from() {
  if (clone_from_ != NULL) clone_from_->Clear();
  clear_has_clone_from();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedCreateTableStmtProto::_internal_clone_from() const {
  return *clone_from_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedCreateTableStmtProto::clone_from() const {
  const ::zetasql::AnyResolvedScanProto* p = clone_from_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableStmtProto.clone_from)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedCreateTableStmtProto::release_clone_from() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateTableStmtProto.clone_from)
  clear_has_clone_from();
  ::zetasql::AnyResolvedScanProto* temp = clone_from_;
  clone_from_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedCreateTableStmtProto::mutable_clone_from() {
  set_has_clone_from();
  if (clone_from_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    clone_from_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateTableStmtProto.clone_from)
  return clone_from_;
}
inline void ResolvedCreateTableStmtProto::set_allocated_clone_from(::zetasql::AnyResolvedScanProto* clone_from) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete clone_from_;
  }
  if (clone_from) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      clone_from = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, clone_from, submessage_arena);
    }
    set_has_clone_from();
  } else {
    clear_has_clone_from();
  }
  clone_from_ = clone_from;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateTableStmtProto.clone_from)
}

// optional .zetasql.AnyResolvedScanProto copy_from = 8;
inline bool ResolvedCreateTableStmtProto::has_copy_from() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedCreateTableStmtProto::set_has_copy_from() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedCreateTableStmtProto::clear_has_copy_from() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedCreateTableStmtProto::clear_copy_from() {
  if (copy_from_ != NULL) copy_from_->Clear();
  clear_has_copy_from();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedCreateTableStmtProto::_internal_copy_from() const {
  return *copy_from_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedCreateTableStmtProto::copy_from() const {
  const ::zetasql::AnyResolvedScanProto* p = copy_from_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableStmtProto.copy_from)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedCreateTableStmtProto::release_copy_from() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateTableStmtProto.copy_from)
  clear_has_copy_from();
  ::zetasql::AnyResolvedScanProto* temp = copy_from_;
  copy_from_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedCreateTableStmtProto::mutable_copy_from() {
  set_has_copy_from();
  if (copy_from_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    copy_from_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateTableStmtProto.copy_from)
  return copy_from_;
}
inline void ResolvedCreateTableStmtProto::set_allocated_copy_from(::zetasql::AnyResolvedScanProto* copy_from) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete copy_from_;
  }
  if (copy_from) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      copy_from = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, copy_from, submessage_arena);
    }
    set_has_copy_from();
  } else {
    clear_has_copy_from();
  }
  copy_from_ = copy_from;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateTableStmtProto.copy_from)
}

// repeated .zetasql.AnyResolvedExprProto partition_by_list = 5;
inline int ResolvedCreateTableStmtProto::partition_by_list_size() const {
  return partition_by_list_.size();
}
inline void ResolvedCreateTableStmtProto::clear_partition_by_list() {
  partition_by_list_.Clear();
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCreateTableStmtProto::mutable_partition_by_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateTableStmtProto.partition_by_list)
  return partition_by_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
ResolvedCreateTableStmtProto::mutable_partition_by_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateTableStmtProto.partition_by_list)
  return &partition_by_list_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedCreateTableStmtProto::partition_by_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableStmtProto.partition_by_list)
  return partition_by_list_.Get(index);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCreateTableStmtProto::add_partition_by_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateTableStmtProto.partition_by_list)
  return partition_by_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
ResolvedCreateTableStmtProto::partition_by_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateTableStmtProto.partition_by_list)
  return partition_by_list_;
}

// repeated .zetasql.AnyResolvedExprProto cluster_by_list = 6;
inline int ResolvedCreateTableStmtProto::cluster_by_list_size() const {
  return cluster_by_list_.size();
}
inline void ResolvedCreateTableStmtProto::clear_cluster_by_list() {
  cluster_by_list_.Clear();
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCreateTableStmtProto::mutable_cluster_by_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateTableStmtProto.cluster_by_list)
  return cluster_by_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
ResolvedCreateTableStmtProto::mutable_cluster_by_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateTableStmtProto.cluster_by_list)
  return &cluster_by_list_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedCreateTableStmtProto::cluster_by_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableStmtProto.cluster_by_list)
  return cluster_by_list_.Get(index);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCreateTableStmtProto::add_cluster_by_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateTableStmtProto.cluster_by_list)
  return cluster_by_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
ResolvedCreateTableStmtProto::cluster_by_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateTableStmtProto.cluster_by_list)
  return cluster_by_list_;
}

// -------------------------------------------------------------------

// ResolvedCreateTableAsSelectStmtProto

// optional .zetasql.ResolvedCreateTableStmtBaseProto parent = 1;
inline bool ResolvedCreateTableAsSelectStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedCreateTableAsSelectStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedCreateTableAsSelectStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedCreateTableAsSelectStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedCreateTableStmtBaseProto& ResolvedCreateTableAsSelectStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedCreateTableStmtBaseProto& ResolvedCreateTableAsSelectStmtProto::parent() const {
  const ::zetasql::ResolvedCreateTableStmtBaseProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableAsSelectStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedCreateTableStmtBaseProto*>(
      &::zetasql::_ResolvedCreateTableStmtBaseProto_default_instance_);
}
inline ::zetasql::ResolvedCreateTableStmtBaseProto* ResolvedCreateTableAsSelectStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateTableAsSelectStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedCreateTableStmtBaseProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedCreateTableStmtBaseProto* ResolvedCreateTableAsSelectStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedCreateTableStmtBaseProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateTableAsSelectStmtProto.parent)
  return parent_;
}
inline void ResolvedCreateTableAsSelectStmtProto::set_allocated_parent(::zetasql::ResolvedCreateTableStmtBaseProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateTableAsSelectStmtProto.parent)
}

// repeated .zetasql.AnyResolvedExprProto partition_by_list = 5;
inline int ResolvedCreateTableAsSelectStmtProto::partition_by_list_size() const {
  return partition_by_list_.size();
}
inline void ResolvedCreateTableAsSelectStmtProto::clear_partition_by_list() {
  partition_by_list_.Clear();
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCreateTableAsSelectStmtProto::mutable_partition_by_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateTableAsSelectStmtProto.partition_by_list)
  return partition_by_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
ResolvedCreateTableAsSelectStmtProto::mutable_partition_by_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateTableAsSelectStmtProto.partition_by_list)
  return &partition_by_list_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedCreateTableAsSelectStmtProto::partition_by_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableAsSelectStmtProto.partition_by_list)
  return partition_by_list_.Get(index);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCreateTableAsSelectStmtProto::add_partition_by_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateTableAsSelectStmtProto.partition_by_list)
  return partition_by_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
ResolvedCreateTableAsSelectStmtProto::partition_by_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateTableAsSelectStmtProto.partition_by_list)
  return partition_by_list_;
}

// repeated .zetasql.AnyResolvedExprProto cluster_by_list = 6;
inline int ResolvedCreateTableAsSelectStmtProto::cluster_by_list_size() const {
  return cluster_by_list_.size();
}
inline void ResolvedCreateTableAsSelectStmtProto::clear_cluster_by_list() {
  cluster_by_list_.Clear();
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCreateTableAsSelectStmtProto::mutable_cluster_by_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateTableAsSelectStmtProto.cluster_by_list)
  return cluster_by_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
ResolvedCreateTableAsSelectStmtProto::mutable_cluster_by_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateTableAsSelectStmtProto.cluster_by_list)
  return &cluster_by_list_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedCreateTableAsSelectStmtProto::cluster_by_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableAsSelectStmtProto.cluster_by_list)
  return cluster_by_list_.Get(index);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCreateTableAsSelectStmtProto::add_cluster_by_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateTableAsSelectStmtProto.cluster_by_list)
  return cluster_by_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
ResolvedCreateTableAsSelectStmtProto::cluster_by_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateTableAsSelectStmtProto.cluster_by_list)
  return cluster_by_list_;
}

// repeated .zetasql.ResolvedOutputColumnProto output_column_list = 2;
inline int ResolvedCreateTableAsSelectStmtProto::output_column_list_size() const {
  return output_column_list_.size();
}
inline void ResolvedCreateTableAsSelectStmtProto::clear_output_column_list() {
  output_column_list_.Clear();
}
inline ::zetasql::ResolvedOutputColumnProto* ResolvedCreateTableAsSelectStmtProto::mutable_output_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateTableAsSelectStmtProto.output_column_list)
  return output_column_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >*
ResolvedCreateTableAsSelectStmtProto::mutable_output_column_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateTableAsSelectStmtProto.output_column_list)
  return &output_column_list_;
}
inline const ::zetasql::ResolvedOutputColumnProto& ResolvedCreateTableAsSelectStmtProto::output_column_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableAsSelectStmtProto.output_column_list)
  return output_column_list_.Get(index);
}
inline ::zetasql::ResolvedOutputColumnProto* ResolvedCreateTableAsSelectStmtProto::add_output_column_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateTableAsSelectStmtProto.output_column_list)
  return output_column_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >&
ResolvedCreateTableAsSelectStmtProto::output_column_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateTableAsSelectStmtProto.output_column_list)
  return output_column_list_;
}

// optional .zetasql.AnyResolvedScanProto query = 3;
inline bool ResolvedCreateTableAsSelectStmtProto::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedCreateTableAsSelectStmtProto::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedCreateTableAsSelectStmtProto::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedCreateTableAsSelectStmtProto::clear_query() {
  if (query_ != NULL) query_->Clear();
  clear_has_query();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedCreateTableAsSelectStmtProto::_internal_query() const {
  return *query_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedCreateTableAsSelectStmtProto::query() const {
  const ::zetasql::AnyResolvedScanProto* p = query_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableAsSelectStmtProto.query)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedCreateTableAsSelectStmtProto::release_query() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateTableAsSelectStmtProto.query)
  clear_has_query();
  ::zetasql::AnyResolvedScanProto* temp = query_;
  query_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedCreateTableAsSelectStmtProto::mutable_query() {
  set_has_query();
  if (query_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    query_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateTableAsSelectStmtProto.query)
  return query_;
}
inline void ResolvedCreateTableAsSelectStmtProto::set_allocated_query(::zetasql::AnyResolvedScanProto* query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete query_;
  }
  if (query) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    set_has_query();
  } else {
    clear_has_query();
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateTableAsSelectStmtProto.query)
}

// -------------------------------------------------------------------

// ResolvedCreateModelStmtProto

// optional .zetasql.ResolvedCreateStatementProto parent = 1;
inline bool ResolvedCreateModelStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedCreateModelStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedCreateModelStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedCreateModelStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedCreateStatementProto& ResolvedCreateModelStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedCreateStatementProto& ResolvedCreateModelStmtProto::parent() const {
  const ::zetasql::ResolvedCreateStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateModelStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedCreateStatementProto*>(
      &::zetasql::_ResolvedCreateStatementProto_default_instance_);
}
inline ::zetasql::ResolvedCreateStatementProto* ResolvedCreateModelStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateModelStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedCreateStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedCreateStatementProto* ResolvedCreateModelStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedCreateStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateModelStmtProto.parent)
  return parent_;
}
inline void ResolvedCreateModelStmtProto::set_allocated_parent(::zetasql::ResolvedCreateStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateModelStmtProto.parent)
}

// repeated .zetasql.ResolvedOptionProto option_list = 2;
inline int ResolvedCreateModelStmtProto::option_list_size() const {
  return option_list_.size();
}
inline void ResolvedCreateModelStmtProto::clear_option_list() {
  option_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedCreateModelStmtProto::mutable_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateModelStmtProto.option_list)
  return option_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedCreateModelStmtProto::mutable_option_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateModelStmtProto.option_list)
  return &option_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedCreateModelStmtProto::option_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateModelStmtProto.option_list)
  return option_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedCreateModelStmtProto::add_option_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateModelStmtProto.option_list)
  return option_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedCreateModelStmtProto::option_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateModelStmtProto.option_list)
  return option_list_;
}

// repeated .zetasql.ResolvedOutputColumnProto output_column_list = 3;
inline int ResolvedCreateModelStmtProto::output_column_list_size() const {
  return output_column_list_.size();
}
inline void ResolvedCreateModelStmtProto::clear_output_column_list() {
  output_column_list_.Clear();
}
inline ::zetasql::ResolvedOutputColumnProto* ResolvedCreateModelStmtProto::mutable_output_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateModelStmtProto.output_column_list)
  return output_column_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >*
ResolvedCreateModelStmtProto::mutable_output_column_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateModelStmtProto.output_column_list)
  return &output_column_list_;
}
inline const ::zetasql::ResolvedOutputColumnProto& ResolvedCreateModelStmtProto::output_column_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateModelStmtProto.output_column_list)
  return output_column_list_.Get(index);
}
inline ::zetasql::ResolvedOutputColumnProto* ResolvedCreateModelStmtProto::add_output_column_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateModelStmtProto.output_column_list)
  return output_column_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >&
ResolvedCreateModelStmtProto::output_column_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateModelStmtProto.output_column_list)
  return output_column_list_;
}

// optional .zetasql.AnyResolvedScanProto query = 4;
inline bool ResolvedCreateModelStmtProto::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedCreateModelStmtProto::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedCreateModelStmtProto::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedCreateModelStmtProto::clear_query() {
  if (query_ != NULL) query_->Clear();
  clear_has_query();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedCreateModelStmtProto::_internal_query() const {
  return *query_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedCreateModelStmtProto::query() const {
  const ::zetasql::AnyResolvedScanProto* p = query_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateModelStmtProto.query)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedCreateModelStmtProto::release_query() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateModelStmtProto.query)
  clear_has_query();
  ::zetasql::AnyResolvedScanProto* temp = query_;
  query_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedCreateModelStmtProto::mutable_query() {
  set_has_query();
  if (query_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    query_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateModelStmtProto.query)
  return query_;
}
inline void ResolvedCreateModelStmtProto::set_allocated_query(::zetasql::AnyResolvedScanProto* query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete query_;
  }
  if (query) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    set_has_query();
  } else {
    clear_has_query();
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateModelStmtProto.query)
}

// repeated .zetasql.ResolvedColumnDefinitionProto transform_input_column_list = 8;
inline int ResolvedCreateModelStmtProto::transform_input_column_list_size() const {
  return transform_input_column_list_.size();
}
inline void ResolvedCreateModelStmtProto::clear_transform_input_column_list() {
  transform_input_column_list_.Clear();
}
inline ::zetasql::ResolvedColumnDefinitionProto* ResolvedCreateModelStmtProto::mutable_transform_input_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateModelStmtProto.transform_input_column_list)
  return transform_input_column_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnDefinitionProto >*
ResolvedCreateModelStmtProto::mutable_transform_input_column_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateModelStmtProto.transform_input_column_list)
  return &transform_input_column_list_;
}
inline const ::zetasql::ResolvedColumnDefinitionProto& ResolvedCreateModelStmtProto::transform_input_column_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateModelStmtProto.transform_input_column_list)
  return transform_input_column_list_.Get(index);
}
inline ::zetasql::ResolvedColumnDefinitionProto* ResolvedCreateModelStmtProto::add_transform_input_column_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateModelStmtProto.transform_input_column_list)
  return transform_input_column_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnDefinitionProto >&
ResolvedCreateModelStmtProto::transform_input_column_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateModelStmtProto.transform_input_column_list)
  return transform_input_column_list_;
}

// repeated .zetasql.ResolvedComputedColumnProto transform_list = 5;
inline int ResolvedCreateModelStmtProto::transform_list_size() const {
  return transform_list_.size();
}
inline void ResolvedCreateModelStmtProto::clear_transform_list() {
  transform_list_.Clear();
}
inline ::zetasql::ResolvedComputedColumnProto* ResolvedCreateModelStmtProto::mutable_transform_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateModelStmtProto.transform_list)
  return transform_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >*
ResolvedCreateModelStmtProto::mutable_transform_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateModelStmtProto.transform_list)
  return &transform_list_;
}
inline const ::zetasql::ResolvedComputedColumnProto& ResolvedCreateModelStmtProto::transform_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateModelStmtProto.transform_list)
  return transform_list_.Get(index);
}
inline ::zetasql::ResolvedComputedColumnProto* ResolvedCreateModelStmtProto::add_transform_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateModelStmtProto.transform_list)
  return transform_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >&
ResolvedCreateModelStmtProto::transform_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateModelStmtProto.transform_list)
  return transform_list_;
}

// repeated .zetasql.ResolvedOutputColumnProto transform_output_column_list = 6;
inline int ResolvedCreateModelStmtProto::transform_output_column_list_size() const {
  return transform_output_column_list_.size();
}
inline void ResolvedCreateModelStmtProto::clear_transform_output_column_list() {
  transform_output_column_list_.Clear();
}
inline ::zetasql::ResolvedOutputColumnProto* ResolvedCreateModelStmtProto::mutable_transform_output_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateModelStmtProto.transform_output_column_list)
  return transform_output_column_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >*
ResolvedCreateModelStmtProto::mutable_transform_output_column_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateModelStmtProto.transform_output_column_list)
  return &transform_output_column_list_;
}
inline const ::zetasql::ResolvedOutputColumnProto& ResolvedCreateModelStmtProto::transform_output_column_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateModelStmtProto.transform_output_column_list)
  return transform_output_column_list_.Get(index);
}
inline ::zetasql::ResolvedOutputColumnProto* ResolvedCreateModelStmtProto::add_transform_output_column_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateModelStmtProto.transform_output_column_list)
  return transform_output_column_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >&
ResolvedCreateModelStmtProto::transform_output_column_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateModelStmtProto.transform_output_column_list)
  return transform_output_column_list_;
}

// repeated .zetasql.ResolvedAnalyticFunctionGroupProto transform_analytic_function_group_list = 7;
inline int ResolvedCreateModelStmtProto::transform_analytic_function_group_list_size() const {
  return transform_analytic_function_group_list_.size();
}
inline void ResolvedCreateModelStmtProto::clear_transform_analytic_function_group_list() {
  transform_analytic_function_group_list_.Clear();
}
inline ::zetasql::ResolvedAnalyticFunctionGroupProto* ResolvedCreateModelStmtProto::mutable_transform_analytic_function_group_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateModelStmtProto.transform_analytic_function_group_list)
  return transform_analytic_function_group_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedAnalyticFunctionGroupProto >*
ResolvedCreateModelStmtProto::mutable_transform_analytic_function_group_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateModelStmtProto.transform_analytic_function_group_list)
  return &transform_analytic_function_group_list_;
}
inline const ::zetasql::ResolvedAnalyticFunctionGroupProto& ResolvedCreateModelStmtProto::transform_analytic_function_group_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateModelStmtProto.transform_analytic_function_group_list)
  return transform_analytic_function_group_list_.Get(index);
}
inline ::zetasql::ResolvedAnalyticFunctionGroupProto* ResolvedCreateModelStmtProto::add_transform_analytic_function_group_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateModelStmtProto.transform_analytic_function_group_list)
  return transform_analytic_function_group_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedAnalyticFunctionGroupProto >&
ResolvedCreateModelStmtProto::transform_analytic_function_group_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateModelStmtProto.transform_analytic_function_group_list)
  return transform_analytic_function_group_list_;
}

// -------------------------------------------------------------------

// AnyResolvedCreateViewBaseProto

// optional .zetasql.ResolvedCreateViewStmtProto resolved_create_view_stmt_node = 41;
inline bool AnyResolvedCreateViewBaseProto::has_resolved_create_view_stmt_node() const {
  return node_case() == kResolvedCreateViewStmtNode;
}
inline void AnyResolvedCreateViewBaseProto::set_has_resolved_create_view_stmt_node() {
  _oneof_case_[0] = kResolvedCreateViewStmtNode;
}
inline void AnyResolvedCreateViewBaseProto::clear_resolved_create_view_stmt_node() {
  if (has_resolved_create_view_stmt_node()) {
    delete node_.resolved_create_view_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedCreateViewStmtProto& AnyResolvedCreateViewBaseProto::_internal_resolved_create_view_stmt_node() const {
  return *node_.resolved_create_view_stmt_node_;
}
inline ::zetasql::ResolvedCreateViewStmtProto* AnyResolvedCreateViewBaseProto::release_resolved_create_view_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedCreateViewBaseProto.resolved_create_view_stmt_node)
  if (has_resolved_create_view_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedCreateViewStmtProto* temp = node_.resolved_create_view_stmt_node_;
    node_.resolved_create_view_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedCreateViewStmtProto& AnyResolvedCreateViewBaseProto::resolved_create_view_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedCreateViewBaseProto.resolved_create_view_stmt_node)
  return has_resolved_create_view_stmt_node()
      ? *node_.resolved_create_view_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedCreateViewStmtProto*>(&::zetasql::_ResolvedCreateViewStmtProto_default_instance_);
}
inline ::zetasql::ResolvedCreateViewStmtProto* AnyResolvedCreateViewBaseProto::mutable_resolved_create_view_stmt_node() {
  if (!has_resolved_create_view_stmt_node()) {
    clear_node();
    set_has_resolved_create_view_stmt_node();
    node_.resolved_create_view_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedCreateViewStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedCreateViewBaseProto.resolved_create_view_stmt_node)
  return node_.resolved_create_view_stmt_node_;
}

// optional .zetasql.ResolvedCreateMaterializedViewStmtProto resolved_create_materialized_view_stmt_node = 119;
inline bool AnyResolvedCreateViewBaseProto::has_resolved_create_materialized_view_stmt_node() const {
  return node_case() == kResolvedCreateMaterializedViewStmtNode;
}
inline void AnyResolvedCreateViewBaseProto::set_has_resolved_create_materialized_view_stmt_node() {
  _oneof_case_[0] = kResolvedCreateMaterializedViewStmtNode;
}
inline void AnyResolvedCreateViewBaseProto::clear_resolved_create_materialized_view_stmt_node() {
  if (has_resolved_create_materialized_view_stmt_node()) {
    delete node_.resolved_create_materialized_view_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedCreateMaterializedViewStmtProto& AnyResolvedCreateViewBaseProto::_internal_resolved_create_materialized_view_stmt_node() const {
  return *node_.resolved_create_materialized_view_stmt_node_;
}
inline ::zetasql::ResolvedCreateMaterializedViewStmtProto* AnyResolvedCreateViewBaseProto::release_resolved_create_materialized_view_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedCreateViewBaseProto.resolved_create_materialized_view_stmt_node)
  if (has_resolved_create_materialized_view_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedCreateMaterializedViewStmtProto* temp = node_.resolved_create_materialized_view_stmt_node_;
    node_.resolved_create_materialized_view_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedCreateMaterializedViewStmtProto& AnyResolvedCreateViewBaseProto::resolved_create_materialized_view_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedCreateViewBaseProto.resolved_create_materialized_view_stmt_node)
  return has_resolved_create_materialized_view_stmt_node()
      ? *node_.resolved_create_materialized_view_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedCreateMaterializedViewStmtProto*>(&::zetasql::_ResolvedCreateMaterializedViewStmtProto_default_instance_);
}
inline ::zetasql::ResolvedCreateMaterializedViewStmtProto* AnyResolvedCreateViewBaseProto::mutable_resolved_create_materialized_view_stmt_node() {
  if (!has_resolved_create_materialized_view_stmt_node()) {
    clear_node();
    set_has_resolved_create_materialized_view_stmt_node();
    node_.resolved_create_materialized_view_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedCreateMaterializedViewStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedCreateViewBaseProto.resolved_create_materialized_view_stmt_node)
  return node_.resolved_create_materialized_view_stmt_node_;
}

inline bool AnyResolvedCreateViewBaseProto::has_node() const {
  return node_case() != NODE_NOT_SET;
}
inline void AnyResolvedCreateViewBaseProto::clear_has_node() {
  _oneof_case_[0] = NODE_NOT_SET;
}
inline AnyResolvedCreateViewBaseProto::NodeCase AnyResolvedCreateViewBaseProto::node_case() const {
  return AnyResolvedCreateViewBaseProto::NodeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResolvedCreateViewBaseProto

// optional .zetasql.ResolvedCreateStatementProto parent = 1;
inline bool ResolvedCreateViewBaseProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedCreateViewBaseProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedCreateViewBaseProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedCreateViewBaseProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedCreateStatementProto& ResolvedCreateViewBaseProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedCreateStatementProto& ResolvedCreateViewBaseProto::parent() const {
  const ::zetasql::ResolvedCreateStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateViewBaseProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedCreateStatementProto*>(
      &::zetasql::_ResolvedCreateStatementProto_default_instance_);
}
inline ::zetasql::ResolvedCreateStatementProto* ResolvedCreateViewBaseProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateViewBaseProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedCreateStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedCreateStatementProto* ResolvedCreateViewBaseProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedCreateStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateViewBaseProto.parent)
  return parent_;
}
inline void ResolvedCreateViewBaseProto::set_allocated_parent(::zetasql::ResolvedCreateStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateViewBaseProto.parent)
}

// repeated .zetasql.ResolvedOptionProto option_list = 2;
inline int ResolvedCreateViewBaseProto::option_list_size() const {
  return option_list_.size();
}
inline void ResolvedCreateViewBaseProto::clear_option_list() {
  option_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedCreateViewBaseProto::mutable_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateViewBaseProto.option_list)
  return option_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedCreateViewBaseProto::mutable_option_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateViewBaseProto.option_list)
  return &option_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedCreateViewBaseProto::option_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateViewBaseProto.option_list)
  return option_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedCreateViewBaseProto::add_option_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateViewBaseProto.option_list)
  return option_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedCreateViewBaseProto::option_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateViewBaseProto.option_list)
  return option_list_;
}

// repeated .zetasql.ResolvedOutputColumnProto output_column_list = 3;
inline int ResolvedCreateViewBaseProto::output_column_list_size() const {
  return output_column_list_.size();
}
inline void ResolvedCreateViewBaseProto::clear_output_column_list() {
  output_column_list_.Clear();
}
inline ::zetasql::ResolvedOutputColumnProto* ResolvedCreateViewBaseProto::mutable_output_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateViewBaseProto.output_column_list)
  return output_column_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >*
ResolvedCreateViewBaseProto::mutable_output_column_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateViewBaseProto.output_column_list)
  return &output_column_list_;
}
inline const ::zetasql::ResolvedOutputColumnProto& ResolvedCreateViewBaseProto::output_column_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateViewBaseProto.output_column_list)
  return output_column_list_.Get(index);
}
inline ::zetasql::ResolvedOutputColumnProto* ResolvedCreateViewBaseProto::add_output_column_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateViewBaseProto.output_column_list)
  return output_column_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >&
ResolvedCreateViewBaseProto::output_column_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateViewBaseProto.output_column_list)
  return output_column_list_;
}

// optional bool has_explicit_columns = 9;
inline bool ResolvedCreateViewBaseProto::has_has_explicit_columns() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResolvedCreateViewBaseProto::set_has_has_explicit_columns() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResolvedCreateViewBaseProto::clear_has_has_explicit_columns() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResolvedCreateViewBaseProto::clear_has_explicit_columns() {
  has_explicit_columns_ = false;
  clear_has_has_explicit_columns();
}
inline bool ResolvedCreateViewBaseProto::has_explicit_columns() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateViewBaseProto.has_explicit_columns)
  return has_explicit_columns_;
}
inline void ResolvedCreateViewBaseProto::set_has_explicit_columns(bool value) {
  set_has_has_explicit_columns();
  has_explicit_columns_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateViewBaseProto.has_explicit_columns)
}

// optional .zetasql.AnyResolvedScanProto query = 5;
inline bool ResolvedCreateViewBaseProto::has_query() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedCreateViewBaseProto::set_has_query() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedCreateViewBaseProto::clear_has_query() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedCreateViewBaseProto::clear_query() {
  if (query_ != NULL) query_->Clear();
  clear_has_query();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedCreateViewBaseProto::_internal_query() const {
  return *query_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedCreateViewBaseProto::query() const {
  const ::zetasql::AnyResolvedScanProto* p = query_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateViewBaseProto.query)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedCreateViewBaseProto::release_query() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateViewBaseProto.query)
  clear_has_query();
  ::zetasql::AnyResolvedScanProto* temp = query_;
  query_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedCreateViewBaseProto::mutable_query() {
  set_has_query();
  if (query_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    query_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateViewBaseProto.query)
  return query_;
}
inline void ResolvedCreateViewBaseProto::set_allocated_query(::zetasql::AnyResolvedScanProto* query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete query_;
  }
  if (query) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    set_has_query();
  } else {
    clear_has_query();
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateViewBaseProto.query)
}

// optional string sql = 6;
inline bool ResolvedCreateViewBaseProto::has_sql() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedCreateViewBaseProto::set_has_sql() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedCreateViewBaseProto::clear_has_sql() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedCreateViewBaseProto::clear_sql() {
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sql();
}
inline const ::std::string& ResolvedCreateViewBaseProto::sql() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateViewBaseProto.sql)
  return sql_.GetNoArena();
}
inline void ResolvedCreateViewBaseProto::set_sql(const ::std::string& value) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateViewBaseProto.sql)
}
#if LANG_CXX11
inline void ResolvedCreateViewBaseProto::set_sql(::std::string&& value) {
  set_has_sql();
  sql_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedCreateViewBaseProto.sql)
}
#endif
inline void ResolvedCreateViewBaseProto::set_sql(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedCreateViewBaseProto.sql)
}
inline void ResolvedCreateViewBaseProto::set_sql(const char* value, size_t size) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedCreateViewBaseProto.sql)
}
inline ::std::string* ResolvedCreateViewBaseProto::mutable_sql() {
  set_has_sql();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateViewBaseProto.sql)
  return sql_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedCreateViewBaseProto::release_sql() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateViewBaseProto.sql)
  if (!has_sql()) {
    return NULL;
  }
  clear_has_sql();
  return sql_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedCreateViewBaseProto::set_allocated_sql(::std::string* sql) {
  if (sql != NULL) {
    set_has_sql();
  } else {
    clear_has_sql();
  }
  sql_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateViewBaseProto.sql)
}

// optional .zetasql.ResolvedCreateStatementEnums.SqlSecurity sql_security = 7;
inline bool ResolvedCreateViewBaseProto::has_sql_security() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedCreateViewBaseProto::set_has_sql_security() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedCreateViewBaseProto::clear_has_sql_security() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedCreateViewBaseProto::clear_sql_security() {
  sql_security_ = 0;
  clear_has_sql_security();
}
inline ::zetasql::ResolvedCreateStatementEnums_SqlSecurity ResolvedCreateViewBaseProto::sql_security() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateViewBaseProto.sql_security)
  return static_cast< ::zetasql::ResolvedCreateStatementEnums_SqlSecurity >(sql_security_);
}
inline void ResolvedCreateViewBaseProto::set_sql_security(::zetasql::ResolvedCreateStatementEnums_SqlSecurity value) {
  assert(::zetasql::ResolvedCreateStatementEnums_SqlSecurity_IsValid(value));
  set_has_sql_security();
  sql_security_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateViewBaseProto.sql_security)
}

// optional bool is_value_table = 4;
inline bool ResolvedCreateViewBaseProto::has_is_value_table() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResolvedCreateViewBaseProto::set_has_is_value_table() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResolvedCreateViewBaseProto::clear_has_is_value_table() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ResolvedCreateViewBaseProto::clear_is_value_table() {
  is_value_table_ = false;
  clear_has_is_value_table();
}
inline bool ResolvedCreateViewBaseProto::is_value_table() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateViewBaseProto.is_value_table)
  return is_value_table_;
}
inline void ResolvedCreateViewBaseProto::set_is_value_table(bool value) {
  set_has_is_value_table();
  is_value_table_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateViewBaseProto.is_value_table)
}

// optional bool recursive = 8;
inline bool ResolvedCreateViewBaseProto::has_recursive() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResolvedCreateViewBaseProto::set_has_recursive() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ResolvedCreateViewBaseProto::clear_has_recursive() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ResolvedCreateViewBaseProto::clear_recursive() {
  recursive_ = false;
  clear_has_recursive();
}
inline bool ResolvedCreateViewBaseProto::recursive() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateViewBaseProto.recursive)
  return recursive_;
}
inline void ResolvedCreateViewBaseProto::set_recursive(bool value) {
  set_has_recursive();
  recursive_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateViewBaseProto.recursive)
}

// -------------------------------------------------------------------

// ResolvedCreateViewStmtProto

// optional .zetasql.ResolvedCreateViewBaseProto parent = 1;
inline bool ResolvedCreateViewStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedCreateViewStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedCreateViewStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedCreateViewStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedCreateViewBaseProto& ResolvedCreateViewStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedCreateViewBaseProto& ResolvedCreateViewStmtProto::parent() const {
  const ::zetasql::ResolvedCreateViewBaseProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateViewStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedCreateViewBaseProto*>(
      &::zetasql::_ResolvedCreateViewBaseProto_default_instance_);
}
inline ::zetasql::ResolvedCreateViewBaseProto* ResolvedCreateViewStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateViewStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedCreateViewBaseProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedCreateViewBaseProto* ResolvedCreateViewStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedCreateViewBaseProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateViewStmtProto.parent)
  return parent_;
}
inline void ResolvedCreateViewStmtProto::set_allocated_parent(::zetasql::ResolvedCreateViewBaseProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateViewStmtProto.parent)
}

// -------------------------------------------------------------------

// ResolvedWithPartitionColumnsProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedWithPartitionColumnsProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedWithPartitionColumnsProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedWithPartitionColumnsProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedWithPartitionColumnsProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedWithPartitionColumnsProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedWithPartitionColumnsProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedWithPartitionColumnsProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedWithPartitionColumnsProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedWithPartitionColumnsProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedWithPartitionColumnsProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedWithPartitionColumnsProto.parent)
  return parent_;
}
inline void ResolvedWithPartitionColumnsProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedWithPartitionColumnsProto.parent)
}

// repeated .zetasql.ResolvedColumnDefinitionProto column_definition_list = 2;
inline int ResolvedWithPartitionColumnsProto::column_definition_list_size() const {
  return column_definition_list_.size();
}
inline void ResolvedWithPartitionColumnsProto::clear_column_definition_list() {
  column_definition_list_.Clear();
}
inline ::zetasql::ResolvedColumnDefinitionProto* ResolvedWithPartitionColumnsProto::mutable_column_definition_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedWithPartitionColumnsProto.column_definition_list)
  return column_definition_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnDefinitionProto >*
ResolvedWithPartitionColumnsProto::mutable_column_definition_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedWithPartitionColumnsProto.column_definition_list)
  return &column_definition_list_;
}
inline const ::zetasql::ResolvedColumnDefinitionProto& ResolvedWithPartitionColumnsProto::column_definition_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedWithPartitionColumnsProto.column_definition_list)
  return column_definition_list_.Get(index);
}
inline ::zetasql::ResolvedColumnDefinitionProto* ResolvedWithPartitionColumnsProto::add_column_definition_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedWithPartitionColumnsProto.column_definition_list)
  return column_definition_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnDefinitionProto >&
ResolvedWithPartitionColumnsProto::column_definition_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedWithPartitionColumnsProto.column_definition_list)
  return column_definition_list_;
}

// -------------------------------------------------------------------

// ResolvedCreateSnapshotTableStmtProto

// optional .zetasql.ResolvedCreateStatementProto parent = 1;
inline bool ResolvedCreateSnapshotTableStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedCreateSnapshotTableStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedCreateSnapshotTableStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedCreateSnapshotTableStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedCreateStatementProto& ResolvedCreateSnapshotTableStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedCreateStatementProto& ResolvedCreateSnapshotTableStmtProto::parent() const {
  const ::zetasql::ResolvedCreateStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateSnapshotTableStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedCreateStatementProto*>(
      &::zetasql::_ResolvedCreateStatementProto_default_instance_);
}
inline ::zetasql::ResolvedCreateStatementProto* ResolvedCreateSnapshotTableStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateSnapshotTableStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedCreateStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedCreateStatementProto* ResolvedCreateSnapshotTableStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedCreateStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateSnapshotTableStmtProto.parent)
  return parent_;
}
inline void ResolvedCreateSnapshotTableStmtProto::set_allocated_parent(::zetasql::ResolvedCreateStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateSnapshotTableStmtProto.parent)
}

// optional .zetasql.AnyResolvedScanProto clone_from = 2;
inline bool ResolvedCreateSnapshotTableStmtProto::has_clone_from() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedCreateSnapshotTableStmtProto::set_has_clone_from() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedCreateSnapshotTableStmtProto::clear_has_clone_from() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedCreateSnapshotTableStmtProto::clear_clone_from() {
  if (clone_from_ != NULL) clone_from_->Clear();
  clear_has_clone_from();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedCreateSnapshotTableStmtProto::_internal_clone_from() const {
  return *clone_from_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedCreateSnapshotTableStmtProto::clone_from() const {
  const ::zetasql::AnyResolvedScanProto* p = clone_from_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateSnapshotTableStmtProto.clone_from)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedCreateSnapshotTableStmtProto::release_clone_from() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateSnapshotTableStmtProto.clone_from)
  clear_has_clone_from();
  ::zetasql::AnyResolvedScanProto* temp = clone_from_;
  clone_from_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedCreateSnapshotTableStmtProto::mutable_clone_from() {
  set_has_clone_from();
  if (clone_from_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    clone_from_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateSnapshotTableStmtProto.clone_from)
  return clone_from_;
}
inline void ResolvedCreateSnapshotTableStmtProto::set_allocated_clone_from(::zetasql::AnyResolvedScanProto* clone_from) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete clone_from_;
  }
  if (clone_from) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      clone_from = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, clone_from, submessage_arena);
    }
    set_has_clone_from();
  } else {
    clear_has_clone_from();
  }
  clone_from_ = clone_from;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateSnapshotTableStmtProto.clone_from)
}

// repeated .zetasql.ResolvedOptionProto option_list = 3;
inline int ResolvedCreateSnapshotTableStmtProto::option_list_size() const {
  return option_list_.size();
}
inline void ResolvedCreateSnapshotTableStmtProto::clear_option_list() {
  option_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedCreateSnapshotTableStmtProto::mutable_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateSnapshotTableStmtProto.option_list)
  return option_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedCreateSnapshotTableStmtProto::mutable_option_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateSnapshotTableStmtProto.option_list)
  return &option_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedCreateSnapshotTableStmtProto::option_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateSnapshotTableStmtProto.option_list)
  return option_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedCreateSnapshotTableStmtProto::add_option_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateSnapshotTableStmtProto.option_list)
  return option_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedCreateSnapshotTableStmtProto::option_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateSnapshotTableStmtProto.option_list)
  return option_list_;
}

// -------------------------------------------------------------------

// ResolvedCreateExternalTableStmtProto

// optional .zetasql.ResolvedCreateTableStmtBaseProto parent = 1;
inline bool ResolvedCreateExternalTableStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedCreateExternalTableStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedCreateExternalTableStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedCreateExternalTableStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedCreateTableStmtBaseProto& ResolvedCreateExternalTableStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedCreateTableStmtBaseProto& ResolvedCreateExternalTableStmtProto::parent() const {
  const ::zetasql::ResolvedCreateTableStmtBaseProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateExternalTableStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedCreateTableStmtBaseProto*>(
      &::zetasql::_ResolvedCreateTableStmtBaseProto_default_instance_);
}
inline ::zetasql::ResolvedCreateTableStmtBaseProto* ResolvedCreateExternalTableStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateExternalTableStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedCreateTableStmtBaseProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedCreateTableStmtBaseProto* ResolvedCreateExternalTableStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedCreateTableStmtBaseProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateExternalTableStmtProto.parent)
  return parent_;
}
inline void ResolvedCreateExternalTableStmtProto::set_allocated_parent(::zetasql::ResolvedCreateTableStmtBaseProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateExternalTableStmtProto.parent)
}

// optional .zetasql.ResolvedWithPartitionColumnsProto with_partition_columns = 2;
inline bool ResolvedCreateExternalTableStmtProto::has_with_partition_columns() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedCreateExternalTableStmtProto::set_has_with_partition_columns() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedCreateExternalTableStmtProto::clear_has_with_partition_columns() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedCreateExternalTableStmtProto::clear_with_partition_columns() {
  if (with_partition_columns_ != NULL) with_partition_columns_->Clear();
  clear_has_with_partition_columns();
}
inline const ::zetasql::ResolvedWithPartitionColumnsProto& ResolvedCreateExternalTableStmtProto::_internal_with_partition_columns() const {
  return *with_partition_columns_;
}
inline const ::zetasql::ResolvedWithPartitionColumnsProto& ResolvedCreateExternalTableStmtProto::with_partition_columns() const {
  const ::zetasql::ResolvedWithPartitionColumnsProto* p = with_partition_columns_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateExternalTableStmtProto.with_partition_columns)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedWithPartitionColumnsProto*>(
      &::zetasql::_ResolvedWithPartitionColumnsProto_default_instance_);
}
inline ::zetasql::ResolvedWithPartitionColumnsProto* ResolvedCreateExternalTableStmtProto::release_with_partition_columns() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateExternalTableStmtProto.with_partition_columns)
  clear_has_with_partition_columns();
  ::zetasql::ResolvedWithPartitionColumnsProto* temp = with_partition_columns_;
  with_partition_columns_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedWithPartitionColumnsProto* ResolvedCreateExternalTableStmtProto::mutable_with_partition_columns() {
  set_has_with_partition_columns();
  if (with_partition_columns_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedWithPartitionColumnsProto>(GetArenaNoVirtual());
    with_partition_columns_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateExternalTableStmtProto.with_partition_columns)
  return with_partition_columns_;
}
inline void ResolvedCreateExternalTableStmtProto::set_allocated_with_partition_columns(::zetasql::ResolvedWithPartitionColumnsProto* with_partition_columns) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete with_partition_columns_;
  }
  if (with_partition_columns) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      with_partition_columns = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, with_partition_columns, submessage_arena);
    }
    set_has_with_partition_columns();
  } else {
    clear_has_with_partition_columns();
  }
  with_partition_columns_ = with_partition_columns;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateExternalTableStmtProto.with_partition_columns)
}

// optional .zetasql.ResolvedConnectionProto connection = 3;
inline bool ResolvedCreateExternalTableStmtProto::has_connection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedCreateExternalTableStmtProto::set_has_connection() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedCreateExternalTableStmtProto::clear_has_connection() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedCreateExternalTableStmtProto::clear_connection() {
  if (connection_ != NULL) connection_->Clear();
  clear_has_connection();
}
inline const ::zetasql::ResolvedConnectionProto& ResolvedCreateExternalTableStmtProto::_internal_connection() const {
  return *connection_;
}
inline const ::zetasql::ResolvedConnectionProto& ResolvedCreateExternalTableStmtProto::connection() const {
  const ::zetasql::ResolvedConnectionProto* p = connection_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateExternalTableStmtProto.connection)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedConnectionProto*>(
      &::zetasql::_ResolvedConnectionProto_default_instance_);
}
inline ::zetasql::ResolvedConnectionProto* ResolvedCreateExternalTableStmtProto::release_connection() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateExternalTableStmtProto.connection)
  clear_has_connection();
  ::zetasql::ResolvedConnectionProto* temp = connection_;
  connection_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedConnectionProto* ResolvedCreateExternalTableStmtProto::mutable_connection() {
  set_has_connection();
  if (connection_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedConnectionProto>(GetArenaNoVirtual());
    connection_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateExternalTableStmtProto.connection)
  return connection_;
}
inline void ResolvedCreateExternalTableStmtProto::set_allocated_connection(::zetasql::ResolvedConnectionProto* connection) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete connection_;
  }
  if (connection) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      connection = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, connection, submessage_arena);
    }
    set_has_connection();
  } else {
    clear_has_connection();
  }
  connection_ = connection;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateExternalTableStmtProto.connection)
}

// -------------------------------------------------------------------

// ResolvedExportModelStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedExportModelStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedExportModelStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedExportModelStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedExportModelStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedExportModelStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedExportModelStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExportModelStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedExportModelStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedExportModelStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedExportModelStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExportModelStmtProto.parent)
  return parent_;
}
inline void ResolvedExportModelStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedExportModelStmtProto.parent)
}

// repeated string model_name_path = 2;
inline int ResolvedExportModelStmtProto::model_name_path_size() const {
  return model_name_path_.size();
}
inline void ResolvedExportModelStmtProto::clear_model_name_path() {
  model_name_path_.Clear();
}
inline const ::std::string& ResolvedExportModelStmtProto::model_name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExportModelStmtProto.model_name_path)
  return model_name_path_.Get(index);
}
inline ::std::string* ResolvedExportModelStmtProto::mutable_model_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExportModelStmtProto.model_name_path)
  return model_name_path_.Mutable(index);
}
inline void ResolvedExportModelStmtProto::set_model_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedExportModelStmtProto.model_name_path)
  model_name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedExportModelStmtProto::set_model_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedExportModelStmtProto.model_name_path)
  model_name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedExportModelStmtProto::set_model_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  model_name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedExportModelStmtProto.model_name_path)
}
inline void ResolvedExportModelStmtProto::set_model_name_path(int index, const char* value, size_t size) {
  model_name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedExportModelStmtProto.model_name_path)
}
inline ::std::string* ResolvedExportModelStmtProto::add_model_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedExportModelStmtProto.model_name_path)
  return model_name_path_.Add();
}
inline void ResolvedExportModelStmtProto::add_model_name_path(const ::std::string& value) {
  model_name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedExportModelStmtProto.model_name_path)
}
#if LANG_CXX11
inline void ResolvedExportModelStmtProto::add_model_name_path(::std::string&& value) {
  model_name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedExportModelStmtProto.model_name_path)
}
#endif
inline void ResolvedExportModelStmtProto::add_model_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  model_name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedExportModelStmtProto.model_name_path)
}
inline void ResolvedExportModelStmtProto::add_model_name_path(const char* value, size_t size) {
  model_name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedExportModelStmtProto.model_name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedExportModelStmtProto::model_name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedExportModelStmtProto.model_name_path)
  return model_name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedExportModelStmtProto::mutable_model_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedExportModelStmtProto.model_name_path)
  return &model_name_path_;
}

// optional .zetasql.ResolvedConnectionProto connection = 3;
inline bool ResolvedExportModelStmtProto::has_connection() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedExportModelStmtProto::set_has_connection() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedExportModelStmtProto::clear_has_connection() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedExportModelStmtProto::clear_connection() {
  if (connection_ != NULL) connection_->Clear();
  clear_has_connection();
}
inline const ::zetasql::ResolvedConnectionProto& ResolvedExportModelStmtProto::_internal_connection() const {
  return *connection_;
}
inline const ::zetasql::ResolvedConnectionProto& ResolvedExportModelStmtProto::connection() const {
  const ::zetasql::ResolvedConnectionProto* p = connection_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExportModelStmtProto.connection)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedConnectionProto*>(
      &::zetasql::_ResolvedConnectionProto_default_instance_);
}
inline ::zetasql::ResolvedConnectionProto* ResolvedExportModelStmtProto::release_connection() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedExportModelStmtProto.connection)
  clear_has_connection();
  ::zetasql::ResolvedConnectionProto* temp = connection_;
  connection_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedConnectionProto* ResolvedExportModelStmtProto::mutable_connection() {
  set_has_connection();
  if (connection_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedConnectionProto>(GetArenaNoVirtual());
    connection_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExportModelStmtProto.connection)
  return connection_;
}
inline void ResolvedExportModelStmtProto::set_allocated_connection(::zetasql::ResolvedConnectionProto* connection) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete connection_;
  }
  if (connection) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      connection = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, connection, submessage_arena);
    }
    set_has_connection();
  } else {
    clear_has_connection();
  }
  connection_ = connection;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedExportModelStmtProto.connection)
}

// repeated .zetasql.ResolvedOptionProto option_list = 4;
inline int ResolvedExportModelStmtProto::option_list_size() const {
  return option_list_.size();
}
inline void ResolvedExportModelStmtProto::clear_option_list() {
  option_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedExportModelStmtProto::mutable_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExportModelStmtProto.option_list)
  return option_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedExportModelStmtProto::mutable_option_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedExportModelStmtProto.option_list)
  return &option_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedExportModelStmtProto::option_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExportModelStmtProto.option_list)
  return option_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedExportModelStmtProto::add_option_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedExportModelStmtProto.option_list)
  return option_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedExportModelStmtProto::option_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedExportModelStmtProto.option_list)
  return option_list_;
}

// -------------------------------------------------------------------

// ResolvedExportDataStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedExportDataStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedExportDataStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedExportDataStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedExportDataStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedExportDataStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedExportDataStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExportDataStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedExportDataStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedExportDataStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedExportDataStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExportDataStmtProto.parent)
  return parent_;
}
inline void ResolvedExportDataStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedExportDataStmtProto.parent)
}

// optional .zetasql.ResolvedConnectionProto connection = 6;
inline bool ResolvedExportDataStmtProto::has_connection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedExportDataStmtProto::set_has_connection() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedExportDataStmtProto::clear_has_connection() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedExportDataStmtProto::clear_connection() {
  if (connection_ != NULL) connection_->Clear();
  clear_has_connection();
}
inline const ::zetasql::ResolvedConnectionProto& ResolvedExportDataStmtProto::_internal_connection() const {
  return *connection_;
}
inline const ::zetasql::ResolvedConnectionProto& ResolvedExportDataStmtProto::connection() const {
  const ::zetasql::ResolvedConnectionProto* p = connection_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExportDataStmtProto.connection)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedConnectionProto*>(
      &::zetasql::_ResolvedConnectionProto_default_instance_);
}
inline ::zetasql::ResolvedConnectionProto* ResolvedExportDataStmtProto::release_connection() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedExportDataStmtProto.connection)
  clear_has_connection();
  ::zetasql::ResolvedConnectionProto* temp = connection_;
  connection_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedConnectionProto* ResolvedExportDataStmtProto::mutable_connection() {
  set_has_connection();
  if (connection_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedConnectionProto>(GetArenaNoVirtual());
    connection_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExportDataStmtProto.connection)
  return connection_;
}
inline void ResolvedExportDataStmtProto::set_allocated_connection(::zetasql::ResolvedConnectionProto* connection) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete connection_;
  }
  if (connection) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      connection = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, connection, submessage_arena);
    }
    set_has_connection();
  } else {
    clear_has_connection();
  }
  connection_ = connection;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedExportDataStmtProto.connection)
}

// repeated .zetasql.ResolvedOptionProto option_list = 2;
inline int ResolvedExportDataStmtProto::option_list_size() const {
  return option_list_.size();
}
inline void ResolvedExportDataStmtProto::clear_option_list() {
  option_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedExportDataStmtProto::mutable_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExportDataStmtProto.option_list)
  return option_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedExportDataStmtProto::mutable_option_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedExportDataStmtProto.option_list)
  return &option_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedExportDataStmtProto::option_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExportDataStmtProto.option_list)
  return option_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedExportDataStmtProto::add_option_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedExportDataStmtProto.option_list)
  return option_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedExportDataStmtProto::option_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedExportDataStmtProto.option_list)
  return option_list_;
}

// repeated .zetasql.ResolvedOutputColumnProto output_column_list = 3;
inline int ResolvedExportDataStmtProto::output_column_list_size() const {
  return output_column_list_.size();
}
inline void ResolvedExportDataStmtProto::clear_output_column_list() {
  output_column_list_.Clear();
}
inline ::zetasql::ResolvedOutputColumnProto* ResolvedExportDataStmtProto::mutable_output_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExportDataStmtProto.output_column_list)
  return output_column_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >*
ResolvedExportDataStmtProto::mutable_output_column_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedExportDataStmtProto.output_column_list)
  return &output_column_list_;
}
inline const ::zetasql::ResolvedOutputColumnProto& ResolvedExportDataStmtProto::output_column_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExportDataStmtProto.output_column_list)
  return output_column_list_.Get(index);
}
inline ::zetasql::ResolvedOutputColumnProto* ResolvedExportDataStmtProto::add_output_column_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedExportDataStmtProto.output_column_list)
  return output_column_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >&
ResolvedExportDataStmtProto::output_column_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedExportDataStmtProto.output_column_list)
  return output_column_list_;
}

// optional bool is_value_table = 4;
inline bool ResolvedExportDataStmtProto::has_is_value_table() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedExportDataStmtProto::set_has_is_value_table() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedExportDataStmtProto::clear_has_is_value_table() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedExportDataStmtProto::clear_is_value_table() {
  is_value_table_ = false;
  clear_has_is_value_table();
}
inline bool ResolvedExportDataStmtProto::is_value_table() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExportDataStmtProto.is_value_table)
  return is_value_table_;
}
inline void ResolvedExportDataStmtProto::set_is_value_table(bool value) {
  set_has_is_value_table();
  is_value_table_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedExportDataStmtProto.is_value_table)
}

// optional .zetasql.AnyResolvedScanProto query = 5;
inline bool ResolvedExportDataStmtProto::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedExportDataStmtProto::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedExportDataStmtProto::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedExportDataStmtProto::clear_query() {
  if (query_ != NULL) query_->Clear();
  clear_has_query();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedExportDataStmtProto::_internal_query() const {
  return *query_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedExportDataStmtProto::query() const {
  const ::zetasql::AnyResolvedScanProto* p = query_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExportDataStmtProto.query)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedExportDataStmtProto::release_query() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedExportDataStmtProto.query)
  clear_has_query();
  ::zetasql::AnyResolvedScanProto* temp = query_;
  query_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedExportDataStmtProto::mutable_query() {
  set_has_query();
  if (query_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    query_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExportDataStmtProto.query)
  return query_;
}
inline void ResolvedExportDataStmtProto::set_allocated_query(::zetasql::AnyResolvedScanProto* query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete query_;
  }
  if (query) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    set_has_query();
  } else {
    clear_has_query();
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedExportDataStmtProto.query)
}

// -------------------------------------------------------------------

// ResolvedDefineTableStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedDefineTableStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedDefineTableStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedDefineTableStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedDefineTableStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedDefineTableStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedDefineTableStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDefineTableStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedDefineTableStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDefineTableStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedDefineTableStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDefineTableStmtProto.parent)
  return parent_;
}
inline void ResolvedDefineTableStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDefineTableStmtProto.parent)
}

// repeated string name_path = 2;
inline int ResolvedDefineTableStmtProto::name_path_size() const {
  return name_path_.size();
}
inline void ResolvedDefineTableStmtProto::clear_name_path() {
  name_path_.Clear();
}
inline const ::std::string& ResolvedDefineTableStmtProto::name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDefineTableStmtProto.name_path)
  return name_path_.Get(index);
}
inline ::std::string* ResolvedDefineTableStmtProto::mutable_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDefineTableStmtProto.name_path)
  return name_path_.Mutable(index);
}
inline void ResolvedDefineTableStmtProto::set_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDefineTableStmtProto.name_path)
  name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedDefineTableStmtProto::set_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDefineTableStmtProto.name_path)
  name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedDefineTableStmtProto::set_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedDefineTableStmtProto.name_path)
}
inline void ResolvedDefineTableStmtProto::set_name_path(int index, const char* value, size_t size) {
  name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedDefineTableStmtProto.name_path)
}
inline ::std::string* ResolvedDefineTableStmtProto::add_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedDefineTableStmtProto.name_path)
  return name_path_.Add();
}
inline void ResolvedDefineTableStmtProto::add_name_path(const ::std::string& value) {
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedDefineTableStmtProto.name_path)
}
#if LANG_CXX11
inline void ResolvedDefineTableStmtProto::add_name_path(::std::string&& value) {
  name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedDefineTableStmtProto.name_path)
}
#endif
inline void ResolvedDefineTableStmtProto::add_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedDefineTableStmtProto.name_path)
}
inline void ResolvedDefineTableStmtProto::add_name_path(const char* value, size_t size) {
  name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedDefineTableStmtProto.name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedDefineTableStmtProto::name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedDefineTableStmtProto.name_path)
  return name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedDefineTableStmtProto::mutable_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedDefineTableStmtProto.name_path)
  return &name_path_;
}

// repeated .zetasql.ResolvedOptionProto option_list = 3;
inline int ResolvedDefineTableStmtProto::option_list_size() const {
  return option_list_.size();
}
inline void ResolvedDefineTableStmtProto::clear_option_list() {
  option_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedDefineTableStmtProto::mutable_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDefineTableStmtProto.option_list)
  return option_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedDefineTableStmtProto::mutable_option_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedDefineTableStmtProto.option_list)
  return &option_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedDefineTableStmtProto::option_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDefineTableStmtProto.option_list)
  return option_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedDefineTableStmtProto::add_option_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedDefineTableStmtProto.option_list)
  return option_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedDefineTableStmtProto::option_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedDefineTableStmtProto.option_list)
  return option_list_;
}

// -------------------------------------------------------------------

// ResolvedDescribeStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedDescribeStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedDescribeStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedDescribeStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedDescribeStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedDescribeStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedDescribeStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDescribeStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedDescribeStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDescribeStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedDescribeStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDescribeStmtProto.parent)
  return parent_;
}
inline void ResolvedDescribeStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDescribeStmtProto.parent)
}

// optional string object_type = 2;
inline bool ResolvedDescribeStmtProto::has_object_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedDescribeStmtProto::set_has_object_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedDescribeStmtProto::clear_has_object_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedDescribeStmtProto::clear_object_type() {
  object_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_object_type();
}
inline const ::std::string& ResolvedDescribeStmtProto::object_type() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDescribeStmtProto.object_type)
  return object_type_.GetNoArena();
}
inline void ResolvedDescribeStmtProto::set_object_type(const ::std::string& value) {
  set_has_object_type();
  object_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDescribeStmtProto.object_type)
}
#if LANG_CXX11
inline void ResolvedDescribeStmtProto::set_object_type(::std::string&& value) {
  set_has_object_type();
  object_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedDescribeStmtProto.object_type)
}
#endif
inline void ResolvedDescribeStmtProto::set_object_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_object_type();
  object_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedDescribeStmtProto.object_type)
}
inline void ResolvedDescribeStmtProto::set_object_type(const char* value, size_t size) {
  set_has_object_type();
  object_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedDescribeStmtProto.object_type)
}
inline ::std::string* ResolvedDescribeStmtProto::mutable_object_type() {
  set_has_object_type();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDescribeStmtProto.object_type)
  return object_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedDescribeStmtProto::release_object_type() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDescribeStmtProto.object_type)
  if (!has_object_type()) {
    return NULL;
  }
  clear_has_object_type();
  return object_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedDescribeStmtProto::set_allocated_object_type(::std::string* object_type) {
  if (object_type != NULL) {
    set_has_object_type();
  } else {
    clear_has_object_type();
  }
  object_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_type);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDescribeStmtProto.object_type)
}

// repeated string name_path = 3;
inline int ResolvedDescribeStmtProto::name_path_size() const {
  return name_path_.size();
}
inline void ResolvedDescribeStmtProto::clear_name_path() {
  name_path_.Clear();
}
inline const ::std::string& ResolvedDescribeStmtProto::name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDescribeStmtProto.name_path)
  return name_path_.Get(index);
}
inline ::std::string* ResolvedDescribeStmtProto::mutable_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDescribeStmtProto.name_path)
  return name_path_.Mutable(index);
}
inline void ResolvedDescribeStmtProto::set_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDescribeStmtProto.name_path)
  name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedDescribeStmtProto::set_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDescribeStmtProto.name_path)
  name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedDescribeStmtProto::set_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedDescribeStmtProto.name_path)
}
inline void ResolvedDescribeStmtProto::set_name_path(int index, const char* value, size_t size) {
  name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedDescribeStmtProto.name_path)
}
inline ::std::string* ResolvedDescribeStmtProto::add_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedDescribeStmtProto.name_path)
  return name_path_.Add();
}
inline void ResolvedDescribeStmtProto::add_name_path(const ::std::string& value) {
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedDescribeStmtProto.name_path)
}
#if LANG_CXX11
inline void ResolvedDescribeStmtProto::add_name_path(::std::string&& value) {
  name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedDescribeStmtProto.name_path)
}
#endif
inline void ResolvedDescribeStmtProto::add_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedDescribeStmtProto.name_path)
}
inline void ResolvedDescribeStmtProto::add_name_path(const char* value, size_t size) {
  name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedDescribeStmtProto.name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedDescribeStmtProto::name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedDescribeStmtProto.name_path)
  return name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedDescribeStmtProto::mutable_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedDescribeStmtProto.name_path)
  return &name_path_;
}

// repeated string from_name_path = 4;
inline int ResolvedDescribeStmtProto::from_name_path_size() const {
  return from_name_path_.size();
}
inline void ResolvedDescribeStmtProto::clear_from_name_path() {
  from_name_path_.Clear();
}
inline const ::std::string& ResolvedDescribeStmtProto::from_name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDescribeStmtProto.from_name_path)
  return from_name_path_.Get(index);
}
inline ::std::string* ResolvedDescribeStmtProto::mutable_from_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDescribeStmtProto.from_name_path)
  return from_name_path_.Mutable(index);
}
inline void ResolvedDescribeStmtProto::set_from_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDescribeStmtProto.from_name_path)
  from_name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedDescribeStmtProto::set_from_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDescribeStmtProto.from_name_path)
  from_name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedDescribeStmtProto::set_from_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  from_name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedDescribeStmtProto.from_name_path)
}
inline void ResolvedDescribeStmtProto::set_from_name_path(int index, const char* value, size_t size) {
  from_name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedDescribeStmtProto.from_name_path)
}
inline ::std::string* ResolvedDescribeStmtProto::add_from_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedDescribeStmtProto.from_name_path)
  return from_name_path_.Add();
}
inline void ResolvedDescribeStmtProto::add_from_name_path(const ::std::string& value) {
  from_name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedDescribeStmtProto.from_name_path)
}
#if LANG_CXX11
inline void ResolvedDescribeStmtProto::add_from_name_path(::std::string&& value) {
  from_name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedDescribeStmtProto.from_name_path)
}
#endif
inline void ResolvedDescribeStmtProto::add_from_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  from_name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedDescribeStmtProto.from_name_path)
}
inline void ResolvedDescribeStmtProto::add_from_name_path(const char* value, size_t size) {
  from_name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedDescribeStmtProto.from_name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedDescribeStmtProto::from_name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedDescribeStmtProto.from_name_path)
  return from_name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedDescribeStmtProto::mutable_from_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedDescribeStmtProto.from_name_path)
  return &from_name_path_;
}

// -------------------------------------------------------------------

// ResolvedShowStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedShowStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedShowStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedShowStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedShowStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedShowStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedShowStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedShowStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedShowStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedShowStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedShowStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedShowStmtProto.parent)
  return parent_;
}
inline void ResolvedShowStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedShowStmtProto.parent)
}

// optional string identifier = 2;
inline bool ResolvedShowStmtProto::has_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedShowStmtProto::set_has_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedShowStmtProto::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedShowStmtProto::clear_identifier() {
  identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_identifier();
}
inline const ::std::string& ResolvedShowStmtProto::identifier() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedShowStmtProto.identifier)
  return identifier_.GetNoArena();
}
inline void ResolvedShowStmtProto::set_identifier(const ::std::string& value) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedShowStmtProto.identifier)
}
#if LANG_CXX11
inline void ResolvedShowStmtProto::set_identifier(::std::string&& value) {
  set_has_identifier();
  identifier_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedShowStmtProto.identifier)
}
#endif
inline void ResolvedShowStmtProto::set_identifier(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedShowStmtProto.identifier)
}
inline void ResolvedShowStmtProto::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedShowStmtProto.identifier)
}
inline ::std::string* ResolvedShowStmtProto::mutable_identifier() {
  set_has_identifier();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedShowStmtProto.identifier)
  return identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedShowStmtProto::release_identifier() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedShowStmtProto.identifier)
  if (!has_identifier()) {
    return NULL;
  }
  clear_has_identifier();
  return identifier_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedShowStmtProto::set_allocated_identifier(::std::string* identifier) {
  if (identifier != NULL) {
    set_has_identifier();
  } else {
    clear_has_identifier();
  }
  identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identifier);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedShowStmtProto.identifier)
}

// repeated string name_path = 3;
inline int ResolvedShowStmtProto::name_path_size() const {
  return name_path_.size();
}
inline void ResolvedShowStmtProto::clear_name_path() {
  name_path_.Clear();
}
inline const ::std::string& ResolvedShowStmtProto::name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedShowStmtProto.name_path)
  return name_path_.Get(index);
}
inline ::std::string* ResolvedShowStmtProto::mutable_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedShowStmtProto.name_path)
  return name_path_.Mutable(index);
}
inline void ResolvedShowStmtProto::set_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedShowStmtProto.name_path)
  name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedShowStmtProto::set_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedShowStmtProto.name_path)
  name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedShowStmtProto::set_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedShowStmtProto.name_path)
}
inline void ResolvedShowStmtProto::set_name_path(int index, const char* value, size_t size) {
  name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedShowStmtProto.name_path)
}
inline ::std::string* ResolvedShowStmtProto::add_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedShowStmtProto.name_path)
  return name_path_.Add();
}
inline void ResolvedShowStmtProto::add_name_path(const ::std::string& value) {
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedShowStmtProto.name_path)
}
#if LANG_CXX11
inline void ResolvedShowStmtProto::add_name_path(::std::string&& value) {
  name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedShowStmtProto.name_path)
}
#endif
inline void ResolvedShowStmtProto::add_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedShowStmtProto.name_path)
}
inline void ResolvedShowStmtProto::add_name_path(const char* value, size_t size) {
  name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedShowStmtProto.name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedShowStmtProto::name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedShowStmtProto.name_path)
  return name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedShowStmtProto::mutable_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedShowStmtProto.name_path)
  return &name_path_;
}

// optional .zetasql.ResolvedLiteralProto like_expr = 4;
inline bool ResolvedShowStmtProto::has_like_expr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedShowStmtProto::set_has_like_expr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedShowStmtProto::clear_has_like_expr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedShowStmtProto::clear_like_expr() {
  if (like_expr_ != NULL) like_expr_->Clear();
  clear_has_like_expr();
}
inline const ::zetasql::ResolvedLiteralProto& ResolvedShowStmtProto::_internal_like_expr() const {
  return *like_expr_;
}
inline const ::zetasql::ResolvedLiteralProto& ResolvedShowStmtProto::like_expr() const {
  const ::zetasql::ResolvedLiteralProto* p = like_expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedShowStmtProto.like_expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedLiteralProto*>(
      &::zetasql::_ResolvedLiteralProto_default_instance_);
}
inline ::zetasql::ResolvedLiteralProto* ResolvedShowStmtProto::release_like_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedShowStmtProto.like_expr)
  clear_has_like_expr();
  ::zetasql::ResolvedLiteralProto* temp = like_expr_;
  like_expr_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedLiteralProto* ResolvedShowStmtProto::mutable_like_expr() {
  set_has_like_expr();
  if (like_expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedLiteralProto>(GetArenaNoVirtual());
    like_expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedShowStmtProto.like_expr)
  return like_expr_;
}
inline void ResolvedShowStmtProto::set_allocated_like_expr(::zetasql::ResolvedLiteralProto* like_expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete like_expr_;
  }
  if (like_expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      like_expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, like_expr, submessage_arena);
    }
    set_has_like_expr();
  } else {
    clear_has_like_expr();
  }
  like_expr_ = like_expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedShowStmtProto.like_expr)
}

// -------------------------------------------------------------------

// ResolvedBeginStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedBeginStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedBeginStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedBeginStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedBeginStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedBeginStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedBeginStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedBeginStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedBeginStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedBeginStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedBeginStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedBeginStmtProto.parent)
  return parent_;
}
inline void ResolvedBeginStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedBeginStmtProto.parent)
}

// optional .zetasql.ResolvedBeginStmtEnums.ReadWriteMode read_write_mode = 3;
inline bool ResolvedBeginStmtProto::has_read_write_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedBeginStmtProto::set_has_read_write_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedBeginStmtProto::clear_has_read_write_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedBeginStmtProto::clear_read_write_mode() {
  read_write_mode_ = 0;
  clear_has_read_write_mode();
}
inline ::zetasql::ResolvedBeginStmtEnums_ReadWriteMode ResolvedBeginStmtProto::read_write_mode() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedBeginStmtProto.read_write_mode)
  return static_cast< ::zetasql::ResolvedBeginStmtEnums_ReadWriteMode >(read_write_mode_);
}
inline void ResolvedBeginStmtProto::set_read_write_mode(::zetasql::ResolvedBeginStmtEnums_ReadWriteMode value) {
  assert(::zetasql::ResolvedBeginStmtEnums_ReadWriteMode_IsValid(value));
  set_has_read_write_mode();
  read_write_mode_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedBeginStmtProto.read_write_mode)
}

// repeated string isolation_level_list = 2;
inline int ResolvedBeginStmtProto::isolation_level_list_size() const {
  return isolation_level_list_.size();
}
inline void ResolvedBeginStmtProto::clear_isolation_level_list() {
  isolation_level_list_.Clear();
}
inline const ::std::string& ResolvedBeginStmtProto::isolation_level_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedBeginStmtProto.isolation_level_list)
  return isolation_level_list_.Get(index);
}
inline ::std::string* ResolvedBeginStmtProto::mutable_isolation_level_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedBeginStmtProto.isolation_level_list)
  return isolation_level_list_.Mutable(index);
}
inline void ResolvedBeginStmtProto::set_isolation_level_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedBeginStmtProto.isolation_level_list)
  isolation_level_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedBeginStmtProto::set_isolation_level_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedBeginStmtProto.isolation_level_list)
  isolation_level_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedBeginStmtProto::set_isolation_level_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  isolation_level_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedBeginStmtProto.isolation_level_list)
}
inline void ResolvedBeginStmtProto::set_isolation_level_list(int index, const char* value, size_t size) {
  isolation_level_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedBeginStmtProto.isolation_level_list)
}
inline ::std::string* ResolvedBeginStmtProto::add_isolation_level_list() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedBeginStmtProto.isolation_level_list)
  return isolation_level_list_.Add();
}
inline void ResolvedBeginStmtProto::add_isolation_level_list(const ::std::string& value) {
  isolation_level_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedBeginStmtProto.isolation_level_list)
}
#if LANG_CXX11
inline void ResolvedBeginStmtProto::add_isolation_level_list(::std::string&& value) {
  isolation_level_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedBeginStmtProto.isolation_level_list)
}
#endif
inline void ResolvedBeginStmtProto::add_isolation_level_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  isolation_level_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedBeginStmtProto.isolation_level_list)
}
inline void ResolvedBeginStmtProto::add_isolation_level_list(const char* value, size_t size) {
  isolation_level_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedBeginStmtProto.isolation_level_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedBeginStmtProto::isolation_level_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedBeginStmtProto.isolation_level_list)
  return isolation_level_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedBeginStmtProto::mutable_isolation_level_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedBeginStmtProto.isolation_level_list)
  return &isolation_level_list_;
}

// -------------------------------------------------------------------

// ResolvedSetTransactionStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedSetTransactionStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedSetTransactionStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedSetTransactionStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedSetTransactionStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedSetTransactionStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedSetTransactionStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSetTransactionStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedSetTransactionStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedSetTransactionStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedSetTransactionStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSetTransactionStmtProto.parent)
  return parent_;
}
inline void ResolvedSetTransactionStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedSetTransactionStmtProto.parent)
}

// optional .zetasql.ResolvedBeginStmtEnums.ReadWriteMode read_write_mode = 3;
inline bool ResolvedSetTransactionStmtProto::has_read_write_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedSetTransactionStmtProto::set_has_read_write_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedSetTransactionStmtProto::clear_has_read_write_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedSetTransactionStmtProto::clear_read_write_mode() {
  read_write_mode_ = 0;
  clear_has_read_write_mode();
}
inline ::zetasql::ResolvedBeginStmtEnums_ReadWriteMode ResolvedSetTransactionStmtProto::read_write_mode() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSetTransactionStmtProto.read_write_mode)
  return static_cast< ::zetasql::ResolvedBeginStmtEnums_ReadWriteMode >(read_write_mode_);
}
inline void ResolvedSetTransactionStmtProto::set_read_write_mode(::zetasql::ResolvedBeginStmtEnums_ReadWriteMode value) {
  assert(::zetasql::ResolvedBeginStmtEnums_ReadWriteMode_IsValid(value));
  set_has_read_write_mode();
  read_write_mode_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedSetTransactionStmtProto.read_write_mode)
}

// repeated string isolation_level_list = 2;
inline int ResolvedSetTransactionStmtProto::isolation_level_list_size() const {
  return isolation_level_list_.size();
}
inline void ResolvedSetTransactionStmtProto::clear_isolation_level_list() {
  isolation_level_list_.Clear();
}
inline const ::std::string& ResolvedSetTransactionStmtProto::isolation_level_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSetTransactionStmtProto.isolation_level_list)
  return isolation_level_list_.Get(index);
}
inline ::std::string* ResolvedSetTransactionStmtProto::mutable_isolation_level_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSetTransactionStmtProto.isolation_level_list)
  return isolation_level_list_.Mutable(index);
}
inline void ResolvedSetTransactionStmtProto::set_isolation_level_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedSetTransactionStmtProto.isolation_level_list)
  isolation_level_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedSetTransactionStmtProto::set_isolation_level_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedSetTransactionStmtProto.isolation_level_list)
  isolation_level_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedSetTransactionStmtProto::set_isolation_level_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  isolation_level_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedSetTransactionStmtProto.isolation_level_list)
}
inline void ResolvedSetTransactionStmtProto::set_isolation_level_list(int index, const char* value, size_t size) {
  isolation_level_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedSetTransactionStmtProto.isolation_level_list)
}
inline ::std::string* ResolvedSetTransactionStmtProto::add_isolation_level_list() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedSetTransactionStmtProto.isolation_level_list)
  return isolation_level_list_.Add();
}
inline void ResolvedSetTransactionStmtProto::add_isolation_level_list(const ::std::string& value) {
  isolation_level_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedSetTransactionStmtProto.isolation_level_list)
}
#if LANG_CXX11
inline void ResolvedSetTransactionStmtProto::add_isolation_level_list(::std::string&& value) {
  isolation_level_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedSetTransactionStmtProto.isolation_level_list)
}
#endif
inline void ResolvedSetTransactionStmtProto::add_isolation_level_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  isolation_level_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedSetTransactionStmtProto.isolation_level_list)
}
inline void ResolvedSetTransactionStmtProto::add_isolation_level_list(const char* value, size_t size) {
  isolation_level_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedSetTransactionStmtProto.isolation_level_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedSetTransactionStmtProto::isolation_level_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedSetTransactionStmtProto.isolation_level_list)
  return isolation_level_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedSetTransactionStmtProto::mutable_isolation_level_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedSetTransactionStmtProto.isolation_level_list)
  return &isolation_level_list_;
}

// -------------------------------------------------------------------

// ResolvedCommitStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedCommitStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedCommitStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedCommitStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedCommitStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedCommitStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedCommitStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCommitStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedCommitStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCommitStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedCommitStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCommitStmtProto.parent)
  return parent_;
}
inline void ResolvedCommitStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCommitStmtProto.parent)
}

// -------------------------------------------------------------------

// ResolvedRollbackStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedRollbackStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedRollbackStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedRollbackStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedRollbackStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedRollbackStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedRollbackStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRollbackStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedRollbackStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedRollbackStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedRollbackStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedRollbackStmtProto.parent)
  return parent_;
}
inline void ResolvedRollbackStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedRollbackStmtProto.parent)
}

// -------------------------------------------------------------------

// ResolvedStartBatchStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedStartBatchStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedStartBatchStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedStartBatchStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedStartBatchStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedStartBatchStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedStartBatchStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedStartBatchStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedStartBatchStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedStartBatchStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedStartBatchStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedStartBatchStmtProto.parent)
  return parent_;
}
inline void ResolvedStartBatchStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedStartBatchStmtProto.parent)
}

// optional string batch_type = 2;
inline bool ResolvedStartBatchStmtProto::has_batch_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedStartBatchStmtProto::set_has_batch_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedStartBatchStmtProto::clear_has_batch_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedStartBatchStmtProto::clear_batch_type() {
  batch_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_batch_type();
}
inline const ::std::string& ResolvedStartBatchStmtProto::batch_type() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedStartBatchStmtProto.batch_type)
  return batch_type_.GetNoArena();
}
inline void ResolvedStartBatchStmtProto::set_batch_type(const ::std::string& value) {
  set_has_batch_type();
  batch_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedStartBatchStmtProto.batch_type)
}
#if LANG_CXX11
inline void ResolvedStartBatchStmtProto::set_batch_type(::std::string&& value) {
  set_has_batch_type();
  batch_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedStartBatchStmtProto.batch_type)
}
#endif
inline void ResolvedStartBatchStmtProto::set_batch_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_batch_type();
  batch_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedStartBatchStmtProto.batch_type)
}
inline void ResolvedStartBatchStmtProto::set_batch_type(const char* value, size_t size) {
  set_has_batch_type();
  batch_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedStartBatchStmtProto.batch_type)
}
inline ::std::string* ResolvedStartBatchStmtProto::mutable_batch_type() {
  set_has_batch_type();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedStartBatchStmtProto.batch_type)
  return batch_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedStartBatchStmtProto::release_batch_type() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedStartBatchStmtProto.batch_type)
  if (!has_batch_type()) {
    return NULL;
  }
  clear_has_batch_type();
  return batch_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedStartBatchStmtProto::set_allocated_batch_type(::std::string* batch_type) {
  if (batch_type != NULL) {
    set_has_batch_type();
  } else {
    clear_has_batch_type();
  }
  batch_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), batch_type);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedStartBatchStmtProto.batch_type)
}

// -------------------------------------------------------------------

// ResolvedRunBatchStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedRunBatchStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedRunBatchStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedRunBatchStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedRunBatchStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedRunBatchStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedRunBatchStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRunBatchStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedRunBatchStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedRunBatchStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedRunBatchStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedRunBatchStmtProto.parent)
  return parent_;
}
inline void ResolvedRunBatchStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedRunBatchStmtProto.parent)
}

// -------------------------------------------------------------------

// ResolvedAbortBatchStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedAbortBatchStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAbortBatchStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAbortBatchStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAbortBatchStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedAbortBatchStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedAbortBatchStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAbortBatchStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedAbortBatchStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAbortBatchStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedAbortBatchStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAbortBatchStmtProto.parent)
  return parent_;
}
inline void ResolvedAbortBatchStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAbortBatchStmtProto.parent)
}

// -------------------------------------------------------------------

// ResolvedDropStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedDropStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedDropStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedDropStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedDropStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedDropStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedDropStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedDropStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDropStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedDropStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDropStmtProto.parent)
  return parent_;
}
inline void ResolvedDropStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDropStmtProto.parent)
}

// optional string object_type = 2;
inline bool ResolvedDropStmtProto::has_object_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedDropStmtProto::set_has_object_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedDropStmtProto::clear_has_object_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedDropStmtProto::clear_object_type() {
  object_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_object_type();
}
inline const ::std::string& ResolvedDropStmtProto::object_type() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropStmtProto.object_type)
  return object_type_.GetNoArena();
}
inline void ResolvedDropStmtProto::set_object_type(const ::std::string& value) {
  set_has_object_type();
  object_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropStmtProto.object_type)
}
#if LANG_CXX11
inline void ResolvedDropStmtProto::set_object_type(::std::string&& value) {
  set_has_object_type();
  object_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedDropStmtProto.object_type)
}
#endif
inline void ResolvedDropStmtProto::set_object_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_object_type();
  object_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedDropStmtProto.object_type)
}
inline void ResolvedDropStmtProto::set_object_type(const char* value, size_t size) {
  set_has_object_type();
  object_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedDropStmtProto.object_type)
}
inline ::std::string* ResolvedDropStmtProto::mutable_object_type() {
  set_has_object_type();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDropStmtProto.object_type)
  return object_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedDropStmtProto::release_object_type() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDropStmtProto.object_type)
  if (!has_object_type()) {
    return NULL;
  }
  clear_has_object_type();
  return object_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedDropStmtProto::set_allocated_object_type(::std::string* object_type) {
  if (object_type != NULL) {
    set_has_object_type();
  } else {
    clear_has_object_type();
  }
  object_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_type);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDropStmtProto.object_type)
}

// optional bool is_if_exists = 3;
inline bool ResolvedDropStmtProto::has_is_if_exists() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedDropStmtProto::set_has_is_if_exists() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedDropStmtProto::clear_has_is_if_exists() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedDropStmtProto::clear_is_if_exists() {
  is_if_exists_ = false;
  clear_has_is_if_exists();
}
inline bool ResolvedDropStmtProto::is_if_exists() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropStmtProto.is_if_exists)
  return is_if_exists_;
}
inline void ResolvedDropStmtProto::set_is_if_exists(bool value) {
  set_has_is_if_exists();
  is_if_exists_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropStmtProto.is_if_exists)
}

// repeated string name_path = 4;
inline int ResolvedDropStmtProto::name_path_size() const {
  return name_path_.size();
}
inline void ResolvedDropStmtProto::clear_name_path() {
  name_path_.Clear();
}
inline const ::std::string& ResolvedDropStmtProto::name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropStmtProto.name_path)
  return name_path_.Get(index);
}
inline ::std::string* ResolvedDropStmtProto::mutable_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDropStmtProto.name_path)
  return name_path_.Mutable(index);
}
inline void ResolvedDropStmtProto::set_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropStmtProto.name_path)
  name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedDropStmtProto::set_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropStmtProto.name_path)
  name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedDropStmtProto::set_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedDropStmtProto.name_path)
}
inline void ResolvedDropStmtProto::set_name_path(int index, const char* value, size_t size) {
  name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedDropStmtProto.name_path)
}
inline ::std::string* ResolvedDropStmtProto::add_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedDropStmtProto.name_path)
  return name_path_.Add();
}
inline void ResolvedDropStmtProto::add_name_path(const ::std::string& value) {
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedDropStmtProto.name_path)
}
#if LANG_CXX11
inline void ResolvedDropStmtProto::add_name_path(::std::string&& value) {
  name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedDropStmtProto.name_path)
}
#endif
inline void ResolvedDropStmtProto::add_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedDropStmtProto.name_path)
}
inline void ResolvedDropStmtProto::add_name_path(const char* value, size_t size) {
  name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedDropStmtProto.name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedDropStmtProto::name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedDropStmtProto.name_path)
  return name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedDropStmtProto::mutable_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedDropStmtProto.name_path)
  return &name_path_;
}

// optional .zetasql.ResolvedDropStmtEnums.DropMode drop_mode = 5;
inline bool ResolvedDropStmtProto::has_drop_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedDropStmtProto::set_has_drop_mode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedDropStmtProto::clear_has_drop_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedDropStmtProto::clear_drop_mode() {
  drop_mode_ = 0;
  clear_has_drop_mode();
}
inline ::zetasql::ResolvedDropStmtEnums_DropMode ResolvedDropStmtProto::drop_mode() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropStmtProto.drop_mode)
  return static_cast< ::zetasql::ResolvedDropStmtEnums_DropMode >(drop_mode_);
}
inline void ResolvedDropStmtProto::set_drop_mode(::zetasql::ResolvedDropStmtEnums_DropMode value) {
  assert(::zetasql::ResolvedDropStmtEnums_DropMode_IsValid(value));
  set_has_drop_mode();
  drop_mode_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropStmtProto.drop_mode)
}

// -------------------------------------------------------------------

// ResolvedDropMaterializedViewStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedDropMaterializedViewStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedDropMaterializedViewStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedDropMaterializedViewStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedDropMaterializedViewStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedDropMaterializedViewStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedDropMaterializedViewStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropMaterializedViewStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedDropMaterializedViewStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDropMaterializedViewStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedDropMaterializedViewStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDropMaterializedViewStmtProto.parent)
  return parent_;
}
inline void ResolvedDropMaterializedViewStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDropMaterializedViewStmtProto.parent)
}

// optional bool is_if_exists = 3;
inline bool ResolvedDropMaterializedViewStmtProto::has_is_if_exists() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedDropMaterializedViewStmtProto::set_has_is_if_exists() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedDropMaterializedViewStmtProto::clear_has_is_if_exists() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedDropMaterializedViewStmtProto::clear_is_if_exists() {
  is_if_exists_ = false;
  clear_has_is_if_exists();
}
inline bool ResolvedDropMaterializedViewStmtProto::is_if_exists() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropMaterializedViewStmtProto.is_if_exists)
  return is_if_exists_;
}
inline void ResolvedDropMaterializedViewStmtProto::set_is_if_exists(bool value) {
  set_has_is_if_exists();
  is_if_exists_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropMaterializedViewStmtProto.is_if_exists)
}

// repeated string name_path = 4;
inline int ResolvedDropMaterializedViewStmtProto::name_path_size() const {
  return name_path_.size();
}
inline void ResolvedDropMaterializedViewStmtProto::clear_name_path() {
  name_path_.Clear();
}
inline const ::std::string& ResolvedDropMaterializedViewStmtProto::name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropMaterializedViewStmtProto.name_path)
  return name_path_.Get(index);
}
inline ::std::string* ResolvedDropMaterializedViewStmtProto::mutable_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDropMaterializedViewStmtProto.name_path)
  return name_path_.Mutable(index);
}
inline void ResolvedDropMaterializedViewStmtProto::set_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropMaterializedViewStmtProto.name_path)
  name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedDropMaterializedViewStmtProto::set_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropMaterializedViewStmtProto.name_path)
  name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedDropMaterializedViewStmtProto::set_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedDropMaterializedViewStmtProto.name_path)
}
inline void ResolvedDropMaterializedViewStmtProto::set_name_path(int index, const char* value, size_t size) {
  name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedDropMaterializedViewStmtProto.name_path)
}
inline ::std::string* ResolvedDropMaterializedViewStmtProto::add_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedDropMaterializedViewStmtProto.name_path)
  return name_path_.Add();
}
inline void ResolvedDropMaterializedViewStmtProto::add_name_path(const ::std::string& value) {
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedDropMaterializedViewStmtProto.name_path)
}
#if LANG_CXX11
inline void ResolvedDropMaterializedViewStmtProto::add_name_path(::std::string&& value) {
  name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedDropMaterializedViewStmtProto.name_path)
}
#endif
inline void ResolvedDropMaterializedViewStmtProto::add_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedDropMaterializedViewStmtProto.name_path)
}
inline void ResolvedDropMaterializedViewStmtProto::add_name_path(const char* value, size_t size) {
  name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedDropMaterializedViewStmtProto.name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedDropMaterializedViewStmtProto::name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedDropMaterializedViewStmtProto.name_path)
  return name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedDropMaterializedViewStmtProto::mutable_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedDropMaterializedViewStmtProto.name_path)
  return &name_path_;
}

// -------------------------------------------------------------------

// ResolvedDropSnapshotTableStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedDropSnapshotTableStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedDropSnapshotTableStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedDropSnapshotTableStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedDropSnapshotTableStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedDropSnapshotTableStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedDropSnapshotTableStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropSnapshotTableStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedDropSnapshotTableStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDropSnapshotTableStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedDropSnapshotTableStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDropSnapshotTableStmtProto.parent)
  return parent_;
}
inline void ResolvedDropSnapshotTableStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDropSnapshotTableStmtProto.parent)
}

// optional bool is_if_exists = 3;
inline bool ResolvedDropSnapshotTableStmtProto::has_is_if_exists() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedDropSnapshotTableStmtProto::set_has_is_if_exists() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedDropSnapshotTableStmtProto::clear_has_is_if_exists() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedDropSnapshotTableStmtProto::clear_is_if_exists() {
  is_if_exists_ = false;
  clear_has_is_if_exists();
}
inline bool ResolvedDropSnapshotTableStmtProto::is_if_exists() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropSnapshotTableStmtProto.is_if_exists)
  return is_if_exists_;
}
inline void ResolvedDropSnapshotTableStmtProto::set_is_if_exists(bool value) {
  set_has_is_if_exists();
  is_if_exists_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropSnapshotTableStmtProto.is_if_exists)
}

// repeated string name_path = 4;
inline int ResolvedDropSnapshotTableStmtProto::name_path_size() const {
  return name_path_.size();
}
inline void ResolvedDropSnapshotTableStmtProto::clear_name_path() {
  name_path_.Clear();
}
inline const ::std::string& ResolvedDropSnapshotTableStmtProto::name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropSnapshotTableStmtProto.name_path)
  return name_path_.Get(index);
}
inline ::std::string* ResolvedDropSnapshotTableStmtProto::mutable_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDropSnapshotTableStmtProto.name_path)
  return name_path_.Mutable(index);
}
inline void ResolvedDropSnapshotTableStmtProto::set_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropSnapshotTableStmtProto.name_path)
  name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedDropSnapshotTableStmtProto::set_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropSnapshotTableStmtProto.name_path)
  name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedDropSnapshotTableStmtProto::set_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedDropSnapshotTableStmtProto.name_path)
}
inline void ResolvedDropSnapshotTableStmtProto::set_name_path(int index, const char* value, size_t size) {
  name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedDropSnapshotTableStmtProto.name_path)
}
inline ::std::string* ResolvedDropSnapshotTableStmtProto::add_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedDropSnapshotTableStmtProto.name_path)
  return name_path_.Add();
}
inline void ResolvedDropSnapshotTableStmtProto::add_name_path(const ::std::string& value) {
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedDropSnapshotTableStmtProto.name_path)
}
#if LANG_CXX11
inline void ResolvedDropSnapshotTableStmtProto::add_name_path(::std::string&& value) {
  name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedDropSnapshotTableStmtProto.name_path)
}
#endif
inline void ResolvedDropSnapshotTableStmtProto::add_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedDropSnapshotTableStmtProto.name_path)
}
inline void ResolvedDropSnapshotTableStmtProto::add_name_path(const char* value, size_t size) {
  name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedDropSnapshotTableStmtProto.name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedDropSnapshotTableStmtProto::name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedDropSnapshotTableStmtProto.name_path)
  return name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedDropSnapshotTableStmtProto::mutable_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedDropSnapshotTableStmtProto.name_path)
  return &name_path_;
}

// -------------------------------------------------------------------

// ResolvedRecursiveRefScanProto

// optional .zetasql.ResolvedScanProto parent = 1;
inline bool ResolvedRecursiveRefScanProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedRecursiveRefScanProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedRecursiveRefScanProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedRecursiveRefScanProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedScanProto& ResolvedRecursiveRefScanProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedScanProto& ResolvedRecursiveRefScanProto::parent() const {
  const ::zetasql::ResolvedScanProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRecursiveRefScanProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedScanProto*>(
      &::zetasql::_ResolvedScanProto_default_instance_);
}
inline ::zetasql::ResolvedScanProto* ResolvedRecursiveRefScanProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedRecursiveRefScanProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedScanProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedScanProto* ResolvedRecursiveRefScanProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedScanProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedRecursiveRefScanProto.parent)
  return parent_;
}
inline void ResolvedRecursiveRefScanProto::set_allocated_parent(::zetasql::ResolvedScanProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedRecursiveRefScanProto.parent)
}

// -------------------------------------------------------------------

// ResolvedRecursiveScanProto

// optional .zetasql.ResolvedScanProto parent = 1;
inline bool ResolvedRecursiveScanProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedRecursiveScanProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedRecursiveScanProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedRecursiveScanProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedScanProto& ResolvedRecursiveScanProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedScanProto& ResolvedRecursiveScanProto::parent() const {
  const ::zetasql::ResolvedScanProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRecursiveScanProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedScanProto*>(
      &::zetasql::_ResolvedScanProto_default_instance_);
}
inline ::zetasql::ResolvedScanProto* ResolvedRecursiveScanProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedRecursiveScanProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedScanProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedScanProto* ResolvedRecursiveScanProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedScanProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedRecursiveScanProto.parent)
  return parent_;
}
inline void ResolvedRecursiveScanProto::set_allocated_parent(::zetasql::ResolvedScanProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedRecursiveScanProto.parent)
}

// optional .zetasql.ResolvedRecursiveScanEnums.RecursiveSetOperationType op_type = 2;
inline bool ResolvedRecursiveScanProto::has_op_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedRecursiveScanProto::set_has_op_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedRecursiveScanProto::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedRecursiveScanProto::clear_op_type() {
  op_type_ = 0;
  clear_has_op_type();
}
inline ::zetasql::ResolvedRecursiveScanEnums_RecursiveSetOperationType ResolvedRecursiveScanProto::op_type() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRecursiveScanProto.op_type)
  return static_cast< ::zetasql::ResolvedRecursiveScanEnums_RecursiveSetOperationType >(op_type_);
}
inline void ResolvedRecursiveScanProto::set_op_type(::zetasql::ResolvedRecursiveScanEnums_RecursiveSetOperationType value) {
  assert(::zetasql::ResolvedRecursiveScanEnums_RecursiveSetOperationType_IsValid(value));
  set_has_op_type();
  op_type_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedRecursiveScanProto.op_type)
}

// optional .zetasql.ResolvedSetOperationItemProto non_recursive_term = 3;
inline bool ResolvedRecursiveScanProto::has_non_recursive_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedRecursiveScanProto::set_has_non_recursive_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedRecursiveScanProto::clear_has_non_recursive_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedRecursiveScanProto::clear_non_recursive_term() {
  if (non_recursive_term_ != NULL) non_recursive_term_->Clear();
  clear_has_non_recursive_term();
}
inline const ::zetasql::ResolvedSetOperationItemProto& ResolvedRecursiveScanProto::_internal_non_recursive_term() const {
  return *non_recursive_term_;
}
inline const ::zetasql::ResolvedSetOperationItemProto& ResolvedRecursiveScanProto::non_recursive_term() const {
  const ::zetasql::ResolvedSetOperationItemProto* p = non_recursive_term_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRecursiveScanProto.non_recursive_term)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedSetOperationItemProto*>(
      &::zetasql::_ResolvedSetOperationItemProto_default_instance_);
}
inline ::zetasql::ResolvedSetOperationItemProto* ResolvedRecursiveScanProto::release_non_recursive_term() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedRecursiveScanProto.non_recursive_term)
  clear_has_non_recursive_term();
  ::zetasql::ResolvedSetOperationItemProto* temp = non_recursive_term_;
  non_recursive_term_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedSetOperationItemProto* ResolvedRecursiveScanProto::mutable_non_recursive_term() {
  set_has_non_recursive_term();
  if (non_recursive_term_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedSetOperationItemProto>(GetArenaNoVirtual());
    non_recursive_term_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedRecursiveScanProto.non_recursive_term)
  return non_recursive_term_;
}
inline void ResolvedRecursiveScanProto::set_allocated_non_recursive_term(::zetasql::ResolvedSetOperationItemProto* non_recursive_term) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete non_recursive_term_;
  }
  if (non_recursive_term) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      non_recursive_term = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, non_recursive_term, submessage_arena);
    }
    set_has_non_recursive_term();
  } else {
    clear_has_non_recursive_term();
  }
  non_recursive_term_ = non_recursive_term;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedRecursiveScanProto.non_recursive_term)
}

// optional .zetasql.ResolvedSetOperationItemProto recursive_term = 4;
inline bool ResolvedRecursiveScanProto::has_recursive_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedRecursiveScanProto::set_has_recursive_term() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedRecursiveScanProto::clear_has_recursive_term() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedRecursiveScanProto::clear_recursive_term() {
  if (recursive_term_ != NULL) recursive_term_->Clear();
  clear_has_recursive_term();
}
inline const ::zetasql::ResolvedSetOperationItemProto& ResolvedRecursiveScanProto::_internal_recursive_term() const {
  return *recursive_term_;
}
inline const ::zetasql::ResolvedSetOperationItemProto& ResolvedRecursiveScanProto::recursive_term() const {
  const ::zetasql::ResolvedSetOperationItemProto* p = recursive_term_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRecursiveScanProto.recursive_term)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedSetOperationItemProto*>(
      &::zetasql::_ResolvedSetOperationItemProto_default_instance_);
}
inline ::zetasql::ResolvedSetOperationItemProto* ResolvedRecursiveScanProto::release_recursive_term() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedRecursiveScanProto.recursive_term)
  clear_has_recursive_term();
  ::zetasql::ResolvedSetOperationItemProto* temp = recursive_term_;
  recursive_term_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedSetOperationItemProto* ResolvedRecursiveScanProto::mutable_recursive_term() {
  set_has_recursive_term();
  if (recursive_term_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedSetOperationItemProto>(GetArenaNoVirtual());
    recursive_term_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedRecursiveScanProto.recursive_term)
  return recursive_term_;
}
inline void ResolvedRecursiveScanProto::set_allocated_recursive_term(::zetasql::ResolvedSetOperationItemProto* recursive_term) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete recursive_term_;
  }
  if (recursive_term) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      recursive_term = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, recursive_term, submessage_arena);
    }
    set_has_recursive_term();
  } else {
    clear_has_recursive_term();
  }
  recursive_term_ = recursive_term;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedRecursiveScanProto.recursive_term)
}

// -------------------------------------------------------------------

// ResolvedWithScanProto

// optional .zetasql.ResolvedScanProto parent = 1;
inline bool ResolvedWithScanProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedWithScanProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedWithScanProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedWithScanProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedScanProto& ResolvedWithScanProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedScanProto& ResolvedWithScanProto::parent() const {
  const ::zetasql::ResolvedScanProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedWithScanProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedScanProto*>(
      &::zetasql::_ResolvedScanProto_default_instance_);
}
inline ::zetasql::ResolvedScanProto* ResolvedWithScanProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedWithScanProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedScanProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedScanProto* ResolvedWithScanProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedScanProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedWithScanProto.parent)
  return parent_;
}
inline void ResolvedWithScanProto::set_allocated_parent(::zetasql::ResolvedScanProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedWithScanProto.parent)
}

// repeated .zetasql.ResolvedWithEntryProto with_entry_list = 2;
inline int ResolvedWithScanProto::with_entry_list_size() const {
  return with_entry_list_.size();
}
inline void ResolvedWithScanProto::clear_with_entry_list() {
  with_entry_list_.Clear();
}
inline ::zetasql::ResolvedWithEntryProto* ResolvedWithScanProto::mutable_with_entry_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedWithScanProto.with_entry_list)
  return with_entry_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedWithEntryProto >*
ResolvedWithScanProto::mutable_with_entry_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedWithScanProto.with_entry_list)
  return &with_entry_list_;
}
inline const ::zetasql::ResolvedWithEntryProto& ResolvedWithScanProto::with_entry_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedWithScanProto.with_entry_list)
  return with_entry_list_.Get(index);
}
inline ::zetasql::ResolvedWithEntryProto* ResolvedWithScanProto::add_with_entry_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedWithScanProto.with_entry_list)
  return with_entry_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedWithEntryProto >&
ResolvedWithScanProto::with_entry_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedWithScanProto.with_entry_list)
  return with_entry_list_;
}

// optional .zetasql.AnyResolvedScanProto query = 3;
inline bool ResolvedWithScanProto::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedWithScanProto::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedWithScanProto::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedWithScanProto::clear_query() {
  if (query_ != NULL) query_->Clear();
  clear_has_query();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedWithScanProto::_internal_query() const {
  return *query_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedWithScanProto::query() const {
  const ::zetasql::AnyResolvedScanProto* p = query_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedWithScanProto.query)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedWithScanProto::release_query() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedWithScanProto.query)
  clear_has_query();
  ::zetasql::AnyResolvedScanProto* temp = query_;
  query_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedWithScanProto::mutable_query() {
  set_has_query();
  if (query_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    query_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedWithScanProto.query)
  return query_;
}
inline void ResolvedWithScanProto::set_allocated_query(::zetasql::AnyResolvedScanProto* query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete query_;
  }
  if (query) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    set_has_query();
  } else {
    clear_has_query();
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedWithScanProto.query)
}

// optional bool recursive = 4;
inline bool ResolvedWithScanProto::has_recursive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedWithScanProto::set_has_recursive() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedWithScanProto::clear_has_recursive() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedWithScanProto::clear_recursive() {
  recursive_ = false;
  clear_has_recursive();
}
inline bool ResolvedWithScanProto::recursive() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedWithScanProto.recursive)
  return recursive_;
}
inline void ResolvedWithScanProto::set_recursive(bool value) {
  set_has_recursive();
  recursive_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedWithScanProto.recursive)
}

// -------------------------------------------------------------------

// ResolvedWithEntryProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedWithEntryProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedWithEntryProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedWithEntryProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedWithEntryProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedWithEntryProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedWithEntryProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedWithEntryProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedWithEntryProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedWithEntryProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedWithEntryProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedWithEntryProto.parent)
  return parent_;
}
inline void ResolvedWithEntryProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedWithEntryProto.parent)
}

// optional string with_query_name = 2;
inline bool ResolvedWithEntryProto::has_with_query_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedWithEntryProto::set_has_with_query_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedWithEntryProto::clear_has_with_query_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedWithEntryProto::clear_with_query_name() {
  with_query_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_with_query_name();
}
inline const ::std::string& ResolvedWithEntryProto::with_query_name() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedWithEntryProto.with_query_name)
  return with_query_name_.GetNoArena();
}
inline void ResolvedWithEntryProto::set_with_query_name(const ::std::string& value) {
  set_has_with_query_name();
  with_query_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedWithEntryProto.with_query_name)
}
#if LANG_CXX11
inline void ResolvedWithEntryProto::set_with_query_name(::std::string&& value) {
  set_has_with_query_name();
  with_query_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedWithEntryProto.with_query_name)
}
#endif
inline void ResolvedWithEntryProto::set_with_query_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_with_query_name();
  with_query_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedWithEntryProto.with_query_name)
}
inline void ResolvedWithEntryProto::set_with_query_name(const char* value, size_t size) {
  set_has_with_query_name();
  with_query_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedWithEntryProto.with_query_name)
}
inline ::std::string* ResolvedWithEntryProto::mutable_with_query_name() {
  set_has_with_query_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedWithEntryProto.with_query_name)
  return with_query_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedWithEntryProto::release_with_query_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedWithEntryProto.with_query_name)
  if (!has_with_query_name()) {
    return NULL;
  }
  clear_has_with_query_name();
  return with_query_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedWithEntryProto::set_allocated_with_query_name(::std::string* with_query_name) {
  if (with_query_name != NULL) {
    set_has_with_query_name();
  } else {
    clear_has_with_query_name();
  }
  with_query_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), with_query_name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedWithEntryProto.with_query_name)
}

// optional .zetasql.AnyResolvedScanProto with_subquery = 3;
inline bool ResolvedWithEntryProto::has_with_subquery() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedWithEntryProto::set_has_with_subquery() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedWithEntryProto::clear_has_with_subquery() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedWithEntryProto::clear_with_subquery() {
  if (with_subquery_ != NULL) with_subquery_->Clear();
  clear_has_with_subquery();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedWithEntryProto::_internal_with_subquery() const {
  return *with_subquery_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedWithEntryProto::with_subquery() const {
  const ::zetasql::AnyResolvedScanProto* p = with_subquery_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedWithEntryProto.with_subquery)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedWithEntryProto::release_with_subquery() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedWithEntryProto.with_subquery)
  clear_has_with_subquery();
  ::zetasql::AnyResolvedScanProto* temp = with_subquery_;
  with_subquery_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedWithEntryProto::mutable_with_subquery() {
  set_has_with_subquery();
  if (with_subquery_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    with_subquery_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedWithEntryProto.with_subquery)
  return with_subquery_;
}
inline void ResolvedWithEntryProto::set_allocated_with_subquery(::zetasql::AnyResolvedScanProto* with_subquery) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete with_subquery_;
  }
  if (with_subquery) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      with_subquery = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, with_subquery, submessage_arena);
    }
    set_has_with_subquery();
  } else {
    clear_has_with_subquery();
  }
  with_subquery_ = with_subquery;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedWithEntryProto.with_subquery)
}

// -------------------------------------------------------------------

// ResolvedOptionProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedOptionProto::has_parent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedOptionProto::set_has_parent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedOptionProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedOptionProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedOptionProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedOptionProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedOptionProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedOptionProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedOptionProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedOptionProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedOptionProto.parent)
  return parent_;
}
inline void ResolvedOptionProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedOptionProto.parent)
}

// optional string qualifier = 2;
inline bool ResolvedOptionProto::has_qualifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedOptionProto::set_has_qualifier() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedOptionProto::clear_has_qualifier() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedOptionProto::clear_qualifier() {
  qualifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qualifier();
}
inline const ::std::string& ResolvedOptionProto::qualifier() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedOptionProto.qualifier)
  return qualifier_.GetNoArena();
}
inline void ResolvedOptionProto::set_qualifier(const ::std::string& value) {
  set_has_qualifier();
  qualifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedOptionProto.qualifier)
}
#if LANG_CXX11
inline void ResolvedOptionProto::set_qualifier(::std::string&& value) {
  set_has_qualifier();
  qualifier_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedOptionProto.qualifier)
}
#endif
inline void ResolvedOptionProto::set_qualifier(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qualifier();
  qualifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedOptionProto.qualifier)
}
inline void ResolvedOptionProto::set_qualifier(const char* value, size_t size) {
  set_has_qualifier();
  qualifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedOptionProto.qualifier)
}
inline ::std::string* ResolvedOptionProto::mutable_qualifier() {
  set_has_qualifier();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedOptionProto.qualifier)
  return qualifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedOptionProto::release_qualifier() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedOptionProto.qualifier)
  if (!has_qualifier()) {
    return NULL;
  }
  clear_has_qualifier();
  return qualifier_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedOptionProto::set_allocated_qualifier(::std::string* qualifier) {
  if (qualifier != NULL) {
    set_has_qualifier();
  } else {
    clear_has_qualifier();
  }
  qualifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qualifier);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedOptionProto.qualifier)
}

// optional string name = 3;
inline bool ResolvedOptionProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedOptionProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedOptionProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedOptionProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ResolvedOptionProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedOptionProto.name)
  return name_.GetNoArena();
}
inline void ResolvedOptionProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedOptionProto.name)
}
#if LANG_CXX11
inline void ResolvedOptionProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedOptionProto.name)
}
#endif
inline void ResolvedOptionProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedOptionProto.name)
}
inline void ResolvedOptionProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedOptionProto.name)
}
inline ::std::string* ResolvedOptionProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedOptionProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedOptionProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedOptionProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedOptionProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedOptionProto.name)
}

// optional .zetasql.AnyResolvedExprProto value = 4;
inline bool ResolvedOptionProto::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedOptionProto::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedOptionProto::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedOptionProto::clear_value() {
  if (value_ != NULL) value_->Clear();
  clear_has_value();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedOptionProto::_internal_value() const {
  return *value_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedOptionProto::value() const {
  const ::zetasql::AnyResolvedExprProto* p = value_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedOptionProto.value)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedOptionProto::release_value() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedOptionProto.value)
  clear_has_value();
  ::zetasql::AnyResolvedExprProto* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedOptionProto::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedOptionProto.value)
  return value_;
}
inline void ResolvedOptionProto::set_allocated_value(::zetasql::AnyResolvedExprProto* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    set_has_value();
  } else {
    clear_has_value();
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedOptionProto.value)
}

// -------------------------------------------------------------------

// ResolvedWindowPartitioningProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedWindowPartitioningProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedWindowPartitioningProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedWindowPartitioningProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedWindowPartitioningProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedWindowPartitioningProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedWindowPartitioningProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedWindowPartitioningProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedWindowPartitioningProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedWindowPartitioningProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedWindowPartitioningProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedWindowPartitioningProto.parent)
  return parent_;
}
inline void ResolvedWindowPartitioningProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedWindowPartitioningProto.parent)
}

// repeated .zetasql.ResolvedColumnRefProto partition_by_list = 2;
inline int ResolvedWindowPartitioningProto::partition_by_list_size() const {
  return partition_by_list_.size();
}
inline void ResolvedWindowPartitioningProto::clear_partition_by_list() {
  partition_by_list_.Clear();
}
inline ::zetasql::ResolvedColumnRefProto* ResolvedWindowPartitioningProto::mutable_partition_by_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedWindowPartitioningProto.partition_by_list)
  return partition_by_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >*
ResolvedWindowPartitioningProto::mutable_partition_by_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedWindowPartitioningProto.partition_by_list)
  return &partition_by_list_;
}
inline const ::zetasql::ResolvedColumnRefProto& ResolvedWindowPartitioningProto::partition_by_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedWindowPartitioningProto.partition_by_list)
  return partition_by_list_.Get(index);
}
inline ::zetasql::ResolvedColumnRefProto* ResolvedWindowPartitioningProto::add_partition_by_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedWindowPartitioningProto.partition_by_list)
  return partition_by_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >&
ResolvedWindowPartitioningProto::partition_by_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedWindowPartitioningProto.partition_by_list)
  return partition_by_list_;
}

// repeated .zetasql.ResolvedOptionProto hint_list = 3;
inline int ResolvedWindowPartitioningProto::hint_list_size() const {
  return hint_list_.size();
}
inline void ResolvedWindowPartitioningProto::clear_hint_list() {
  hint_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedWindowPartitioningProto::mutable_hint_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedWindowPartitioningProto.hint_list)
  return hint_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedWindowPartitioningProto::mutable_hint_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedWindowPartitioningProto.hint_list)
  return &hint_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedWindowPartitioningProto::hint_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedWindowPartitioningProto.hint_list)
  return hint_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedWindowPartitioningProto::add_hint_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedWindowPartitioningProto.hint_list)
  return hint_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedWindowPartitioningProto::hint_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedWindowPartitioningProto.hint_list)
  return hint_list_;
}

// -------------------------------------------------------------------

// ResolvedWindowOrderingProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedWindowOrderingProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedWindowOrderingProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedWindowOrderingProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedWindowOrderingProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedWindowOrderingProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedWindowOrderingProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedWindowOrderingProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedWindowOrderingProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedWindowOrderingProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedWindowOrderingProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedWindowOrderingProto.parent)
  return parent_;
}
inline void ResolvedWindowOrderingProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedWindowOrderingProto.parent)
}

// repeated .zetasql.ResolvedOrderByItemProto order_by_item_list = 2;
inline int ResolvedWindowOrderingProto::order_by_item_list_size() const {
  return order_by_item_list_.size();
}
inline void ResolvedWindowOrderingProto::clear_order_by_item_list() {
  order_by_item_list_.Clear();
}
inline ::zetasql::ResolvedOrderByItemProto* ResolvedWindowOrderingProto::mutable_order_by_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedWindowOrderingProto.order_by_item_list)
  return order_by_item_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOrderByItemProto >*
ResolvedWindowOrderingProto::mutable_order_by_item_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedWindowOrderingProto.order_by_item_list)
  return &order_by_item_list_;
}
inline const ::zetasql::ResolvedOrderByItemProto& ResolvedWindowOrderingProto::order_by_item_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedWindowOrderingProto.order_by_item_list)
  return order_by_item_list_.Get(index);
}
inline ::zetasql::ResolvedOrderByItemProto* ResolvedWindowOrderingProto::add_order_by_item_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedWindowOrderingProto.order_by_item_list)
  return order_by_item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOrderByItemProto >&
ResolvedWindowOrderingProto::order_by_item_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedWindowOrderingProto.order_by_item_list)
  return order_by_item_list_;
}

// repeated .zetasql.ResolvedOptionProto hint_list = 3;
inline int ResolvedWindowOrderingProto::hint_list_size() const {
  return hint_list_.size();
}
inline void ResolvedWindowOrderingProto::clear_hint_list() {
  hint_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedWindowOrderingProto::mutable_hint_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedWindowOrderingProto.hint_list)
  return hint_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedWindowOrderingProto::mutable_hint_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedWindowOrderingProto.hint_list)
  return &hint_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedWindowOrderingProto::hint_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedWindowOrderingProto.hint_list)
  return hint_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedWindowOrderingProto::add_hint_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedWindowOrderingProto.hint_list)
  return hint_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedWindowOrderingProto::hint_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedWindowOrderingProto.hint_list)
  return hint_list_;
}

// -------------------------------------------------------------------

// ResolvedWindowFrameProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedWindowFrameProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedWindowFrameProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedWindowFrameProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedWindowFrameProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedWindowFrameProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedWindowFrameProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedWindowFrameProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedWindowFrameProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedWindowFrameProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedWindowFrameProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedWindowFrameProto.parent)
  return parent_;
}
inline void ResolvedWindowFrameProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedWindowFrameProto.parent)
}

// optional .zetasql.ResolvedWindowFrameEnums.FrameUnit frame_unit = 2;
inline bool ResolvedWindowFrameProto::has_frame_unit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedWindowFrameProto::set_has_frame_unit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedWindowFrameProto::clear_has_frame_unit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedWindowFrameProto::clear_frame_unit() {
  frame_unit_ = 0;
  clear_has_frame_unit();
}
inline ::zetasql::ResolvedWindowFrameEnums_FrameUnit ResolvedWindowFrameProto::frame_unit() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedWindowFrameProto.frame_unit)
  return static_cast< ::zetasql::ResolvedWindowFrameEnums_FrameUnit >(frame_unit_);
}
inline void ResolvedWindowFrameProto::set_frame_unit(::zetasql::ResolvedWindowFrameEnums_FrameUnit value) {
  assert(::zetasql::ResolvedWindowFrameEnums_FrameUnit_IsValid(value));
  set_has_frame_unit();
  frame_unit_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedWindowFrameProto.frame_unit)
}

// optional .zetasql.ResolvedWindowFrameExprProto start_expr = 3;
inline bool ResolvedWindowFrameProto::has_start_expr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedWindowFrameProto::set_has_start_expr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedWindowFrameProto::clear_has_start_expr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedWindowFrameProto::clear_start_expr() {
  if (start_expr_ != NULL) start_expr_->Clear();
  clear_has_start_expr();
}
inline const ::zetasql::ResolvedWindowFrameExprProto& ResolvedWindowFrameProto::_internal_start_expr() const {
  return *start_expr_;
}
inline const ::zetasql::ResolvedWindowFrameExprProto& ResolvedWindowFrameProto::start_expr() const {
  const ::zetasql::ResolvedWindowFrameExprProto* p = start_expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedWindowFrameProto.start_expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedWindowFrameExprProto*>(
      &::zetasql::_ResolvedWindowFrameExprProto_default_instance_);
}
inline ::zetasql::ResolvedWindowFrameExprProto* ResolvedWindowFrameProto::release_start_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedWindowFrameProto.start_expr)
  clear_has_start_expr();
  ::zetasql::ResolvedWindowFrameExprProto* temp = start_expr_;
  start_expr_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedWindowFrameExprProto* ResolvedWindowFrameProto::mutable_start_expr() {
  set_has_start_expr();
  if (start_expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedWindowFrameExprProto>(GetArenaNoVirtual());
    start_expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedWindowFrameProto.start_expr)
  return start_expr_;
}
inline void ResolvedWindowFrameProto::set_allocated_start_expr(::zetasql::ResolvedWindowFrameExprProto* start_expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete start_expr_;
  }
  if (start_expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      start_expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_expr, submessage_arena);
    }
    set_has_start_expr();
  } else {
    clear_has_start_expr();
  }
  start_expr_ = start_expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedWindowFrameProto.start_expr)
}

// optional .zetasql.ResolvedWindowFrameExprProto end_expr = 4;
inline bool ResolvedWindowFrameProto::has_end_expr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedWindowFrameProto::set_has_end_expr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedWindowFrameProto::clear_has_end_expr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedWindowFrameProto::clear_end_expr() {
  if (end_expr_ != NULL) end_expr_->Clear();
  clear_has_end_expr();
}
inline const ::zetasql::ResolvedWindowFrameExprProto& ResolvedWindowFrameProto::_internal_end_expr() const {
  return *end_expr_;
}
inline const ::zetasql::ResolvedWindowFrameExprProto& ResolvedWindowFrameProto::end_expr() const {
  const ::zetasql::ResolvedWindowFrameExprProto* p = end_expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedWindowFrameProto.end_expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedWindowFrameExprProto*>(
      &::zetasql::_ResolvedWindowFrameExprProto_default_instance_);
}
inline ::zetasql::ResolvedWindowFrameExprProto* ResolvedWindowFrameProto::release_end_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedWindowFrameProto.end_expr)
  clear_has_end_expr();
  ::zetasql::ResolvedWindowFrameExprProto* temp = end_expr_;
  end_expr_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedWindowFrameExprProto* ResolvedWindowFrameProto::mutable_end_expr() {
  set_has_end_expr();
  if (end_expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedWindowFrameExprProto>(GetArenaNoVirtual());
    end_expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedWindowFrameProto.end_expr)
  return end_expr_;
}
inline void ResolvedWindowFrameProto::set_allocated_end_expr(::zetasql::ResolvedWindowFrameExprProto* end_expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete end_expr_;
  }
  if (end_expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      end_expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_expr, submessage_arena);
    }
    set_has_end_expr();
  } else {
    clear_has_end_expr();
  }
  end_expr_ = end_expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedWindowFrameProto.end_expr)
}

// -------------------------------------------------------------------

// ResolvedAnalyticFunctionGroupProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedAnalyticFunctionGroupProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAnalyticFunctionGroupProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAnalyticFunctionGroupProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAnalyticFunctionGroupProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedAnalyticFunctionGroupProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedAnalyticFunctionGroupProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAnalyticFunctionGroupProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedAnalyticFunctionGroupProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAnalyticFunctionGroupProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedAnalyticFunctionGroupProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAnalyticFunctionGroupProto.parent)
  return parent_;
}
inline void ResolvedAnalyticFunctionGroupProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAnalyticFunctionGroupProto.parent)
}

// optional .zetasql.ResolvedWindowPartitioningProto partition_by = 2;
inline bool ResolvedAnalyticFunctionGroupProto::has_partition_by() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedAnalyticFunctionGroupProto::set_has_partition_by() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedAnalyticFunctionGroupProto::clear_has_partition_by() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedAnalyticFunctionGroupProto::clear_partition_by() {
  if (partition_by_ != NULL) partition_by_->Clear();
  clear_has_partition_by();
}
inline const ::zetasql::ResolvedWindowPartitioningProto& ResolvedAnalyticFunctionGroupProto::_internal_partition_by() const {
  return *partition_by_;
}
inline const ::zetasql::ResolvedWindowPartitioningProto& ResolvedAnalyticFunctionGroupProto::partition_by() const {
  const ::zetasql::ResolvedWindowPartitioningProto* p = partition_by_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAnalyticFunctionGroupProto.partition_by)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedWindowPartitioningProto*>(
      &::zetasql::_ResolvedWindowPartitioningProto_default_instance_);
}
inline ::zetasql::ResolvedWindowPartitioningProto* ResolvedAnalyticFunctionGroupProto::release_partition_by() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAnalyticFunctionGroupProto.partition_by)
  clear_has_partition_by();
  ::zetasql::ResolvedWindowPartitioningProto* temp = partition_by_;
  partition_by_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedWindowPartitioningProto* ResolvedAnalyticFunctionGroupProto::mutable_partition_by() {
  set_has_partition_by();
  if (partition_by_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedWindowPartitioningProto>(GetArenaNoVirtual());
    partition_by_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAnalyticFunctionGroupProto.partition_by)
  return partition_by_;
}
inline void ResolvedAnalyticFunctionGroupProto::set_allocated_partition_by(::zetasql::ResolvedWindowPartitioningProto* partition_by) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete partition_by_;
  }
  if (partition_by) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      partition_by = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, partition_by, submessage_arena);
    }
    set_has_partition_by();
  } else {
    clear_has_partition_by();
  }
  partition_by_ = partition_by;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAnalyticFunctionGroupProto.partition_by)
}

// optional .zetasql.ResolvedWindowOrderingProto order_by = 3;
inline bool ResolvedAnalyticFunctionGroupProto::has_order_by() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedAnalyticFunctionGroupProto::set_has_order_by() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedAnalyticFunctionGroupProto::clear_has_order_by() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedAnalyticFunctionGroupProto::clear_order_by() {
  if (order_by_ != NULL) order_by_->Clear();
  clear_has_order_by();
}
inline const ::zetasql::ResolvedWindowOrderingProto& ResolvedAnalyticFunctionGroupProto::_internal_order_by() const {
  return *order_by_;
}
inline const ::zetasql::ResolvedWindowOrderingProto& ResolvedAnalyticFunctionGroupProto::order_by() const {
  const ::zetasql::ResolvedWindowOrderingProto* p = order_by_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAnalyticFunctionGroupProto.order_by)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedWindowOrderingProto*>(
      &::zetasql::_ResolvedWindowOrderingProto_default_instance_);
}
inline ::zetasql::ResolvedWindowOrderingProto* ResolvedAnalyticFunctionGroupProto::release_order_by() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAnalyticFunctionGroupProto.order_by)
  clear_has_order_by();
  ::zetasql::ResolvedWindowOrderingProto* temp = order_by_;
  order_by_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedWindowOrderingProto* ResolvedAnalyticFunctionGroupProto::mutable_order_by() {
  set_has_order_by();
  if (order_by_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedWindowOrderingProto>(GetArenaNoVirtual());
    order_by_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAnalyticFunctionGroupProto.order_by)
  return order_by_;
}
inline void ResolvedAnalyticFunctionGroupProto::set_allocated_order_by(::zetasql::ResolvedWindowOrderingProto* order_by) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete order_by_;
  }
  if (order_by) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      order_by = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, order_by, submessage_arena);
    }
    set_has_order_by();
  } else {
    clear_has_order_by();
  }
  order_by_ = order_by;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAnalyticFunctionGroupProto.order_by)
}

// repeated .zetasql.ResolvedComputedColumnProto analytic_function_list = 4;
inline int ResolvedAnalyticFunctionGroupProto::analytic_function_list_size() const {
  return analytic_function_list_.size();
}
inline void ResolvedAnalyticFunctionGroupProto::clear_analytic_function_list() {
  analytic_function_list_.Clear();
}
inline ::zetasql::ResolvedComputedColumnProto* ResolvedAnalyticFunctionGroupProto::mutable_analytic_function_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAnalyticFunctionGroupProto.analytic_function_list)
  return analytic_function_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >*
ResolvedAnalyticFunctionGroupProto::mutable_analytic_function_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedAnalyticFunctionGroupProto.analytic_function_list)
  return &analytic_function_list_;
}
inline const ::zetasql::ResolvedComputedColumnProto& ResolvedAnalyticFunctionGroupProto::analytic_function_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAnalyticFunctionGroupProto.analytic_function_list)
  return analytic_function_list_.Get(index);
}
inline ::zetasql::ResolvedComputedColumnProto* ResolvedAnalyticFunctionGroupProto::add_analytic_function_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAnalyticFunctionGroupProto.analytic_function_list)
  return analytic_function_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >&
ResolvedAnalyticFunctionGroupProto::analytic_function_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedAnalyticFunctionGroupProto.analytic_function_list)
  return analytic_function_list_;
}

// -------------------------------------------------------------------

// ResolvedWindowFrameExprProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedWindowFrameExprProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedWindowFrameExprProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedWindowFrameExprProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedWindowFrameExprProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedWindowFrameExprProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedWindowFrameExprProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedWindowFrameExprProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedWindowFrameExprProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedWindowFrameExprProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedWindowFrameExprProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedWindowFrameExprProto.parent)
  return parent_;
}
inline void ResolvedWindowFrameExprProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedWindowFrameExprProto.parent)
}

// optional .zetasql.ResolvedWindowFrameExprEnums.BoundaryType boundary_type = 2;
inline bool ResolvedWindowFrameExprProto::has_boundary_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedWindowFrameExprProto::set_has_boundary_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedWindowFrameExprProto::clear_has_boundary_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedWindowFrameExprProto::clear_boundary_type() {
  boundary_type_ = 0;
  clear_has_boundary_type();
}
inline ::zetasql::ResolvedWindowFrameExprEnums_BoundaryType ResolvedWindowFrameExprProto::boundary_type() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedWindowFrameExprProto.boundary_type)
  return static_cast< ::zetasql::ResolvedWindowFrameExprEnums_BoundaryType >(boundary_type_);
}
inline void ResolvedWindowFrameExprProto::set_boundary_type(::zetasql::ResolvedWindowFrameExprEnums_BoundaryType value) {
  assert(::zetasql::ResolvedWindowFrameExprEnums_BoundaryType_IsValid(value));
  set_has_boundary_type();
  boundary_type_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedWindowFrameExprProto.boundary_type)
}

// optional .zetasql.AnyResolvedExprProto expression = 3;
inline bool ResolvedWindowFrameExprProto::has_expression() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedWindowFrameExprProto::set_has_expression() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedWindowFrameExprProto::clear_has_expression() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedWindowFrameExprProto::clear_expression() {
  if (expression_ != NULL) expression_->Clear();
  clear_has_expression();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedWindowFrameExprProto::_internal_expression() const {
  return *expression_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedWindowFrameExprProto::expression() const {
  const ::zetasql::AnyResolvedExprProto* p = expression_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedWindowFrameExprProto.expression)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedWindowFrameExprProto::release_expression() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedWindowFrameExprProto.expression)
  clear_has_expression();
  ::zetasql::AnyResolvedExprProto* temp = expression_;
  expression_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedWindowFrameExprProto::mutable_expression() {
  set_has_expression();
  if (expression_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    expression_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedWindowFrameExprProto.expression)
  return expression_;
}
inline void ResolvedWindowFrameExprProto::set_allocated_expression(::zetasql::AnyResolvedExprProto* expression) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete expression_;
  }
  if (expression) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expression = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    set_has_expression();
  } else {
    clear_has_expression();
  }
  expression_ = expression;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedWindowFrameExprProto.expression)
}

// -------------------------------------------------------------------

// ResolvedDMLValueProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedDMLValueProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedDMLValueProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedDMLValueProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedDMLValueProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedDMLValueProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedDMLValueProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDMLValueProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedDMLValueProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDMLValueProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedDMLValueProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDMLValueProto.parent)
  return parent_;
}
inline void ResolvedDMLValueProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDMLValueProto.parent)
}

// optional .zetasql.AnyResolvedExprProto value = 2;
inline bool ResolvedDMLValueProto::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedDMLValueProto::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedDMLValueProto::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedDMLValueProto::clear_value() {
  if (value_ != NULL) value_->Clear();
  clear_has_value();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedDMLValueProto::_internal_value() const {
  return *value_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedDMLValueProto::value() const {
  const ::zetasql::AnyResolvedExprProto* p = value_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDMLValueProto.value)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedDMLValueProto::release_value() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDMLValueProto.value)
  clear_has_value();
  ::zetasql::AnyResolvedExprProto* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedDMLValueProto::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDMLValueProto.value)
  return value_;
}
inline void ResolvedDMLValueProto::set_allocated_value(::zetasql::AnyResolvedExprProto* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    set_has_value();
  } else {
    clear_has_value();
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDMLValueProto.value)
}

// -------------------------------------------------------------------

// ResolvedDMLDefaultProto

// optional .zetasql.ResolvedExprProto parent = 1;
inline bool ResolvedDMLDefaultProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedDMLDefaultProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedDMLDefaultProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedDMLDefaultProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedExprProto& ResolvedDMLDefaultProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedExprProto& ResolvedDMLDefaultProto::parent() const {
  const ::zetasql::ResolvedExprProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDMLDefaultProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedExprProto*>(
      &::zetasql::_ResolvedExprProto_default_instance_);
}
inline ::zetasql::ResolvedExprProto* ResolvedDMLDefaultProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDMLDefaultProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedExprProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedExprProto* ResolvedDMLDefaultProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedExprProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDMLDefaultProto.parent)
  return parent_;
}
inline void ResolvedDMLDefaultProto::set_allocated_parent(::zetasql::ResolvedExprProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDMLDefaultProto.parent)
}

// -------------------------------------------------------------------

// ResolvedAssertStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedAssertStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedAssertStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedAssertStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedAssertStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedAssertStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedAssertStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAssertStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedAssertStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAssertStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedAssertStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAssertStmtProto.parent)
  return parent_;
}
inline void ResolvedAssertStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAssertStmtProto.parent)
}

// optional .zetasql.AnyResolvedExprProto expression = 2;
inline bool ResolvedAssertStmtProto::has_expression() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedAssertStmtProto::set_has_expression() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedAssertStmtProto::clear_has_expression() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedAssertStmtProto::clear_expression() {
  if (expression_ != NULL) expression_->Clear();
  clear_has_expression();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedAssertStmtProto::_internal_expression() const {
  return *expression_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedAssertStmtProto::expression() const {
  const ::zetasql::AnyResolvedExprProto* p = expression_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAssertStmtProto.expression)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedAssertStmtProto::release_expression() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAssertStmtProto.expression)
  clear_has_expression();
  ::zetasql::AnyResolvedExprProto* temp = expression_;
  expression_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedAssertStmtProto::mutable_expression() {
  set_has_expression();
  if (expression_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    expression_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAssertStmtProto.expression)
  return expression_;
}
inline void ResolvedAssertStmtProto::set_allocated_expression(::zetasql::AnyResolvedExprProto* expression) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete expression_;
  }
  if (expression) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expression = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    set_has_expression();
  } else {
    clear_has_expression();
  }
  expression_ = expression;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAssertStmtProto.expression)
}

// optional string description = 3;
inline bool ResolvedAssertStmtProto::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAssertStmtProto::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAssertStmtProto::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAssertStmtProto::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& ResolvedAssertStmtProto::description() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAssertStmtProto.description)
  return description_.GetNoArena();
}
inline void ResolvedAssertStmtProto::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedAssertStmtProto.description)
}
#if LANG_CXX11
inline void ResolvedAssertStmtProto::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedAssertStmtProto.description)
}
#endif
inline void ResolvedAssertStmtProto::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedAssertStmtProto.description)
}
inline void ResolvedAssertStmtProto::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedAssertStmtProto.description)
}
inline ::std::string* ResolvedAssertStmtProto::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAssertStmtProto.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedAssertStmtProto::release_description() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAssertStmtProto.description)
  if (!has_description()) {
    return NULL;
  }
  clear_has_description();
  return description_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedAssertStmtProto::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAssertStmtProto.description)
}

// -------------------------------------------------------------------

// ResolvedAssertRowsModifiedProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedAssertRowsModifiedProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAssertRowsModifiedProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAssertRowsModifiedProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAssertRowsModifiedProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedAssertRowsModifiedProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedAssertRowsModifiedProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAssertRowsModifiedProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedAssertRowsModifiedProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAssertRowsModifiedProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedAssertRowsModifiedProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAssertRowsModifiedProto.parent)
  return parent_;
}
inline void ResolvedAssertRowsModifiedProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAssertRowsModifiedProto.parent)
}

// optional .zetasql.AnyResolvedExprProto rows = 2;
inline bool ResolvedAssertRowsModifiedProto::has_rows() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedAssertRowsModifiedProto::set_has_rows() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedAssertRowsModifiedProto::clear_has_rows() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedAssertRowsModifiedProto::clear_rows() {
  if (rows_ != NULL) rows_->Clear();
  clear_has_rows();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedAssertRowsModifiedProto::_internal_rows() const {
  return *rows_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedAssertRowsModifiedProto::rows() const {
  const ::zetasql::AnyResolvedExprProto* p = rows_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAssertRowsModifiedProto.rows)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedAssertRowsModifiedProto::release_rows() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAssertRowsModifiedProto.rows)
  clear_has_rows();
  ::zetasql::AnyResolvedExprProto* temp = rows_;
  rows_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedAssertRowsModifiedProto::mutable_rows() {
  set_has_rows();
  if (rows_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    rows_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAssertRowsModifiedProto.rows)
  return rows_;
}
inline void ResolvedAssertRowsModifiedProto::set_allocated_rows(::zetasql::AnyResolvedExprProto* rows) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rows_;
  }
  if (rows) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rows = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rows, submessage_arena);
    }
    set_has_rows();
  } else {
    clear_has_rows();
  }
  rows_ = rows;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAssertRowsModifiedProto.rows)
}

// -------------------------------------------------------------------

// ResolvedInsertRowProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedInsertRowProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedInsertRowProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedInsertRowProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedInsertRowProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedInsertRowProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedInsertRowProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedInsertRowProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedInsertRowProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedInsertRowProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedInsertRowProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedInsertRowProto.parent)
  return parent_;
}
inline void ResolvedInsertRowProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedInsertRowProto.parent)
}

// repeated .zetasql.ResolvedDMLValueProto value_list = 2;
inline int ResolvedInsertRowProto::value_list_size() const {
  return value_list_.size();
}
inline void ResolvedInsertRowProto::clear_value_list() {
  value_list_.Clear();
}
inline ::zetasql::ResolvedDMLValueProto* ResolvedInsertRowProto::mutable_value_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedInsertRowProto.value_list)
  return value_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedDMLValueProto >*
ResolvedInsertRowProto::mutable_value_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedInsertRowProto.value_list)
  return &value_list_;
}
inline const ::zetasql::ResolvedDMLValueProto& ResolvedInsertRowProto::value_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedInsertRowProto.value_list)
  return value_list_.Get(index);
}
inline ::zetasql::ResolvedDMLValueProto* ResolvedInsertRowProto::add_value_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedInsertRowProto.value_list)
  return value_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedDMLValueProto >&
ResolvedInsertRowProto::value_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedInsertRowProto.value_list)
  return value_list_;
}

// -------------------------------------------------------------------

// ResolvedInsertStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedInsertStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedInsertStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedInsertStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedInsertStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedInsertStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedInsertStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedInsertStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedInsertStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedInsertStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedInsertStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedInsertStmtProto.parent)
  return parent_;
}
inline void ResolvedInsertStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedInsertStmtProto.parent)
}

// optional .zetasql.ResolvedTableScanProto table_scan = 2;
inline bool ResolvedInsertStmtProto::has_table_scan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedInsertStmtProto::set_has_table_scan() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedInsertStmtProto::clear_has_table_scan() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedInsertStmtProto::clear_table_scan() {
  if (table_scan_ != NULL) table_scan_->Clear();
  clear_has_table_scan();
}
inline const ::zetasql::ResolvedTableScanProto& ResolvedInsertStmtProto::_internal_table_scan() const {
  return *table_scan_;
}
inline const ::zetasql::ResolvedTableScanProto& ResolvedInsertStmtProto::table_scan() const {
  const ::zetasql::ResolvedTableScanProto* p = table_scan_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedInsertStmtProto.table_scan)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedTableScanProto*>(
      &::zetasql::_ResolvedTableScanProto_default_instance_);
}
inline ::zetasql::ResolvedTableScanProto* ResolvedInsertStmtProto::release_table_scan() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedInsertStmtProto.table_scan)
  clear_has_table_scan();
  ::zetasql::ResolvedTableScanProto* temp = table_scan_;
  table_scan_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedTableScanProto* ResolvedInsertStmtProto::mutable_table_scan() {
  set_has_table_scan();
  if (table_scan_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedTableScanProto>(GetArenaNoVirtual());
    table_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedInsertStmtProto.table_scan)
  return table_scan_;
}
inline void ResolvedInsertStmtProto::set_allocated_table_scan(::zetasql::ResolvedTableScanProto* table_scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete table_scan_;
  }
  if (table_scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table_scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table_scan, submessage_arena);
    }
    set_has_table_scan();
  } else {
    clear_has_table_scan();
  }
  table_scan_ = table_scan;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedInsertStmtProto.table_scan)
}

// optional .zetasql.ResolvedInsertStmtEnums.InsertMode insert_mode = 3;
inline bool ResolvedInsertStmtProto::has_insert_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResolvedInsertStmtProto::set_has_insert_mode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResolvedInsertStmtProto::clear_has_insert_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ResolvedInsertStmtProto::clear_insert_mode() {
  insert_mode_ = 0;
  clear_has_insert_mode();
}
inline ::zetasql::ResolvedInsertStmtEnums_InsertMode ResolvedInsertStmtProto::insert_mode() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedInsertStmtProto.insert_mode)
  return static_cast< ::zetasql::ResolvedInsertStmtEnums_InsertMode >(insert_mode_);
}
inline void ResolvedInsertStmtProto::set_insert_mode(::zetasql::ResolvedInsertStmtEnums_InsertMode value) {
  assert(::zetasql::ResolvedInsertStmtEnums_InsertMode_IsValid(value));
  set_has_insert_mode();
  insert_mode_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedInsertStmtProto.insert_mode)
}

// optional .zetasql.ResolvedAssertRowsModifiedProto assert_rows_modified = 4;
inline bool ResolvedInsertStmtProto::has_assert_rows_modified() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedInsertStmtProto::set_has_assert_rows_modified() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedInsertStmtProto::clear_has_assert_rows_modified() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedInsertStmtProto::clear_assert_rows_modified() {
  if (assert_rows_modified_ != NULL) assert_rows_modified_->Clear();
  clear_has_assert_rows_modified();
}
inline const ::zetasql::ResolvedAssertRowsModifiedProto& ResolvedInsertStmtProto::_internal_assert_rows_modified() const {
  return *assert_rows_modified_;
}
inline const ::zetasql::ResolvedAssertRowsModifiedProto& ResolvedInsertStmtProto::assert_rows_modified() const {
  const ::zetasql::ResolvedAssertRowsModifiedProto* p = assert_rows_modified_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedInsertStmtProto.assert_rows_modified)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAssertRowsModifiedProto*>(
      &::zetasql::_ResolvedAssertRowsModifiedProto_default_instance_);
}
inline ::zetasql::ResolvedAssertRowsModifiedProto* ResolvedInsertStmtProto::release_assert_rows_modified() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedInsertStmtProto.assert_rows_modified)
  clear_has_assert_rows_modified();
  ::zetasql::ResolvedAssertRowsModifiedProto* temp = assert_rows_modified_;
  assert_rows_modified_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAssertRowsModifiedProto* ResolvedInsertStmtProto::mutable_assert_rows_modified() {
  set_has_assert_rows_modified();
  if (assert_rows_modified_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAssertRowsModifiedProto>(GetArenaNoVirtual());
    assert_rows_modified_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedInsertStmtProto.assert_rows_modified)
  return assert_rows_modified_;
}
inline void ResolvedInsertStmtProto::set_allocated_assert_rows_modified(::zetasql::ResolvedAssertRowsModifiedProto* assert_rows_modified) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete assert_rows_modified_;
  }
  if (assert_rows_modified) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      assert_rows_modified = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, assert_rows_modified, submessage_arena);
    }
    set_has_assert_rows_modified();
  } else {
    clear_has_assert_rows_modified();
  }
  assert_rows_modified_ = assert_rows_modified;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedInsertStmtProto.assert_rows_modified)
}

// optional .zetasql.ResolvedReturningClauseProto returning = 10;
inline bool ResolvedInsertStmtProto::has_returning() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResolvedInsertStmtProto::set_has_returning() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResolvedInsertStmtProto::clear_has_returning() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResolvedInsertStmtProto::clear_returning() {
  if (returning_ != NULL) returning_->Clear();
  clear_has_returning();
}
inline const ::zetasql::ResolvedReturningClauseProto& ResolvedInsertStmtProto::_internal_returning() const {
  return *returning_;
}
inline const ::zetasql::ResolvedReturningClauseProto& ResolvedInsertStmtProto::returning() const {
  const ::zetasql::ResolvedReturningClauseProto* p = returning_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedInsertStmtProto.returning)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedReturningClauseProto*>(
      &::zetasql::_ResolvedReturningClauseProto_default_instance_);
}
inline ::zetasql::ResolvedReturningClauseProto* ResolvedInsertStmtProto::release_returning() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedInsertStmtProto.returning)
  clear_has_returning();
  ::zetasql::ResolvedReturningClauseProto* temp = returning_;
  returning_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedReturningClauseProto* ResolvedInsertStmtProto::mutable_returning() {
  set_has_returning();
  if (returning_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedReturningClauseProto>(GetArenaNoVirtual());
    returning_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedInsertStmtProto.returning)
  return returning_;
}
inline void ResolvedInsertStmtProto::set_allocated_returning(::zetasql::ResolvedReturningClauseProto* returning) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete returning_;
  }
  if (returning) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      returning = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, returning, submessage_arena);
    }
    set_has_returning();
  } else {
    clear_has_returning();
  }
  returning_ = returning;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedInsertStmtProto.returning)
}

// repeated .zetasql.ResolvedColumnProto insert_column_list = 5;
inline int ResolvedInsertStmtProto::insert_column_list_size() const {
  return insert_column_list_.size();
}
inline ::zetasql::ResolvedColumnProto* ResolvedInsertStmtProto::mutable_insert_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedInsertStmtProto.insert_column_list)
  return insert_column_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >*
ResolvedInsertStmtProto::mutable_insert_column_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedInsertStmtProto.insert_column_list)
  return &insert_column_list_;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedInsertStmtProto::insert_column_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedInsertStmtProto.insert_column_list)
  return insert_column_list_.Get(index);
}
inline ::zetasql::ResolvedColumnProto* ResolvedInsertStmtProto::add_insert_column_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedInsertStmtProto.insert_column_list)
  return insert_column_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >&
ResolvedInsertStmtProto::insert_column_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedInsertStmtProto.insert_column_list)
  return insert_column_list_;
}

// repeated .zetasql.ResolvedColumnRefProto query_parameter_list = 9;
inline int ResolvedInsertStmtProto::query_parameter_list_size() const {
  return query_parameter_list_.size();
}
inline void ResolvedInsertStmtProto::clear_query_parameter_list() {
  query_parameter_list_.Clear();
}
inline ::zetasql::ResolvedColumnRefProto* ResolvedInsertStmtProto::mutable_query_parameter_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedInsertStmtProto.query_parameter_list)
  return query_parameter_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >*
ResolvedInsertStmtProto::mutable_query_parameter_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedInsertStmtProto.query_parameter_list)
  return &query_parameter_list_;
}
inline const ::zetasql::ResolvedColumnRefProto& ResolvedInsertStmtProto::query_parameter_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedInsertStmtProto.query_parameter_list)
  return query_parameter_list_.Get(index);
}
inline ::zetasql::ResolvedColumnRefProto* ResolvedInsertStmtProto::add_query_parameter_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedInsertStmtProto.query_parameter_list)
  return query_parameter_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >&
ResolvedInsertStmtProto::query_parameter_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedInsertStmtProto.query_parameter_list)
  return query_parameter_list_;
}

// optional .zetasql.AnyResolvedScanProto query = 6;
inline bool ResolvedInsertStmtProto::has_query() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedInsertStmtProto::set_has_query() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedInsertStmtProto::clear_has_query() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedInsertStmtProto::clear_query() {
  if (query_ != NULL) query_->Clear();
  clear_has_query();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedInsertStmtProto::_internal_query() const {
  return *query_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedInsertStmtProto::query() const {
  const ::zetasql::AnyResolvedScanProto* p = query_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedInsertStmtProto.query)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedInsertStmtProto::release_query() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedInsertStmtProto.query)
  clear_has_query();
  ::zetasql::AnyResolvedScanProto* temp = query_;
  query_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedInsertStmtProto::mutable_query() {
  set_has_query();
  if (query_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    query_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedInsertStmtProto.query)
  return query_;
}
inline void ResolvedInsertStmtProto::set_allocated_query(::zetasql::AnyResolvedScanProto* query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete query_;
  }
  if (query) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    set_has_query();
  } else {
    clear_has_query();
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedInsertStmtProto.query)
}

// repeated .zetasql.ResolvedColumnProto query_output_column_list = 8;
inline int ResolvedInsertStmtProto::query_output_column_list_size() const {
  return query_output_column_list_.size();
}
inline ::zetasql::ResolvedColumnProto* ResolvedInsertStmtProto::mutable_query_output_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedInsertStmtProto.query_output_column_list)
  return query_output_column_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >*
ResolvedInsertStmtProto::mutable_query_output_column_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedInsertStmtProto.query_output_column_list)
  return &query_output_column_list_;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedInsertStmtProto::query_output_column_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedInsertStmtProto.query_output_column_list)
  return query_output_column_list_.Get(index);
}
inline ::zetasql::ResolvedColumnProto* ResolvedInsertStmtProto::add_query_output_column_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedInsertStmtProto.query_output_column_list)
  return query_output_column_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >&
ResolvedInsertStmtProto::query_output_column_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedInsertStmtProto.query_output_column_list)
  return query_output_column_list_;
}

// repeated .zetasql.ResolvedInsertRowProto row_list = 7;
inline int ResolvedInsertStmtProto::row_list_size() const {
  return row_list_.size();
}
inline void ResolvedInsertStmtProto::clear_row_list() {
  row_list_.Clear();
}
inline ::zetasql::ResolvedInsertRowProto* ResolvedInsertStmtProto::mutable_row_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedInsertStmtProto.row_list)
  return row_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedInsertRowProto >*
ResolvedInsertStmtProto::mutable_row_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedInsertStmtProto.row_list)
  return &row_list_;
}
inline const ::zetasql::ResolvedInsertRowProto& ResolvedInsertStmtProto::row_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedInsertStmtProto.row_list)
  return row_list_.Get(index);
}
inline ::zetasql::ResolvedInsertRowProto* ResolvedInsertStmtProto::add_row_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedInsertStmtProto.row_list)
  return row_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedInsertRowProto >&
ResolvedInsertStmtProto::row_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedInsertStmtProto.row_list)
  return row_list_;
}

// -------------------------------------------------------------------

// ResolvedDeleteStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedDeleteStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedDeleteStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedDeleteStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedDeleteStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedDeleteStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedDeleteStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDeleteStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedDeleteStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDeleteStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedDeleteStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDeleteStmtProto.parent)
  return parent_;
}
inline void ResolvedDeleteStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDeleteStmtProto.parent)
}

// optional .zetasql.ResolvedTableScanProto table_scan = 2;
inline bool ResolvedDeleteStmtProto::has_table_scan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedDeleteStmtProto::set_has_table_scan() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedDeleteStmtProto::clear_has_table_scan() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedDeleteStmtProto::clear_table_scan() {
  if (table_scan_ != NULL) table_scan_->Clear();
  clear_has_table_scan();
}
inline const ::zetasql::ResolvedTableScanProto& ResolvedDeleteStmtProto::_internal_table_scan() const {
  return *table_scan_;
}
inline const ::zetasql::ResolvedTableScanProto& ResolvedDeleteStmtProto::table_scan() const {
  const ::zetasql::ResolvedTableScanProto* p = table_scan_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDeleteStmtProto.table_scan)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedTableScanProto*>(
      &::zetasql::_ResolvedTableScanProto_default_instance_);
}
inline ::zetasql::ResolvedTableScanProto* ResolvedDeleteStmtProto::release_table_scan() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDeleteStmtProto.table_scan)
  clear_has_table_scan();
  ::zetasql::ResolvedTableScanProto* temp = table_scan_;
  table_scan_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedTableScanProto* ResolvedDeleteStmtProto::mutable_table_scan() {
  set_has_table_scan();
  if (table_scan_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedTableScanProto>(GetArenaNoVirtual());
    table_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDeleteStmtProto.table_scan)
  return table_scan_;
}
inline void ResolvedDeleteStmtProto::set_allocated_table_scan(::zetasql::ResolvedTableScanProto* table_scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete table_scan_;
  }
  if (table_scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table_scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table_scan, submessage_arena);
    }
    set_has_table_scan();
  } else {
    clear_has_table_scan();
  }
  table_scan_ = table_scan;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDeleteStmtProto.table_scan)
}

// optional .zetasql.ResolvedAssertRowsModifiedProto assert_rows_modified = 3;
inline bool ResolvedDeleteStmtProto::has_assert_rows_modified() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedDeleteStmtProto::set_has_assert_rows_modified() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedDeleteStmtProto::clear_has_assert_rows_modified() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedDeleteStmtProto::clear_assert_rows_modified() {
  if (assert_rows_modified_ != NULL) assert_rows_modified_->Clear();
  clear_has_assert_rows_modified();
}
inline const ::zetasql::ResolvedAssertRowsModifiedProto& ResolvedDeleteStmtProto::_internal_assert_rows_modified() const {
  return *assert_rows_modified_;
}
inline const ::zetasql::ResolvedAssertRowsModifiedProto& ResolvedDeleteStmtProto::assert_rows_modified() const {
  const ::zetasql::ResolvedAssertRowsModifiedProto* p = assert_rows_modified_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDeleteStmtProto.assert_rows_modified)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAssertRowsModifiedProto*>(
      &::zetasql::_ResolvedAssertRowsModifiedProto_default_instance_);
}
inline ::zetasql::ResolvedAssertRowsModifiedProto* ResolvedDeleteStmtProto::release_assert_rows_modified() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDeleteStmtProto.assert_rows_modified)
  clear_has_assert_rows_modified();
  ::zetasql::ResolvedAssertRowsModifiedProto* temp = assert_rows_modified_;
  assert_rows_modified_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAssertRowsModifiedProto* ResolvedDeleteStmtProto::mutable_assert_rows_modified() {
  set_has_assert_rows_modified();
  if (assert_rows_modified_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAssertRowsModifiedProto>(GetArenaNoVirtual());
    assert_rows_modified_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDeleteStmtProto.assert_rows_modified)
  return assert_rows_modified_;
}
inline void ResolvedDeleteStmtProto::set_allocated_assert_rows_modified(::zetasql::ResolvedAssertRowsModifiedProto* assert_rows_modified) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete assert_rows_modified_;
  }
  if (assert_rows_modified) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      assert_rows_modified = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, assert_rows_modified, submessage_arena);
    }
    set_has_assert_rows_modified();
  } else {
    clear_has_assert_rows_modified();
  }
  assert_rows_modified_ = assert_rows_modified;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDeleteStmtProto.assert_rows_modified)
}

// optional .zetasql.ResolvedReturningClauseProto returning = 6;
inline bool ResolvedDeleteStmtProto::has_returning() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResolvedDeleteStmtProto::set_has_returning() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResolvedDeleteStmtProto::clear_has_returning() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ResolvedDeleteStmtProto::clear_returning() {
  if (returning_ != NULL) returning_->Clear();
  clear_has_returning();
}
inline const ::zetasql::ResolvedReturningClauseProto& ResolvedDeleteStmtProto::_internal_returning() const {
  return *returning_;
}
inline const ::zetasql::ResolvedReturningClauseProto& ResolvedDeleteStmtProto::returning() const {
  const ::zetasql::ResolvedReturningClauseProto* p = returning_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDeleteStmtProto.returning)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedReturningClauseProto*>(
      &::zetasql::_ResolvedReturningClauseProto_default_instance_);
}
inline ::zetasql::ResolvedReturningClauseProto* ResolvedDeleteStmtProto::release_returning() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDeleteStmtProto.returning)
  clear_has_returning();
  ::zetasql::ResolvedReturningClauseProto* temp = returning_;
  returning_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedReturningClauseProto* ResolvedDeleteStmtProto::mutable_returning() {
  set_has_returning();
  if (returning_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedReturningClauseProto>(GetArenaNoVirtual());
    returning_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDeleteStmtProto.returning)
  return returning_;
}
inline void ResolvedDeleteStmtProto::set_allocated_returning(::zetasql::ResolvedReturningClauseProto* returning) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete returning_;
  }
  if (returning) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      returning = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, returning, submessage_arena);
    }
    set_has_returning();
  } else {
    clear_has_returning();
  }
  returning_ = returning;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDeleteStmtProto.returning)
}

// optional .zetasql.ResolvedColumnHolderProto array_offset_column = 5;
inline bool ResolvedDeleteStmtProto::has_array_offset_column() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResolvedDeleteStmtProto::set_has_array_offset_column() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResolvedDeleteStmtProto::clear_has_array_offset_column() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResolvedDeleteStmtProto::clear_array_offset_column() {
  if (array_offset_column_ != NULL) array_offset_column_->Clear();
  clear_has_array_offset_column();
}
inline const ::zetasql::ResolvedColumnHolderProto& ResolvedDeleteStmtProto::_internal_array_offset_column() const {
  return *array_offset_column_;
}
inline const ::zetasql::ResolvedColumnHolderProto& ResolvedDeleteStmtProto::array_offset_column() const {
  const ::zetasql::ResolvedColumnHolderProto* p = array_offset_column_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDeleteStmtProto.array_offset_column)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedColumnHolderProto*>(
      &::zetasql::_ResolvedColumnHolderProto_default_instance_);
}
inline ::zetasql::ResolvedColumnHolderProto* ResolvedDeleteStmtProto::release_array_offset_column() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDeleteStmtProto.array_offset_column)
  clear_has_array_offset_column();
  ::zetasql::ResolvedColumnHolderProto* temp = array_offset_column_;
  array_offset_column_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedColumnHolderProto* ResolvedDeleteStmtProto::mutable_array_offset_column() {
  set_has_array_offset_column();
  if (array_offset_column_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedColumnHolderProto>(GetArenaNoVirtual());
    array_offset_column_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDeleteStmtProto.array_offset_column)
  return array_offset_column_;
}
inline void ResolvedDeleteStmtProto::set_allocated_array_offset_column(::zetasql::ResolvedColumnHolderProto* array_offset_column) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete array_offset_column_;
  }
  if (array_offset_column) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      array_offset_column = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, array_offset_column, submessage_arena);
    }
    set_has_array_offset_column();
  } else {
    clear_has_array_offset_column();
  }
  array_offset_column_ = array_offset_column;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDeleteStmtProto.array_offset_column)
}

// optional .zetasql.AnyResolvedExprProto where_expr = 4;
inline bool ResolvedDeleteStmtProto::has_where_expr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedDeleteStmtProto::set_has_where_expr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedDeleteStmtProto::clear_has_where_expr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedDeleteStmtProto::clear_where_expr() {
  if (where_expr_ != NULL) where_expr_->Clear();
  clear_has_where_expr();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedDeleteStmtProto::_internal_where_expr() const {
  return *where_expr_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedDeleteStmtProto::where_expr() const {
  const ::zetasql::AnyResolvedExprProto* p = where_expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDeleteStmtProto.where_expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedDeleteStmtProto::release_where_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDeleteStmtProto.where_expr)
  clear_has_where_expr();
  ::zetasql::AnyResolvedExprProto* temp = where_expr_;
  where_expr_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedDeleteStmtProto::mutable_where_expr() {
  set_has_where_expr();
  if (where_expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    where_expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDeleteStmtProto.where_expr)
  return where_expr_;
}
inline void ResolvedDeleteStmtProto::set_allocated_where_expr(::zetasql::AnyResolvedExprProto* where_expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete where_expr_;
  }
  if (where_expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      where_expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, where_expr, submessage_arena);
    }
    set_has_where_expr();
  } else {
    clear_has_where_expr();
  }
  where_expr_ = where_expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDeleteStmtProto.where_expr)
}

// -------------------------------------------------------------------

// ResolvedUpdateItemProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedUpdateItemProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedUpdateItemProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedUpdateItemProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedUpdateItemProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedUpdateItemProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedUpdateItemProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUpdateItemProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedUpdateItemProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedUpdateItemProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedUpdateItemProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUpdateItemProto.parent)
  return parent_;
}
inline void ResolvedUpdateItemProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedUpdateItemProto.parent)
}

// optional .zetasql.AnyResolvedExprProto target = 2;
inline bool ResolvedUpdateItemProto::has_target() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedUpdateItemProto::set_has_target() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedUpdateItemProto::clear_has_target() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedUpdateItemProto::clear_target() {
  if (target_ != NULL) target_->Clear();
  clear_has_target();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedUpdateItemProto::_internal_target() const {
  return *target_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedUpdateItemProto::target() const {
  const ::zetasql::AnyResolvedExprProto* p = target_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUpdateItemProto.target)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedUpdateItemProto::release_target() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedUpdateItemProto.target)
  clear_has_target();
  ::zetasql::AnyResolvedExprProto* temp = target_;
  target_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedUpdateItemProto::mutable_target() {
  set_has_target();
  if (target_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUpdateItemProto.target)
  return target_;
}
inline void ResolvedUpdateItemProto::set_allocated_target(::zetasql::AnyResolvedExprProto* target) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete target_;
  }
  if (target) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      target = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    set_has_target();
  } else {
    clear_has_target();
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedUpdateItemProto.target)
}

// optional .zetasql.ResolvedDMLValueProto set_value = 3;
inline bool ResolvedUpdateItemProto::has_set_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedUpdateItemProto::set_has_set_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedUpdateItemProto::clear_has_set_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedUpdateItemProto::clear_set_value() {
  if (set_value_ != NULL) set_value_->Clear();
  clear_has_set_value();
}
inline const ::zetasql::ResolvedDMLValueProto& ResolvedUpdateItemProto::_internal_set_value() const {
  return *set_value_;
}
inline const ::zetasql::ResolvedDMLValueProto& ResolvedUpdateItemProto::set_value() const {
  const ::zetasql::ResolvedDMLValueProto* p = set_value_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUpdateItemProto.set_value)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedDMLValueProto*>(
      &::zetasql::_ResolvedDMLValueProto_default_instance_);
}
inline ::zetasql::ResolvedDMLValueProto* ResolvedUpdateItemProto::release_set_value() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedUpdateItemProto.set_value)
  clear_has_set_value();
  ::zetasql::ResolvedDMLValueProto* temp = set_value_;
  set_value_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedDMLValueProto* ResolvedUpdateItemProto::mutable_set_value() {
  set_has_set_value();
  if (set_value_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedDMLValueProto>(GetArenaNoVirtual());
    set_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUpdateItemProto.set_value)
  return set_value_;
}
inline void ResolvedUpdateItemProto::set_allocated_set_value(::zetasql::ResolvedDMLValueProto* set_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete set_value_;
  }
  if (set_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_value, submessage_arena);
    }
    set_has_set_value();
  } else {
    clear_has_set_value();
  }
  set_value_ = set_value;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedUpdateItemProto.set_value)
}

// optional .zetasql.ResolvedColumnHolderProto element_column = 4;
inline bool ResolvedUpdateItemProto::has_element_column() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedUpdateItemProto::set_has_element_column() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedUpdateItemProto::clear_has_element_column() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedUpdateItemProto::clear_element_column() {
  if (element_column_ != NULL) element_column_->Clear();
  clear_has_element_column();
}
inline const ::zetasql::ResolvedColumnHolderProto& ResolvedUpdateItemProto::_internal_element_column() const {
  return *element_column_;
}
inline const ::zetasql::ResolvedColumnHolderProto& ResolvedUpdateItemProto::element_column() const {
  const ::zetasql::ResolvedColumnHolderProto* p = element_column_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUpdateItemProto.element_column)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedColumnHolderProto*>(
      &::zetasql::_ResolvedColumnHolderProto_default_instance_);
}
inline ::zetasql::ResolvedColumnHolderProto* ResolvedUpdateItemProto::release_element_column() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedUpdateItemProto.element_column)
  clear_has_element_column();
  ::zetasql::ResolvedColumnHolderProto* temp = element_column_;
  element_column_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedColumnHolderProto* ResolvedUpdateItemProto::mutable_element_column() {
  set_has_element_column();
  if (element_column_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedColumnHolderProto>(GetArenaNoVirtual());
    element_column_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUpdateItemProto.element_column)
  return element_column_;
}
inline void ResolvedUpdateItemProto::set_allocated_element_column(::zetasql::ResolvedColumnHolderProto* element_column) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete element_column_;
  }
  if (element_column) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      element_column = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, element_column, submessage_arena);
    }
    set_has_element_column();
  } else {
    clear_has_element_column();
  }
  element_column_ = element_column;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedUpdateItemProto.element_column)
}

// repeated .zetasql.ResolvedUpdateArrayItemProto array_update_list = 8;
inline int ResolvedUpdateItemProto::array_update_list_size() const {
  return array_update_list_.size();
}
inline void ResolvedUpdateItemProto::clear_array_update_list() {
  array_update_list_.Clear();
}
inline ::zetasql::ResolvedUpdateArrayItemProto* ResolvedUpdateItemProto::mutable_array_update_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUpdateItemProto.array_update_list)
  return array_update_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUpdateArrayItemProto >*
ResolvedUpdateItemProto::mutable_array_update_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedUpdateItemProto.array_update_list)
  return &array_update_list_;
}
inline const ::zetasql::ResolvedUpdateArrayItemProto& ResolvedUpdateItemProto::array_update_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUpdateItemProto.array_update_list)
  return array_update_list_.Get(index);
}
inline ::zetasql::ResolvedUpdateArrayItemProto* ResolvedUpdateItemProto::add_array_update_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedUpdateItemProto.array_update_list)
  return array_update_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUpdateArrayItemProto >&
ResolvedUpdateItemProto::array_update_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedUpdateItemProto.array_update_list)
  return array_update_list_;
}

// repeated .zetasql.ResolvedDeleteStmtProto delete_list = 5;
inline int ResolvedUpdateItemProto::delete_list_size() const {
  return delete_list_.size();
}
inline void ResolvedUpdateItemProto::clear_delete_list() {
  delete_list_.Clear();
}
inline ::zetasql::ResolvedDeleteStmtProto* ResolvedUpdateItemProto::mutable_delete_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUpdateItemProto.delete_list)
  return delete_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedDeleteStmtProto >*
ResolvedUpdateItemProto::mutable_delete_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedUpdateItemProto.delete_list)
  return &delete_list_;
}
inline const ::zetasql::ResolvedDeleteStmtProto& ResolvedUpdateItemProto::delete_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUpdateItemProto.delete_list)
  return delete_list_.Get(index);
}
inline ::zetasql::ResolvedDeleteStmtProto* ResolvedUpdateItemProto::add_delete_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedUpdateItemProto.delete_list)
  return delete_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedDeleteStmtProto >&
ResolvedUpdateItemProto::delete_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedUpdateItemProto.delete_list)
  return delete_list_;
}

// repeated .zetasql.ResolvedUpdateStmtProto update_list = 6;
inline int ResolvedUpdateItemProto::update_list_size() const {
  return update_list_.size();
}
inline void ResolvedUpdateItemProto::clear_update_list() {
  update_list_.Clear();
}
inline ::zetasql::ResolvedUpdateStmtProto* ResolvedUpdateItemProto::mutable_update_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUpdateItemProto.update_list)
  return update_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUpdateStmtProto >*
ResolvedUpdateItemProto::mutable_update_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedUpdateItemProto.update_list)
  return &update_list_;
}
inline const ::zetasql::ResolvedUpdateStmtProto& ResolvedUpdateItemProto::update_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUpdateItemProto.update_list)
  return update_list_.Get(index);
}
inline ::zetasql::ResolvedUpdateStmtProto* ResolvedUpdateItemProto::add_update_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedUpdateItemProto.update_list)
  return update_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUpdateStmtProto >&
ResolvedUpdateItemProto::update_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedUpdateItemProto.update_list)
  return update_list_;
}

// repeated .zetasql.ResolvedInsertStmtProto insert_list = 7;
inline int ResolvedUpdateItemProto::insert_list_size() const {
  return insert_list_.size();
}
inline void ResolvedUpdateItemProto::clear_insert_list() {
  insert_list_.Clear();
}
inline ::zetasql::ResolvedInsertStmtProto* ResolvedUpdateItemProto::mutable_insert_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUpdateItemProto.insert_list)
  return insert_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedInsertStmtProto >*
ResolvedUpdateItemProto::mutable_insert_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedUpdateItemProto.insert_list)
  return &insert_list_;
}
inline const ::zetasql::ResolvedInsertStmtProto& ResolvedUpdateItemProto::insert_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUpdateItemProto.insert_list)
  return insert_list_.Get(index);
}
inline ::zetasql::ResolvedInsertStmtProto* ResolvedUpdateItemProto::add_insert_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedUpdateItemProto.insert_list)
  return insert_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedInsertStmtProto >&
ResolvedUpdateItemProto::insert_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedUpdateItemProto.insert_list)
  return insert_list_;
}

// -------------------------------------------------------------------

// ResolvedUpdateArrayItemProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedUpdateArrayItemProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedUpdateArrayItemProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedUpdateArrayItemProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedUpdateArrayItemProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedUpdateArrayItemProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedUpdateArrayItemProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUpdateArrayItemProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedUpdateArrayItemProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedUpdateArrayItemProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedUpdateArrayItemProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUpdateArrayItemProto.parent)
  return parent_;
}
inline void ResolvedUpdateArrayItemProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedUpdateArrayItemProto.parent)
}

// optional .zetasql.AnyResolvedExprProto offset = 2;
inline bool ResolvedUpdateArrayItemProto::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedUpdateArrayItemProto::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedUpdateArrayItemProto::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedUpdateArrayItemProto::clear_offset() {
  if (offset_ != NULL) offset_->Clear();
  clear_has_offset();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedUpdateArrayItemProto::_internal_offset() const {
  return *offset_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedUpdateArrayItemProto::offset() const {
  const ::zetasql::AnyResolvedExprProto* p = offset_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUpdateArrayItemProto.offset)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedUpdateArrayItemProto::release_offset() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedUpdateArrayItemProto.offset)
  clear_has_offset();
  ::zetasql::AnyResolvedExprProto* temp = offset_;
  offset_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedUpdateArrayItemProto::mutable_offset() {
  set_has_offset();
  if (offset_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    offset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUpdateArrayItemProto.offset)
  return offset_;
}
inline void ResolvedUpdateArrayItemProto::set_allocated_offset(::zetasql::AnyResolvedExprProto* offset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete offset_;
  }
  if (offset) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      offset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, offset, submessage_arena);
    }
    set_has_offset();
  } else {
    clear_has_offset();
  }
  offset_ = offset;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedUpdateArrayItemProto.offset)
}

// optional .zetasql.ResolvedUpdateItemProto update_item = 3;
inline bool ResolvedUpdateArrayItemProto::has_update_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedUpdateArrayItemProto::set_has_update_item() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedUpdateArrayItemProto::clear_has_update_item() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedUpdateArrayItemProto::clear_update_item() {
  if (update_item_ != NULL) update_item_->Clear();
  clear_has_update_item();
}
inline const ::zetasql::ResolvedUpdateItemProto& ResolvedUpdateArrayItemProto::_internal_update_item() const {
  return *update_item_;
}
inline const ::zetasql::ResolvedUpdateItemProto& ResolvedUpdateArrayItemProto::update_item() const {
  const ::zetasql::ResolvedUpdateItemProto* p = update_item_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUpdateArrayItemProto.update_item)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedUpdateItemProto*>(
      &::zetasql::_ResolvedUpdateItemProto_default_instance_);
}
inline ::zetasql::ResolvedUpdateItemProto* ResolvedUpdateArrayItemProto::release_update_item() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedUpdateArrayItemProto.update_item)
  clear_has_update_item();
  ::zetasql::ResolvedUpdateItemProto* temp = update_item_;
  update_item_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedUpdateItemProto* ResolvedUpdateArrayItemProto::mutable_update_item() {
  set_has_update_item();
  if (update_item_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedUpdateItemProto>(GetArenaNoVirtual());
    update_item_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUpdateArrayItemProto.update_item)
  return update_item_;
}
inline void ResolvedUpdateArrayItemProto::set_allocated_update_item(::zetasql::ResolvedUpdateItemProto* update_item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete update_item_;
  }
  if (update_item) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_item, submessage_arena);
    }
    set_has_update_item();
  } else {
    clear_has_update_item();
  }
  update_item_ = update_item;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedUpdateArrayItemProto.update_item)
}

// -------------------------------------------------------------------

// ResolvedUpdateStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedUpdateStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedUpdateStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedUpdateStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedUpdateStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedUpdateStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedUpdateStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUpdateStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedUpdateStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedUpdateStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedUpdateStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUpdateStmtProto.parent)
  return parent_;
}
inline void ResolvedUpdateStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedUpdateStmtProto.parent)
}

// optional .zetasql.ResolvedTableScanProto table_scan = 2;
inline bool ResolvedUpdateStmtProto::has_table_scan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedUpdateStmtProto::set_has_table_scan() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedUpdateStmtProto::clear_has_table_scan() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedUpdateStmtProto::clear_table_scan() {
  if (table_scan_ != NULL) table_scan_->Clear();
  clear_has_table_scan();
}
inline const ::zetasql::ResolvedTableScanProto& ResolvedUpdateStmtProto::_internal_table_scan() const {
  return *table_scan_;
}
inline const ::zetasql::ResolvedTableScanProto& ResolvedUpdateStmtProto::table_scan() const {
  const ::zetasql::ResolvedTableScanProto* p = table_scan_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUpdateStmtProto.table_scan)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedTableScanProto*>(
      &::zetasql::_ResolvedTableScanProto_default_instance_);
}
inline ::zetasql::ResolvedTableScanProto* ResolvedUpdateStmtProto::release_table_scan() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedUpdateStmtProto.table_scan)
  clear_has_table_scan();
  ::zetasql::ResolvedTableScanProto* temp = table_scan_;
  table_scan_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedTableScanProto* ResolvedUpdateStmtProto::mutable_table_scan() {
  set_has_table_scan();
  if (table_scan_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedTableScanProto>(GetArenaNoVirtual());
    table_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUpdateStmtProto.table_scan)
  return table_scan_;
}
inline void ResolvedUpdateStmtProto::set_allocated_table_scan(::zetasql::ResolvedTableScanProto* table_scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete table_scan_;
  }
  if (table_scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table_scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table_scan, submessage_arena);
    }
    set_has_table_scan();
  } else {
    clear_has_table_scan();
  }
  table_scan_ = table_scan;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedUpdateStmtProto.table_scan)
}

// repeated .zetasql.ResolvedStatementEnums.ObjectAccess column_access_list = 8;
inline int ResolvedUpdateStmtProto::column_access_list_size() const {
  return column_access_list_.size();
}
inline void ResolvedUpdateStmtProto::clear_column_access_list() {
  column_access_list_.Clear();
}
inline ::zetasql::ResolvedStatementEnums_ObjectAccess ResolvedUpdateStmtProto::column_access_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUpdateStmtProto.column_access_list)
  return static_cast< ::zetasql::ResolvedStatementEnums_ObjectAccess >(column_access_list_.Get(index));
}
inline void ResolvedUpdateStmtProto::set_column_access_list(int index, ::zetasql::ResolvedStatementEnums_ObjectAccess value) {
  assert(::zetasql::ResolvedStatementEnums_ObjectAccess_IsValid(value));
  column_access_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedUpdateStmtProto.column_access_list)
}
inline void ResolvedUpdateStmtProto::add_column_access_list(::zetasql::ResolvedStatementEnums_ObjectAccess value) {
  assert(::zetasql::ResolvedStatementEnums_ObjectAccess_IsValid(value));
  column_access_list_.Add(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedUpdateStmtProto.column_access_list)
}
inline const ::google::protobuf::RepeatedField<int>&
ResolvedUpdateStmtProto::column_access_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedUpdateStmtProto.column_access_list)
  return column_access_list_;
}
inline ::google::protobuf::RepeatedField<int>*
ResolvedUpdateStmtProto::mutable_column_access_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedUpdateStmtProto.column_access_list)
  return &column_access_list_;
}

// optional .zetasql.ResolvedAssertRowsModifiedProto assert_rows_modified = 3;
inline bool ResolvedUpdateStmtProto::has_assert_rows_modified() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedUpdateStmtProto::set_has_assert_rows_modified() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedUpdateStmtProto::clear_has_assert_rows_modified() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedUpdateStmtProto::clear_assert_rows_modified() {
  if (assert_rows_modified_ != NULL) assert_rows_modified_->Clear();
  clear_has_assert_rows_modified();
}
inline const ::zetasql::ResolvedAssertRowsModifiedProto& ResolvedUpdateStmtProto::_internal_assert_rows_modified() const {
  return *assert_rows_modified_;
}
inline const ::zetasql::ResolvedAssertRowsModifiedProto& ResolvedUpdateStmtProto::assert_rows_modified() const {
  const ::zetasql::ResolvedAssertRowsModifiedProto* p = assert_rows_modified_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUpdateStmtProto.assert_rows_modified)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAssertRowsModifiedProto*>(
      &::zetasql::_ResolvedAssertRowsModifiedProto_default_instance_);
}
inline ::zetasql::ResolvedAssertRowsModifiedProto* ResolvedUpdateStmtProto::release_assert_rows_modified() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedUpdateStmtProto.assert_rows_modified)
  clear_has_assert_rows_modified();
  ::zetasql::ResolvedAssertRowsModifiedProto* temp = assert_rows_modified_;
  assert_rows_modified_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAssertRowsModifiedProto* ResolvedUpdateStmtProto::mutable_assert_rows_modified() {
  set_has_assert_rows_modified();
  if (assert_rows_modified_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAssertRowsModifiedProto>(GetArenaNoVirtual());
    assert_rows_modified_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUpdateStmtProto.assert_rows_modified)
  return assert_rows_modified_;
}
inline void ResolvedUpdateStmtProto::set_allocated_assert_rows_modified(::zetasql::ResolvedAssertRowsModifiedProto* assert_rows_modified) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete assert_rows_modified_;
  }
  if (assert_rows_modified) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      assert_rows_modified = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, assert_rows_modified, submessage_arena);
    }
    set_has_assert_rows_modified();
  } else {
    clear_has_assert_rows_modified();
  }
  assert_rows_modified_ = assert_rows_modified;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedUpdateStmtProto.assert_rows_modified)
}

// optional .zetasql.ResolvedReturningClauseProto returning = 9;
inline bool ResolvedUpdateStmtProto::has_returning() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResolvedUpdateStmtProto::set_has_returning() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ResolvedUpdateStmtProto::clear_has_returning() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ResolvedUpdateStmtProto::clear_returning() {
  if (returning_ != NULL) returning_->Clear();
  clear_has_returning();
}
inline const ::zetasql::ResolvedReturningClauseProto& ResolvedUpdateStmtProto::_internal_returning() const {
  return *returning_;
}
inline const ::zetasql::ResolvedReturningClauseProto& ResolvedUpdateStmtProto::returning() const {
  const ::zetasql::ResolvedReturningClauseProto* p = returning_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUpdateStmtProto.returning)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedReturningClauseProto*>(
      &::zetasql::_ResolvedReturningClauseProto_default_instance_);
}
inline ::zetasql::ResolvedReturningClauseProto* ResolvedUpdateStmtProto::release_returning() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedUpdateStmtProto.returning)
  clear_has_returning();
  ::zetasql::ResolvedReturningClauseProto* temp = returning_;
  returning_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedReturningClauseProto* ResolvedUpdateStmtProto::mutable_returning() {
  set_has_returning();
  if (returning_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedReturningClauseProto>(GetArenaNoVirtual());
    returning_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUpdateStmtProto.returning)
  return returning_;
}
inline void ResolvedUpdateStmtProto::set_allocated_returning(::zetasql::ResolvedReturningClauseProto* returning) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete returning_;
  }
  if (returning) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      returning = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, returning, submessage_arena);
    }
    set_has_returning();
  } else {
    clear_has_returning();
  }
  returning_ = returning;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedUpdateStmtProto.returning)
}

// optional .zetasql.ResolvedColumnHolderProto array_offset_column = 7;
inline bool ResolvedUpdateStmtProto::has_array_offset_column() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResolvedUpdateStmtProto::set_has_array_offset_column() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResolvedUpdateStmtProto::clear_has_array_offset_column() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ResolvedUpdateStmtProto::clear_array_offset_column() {
  if (array_offset_column_ != NULL) array_offset_column_->Clear();
  clear_has_array_offset_column();
}
inline const ::zetasql::ResolvedColumnHolderProto& ResolvedUpdateStmtProto::_internal_array_offset_column() const {
  return *array_offset_column_;
}
inline const ::zetasql::ResolvedColumnHolderProto& ResolvedUpdateStmtProto::array_offset_column() const {
  const ::zetasql::ResolvedColumnHolderProto* p = array_offset_column_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUpdateStmtProto.array_offset_column)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedColumnHolderProto*>(
      &::zetasql::_ResolvedColumnHolderProto_default_instance_);
}
inline ::zetasql::ResolvedColumnHolderProto* ResolvedUpdateStmtProto::release_array_offset_column() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedUpdateStmtProto.array_offset_column)
  clear_has_array_offset_column();
  ::zetasql::ResolvedColumnHolderProto* temp = array_offset_column_;
  array_offset_column_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedColumnHolderProto* ResolvedUpdateStmtProto::mutable_array_offset_column() {
  set_has_array_offset_column();
  if (array_offset_column_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedColumnHolderProto>(GetArenaNoVirtual());
    array_offset_column_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUpdateStmtProto.array_offset_column)
  return array_offset_column_;
}
inline void ResolvedUpdateStmtProto::set_allocated_array_offset_column(::zetasql::ResolvedColumnHolderProto* array_offset_column) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete array_offset_column_;
  }
  if (array_offset_column) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      array_offset_column = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, array_offset_column, submessage_arena);
    }
    set_has_array_offset_column();
  } else {
    clear_has_array_offset_column();
  }
  array_offset_column_ = array_offset_column;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedUpdateStmtProto.array_offset_column)
}

// optional .zetasql.AnyResolvedExprProto where_expr = 4;
inline bool ResolvedUpdateStmtProto::has_where_expr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedUpdateStmtProto::set_has_where_expr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedUpdateStmtProto::clear_has_where_expr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedUpdateStmtProto::clear_where_expr() {
  if (where_expr_ != NULL) where_expr_->Clear();
  clear_has_where_expr();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedUpdateStmtProto::_internal_where_expr() const {
  return *where_expr_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedUpdateStmtProto::where_expr() const {
  const ::zetasql::AnyResolvedExprProto* p = where_expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUpdateStmtProto.where_expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedUpdateStmtProto::release_where_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedUpdateStmtProto.where_expr)
  clear_has_where_expr();
  ::zetasql::AnyResolvedExprProto* temp = where_expr_;
  where_expr_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedUpdateStmtProto::mutable_where_expr() {
  set_has_where_expr();
  if (where_expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    where_expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUpdateStmtProto.where_expr)
  return where_expr_;
}
inline void ResolvedUpdateStmtProto::set_allocated_where_expr(::zetasql::AnyResolvedExprProto* where_expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete where_expr_;
  }
  if (where_expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      where_expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, where_expr, submessage_arena);
    }
    set_has_where_expr();
  } else {
    clear_has_where_expr();
  }
  where_expr_ = where_expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedUpdateStmtProto.where_expr)
}

// repeated .zetasql.ResolvedUpdateItemProto update_item_list = 5;
inline int ResolvedUpdateStmtProto::update_item_list_size() const {
  return update_item_list_.size();
}
inline void ResolvedUpdateStmtProto::clear_update_item_list() {
  update_item_list_.Clear();
}
inline ::zetasql::ResolvedUpdateItemProto* ResolvedUpdateStmtProto::mutable_update_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUpdateStmtProto.update_item_list)
  return update_item_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUpdateItemProto >*
ResolvedUpdateStmtProto::mutable_update_item_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedUpdateStmtProto.update_item_list)
  return &update_item_list_;
}
inline const ::zetasql::ResolvedUpdateItemProto& ResolvedUpdateStmtProto::update_item_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUpdateStmtProto.update_item_list)
  return update_item_list_.Get(index);
}
inline ::zetasql::ResolvedUpdateItemProto* ResolvedUpdateStmtProto::add_update_item_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedUpdateStmtProto.update_item_list)
  return update_item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUpdateItemProto >&
ResolvedUpdateStmtProto::update_item_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedUpdateStmtProto.update_item_list)
  return update_item_list_;
}

// optional .zetasql.AnyResolvedScanProto from_scan = 6;
inline bool ResolvedUpdateStmtProto::has_from_scan() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResolvedUpdateStmtProto::set_has_from_scan() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResolvedUpdateStmtProto::clear_has_from_scan() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResolvedUpdateStmtProto::clear_from_scan() {
  if (from_scan_ != NULL) from_scan_->Clear();
  clear_has_from_scan();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedUpdateStmtProto::_internal_from_scan() const {
  return *from_scan_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedUpdateStmtProto::from_scan() const {
  const ::zetasql::AnyResolvedScanProto* p = from_scan_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUpdateStmtProto.from_scan)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedUpdateStmtProto::release_from_scan() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedUpdateStmtProto.from_scan)
  clear_has_from_scan();
  ::zetasql::AnyResolvedScanProto* temp = from_scan_;
  from_scan_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedUpdateStmtProto::mutable_from_scan() {
  set_has_from_scan();
  if (from_scan_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    from_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUpdateStmtProto.from_scan)
  return from_scan_;
}
inline void ResolvedUpdateStmtProto::set_allocated_from_scan(::zetasql::AnyResolvedScanProto* from_scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete from_scan_;
  }
  if (from_scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      from_scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, from_scan, submessage_arena);
    }
    set_has_from_scan();
  } else {
    clear_has_from_scan();
  }
  from_scan_ = from_scan;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedUpdateStmtProto.from_scan)
}

// -------------------------------------------------------------------

// ResolvedMergeWhenProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedMergeWhenProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedMergeWhenProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedMergeWhenProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedMergeWhenProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedMergeWhenProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedMergeWhenProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedMergeWhenProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedMergeWhenProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedMergeWhenProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedMergeWhenProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedMergeWhenProto.parent)
  return parent_;
}
inline void ResolvedMergeWhenProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedMergeWhenProto.parent)
}

// optional .zetasql.ResolvedMergeWhenEnums.MatchType match_type = 2;
inline bool ResolvedMergeWhenProto::has_match_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedMergeWhenProto::set_has_match_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedMergeWhenProto::clear_has_match_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedMergeWhenProto::clear_match_type() {
  match_type_ = 0;
  clear_has_match_type();
}
inline ::zetasql::ResolvedMergeWhenEnums_MatchType ResolvedMergeWhenProto::match_type() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedMergeWhenProto.match_type)
  return static_cast< ::zetasql::ResolvedMergeWhenEnums_MatchType >(match_type_);
}
inline void ResolvedMergeWhenProto::set_match_type(::zetasql::ResolvedMergeWhenEnums_MatchType value) {
  assert(::zetasql::ResolvedMergeWhenEnums_MatchType_IsValid(value));
  set_has_match_type();
  match_type_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedMergeWhenProto.match_type)
}

// optional .zetasql.AnyResolvedExprProto match_expr = 3;
inline bool ResolvedMergeWhenProto::has_match_expr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedMergeWhenProto::set_has_match_expr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedMergeWhenProto::clear_has_match_expr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedMergeWhenProto::clear_match_expr() {
  if (match_expr_ != NULL) match_expr_->Clear();
  clear_has_match_expr();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedMergeWhenProto::_internal_match_expr() const {
  return *match_expr_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedMergeWhenProto::match_expr() const {
  const ::zetasql::AnyResolvedExprProto* p = match_expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedMergeWhenProto.match_expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedMergeWhenProto::release_match_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedMergeWhenProto.match_expr)
  clear_has_match_expr();
  ::zetasql::AnyResolvedExprProto* temp = match_expr_;
  match_expr_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedMergeWhenProto::mutable_match_expr() {
  set_has_match_expr();
  if (match_expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    match_expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedMergeWhenProto.match_expr)
  return match_expr_;
}
inline void ResolvedMergeWhenProto::set_allocated_match_expr(::zetasql::AnyResolvedExprProto* match_expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete match_expr_;
  }
  if (match_expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      match_expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, match_expr, submessage_arena);
    }
    set_has_match_expr();
  } else {
    clear_has_match_expr();
  }
  match_expr_ = match_expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedMergeWhenProto.match_expr)
}

// optional .zetasql.ResolvedMergeWhenEnums.ActionType action_type = 4;
inline bool ResolvedMergeWhenProto::has_action_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResolvedMergeWhenProto::set_has_action_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResolvedMergeWhenProto::clear_has_action_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResolvedMergeWhenProto::clear_action_type() {
  action_type_ = 0;
  clear_has_action_type();
}
inline ::zetasql::ResolvedMergeWhenEnums_ActionType ResolvedMergeWhenProto::action_type() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedMergeWhenProto.action_type)
  return static_cast< ::zetasql::ResolvedMergeWhenEnums_ActionType >(action_type_);
}
inline void ResolvedMergeWhenProto::set_action_type(::zetasql::ResolvedMergeWhenEnums_ActionType value) {
  assert(::zetasql::ResolvedMergeWhenEnums_ActionType_IsValid(value));
  set_has_action_type();
  action_type_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedMergeWhenProto.action_type)
}

// repeated .zetasql.ResolvedColumnProto insert_column_list = 5;
inline int ResolvedMergeWhenProto::insert_column_list_size() const {
  return insert_column_list_.size();
}
inline ::zetasql::ResolvedColumnProto* ResolvedMergeWhenProto::mutable_insert_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedMergeWhenProto.insert_column_list)
  return insert_column_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >*
ResolvedMergeWhenProto::mutable_insert_column_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedMergeWhenProto.insert_column_list)
  return &insert_column_list_;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedMergeWhenProto::insert_column_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedMergeWhenProto.insert_column_list)
  return insert_column_list_.Get(index);
}
inline ::zetasql::ResolvedColumnProto* ResolvedMergeWhenProto::add_insert_column_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedMergeWhenProto.insert_column_list)
  return insert_column_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >&
ResolvedMergeWhenProto::insert_column_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedMergeWhenProto.insert_column_list)
  return insert_column_list_;
}

// optional .zetasql.ResolvedInsertRowProto insert_row = 6;
inline bool ResolvedMergeWhenProto::has_insert_row() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedMergeWhenProto::set_has_insert_row() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedMergeWhenProto::clear_has_insert_row() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedMergeWhenProto::clear_insert_row() {
  if (insert_row_ != NULL) insert_row_->Clear();
  clear_has_insert_row();
}
inline const ::zetasql::ResolvedInsertRowProto& ResolvedMergeWhenProto::_internal_insert_row() const {
  return *insert_row_;
}
inline const ::zetasql::ResolvedInsertRowProto& ResolvedMergeWhenProto::insert_row() const {
  const ::zetasql::ResolvedInsertRowProto* p = insert_row_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedMergeWhenProto.insert_row)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedInsertRowProto*>(
      &::zetasql::_ResolvedInsertRowProto_default_instance_);
}
inline ::zetasql::ResolvedInsertRowProto* ResolvedMergeWhenProto::release_insert_row() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedMergeWhenProto.insert_row)
  clear_has_insert_row();
  ::zetasql::ResolvedInsertRowProto* temp = insert_row_;
  insert_row_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedInsertRowProto* ResolvedMergeWhenProto::mutable_insert_row() {
  set_has_insert_row();
  if (insert_row_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedInsertRowProto>(GetArenaNoVirtual());
    insert_row_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedMergeWhenProto.insert_row)
  return insert_row_;
}
inline void ResolvedMergeWhenProto::set_allocated_insert_row(::zetasql::ResolvedInsertRowProto* insert_row) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete insert_row_;
  }
  if (insert_row) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      insert_row = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, insert_row, submessage_arena);
    }
    set_has_insert_row();
  } else {
    clear_has_insert_row();
  }
  insert_row_ = insert_row;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedMergeWhenProto.insert_row)
}

// repeated .zetasql.ResolvedUpdateItemProto update_item_list = 7;
inline int ResolvedMergeWhenProto::update_item_list_size() const {
  return update_item_list_.size();
}
inline void ResolvedMergeWhenProto::clear_update_item_list() {
  update_item_list_.Clear();
}
inline ::zetasql::ResolvedUpdateItemProto* ResolvedMergeWhenProto::mutable_update_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedMergeWhenProto.update_item_list)
  return update_item_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUpdateItemProto >*
ResolvedMergeWhenProto::mutable_update_item_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedMergeWhenProto.update_item_list)
  return &update_item_list_;
}
inline const ::zetasql::ResolvedUpdateItemProto& ResolvedMergeWhenProto::update_item_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedMergeWhenProto.update_item_list)
  return update_item_list_.Get(index);
}
inline ::zetasql::ResolvedUpdateItemProto* ResolvedMergeWhenProto::add_update_item_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedMergeWhenProto.update_item_list)
  return update_item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUpdateItemProto >&
ResolvedMergeWhenProto::update_item_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedMergeWhenProto.update_item_list)
  return update_item_list_;
}

// -------------------------------------------------------------------

// ResolvedMergeStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedMergeStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedMergeStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedMergeStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedMergeStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedMergeStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedMergeStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedMergeStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedMergeStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedMergeStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedMergeStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedMergeStmtProto.parent)
  return parent_;
}
inline void ResolvedMergeStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedMergeStmtProto.parent)
}

// optional .zetasql.ResolvedTableScanProto table_scan = 2;
inline bool ResolvedMergeStmtProto::has_table_scan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedMergeStmtProto::set_has_table_scan() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedMergeStmtProto::clear_has_table_scan() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedMergeStmtProto::clear_table_scan() {
  if (table_scan_ != NULL) table_scan_->Clear();
  clear_has_table_scan();
}
inline const ::zetasql::ResolvedTableScanProto& ResolvedMergeStmtProto::_internal_table_scan() const {
  return *table_scan_;
}
inline const ::zetasql::ResolvedTableScanProto& ResolvedMergeStmtProto::table_scan() const {
  const ::zetasql::ResolvedTableScanProto* p = table_scan_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedMergeStmtProto.table_scan)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedTableScanProto*>(
      &::zetasql::_ResolvedTableScanProto_default_instance_);
}
inline ::zetasql::ResolvedTableScanProto* ResolvedMergeStmtProto::release_table_scan() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedMergeStmtProto.table_scan)
  clear_has_table_scan();
  ::zetasql::ResolvedTableScanProto* temp = table_scan_;
  table_scan_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedTableScanProto* ResolvedMergeStmtProto::mutable_table_scan() {
  set_has_table_scan();
  if (table_scan_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedTableScanProto>(GetArenaNoVirtual());
    table_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedMergeStmtProto.table_scan)
  return table_scan_;
}
inline void ResolvedMergeStmtProto::set_allocated_table_scan(::zetasql::ResolvedTableScanProto* table_scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete table_scan_;
  }
  if (table_scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table_scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table_scan, submessage_arena);
    }
    set_has_table_scan();
  } else {
    clear_has_table_scan();
  }
  table_scan_ = table_scan;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedMergeStmtProto.table_scan)
}

// repeated .zetasql.ResolvedStatementEnums.ObjectAccess column_access_list = 6;
inline int ResolvedMergeStmtProto::column_access_list_size() const {
  return column_access_list_.size();
}
inline void ResolvedMergeStmtProto::clear_column_access_list() {
  column_access_list_.Clear();
}
inline ::zetasql::ResolvedStatementEnums_ObjectAccess ResolvedMergeStmtProto::column_access_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedMergeStmtProto.column_access_list)
  return static_cast< ::zetasql::ResolvedStatementEnums_ObjectAccess >(column_access_list_.Get(index));
}
inline void ResolvedMergeStmtProto::set_column_access_list(int index, ::zetasql::ResolvedStatementEnums_ObjectAccess value) {
  assert(::zetasql::ResolvedStatementEnums_ObjectAccess_IsValid(value));
  column_access_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedMergeStmtProto.column_access_list)
}
inline void ResolvedMergeStmtProto::add_column_access_list(::zetasql::ResolvedStatementEnums_ObjectAccess value) {
  assert(::zetasql::ResolvedStatementEnums_ObjectAccess_IsValid(value));
  column_access_list_.Add(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedMergeStmtProto.column_access_list)
}
inline const ::google::protobuf::RepeatedField<int>&
ResolvedMergeStmtProto::column_access_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedMergeStmtProto.column_access_list)
  return column_access_list_;
}
inline ::google::protobuf::RepeatedField<int>*
ResolvedMergeStmtProto::mutable_column_access_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedMergeStmtProto.column_access_list)
  return &column_access_list_;
}

// optional .zetasql.AnyResolvedScanProto from_scan = 3;
inline bool ResolvedMergeStmtProto::has_from_scan() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedMergeStmtProto::set_has_from_scan() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedMergeStmtProto::clear_has_from_scan() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedMergeStmtProto::clear_from_scan() {
  if (from_scan_ != NULL) from_scan_->Clear();
  clear_has_from_scan();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedMergeStmtProto::_internal_from_scan() const {
  return *from_scan_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedMergeStmtProto::from_scan() const {
  const ::zetasql::AnyResolvedScanProto* p = from_scan_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedMergeStmtProto.from_scan)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedMergeStmtProto::release_from_scan() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedMergeStmtProto.from_scan)
  clear_has_from_scan();
  ::zetasql::AnyResolvedScanProto* temp = from_scan_;
  from_scan_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedMergeStmtProto::mutable_from_scan() {
  set_has_from_scan();
  if (from_scan_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    from_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedMergeStmtProto.from_scan)
  return from_scan_;
}
inline void ResolvedMergeStmtProto::set_allocated_from_scan(::zetasql::AnyResolvedScanProto* from_scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete from_scan_;
  }
  if (from_scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      from_scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, from_scan, submessage_arena);
    }
    set_has_from_scan();
  } else {
    clear_has_from_scan();
  }
  from_scan_ = from_scan;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedMergeStmtProto.from_scan)
}

// optional .zetasql.AnyResolvedExprProto merge_expr = 4;
inline bool ResolvedMergeStmtProto::has_merge_expr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedMergeStmtProto::set_has_merge_expr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedMergeStmtProto::clear_has_merge_expr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedMergeStmtProto::clear_merge_expr() {
  if (merge_expr_ != NULL) merge_expr_->Clear();
  clear_has_merge_expr();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedMergeStmtProto::_internal_merge_expr() const {
  return *merge_expr_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedMergeStmtProto::merge_expr() const {
  const ::zetasql::AnyResolvedExprProto* p = merge_expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedMergeStmtProto.merge_expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedMergeStmtProto::release_merge_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedMergeStmtProto.merge_expr)
  clear_has_merge_expr();
  ::zetasql::AnyResolvedExprProto* temp = merge_expr_;
  merge_expr_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedMergeStmtProto::mutable_merge_expr() {
  set_has_merge_expr();
  if (merge_expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    merge_expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedMergeStmtProto.merge_expr)
  return merge_expr_;
}
inline void ResolvedMergeStmtProto::set_allocated_merge_expr(::zetasql::AnyResolvedExprProto* merge_expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete merge_expr_;
  }
  if (merge_expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      merge_expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, merge_expr, submessage_arena);
    }
    set_has_merge_expr();
  } else {
    clear_has_merge_expr();
  }
  merge_expr_ = merge_expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedMergeStmtProto.merge_expr)
}

// repeated .zetasql.ResolvedMergeWhenProto when_clause_list = 5;
inline int ResolvedMergeStmtProto::when_clause_list_size() const {
  return when_clause_list_.size();
}
inline void ResolvedMergeStmtProto::clear_when_clause_list() {
  when_clause_list_.Clear();
}
inline ::zetasql::ResolvedMergeWhenProto* ResolvedMergeStmtProto::mutable_when_clause_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedMergeStmtProto.when_clause_list)
  return when_clause_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedMergeWhenProto >*
ResolvedMergeStmtProto::mutable_when_clause_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedMergeStmtProto.when_clause_list)
  return &when_clause_list_;
}
inline const ::zetasql::ResolvedMergeWhenProto& ResolvedMergeStmtProto::when_clause_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedMergeStmtProto.when_clause_list)
  return when_clause_list_.Get(index);
}
inline ::zetasql::ResolvedMergeWhenProto* ResolvedMergeStmtProto::add_when_clause_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedMergeStmtProto.when_clause_list)
  return when_clause_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedMergeWhenProto >&
ResolvedMergeStmtProto::when_clause_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedMergeStmtProto.when_clause_list)
  return when_clause_list_;
}

// -------------------------------------------------------------------

// ResolvedTruncateStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedTruncateStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedTruncateStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedTruncateStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedTruncateStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedTruncateStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedTruncateStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedTruncateStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedTruncateStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedTruncateStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedTruncateStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedTruncateStmtProto.parent)
  return parent_;
}
inline void ResolvedTruncateStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedTruncateStmtProto.parent)
}

// optional .zetasql.ResolvedTableScanProto table_scan = 3;
inline bool ResolvedTruncateStmtProto::has_table_scan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedTruncateStmtProto::set_has_table_scan() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedTruncateStmtProto::clear_has_table_scan() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedTruncateStmtProto::clear_table_scan() {
  if (table_scan_ != NULL) table_scan_->Clear();
  clear_has_table_scan();
}
inline const ::zetasql::ResolvedTableScanProto& ResolvedTruncateStmtProto::_internal_table_scan() const {
  return *table_scan_;
}
inline const ::zetasql::ResolvedTableScanProto& ResolvedTruncateStmtProto::table_scan() const {
  const ::zetasql::ResolvedTableScanProto* p = table_scan_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedTruncateStmtProto.table_scan)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedTableScanProto*>(
      &::zetasql::_ResolvedTableScanProto_default_instance_);
}
inline ::zetasql::ResolvedTableScanProto* ResolvedTruncateStmtProto::release_table_scan() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedTruncateStmtProto.table_scan)
  clear_has_table_scan();
  ::zetasql::ResolvedTableScanProto* temp = table_scan_;
  table_scan_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedTableScanProto* ResolvedTruncateStmtProto::mutable_table_scan() {
  set_has_table_scan();
  if (table_scan_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedTableScanProto>(GetArenaNoVirtual());
    table_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedTruncateStmtProto.table_scan)
  return table_scan_;
}
inline void ResolvedTruncateStmtProto::set_allocated_table_scan(::zetasql::ResolvedTableScanProto* table_scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete table_scan_;
  }
  if (table_scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table_scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table_scan, submessage_arena);
    }
    set_has_table_scan();
  } else {
    clear_has_table_scan();
  }
  table_scan_ = table_scan;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedTruncateStmtProto.table_scan)
}

// optional .zetasql.AnyResolvedExprProto where_expr = 4;
inline bool ResolvedTruncateStmtProto::has_where_expr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedTruncateStmtProto::set_has_where_expr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedTruncateStmtProto::clear_has_where_expr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedTruncateStmtProto::clear_where_expr() {
  if (where_expr_ != NULL) where_expr_->Clear();
  clear_has_where_expr();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedTruncateStmtProto::_internal_where_expr() const {
  return *where_expr_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedTruncateStmtProto::where_expr() const {
  const ::zetasql::AnyResolvedExprProto* p = where_expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedTruncateStmtProto.where_expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedTruncateStmtProto::release_where_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedTruncateStmtProto.where_expr)
  clear_has_where_expr();
  ::zetasql::AnyResolvedExprProto* temp = where_expr_;
  where_expr_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedTruncateStmtProto::mutable_where_expr() {
  set_has_where_expr();
  if (where_expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    where_expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedTruncateStmtProto.where_expr)
  return where_expr_;
}
inline void ResolvedTruncateStmtProto::set_allocated_where_expr(::zetasql::AnyResolvedExprProto* where_expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete where_expr_;
  }
  if (where_expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      where_expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, where_expr, submessage_arena);
    }
    set_has_where_expr();
  } else {
    clear_has_where_expr();
  }
  where_expr_ = where_expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedTruncateStmtProto.where_expr)
}

// -------------------------------------------------------------------

// ResolvedObjectUnitProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedObjectUnitProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedObjectUnitProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedObjectUnitProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedObjectUnitProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedObjectUnitProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedObjectUnitProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedObjectUnitProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedObjectUnitProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedObjectUnitProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedObjectUnitProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedObjectUnitProto.parent)
  return parent_;
}
inline void ResolvedObjectUnitProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedObjectUnitProto.parent)
}

// repeated string name_path = 2;
inline int ResolvedObjectUnitProto::name_path_size() const {
  return name_path_.size();
}
inline void ResolvedObjectUnitProto::clear_name_path() {
  name_path_.Clear();
}
inline const ::std::string& ResolvedObjectUnitProto::name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedObjectUnitProto.name_path)
  return name_path_.Get(index);
}
inline ::std::string* ResolvedObjectUnitProto::mutable_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedObjectUnitProto.name_path)
  return name_path_.Mutable(index);
}
inline void ResolvedObjectUnitProto::set_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedObjectUnitProto.name_path)
  name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedObjectUnitProto::set_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedObjectUnitProto.name_path)
  name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedObjectUnitProto::set_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedObjectUnitProto.name_path)
}
inline void ResolvedObjectUnitProto::set_name_path(int index, const char* value, size_t size) {
  name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedObjectUnitProto.name_path)
}
inline ::std::string* ResolvedObjectUnitProto::add_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedObjectUnitProto.name_path)
  return name_path_.Add();
}
inline void ResolvedObjectUnitProto::add_name_path(const ::std::string& value) {
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedObjectUnitProto.name_path)
}
#if LANG_CXX11
inline void ResolvedObjectUnitProto::add_name_path(::std::string&& value) {
  name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedObjectUnitProto.name_path)
}
#endif
inline void ResolvedObjectUnitProto::add_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedObjectUnitProto.name_path)
}
inline void ResolvedObjectUnitProto::add_name_path(const char* value, size_t size) {
  name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedObjectUnitProto.name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedObjectUnitProto::name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedObjectUnitProto.name_path)
  return name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedObjectUnitProto::mutable_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedObjectUnitProto.name_path)
  return &name_path_;
}

// -------------------------------------------------------------------

// ResolvedPrivilegeProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedPrivilegeProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedPrivilegeProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedPrivilegeProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedPrivilegeProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedPrivilegeProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedPrivilegeProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedPrivilegeProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedPrivilegeProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedPrivilegeProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedPrivilegeProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedPrivilegeProto.parent)
  return parent_;
}
inline void ResolvedPrivilegeProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedPrivilegeProto.parent)
}

// optional string action_type = 2;
inline bool ResolvedPrivilegeProto::has_action_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedPrivilegeProto::set_has_action_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedPrivilegeProto::clear_has_action_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedPrivilegeProto::clear_action_type() {
  action_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_action_type();
}
inline const ::std::string& ResolvedPrivilegeProto::action_type() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedPrivilegeProto.action_type)
  return action_type_.GetNoArena();
}
inline void ResolvedPrivilegeProto::set_action_type(const ::std::string& value) {
  set_has_action_type();
  action_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedPrivilegeProto.action_type)
}
#if LANG_CXX11
inline void ResolvedPrivilegeProto::set_action_type(::std::string&& value) {
  set_has_action_type();
  action_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedPrivilegeProto.action_type)
}
#endif
inline void ResolvedPrivilegeProto::set_action_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_action_type();
  action_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedPrivilegeProto.action_type)
}
inline void ResolvedPrivilegeProto::set_action_type(const char* value, size_t size) {
  set_has_action_type();
  action_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedPrivilegeProto.action_type)
}
inline ::std::string* ResolvedPrivilegeProto::mutable_action_type() {
  set_has_action_type();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedPrivilegeProto.action_type)
  return action_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedPrivilegeProto::release_action_type() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedPrivilegeProto.action_type)
  if (!has_action_type()) {
    return NULL;
  }
  clear_has_action_type();
  return action_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedPrivilegeProto::set_allocated_action_type(::std::string* action_type) {
  if (action_type != NULL) {
    set_has_action_type();
  } else {
    clear_has_action_type();
  }
  action_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action_type);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedPrivilegeProto.action_type)
}

// repeated .zetasql.ResolvedObjectUnitProto unit_list = 3;
inline int ResolvedPrivilegeProto::unit_list_size() const {
  return unit_list_.size();
}
inline void ResolvedPrivilegeProto::clear_unit_list() {
  unit_list_.Clear();
}
inline ::zetasql::ResolvedObjectUnitProto* ResolvedPrivilegeProto::mutable_unit_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedPrivilegeProto.unit_list)
  return unit_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedObjectUnitProto >*
ResolvedPrivilegeProto::mutable_unit_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedPrivilegeProto.unit_list)
  return &unit_list_;
}
inline const ::zetasql::ResolvedObjectUnitProto& ResolvedPrivilegeProto::unit_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedPrivilegeProto.unit_list)
  return unit_list_.Get(index);
}
inline ::zetasql::ResolvedObjectUnitProto* ResolvedPrivilegeProto::add_unit_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedPrivilegeProto.unit_list)
  return unit_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedObjectUnitProto >&
ResolvedPrivilegeProto::unit_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedPrivilegeProto.unit_list)
  return unit_list_;
}

// -------------------------------------------------------------------

// AnyResolvedGrantOrRevokeStmtProto

// optional .zetasql.ResolvedGrantStmtProto resolved_grant_stmt_node = 69;
inline bool AnyResolvedGrantOrRevokeStmtProto::has_resolved_grant_stmt_node() const {
  return node_case() == kResolvedGrantStmtNode;
}
inline void AnyResolvedGrantOrRevokeStmtProto::set_has_resolved_grant_stmt_node() {
  _oneof_case_[0] = kResolvedGrantStmtNode;
}
inline void AnyResolvedGrantOrRevokeStmtProto::clear_resolved_grant_stmt_node() {
  if (has_resolved_grant_stmt_node()) {
    delete node_.resolved_grant_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedGrantStmtProto& AnyResolvedGrantOrRevokeStmtProto::_internal_resolved_grant_stmt_node() const {
  return *node_.resolved_grant_stmt_node_;
}
inline ::zetasql::ResolvedGrantStmtProto* AnyResolvedGrantOrRevokeStmtProto::release_resolved_grant_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedGrantOrRevokeStmtProto.resolved_grant_stmt_node)
  if (has_resolved_grant_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedGrantStmtProto* temp = node_.resolved_grant_stmt_node_;
    node_.resolved_grant_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedGrantStmtProto& AnyResolvedGrantOrRevokeStmtProto::resolved_grant_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedGrantOrRevokeStmtProto.resolved_grant_stmt_node)
  return has_resolved_grant_stmt_node()
      ? *node_.resolved_grant_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedGrantStmtProto*>(&::zetasql::_ResolvedGrantStmtProto_default_instance_);
}
inline ::zetasql::ResolvedGrantStmtProto* AnyResolvedGrantOrRevokeStmtProto::mutable_resolved_grant_stmt_node() {
  if (!has_resolved_grant_stmt_node()) {
    clear_node();
    set_has_resolved_grant_stmt_node();
    node_.resolved_grant_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedGrantStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedGrantOrRevokeStmtProto.resolved_grant_stmt_node)
  return node_.resolved_grant_stmt_node_;
}

// optional .zetasql.ResolvedRevokeStmtProto resolved_revoke_stmt_node = 70;
inline bool AnyResolvedGrantOrRevokeStmtProto::has_resolved_revoke_stmt_node() const {
  return node_case() == kResolvedRevokeStmtNode;
}
inline void AnyResolvedGrantOrRevokeStmtProto::set_has_resolved_revoke_stmt_node() {
  _oneof_case_[0] = kResolvedRevokeStmtNode;
}
inline void AnyResolvedGrantOrRevokeStmtProto::clear_resolved_revoke_stmt_node() {
  if (has_resolved_revoke_stmt_node()) {
    delete node_.resolved_revoke_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedRevokeStmtProto& AnyResolvedGrantOrRevokeStmtProto::_internal_resolved_revoke_stmt_node() const {
  return *node_.resolved_revoke_stmt_node_;
}
inline ::zetasql::ResolvedRevokeStmtProto* AnyResolvedGrantOrRevokeStmtProto::release_resolved_revoke_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedGrantOrRevokeStmtProto.resolved_revoke_stmt_node)
  if (has_resolved_revoke_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedRevokeStmtProto* temp = node_.resolved_revoke_stmt_node_;
    node_.resolved_revoke_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedRevokeStmtProto& AnyResolvedGrantOrRevokeStmtProto::resolved_revoke_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedGrantOrRevokeStmtProto.resolved_revoke_stmt_node)
  return has_resolved_revoke_stmt_node()
      ? *node_.resolved_revoke_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedRevokeStmtProto*>(&::zetasql::_ResolvedRevokeStmtProto_default_instance_);
}
inline ::zetasql::ResolvedRevokeStmtProto* AnyResolvedGrantOrRevokeStmtProto::mutable_resolved_revoke_stmt_node() {
  if (!has_resolved_revoke_stmt_node()) {
    clear_node();
    set_has_resolved_revoke_stmt_node();
    node_.resolved_revoke_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedRevokeStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedGrantOrRevokeStmtProto.resolved_revoke_stmt_node)
  return node_.resolved_revoke_stmt_node_;
}

inline bool AnyResolvedGrantOrRevokeStmtProto::has_node() const {
  return node_case() != NODE_NOT_SET;
}
inline void AnyResolvedGrantOrRevokeStmtProto::clear_has_node() {
  _oneof_case_[0] = NODE_NOT_SET;
}
inline AnyResolvedGrantOrRevokeStmtProto::NodeCase AnyResolvedGrantOrRevokeStmtProto::node_case() const {
  return AnyResolvedGrantOrRevokeStmtProto::NodeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResolvedGrantOrRevokeStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedGrantOrRevokeStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedGrantOrRevokeStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedGrantOrRevokeStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedGrantOrRevokeStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedGrantOrRevokeStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedGrantOrRevokeStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGrantOrRevokeStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedGrantOrRevokeStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedGrantOrRevokeStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedGrantOrRevokeStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedGrantOrRevokeStmtProto.parent)
  return parent_;
}
inline void ResolvedGrantOrRevokeStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedGrantOrRevokeStmtProto.parent)
}

// repeated .zetasql.ResolvedPrivilegeProto privilege_list = 2;
inline int ResolvedGrantOrRevokeStmtProto::privilege_list_size() const {
  return privilege_list_.size();
}
inline void ResolvedGrantOrRevokeStmtProto::clear_privilege_list() {
  privilege_list_.Clear();
}
inline ::zetasql::ResolvedPrivilegeProto* ResolvedGrantOrRevokeStmtProto::mutable_privilege_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedGrantOrRevokeStmtProto.privilege_list)
  return privilege_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedPrivilegeProto >*
ResolvedGrantOrRevokeStmtProto::mutable_privilege_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedGrantOrRevokeStmtProto.privilege_list)
  return &privilege_list_;
}
inline const ::zetasql::ResolvedPrivilegeProto& ResolvedGrantOrRevokeStmtProto::privilege_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGrantOrRevokeStmtProto.privilege_list)
  return privilege_list_.Get(index);
}
inline ::zetasql::ResolvedPrivilegeProto* ResolvedGrantOrRevokeStmtProto::add_privilege_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedGrantOrRevokeStmtProto.privilege_list)
  return privilege_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedPrivilegeProto >&
ResolvedGrantOrRevokeStmtProto::privilege_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedGrantOrRevokeStmtProto.privilege_list)
  return privilege_list_;
}

// optional string object_type = 3;
inline bool ResolvedGrantOrRevokeStmtProto::has_object_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedGrantOrRevokeStmtProto::set_has_object_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedGrantOrRevokeStmtProto::clear_has_object_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedGrantOrRevokeStmtProto::clear_object_type() {
  object_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_object_type();
}
inline const ::std::string& ResolvedGrantOrRevokeStmtProto::object_type() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGrantOrRevokeStmtProto.object_type)
  return object_type_.GetNoArena();
}
inline void ResolvedGrantOrRevokeStmtProto::set_object_type(const ::std::string& value) {
  set_has_object_type();
  object_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedGrantOrRevokeStmtProto.object_type)
}
#if LANG_CXX11
inline void ResolvedGrantOrRevokeStmtProto::set_object_type(::std::string&& value) {
  set_has_object_type();
  object_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedGrantOrRevokeStmtProto.object_type)
}
#endif
inline void ResolvedGrantOrRevokeStmtProto::set_object_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_object_type();
  object_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedGrantOrRevokeStmtProto.object_type)
}
inline void ResolvedGrantOrRevokeStmtProto::set_object_type(const char* value, size_t size) {
  set_has_object_type();
  object_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedGrantOrRevokeStmtProto.object_type)
}
inline ::std::string* ResolvedGrantOrRevokeStmtProto::mutable_object_type() {
  set_has_object_type();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedGrantOrRevokeStmtProto.object_type)
  return object_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedGrantOrRevokeStmtProto::release_object_type() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedGrantOrRevokeStmtProto.object_type)
  if (!has_object_type()) {
    return NULL;
  }
  clear_has_object_type();
  return object_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedGrantOrRevokeStmtProto::set_allocated_object_type(::std::string* object_type) {
  if (object_type != NULL) {
    set_has_object_type();
  } else {
    clear_has_object_type();
  }
  object_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_type);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedGrantOrRevokeStmtProto.object_type)
}

// repeated string name_path = 4;
inline int ResolvedGrantOrRevokeStmtProto::name_path_size() const {
  return name_path_.size();
}
inline void ResolvedGrantOrRevokeStmtProto::clear_name_path() {
  name_path_.Clear();
}
inline const ::std::string& ResolvedGrantOrRevokeStmtProto::name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGrantOrRevokeStmtProto.name_path)
  return name_path_.Get(index);
}
inline ::std::string* ResolvedGrantOrRevokeStmtProto::mutable_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedGrantOrRevokeStmtProto.name_path)
  return name_path_.Mutable(index);
}
inline void ResolvedGrantOrRevokeStmtProto::set_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedGrantOrRevokeStmtProto.name_path)
  name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedGrantOrRevokeStmtProto::set_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedGrantOrRevokeStmtProto.name_path)
  name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedGrantOrRevokeStmtProto::set_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedGrantOrRevokeStmtProto.name_path)
}
inline void ResolvedGrantOrRevokeStmtProto::set_name_path(int index, const char* value, size_t size) {
  name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedGrantOrRevokeStmtProto.name_path)
}
inline ::std::string* ResolvedGrantOrRevokeStmtProto::add_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedGrantOrRevokeStmtProto.name_path)
  return name_path_.Add();
}
inline void ResolvedGrantOrRevokeStmtProto::add_name_path(const ::std::string& value) {
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedGrantOrRevokeStmtProto.name_path)
}
#if LANG_CXX11
inline void ResolvedGrantOrRevokeStmtProto::add_name_path(::std::string&& value) {
  name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedGrantOrRevokeStmtProto.name_path)
}
#endif
inline void ResolvedGrantOrRevokeStmtProto::add_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedGrantOrRevokeStmtProto.name_path)
}
inline void ResolvedGrantOrRevokeStmtProto::add_name_path(const char* value, size_t size) {
  name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedGrantOrRevokeStmtProto.name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedGrantOrRevokeStmtProto::name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedGrantOrRevokeStmtProto.name_path)
  return name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedGrantOrRevokeStmtProto::mutable_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedGrantOrRevokeStmtProto.name_path)
  return &name_path_;
}

// repeated string grantee_list = 5;
inline int ResolvedGrantOrRevokeStmtProto::grantee_list_size() const {
  return grantee_list_.size();
}
inline void ResolvedGrantOrRevokeStmtProto::clear_grantee_list() {
  grantee_list_.Clear();
}
inline const ::std::string& ResolvedGrantOrRevokeStmtProto::grantee_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGrantOrRevokeStmtProto.grantee_list)
  return grantee_list_.Get(index);
}
inline ::std::string* ResolvedGrantOrRevokeStmtProto::mutable_grantee_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedGrantOrRevokeStmtProto.grantee_list)
  return grantee_list_.Mutable(index);
}
inline void ResolvedGrantOrRevokeStmtProto::set_grantee_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedGrantOrRevokeStmtProto.grantee_list)
  grantee_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedGrantOrRevokeStmtProto::set_grantee_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedGrantOrRevokeStmtProto.grantee_list)
  grantee_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedGrantOrRevokeStmtProto::set_grantee_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  grantee_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedGrantOrRevokeStmtProto.grantee_list)
}
inline void ResolvedGrantOrRevokeStmtProto::set_grantee_list(int index, const char* value, size_t size) {
  grantee_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedGrantOrRevokeStmtProto.grantee_list)
}
inline ::std::string* ResolvedGrantOrRevokeStmtProto::add_grantee_list() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedGrantOrRevokeStmtProto.grantee_list)
  return grantee_list_.Add();
}
inline void ResolvedGrantOrRevokeStmtProto::add_grantee_list(const ::std::string& value) {
  grantee_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedGrantOrRevokeStmtProto.grantee_list)
}
#if LANG_CXX11
inline void ResolvedGrantOrRevokeStmtProto::add_grantee_list(::std::string&& value) {
  grantee_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedGrantOrRevokeStmtProto.grantee_list)
}
#endif
inline void ResolvedGrantOrRevokeStmtProto::add_grantee_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  grantee_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedGrantOrRevokeStmtProto.grantee_list)
}
inline void ResolvedGrantOrRevokeStmtProto::add_grantee_list(const char* value, size_t size) {
  grantee_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedGrantOrRevokeStmtProto.grantee_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedGrantOrRevokeStmtProto::grantee_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedGrantOrRevokeStmtProto.grantee_list)
  return grantee_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedGrantOrRevokeStmtProto::mutable_grantee_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedGrantOrRevokeStmtProto.grantee_list)
  return &grantee_list_;
}

// repeated .zetasql.AnyResolvedExprProto grantee_expr_list = 6;
inline int ResolvedGrantOrRevokeStmtProto::grantee_expr_list_size() const {
  return grantee_expr_list_.size();
}
inline void ResolvedGrantOrRevokeStmtProto::clear_grantee_expr_list() {
  grantee_expr_list_.Clear();
}
inline ::zetasql::AnyResolvedExprProto* ResolvedGrantOrRevokeStmtProto::mutable_grantee_expr_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedGrantOrRevokeStmtProto.grantee_expr_list)
  return grantee_expr_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
ResolvedGrantOrRevokeStmtProto::mutable_grantee_expr_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedGrantOrRevokeStmtProto.grantee_expr_list)
  return &grantee_expr_list_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedGrantOrRevokeStmtProto::grantee_expr_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGrantOrRevokeStmtProto.grantee_expr_list)
  return grantee_expr_list_.Get(index);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedGrantOrRevokeStmtProto::add_grantee_expr_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedGrantOrRevokeStmtProto.grantee_expr_list)
  return grantee_expr_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
ResolvedGrantOrRevokeStmtProto::grantee_expr_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedGrantOrRevokeStmtProto.grantee_expr_list)
  return grantee_expr_list_;
}

// -------------------------------------------------------------------

// ResolvedGrantStmtProto

// optional .zetasql.ResolvedGrantOrRevokeStmtProto parent = 1;
inline bool ResolvedGrantStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedGrantStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedGrantStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedGrantStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedGrantOrRevokeStmtProto& ResolvedGrantStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedGrantOrRevokeStmtProto& ResolvedGrantStmtProto::parent() const {
  const ::zetasql::ResolvedGrantOrRevokeStmtProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGrantStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedGrantOrRevokeStmtProto*>(
      &::zetasql::_ResolvedGrantOrRevokeStmtProto_default_instance_);
}
inline ::zetasql::ResolvedGrantOrRevokeStmtProto* ResolvedGrantStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedGrantStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedGrantOrRevokeStmtProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedGrantOrRevokeStmtProto* ResolvedGrantStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedGrantOrRevokeStmtProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedGrantStmtProto.parent)
  return parent_;
}
inline void ResolvedGrantStmtProto::set_allocated_parent(::zetasql::ResolvedGrantOrRevokeStmtProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedGrantStmtProto.parent)
}

// -------------------------------------------------------------------

// ResolvedRevokeStmtProto

// optional .zetasql.ResolvedGrantOrRevokeStmtProto parent = 1;
inline bool ResolvedRevokeStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedRevokeStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedRevokeStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedRevokeStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedGrantOrRevokeStmtProto& ResolvedRevokeStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedGrantOrRevokeStmtProto& ResolvedRevokeStmtProto::parent() const {
  const ::zetasql::ResolvedGrantOrRevokeStmtProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRevokeStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedGrantOrRevokeStmtProto*>(
      &::zetasql::_ResolvedGrantOrRevokeStmtProto_default_instance_);
}
inline ::zetasql::ResolvedGrantOrRevokeStmtProto* ResolvedRevokeStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedRevokeStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedGrantOrRevokeStmtProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedGrantOrRevokeStmtProto* ResolvedRevokeStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedGrantOrRevokeStmtProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedRevokeStmtProto.parent)
  return parent_;
}
inline void ResolvedRevokeStmtProto::set_allocated_parent(::zetasql::ResolvedGrantOrRevokeStmtProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedRevokeStmtProto.parent)
}

// -------------------------------------------------------------------

// AnyResolvedAlterObjectStmtProto

// optional .zetasql.ResolvedAlterRowAccessPolicyStmtProto resolved_alter_row_access_policy_stmt_node = 75;
inline bool AnyResolvedAlterObjectStmtProto::has_resolved_alter_row_access_policy_stmt_node() const {
  return node_case() == kResolvedAlterRowAccessPolicyStmtNode;
}
inline void AnyResolvedAlterObjectStmtProto::set_has_resolved_alter_row_access_policy_stmt_node() {
  _oneof_case_[0] = kResolvedAlterRowAccessPolicyStmtNode;
}
inline void AnyResolvedAlterObjectStmtProto::clear_resolved_alter_row_access_policy_stmt_node() {
  if (has_resolved_alter_row_access_policy_stmt_node()) {
    delete node_.resolved_alter_row_access_policy_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAlterRowAccessPolicyStmtProto& AnyResolvedAlterObjectStmtProto::_internal_resolved_alter_row_access_policy_stmt_node() const {
  return *node_.resolved_alter_row_access_policy_stmt_node_;
}
inline ::zetasql::ResolvedAlterRowAccessPolicyStmtProto* AnyResolvedAlterObjectStmtProto::release_resolved_alter_row_access_policy_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_row_access_policy_stmt_node)
  if (has_resolved_alter_row_access_policy_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedAlterRowAccessPolicyStmtProto* temp = node_.resolved_alter_row_access_policy_stmt_node_;
    node_.resolved_alter_row_access_policy_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAlterRowAccessPolicyStmtProto& AnyResolvedAlterObjectStmtProto::resolved_alter_row_access_policy_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_row_access_policy_stmt_node)
  return has_resolved_alter_row_access_policy_stmt_node()
      ? *node_.resolved_alter_row_access_policy_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedAlterRowAccessPolicyStmtProto*>(&::zetasql::_ResolvedAlterRowAccessPolicyStmtProto_default_instance_);
}
inline ::zetasql::ResolvedAlterRowAccessPolicyStmtProto* AnyResolvedAlterObjectStmtProto::mutable_resolved_alter_row_access_policy_stmt_node() {
  if (!has_resolved_alter_row_access_policy_stmt_node()) {
    clear_node();
    set_has_resolved_alter_row_access_policy_stmt_node();
    node_.resolved_alter_row_access_policy_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedAlterRowAccessPolicyStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_row_access_policy_stmt_node)
  return node_.resolved_alter_row_access_policy_stmt_node_;
}

// optional .zetasql.ResolvedAlterTableStmtProto resolved_alter_table_stmt_node = 115;
inline bool AnyResolvedAlterObjectStmtProto::has_resolved_alter_table_stmt_node() const {
  return node_case() == kResolvedAlterTableStmtNode;
}
inline void AnyResolvedAlterObjectStmtProto::set_has_resolved_alter_table_stmt_node() {
  _oneof_case_[0] = kResolvedAlterTableStmtNode;
}
inline void AnyResolvedAlterObjectStmtProto::clear_resolved_alter_table_stmt_node() {
  if (has_resolved_alter_table_stmt_node()) {
    delete node_.resolved_alter_table_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAlterTableStmtProto& AnyResolvedAlterObjectStmtProto::_internal_resolved_alter_table_stmt_node() const {
  return *node_.resolved_alter_table_stmt_node_;
}
inline ::zetasql::ResolvedAlterTableStmtProto* AnyResolvedAlterObjectStmtProto::release_resolved_alter_table_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_table_stmt_node)
  if (has_resolved_alter_table_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedAlterTableStmtProto* temp = node_.resolved_alter_table_stmt_node_;
    node_.resolved_alter_table_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAlterTableStmtProto& AnyResolvedAlterObjectStmtProto::resolved_alter_table_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_table_stmt_node)
  return has_resolved_alter_table_stmt_node()
      ? *node_.resolved_alter_table_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedAlterTableStmtProto*>(&::zetasql::_ResolvedAlterTableStmtProto_default_instance_);
}
inline ::zetasql::ResolvedAlterTableStmtProto* AnyResolvedAlterObjectStmtProto::mutable_resolved_alter_table_stmt_node() {
  if (!has_resolved_alter_table_stmt_node()) {
    clear_node();
    set_has_resolved_alter_table_stmt_node();
    node_.resolved_alter_table_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedAlterTableStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_table_stmt_node)
  return node_.resolved_alter_table_stmt_node_;
}

// optional .zetasql.ResolvedAlterViewStmtProto resolved_alter_view_stmt_node = 118;
inline bool AnyResolvedAlterObjectStmtProto::has_resolved_alter_view_stmt_node() const {
  return node_case() == kResolvedAlterViewStmtNode;
}
inline void AnyResolvedAlterObjectStmtProto::set_has_resolved_alter_view_stmt_node() {
  _oneof_case_[0] = kResolvedAlterViewStmtNode;
}
inline void AnyResolvedAlterObjectStmtProto::clear_resolved_alter_view_stmt_node() {
  if (has_resolved_alter_view_stmt_node()) {
    delete node_.resolved_alter_view_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAlterViewStmtProto& AnyResolvedAlterObjectStmtProto::_internal_resolved_alter_view_stmt_node() const {
  return *node_.resolved_alter_view_stmt_node_;
}
inline ::zetasql::ResolvedAlterViewStmtProto* AnyResolvedAlterObjectStmtProto::release_resolved_alter_view_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_view_stmt_node)
  if (has_resolved_alter_view_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedAlterViewStmtProto* temp = node_.resolved_alter_view_stmt_node_;
    node_.resolved_alter_view_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAlterViewStmtProto& AnyResolvedAlterObjectStmtProto::resolved_alter_view_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_view_stmt_node)
  return has_resolved_alter_view_stmt_node()
      ? *node_.resolved_alter_view_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedAlterViewStmtProto*>(&::zetasql::_ResolvedAlterViewStmtProto_default_instance_);
}
inline ::zetasql::ResolvedAlterViewStmtProto* AnyResolvedAlterObjectStmtProto::mutable_resolved_alter_view_stmt_node() {
  if (!has_resolved_alter_view_stmt_node()) {
    clear_node();
    set_has_resolved_alter_view_stmt_node();
    node_.resolved_alter_view_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedAlterViewStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_view_stmt_node)
  return node_.resolved_alter_view_stmt_node_;
}

// optional .zetasql.ResolvedAlterMaterializedViewStmtProto resolved_alter_materialized_view_stmt_node = 127;
inline bool AnyResolvedAlterObjectStmtProto::has_resolved_alter_materialized_view_stmt_node() const {
  return node_case() == kResolvedAlterMaterializedViewStmtNode;
}
inline void AnyResolvedAlterObjectStmtProto::set_has_resolved_alter_materialized_view_stmt_node() {
  _oneof_case_[0] = kResolvedAlterMaterializedViewStmtNode;
}
inline void AnyResolvedAlterObjectStmtProto::clear_resolved_alter_materialized_view_stmt_node() {
  if (has_resolved_alter_materialized_view_stmt_node()) {
    delete node_.resolved_alter_materialized_view_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAlterMaterializedViewStmtProto& AnyResolvedAlterObjectStmtProto::_internal_resolved_alter_materialized_view_stmt_node() const {
  return *node_.resolved_alter_materialized_view_stmt_node_;
}
inline ::zetasql::ResolvedAlterMaterializedViewStmtProto* AnyResolvedAlterObjectStmtProto::release_resolved_alter_materialized_view_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_materialized_view_stmt_node)
  if (has_resolved_alter_materialized_view_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedAlterMaterializedViewStmtProto* temp = node_.resolved_alter_materialized_view_stmt_node_;
    node_.resolved_alter_materialized_view_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAlterMaterializedViewStmtProto& AnyResolvedAlterObjectStmtProto::resolved_alter_materialized_view_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_materialized_view_stmt_node)
  return has_resolved_alter_materialized_view_stmt_node()
      ? *node_.resolved_alter_materialized_view_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedAlterMaterializedViewStmtProto*>(&::zetasql::_ResolvedAlterMaterializedViewStmtProto_default_instance_);
}
inline ::zetasql::ResolvedAlterMaterializedViewStmtProto* AnyResolvedAlterObjectStmtProto::mutable_resolved_alter_materialized_view_stmt_node() {
  if (!has_resolved_alter_materialized_view_stmt_node()) {
    clear_node();
    set_has_resolved_alter_materialized_view_stmt_node();
    node_.resolved_alter_materialized_view_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedAlterMaterializedViewStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_materialized_view_stmt_node)
  return node_.resolved_alter_materialized_view_stmt_node_;
}

// optional .zetasql.ResolvedAlterDatabaseStmtProto resolved_alter_database_stmt_node = 134;
inline bool AnyResolvedAlterObjectStmtProto::has_resolved_alter_database_stmt_node() const {
  return node_case() == kResolvedAlterDatabaseStmtNode;
}
inline void AnyResolvedAlterObjectStmtProto::set_has_resolved_alter_database_stmt_node() {
  _oneof_case_[0] = kResolvedAlterDatabaseStmtNode;
}
inline void AnyResolvedAlterObjectStmtProto::clear_resolved_alter_database_stmt_node() {
  if (has_resolved_alter_database_stmt_node()) {
    delete node_.resolved_alter_database_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAlterDatabaseStmtProto& AnyResolvedAlterObjectStmtProto::_internal_resolved_alter_database_stmt_node() const {
  return *node_.resolved_alter_database_stmt_node_;
}
inline ::zetasql::ResolvedAlterDatabaseStmtProto* AnyResolvedAlterObjectStmtProto::release_resolved_alter_database_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_database_stmt_node)
  if (has_resolved_alter_database_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedAlterDatabaseStmtProto* temp = node_.resolved_alter_database_stmt_node_;
    node_.resolved_alter_database_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAlterDatabaseStmtProto& AnyResolvedAlterObjectStmtProto::resolved_alter_database_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_database_stmt_node)
  return has_resolved_alter_database_stmt_node()
      ? *node_.resolved_alter_database_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedAlterDatabaseStmtProto*>(&::zetasql::_ResolvedAlterDatabaseStmtProto_default_instance_);
}
inline ::zetasql::ResolvedAlterDatabaseStmtProto* AnyResolvedAlterObjectStmtProto::mutable_resolved_alter_database_stmt_node() {
  if (!has_resolved_alter_database_stmt_node()) {
    clear_node();
    set_has_resolved_alter_database_stmt_node();
    node_.resolved_alter_database_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedAlterDatabaseStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_database_stmt_node)
  return node_.resolved_alter_database_stmt_node_;
}

// optional .zetasql.ResolvedAlterAllRowAccessPoliciesStmtProto resolved_alter_all_row_access_policies_stmt_node = 145;
inline bool AnyResolvedAlterObjectStmtProto::has_resolved_alter_all_row_access_policies_stmt_node() const {
  return node_case() == kResolvedAlterAllRowAccessPoliciesStmtNode;
}
inline void AnyResolvedAlterObjectStmtProto::set_has_resolved_alter_all_row_access_policies_stmt_node() {
  _oneof_case_[0] = kResolvedAlterAllRowAccessPoliciesStmtNode;
}
inline void AnyResolvedAlterObjectStmtProto::clear_resolved_alter_all_row_access_policies_stmt_node() {
  if (has_resolved_alter_all_row_access_policies_stmt_node()) {
    delete node_.resolved_alter_all_row_access_policies_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto& AnyResolvedAlterObjectStmtProto::_internal_resolved_alter_all_row_access_policies_stmt_node() const {
  return *node_.resolved_alter_all_row_access_policies_stmt_node_;
}
inline ::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto* AnyResolvedAlterObjectStmtProto::release_resolved_alter_all_row_access_policies_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_all_row_access_policies_stmt_node)
  if (has_resolved_alter_all_row_access_policies_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto* temp = node_.resolved_alter_all_row_access_policies_stmt_node_;
    node_.resolved_alter_all_row_access_policies_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto& AnyResolvedAlterObjectStmtProto::resolved_alter_all_row_access_policies_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_all_row_access_policies_stmt_node)
  return has_resolved_alter_all_row_access_policies_stmt_node()
      ? *node_.resolved_alter_all_row_access_policies_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto*>(&::zetasql::_ResolvedAlterAllRowAccessPoliciesStmtProto_default_instance_);
}
inline ::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto* AnyResolvedAlterObjectStmtProto::mutable_resolved_alter_all_row_access_policies_stmt_node() {
  if (!has_resolved_alter_all_row_access_policies_stmt_node()) {
    clear_node();
    set_has_resolved_alter_all_row_access_policies_stmt_node();
    node_.resolved_alter_all_row_access_policies_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_all_row_access_policies_stmt_node)
  return node_.resolved_alter_all_row_access_policies_stmt_node_;
}

// optional .zetasql.ResolvedAlterEntityStmtProto resolved_alter_entity_stmt_node = 155;
inline bool AnyResolvedAlterObjectStmtProto::has_resolved_alter_entity_stmt_node() const {
  return node_case() == kResolvedAlterEntityStmtNode;
}
inline void AnyResolvedAlterObjectStmtProto::set_has_resolved_alter_entity_stmt_node() {
  _oneof_case_[0] = kResolvedAlterEntityStmtNode;
}
inline void AnyResolvedAlterObjectStmtProto::clear_resolved_alter_entity_stmt_node() {
  if (has_resolved_alter_entity_stmt_node()) {
    delete node_.resolved_alter_entity_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAlterEntityStmtProto& AnyResolvedAlterObjectStmtProto::_internal_resolved_alter_entity_stmt_node() const {
  return *node_.resolved_alter_entity_stmt_node_;
}
inline ::zetasql::ResolvedAlterEntityStmtProto* AnyResolvedAlterObjectStmtProto::release_resolved_alter_entity_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_entity_stmt_node)
  if (has_resolved_alter_entity_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedAlterEntityStmtProto* temp = node_.resolved_alter_entity_stmt_node_;
    node_.resolved_alter_entity_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAlterEntityStmtProto& AnyResolvedAlterObjectStmtProto::resolved_alter_entity_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_entity_stmt_node)
  return has_resolved_alter_entity_stmt_node()
      ? *node_.resolved_alter_entity_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedAlterEntityStmtProto*>(&::zetasql::_ResolvedAlterEntityStmtProto_default_instance_);
}
inline ::zetasql::ResolvedAlterEntityStmtProto* AnyResolvedAlterObjectStmtProto::mutable_resolved_alter_entity_stmt_node() {
  if (!has_resolved_alter_entity_stmt_node()) {
    clear_node();
    set_has_resolved_alter_entity_stmt_node();
    node_.resolved_alter_entity_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedAlterEntityStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_entity_stmt_node)
  return node_.resolved_alter_entity_stmt_node_;
}

// optional .zetasql.ResolvedAlterSchemaStmtProto resolved_alter_schema_stmt_node = 160;
inline bool AnyResolvedAlterObjectStmtProto::has_resolved_alter_schema_stmt_node() const {
  return node_case() == kResolvedAlterSchemaStmtNode;
}
inline void AnyResolvedAlterObjectStmtProto::set_has_resolved_alter_schema_stmt_node() {
  _oneof_case_[0] = kResolvedAlterSchemaStmtNode;
}
inline void AnyResolvedAlterObjectStmtProto::clear_resolved_alter_schema_stmt_node() {
  if (has_resolved_alter_schema_stmt_node()) {
    delete node_.resolved_alter_schema_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAlterSchemaStmtProto& AnyResolvedAlterObjectStmtProto::_internal_resolved_alter_schema_stmt_node() const {
  return *node_.resolved_alter_schema_stmt_node_;
}
inline ::zetasql::ResolvedAlterSchemaStmtProto* AnyResolvedAlterObjectStmtProto::release_resolved_alter_schema_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_schema_stmt_node)
  if (has_resolved_alter_schema_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedAlterSchemaStmtProto* temp = node_.resolved_alter_schema_stmt_node_;
    node_.resolved_alter_schema_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAlterSchemaStmtProto& AnyResolvedAlterObjectStmtProto::resolved_alter_schema_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_schema_stmt_node)
  return has_resolved_alter_schema_stmt_node()
      ? *node_.resolved_alter_schema_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedAlterSchemaStmtProto*>(&::zetasql::_ResolvedAlterSchemaStmtProto_default_instance_);
}
inline ::zetasql::ResolvedAlterSchemaStmtProto* AnyResolvedAlterObjectStmtProto::mutable_resolved_alter_schema_stmt_node() {
  if (!has_resolved_alter_schema_stmt_node()) {
    clear_node();
    set_has_resolved_alter_schema_stmt_node();
    node_.resolved_alter_schema_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedAlterSchemaStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_schema_stmt_node)
  return node_.resolved_alter_schema_stmt_node_;
}

// optional .zetasql.ResolvedAlterPrivilegeRestrictionStmtProto resolved_alter_privilege_restriction_stmt_node = 196;
inline bool AnyResolvedAlterObjectStmtProto::has_resolved_alter_privilege_restriction_stmt_node() const {
  return node_case() == kResolvedAlterPrivilegeRestrictionStmtNode;
}
inline void AnyResolvedAlterObjectStmtProto::set_has_resolved_alter_privilege_restriction_stmt_node() {
  _oneof_case_[0] = kResolvedAlterPrivilegeRestrictionStmtNode;
}
inline void AnyResolvedAlterObjectStmtProto::clear_resolved_alter_privilege_restriction_stmt_node() {
  if (has_resolved_alter_privilege_restriction_stmt_node()) {
    delete node_.resolved_alter_privilege_restriction_stmt_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAlterPrivilegeRestrictionStmtProto& AnyResolvedAlterObjectStmtProto::_internal_resolved_alter_privilege_restriction_stmt_node() const {
  return *node_.resolved_alter_privilege_restriction_stmt_node_;
}
inline ::zetasql::ResolvedAlterPrivilegeRestrictionStmtProto* AnyResolvedAlterObjectStmtProto::release_resolved_alter_privilege_restriction_stmt_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_privilege_restriction_stmt_node)
  if (has_resolved_alter_privilege_restriction_stmt_node()) {
    clear_has_node();
      ::zetasql::ResolvedAlterPrivilegeRestrictionStmtProto* temp = node_.resolved_alter_privilege_restriction_stmt_node_;
    node_.resolved_alter_privilege_restriction_stmt_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAlterPrivilegeRestrictionStmtProto& AnyResolvedAlterObjectStmtProto::resolved_alter_privilege_restriction_stmt_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_privilege_restriction_stmt_node)
  return has_resolved_alter_privilege_restriction_stmt_node()
      ? *node_.resolved_alter_privilege_restriction_stmt_node_
      : *reinterpret_cast< ::zetasql::ResolvedAlterPrivilegeRestrictionStmtProto*>(&::zetasql::_ResolvedAlterPrivilegeRestrictionStmtProto_default_instance_);
}
inline ::zetasql::ResolvedAlterPrivilegeRestrictionStmtProto* AnyResolvedAlterObjectStmtProto::mutable_resolved_alter_privilege_restriction_stmt_node() {
  if (!has_resolved_alter_privilege_restriction_stmt_node()) {
    clear_node();
    set_has_resolved_alter_privilege_restriction_stmt_node();
    node_.resolved_alter_privilege_restriction_stmt_node_ = CreateMaybeMessage< ::zetasql::ResolvedAlterPrivilegeRestrictionStmtProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_privilege_restriction_stmt_node)
  return node_.resolved_alter_privilege_restriction_stmt_node_;
}

inline bool AnyResolvedAlterObjectStmtProto::has_node() const {
  return node_case() != NODE_NOT_SET;
}
inline void AnyResolvedAlterObjectStmtProto::clear_has_node() {
  _oneof_case_[0] = NODE_NOT_SET;
}
inline AnyResolvedAlterObjectStmtProto::NodeCase AnyResolvedAlterObjectStmtProto::node_case() const {
  return AnyResolvedAlterObjectStmtProto::NodeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResolvedAlterObjectStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedAlterObjectStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAlterObjectStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAlterObjectStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAlterObjectStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedAlterObjectStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedAlterObjectStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterObjectStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedAlterObjectStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAlterObjectStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedAlterObjectStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterObjectStmtProto.parent)
  return parent_;
}
inline void ResolvedAlterObjectStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAlterObjectStmtProto.parent)
}

// repeated string name_path = 2;
inline int ResolvedAlterObjectStmtProto::name_path_size() const {
  return name_path_.size();
}
inline void ResolvedAlterObjectStmtProto::clear_name_path() {
  name_path_.Clear();
}
inline const ::std::string& ResolvedAlterObjectStmtProto::name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterObjectStmtProto.name_path)
  return name_path_.Get(index);
}
inline ::std::string* ResolvedAlterObjectStmtProto::mutable_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterObjectStmtProto.name_path)
  return name_path_.Mutable(index);
}
inline void ResolvedAlterObjectStmtProto::set_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedAlterObjectStmtProto.name_path)
  name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedAlterObjectStmtProto::set_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedAlterObjectStmtProto.name_path)
  name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedAlterObjectStmtProto::set_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedAlterObjectStmtProto.name_path)
}
inline void ResolvedAlterObjectStmtProto::set_name_path(int index, const char* value, size_t size) {
  name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedAlterObjectStmtProto.name_path)
}
inline ::std::string* ResolvedAlterObjectStmtProto::add_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedAlterObjectStmtProto.name_path)
  return name_path_.Add();
}
inline void ResolvedAlterObjectStmtProto::add_name_path(const ::std::string& value) {
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAlterObjectStmtProto.name_path)
}
#if LANG_CXX11
inline void ResolvedAlterObjectStmtProto::add_name_path(::std::string&& value) {
  name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAlterObjectStmtProto.name_path)
}
#endif
inline void ResolvedAlterObjectStmtProto::add_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedAlterObjectStmtProto.name_path)
}
inline void ResolvedAlterObjectStmtProto::add_name_path(const char* value, size_t size) {
  name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedAlterObjectStmtProto.name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedAlterObjectStmtProto::name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedAlterObjectStmtProto.name_path)
  return name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedAlterObjectStmtProto::mutable_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedAlterObjectStmtProto.name_path)
  return &name_path_;
}

// repeated .zetasql.AnyResolvedAlterActionProto alter_action_list = 3;
inline int ResolvedAlterObjectStmtProto::alter_action_list_size() const {
  return alter_action_list_.size();
}
inline void ResolvedAlterObjectStmtProto::clear_alter_action_list() {
  alter_action_list_.Clear();
}
inline ::zetasql::AnyResolvedAlterActionProto* ResolvedAlterObjectStmtProto::mutable_alter_action_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterObjectStmtProto.alter_action_list)
  return alter_action_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedAlterActionProto >*
ResolvedAlterObjectStmtProto::mutable_alter_action_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedAlterObjectStmtProto.alter_action_list)
  return &alter_action_list_;
}
inline const ::zetasql::AnyResolvedAlterActionProto& ResolvedAlterObjectStmtProto::alter_action_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterObjectStmtProto.alter_action_list)
  return alter_action_list_.Get(index);
}
inline ::zetasql::AnyResolvedAlterActionProto* ResolvedAlterObjectStmtProto::add_alter_action_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAlterObjectStmtProto.alter_action_list)
  return alter_action_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedAlterActionProto >&
ResolvedAlterObjectStmtProto::alter_action_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedAlterObjectStmtProto.alter_action_list)
  return alter_action_list_;
}

// optional bool is_if_exists = 4;
inline bool ResolvedAlterObjectStmtProto::has_is_if_exists() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedAlterObjectStmtProto::set_has_is_if_exists() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedAlterObjectStmtProto::clear_has_is_if_exists() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedAlterObjectStmtProto::clear_is_if_exists() {
  is_if_exists_ = false;
  clear_has_is_if_exists();
}
inline bool ResolvedAlterObjectStmtProto::is_if_exists() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterObjectStmtProto.is_if_exists)
  return is_if_exists_;
}
inline void ResolvedAlterObjectStmtProto::set_is_if_exists(bool value) {
  set_has_is_if_exists();
  is_if_exists_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedAlterObjectStmtProto.is_if_exists)
}

// -------------------------------------------------------------------

// ResolvedAlterDatabaseStmtProto

// optional .zetasql.ResolvedAlterObjectStmtProto parent = 1;
inline bool ResolvedAlterDatabaseStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAlterDatabaseStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAlterDatabaseStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAlterDatabaseStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterObjectStmtProto& ResolvedAlterDatabaseStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterObjectStmtProto& ResolvedAlterDatabaseStmtProto::parent() const {
  const ::zetasql::ResolvedAlterObjectStmtProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterDatabaseStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterObjectStmtProto*>(
      &::zetasql::_ResolvedAlterObjectStmtProto_default_instance_);
}
inline ::zetasql::ResolvedAlterObjectStmtProto* ResolvedAlterDatabaseStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAlterDatabaseStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterObjectStmtProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterObjectStmtProto* ResolvedAlterDatabaseStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterObjectStmtProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterDatabaseStmtProto.parent)
  return parent_;
}
inline void ResolvedAlterDatabaseStmtProto::set_allocated_parent(::zetasql::ResolvedAlterObjectStmtProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAlterDatabaseStmtProto.parent)
}

// -------------------------------------------------------------------

// ResolvedAlterMaterializedViewStmtProto

// optional .zetasql.ResolvedAlterObjectStmtProto parent = 1;
inline bool ResolvedAlterMaterializedViewStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAlterMaterializedViewStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAlterMaterializedViewStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAlterMaterializedViewStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterObjectStmtProto& ResolvedAlterMaterializedViewStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterObjectStmtProto& ResolvedAlterMaterializedViewStmtProto::parent() const {
  const ::zetasql::ResolvedAlterObjectStmtProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterMaterializedViewStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterObjectStmtProto*>(
      &::zetasql::_ResolvedAlterObjectStmtProto_default_instance_);
}
inline ::zetasql::ResolvedAlterObjectStmtProto* ResolvedAlterMaterializedViewStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAlterMaterializedViewStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterObjectStmtProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterObjectStmtProto* ResolvedAlterMaterializedViewStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterObjectStmtProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterMaterializedViewStmtProto.parent)
  return parent_;
}
inline void ResolvedAlterMaterializedViewStmtProto::set_allocated_parent(::zetasql::ResolvedAlterObjectStmtProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAlterMaterializedViewStmtProto.parent)
}

// -------------------------------------------------------------------

// ResolvedAlterSchemaStmtProto

// optional .zetasql.ResolvedAlterObjectStmtProto parent = 1;
inline bool ResolvedAlterSchemaStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAlterSchemaStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAlterSchemaStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAlterSchemaStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterObjectStmtProto& ResolvedAlterSchemaStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterObjectStmtProto& ResolvedAlterSchemaStmtProto::parent() const {
  const ::zetasql::ResolvedAlterObjectStmtProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterSchemaStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterObjectStmtProto*>(
      &::zetasql::_ResolvedAlterObjectStmtProto_default_instance_);
}
inline ::zetasql::ResolvedAlterObjectStmtProto* ResolvedAlterSchemaStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAlterSchemaStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterObjectStmtProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterObjectStmtProto* ResolvedAlterSchemaStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterObjectStmtProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterSchemaStmtProto.parent)
  return parent_;
}
inline void ResolvedAlterSchemaStmtProto::set_allocated_parent(::zetasql::ResolvedAlterObjectStmtProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAlterSchemaStmtProto.parent)
}

// -------------------------------------------------------------------

// ResolvedAlterTableStmtProto

// optional .zetasql.ResolvedAlterObjectStmtProto parent = 1;
inline bool ResolvedAlterTableStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAlterTableStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAlterTableStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAlterTableStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterObjectStmtProto& ResolvedAlterTableStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterObjectStmtProto& ResolvedAlterTableStmtProto::parent() const {
  const ::zetasql::ResolvedAlterObjectStmtProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterTableStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterObjectStmtProto*>(
      &::zetasql::_ResolvedAlterObjectStmtProto_default_instance_);
}
inline ::zetasql::ResolvedAlterObjectStmtProto* ResolvedAlterTableStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAlterTableStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterObjectStmtProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterObjectStmtProto* ResolvedAlterTableStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterObjectStmtProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterTableStmtProto.parent)
  return parent_;
}
inline void ResolvedAlterTableStmtProto::set_allocated_parent(::zetasql::ResolvedAlterObjectStmtProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAlterTableStmtProto.parent)
}

// -------------------------------------------------------------------

// ResolvedAlterViewStmtProto

// optional .zetasql.ResolvedAlterObjectStmtProto parent = 1;
inline bool ResolvedAlterViewStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAlterViewStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAlterViewStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAlterViewStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterObjectStmtProto& ResolvedAlterViewStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterObjectStmtProto& ResolvedAlterViewStmtProto::parent() const {
  const ::zetasql::ResolvedAlterObjectStmtProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterViewStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterObjectStmtProto*>(
      &::zetasql::_ResolvedAlterObjectStmtProto_default_instance_);
}
inline ::zetasql::ResolvedAlterObjectStmtProto* ResolvedAlterViewStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAlterViewStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterObjectStmtProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterObjectStmtProto* ResolvedAlterViewStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterObjectStmtProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterViewStmtProto.parent)
  return parent_;
}
inline void ResolvedAlterViewStmtProto::set_allocated_parent(::zetasql::ResolvedAlterObjectStmtProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAlterViewStmtProto.parent)
}

// -------------------------------------------------------------------

// AnyResolvedAlterActionProto

// optional .zetasql.ResolvedSetOptionsActionProto resolved_set_options_action_node = 117;
inline bool AnyResolvedAlterActionProto::has_resolved_set_options_action_node() const {
  return node_case() == kResolvedSetOptionsActionNode;
}
inline void AnyResolvedAlterActionProto::set_has_resolved_set_options_action_node() {
  _oneof_case_[0] = kResolvedSetOptionsActionNode;
}
inline void AnyResolvedAlterActionProto::clear_resolved_set_options_action_node() {
  if (has_resolved_set_options_action_node()) {
    delete node_.resolved_set_options_action_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedSetOptionsActionProto& AnyResolvedAlterActionProto::_internal_resolved_set_options_action_node() const {
  return *node_.resolved_set_options_action_node_;
}
inline ::zetasql::ResolvedSetOptionsActionProto* AnyResolvedAlterActionProto::release_resolved_set_options_action_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterActionProto.resolved_set_options_action_node)
  if (has_resolved_set_options_action_node()) {
    clear_has_node();
      ::zetasql::ResolvedSetOptionsActionProto* temp = node_.resolved_set_options_action_node_;
    node_.resolved_set_options_action_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedSetOptionsActionProto& AnyResolvedAlterActionProto::resolved_set_options_action_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterActionProto.resolved_set_options_action_node)
  return has_resolved_set_options_action_node()
      ? *node_.resolved_set_options_action_node_
      : *reinterpret_cast< ::zetasql::ResolvedSetOptionsActionProto*>(&::zetasql::_ResolvedSetOptionsActionProto_default_instance_);
}
inline ::zetasql::ResolvedSetOptionsActionProto* AnyResolvedAlterActionProto::mutable_resolved_set_options_action_node() {
  if (!has_resolved_set_options_action_node()) {
    clear_node();
    set_has_resolved_set_options_action_node();
    node_.resolved_set_options_action_node_ = CreateMaybeMessage< ::zetasql::ResolvedSetOptionsActionProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterActionProto.resolved_set_options_action_node)
  return node_.resolved_set_options_action_node_;
}

// optional .zetasql.ResolvedAddColumnActionProto resolved_add_column_action_node = 131;
inline bool AnyResolvedAlterActionProto::has_resolved_add_column_action_node() const {
  return node_case() == kResolvedAddColumnActionNode;
}
inline void AnyResolvedAlterActionProto::set_has_resolved_add_column_action_node() {
  _oneof_case_[0] = kResolvedAddColumnActionNode;
}
inline void AnyResolvedAlterActionProto::clear_resolved_add_column_action_node() {
  if (has_resolved_add_column_action_node()) {
    delete node_.resolved_add_column_action_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAddColumnActionProto& AnyResolvedAlterActionProto::_internal_resolved_add_column_action_node() const {
  return *node_.resolved_add_column_action_node_;
}
inline ::zetasql::ResolvedAddColumnActionProto* AnyResolvedAlterActionProto::release_resolved_add_column_action_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterActionProto.resolved_add_column_action_node)
  if (has_resolved_add_column_action_node()) {
    clear_has_node();
      ::zetasql::ResolvedAddColumnActionProto* temp = node_.resolved_add_column_action_node_;
    node_.resolved_add_column_action_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAddColumnActionProto& AnyResolvedAlterActionProto::resolved_add_column_action_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterActionProto.resolved_add_column_action_node)
  return has_resolved_add_column_action_node()
      ? *node_.resolved_add_column_action_node_
      : *reinterpret_cast< ::zetasql::ResolvedAddColumnActionProto*>(&::zetasql::_ResolvedAddColumnActionProto_default_instance_);
}
inline ::zetasql::ResolvedAddColumnActionProto* AnyResolvedAlterActionProto::mutable_resolved_add_column_action_node() {
  if (!has_resolved_add_column_action_node()) {
    clear_node();
    set_has_resolved_add_column_action_node();
    node_.resolved_add_column_action_node_ = CreateMaybeMessage< ::zetasql::ResolvedAddColumnActionProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterActionProto.resolved_add_column_action_node)
  return node_.resolved_add_column_action_node_;
}

// optional .zetasql.ResolvedDropColumnActionProto resolved_drop_column_action_node = 132;
inline bool AnyResolvedAlterActionProto::has_resolved_drop_column_action_node() const {
  return node_case() == kResolvedDropColumnActionNode;
}
inline void AnyResolvedAlterActionProto::set_has_resolved_drop_column_action_node() {
  _oneof_case_[0] = kResolvedDropColumnActionNode;
}
inline void AnyResolvedAlterActionProto::clear_resolved_drop_column_action_node() {
  if (has_resolved_drop_column_action_node()) {
    delete node_.resolved_drop_column_action_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedDropColumnActionProto& AnyResolvedAlterActionProto::_internal_resolved_drop_column_action_node() const {
  return *node_.resolved_drop_column_action_node_;
}
inline ::zetasql::ResolvedDropColumnActionProto* AnyResolvedAlterActionProto::release_resolved_drop_column_action_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterActionProto.resolved_drop_column_action_node)
  if (has_resolved_drop_column_action_node()) {
    clear_has_node();
      ::zetasql::ResolvedDropColumnActionProto* temp = node_.resolved_drop_column_action_node_;
    node_.resolved_drop_column_action_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedDropColumnActionProto& AnyResolvedAlterActionProto::resolved_drop_column_action_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterActionProto.resolved_drop_column_action_node)
  return has_resolved_drop_column_action_node()
      ? *node_.resolved_drop_column_action_node_
      : *reinterpret_cast< ::zetasql::ResolvedDropColumnActionProto*>(&::zetasql::_ResolvedDropColumnActionProto_default_instance_);
}
inline ::zetasql::ResolvedDropColumnActionProto* AnyResolvedAlterActionProto::mutable_resolved_drop_column_action_node() {
  if (!has_resolved_drop_column_action_node()) {
    clear_node();
    set_has_resolved_drop_column_action_node();
    node_.resolved_drop_column_action_node_ = CreateMaybeMessage< ::zetasql::ResolvedDropColumnActionProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterActionProto.resolved_drop_column_action_node)
  return node_.resolved_drop_column_action_node_;
}

// optional .zetasql.ResolvedGrantToActionProto resolved_grant_to_action_node = 135;
inline bool AnyResolvedAlterActionProto::has_resolved_grant_to_action_node() const {
  return node_case() == kResolvedGrantToActionNode;
}
inline void AnyResolvedAlterActionProto::set_has_resolved_grant_to_action_node() {
  _oneof_case_[0] = kResolvedGrantToActionNode;
}
inline void AnyResolvedAlterActionProto::clear_resolved_grant_to_action_node() {
  if (has_resolved_grant_to_action_node()) {
    delete node_.resolved_grant_to_action_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedGrantToActionProto& AnyResolvedAlterActionProto::_internal_resolved_grant_to_action_node() const {
  return *node_.resolved_grant_to_action_node_;
}
inline ::zetasql::ResolvedGrantToActionProto* AnyResolvedAlterActionProto::release_resolved_grant_to_action_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterActionProto.resolved_grant_to_action_node)
  if (has_resolved_grant_to_action_node()) {
    clear_has_node();
      ::zetasql::ResolvedGrantToActionProto* temp = node_.resolved_grant_to_action_node_;
    node_.resolved_grant_to_action_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedGrantToActionProto& AnyResolvedAlterActionProto::resolved_grant_to_action_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterActionProto.resolved_grant_to_action_node)
  return has_resolved_grant_to_action_node()
      ? *node_.resolved_grant_to_action_node_
      : *reinterpret_cast< ::zetasql::ResolvedGrantToActionProto*>(&::zetasql::_ResolvedGrantToActionProto_default_instance_);
}
inline ::zetasql::ResolvedGrantToActionProto* AnyResolvedAlterActionProto::mutable_resolved_grant_to_action_node() {
  if (!has_resolved_grant_to_action_node()) {
    clear_node();
    set_has_resolved_grant_to_action_node();
    node_.resolved_grant_to_action_node_ = CreateMaybeMessage< ::zetasql::ResolvedGrantToActionProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterActionProto.resolved_grant_to_action_node)
  return node_.resolved_grant_to_action_node_;
}

// optional .zetasql.ResolvedFilterUsingActionProto resolved_filter_using_action_node = 136;
inline bool AnyResolvedAlterActionProto::has_resolved_filter_using_action_node() const {
  return node_case() == kResolvedFilterUsingActionNode;
}
inline void AnyResolvedAlterActionProto::set_has_resolved_filter_using_action_node() {
  _oneof_case_[0] = kResolvedFilterUsingActionNode;
}
inline void AnyResolvedAlterActionProto::clear_resolved_filter_using_action_node() {
  if (has_resolved_filter_using_action_node()) {
    delete node_.resolved_filter_using_action_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedFilterUsingActionProto& AnyResolvedAlterActionProto::_internal_resolved_filter_using_action_node() const {
  return *node_.resolved_filter_using_action_node_;
}
inline ::zetasql::ResolvedFilterUsingActionProto* AnyResolvedAlterActionProto::release_resolved_filter_using_action_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterActionProto.resolved_filter_using_action_node)
  if (has_resolved_filter_using_action_node()) {
    clear_has_node();
      ::zetasql::ResolvedFilterUsingActionProto* temp = node_.resolved_filter_using_action_node_;
    node_.resolved_filter_using_action_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedFilterUsingActionProto& AnyResolvedAlterActionProto::resolved_filter_using_action_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterActionProto.resolved_filter_using_action_node)
  return has_resolved_filter_using_action_node()
      ? *node_.resolved_filter_using_action_node_
      : *reinterpret_cast< ::zetasql::ResolvedFilterUsingActionProto*>(&::zetasql::_ResolvedFilterUsingActionProto_default_instance_);
}
inline ::zetasql::ResolvedFilterUsingActionProto* AnyResolvedAlterActionProto::mutable_resolved_filter_using_action_node() {
  if (!has_resolved_filter_using_action_node()) {
    clear_node();
    set_has_resolved_filter_using_action_node();
    node_.resolved_filter_using_action_node_ = CreateMaybeMessage< ::zetasql::ResolvedFilterUsingActionProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterActionProto.resolved_filter_using_action_node)
  return node_.resolved_filter_using_action_node_;
}

// optional .zetasql.ResolvedRevokeFromActionProto resolved_revoke_from_action_node = 137;
inline bool AnyResolvedAlterActionProto::has_resolved_revoke_from_action_node() const {
  return node_case() == kResolvedRevokeFromActionNode;
}
inline void AnyResolvedAlterActionProto::set_has_resolved_revoke_from_action_node() {
  _oneof_case_[0] = kResolvedRevokeFromActionNode;
}
inline void AnyResolvedAlterActionProto::clear_resolved_revoke_from_action_node() {
  if (has_resolved_revoke_from_action_node()) {
    delete node_.resolved_revoke_from_action_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedRevokeFromActionProto& AnyResolvedAlterActionProto::_internal_resolved_revoke_from_action_node() const {
  return *node_.resolved_revoke_from_action_node_;
}
inline ::zetasql::ResolvedRevokeFromActionProto* AnyResolvedAlterActionProto::release_resolved_revoke_from_action_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterActionProto.resolved_revoke_from_action_node)
  if (has_resolved_revoke_from_action_node()) {
    clear_has_node();
      ::zetasql::ResolvedRevokeFromActionProto* temp = node_.resolved_revoke_from_action_node_;
    node_.resolved_revoke_from_action_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedRevokeFromActionProto& AnyResolvedAlterActionProto::resolved_revoke_from_action_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterActionProto.resolved_revoke_from_action_node)
  return has_resolved_revoke_from_action_node()
      ? *node_.resolved_revoke_from_action_node_
      : *reinterpret_cast< ::zetasql::ResolvedRevokeFromActionProto*>(&::zetasql::_ResolvedRevokeFromActionProto_default_instance_);
}
inline ::zetasql::ResolvedRevokeFromActionProto* AnyResolvedAlterActionProto::mutable_resolved_revoke_from_action_node() {
  if (!has_resolved_revoke_from_action_node()) {
    clear_node();
    set_has_resolved_revoke_from_action_node();
    node_.resolved_revoke_from_action_node_ = CreateMaybeMessage< ::zetasql::ResolvedRevokeFromActionProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterActionProto.resolved_revoke_from_action_node)
  return node_.resolved_revoke_from_action_node_;
}

// optional .zetasql.ResolvedRenameToActionProto resolved_rename_to_action_node = 138;
inline bool AnyResolvedAlterActionProto::has_resolved_rename_to_action_node() const {
  return node_case() == kResolvedRenameToActionNode;
}
inline void AnyResolvedAlterActionProto::set_has_resolved_rename_to_action_node() {
  _oneof_case_[0] = kResolvedRenameToActionNode;
}
inline void AnyResolvedAlterActionProto::clear_resolved_rename_to_action_node() {
  if (has_resolved_rename_to_action_node()) {
    delete node_.resolved_rename_to_action_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedRenameToActionProto& AnyResolvedAlterActionProto::_internal_resolved_rename_to_action_node() const {
  return *node_.resolved_rename_to_action_node_;
}
inline ::zetasql::ResolvedRenameToActionProto* AnyResolvedAlterActionProto::release_resolved_rename_to_action_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterActionProto.resolved_rename_to_action_node)
  if (has_resolved_rename_to_action_node()) {
    clear_has_node();
      ::zetasql::ResolvedRenameToActionProto* temp = node_.resolved_rename_to_action_node_;
    node_.resolved_rename_to_action_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedRenameToActionProto& AnyResolvedAlterActionProto::resolved_rename_to_action_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterActionProto.resolved_rename_to_action_node)
  return has_resolved_rename_to_action_node()
      ? *node_.resolved_rename_to_action_node_
      : *reinterpret_cast< ::zetasql::ResolvedRenameToActionProto*>(&::zetasql::_ResolvedRenameToActionProto_default_instance_);
}
inline ::zetasql::ResolvedRenameToActionProto* AnyResolvedAlterActionProto::mutable_resolved_rename_to_action_node() {
  if (!has_resolved_rename_to_action_node()) {
    clear_node();
    set_has_resolved_rename_to_action_node();
    node_.resolved_rename_to_action_node_ = CreateMaybeMessage< ::zetasql::ResolvedRenameToActionProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterActionProto.resolved_rename_to_action_node)
  return node_.resolved_rename_to_action_node_;
}

// optional .zetasql.ResolvedSetAsActionProto resolved_set_as_action_node = 156;
inline bool AnyResolvedAlterActionProto::has_resolved_set_as_action_node() const {
  return node_case() == kResolvedSetAsActionNode;
}
inline void AnyResolvedAlterActionProto::set_has_resolved_set_as_action_node() {
  _oneof_case_[0] = kResolvedSetAsActionNode;
}
inline void AnyResolvedAlterActionProto::clear_resolved_set_as_action_node() {
  if (has_resolved_set_as_action_node()) {
    delete node_.resolved_set_as_action_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedSetAsActionProto& AnyResolvedAlterActionProto::_internal_resolved_set_as_action_node() const {
  return *node_.resolved_set_as_action_node_;
}
inline ::zetasql::ResolvedSetAsActionProto* AnyResolvedAlterActionProto::release_resolved_set_as_action_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterActionProto.resolved_set_as_action_node)
  if (has_resolved_set_as_action_node()) {
    clear_has_node();
      ::zetasql::ResolvedSetAsActionProto* temp = node_.resolved_set_as_action_node_;
    node_.resolved_set_as_action_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedSetAsActionProto& AnyResolvedAlterActionProto::resolved_set_as_action_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterActionProto.resolved_set_as_action_node)
  return has_resolved_set_as_action_node()
      ? *node_.resolved_set_as_action_node_
      : *reinterpret_cast< ::zetasql::ResolvedSetAsActionProto*>(&::zetasql::_ResolvedSetAsActionProto_default_instance_);
}
inline ::zetasql::ResolvedSetAsActionProto* AnyResolvedAlterActionProto::mutable_resolved_set_as_action_node() {
  if (!has_resolved_set_as_action_node()) {
    clear_node();
    set_has_resolved_set_as_action_node();
    node_.resolved_set_as_action_node_ = CreateMaybeMessage< ::zetasql::ResolvedSetAsActionProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterActionProto.resolved_set_as_action_node)
  return node_.resolved_set_as_action_node_;
}

// optional .zetasql.ResolvedAddConstraintActionProto resolved_add_constraint_action_node = 163;
inline bool AnyResolvedAlterActionProto::has_resolved_add_constraint_action_node() const {
  return node_case() == kResolvedAddConstraintActionNode;
}
inline void AnyResolvedAlterActionProto::set_has_resolved_add_constraint_action_node() {
  _oneof_case_[0] = kResolvedAddConstraintActionNode;
}
inline void AnyResolvedAlterActionProto::clear_resolved_add_constraint_action_node() {
  if (has_resolved_add_constraint_action_node()) {
    delete node_.resolved_add_constraint_action_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAddConstraintActionProto& AnyResolvedAlterActionProto::_internal_resolved_add_constraint_action_node() const {
  return *node_.resolved_add_constraint_action_node_;
}
inline ::zetasql::ResolvedAddConstraintActionProto* AnyResolvedAlterActionProto::release_resolved_add_constraint_action_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterActionProto.resolved_add_constraint_action_node)
  if (has_resolved_add_constraint_action_node()) {
    clear_has_node();
      ::zetasql::ResolvedAddConstraintActionProto* temp = node_.resolved_add_constraint_action_node_;
    node_.resolved_add_constraint_action_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAddConstraintActionProto& AnyResolvedAlterActionProto::resolved_add_constraint_action_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterActionProto.resolved_add_constraint_action_node)
  return has_resolved_add_constraint_action_node()
      ? *node_.resolved_add_constraint_action_node_
      : *reinterpret_cast< ::zetasql::ResolvedAddConstraintActionProto*>(&::zetasql::_ResolvedAddConstraintActionProto_default_instance_);
}
inline ::zetasql::ResolvedAddConstraintActionProto* AnyResolvedAlterActionProto::mutable_resolved_add_constraint_action_node() {
  if (!has_resolved_add_constraint_action_node()) {
    clear_node();
    set_has_resolved_add_constraint_action_node();
    node_.resolved_add_constraint_action_node_ = CreateMaybeMessage< ::zetasql::ResolvedAddConstraintActionProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterActionProto.resolved_add_constraint_action_node)
  return node_.resolved_add_constraint_action_node_;
}

// optional .zetasql.ResolvedDropConstraintActionProto resolved_drop_constraint_action_node = 164;
inline bool AnyResolvedAlterActionProto::has_resolved_drop_constraint_action_node() const {
  return node_case() == kResolvedDropConstraintActionNode;
}
inline void AnyResolvedAlterActionProto::set_has_resolved_drop_constraint_action_node() {
  _oneof_case_[0] = kResolvedDropConstraintActionNode;
}
inline void AnyResolvedAlterActionProto::clear_resolved_drop_constraint_action_node() {
  if (has_resolved_drop_constraint_action_node()) {
    delete node_.resolved_drop_constraint_action_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedDropConstraintActionProto& AnyResolvedAlterActionProto::_internal_resolved_drop_constraint_action_node() const {
  return *node_.resolved_drop_constraint_action_node_;
}
inline ::zetasql::ResolvedDropConstraintActionProto* AnyResolvedAlterActionProto::release_resolved_drop_constraint_action_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterActionProto.resolved_drop_constraint_action_node)
  if (has_resolved_drop_constraint_action_node()) {
    clear_has_node();
      ::zetasql::ResolvedDropConstraintActionProto* temp = node_.resolved_drop_constraint_action_node_;
    node_.resolved_drop_constraint_action_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedDropConstraintActionProto& AnyResolvedAlterActionProto::resolved_drop_constraint_action_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterActionProto.resolved_drop_constraint_action_node)
  return has_resolved_drop_constraint_action_node()
      ? *node_.resolved_drop_constraint_action_node_
      : *reinterpret_cast< ::zetasql::ResolvedDropConstraintActionProto*>(&::zetasql::_ResolvedDropConstraintActionProto_default_instance_);
}
inline ::zetasql::ResolvedDropConstraintActionProto* AnyResolvedAlterActionProto::mutable_resolved_drop_constraint_action_node() {
  if (!has_resolved_drop_constraint_action_node()) {
    clear_node();
    set_has_resolved_drop_constraint_action_node();
    node_.resolved_drop_constraint_action_node_ = CreateMaybeMessage< ::zetasql::ResolvedDropConstraintActionProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterActionProto.resolved_drop_constraint_action_node)
  return node_.resolved_drop_constraint_action_node_;
}

// optional .zetasql.ResolvedDropPrimaryKeyActionProto resolved_drop_primary_key_action_node = 184;
inline bool AnyResolvedAlterActionProto::has_resolved_drop_primary_key_action_node() const {
  return node_case() == kResolvedDropPrimaryKeyActionNode;
}
inline void AnyResolvedAlterActionProto::set_has_resolved_drop_primary_key_action_node() {
  _oneof_case_[0] = kResolvedDropPrimaryKeyActionNode;
}
inline void AnyResolvedAlterActionProto::clear_resolved_drop_primary_key_action_node() {
  if (has_resolved_drop_primary_key_action_node()) {
    delete node_.resolved_drop_primary_key_action_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedDropPrimaryKeyActionProto& AnyResolvedAlterActionProto::_internal_resolved_drop_primary_key_action_node() const {
  return *node_.resolved_drop_primary_key_action_node_;
}
inline ::zetasql::ResolvedDropPrimaryKeyActionProto* AnyResolvedAlterActionProto::release_resolved_drop_primary_key_action_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterActionProto.resolved_drop_primary_key_action_node)
  if (has_resolved_drop_primary_key_action_node()) {
    clear_has_node();
      ::zetasql::ResolvedDropPrimaryKeyActionProto* temp = node_.resolved_drop_primary_key_action_node_;
    node_.resolved_drop_primary_key_action_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedDropPrimaryKeyActionProto& AnyResolvedAlterActionProto::resolved_drop_primary_key_action_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterActionProto.resolved_drop_primary_key_action_node)
  return has_resolved_drop_primary_key_action_node()
      ? *node_.resolved_drop_primary_key_action_node_
      : *reinterpret_cast< ::zetasql::ResolvedDropPrimaryKeyActionProto*>(&::zetasql::_ResolvedDropPrimaryKeyActionProto_default_instance_);
}
inline ::zetasql::ResolvedDropPrimaryKeyActionProto* AnyResolvedAlterActionProto::mutable_resolved_drop_primary_key_action_node() {
  if (!has_resolved_drop_primary_key_action_node()) {
    clear_node();
    set_has_resolved_drop_primary_key_action_node();
    node_.resolved_drop_primary_key_action_node_ = CreateMaybeMessage< ::zetasql::ResolvedDropPrimaryKeyActionProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterActionProto.resolved_drop_primary_key_action_node)
  return node_.resolved_drop_primary_key_action_node_;
}

// optional .zetasql.ResolvedRenameColumnActionProto resolved_rename_column_action_node = 185;
inline bool AnyResolvedAlterActionProto::has_resolved_rename_column_action_node() const {
  return node_case() == kResolvedRenameColumnActionNode;
}
inline void AnyResolvedAlterActionProto::set_has_resolved_rename_column_action_node() {
  _oneof_case_[0] = kResolvedRenameColumnActionNode;
}
inline void AnyResolvedAlterActionProto::clear_resolved_rename_column_action_node() {
  if (has_resolved_rename_column_action_node()) {
    delete node_.resolved_rename_column_action_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedRenameColumnActionProto& AnyResolvedAlterActionProto::_internal_resolved_rename_column_action_node() const {
  return *node_.resolved_rename_column_action_node_;
}
inline ::zetasql::ResolvedRenameColumnActionProto* AnyResolvedAlterActionProto::release_resolved_rename_column_action_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterActionProto.resolved_rename_column_action_node)
  if (has_resolved_rename_column_action_node()) {
    clear_has_node();
      ::zetasql::ResolvedRenameColumnActionProto* temp = node_.resolved_rename_column_action_node_;
    node_.resolved_rename_column_action_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedRenameColumnActionProto& AnyResolvedAlterActionProto::resolved_rename_column_action_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterActionProto.resolved_rename_column_action_node)
  return has_resolved_rename_column_action_node()
      ? *node_.resolved_rename_column_action_node_
      : *reinterpret_cast< ::zetasql::ResolvedRenameColumnActionProto*>(&::zetasql::_ResolvedRenameColumnActionProto_default_instance_);
}
inline ::zetasql::ResolvedRenameColumnActionProto* AnyResolvedAlterActionProto::mutable_resolved_rename_column_action_node() {
  if (!has_resolved_rename_column_action_node()) {
    clear_node();
    set_has_resolved_rename_column_action_node();
    node_.resolved_rename_column_action_node_ = CreateMaybeMessage< ::zetasql::ResolvedRenameColumnActionProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterActionProto.resolved_rename_column_action_node)
  return node_.resolved_rename_column_action_node_;
}

// optional .zetasql.ResolvedSetCollateClauseProto resolved_set_collate_clause_node = 187;
inline bool AnyResolvedAlterActionProto::has_resolved_set_collate_clause_node() const {
  return node_case() == kResolvedSetCollateClauseNode;
}
inline void AnyResolvedAlterActionProto::set_has_resolved_set_collate_clause_node() {
  _oneof_case_[0] = kResolvedSetCollateClauseNode;
}
inline void AnyResolvedAlterActionProto::clear_resolved_set_collate_clause_node() {
  if (has_resolved_set_collate_clause_node()) {
    delete node_.resolved_set_collate_clause_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedSetCollateClauseProto& AnyResolvedAlterActionProto::_internal_resolved_set_collate_clause_node() const {
  return *node_.resolved_set_collate_clause_node_;
}
inline ::zetasql::ResolvedSetCollateClauseProto* AnyResolvedAlterActionProto::release_resolved_set_collate_clause_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterActionProto.resolved_set_collate_clause_node)
  if (has_resolved_set_collate_clause_node()) {
    clear_has_node();
      ::zetasql::ResolvedSetCollateClauseProto* temp = node_.resolved_set_collate_clause_node_;
    node_.resolved_set_collate_clause_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedSetCollateClauseProto& AnyResolvedAlterActionProto::resolved_set_collate_clause_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterActionProto.resolved_set_collate_clause_node)
  return has_resolved_set_collate_clause_node()
      ? *node_.resolved_set_collate_clause_node_
      : *reinterpret_cast< ::zetasql::ResolvedSetCollateClauseProto*>(&::zetasql::_ResolvedSetCollateClauseProto_default_instance_);
}
inline ::zetasql::ResolvedSetCollateClauseProto* AnyResolvedAlterActionProto::mutable_resolved_set_collate_clause_node() {
  if (!has_resolved_set_collate_clause_node()) {
    clear_node();
    set_has_resolved_set_collate_clause_node();
    node_.resolved_set_collate_clause_node_ = CreateMaybeMessage< ::zetasql::ResolvedSetCollateClauseProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterActionProto.resolved_set_collate_clause_node)
  return node_.resolved_set_collate_clause_node_;
}

// optional .zetasql.ResolvedRestrictToActionProto resolved_restrict_to_action_node = 193;
inline bool AnyResolvedAlterActionProto::has_resolved_restrict_to_action_node() const {
  return node_case() == kResolvedRestrictToActionNode;
}
inline void AnyResolvedAlterActionProto::set_has_resolved_restrict_to_action_node() {
  _oneof_case_[0] = kResolvedRestrictToActionNode;
}
inline void AnyResolvedAlterActionProto::clear_resolved_restrict_to_action_node() {
  if (has_resolved_restrict_to_action_node()) {
    delete node_.resolved_restrict_to_action_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedRestrictToActionProto& AnyResolvedAlterActionProto::_internal_resolved_restrict_to_action_node() const {
  return *node_.resolved_restrict_to_action_node_;
}
inline ::zetasql::ResolvedRestrictToActionProto* AnyResolvedAlterActionProto::release_resolved_restrict_to_action_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterActionProto.resolved_restrict_to_action_node)
  if (has_resolved_restrict_to_action_node()) {
    clear_has_node();
      ::zetasql::ResolvedRestrictToActionProto* temp = node_.resolved_restrict_to_action_node_;
    node_.resolved_restrict_to_action_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedRestrictToActionProto& AnyResolvedAlterActionProto::resolved_restrict_to_action_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterActionProto.resolved_restrict_to_action_node)
  return has_resolved_restrict_to_action_node()
      ? *node_.resolved_restrict_to_action_node_
      : *reinterpret_cast< ::zetasql::ResolvedRestrictToActionProto*>(&::zetasql::_ResolvedRestrictToActionProto_default_instance_);
}
inline ::zetasql::ResolvedRestrictToActionProto* AnyResolvedAlterActionProto::mutable_resolved_restrict_to_action_node() {
  if (!has_resolved_restrict_to_action_node()) {
    clear_node();
    set_has_resolved_restrict_to_action_node();
    node_.resolved_restrict_to_action_node_ = CreateMaybeMessage< ::zetasql::ResolvedRestrictToActionProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterActionProto.resolved_restrict_to_action_node)
  return node_.resolved_restrict_to_action_node_;
}

// optional .zetasql.ResolvedAddToRestricteeListActionProto resolved_add_to_restrictee_list_action_node = 194;
inline bool AnyResolvedAlterActionProto::has_resolved_add_to_restrictee_list_action_node() const {
  return node_case() == kResolvedAddToRestricteeListActionNode;
}
inline void AnyResolvedAlterActionProto::set_has_resolved_add_to_restrictee_list_action_node() {
  _oneof_case_[0] = kResolvedAddToRestricteeListActionNode;
}
inline void AnyResolvedAlterActionProto::clear_resolved_add_to_restrictee_list_action_node() {
  if (has_resolved_add_to_restrictee_list_action_node()) {
    delete node_.resolved_add_to_restrictee_list_action_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAddToRestricteeListActionProto& AnyResolvedAlterActionProto::_internal_resolved_add_to_restrictee_list_action_node() const {
  return *node_.resolved_add_to_restrictee_list_action_node_;
}
inline ::zetasql::ResolvedAddToRestricteeListActionProto* AnyResolvedAlterActionProto::release_resolved_add_to_restrictee_list_action_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterActionProto.resolved_add_to_restrictee_list_action_node)
  if (has_resolved_add_to_restrictee_list_action_node()) {
    clear_has_node();
      ::zetasql::ResolvedAddToRestricteeListActionProto* temp = node_.resolved_add_to_restrictee_list_action_node_;
    node_.resolved_add_to_restrictee_list_action_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAddToRestricteeListActionProto& AnyResolvedAlterActionProto::resolved_add_to_restrictee_list_action_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterActionProto.resolved_add_to_restrictee_list_action_node)
  return has_resolved_add_to_restrictee_list_action_node()
      ? *node_.resolved_add_to_restrictee_list_action_node_
      : *reinterpret_cast< ::zetasql::ResolvedAddToRestricteeListActionProto*>(&::zetasql::_ResolvedAddToRestricteeListActionProto_default_instance_);
}
inline ::zetasql::ResolvedAddToRestricteeListActionProto* AnyResolvedAlterActionProto::mutable_resolved_add_to_restrictee_list_action_node() {
  if (!has_resolved_add_to_restrictee_list_action_node()) {
    clear_node();
    set_has_resolved_add_to_restrictee_list_action_node();
    node_.resolved_add_to_restrictee_list_action_node_ = CreateMaybeMessage< ::zetasql::ResolvedAddToRestricteeListActionProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterActionProto.resolved_add_to_restrictee_list_action_node)
  return node_.resolved_add_to_restrictee_list_action_node_;
}

// optional .zetasql.ResolvedRemoveFromRestricteeListActionProto resolved_remove_from_restrictee_list_action_node = 195;
inline bool AnyResolvedAlterActionProto::has_resolved_remove_from_restrictee_list_action_node() const {
  return node_case() == kResolvedRemoveFromRestricteeListActionNode;
}
inline void AnyResolvedAlterActionProto::set_has_resolved_remove_from_restrictee_list_action_node() {
  _oneof_case_[0] = kResolvedRemoveFromRestricteeListActionNode;
}
inline void AnyResolvedAlterActionProto::clear_resolved_remove_from_restrictee_list_action_node() {
  if (has_resolved_remove_from_restrictee_list_action_node()) {
    delete node_.resolved_remove_from_restrictee_list_action_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedRemoveFromRestricteeListActionProto& AnyResolvedAlterActionProto::_internal_resolved_remove_from_restrictee_list_action_node() const {
  return *node_.resolved_remove_from_restrictee_list_action_node_;
}
inline ::zetasql::ResolvedRemoveFromRestricteeListActionProto* AnyResolvedAlterActionProto::release_resolved_remove_from_restrictee_list_action_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterActionProto.resolved_remove_from_restrictee_list_action_node)
  if (has_resolved_remove_from_restrictee_list_action_node()) {
    clear_has_node();
      ::zetasql::ResolvedRemoveFromRestricteeListActionProto* temp = node_.resolved_remove_from_restrictee_list_action_node_;
    node_.resolved_remove_from_restrictee_list_action_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedRemoveFromRestricteeListActionProto& AnyResolvedAlterActionProto::resolved_remove_from_restrictee_list_action_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterActionProto.resolved_remove_from_restrictee_list_action_node)
  return has_resolved_remove_from_restrictee_list_action_node()
      ? *node_.resolved_remove_from_restrictee_list_action_node_
      : *reinterpret_cast< ::zetasql::ResolvedRemoveFromRestricteeListActionProto*>(&::zetasql::_ResolvedRemoveFromRestricteeListActionProto_default_instance_);
}
inline ::zetasql::ResolvedRemoveFromRestricteeListActionProto* AnyResolvedAlterActionProto::mutable_resolved_remove_from_restrictee_list_action_node() {
  if (!has_resolved_remove_from_restrictee_list_action_node()) {
    clear_node();
    set_has_resolved_remove_from_restrictee_list_action_node();
    node_.resolved_remove_from_restrictee_list_action_node_ = CreateMaybeMessage< ::zetasql::ResolvedRemoveFromRestricteeListActionProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterActionProto.resolved_remove_from_restrictee_list_action_node)
  return node_.resolved_remove_from_restrictee_list_action_node_;
}

// optional .zetasql.AnyResolvedAlterColumnActionProto resolved_alter_column_action_node = 201;
inline bool AnyResolvedAlterActionProto::has_resolved_alter_column_action_node() const {
  return node_case() == kResolvedAlterColumnActionNode;
}
inline void AnyResolvedAlterActionProto::set_has_resolved_alter_column_action_node() {
  _oneof_case_[0] = kResolvedAlterColumnActionNode;
}
inline void AnyResolvedAlterActionProto::clear_resolved_alter_column_action_node() {
  if (has_resolved_alter_column_action_node()) {
    delete node_.resolved_alter_column_action_node_;
    clear_has_node();
  }
}
inline const ::zetasql::AnyResolvedAlterColumnActionProto& AnyResolvedAlterActionProto::_internal_resolved_alter_column_action_node() const {
  return *node_.resolved_alter_column_action_node_;
}
inline ::zetasql::AnyResolvedAlterColumnActionProto* AnyResolvedAlterActionProto::release_resolved_alter_column_action_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterActionProto.resolved_alter_column_action_node)
  if (has_resolved_alter_column_action_node()) {
    clear_has_node();
      ::zetasql::AnyResolvedAlterColumnActionProto* temp = node_.resolved_alter_column_action_node_;
    node_.resolved_alter_column_action_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::AnyResolvedAlterColumnActionProto& AnyResolvedAlterActionProto::resolved_alter_column_action_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterActionProto.resolved_alter_column_action_node)
  return has_resolved_alter_column_action_node()
      ? *node_.resolved_alter_column_action_node_
      : *reinterpret_cast< ::zetasql::AnyResolvedAlterColumnActionProto*>(&::zetasql::_AnyResolvedAlterColumnActionProto_default_instance_);
}
inline ::zetasql::AnyResolvedAlterColumnActionProto* AnyResolvedAlterActionProto::mutable_resolved_alter_column_action_node() {
  if (!has_resolved_alter_column_action_node()) {
    clear_node();
    set_has_resolved_alter_column_action_node();
    node_.resolved_alter_column_action_node_ = CreateMaybeMessage< ::zetasql::AnyResolvedAlterColumnActionProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterActionProto.resolved_alter_column_action_node)
  return node_.resolved_alter_column_action_node_;
}

inline bool AnyResolvedAlterActionProto::has_node() const {
  return node_case() != NODE_NOT_SET;
}
inline void AnyResolvedAlterActionProto::clear_has_node() {
  _oneof_case_[0] = NODE_NOT_SET;
}
inline AnyResolvedAlterActionProto::NodeCase AnyResolvedAlterActionProto::node_case() const {
  return AnyResolvedAlterActionProto::NodeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResolvedAlterActionProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedAlterActionProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAlterActionProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAlterActionProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAlterActionProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedAlterActionProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedAlterActionProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterActionProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedAlterActionProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAlterActionProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedAlterActionProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterActionProto.parent)
  return parent_;
}
inline void ResolvedAlterActionProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAlterActionProto.parent)
}

// -------------------------------------------------------------------

// AnyResolvedAlterColumnActionProto

// optional .zetasql.ResolvedAlterColumnOptionsActionProto resolved_alter_column_options_action_node = 169;
inline bool AnyResolvedAlterColumnActionProto::has_resolved_alter_column_options_action_node() const {
  return node_case() == kResolvedAlterColumnOptionsActionNode;
}
inline void AnyResolvedAlterColumnActionProto::set_has_resolved_alter_column_options_action_node() {
  _oneof_case_[0] = kResolvedAlterColumnOptionsActionNode;
}
inline void AnyResolvedAlterColumnActionProto::clear_resolved_alter_column_options_action_node() {
  if (has_resolved_alter_column_options_action_node()) {
    delete node_.resolved_alter_column_options_action_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAlterColumnOptionsActionProto& AnyResolvedAlterColumnActionProto::_internal_resolved_alter_column_options_action_node() const {
  return *node_.resolved_alter_column_options_action_node_;
}
inline ::zetasql::ResolvedAlterColumnOptionsActionProto* AnyResolvedAlterColumnActionProto::release_resolved_alter_column_options_action_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterColumnActionProto.resolved_alter_column_options_action_node)
  if (has_resolved_alter_column_options_action_node()) {
    clear_has_node();
      ::zetasql::ResolvedAlterColumnOptionsActionProto* temp = node_.resolved_alter_column_options_action_node_;
    node_.resolved_alter_column_options_action_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAlterColumnOptionsActionProto& AnyResolvedAlterColumnActionProto::resolved_alter_column_options_action_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterColumnActionProto.resolved_alter_column_options_action_node)
  return has_resolved_alter_column_options_action_node()
      ? *node_.resolved_alter_column_options_action_node_
      : *reinterpret_cast< ::zetasql::ResolvedAlterColumnOptionsActionProto*>(&::zetasql::_ResolvedAlterColumnOptionsActionProto_default_instance_);
}
inline ::zetasql::ResolvedAlterColumnOptionsActionProto* AnyResolvedAlterColumnActionProto::mutable_resolved_alter_column_options_action_node() {
  if (!has_resolved_alter_column_options_action_node()) {
    clear_node();
    set_has_resolved_alter_column_options_action_node();
    node_.resolved_alter_column_options_action_node_ = CreateMaybeMessage< ::zetasql::ResolvedAlterColumnOptionsActionProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterColumnActionProto.resolved_alter_column_options_action_node)
  return node_.resolved_alter_column_options_action_node_;
}

// optional .zetasql.ResolvedAlterColumnDropNotNullActionProto resolved_alter_column_drop_not_null_action_node = 178;
inline bool AnyResolvedAlterColumnActionProto::has_resolved_alter_column_drop_not_null_action_node() const {
  return node_case() == kResolvedAlterColumnDropNotNullActionNode;
}
inline void AnyResolvedAlterColumnActionProto::set_has_resolved_alter_column_drop_not_null_action_node() {
  _oneof_case_[0] = kResolvedAlterColumnDropNotNullActionNode;
}
inline void AnyResolvedAlterColumnActionProto::clear_resolved_alter_column_drop_not_null_action_node() {
  if (has_resolved_alter_column_drop_not_null_action_node()) {
    delete node_.resolved_alter_column_drop_not_null_action_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAlterColumnDropNotNullActionProto& AnyResolvedAlterColumnActionProto::_internal_resolved_alter_column_drop_not_null_action_node() const {
  return *node_.resolved_alter_column_drop_not_null_action_node_;
}
inline ::zetasql::ResolvedAlterColumnDropNotNullActionProto* AnyResolvedAlterColumnActionProto::release_resolved_alter_column_drop_not_null_action_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterColumnActionProto.resolved_alter_column_drop_not_null_action_node)
  if (has_resolved_alter_column_drop_not_null_action_node()) {
    clear_has_node();
      ::zetasql::ResolvedAlterColumnDropNotNullActionProto* temp = node_.resolved_alter_column_drop_not_null_action_node_;
    node_.resolved_alter_column_drop_not_null_action_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAlterColumnDropNotNullActionProto& AnyResolvedAlterColumnActionProto::resolved_alter_column_drop_not_null_action_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterColumnActionProto.resolved_alter_column_drop_not_null_action_node)
  return has_resolved_alter_column_drop_not_null_action_node()
      ? *node_.resolved_alter_column_drop_not_null_action_node_
      : *reinterpret_cast< ::zetasql::ResolvedAlterColumnDropNotNullActionProto*>(&::zetasql::_ResolvedAlterColumnDropNotNullActionProto_default_instance_);
}
inline ::zetasql::ResolvedAlterColumnDropNotNullActionProto* AnyResolvedAlterColumnActionProto::mutable_resolved_alter_column_drop_not_null_action_node() {
  if (!has_resolved_alter_column_drop_not_null_action_node()) {
    clear_node();
    set_has_resolved_alter_column_drop_not_null_action_node();
    node_.resolved_alter_column_drop_not_null_action_node_ = CreateMaybeMessage< ::zetasql::ResolvedAlterColumnDropNotNullActionProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterColumnActionProto.resolved_alter_column_drop_not_null_action_node)
  return node_.resolved_alter_column_drop_not_null_action_node_;
}

// optional .zetasql.ResolvedAlterColumnSetDataTypeActionProto resolved_alter_column_set_data_type_action_node = 181;
inline bool AnyResolvedAlterColumnActionProto::has_resolved_alter_column_set_data_type_action_node() const {
  return node_case() == kResolvedAlterColumnSetDataTypeActionNode;
}
inline void AnyResolvedAlterColumnActionProto::set_has_resolved_alter_column_set_data_type_action_node() {
  _oneof_case_[0] = kResolvedAlterColumnSetDataTypeActionNode;
}
inline void AnyResolvedAlterColumnActionProto::clear_resolved_alter_column_set_data_type_action_node() {
  if (has_resolved_alter_column_set_data_type_action_node()) {
    delete node_.resolved_alter_column_set_data_type_action_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAlterColumnSetDataTypeActionProto& AnyResolvedAlterColumnActionProto::_internal_resolved_alter_column_set_data_type_action_node() const {
  return *node_.resolved_alter_column_set_data_type_action_node_;
}
inline ::zetasql::ResolvedAlterColumnSetDataTypeActionProto* AnyResolvedAlterColumnActionProto::release_resolved_alter_column_set_data_type_action_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterColumnActionProto.resolved_alter_column_set_data_type_action_node)
  if (has_resolved_alter_column_set_data_type_action_node()) {
    clear_has_node();
      ::zetasql::ResolvedAlterColumnSetDataTypeActionProto* temp = node_.resolved_alter_column_set_data_type_action_node_;
    node_.resolved_alter_column_set_data_type_action_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAlterColumnSetDataTypeActionProto& AnyResolvedAlterColumnActionProto::resolved_alter_column_set_data_type_action_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterColumnActionProto.resolved_alter_column_set_data_type_action_node)
  return has_resolved_alter_column_set_data_type_action_node()
      ? *node_.resolved_alter_column_set_data_type_action_node_
      : *reinterpret_cast< ::zetasql::ResolvedAlterColumnSetDataTypeActionProto*>(&::zetasql::_ResolvedAlterColumnSetDataTypeActionProto_default_instance_);
}
inline ::zetasql::ResolvedAlterColumnSetDataTypeActionProto* AnyResolvedAlterColumnActionProto::mutable_resolved_alter_column_set_data_type_action_node() {
  if (!has_resolved_alter_column_set_data_type_action_node()) {
    clear_node();
    set_has_resolved_alter_column_set_data_type_action_node();
    node_.resolved_alter_column_set_data_type_action_node_ = CreateMaybeMessage< ::zetasql::ResolvedAlterColumnSetDataTypeActionProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterColumnActionProto.resolved_alter_column_set_data_type_action_node)
  return node_.resolved_alter_column_set_data_type_action_node_;
}

// optional .zetasql.ResolvedAlterColumnSetDefaultActionProto resolved_alter_column_set_default_action_node = 198;
inline bool AnyResolvedAlterColumnActionProto::has_resolved_alter_column_set_default_action_node() const {
  return node_case() == kResolvedAlterColumnSetDefaultActionNode;
}
inline void AnyResolvedAlterColumnActionProto::set_has_resolved_alter_column_set_default_action_node() {
  _oneof_case_[0] = kResolvedAlterColumnSetDefaultActionNode;
}
inline void AnyResolvedAlterColumnActionProto::clear_resolved_alter_column_set_default_action_node() {
  if (has_resolved_alter_column_set_default_action_node()) {
    delete node_.resolved_alter_column_set_default_action_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAlterColumnSetDefaultActionProto& AnyResolvedAlterColumnActionProto::_internal_resolved_alter_column_set_default_action_node() const {
  return *node_.resolved_alter_column_set_default_action_node_;
}
inline ::zetasql::ResolvedAlterColumnSetDefaultActionProto* AnyResolvedAlterColumnActionProto::release_resolved_alter_column_set_default_action_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterColumnActionProto.resolved_alter_column_set_default_action_node)
  if (has_resolved_alter_column_set_default_action_node()) {
    clear_has_node();
      ::zetasql::ResolvedAlterColumnSetDefaultActionProto* temp = node_.resolved_alter_column_set_default_action_node_;
    node_.resolved_alter_column_set_default_action_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAlterColumnSetDefaultActionProto& AnyResolvedAlterColumnActionProto::resolved_alter_column_set_default_action_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterColumnActionProto.resolved_alter_column_set_default_action_node)
  return has_resolved_alter_column_set_default_action_node()
      ? *node_.resolved_alter_column_set_default_action_node_
      : *reinterpret_cast< ::zetasql::ResolvedAlterColumnSetDefaultActionProto*>(&::zetasql::_ResolvedAlterColumnSetDefaultActionProto_default_instance_);
}
inline ::zetasql::ResolvedAlterColumnSetDefaultActionProto* AnyResolvedAlterColumnActionProto::mutable_resolved_alter_column_set_default_action_node() {
  if (!has_resolved_alter_column_set_default_action_node()) {
    clear_node();
    set_has_resolved_alter_column_set_default_action_node();
    node_.resolved_alter_column_set_default_action_node_ = CreateMaybeMessage< ::zetasql::ResolvedAlterColumnSetDefaultActionProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterColumnActionProto.resolved_alter_column_set_default_action_node)
  return node_.resolved_alter_column_set_default_action_node_;
}

// optional .zetasql.ResolvedAlterColumnDropDefaultActionProto resolved_alter_column_drop_default_action_node = 199;
inline bool AnyResolvedAlterColumnActionProto::has_resolved_alter_column_drop_default_action_node() const {
  return node_case() == kResolvedAlterColumnDropDefaultActionNode;
}
inline void AnyResolvedAlterColumnActionProto::set_has_resolved_alter_column_drop_default_action_node() {
  _oneof_case_[0] = kResolvedAlterColumnDropDefaultActionNode;
}
inline void AnyResolvedAlterColumnActionProto::clear_resolved_alter_column_drop_default_action_node() {
  if (has_resolved_alter_column_drop_default_action_node()) {
    delete node_.resolved_alter_column_drop_default_action_node_;
    clear_has_node();
  }
}
inline const ::zetasql::ResolvedAlterColumnDropDefaultActionProto& AnyResolvedAlterColumnActionProto::_internal_resolved_alter_column_drop_default_action_node() const {
  return *node_.resolved_alter_column_drop_default_action_node_;
}
inline ::zetasql::ResolvedAlterColumnDropDefaultActionProto* AnyResolvedAlterColumnActionProto::release_resolved_alter_column_drop_default_action_node() {
  // @@protoc_insertion_point(field_release:zetasql.AnyResolvedAlterColumnActionProto.resolved_alter_column_drop_default_action_node)
  if (has_resolved_alter_column_drop_default_action_node()) {
    clear_has_node();
      ::zetasql::ResolvedAlterColumnDropDefaultActionProto* temp = node_.resolved_alter_column_drop_default_action_node_;
    node_.resolved_alter_column_drop_default_action_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::zetasql::ResolvedAlterColumnDropDefaultActionProto& AnyResolvedAlterColumnActionProto::resolved_alter_column_drop_default_action_node() const {
  // @@protoc_insertion_point(field_get:zetasql.AnyResolvedAlterColumnActionProto.resolved_alter_column_drop_default_action_node)
  return has_resolved_alter_column_drop_default_action_node()
      ? *node_.resolved_alter_column_drop_default_action_node_
      : *reinterpret_cast< ::zetasql::ResolvedAlterColumnDropDefaultActionProto*>(&::zetasql::_ResolvedAlterColumnDropDefaultActionProto_default_instance_);
}
inline ::zetasql::ResolvedAlterColumnDropDefaultActionProto* AnyResolvedAlterColumnActionProto::mutable_resolved_alter_column_drop_default_action_node() {
  if (!has_resolved_alter_column_drop_default_action_node()) {
    clear_node();
    set_has_resolved_alter_column_drop_default_action_node();
    node_.resolved_alter_column_drop_default_action_node_ = CreateMaybeMessage< ::zetasql::ResolvedAlterColumnDropDefaultActionProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasql.AnyResolvedAlterColumnActionProto.resolved_alter_column_drop_default_action_node)
  return node_.resolved_alter_column_drop_default_action_node_;
}

inline bool AnyResolvedAlterColumnActionProto::has_node() const {
  return node_case() != NODE_NOT_SET;
}
inline void AnyResolvedAlterColumnActionProto::clear_has_node() {
  _oneof_case_[0] = NODE_NOT_SET;
}
inline AnyResolvedAlterColumnActionProto::NodeCase AnyResolvedAlterColumnActionProto::node_case() const {
  return AnyResolvedAlterColumnActionProto::NodeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResolvedAlterColumnActionProto

// optional .zetasql.ResolvedAlterActionProto parent = 1;
inline bool ResolvedAlterColumnActionProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedAlterColumnActionProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedAlterColumnActionProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedAlterColumnActionProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedAlterColumnActionProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedAlterColumnActionProto::parent() const {
  const ::zetasql::ResolvedAlterActionProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterColumnActionProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterActionProto*>(
      &::zetasql::_ResolvedAlterActionProto_default_instance_);
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedAlterColumnActionProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAlterColumnActionProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterActionProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedAlterColumnActionProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterActionProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterColumnActionProto.parent)
  return parent_;
}
inline void ResolvedAlterColumnActionProto::set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAlterColumnActionProto.parent)
}

// optional bool is_if_exists = 2;
inline bool ResolvedAlterColumnActionProto::has_is_if_exists() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedAlterColumnActionProto::set_has_is_if_exists() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedAlterColumnActionProto::clear_has_is_if_exists() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedAlterColumnActionProto::clear_is_if_exists() {
  is_if_exists_ = false;
  clear_has_is_if_exists();
}
inline bool ResolvedAlterColumnActionProto::is_if_exists() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterColumnActionProto.is_if_exists)
  return is_if_exists_;
}
inline void ResolvedAlterColumnActionProto::set_is_if_exists(bool value) {
  set_has_is_if_exists();
  is_if_exists_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedAlterColumnActionProto.is_if_exists)
}

// optional string column = 3;
inline bool ResolvedAlterColumnActionProto::has_column() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAlterColumnActionProto::set_has_column() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAlterColumnActionProto::clear_has_column() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAlterColumnActionProto::clear_column() {
  column_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_column();
}
inline const ::std::string& ResolvedAlterColumnActionProto::column() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterColumnActionProto.column)
  return column_.GetNoArena();
}
inline void ResolvedAlterColumnActionProto::set_column(const ::std::string& value) {
  set_has_column();
  column_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedAlterColumnActionProto.column)
}
#if LANG_CXX11
inline void ResolvedAlterColumnActionProto::set_column(::std::string&& value) {
  set_has_column();
  column_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedAlterColumnActionProto.column)
}
#endif
inline void ResolvedAlterColumnActionProto::set_column(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_column();
  column_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedAlterColumnActionProto.column)
}
inline void ResolvedAlterColumnActionProto::set_column(const char* value, size_t size) {
  set_has_column();
  column_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedAlterColumnActionProto.column)
}
inline ::std::string* ResolvedAlterColumnActionProto::mutable_column() {
  set_has_column();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterColumnActionProto.column)
  return column_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedAlterColumnActionProto::release_column() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAlterColumnActionProto.column)
  if (!has_column()) {
    return NULL;
  }
  clear_has_column();
  return column_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedAlterColumnActionProto::set_allocated_column(::std::string* column) {
  if (column != NULL) {
    set_has_column();
  } else {
    clear_has_column();
  }
  column_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), column);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAlterColumnActionProto.column)
}

// -------------------------------------------------------------------

// ResolvedSetOptionsActionProto

// optional .zetasql.ResolvedAlterActionProto parent = 1;
inline bool ResolvedSetOptionsActionProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedSetOptionsActionProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedSetOptionsActionProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedSetOptionsActionProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedSetOptionsActionProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedSetOptionsActionProto::parent() const {
  const ::zetasql::ResolvedAlterActionProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSetOptionsActionProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterActionProto*>(
      &::zetasql::_ResolvedAlterActionProto_default_instance_);
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedSetOptionsActionProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedSetOptionsActionProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterActionProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedSetOptionsActionProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterActionProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSetOptionsActionProto.parent)
  return parent_;
}
inline void ResolvedSetOptionsActionProto::set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedSetOptionsActionProto.parent)
}

// repeated .zetasql.ResolvedOptionProto option_list = 2;
inline int ResolvedSetOptionsActionProto::option_list_size() const {
  return option_list_.size();
}
inline void ResolvedSetOptionsActionProto::clear_option_list() {
  option_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedSetOptionsActionProto::mutable_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSetOptionsActionProto.option_list)
  return option_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedSetOptionsActionProto::mutable_option_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedSetOptionsActionProto.option_list)
  return &option_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedSetOptionsActionProto::option_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSetOptionsActionProto.option_list)
  return option_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedSetOptionsActionProto::add_option_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedSetOptionsActionProto.option_list)
  return option_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedSetOptionsActionProto::option_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedSetOptionsActionProto.option_list)
  return option_list_;
}

// -------------------------------------------------------------------

// ResolvedAddColumnActionProto

// optional .zetasql.ResolvedAlterActionProto parent = 1;
inline bool ResolvedAddColumnActionProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAddColumnActionProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAddColumnActionProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAddColumnActionProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedAddColumnActionProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedAddColumnActionProto::parent() const {
  const ::zetasql::ResolvedAlterActionProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAddColumnActionProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterActionProto*>(
      &::zetasql::_ResolvedAlterActionProto_default_instance_);
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedAddColumnActionProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAddColumnActionProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterActionProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedAddColumnActionProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterActionProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAddColumnActionProto.parent)
  return parent_;
}
inline void ResolvedAddColumnActionProto::set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAddColumnActionProto.parent)
}

// optional bool is_if_not_exists = 2;
inline bool ResolvedAddColumnActionProto::has_is_if_not_exists() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedAddColumnActionProto::set_has_is_if_not_exists() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedAddColumnActionProto::clear_has_is_if_not_exists() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedAddColumnActionProto::clear_is_if_not_exists() {
  is_if_not_exists_ = false;
  clear_has_is_if_not_exists();
}
inline bool ResolvedAddColumnActionProto::is_if_not_exists() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAddColumnActionProto.is_if_not_exists)
  return is_if_not_exists_;
}
inline void ResolvedAddColumnActionProto::set_is_if_not_exists(bool value) {
  set_has_is_if_not_exists();
  is_if_not_exists_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedAddColumnActionProto.is_if_not_exists)
}

// optional .zetasql.ResolvedColumnDefinitionProto column_definition = 3;
inline bool ResolvedAddColumnActionProto::has_column_definition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedAddColumnActionProto::set_has_column_definition() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedAddColumnActionProto::clear_has_column_definition() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedAddColumnActionProto::clear_column_definition() {
  if (column_definition_ != NULL) column_definition_->Clear();
  clear_has_column_definition();
}
inline const ::zetasql::ResolvedColumnDefinitionProto& ResolvedAddColumnActionProto::_internal_column_definition() const {
  return *column_definition_;
}
inline const ::zetasql::ResolvedColumnDefinitionProto& ResolvedAddColumnActionProto::column_definition() const {
  const ::zetasql::ResolvedColumnDefinitionProto* p = column_definition_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAddColumnActionProto.column_definition)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedColumnDefinitionProto*>(
      &::zetasql::_ResolvedColumnDefinitionProto_default_instance_);
}
inline ::zetasql::ResolvedColumnDefinitionProto* ResolvedAddColumnActionProto::release_column_definition() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAddColumnActionProto.column_definition)
  clear_has_column_definition();
  ::zetasql::ResolvedColumnDefinitionProto* temp = column_definition_;
  column_definition_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedColumnDefinitionProto* ResolvedAddColumnActionProto::mutable_column_definition() {
  set_has_column_definition();
  if (column_definition_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedColumnDefinitionProto>(GetArenaNoVirtual());
    column_definition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAddColumnActionProto.column_definition)
  return column_definition_;
}
inline void ResolvedAddColumnActionProto::set_allocated_column_definition(::zetasql::ResolvedColumnDefinitionProto* column_definition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete column_definition_;
  }
  if (column_definition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      column_definition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, column_definition, submessage_arena);
    }
    set_has_column_definition();
  } else {
    clear_has_column_definition();
  }
  column_definition_ = column_definition;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAddColumnActionProto.column_definition)
}

// -------------------------------------------------------------------

// ResolvedAddConstraintActionProto

// optional .zetasql.ResolvedAlterActionProto parent = 1;
inline bool ResolvedAddConstraintActionProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAddConstraintActionProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAddConstraintActionProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAddConstraintActionProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedAddConstraintActionProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedAddConstraintActionProto::parent() const {
  const ::zetasql::ResolvedAlterActionProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAddConstraintActionProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterActionProto*>(
      &::zetasql::_ResolvedAlterActionProto_default_instance_);
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedAddConstraintActionProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAddConstraintActionProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterActionProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedAddConstraintActionProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterActionProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAddConstraintActionProto.parent)
  return parent_;
}
inline void ResolvedAddConstraintActionProto::set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAddConstraintActionProto.parent)
}

// optional bool is_if_not_exists = 2;
inline bool ResolvedAddConstraintActionProto::has_is_if_not_exists() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedAddConstraintActionProto::set_has_is_if_not_exists() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedAddConstraintActionProto::clear_has_is_if_not_exists() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedAddConstraintActionProto::clear_is_if_not_exists() {
  is_if_not_exists_ = false;
  clear_has_is_if_not_exists();
}
inline bool ResolvedAddConstraintActionProto::is_if_not_exists() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAddConstraintActionProto.is_if_not_exists)
  return is_if_not_exists_;
}
inline void ResolvedAddConstraintActionProto::set_is_if_not_exists(bool value) {
  set_has_is_if_not_exists();
  is_if_not_exists_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedAddConstraintActionProto.is_if_not_exists)
}

// optional .zetasql.AnyResolvedConstraintProto constraint = 3;
inline bool ResolvedAddConstraintActionProto::has_constraint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedAddConstraintActionProto::set_has_constraint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedAddConstraintActionProto::clear_has_constraint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedAddConstraintActionProto::clear_constraint() {
  if (constraint_ != NULL) constraint_->Clear();
  clear_has_constraint();
}
inline const ::zetasql::AnyResolvedConstraintProto& ResolvedAddConstraintActionProto::_internal_constraint() const {
  return *constraint_;
}
inline const ::zetasql::AnyResolvedConstraintProto& ResolvedAddConstraintActionProto::constraint() const {
  const ::zetasql::AnyResolvedConstraintProto* p = constraint_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAddConstraintActionProto.constraint)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedConstraintProto*>(
      &::zetasql::_AnyResolvedConstraintProto_default_instance_);
}
inline ::zetasql::AnyResolvedConstraintProto* ResolvedAddConstraintActionProto::release_constraint() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAddConstraintActionProto.constraint)
  clear_has_constraint();
  ::zetasql::AnyResolvedConstraintProto* temp = constraint_;
  constraint_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedConstraintProto* ResolvedAddConstraintActionProto::mutable_constraint() {
  set_has_constraint();
  if (constraint_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedConstraintProto>(GetArenaNoVirtual());
    constraint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAddConstraintActionProto.constraint)
  return constraint_;
}
inline void ResolvedAddConstraintActionProto::set_allocated_constraint(::zetasql::AnyResolvedConstraintProto* constraint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete constraint_;
  }
  if (constraint) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      constraint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, constraint, submessage_arena);
    }
    set_has_constraint();
  } else {
    clear_has_constraint();
  }
  constraint_ = constraint;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAddConstraintActionProto.constraint)
}

// optional .zetasql.TableRefProto table = 4;
inline bool ResolvedAddConstraintActionProto::has_table() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedAddConstraintActionProto::set_has_table() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedAddConstraintActionProto::clear_has_table() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasql::TableRefProto& ResolvedAddConstraintActionProto::_internal_table() const {
  return *table_;
}
inline const ::zetasql::TableRefProto& ResolvedAddConstraintActionProto::table() const {
  const ::zetasql::TableRefProto* p = table_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAddConstraintActionProto.table)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TableRefProto*>(
      &::zetasql::_TableRefProto_default_instance_);
}
inline ::zetasql::TableRefProto* ResolvedAddConstraintActionProto::release_table() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAddConstraintActionProto.table)
  clear_has_table();
  ::zetasql::TableRefProto* temp = table_;
  table_ = NULL;
  return temp;
}
inline ::zetasql::TableRefProto* ResolvedAddConstraintActionProto::mutable_table() {
  set_has_table();
  if (table_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TableRefProto>(GetArenaNoVirtual());
    table_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAddConstraintActionProto.table)
  return table_;
}
inline void ResolvedAddConstraintActionProto::set_allocated_table(::zetasql::TableRefProto* table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(table_);
  }
  if (table) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    set_has_table();
  } else {
    clear_has_table();
  }
  table_ = table;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAddConstraintActionProto.table)
}

// -------------------------------------------------------------------

// ResolvedDropConstraintActionProto

// optional .zetasql.ResolvedAlterActionProto parent = 1;
inline bool ResolvedDropConstraintActionProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedDropConstraintActionProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedDropConstraintActionProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedDropConstraintActionProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedDropConstraintActionProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedDropConstraintActionProto::parent() const {
  const ::zetasql::ResolvedAlterActionProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropConstraintActionProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterActionProto*>(
      &::zetasql::_ResolvedAlterActionProto_default_instance_);
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedDropConstraintActionProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDropConstraintActionProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterActionProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedDropConstraintActionProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterActionProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDropConstraintActionProto.parent)
  return parent_;
}
inline void ResolvedDropConstraintActionProto::set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDropConstraintActionProto.parent)
}

// optional bool is_if_exists = 2;
inline bool ResolvedDropConstraintActionProto::has_is_if_exists() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedDropConstraintActionProto::set_has_is_if_exists() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedDropConstraintActionProto::clear_has_is_if_exists() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedDropConstraintActionProto::clear_is_if_exists() {
  is_if_exists_ = false;
  clear_has_is_if_exists();
}
inline bool ResolvedDropConstraintActionProto::is_if_exists() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropConstraintActionProto.is_if_exists)
  return is_if_exists_;
}
inline void ResolvedDropConstraintActionProto::set_is_if_exists(bool value) {
  set_has_is_if_exists();
  is_if_exists_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropConstraintActionProto.is_if_exists)
}

// optional string name = 3;
inline bool ResolvedDropConstraintActionProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedDropConstraintActionProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedDropConstraintActionProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedDropConstraintActionProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ResolvedDropConstraintActionProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropConstraintActionProto.name)
  return name_.GetNoArena();
}
inline void ResolvedDropConstraintActionProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropConstraintActionProto.name)
}
#if LANG_CXX11
inline void ResolvedDropConstraintActionProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedDropConstraintActionProto.name)
}
#endif
inline void ResolvedDropConstraintActionProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedDropConstraintActionProto.name)
}
inline void ResolvedDropConstraintActionProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedDropConstraintActionProto.name)
}
inline ::std::string* ResolvedDropConstraintActionProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDropConstraintActionProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedDropConstraintActionProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDropConstraintActionProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedDropConstraintActionProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDropConstraintActionProto.name)
}

// -------------------------------------------------------------------

// ResolvedDropPrimaryKeyActionProto

// optional .zetasql.ResolvedAlterActionProto parent = 1;
inline bool ResolvedDropPrimaryKeyActionProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedDropPrimaryKeyActionProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedDropPrimaryKeyActionProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedDropPrimaryKeyActionProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedDropPrimaryKeyActionProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedDropPrimaryKeyActionProto::parent() const {
  const ::zetasql::ResolvedAlterActionProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropPrimaryKeyActionProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterActionProto*>(
      &::zetasql::_ResolvedAlterActionProto_default_instance_);
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedDropPrimaryKeyActionProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDropPrimaryKeyActionProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterActionProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedDropPrimaryKeyActionProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterActionProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDropPrimaryKeyActionProto.parent)
  return parent_;
}
inline void ResolvedDropPrimaryKeyActionProto::set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDropPrimaryKeyActionProto.parent)
}

// optional bool is_if_exists = 2;
inline bool ResolvedDropPrimaryKeyActionProto::has_is_if_exists() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedDropPrimaryKeyActionProto::set_has_is_if_exists() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedDropPrimaryKeyActionProto::clear_has_is_if_exists() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedDropPrimaryKeyActionProto::clear_is_if_exists() {
  is_if_exists_ = false;
  clear_has_is_if_exists();
}
inline bool ResolvedDropPrimaryKeyActionProto::is_if_exists() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropPrimaryKeyActionProto.is_if_exists)
  return is_if_exists_;
}
inline void ResolvedDropPrimaryKeyActionProto::set_is_if_exists(bool value) {
  set_has_is_if_exists();
  is_if_exists_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropPrimaryKeyActionProto.is_if_exists)
}

// -------------------------------------------------------------------

// ResolvedAlterColumnOptionsActionProto

// optional .zetasql.ResolvedAlterColumnActionProto parent = 1;
inline bool ResolvedAlterColumnOptionsActionProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAlterColumnOptionsActionProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAlterColumnOptionsActionProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAlterColumnOptionsActionProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterColumnActionProto& ResolvedAlterColumnOptionsActionProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterColumnActionProto& ResolvedAlterColumnOptionsActionProto::parent() const {
  const ::zetasql::ResolvedAlterColumnActionProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterColumnOptionsActionProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterColumnActionProto*>(
      &::zetasql::_ResolvedAlterColumnActionProto_default_instance_);
}
inline ::zetasql::ResolvedAlterColumnActionProto* ResolvedAlterColumnOptionsActionProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAlterColumnOptionsActionProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterColumnActionProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterColumnActionProto* ResolvedAlterColumnOptionsActionProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterColumnActionProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterColumnOptionsActionProto.parent)
  return parent_;
}
inline void ResolvedAlterColumnOptionsActionProto::set_allocated_parent(::zetasql::ResolvedAlterColumnActionProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAlterColumnOptionsActionProto.parent)
}

// repeated .zetasql.ResolvedOptionProto option_list = 2;
inline int ResolvedAlterColumnOptionsActionProto::option_list_size() const {
  return option_list_.size();
}
inline void ResolvedAlterColumnOptionsActionProto::clear_option_list() {
  option_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedAlterColumnOptionsActionProto::mutable_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterColumnOptionsActionProto.option_list)
  return option_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedAlterColumnOptionsActionProto::mutable_option_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedAlterColumnOptionsActionProto.option_list)
  return &option_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedAlterColumnOptionsActionProto::option_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterColumnOptionsActionProto.option_list)
  return option_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedAlterColumnOptionsActionProto::add_option_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAlterColumnOptionsActionProto.option_list)
  return option_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedAlterColumnOptionsActionProto::option_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedAlterColumnOptionsActionProto.option_list)
  return option_list_;
}

// -------------------------------------------------------------------

// ResolvedAlterColumnDropNotNullActionProto

// optional .zetasql.ResolvedAlterColumnActionProto parent = 1;
inline bool ResolvedAlterColumnDropNotNullActionProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAlterColumnDropNotNullActionProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAlterColumnDropNotNullActionProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAlterColumnDropNotNullActionProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterColumnActionProto& ResolvedAlterColumnDropNotNullActionProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterColumnActionProto& ResolvedAlterColumnDropNotNullActionProto::parent() const {
  const ::zetasql::ResolvedAlterColumnActionProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterColumnDropNotNullActionProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterColumnActionProto*>(
      &::zetasql::_ResolvedAlterColumnActionProto_default_instance_);
}
inline ::zetasql::ResolvedAlterColumnActionProto* ResolvedAlterColumnDropNotNullActionProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAlterColumnDropNotNullActionProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterColumnActionProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterColumnActionProto* ResolvedAlterColumnDropNotNullActionProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterColumnActionProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterColumnDropNotNullActionProto.parent)
  return parent_;
}
inline void ResolvedAlterColumnDropNotNullActionProto::set_allocated_parent(::zetasql::ResolvedAlterColumnActionProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAlterColumnDropNotNullActionProto.parent)
}

// -------------------------------------------------------------------

// ResolvedAlterColumnSetDataTypeActionProto

// optional .zetasql.ResolvedAlterColumnActionProto parent = 1;
inline bool ResolvedAlterColumnSetDataTypeActionProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAlterColumnSetDataTypeActionProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAlterColumnSetDataTypeActionProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAlterColumnSetDataTypeActionProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterColumnActionProto& ResolvedAlterColumnSetDataTypeActionProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterColumnActionProto& ResolvedAlterColumnSetDataTypeActionProto::parent() const {
  const ::zetasql::ResolvedAlterColumnActionProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterColumnSetDataTypeActionProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterColumnActionProto*>(
      &::zetasql::_ResolvedAlterColumnActionProto_default_instance_);
}
inline ::zetasql::ResolvedAlterColumnActionProto* ResolvedAlterColumnSetDataTypeActionProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAlterColumnSetDataTypeActionProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterColumnActionProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterColumnActionProto* ResolvedAlterColumnSetDataTypeActionProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterColumnActionProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterColumnSetDataTypeActionProto.parent)
  return parent_;
}
inline void ResolvedAlterColumnSetDataTypeActionProto::set_allocated_parent(::zetasql::ResolvedAlterColumnActionProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAlterColumnSetDataTypeActionProto.parent)
}

// optional .zetasql.TypeProto updated_type = 4;
inline bool ResolvedAlterColumnSetDataTypeActionProto::has_updated_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedAlterColumnSetDataTypeActionProto::set_has_updated_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedAlterColumnSetDataTypeActionProto::clear_has_updated_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::TypeProto& ResolvedAlterColumnSetDataTypeActionProto::_internal_updated_type() const {
  return *updated_type_;
}
inline const ::zetasql::TypeProto& ResolvedAlterColumnSetDataTypeActionProto::updated_type() const {
  const ::zetasql::TypeProto* p = updated_type_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterColumnSetDataTypeActionProto.updated_type)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TypeProto*>(
      &::zetasql::_TypeProto_default_instance_);
}
inline ::zetasql::TypeProto* ResolvedAlterColumnSetDataTypeActionProto::release_updated_type() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAlterColumnSetDataTypeActionProto.updated_type)
  clear_has_updated_type();
  ::zetasql::TypeProto* temp = updated_type_;
  updated_type_ = NULL;
  return temp;
}
inline ::zetasql::TypeProto* ResolvedAlterColumnSetDataTypeActionProto::mutable_updated_type() {
  set_has_updated_type();
  if (updated_type_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaNoVirtual());
    updated_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterColumnSetDataTypeActionProto.updated_type)
  return updated_type_;
}
inline void ResolvedAlterColumnSetDataTypeActionProto::set_allocated_updated_type(::zetasql::TypeProto* updated_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(updated_type_);
  }
  if (updated_type) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(updated_type)->GetArena();
    if (message_arena != submessage_arena) {
      updated_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, updated_type, submessage_arena);
    }
    set_has_updated_type();
  } else {
    clear_has_updated_type();
  }
  updated_type_ = updated_type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAlterColumnSetDataTypeActionProto.updated_type)
}

// optional .zetasql.TypeParametersProto updated_type_parameters = 5;
inline bool ResolvedAlterColumnSetDataTypeActionProto::has_updated_type_parameters() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedAlterColumnSetDataTypeActionProto::set_has_updated_type_parameters() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedAlterColumnSetDataTypeActionProto::clear_has_updated_type_parameters() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasql::TypeParametersProto& ResolvedAlterColumnSetDataTypeActionProto::_internal_updated_type_parameters() const {
  return *updated_type_parameters_;
}
inline const ::zetasql::TypeParametersProto& ResolvedAlterColumnSetDataTypeActionProto::updated_type_parameters() const {
  const ::zetasql::TypeParametersProto* p = updated_type_parameters_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterColumnSetDataTypeActionProto.updated_type_parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TypeParametersProto*>(
      &::zetasql::_TypeParametersProto_default_instance_);
}
inline ::zetasql::TypeParametersProto* ResolvedAlterColumnSetDataTypeActionProto::release_updated_type_parameters() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAlterColumnSetDataTypeActionProto.updated_type_parameters)
  clear_has_updated_type_parameters();
  ::zetasql::TypeParametersProto* temp = updated_type_parameters_;
  updated_type_parameters_ = NULL;
  return temp;
}
inline ::zetasql::TypeParametersProto* ResolvedAlterColumnSetDataTypeActionProto::mutable_updated_type_parameters() {
  set_has_updated_type_parameters();
  if (updated_type_parameters_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TypeParametersProto>(GetArenaNoVirtual());
    updated_type_parameters_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterColumnSetDataTypeActionProto.updated_type_parameters)
  return updated_type_parameters_;
}
inline void ResolvedAlterColumnSetDataTypeActionProto::set_allocated_updated_type_parameters(::zetasql::TypeParametersProto* updated_type_parameters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(updated_type_parameters_);
  }
  if (updated_type_parameters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      updated_type_parameters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, updated_type_parameters, submessage_arena);
    }
    set_has_updated_type_parameters();
  } else {
    clear_has_updated_type_parameters();
  }
  updated_type_parameters_ = updated_type_parameters;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAlterColumnSetDataTypeActionProto.updated_type_parameters)
}

// optional .zetasql.ResolvedColumnAnnotationsProto updated_annotations = 6;
inline bool ResolvedAlterColumnSetDataTypeActionProto::has_updated_annotations() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedAlterColumnSetDataTypeActionProto::set_has_updated_annotations() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedAlterColumnSetDataTypeActionProto::clear_has_updated_annotations() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedAlterColumnSetDataTypeActionProto::clear_updated_annotations() {
  if (updated_annotations_ != NULL) updated_annotations_->Clear();
  clear_has_updated_annotations();
}
inline const ::zetasql::ResolvedColumnAnnotationsProto& ResolvedAlterColumnSetDataTypeActionProto::_internal_updated_annotations() const {
  return *updated_annotations_;
}
inline const ::zetasql::ResolvedColumnAnnotationsProto& ResolvedAlterColumnSetDataTypeActionProto::updated_annotations() const {
  const ::zetasql::ResolvedColumnAnnotationsProto* p = updated_annotations_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterColumnSetDataTypeActionProto.updated_annotations)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedColumnAnnotationsProto*>(
      &::zetasql::_ResolvedColumnAnnotationsProto_default_instance_);
}
inline ::zetasql::ResolvedColumnAnnotationsProto* ResolvedAlterColumnSetDataTypeActionProto::release_updated_annotations() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAlterColumnSetDataTypeActionProto.updated_annotations)
  clear_has_updated_annotations();
  ::zetasql::ResolvedColumnAnnotationsProto* temp = updated_annotations_;
  updated_annotations_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedColumnAnnotationsProto* ResolvedAlterColumnSetDataTypeActionProto::mutable_updated_annotations() {
  set_has_updated_annotations();
  if (updated_annotations_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedColumnAnnotationsProto>(GetArenaNoVirtual());
    updated_annotations_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterColumnSetDataTypeActionProto.updated_annotations)
  return updated_annotations_;
}
inline void ResolvedAlterColumnSetDataTypeActionProto::set_allocated_updated_annotations(::zetasql::ResolvedColumnAnnotationsProto* updated_annotations) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete updated_annotations_;
  }
  if (updated_annotations) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      updated_annotations = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, updated_annotations, submessage_arena);
    }
    set_has_updated_annotations();
  } else {
    clear_has_updated_annotations();
  }
  updated_annotations_ = updated_annotations;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAlterColumnSetDataTypeActionProto.updated_annotations)
}

// -------------------------------------------------------------------

// ResolvedAlterColumnSetDefaultActionProto

// optional .zetasql.ResolvedAlterColumnActionProto parent = 1;
inline bool ResolvedAlterColumnSetDefaultActionProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAlterColumnSetDefaultActionProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAlterColumnSetDefaultActionProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAlterColumnSetDefaultActionProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterColumnActionProto& ResolvedAlterColumnSetDefaultActionProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterColumnActionProto& ResolvedAlterColumnSetDefaultActionProto::parent() const {
  const ::zetasql::ResolvedAlterColumnActionProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterColumnSetDefaultActionProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterColumnActionProto*>(
      &::zetasql::_ResolvedAlterColumnActionProto_default_instance_);
}
inline ::zetasql::ResolvedAlterColumnActionProto* ResolvedAlterColumnSetDefaultActionProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAlterColumnSetDefaultActionProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterColumnActionProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterColumnActionProto* ResolvedAlterColumnSetDefaultActionProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterColumnActionProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterColumnSetDefaultActionProto.parent)
  return parent_;
}
inline void ResolvedAlterColumnSetDefaultActionProto::set_allocated_parent(::zetasql::ResolvedAlterColumnActionProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAlterColumnSetDefaultActionProto.parent)
}

// optional .zetasql.ResolvedColumnDefaultValueProto default_value = 4;
inline bool ResolvedAlterColumnSetDefaultActionProto::has_default_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedAlterColumnSetDefaultActionProto::set_has_default_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedAlterColumnSetDefaultActionProto::clear_has_default_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedAlterColumnSetDefaultActionProto::clear_default_value() {
  if (default_value_ != NULL) default_value_->Clear();
  clear_has_default_value();
}
inline const ::zetasql::ResolvedColumnDefaultValueProto& ResolvedAlterColumnSetDefaultActionProto::_internal_default_value() const {
  return *default_value_;
}
inline const ::zetasql::ResolvedColumnDefaultValueProto& ResolvedAlterColumnSetDefaultActionProto::default_value() const {
  const ::zetasql::ResolvedColumnDefaultValueProto* p = default_value_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterColumnSetDefaultActionProto.default_value)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedColumnDefaultValueProto*>(
      &::zetasql::_ResolvedColumnDefaultValueProto_default_instance_);
}
inline ::zetasql::ResolvedColumnDefaultValueProto* ResolvedAlterColumnSetDefaultActionProto::release_default_value() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAlterColumnSetDefaultActionProto.default_value)
  clear_has_default_value();
  ::zetasql::ResolvedColumnDefaultValueProto* temp = default_value_;
  default_value_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedColumnDefaultValueProto* ResolvedAlterColumnSetDefaultActionProto::mutable_default_value() {
  set_has_default_value();
  if (default_value_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedColumnDefaultValueProto>(GetArenaNoVirtual());
    default_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterColumnSetDefaultActionProto.default_value)
  return default_value_;
}
inline void ResolvedAlterColumnSetDefaultActionProto::set_allocated_default_value(::zetasql::ResolvedColumnDefaultValueProto* default_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete default_value_;
  }
  if (default_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      default_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, default_value, submessage_arena);
    }
    set_has_default_value();
  } else {
    clear_has_default_value();
  }
  default_value_ = default_value;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAlterColumnSetDefaultActionProto.default_value)
}

// -------------------------------------------------------------------

// ResolvedAlterColumnDropDefaultActionProto

// optional .zetasql.ResolvedAlterColumnActionProto parent = 1;
inline bool ResolvedAlterColumnDropDefaultActionProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAlterColumnDropDefaultActionProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAlterColumnDropDefaultActionProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAlterColumnDropDefaultActionProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterColumnActionProto& ResolvedAlterColumnDropDefaultActionProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterColumnActionProto& ResolvedAlterColumnDropDefaultActionProto::parent() const {
  const ::zetasql::ResolvedAlterColumnActionProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterColumnDropDefaultActionProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterColumnActionProto*>(
      &::zetasql::_ResolvedAlterColumnActionProto_default_instance_);
}
inline ::zetasql::ResolvedAlterColumnActionProto* ResolvedAlterColumnDropDefaultActionProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAlterColumnDropDefaultActionProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterColumnActionProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterColumnActionProto* ResolvedAlterColumnDropDefaultActionProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterColumnActionProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterColumnDropDefaultActionProto.parent)
  return parent_;
}
inline void ResolvedAlterColumnDropDefaultActionProto::set_allocated_parent(::zetasql::ResolvedAlterColumnActionProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAlterColumnDropDefaultActionProto.parent)
}

// -------------------------------------------------------------------

// ResolvedDropColumnActionProto

// optional .zetasql.ResolvedAlterActionProto parent = 1;
inline bool ResolvedDropColumnActionProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedDropColumnActionProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedDropColumnActionProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedDropColumnActionProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedDropColumnActionProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedDropColumnActionProto::parent() const {
  const ::zetasql::ResolvedAlterActionProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropColumnActionProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterActionProto*>(
      &::zetasql::_ResolvedAlterActionProto_default_instance_);
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedDropColumnActionProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDropColumnActionProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterActionProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedDropColumnActionProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterActionProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDropColumnActionProto.parent)
  return parent_;
}
inline void ResolvedDropColumnActionProto::set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDropColumnActionProto.parent)
}

// optional bool is_if_exists = 2;
inline bool ResolvedDropColumnActionProto::has_is_if_exists() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedDropColumnActionProto::set_has_is_if_exists() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedDropColumnActionProto::clear_has_is_if_exists() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedDropColumnActionProto::clear_is_if_exists() {
  is_if_exists_ = false;
  clear_has_is_if_exists();
}
inline bool ResolvedDropColumnActionProto::is_if_exists() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropColumnActionProto.is_if_exists)
  return is_if_exists_;
}
inline void ResolvedDropColumnActionProto::set_is_if_exists(bool value) {
  set_has_is_if_exists();
  is_if_exists_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropColumnActionProto.is_if_exists)
}

// optional string name = 3;
inline bool ResolvedDropColumnActionProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedDropColumnActionProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedDropColumnActionProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedDropColumnActionProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ResolvedDropColumnActionProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropColumnActionProto.name)
  return name_.GetNoArena();
}
inline void ResolvedDropColumnActionProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropColumnActionProto.name)
}
#if LANG_CXX11
inline void ResolvedDropColumnActionProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedDropColumnActionProto.name)
}
#endif
inline void ResolvedDropColumnActionProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedDropColumnActionProto.name)
}
inline void ResolvedDropColumnActionProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedDropColumnActionProto.name)
}
inline ::std::string* ResolvedDropColumnActionProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDropColumnActionProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedDropColumnActionProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDropColumnActionProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedDropColumnActionProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDropColumnActionProto.name)
}

// -------------------------------------------------------------------

// ResolvedRenameColumnActionProto

// optional .zetasql.ResolvedAlterActionProto parent = 1;
inline bool ResolvedRenameColumnActionProto::has_parent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedRenameColumnActionProto::set_has_parent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedRenameColumnActionProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedRenameColumnActionProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedRenameColumnActionProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedRenameColumnActionProto::parent() const {
  const ::zetasql::ResolvedAlterActionProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRenameColumnActionProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterActionProto*>(
      &::zetasql::_ResolvedAlterActionProto_default_instance_);
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedRenameColumnActionProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedRenameColumnActionProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterActionProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedRenameColumnActionProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterActionProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedRenameColumnActionProto.parent)
  return parent_;
}
inline void ResolvedRenameColumnActionProto::set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedRenameColumnActionProto.parent)
}

// optional bool is_if_exists = 4;
inline bool ResolvedRenameColumnActionProto::has_is_if_exists() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedRenameColumnActionProto::set_has_is_if_exists() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedRenameColumnActionProto::clear_has_is_if_exists() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedRenameColumnActionProto::clear_is_if_exists() {
  is_if_exists_ = false;
  clear_has_is_if_exists();
}
inline bool ResolvedRenameColumnActionProto::is_if_exists() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRenameColumnActionProto.is_if_exists)
  return is_if_exists_;
}
inline void ResolvedRenameColumnActionProto::set_is_if_exists(bool value) {
  set_has_is_if_exists();
  is_if_exists_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedRenameColumnActionProto.is_if_exists)
}

// optional string name = 2;
inline bool ResolvedRenameColumnActionProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedRenameColumnActionProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedRenameColumnActionProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedRenameColumnActionProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ResolvedRenameColumnActionProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRenameColumnActionProto.name)
  return name_.GetNoArena();
}
inline void ResolvedRenameColumnActionProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedRenameColumnActionProto.name)
}
#if LANG_CXX11
inline void ResolvedRenameColumnActionProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedRenameColumnActionProto.name)
}
#endif
inline void ResolvedRenameColumnActionProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedRenameColumnActionProto.name)
}
inline void ResolvedRenameColumnActionProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedRenameColumnActionProto.name)
}
inline ::std::string* ResolvedRenameColumnActionProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedRenameColumnActionProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedRenameColumnActionProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedRenameColumnActionProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedRenameColumnActionProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedRenameColumnActionProto.name)
}

// optional string new_name = 3;
inline bool ResolvedRenameColumnActionProto::has_new_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedRenameColumnActionProto::set_has_new_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedRenameColumnActionProto::clear_has_new_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedRenameColumnActionProto::clear_new_name() {
  new_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_new_name();
}
inline const ::std::string& ResolvedRenameColumnActionProto::new_name() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRenameColumnActionProto.new_name)
  return new_name_.GetNoArena();
}
inline void ResolvedRenameColumnActionProto::set_new_name(const ::std::string& value) {
  set_has_new_name();
  new_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedRenameColumnActionProto.new_name)
}
#if LANG_CXX11
inline void ResolvedRenameColumnActionProto::set_new_name(::std::string&& value) {
  set_has_new_name();
  new_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedRenameColumnActionProto.new_name)
}
#endif
inline void ResolvedRenameColumnActionProto::set_new_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_new_name();
  new_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedRenameColumnActionProto.new_name)
}
inline void ResolvedRenameColumnActionProto::set_new_name(const char* value, size_t size) {
  set_has_new_name();
  new_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedRenameColumnActionProto.new_name)
}
inline ::std::string* ResolvedRenameColumnActionProto::mutable_new_name() {
  set_has_new_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedRenameColumnActionProto.new_name)
  return new_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedRenameColumnActionProto::release_new_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedRenameColumnActionProto.new_name)
  if (!has_new_name()) {
    return NULL;
  }
  clear_has_new_name();
  return new_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedRenameColumnActionProto::set_allocated_new_name(::std::string* new_name) {
  if (new_name != NULL) {
    set_has_new_name();
  } else {
    clear_has_new_name();
  }
  new_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedRenameColumnActionProto.new_name)
}

// -------------------------------------------------------------------

// ResolvedSetAsActionProto

// optional .zetasql.ResolvedAlterActionProto parent = 1;
inline bool ResolvedSetAsActionProto::has_parent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedSetAsActionProto::set_has_parent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedSetAsActionProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedSetAsActionProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedSetAsActionProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedSetAsActionProto::parent() const {
  const ::zetasql::ResolvedAlterActionProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSetAsActionProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterActionProto*>(
      &::zetasql::_ResolvedAlterActionProto_default_instance_);
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedSetAsActionProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedSetAsActionProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterActionProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedSetAsActionProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterActionProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSetAsActionProto.parent)
  return parent_;
}
inline void ResolvedSetAsActionProto::set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedSetAsActionProto.parent)
}

// optional string entity_body_json = 2;
inline bool ResolvedSetAsActionProto::has_entity_body_json() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedSetAsActionProto::set_has_entity_body_json() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedSetAsActionProto::clear_has_entity_body_json() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedSetAsActionProto::clear_entity_body_json() {
  entity_body_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entity_body_json();
}
inline const ::std::string& ResolvedSetAsActionProto::entity_body_json() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSetAsActionProto.entity_body_json)
  return entity_body_json_.GetNoArena();
}
inline void ResolvedSetAsActionProto::set_entity_body_json(const ::std::string& value) {
  set_has_entity_body_json();
  entity_body_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedSetAsActionProto.entity_body_json)
}
#if LANG_CXX11
inline void ResolvedSetAsActionProto::set_entity_body_json(::std::string&& value) {
  set_has_entity_body_json();
  entity_body_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedSetAsActionProto.entity_body_json)
}
#endif
inline void ResolvedSetAsActionProto::set_entity_body_json(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_entity_body_json();
  entity_body_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedSetAsActionProto.entity_body_json)
}
inline void ResolvedSetAsActionProto::set_entity_body_json(const char* value, size_t size) {
  set_has_entity_body_json();
  entity_body_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedSetAsActionProto.entity_body_json)
}
inline ::std::string* ResolvedSetAsActionProto::mutable_entity_body_json() {
  set_has_entity_body_json();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSetAsActionProto.entity_body_json)
  return entity_body_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedSetAsActionProto::release_entity_body_json() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedSetAsActionProto.entity_body_json)
  if (!has_entity_body_json()) {
    return NULL;
  }
  clear_has_entity_body_json();
  return entity_body_json_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedSetAsActionProto::set_allocated_entity_body_json(::std::string* entity_body_json) {
  if (entity_body_json != NULL) {
    set_has_entity_body_json();
  } else {
    clear_has_entity_body_json();
  }
  entity_body_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entity_body_json);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedSetAsActionProto.entity_body_json)
}

// optional string entity_body_text = 3;
inline bool ResolvedSetAsActionProto::has_entity_body_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedSetAsActionProto::set_has_entity_body_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedSetAsActionProto::clear_has_entity_body_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedSetAsActionProto::clear_entity_body_text() {
  entity_body_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entity_body_text();
}
inline const ::std::string& ResolvedSetAsActionProto::entity_body_text() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSetAsActionProto.entity_body_text)
  return entity_body_text_.GetNoArena();
}
inline void ResolvedSetAsActionProto::set_entity_body_text(const ::std::string& value) {
  set_has_entity_body_text();
  entity_body_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedSetAsActionProto.entity_body_text)
}
#if LANG_CXX11
inline void ResolvedSetAsActionProto::set_entity_body_text(::std::string&& value) {
  set_has_entity_body_text();
  entity_body_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedSetAsActionProto.entity_body_text)
}
#endif
inline void ResolvedSetAsActionProto::set_entity_body_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_entity_body_text();
  entity_body_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedSetAsActionProto.entity_body_text)
}
inline void ResolvedSetAsActionProto::set_entity_body_text(const char* value, size_t size) {
  set_has_entity_body_text();
  entity_body_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedSetAsActionProto.entity_body_text)
}
inline ::std::string* ResolvedSetAsActionProto::mutable_entity_body_text() {
  set_has_entity_body_text();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSetAsActionProto.entity_body_text)
  return entity_body_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedSetAsActionProto::release_entity_body_text() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedSetAsActionProto.entity_body_text)
  if (!has_entity_body_text()) {
    return NULL;
  }
  clear_has_entity_body_text();
  return entity_body_text_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedSetAsActionProto::set_allocated_entity_body_text(::std::string* entity_body_text) {
  if (entity_body_text != NULL) {
    set_has_entity_body_text();
  } else {
    clear_has_entity_body_text();
  }
  entity_body_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entity_body_text);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedSetAsActionProto.entity_body_text)
}

// -------------------------------------------------------------------

// ResolvedSetCollateClauseProto

// optional .zetasql.ResolvedAlterActionProto parent = 1;
inline bool ResolvedSetCollateClauseProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedSetCollateClauseProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedSetCollateClauseProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedSetCollateClauseProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedSetCollateClauseProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedSetCollateClauseProto::parent() const {
  const ::zetasql::ResolvedAlterActionProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSetCollateClauseProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterActionProto*>(
      &::zetasql::_ResolvedAlterActionProto_default_instance_);
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedSetCollateClauseProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedSetCollateClauseProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterActionProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedSetCollateClauseProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterActionProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSetCollateClauseProto.parent)
  return parent_;
}
inline void ResolvedSetCollateClauseProto::set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedSetCollateClauseProto.parent)
}

// optional .zetasql.AnyResolvedExprProto collation_name = 2;
inline bool ResolvedSetCollateClauseProto::has_collation_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedSetCollateClauseProto::set_has_collation_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedSetCollateClauseProto::clear_has_collation_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedSetCollateClauseProto::clear_collation_name() {
  if (collation_name_ != NULL) collation_name_->Clear();
  clear_has_collation_name();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedSetCollateClauseProto::_internal_collation_name() const {
  return *collation_name_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedSetCollateClauseProto::collation_name() const {
  const ::zetasql::AnyResolvedExprProto* p = collation_name_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedSetCollateClauseProto.collation_name)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedSetCollateClauseProto::release_collation_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedSetCollateClauseProto.collation_name)
  clear_has_collation_name();
  ::zetasql::AnyResolvedExprProto* temp = collation_name_;
  collation_name_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedSetCollateClauseProto::mutable_collation_name() {
  set_has_collation_name();
  if (collation_name_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    collation_name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedSetCollateClauseProto.collation_name)
  return collation_name_;
}
inline void ResolvedSetCollateClauseProto::set_allocated_collation_name(::zetasql::AnyResolvedExprProto* collation_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete collation_name_;
  }
  if (collation_name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      collation_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, collation_name, submessage_arena);
    }
    set_has_collation_name();
  } else {
    clear_has_collation_name();
  }
  collation_name_ = collation_name;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedSetCollateClauseProto.collation_name)
}

// -------------------------------------------------------------------

// ResolvedAlterTableSetOptionsStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedAlterTableSetOptionsStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAlterTableSetOptionsStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAlterTableSetOptionsStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAlterTableSetOptionsStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedAlterTableSetOptionsStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedAlterTableSetOptionsStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterTableSetOptionsStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedAlterTableSetOptionsStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAlterTableSetOptionsStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedAlterTableSetOptionsStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterTableSetOptionsStmtProto.parent)
  return parent_;
}
inline void ResolvedAlterTableSetOptionsStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAlterTableSetOptionsStmtProto.parent)
}

// repeated string name_path = 2;
inline int ResolvedAlterTableSetOptionsStmtProto::name_path_size() const {
  return name_path_.size();
}
inline void ResolvedAlterTableSetOptionsStmtProto::clear_name_path() {
  name_path_.Clear();
}
inline const ::std::string& ResolvedAlterTableSetOptionsStmtProto::name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterTableSetOptionsStmtProto.name_path)
  return name_path_.Get(index);
}
inline ::std::string* ResolvedAlterTableSetOptionsStmtProto::mutable_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterTableSetOptionsStmtProto.name_path)
  return name_path_.Mutable(index);
}
inline void ResolvedAlterTableSetOptionsStmtProto::set_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedAlterTableSetOptionsStmtProto.name_path)
  name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedAlterTableSetOptionsStmtProto::set_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedAlterTableSetOptionsStmtProto.name_path)
  name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedAlterTableSetOptionsStmtProto::set_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedAlterTableSetOptionsStmtProto.name_path)
}
inline void ResolvedAlterTableSetOptionsStmtProto::set_name_path(int index, const char* value, size_t size) {
  name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedAlterTableSetOptionsStmtProto.name_path)
}
inline ::std::string* ResolvedAlterTableSetOptionsStmtProto::add_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedAlterTableSetOptionsStmtProto.name_path)
  return name_path_.Add();
}
inline void ResolvedAlterTableSetOptionsStmtProto::add_name_path(const ::std::string& value) {
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAlterTableSetOptionsStmtProto.name_path)
}
#if LANG_CXX11
inline void ResolvedAlterTableSetOptionsStmtProto::add_name_path(::std::string&& value) {
  name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAlterTableSetOptionsStmtProto.name_path)
}
#endif
inline void ResolvedAlterTableSetOptionsStmtProto::add_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedAlterTableSetOptionsStmtProto.name_path)
}
inline void ResolvedAlterTableSetOptionsStmtProto::add_name_path(const char* value, size_t size) {
  name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedAlterTableSetOptionsStmtProto.name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedAlterTableSetOptionsStmtProto::name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedAlterTableSetOptionsStmtProto.name_path)
  return name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedAlterTableSetOptionsStmtProto::mutable_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedAlterTableSetOptionsStmtProto.name_path)
  return &name_path_;
}

// repeated .zetasql.ResolvedOptionProto option_list = 3;
inline int ResolvedAlterTableSetOptionsStmtProto::option_list_size() const {
  return option_list_.size();
}
inline void ResolvedAlterTableSetOptionsStmtProto::clear_option_list() {
  option_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedAlterTableSetOptionsStmtProto::mutable_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterTableSetOptionsStmtProto.option_list)
  return option_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedAlterTableSetOptionsStmtProto::mutable_option_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedAlterTableSetOptionsStmtProto.option_list)
  return &option_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedAlterTableSetOptionsStmtProto::option_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterTableSetOptionsStmtProto.option_list)
  return option_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedAlterTableSetOptionsStmtProto::add_option_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAlterTableSetOptionsStmtProto.option_list)
  return option_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedAlterTableSetOptionsStmtProto::option_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedAlterTableSetOptionsStmtProto.option_list)
  return option_list_;
}

// optional bool is_if_exists = 4;
inline bool ResolvedAlterTableSetOptionsStmtProto::has_is_if_exists() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedAlterTableSetOptionsStmtProto::set_has_is_if_exists() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedAlterTableSetOptionsStmtProto::clear_has_is_if_exists() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedAlterTableSetOptionsStmtProto::clear_is_if_exists() {
  is_if_exists_ = false;
  clear_has_is_if_exists();
}
inline bool ResolvedAlterTableSetOptionsStmtProto::is_if_exists() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterTableSetOptionsStmtProto.is_if_exists)
  return is_if_exists_;
}
inline void ResolvedAlterTableSetOptionsStmtProto::set_is_if_exists(bool value) {
  set_has_is_if_exists();
  is_if_exists_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedAlterTableSetOptionsStmtProto.is_if_exists)
}

// -------------------------------------------------------------------

// ResolvedRenameStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedRenameStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedRenameStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedRenameStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedRenameStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedRenameStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedRenameStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRenameStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedRenameStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedRenameStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedRenameStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedRenameStmtProto.parent)
  return parent_;
}
inline void ResolvedRenameStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedRenameStmtProto.parent)
}

// optional string object_type = 2;
inline bool ResolvedRenameStmtProto::has_object_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedRenameStmtProto::set_has_object_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedRenameStmtProto::clear_has_object_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedRenameStmtProto::clear_object_type() {
  object_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_object_type();
}
inline const ::std::string& ResolvedRenameStmtProto::object_type() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRenameStmtProto.object_type)
  return object_type_.GetNoArena();
}
inline void ResolvedRenameStmtProto::set_object_type(const ::std::string& value) {
  set_has_object_type();
  object_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedRenameStmtProto.object_type)
}
#if LANG_CXX11
inline void ResolvedRenameStmtProto::set_object_type(::std::string&& value) {
  set_has_object_type();
  object_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedRenameStmtProto.object_type)
}
#endif
inline void ResolvedRenameStmtProto::set_object_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_object_type();
  object_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedRenameStmtProto.object_type)
}
inline void ResolvedRenameStmtProto::set_object_type(const char* value, size_t size) {
  set_has_object_type();
  object_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedRenameStmtProto.object_type)
}
inline ::std::string* ResolvedRenameStmtProto::mutable_object_type() {
  set_has_object_type();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedRenameStmtProto.object_type)
  return object_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedRenameStmtProto::release_object_type() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedRenameStmtProto.object_type)
  if (!has_object_type()) {
    return NULL;
  }
  clear_has_object_type();
  return object_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedRenameStmtProto::set_allocated_object_type(::std::string* object_type) {
  if (object_type != NULL) {
    set_has_object_type();
  } else {
    clear_has_object_type();
  }
  object_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_type);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedRenameStmtProto.object_type)
}

// repeated string old_name_path = 3;
inline int ResolvedRenameStmtProto::old_name_path_size() const {
  return old_name_path_.size();
}
inline void ResolvedRenameStmtProto::clear_old_name_path() {
  old_name_path_.Clear();
}
inline const ::std::string& ResolvedRenameStmtProto::old_name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRenameStmtProto.old_name_path)
  return old_name_path_.Get(index);
}
inline ::std::string* ResolvedRenameStmtProto::mutable_old_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedRenameStmtProto.old_name_path)
  return old_name_path_.Mutable(index);
}
inline void ResolvedRenameStmtProto::set_old_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedRenameStmtProto.old_name_path)
  old_name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedRenameStmtProto::set_old_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedRenameStmtProto.old_name_path)
  old_name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedRenameStmtProto::set_old_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  old_name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedRenameStmtProto.old_name_path)
}
inline void ResolvedRenameStmtProto::set_old_name_path(int index, const char* value, size_t size) {
  old_name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedRenameStmtProto.old_name_path)
}
inline ::std::string* ResolvedRenameStmtProto::add_old_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedRenameStmtProto.old_name_path)
  return old_name_path_.Add();
}
inline void ResolvedRenameStmtProto::add_old_name_path(const ::std::string& value) {
  old_name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedRenameStmtProto.old_name_path)
}
#if LANG_CXX11
inline void ResolvedRenameStmtProto::add_old_name_path(::std::string&& value) {
  old_name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedRenameStmtProto.old_name_path)
}
#endif
inline void ResolvedRenameStmtProto::add_old_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  old_name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedRenameStmtProto.old_name_path)
}
inline void ResolvedRenameStmtProto::add_old_name_path(const char* value, size_t size) {
  old_name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedRenameStmtProto.old_name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedRenameStmtProto::old_name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedRenameStmtProto.old_name_path)
  return old_name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedRenameStmtProto::mutable_old_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedRenameStmtProto.old_name_path)
  return &old_name_path_;
}

// repeated string new_name_path = 4;
inline int ResolvedRenameStmtProto::new_name_path_size() const {
  return new_name_path_.size();
}
inline void ResolvedRenameStmtProto::clear_new_name_path() {
  new_name_path_.Clear();
}
inline const ::std::string& ResolvedRenameStmtProto::new_name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRenameStmtProto.new_name_path)
  return new_name_path_.Get(index);
}
inline ::std::string* ResolvedRenameStmtProto::mutable_new_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedRenameStmtProto.new_name_path)
  return new_name_path_.Mutable(index);
}
inline void ResolvedRenameStmtProto::set_new_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedRenameStmtProto.new_name_path)
  new_name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedRenameStmtProto::set_new_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedRenameStmtProto.new_name_path)
  new_name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedRenameStmtProto::set_new_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  new_name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedRenameStmtProto.new_name_path)
}
inline void ResolvedRenameStmtProto::set_new_name_path(int index, const char* value, size_t size) {
  new_name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedRenameStmtProto.new_name_path)
}
inline ::std::string* ResolvedRenameStmtProto::add_new_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedRenameStmtProto.new_name_path)
  return new_name_path_.Add();
}
inline void ResolvedRenameStmtProto::add_new_name_path(const ::std::string& value) {
  new_name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedRenameStmtProto.new_name_path)
}
#if LANG_CXX11
inline void ResolvedRenameStmtProto::add_new_name_path(::std::string&& value) {
  new_name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedRenameStmtProto.new_name_path)
}
#endif
inline void ResolvedRenameStmtProto::add_new_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  new_name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedRenameStmtProto.new_name_path)
}
inline void ResolvedRenameStmtProto::add_new_name_path(const char* value, size_t size) {
  new_name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedRenameStmtProto.new_name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedRenameStmtProto::new_name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedRenameStmtProto.new_name_path)
  return new_name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedRenameStmtProto::mutable_new_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedRenameStmtProto.new_name_path)
  return &new_name_path_;
}

// -------------------------------------------------------------------

// ResolvedCreatePrivilegeRestrictionStmtProto

// optional .zetasql.ResolvedCreateStatementProto parent = 1;
inline bool ResolvedCreatePrivilegeRestrictionStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedCreatePrivilegeRestrictionStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedCreatePrivilegeRestrictionStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedCreatePrivilegeRestrictionStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedCreateStatementProto& ResolvedCreatePrivilegeRestrictionStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedCreateStatementProto& ResolvedCreatePrivilegeRestrictionStmtProto::parent() const {
  const ::zetasql::ResolvedCreateStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreatePrivilegeRestrictionStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedCreateStatementProto*>(
      &::zetasql::_ResolvedCreateStatementProto_default_instance_);
}
inline ::zetasql::ResolvedCreateStatementProto* ResolvedCreatePrivilegeRestrictionStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreatePrivilegeRestrictionStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedCreateStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedCreateStatementProto* ResolvedCreatePrivilegeRestrictionStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedCreateStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreatePrivilegeRestrictionStmtProto.parent)
  return parent_;
}
inline void ResolvedCreatePrivilegeRestrictionStmtProto::set_allocated_parent(::zetasql::ResolvedCreateStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreatePrivilegeRestrictionStmtProto.parent)
}

// repeated .zetasql.ResolvedPrivilegeProto column_privilege_list = 2;
inline int ResolvedCreatePrivilegeRestrictionStmtProto::column_privilege_list_size() const {
  return column_privilege_list_.size();
}
inline void ResolvedCreatePrivilegeRestrictionStmtProto::clear_column_privilege_list() {
  column_privilege_list_.Clear();
}
inline ::zetasql::ResolvedPrivilegeProto* ResolvedCreatePrivilegeRestrictionStmtProto::mutable_column_privilege_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreatePrivilegeRestrictionStmtProto.column_privilege_list)
  return column_privilege_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedPrivilegeProto >*
ResolvedCreatePrivilegeRestrictionStmtProto::mutable_column_privilege_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreatePrivilegeRestrictionStmtProto.column_privilege_list)
  return &column_privilege_list_;
}
inline const ::zetasql::ResolvedPrivilegeProto& ResolvedCreatePrivilegeRestrictionStmtProto::column_privilege_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreatePrivilegeRestrictionStmtProto.column_privilege_list)
  return column_privilege_list_.Get(index);
}
inline ::zetasql::ResolvedPrivilegeProto* ResolvedCreatePrivilegeRestrictionStmtProto::add_column_privilege_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreatePrivilegeRestrictionStmtProto.column_privilege_list)
  return column_privilege_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedPrivilegeProto >&
ResolvedCreatePrivilegeRestrictionStmtProto::column_privilege_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreatePrivilegeRestrictionStmtProto.column_privilege_list)
  return column_privilege_list_;
}

// optional string object_type = 3;
inline bool ResolvedCreatePrivilegeRestrictionStmtProto::has_object_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedCreatePrivilegeRestrictionStmtProto::set_has_object_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedCreatePrivilegeRestrictionStmtProto::clear_has_object_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedCreatePrivilegeRestrictionStmtProto::clear_object_type() {
  object_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_object_type();
}
inline const ::std::string& ResolvedCreatePrivilegeRestrictionStmtProto::object_type() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreatePrivilegeRestrictionStmtProto.object_type)
  return object_type_.GetNoArena();
}
inline void ResolvedCreatePrivilegeRestrictionStmtProto::set_object_type(const ::std::string& value) {
  set_has_object_type();
  object_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreatePrivilegeRestrictionStmtProto.object_type)
}
#if LANG_CXX11
inline void ResolvedCreatePrivilegeRestrictionStmtProto::set_object_type(::std::string&& value) {
  set_has_object_type();
  object_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedCreatePrivilegeRestrictionStmtProto.object_type)
}
#endif
inline void ResolvedCreatePrivilegeRestrictionStmtProto::set_object_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_object_type();
  object_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedCreatePrivilegeRestrictionStmtProto.object_type)
}
inline void ResolvedCreatePrivilegeRestrictionStmtProto::set_object_type(const char* value, size_t size) {
  set_has_object_type();
  object_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedCreatePrivilegeRestrictionStmtProto.object_type)
}
inline ::std::string* ResolvedCreatePrivilegeRestrictionStmtProto::mutable_object_type() {
  set_has_object_type();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreatePrivilegeRestrictionStmtProto.object_type)
  return object_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedCreatePrivilegeRestrictionStmtProto::release_object_type() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreatePrivilegeRestrictionStmtProto.object_type)
  if (!has_object_type()) {
    return NULL;
  }
  clear_has_object_type();
  return object_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedCreatePrivilegeRestrictionStmtProto::set_allocated_object_type(::std::string* object_type) {
  if (object_type != NULL) {
    set_has_object_type();
  } else {
    clear_has_object_type();
  }
  object_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_type);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreatePrivilegeRestrictionStmtProto.object_type)
}

// repeated .zetasql.AnyResolvedExprProto restrictee_list = 4;
inline int ResolvedCreatePrivilegeRestrictionStmtProto::restrictee_list_size() const {
  return restrictee_list_.size();
}
inline void ResolvedCreatePrivilegeRestrictionStmtProto::clear_restrictee_list() {
  restrictee_list_.Clear();
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCreatePrivilegeRestrictionStmtProto::mutable_restrictee_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreatePrivilegeRestrictionStmtProto.restrictee_list)
  return restrictee_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
ResolvedCreatePrivilegeRestrictionStmtProto::mutable_restrictee_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreatePrivilegeRestrictionStmtProto.restrictee_list)
  return &restrictee_list_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedCreatePrivilegeRestrictionStmtProto::restrictee_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreatePrivilegeRestrictionStmtProto.restrictee_list)
  return restrictee_list_.Get(index);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCreatePrivilegeRestrictionStmtProto::add_restrictee_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreatePrivilegeRestrictionStmtProto.restrictee_list)
  return restrictee_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
ResolvedCreatePrivilegeRestrictionStmtProto::restrictee_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreatePrivilegeRestrictionStmtProto.restrictee_list)
  return restrictee_list_;
}

// -------------------------------------------------------------------

// ResolvedCreateRowAccessPolicyStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedCreateRowAccessPolicyStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedCreateRowAccessPolicyStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedCreateRowAccessPolicyStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedCreateRowAccessPolicyStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedCreateRowAccessPolicyStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedCreateRowAccessPolicyStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateRowAccessPolicyStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedCreateRowAccessPolicyStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateRowAccessPolicyStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedCreateRowAccessPolicyStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateRowAccessPolicyStmtProto.parent)
  return parent_;
}
inline void ResolvedCreateRowAccessPolicyStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateRowAccessPolicyStmtProto.parent)
}

// optional .zetasql.ResolvedCreateStatementEnums.CreateMode create_mode = 2;
inline bool ResolvedCreateRowAccessPolicyStmtProto::has_create_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResolvedCreateRowAccessPolicyStmtProto::set_has_create_mode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResolvedCreateRowAccessPolicyStmtProto::clear_has_create_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ResolvedCreateRowAccessPolicyStmtProto::clear_create_mode() {
  create_mode_ = 0;
  clear_has_create_mode();
}
inline ::zetasql::ResolvedCreateStatementEnums_CreateMode ResolvedCreateRowAccessPolicyStmtProto::create_mode() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateRowAccessPolicyStmtProto.create_mode)
  return static_cast< ::zetasql::ResolvedCreateStatementEnums_CreateMode >(create_mode_);
}
inline void ResolvedCreateRowAccessPolicyStmtProto::set_create_mode(::zetasql::ResolvedCreateStatementEnums_CreateMode value) {
  assert(::zetasql::ResolvedCreateStatementEnums_CreateMode_IsValid(value));
  set_has_create_mode();
  create_mode_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateRowAccessPolicyStmtProto.create_mode)
}

// optional string name = 3;
inline bool ResolvedCreateRowAccessPolicyStmtProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedCreateRowAccessPolicyStmtProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedCreateRowAccessPolicyStmtProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedCreateRowAccessPolicyStmtProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ResolvedCreateRowAccessPolicyStmtProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateRowAccessPolicyStmtProto.name)
  return name_.GetNoArena();
}
inline void ResolvedCreateRowAccessPolicyStmtProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateRowAccessPolicyStmtProto.name)
}
#if LANG_CXX11
inline void ResolvedCreateRowAccessPolicyStmtProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedCreateRowAccessPolicyStmtProto.name)
}
#endif
inline void ResolvedCreateRowAccessPolicyStmtProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedCreateRowAccessPolicyStmtProto.name)
}
inline void ResolvedCreateRowAccessPolicyStmtProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedCreateRowAccessPolicyStmtProto.name)
}
inline ::std::string* ResolvedCreateRowAccessPolicyStmtProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateRowAccessPolicyStmtProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedCreateRowAccessPolicyStmtProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateRowAccessPolicyStmtProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedCreateRowAccessPolicyStmtProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateRowAccessPolicyStmtProto.name)
}

// repeated string target_name_path = 4;
inline int ResolvedCreateRowAccessPolicyStmtProto::target_name_path_size() const {
  return target_name_path_.size();
}
inline void ResolvedCreateRowAccessPolicyStmtProto::clear_target_name_path() {
  target_name_path_.Clear();
}
inline const ::std::string& ResolvedCreateRowAccessPolicyStmtProto::target_name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateRowAccessPolicyStmtProto.target_name_path)
  return target_name_path_.Get(index);
}
inline ::std::string* ResolvedCreateRowAccessPolicyStmtProto::mutable_target_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateRowAccessPolicyStmtProto.target_name_path)
  return target_name_path_.Mutable(index);
}
inline void ResolvedCreateRowAccessPolicyStmtProto::set_target_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateRowAccessPolicyStmtProto.target_name_path)
  target_name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedCreateRowAccessPolicyStmtProto::set_target_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateRowAccessPolicyStmtProto.target_name_path)
  target_name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedCreateRowAccessPolicyStmtProto::set_target_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  target_name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedCreateRowAccessPolicyStmtProto.target_name_path)
}
inline void ResolvedCreateRowAccessPolicyStmtProto::set_target_name_path(int index, const char* value, size_t size) {
  target_name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedCreateRowAccessPolicyStmtProto.target_name_path)
}
inline ::std::string* ResolvedCreateRowAccessPolicyStmtProto::add_target_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedCreateRowAccessPolicyStmtProto.target_name_path)
  return target_name_path_.Add();
}
inline void ResolvedCreateRowAccessPolicyStmtProto::add_target_name_path(const ::std::string& value) {
  target_name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateRowAccessPolicyStmtProto.target_name_path)
}
#if LANG_CXX11
inline void ResolvedCreateRowAccessPolicyStmtProto::add_target_name_path(::std::string&& value) {
  target_name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateRowAccessPolicyStmtProto.target_name_path)
}
#endif
inline void ResolvedCreateRowAccessPolicyStmtProto::add_target_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  target_name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedCreateRowAccessPolicyStmtProto.target_name_path)
}
inline void ResolvedCreateRowAccessPolicyStmtProto::add_target_name_path(const char* value, size_t size) {
  target_name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedCreateRowAccessPolicyStmtProto.target_name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedCreateRowAccessPolicyStmtProto::target_name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateRowAccessPolicyStmtProto.target_name_path)
  return target_name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedCreateRowAccessPolicyStmtProto::mutable_target_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateRowAccessPolicyStmtProto.target_name_path)
  return &target_name_path_;
}

// repeated string grantee_list = 5;
inline int ResolvedCreateRowAccessPolicyStmtProto::grantee_list_size() const {
  return grantee_list_.size();
}
inline void ResolvedCreateRowAccessPolicyStmtProto::clear_grantee_list() {
  grantee_list_.Clear();
}
inline const ::std::string& ResolvedCreateRowAccessPolicyStmtProto::grantee_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateRowAccessPolicyStmtProto.grantee_list)
  return grantee_list_.Get(index);
}
inline ::std::string* ResolvedCreateRowAccessPolicyStmtProto::mutable_grantee_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateRowAccessPolicyStmtProto.grantee_list)
  return grantee_list_.Mutable(index);
}
inline void ResolvedCreateRowAccessPolicyStmtProto::set_grantee_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateRowAccessPolicyStmtProto.grantee_list)
  grantee_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedCreateRowAccessPolicyStmtProto::set_grantee_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateRowAccessPolicyStmtProto.grantee_list)
  grantee_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedCreateRowAccessPolicyStmtProto::set_grantee_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  grantee_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedCreateRowAccessPolicyStmtProto.grantee_list)
}
inline void ResolvedCreateRowAccessPolicyStmtProto::set_grantee_list(int index, const char* value, size_t size) {
  grantee_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedCreateRowAccessPolicyStmtProto.grantee_list)
}
inline ::std::string* ResolvedCreateRowAccessPolicyStmtProto::add_grantee_list() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedCreateRowAccessPolicyStmtProto.grantee_list)
  return grantee_list_.Add();
}
inline void ResolvedCreateRowAccessPolicyStmtProto::add_grantee_list(const ::std::string& value) {
  grantee_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateRowAccessPolicyStmtProto.grantee_list)
}
#if LANG_CXX11
inline void ResolvedCreateRowAccessPolicyStmtProto::add_grantee_list(::std::string&& value) {
  grantee_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateRowAccessPolicyStmtProto.grantee_list)
}
#endif
inline void ResolvedCreateRowAccessPolicyStmtProto::add_grantee_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  grantee_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedCreateRowAccessPolicyStmtProto.grantee_list)
}
inline void ResolvedCreateRowAccessPolicyStmtProto::add_grantee_list(const char* value, size_t size) {
  grantee_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedCreateRowAccessPolicyStmtProto.grantee_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedCreateRowAccessPolicyStmtProto::grantee_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateRowAccessPolicyStmtProto.grantee_list)
  return grantee_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedCreateRowAccessPolicyStmtProto::mutable_grantee_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateRowAccessPolicyStmtProto.grantee_list)
  return &grantee_list_;
}

// repeated .zetasql.AnyResolvedExprProto grantee_expr_list = 9;
inline int ResolvedCreateRowAccessPolicyStmtProto::grantee_expr_list_size() const {
  return grantee_expr_list_.size();
}
inline void ResolvedCreateRowAccessPolicyStmtProto::clear_grantee_expr_list() {
  grantee_expr_list_.Clear();
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCreateRowAccessPolicyStmtProto::mutable_grantee_expr_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateRowAccessPolicyStmtProto.grantee_expr_list)
  return grantee_expr_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
ResolvedCreateRowAccessPolicyStmtProto::mutable_grantee_expr_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateRowAccessPolicyStmtProto.grantee_expr_list)
  return &grantee_expr_list_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedCreateRowAccessPolicyStmtProto::grantee_expr_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateRowAccessPolicyStmtProto.grantee_expr_list)
  return grantee_expr_list_.Get(index);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCreateRowAccessPolicyStmtProto::add_grantee_expr_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateRowAccessPolicyStmtProto.grantee_expr_list)
  return grantee_expr_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
ResolvedCreateRowAccessPolicyStmtProto::grantee_expr_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateRowAccessPolicyStmtProto.grantee_expr_list)
  return grantee_expr_list_;
}

// optional .zetasql.ResolvedTableScanProto table_scan = 6;
inline bool ResolvedCreateRowAccessPolicyStmtProto::has_table_scan() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedCreateRowAccessPolicyStmtProto::set_has_table_scan() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedCreateRowAccessPolicyStmtProto::clear_has_table_scan() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedCreateRowAccessPolicyStmtProto::clear_table_scan() {
  if (table_scan_ != NULL) table_scan_->Clear();
  clear_has_table_scan();
}
inline const ::zetasql::ResolvedTableScanProto& ResolvedCreateRowAccessPolicyStmtProto::_internal_table_scan() const {
  return *table_scan_;
}
inline const ::zetasql::ResolvedTableScanProto& ResolvedCreateRowAccessPolicyStmtProto::table_scan() const {
  const ::zetasql::ResolvedTableScanProto* p = table_scan_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateRowAccessPolicyStmtProto.table_scan)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedTableScanProto*>(
      &::zetasql::_ResolvedTableScanProto_default_instance_);
}
inline ::zetasql::ResolvedTableScanProto* ResolvedCreateRowAccessPolicyStmtProto::release_table_scan() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateRowAccessPolicyStmtProto.table_scan)
  clear_has_table_scan();
  ::zetasql::ResolvedTableScanProto* temp = table_scan_;
  table_scan_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedTableScanProto* ResolvedCreateRowAccessPolicyStmtProto::mutable_table_scan() {
  set_has_table_scan();
  if (table_scan_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedTableScanProto>(GetArenaNoVirtual());
    table_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateRowAccessPolicyStmtProto.table_scan)
  return table_scan_;
}
inline void ResolvedCreateRowAccessPolicyStmtProto::set_allocated_table_scan(::zetasql::ResolvedTableScanProto* table_scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete table_scan_;
  }
  if (table_scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table_scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table_scan, submessage_arena);
    }
    set_has_table_scan();
  } else {
    clear_has_table_scan();
  }
  table_scan_ = table_scan;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateRowAccessPolicyStmtProto.table_scan)
}

// optional .zetasql.AnyResolvedExprProto predicate = 7;
inline bool ResolvedCreateRowAccessPolicyStmtProto::has_predicate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResolvedCreateRowAccessPolicyStmtProto::set_has_predicate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResolvedCreateRowAccessPolicyStmtProto::clear_has_predicate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResolvedCreateRowAccessPolicyStmtProto::clear_predicate() {
  if (predicate_ != NULL) predicate_->Clear();
  clear_has_predicate();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedCreateRowAccessPolicyStmtProto::_internal_predicate() const {
  return *predicate_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedCreateRowAccessPolicyStmtProto::predicate() const {
  const ::zetasql::AnyResolvedExprProto* p = predicate_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateRowAccessPolicyStmtProto.predicate)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCreateRowAccessPolicyStmtProto::release_predicate() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateRowAccessPolicyStmtProto.predicate)
  clear_has_predicate();
  ::zetasql::AnyResolvedExprProto* temp = predicate_;
  predicate_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCreateRowAccessPolicyStmtProto::mutable_predicate() {
  set_has_predicate();
  if (predicate_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    predicate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateRowAccessPolicyStmtProto.predicate)
  return predicate_;
}
inline void ResolvedCreateRowAccessPolicyStmtProto::set_allocated_predicate(::zetasql::AnyResolvedExprProto* predicate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete predicate_;
  }
  if (predicate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      predicate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, predicate, submessage_arena);
    }
    set_has_predicate();
  } else {
    clear_has_predicate();
  }
  predicate_ = predicate;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateRowAccessPolicyStmtProto.predicate)
}

// optional string predicate_str = 8;
inline bool ResolvedCreateRowAccessPolicyStmtProto::has_predicate_str() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedCreateRowAccessPolicyStmtProto::set_has_predicate_str() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedCreateRowAccessPolicyStmtProto::clear_has_predicate_str() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedCreateRowAccessPolicyStmtProto::clear_predicate_str() {
  predicate_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_predicate_str();
}
inline const ::std::string& ResolvedCreateRowAccessPolicyStmtProto::predicate_str() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateRowAccessPolicyStmtProto.predicate_str)
  return predicate_str_.GetNoArena();
}
inline void ResolvedCreateRowAccessPolicyStmtProto::set_predicate_str(const ::std::string& value) {
  set_has_predicate_str();
  predicate_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateRowAccessPolicyStmtProto.predicate_str)
}
#if LANG_CXX11
inline void ResolvedCreateRowAccessPolicyStmtProto::set_predicate_str(::std::string&& value) {
  set_has_predicate_str();
  predicate_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedCreateRowAccessPolicyStmtProto.predicate_str)
}
#endif
inline void ResolvedCreateRowAccessPolicyStmtProto::set_predicate_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_predicate_str();
  predicate_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedCreateRowAccessPolicyStmtProto.predicate_str)
}
inline void ResolvedCreateRowAccessPolicyStmtProto::set_predicate_str(const char* value, size_t size) {
  set_has_predicate_str();
  predicate_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedCreateRowAccessPolicyStmtProto.predicate_str)
}
inline ::std::string* ResolvedCreateRowAccessPolicyStmtProto::mutable_predicate_str() {
  set_has_predicate_str();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateRowAccessPolicyStmtProto.predicate_str)
  return predicate_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedCreateRowAccessPolicyStmtProto::release_predicate_str() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateRowAccessPolicyStmtProto.predicate_str)
  if (!has_predicate_str()) {
    return NULL;
  }
  clear_has_predicate_str();
  return predicate_str_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedCreateRowAccessPolicyStmtProto::set_allocated_predicate_str(::std::string* predicate_str) {
  if (predicate_str != NULL) {
    set_has_predicate_str();
  } else {
    clear_has_predicate_str();
  }
  predicate_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), predicate_str);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateRowAccessPolicyStmtProto.predicate_str)
}

// -------------------------------------------------------------------

// ResolvedDropPrivilegeRestrictionStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedDropPrivilegeRestrictionStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedDropPrivilegeRestrictionStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedDropPrivilegeRestrictionStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedDropPrivilegeRestrictionStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedDropPrivilegeRestrictionStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedDropPrivilegeRestrictionStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedDropPrivilegeRestrictionStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedDropPrivilegeRestrictionStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.parent)
  return parent_;
}
inline void ResolvedDropPrivilegeRestrictionStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.parent)
}

// optional string object_type = 2;
inline bool ResolvedDropPrivilegeRestrictionStmtProto::has_object_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedDropPrivilegeRestrictionStmtProto::set_has_object_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedDropPrivilegeRestrictionStmtProto::clear_has_object_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedDropPrivilegeRestrictionStmtProto::clear_object_type() {
  object_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_object_type();
}
inline const ::std::string& ResolvedDropPrivilegeRestrictionStmtProto::object_type() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.object_type)
  return object_type_.GetNoArena();
}
inline void ResolvedDropPrivilegeRestrictionStmtProto::set_object_type(const ::std::string& value) {
  set_has_object_type();
  object_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.object_type)
}
#if LANG_CXX11
inline void ResolvedDropPrivilegeRestrictionStmtProto::set_object_type(::std::string&& value) {
  set_has_object_type();
  object_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.object_type)
}
#endif
inline void ResolvedDropPrivilegeRestrictionStmtProto::set_object_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_object_type();
  object_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.object_type)
}
inline void ResolvedDropPrivilegeRestrictionStmtProto::set_object_type(const char* value, size_t size) {
  set_has_object_type();
  object_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.object_type)
}
inline ::std::string* ResolvedDropPrivilegeRestrictionStmtProto::mutable_object_type() {
  set_has_object_type();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.object_type)
  return object_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedDropPrivilegeRestrictionStmtProto::release_object_type() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.object_type)
  if (!has_object_type()) {
    return NULL;
  }
  clear_has_object_type();
  return object_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedDropPrivilegeRestrictionStmtProto::set_allocated_object_type(::std::string* object_type) {
  if (object_type != NULL) {
    set_has_object_type();
  } else {
    clear_has_object_type();
  }
  object_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_type);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.object_type)
}

// optional bool is_if_exists = 3;
inline bool ResolvedDropPrivilegeRestrictionStmtProto::has_is_if_exists() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedDropPrivilegeRestrictionStmtProto::set_has_is_if_exists() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedDropPrivilegeRestrictionStmtProto::clear_has_is_if_exists() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedDropPrivilegeRestrictionStmtProto::clear_is_if_exists() {
  is_if_exists_ = false;
  clear_has_is_if_exists();
}
inline bool ResolvedDropPrivilegeRestrictionStmtProto::is_if_exists() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.is_if_exists)
  return is_if_exists_;
}
inline void ResolvedDropPrivilegeRestrictionStmtProto::set_is_if_exists(bool value) {
  set_has_is_if_exists();
  is_if_exists_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.is_if_exists)
}

// repeated string name_path = 4;
inline int ResolvedDropPrivilegeRestrictionStmtProto::name_path_size() const {
  return name_path_.size();
}
inline void ResolvedDropPrivilegeRestrictionStmtProto::clear_name_path() {
  name_path_.Clear();
}
inline const ::std::string& ResolvedDropPrivilegeRestrictionStmtProto::name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.name_path)
  return name_path_.Get(index);
}
inline ::std::string* ResolvedDropPrivilegeRestrictionStmtProto::mutable_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.name_path)
  return name_path_.Mutable(index);
}
inline void ResolvedDropPrivilegeRestrictionStmtProto::set_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.name_path)
  name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedDropPrivilegeRestrictionStmtProto::set_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.name_path)
  name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedDropPrivilegeRestrictionStmtProto::set_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.name_path)
}
inline void ResolvedDropPrivilegeRestrictionStmtProto::set_name_path(int index, const char* value, size_t size) {
  name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.name_path)
}
inline ::std::string* ResolvedDropPrivilegeRestrictionStmtProto::add_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.name_path)
  return name_path_.Add();
}
inline void ResolvedDropPrivilegeRestrictionStmtProto::add_name_path(const ::std::string& value) {
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.name_path)
}
#if LANG_CXX11
inline void ResolvedDropPrivilegeRestrictionStmtProto::add_name_path(::std::string&& value) {
  name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.name_path)
}
#endif
inline void ResolvedDropPrivilegeRestrictionStmtProto::add_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.name_path)
}
inline void ResolvedDropPrivilegeRestrictionStmtProto::add_name_path(const char* value, size_t size) {
  name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedDropPrivilegeRestrictionStmtProto::name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.name_path)
  return name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedDropPrivilegeRestrictionStmtProto::mutable_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.name_path)
  return &name_path_;
}

// repeated .zetasql.ResolvedPrivilegeProto column_privilege_list = 5;
inline int ResolvedDropPrivilegeRestrictionStmtProto::column_privilege_list_size() const {
  return column_privilege_list_.size();
}
inline void ResolvedDropPrivilegeRestrictionStmtProto::clear_column_privilege_list() {
  column_privilege_list_.Clear();
}
inline ::zetasql::ResolvedPrivilegeProto* ResolvedDropPrivilegeRestrictionStmtProto::mutable_column_privilege_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.column_privilege_list)
  return column_privilege_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedPrivilegeProto >*
ResolvedDropPrivilegeRestrictionStmtProto::mutable_column_privilege_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.column_privilege_list)
  return &column_privilege_list_;
}
inline const ::zetasql::ResolvedPrivilegeProto& ResolvedDropPrivilegeRestrictionStmtProto::column_privilege_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.column_privilege_list)
  return column_privilege_list_.Get(index);
}
inline ::zetasql::ResolvedPrivilegeProto* ResolvedDropPrivilegeRestrictionStmtProto::add_column_privilege_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.column_privilege_list)
  return column_privilege_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedPrivilegeProto >&
ResolvedDropPrivilegeRestrictionStmtProto::column_privilege_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedDropPrivilegeRestrictionStmtProto.column_privilege_list)
  return column_privilege_list_;
}

// -------------------------------------------------------------------

// ResolvedDropRowAccessPolicyStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedDropRowAccessPolicyStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedDropRowAccessPolicyStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedDropRowAccessPolicyStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedDropRowAccessPolicyStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedDropRowAccessPolicyStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedDropRowAccessPolicyStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropRowAccessPolicyStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedDropRowAccessPolicyStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDropRowAccessPolicyStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedDropRowAccessPolicyStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDropRowAccessPolicyStmtProto.parent)
  return parent_;
}
inline void ResolvedDropRowAccessPolicyStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDropRowAccessPolicyStmtProto.parent)
}

// optional bool is_drop_all = 2;
inline bool ResolvedDropRowAccessPolicyStmtProto::has_is_drop_all() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedDropRowAccessPolicyStmtProto::set_has_is_drop_all() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedDropRowAccessPolicyStmtProto::clear_has_is_drop_all() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedDropRowAccessPolicyStmtProto::clear_is_drop_all() {
  is_drop_all_ = false;
  clear_has_is_drop_all();
}
inline bool ResolvedDropRowAccessPolicyStmtProto::is_drop_all() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropRowAccessPolicyStmtProto.is_drop_all)
  return is_drop_all_;
}
inline void ResolvedDropRowAccessPolicyStmtProto::set_is_drop_all(bool value) {
  set_has_is_drop_all();
  is_drop_all_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropRowAccessPolicyStmtProto.is_drop_all)
}

// optional bool is_if_exists = 3;
inline bool ResolvedDropRowAccessPolicyStmtProto::has_is_if_exists() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedDropRowAccessPolicyStmtProto::set_has_is_if_exists() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedDropRowAccessPolicyStmtProto::clear_has_is_if_exists() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedDropRowAccessPolicyStmtProto::clear_is_if_exists() {
  is_if_exists_ = false;
  clear_has_is_if_exists();
}
inline bool ResolvedDropRowAccessPolicyStmtProto::is_if_exists() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropRowAccessPolicyStmtProto.is_if_exists)
  return is_if_exists_;
}
inline void ResolvedDropRowAccessPolicyStmtProto::set_is_if_exists(bool value) {
  set_has_is_if_exists();
  is_if_exists_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropRowAccessPolicyStmtProto.is_if_exists)
}

// optional string name = 4;
inline bool ResolvedDropRowAccessPolicyStmtProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedDropRowAccessPolicyStmtProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedDropRowAccessPolicyStmtProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedDropRowAccessPolicyStmtProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ResolvedDropRowAccessPolicyStmtProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropRowAccessPolicyStmtProto.name)
  return name_.GetNoArena();
}
inline void ResolvedDropRowAccessPolicyStmtProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropRowAccessPolicyStmtProto.name)
}
#if LANG_CXX11
inline void ResolvedDropRowAccessPolicyStmtProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedDropRowAccessPolicyStmtProto.name)
}
#endif
inline void ResolvedDropRowAccessPolicyStmtProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedDropRowAccessPolicyStmtProto.name)
}
inline void ResolvedDropRowAccessPolicyStmtProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedDropRowAccessPolicyStmtProto.name)
}
inline ::std::string* ResolvedDropRowAccessPolicyStmtProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDropRowAccessPolicyStmtProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedDropRowAccessPolicyStmtProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDropRowAccessPolicyStmtProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedDropRowAccessPolicyStmtProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDropRowAccessPolicyStmtProto.name)
}

// repeated string target_name_path = 5;
inline int ResolvedDropRowAccessPolicyStmtProto::target_name_path_size() const {
  return target_name_path_.size();
}
inline void ResolvedDropRowAccessPolicyStmtProto::clear_target_name_path() {
  target_name_path_.Clear();
}
inline const ::std::string& ResolvedDropRowAccessPolicyStmtProto::target_name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropRowAccessPolicyStmtProto.target_name_path)
  return target_name_path_.Get(index);
}
inline ::std::string* ResolvedDropRowAccessPolicyStmtProto::mutable_target_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDropRowAccessPolicyStmtProto.target_name_path)
  return target_name_path_.Mutable(index);
}
inline void ResolvedDropRowAccessPolicyStmtProto::set_target_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropRowAccessPolicyStmtProto.target_name_path)
  target_name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedDropRowAccessPolicyStmtProto::set_target_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropRowAccessPolicyStmtProto.target_name_path)
  target_name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedDropRowAccessPolicyStmtProto::set_target_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  target_name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedDropRowAccessPolicyStmtProto.target_name_path)
}
inline void ResolvedDropRowAccessPolicyStmtProto::set_target_name_path(int index, const char* value, size_t size) {
  target_name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedDropRowAccessPolicyStmtProto.target_name_path)
}
inline ::std::string* ResolvedDropRowAccessPolicyStmtProto::add_target_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedDropRowAccessPolicyStmtProto.target_name_path)
  return target_name_path_.Add();
}
inline void ResolvedDropRowAccessPolicyStmtProto::add_target_name_path(const ::std::string& value) {
  target_name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedDropRowAccessPolicyStmtProto.target_name_path)
}
#if LANG_CXX11
inline void ResolvedDropRowAccessPolicyStmtProto::add_target_name_path(::std::string&& value) {
  target_name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedDropRowAccessPolicyStmtProto.target_name_path)
}
#endif
inline void ResolvedDropRowAccessPolicyStmtProto::add_target_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  target_name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedDropRowAccessPolicyStmtProto.target_name_path)
}
inline void ResolvedDropRowAccessPolicyStmtProto::add_target_name_path(const char* value, size_t size) {
  target_name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedDropRowAccessPolicyStmtProto.target_name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedDropRowAccessPolicyStmtProto::target_name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedDropRowAccessPolicyStmtProto.target_name_path)
  return target_name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedDropRowAccessPolicyStmtProto::mutable_target_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedDropRowAccessPolicyStmtProto.target_name_path)
  return &target_name_path_;
}

// -------------------------------------------------------------------

// ResolvedDropSearchIndexStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedDropSearchIndexStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedDropSearchIndexStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedDropSearchIndexStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedDropSearchIndexStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedDropSearchIndexStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedDropSearchIndexStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropSearchIndexStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedDropSearchIndexStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDropSearchIndexStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedDropSearchIndexStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDropSearchIndexStmtProto.parent)
  return parent_;
}
inline void ResolvedDropSearchIndexStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDropSearchIndexStmtProto.parent)
}

// optional bool is_if_exists = 2;
inline bool ResolvedDropSearchIndexStmtProto::has_is_if_exists() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedDropSearchIndexStmtProto::set_has_is_if_exists() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedDropSearchIndexStmtProto::clear_has_is_if_exists() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedDropSearchIndexStmtProto::clear_is_if_exists() {
  is_if_exists_ = false;
  clear_has_is_if_exists();
}
inline bool ResolvedDropSearchIndexStmtProto::is_if_exists() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropSearchIndexStmtProto.is_if_exists)
  return is_if_exists_;
}
inline void ResolvedDropSearchIndexStmtProto::set_is_if_exists(bool value) {
  set_has_is_if_exists();
  is_if_exists_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropSearchIndexStmtProto.is_if_exists)
}

// optional string name = 3;
inline bool ResolvedDropSearchIndexStmtProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedDropSearchIndexStmtProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedDropSearchIndexStmtProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedDropSearchIndexStmtProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ResolvedDropSearchIndexStmtProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropSearchIndexStmtProto.name)
  return name_.GetNoArena();
}
inline void ResolvedDropSearchIndexStmtProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropSearchIndexStmtProto.name)
}
#if LANG_CXX11
inline void ResolvedDropSearchIndexStmtProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedDropSearchIndexStmtProto.name)
}
#endif
inline void ResolvedDropSearchIndexStmtProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedDropSearchIndexStmtProto.name)
}
inline void ResolvedDropSearchIndexStmtProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedDropSearchIndexStmtProto.name)
}
inline ::std::string* ResolvedDropSearchIndexStmtProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDropSearchIndexStmtProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedDropSearchIndexStmtProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDropSearchIndexStmtProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedDropSearchIndexStmtProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDropSearchIndexStmtProto.name)
}

// repeated string table_name_path = 4;
inline int ResolvedDropSearchIndexStmtProto::table_name_path_size() const {
  return table_name_path_.size();
}
inline void ResolvedDropSearchIndexStmtProto::clear_table_name_path() {
  table_name_path_.Clear();
}
inline const ::std::string& ResolvedDropSearchIndexStmtProto::table_name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropSearchIndexStmtProto.table_name_path)
  return table_name_path_.Get(index);
}
inline ::std::string* ResolvedDropSearchIndexStmtProto::mutable_table_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDropSearchIndexStmtProto.table_name_path)
  return table_name_path_.Mutable(index);
}
inline void ResolvedDropSearchIndexStmtProto::set_table_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropSearchIndexStmtProto.table_name_path)
  table_name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedDropSearchIndexStmtProto::set_table_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropSearchIndexStmtProto.table_name_path)
  table_name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedDropSearchIndexStmtProto::set_table_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  table_name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedDropSearchIndexStmtProto.table_name_path)
}
inline void ResolvedDropSearchIndexStmtProto::set_table_name_path(int index, const char* value, size_t size) {
  table_name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedDropSearchIndexStmtProto.table_name_path)
}
inline ::std::string* ResolvedDropSearchIndexStmtProto::add_table_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedDropSearchIndexStmtProto.table_name_path)
  return table_name_path_.Add();
}
inline void ResolvedDropSearchIndexStmtProto::add_table_name_path(const ::std::string& value) {
  table_name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedDropSearchIndexStmtProto.table_name_path)
}
#if LANG_CXX11
inline void ResolvedDropSearchIndexStmtProto::add_table_name_path(::std::string&& value) {
  table_name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedDropSearchIndexStmtProto.table_name_path)
}
#endif
inline void ResolvedDropSearchIndexStmtProto::add_table_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  table_name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedDropSearchIndexStmtProto.table_name_path)
}
inline void ResolvedDropSearchIndexStmtProto::add_table_name_path(const char* value, size_t size) {
  table_name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedDropSearchIndexStmtProto.table_name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedDropSearchIndexStmtProto::table_name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedDropSearchIndexStmtProto.table_name_path)
  return table_name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedDropSearchIndexStmtProto::mutable_table_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedDropSearchIndexStmtProto.table_name_path)
  return &table_name_path_;
}

// -------------------------------------------------------------------

// ResolvedGrantToActionProto

// optional .zetasql.ResolvedAlterActionProto parent = 1;
inline bool ResolvedGrantToActionProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedGrantToActionProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedGrantToActionProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedGrantToActionProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedGrantToActionProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedGrantToActionProto::parent() const {
  const ::zetasql::ResolvedAlterActionProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGrantToActionProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterActionProto*>(
      &::zetasql::_ResolvedAlterActionProto_default_instance_);
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedGrantToActionProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedGrantToActionProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterActionProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedGrantToActionProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterActionProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedGrantToActionProto.parent)
  return parent_;
}
inline void ResolvedGrantToActionProto::set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedGrantToActionProto.parent)
}

// repeated .zetasql.AnyResolvedExprProto grantee_expr_list = 2;
inline int ResolvedGrantToActionProto::grantee_expr_list_size() const {
  return grantee_expr_list_.size();
}
inline void ResolvedGrantToActionProto::clear_grantee_expr_list() {
  grantee_expr_list_.Clear();
}
inline ::zetasql::AnyResolvedExprProto* ResolvedGrantToActionProto::mutable_grantee_expr_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedGrantToActionProto.grantee_expr_list)
  return grantee_expr_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
ResolvedGrantToActionProto::mutable_grantee_expr_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedGrantToActionProto.grantee_expr_list)
  return &grantee_expr_list_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedGrantToActionProto::grantee_expr_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedGrantToActionProto.grantee_expr_list)
  return grantee_expr_list_.Get(index);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedGrantToActionProto::add_grantee_expr_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedGrantToActionProto.grantee_expr_list)
  return grantee_expr_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
ResolvedGrantToActionProto::grantee_expr_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedGrantToActionProto.grantee_expr_list)
  return grantee_expr_list_;
}

// -------------------------------------------------------------------

// ResolvedRestrictToActionProto

// optional .zetasql.ResolvedAlterActionProto parent = 1;
inline bool ResolvedRestrictToActionProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedRestrictToActionProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedRestrictToActionProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedRestrictToActionProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedRestrictToActionProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedRestrictToActionProto::parent() const {
  const ::zetasql::ResolvedAlterActionProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRestrictToActionProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterActionProto*>(
      &::zetasql::_ResolvedAlterActionProto_default_instance_);
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedRestrictToActionProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedRestrictToActionProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterActionProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedRestrictToActionProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterActionProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedRestrictToActionProto.parent)
  return parent_;
}
inline void ResolvedRestrictToActionProto::set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedRestrictToActionProto.parent)
}

// repeated .zetasql.AnyResolvedExprProto restrictee_list = 2;
inline int ResolvedRestrictToActionProto::restrictee_list_size() const {
  return restrictee_list_.size();
}
inline void ResolvedRestrictToActionProto::clear_restrictee_list() {
  restrictee_list_.Clear();
}
inline ::zetasql::AnyResolvedExprProto* ResolvedRestrictToActionProto::mutable_restrictee_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedRestrictToActionProto.restrictee_list)
  return restrictee_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
ResolvedRestrictToActionProto::mutable_restrictee_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedRestrictToActionProto.restrictee_list)
  return &restrictee_list_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedRestrictToActionProto::restrictee_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRestrictToActionProto.restrictee_list)
  return restrictee_list_.Get(index);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedRestrictToActionProto::add_restrictee_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedRestrictToActionProto.restrictee_list)
  return restrictee_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
ResolvedRestrictToActionProto::restrictee_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedRestrictToActionProto.restrictee_list)
  return restrictee_list_;
}

// -------------------------------------------------------------------

// ResolvedAddToRestricteeListActionProto

// optional .zetasql.ResolvedAlterActionProto parent = 1;
inline bool ResolvedAddToRestricteeListActionProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAddToRestricteeListActionProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAddToRestricteeListActionProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAddToRestricteeListActionProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedAddToRestricteeListActionProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedAddToRestricteeListActionProto::parent() const {
  const ::zetasql::ResolvedAlterActionProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAddToRestricteeListActionProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterActionProto*>(
      &::zetasql::_ResolvedAlterActionProto_default_instance_);
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedAddToRestricteeListActionProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAddToRestricteeListActionProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterActionProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedAddToRestricteeListActionProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterActionProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAddToRestricteeListActionProto.parent)
  return parent_;
}
inline void ResolvedAddToRestricteeListActionProto::set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAddToRestricteeListActionProto.parent)
}

// optional bool is_if_not_exists = 2;
inline bool ResolvedAddToRestricteeListActionProto::has_is_if_not_exists() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedAddToRestricteeListActionProto::set_has_is_if_not_exists() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedAddToRestricteeListActionProto::clear_has_is_if_not_exists() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedAddToRestricteeListActionProto::clear_is_if_not_exists() {
  is_if_not_exists_ = false;
  clear_has_is_if_not_exists();
}
inline bool ResolvedAddToRestricteeListActionProto::is_if_not_exists() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAddToRestricteeListActionProto.is_if_not_exists)
  return is_if_not_exists_;
}
inline void ResolvedAddToRestricteeListActionProto::set_is_if_not_exists(bool value) {
  set_has_is_if_not_exists();
  is_if_not_exists_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedAddToRestricteeListActionProto.is_if_not_exists)
}

// repeated .zetasql.AnyResolvedExprProto restrictee_list = 3;
inline int ResolvedAddToRestricteeListActionProto::restrictee_list_size() const {
  return restrictee_list_.size();
}
inline void ResolvedAddToRestricteeListActionProto::clear_restrictee_list() {
  restrictee_list_.Clear();
}
inline ::zetasql::AnyResolvedExprProto* ResolvedAddToRestricteeListActionProto::mutable_restrictee_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAddToRestricteeListActionProto.restrictee_list)
  return restrictee_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
ResolvedAddToRestricteeListActionProto::mutable_restrictee_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedAddToRestricteeListActionProto.restrictee_list)
  return &restrictee_list_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedAddToRestricteeListActionProto::restrictee_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAddToRestricteeListActionProto.restrictee_list)
  return restrictee_list_.Get(index);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedAddToRestricteeListActionProto::add_restrictee_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAddToRestricteeListActionProto.restrictee_list)
  return restrictee_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
ResolvedAddToRestricteeListActionProto::restrictee_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedAddToRestricteeListActionProto.restrictee_list)
  return restrictee_list_;
}

// -------------------------------------------------------------------

// ResolvedRemoveFromRestricteeListActionProto

// optional .zetasql.ResolvedAlterActionProto parent = 1;
inline bool ResolvedRemoveFromRestricteeListActionProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedRemoveFromRestricteeListActionProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedRemoveFromRestricteeListActionProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedRemoveFromRestricteeListActionProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedRemoveFromRestricteeListActionProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedRemoveFromRestricteeListActionProto::parent() const {
  const ::zetasql::ResolvedAlterActionProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRemoveFromRestricteeListActionProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterActionProto*>(
      &::zetasql::_ResolvedAlterActionProto_default_instance_);
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedRemoveFromRestricteeListActionProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedRemoveFromRestricteeListActionProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterActionProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedRemoveFromRestricteeListActionProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterActionProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedRemoveFromRestricteeListActionProto.parent)
  return parent_;
}
inline void ResolvedRemoveFromRestricteeListActionProto::set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedRemoveFromRestricteeListActionProto.parent)
}

// optional bool is_if_exists = 2;
inline bool ResolvedRemoveFromRestricteeListActionProto::has_is_if_exists() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedRemoveFromRestricteeListActionProto::set_has_is_if_exists() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedRemoveFromRestricteeListActionProto::clear_has_is_if_exists() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedRemoveFromRestricteeListActionProto::clear_is_if_exists() {
  is_if_exists_ = false;
  clear_has_is_if_exists();
}
inline bool ResolvedRemoveFromRestricteeListActionProto::is_if_exists() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRemoveFromRestricteeListActionProto.is_if_exists)
  return is_if_exists_;
}
inline void ResolvedRemoveFromRestricteeListActionProto::set_is_if_exists(bool value) {
  set_has_is_if_exists();
  is_if_exists_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedRemoveFromRestricteeListActionProto.is_if_exists)
}

// repeated .zetasql.AnyResolvedExprProto restrictee_list = 3;
inline int ResolvedRemoveFromRestricteeListActionProto::restrictee_list_size() const {
  return restrictee_list_.size();
}
inline void ResolvedRemoveFromRestricteeListActionProto::clear_restrictee_list() {
  restrictee_list_.Clear();
}
inline ::zetasql::AnyResolvedExprProto* ResolvedRemoveFromRestricteeListActionProto::mutable_restrictee_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedRemoveFromRestricteeListActionProto.restrictee_list)
  return restrictee_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
ResolvedRemoveFromRestricteeListActionProto::mutable_restrictee_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedRemoveFromRestricteeListActionProto.restrictee_list)
  return &restrictee_list_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedRemoveFromRestricteeListActionProto::restrictee_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRemoveFromRestricteeListActionProto.restrictee_list)
  return restrictee_list_.Get(index);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedRemoveFromRestricteeListActionProto::add_restrictee_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedRemoveFromRestricteeListActionProto.restrictee_list)
  return restrictee_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
ResolvedRemoveFromRestricteeListActionProto::restrictee_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedRemoveFromRestricteeListActionProto.restrictee_list)
  return restrictee_list_;
}

// -------------------------------------------------------------------

// ResolvedFilterUsingActionProto

// optional .zetasql.ResolvedAlterActionProto parent = 1;
inline bool ResolvedFilterUsingActionProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedFilterUsingActionProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedFilterUsingActionProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedFilterUsingActionProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedFilterUsingActionProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedFilterUsingActionProto::parent() const {
  const ::zetasql::ResolvedAlterActionProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFilterUsingActionProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterActionProto*>(
      &::zetasql::_ResolvedAlterActionProto_default_instance_);
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedFilterUsingActionProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedFilterUsingActionProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterActionProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedFilterUsingActionProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterActionProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFilterUsingActionProto.parent)
  return parent_;
}
inline void ResolvedFilterUsingActionProto::set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedFilterUsingActionProto.parent)
}

// optional .zetasql.AnyResolvedExprProto predicate = 2;
inline bool ResolvedFilterUsingActionProto::has_predicate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedFilterUsingActionProto::set_has_predicate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedFilterUsingActionProto::clear_has_predicate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedFilterUsingActionProto::clear_predicate() {
  if (predicate_ != NULL) predicate_->Clear();
  clear_has_predicate();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedFilterUsingActionProto::_internal_predicate() const {
  return *predicate_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedFilterUsingActionProto::predicate() const {
  const ::zetasql::AnyResolvedExprProto* p = predicate_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFilterUsingActionProto.predicate)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedFilterUsingActionProto::release_predicate() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedFilterUsingActionProto.predicate)
  clear_has_predicate();
  ::zetasql::AnyResolvedExprProto* temp = predicate_;
  predicate_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedFilterUsingActionProto::mutable_predicate() {
  set_has_predicate();
  if (predicate_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    predicate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFilterUsingActionProto.predicate)
  return predicate_;
}
inline void ResolvedFilterUsingActionProto::set_allocated_predicate(::zetasql::AnyResolvedExprProto* predicate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete predicate_;
  }
  if (predicate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      predicate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, predicate, submessage_arena);
    }
    set_has_predicate();
  } else {
    clear_has_predicate();
  }
  predicate_ = predicate;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedFilterUsingActionProto.predicate)
}

// optional string predicate_str = 3;
inline bool ResolvedFilterUsingActionProto::has_predicate_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedFilterUsingActionProto::set_has_predicate_str() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedFilterUsingActionProto::clear_has_predicate_str() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedFilterUsingActionProto::clear_predicate_str() {
  predicate_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_predicate_str();
}
inline const ::std::string& ResolvedFilterUsingActionProto::predicate_str() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFilterUsingActionProto.predicate_str)
  return predicate_str_.GetNoArena();
}
inline void ResolvedFilterUsingActionProto::set_predicate_str(const ::std::string& value) {
  set_has_predicate_str();
  predicate_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedFilterUsingActionProto.predicate_str)
}
#if LANG_CXX11
inline void ResolvedFilterUsingActionProto::set_predicate_str(::std::string&& value) {
  set_has_predicate_str();
  predicate_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedFilterUsingActionProto.predicate_str)
}
#endif
inline void ResolvedFilterUsingActionProto::set_predicate_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_predicate_str();
  predicate_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedFilterUsingActionProto.predicate_str)
}
inline void ResolvedFilterUsingActionProto::set_predicate_str(const char* value, size_t size) {
  set_has_predicate_str();
  predicate_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedFilterUsingActionProto.predicate_str)
}
inline ::std::string* ResolvedFilterUsingActionProto::mutable_predicate_str() {
  set_has_predicate_str();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFilterUsingActionProto.predicate_str)
  return predicate_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedFilterUsingActionProto::release_predicate_str() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedFilterUsingActionProto.predicate_str)
  if (!has_predicate_str()) {
    return NULL;
  }
  clear_has_predicate_str();
  return predicate_str_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedFilterUsingActionProto::set_allocated_predicate_str(::std::string* predicate_str) {
  if (predicate_str != NULL) {
    set_has_predicate_str();
  } else {
    clear_has_predicate_str();
  }
  predicate_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), predicate_str);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedFilterUsingActionProto.predicate_str)
}

// -------------------------------------------------------------------

// ResolvedRevokeFromActionProto

// optional .zetasql.ResolvedAlterActionProto parent = 1;
inline bool ResolvedRevokeFromActionProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedRevokeFromActionProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedRevokeFromActionProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedRevokeFromActionProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedRevokeFromActionProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedRevokeFromActionProto::parent() const {
  const ::zetasql::ResolvedAlterActionProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRevokeFromActionProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterActionProto*>(
      &::zetasql::_ResolvedAlterActionProto_default_instance_);
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedRevokeFromActionProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedRevokeFromActionProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterActionProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedRevokeFromActionProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterActionProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedRevokeFromActionProto.parent)
  return parent_;
}
inline void ResolvedRevokeFromActionProto::set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedRevokeFromActionProto.parent)
}

// repeated .zetasql.AnyResolvedExprProto revokee_expr_list = 2;
inline int ResolvedRevokeFromActionProto::revokee_expr_list_size() const {
  return revokee_expr_list_.size();
}
inline void ResolvedRevokeFromActionProto::clear_revokee_expr_list() {
  revokee_expr_list_.Clear();
}
inline ::zetasql::AnyResolvedExprProto* ResolvedRevokeFromActionProto::mutable_revokee_expr_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedRevokeFromActionProto.revokee_expr_list)
  return revokee_expr_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
ResolvedRevokeFromActionProto::mutable_revokee_expr_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedRevokeFromActionProto.revokee_expr_list)
  return &revokee_expr_list_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedRevokeFromActionProto::revokee_expr_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRevokeFromActionProto.revokee_expr_list)
  return revokee_expr_list_.Get(index);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedRevokeFromActionProto::add_revokee_expr_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedRevokeFromActionProto.revokee_expr_list)
  return revokee_expr_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
ResolvedRevokeFromActionProto::revokee_expr_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedRevokeFromActionProto.revokee_expr_list)
  return revokee_expr_list_;
}

// optional bool is_revoke_from_all = 3;
inline bool ResolvedRevokeFromActionProto::has_is_revoke_from_all() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedRevokeFromActionProto::set_has_is_revoke_from_all() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedRevokeFromActionProto::clear_has_is_revoke_from_all() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedRevokeFromActionProto::clear_is_revoke_from_all() {
  is_revoke_from_all_ = false;
  clear_has_is_revoke_from_all();
}
inline bool ResolvedRevokeFromActionProto::is_revoke_from_all() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRevokeFromActionProto.is_revoke_from_all)
  return is_revoke_from_all_;
}
inline void ResolvedRevokeFromActionProto::set_is_revoke_from_all(bool value) {
  set_has_is_revoke_from_all();
  is_revoke_from_all_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedRevokeFromActionProto.is_revoke_from_all)
}

// -------------------------------------------------------------------

// ResolvedRenameToActionProto

// optional .zetasql.ResolvedAlterActionProto parent = 1;
inline bool ResolvedRenameToActionProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedRenameToActionProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedRenameToActionProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedRenameToActionProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedRenameToActionProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterActionProto& ResolvedRenameToActionProto::parent() const {
  const ::zetasql::ResolvedAlterActionProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRenameToActionProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterActionProto*>(
      &::zetasql::_ResolvedAlterActionProto_default_instance_);
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedRenameToActionProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedRenameToActionProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterActionProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterActionProto* ResolvedRenameToActionProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterActionProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedRenameToActionProto.parent)
  return parent_;
}
inline void ResolvedRenameToActionProto::set_allocated_parent(::zetasql::ResolvedAlterActionProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedRenameToActionProto.parent)
}

// repeated string new_path = 2;
inline int ResolvedRenameToActionProto::new_path_size() const {
  return new_path_.size();
}
inline void ResolvedRenameToActionProto::clear_new_path() {
  new_path_.Clear();
}
inline const ::std::string& ResolvedRenameToActionProto::new_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRenameToActionProto.new_path)
  return new_path_.Get(index);
}
inline ::std::string* ResolvedRenameToActionProto::mutable_new_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedRenameToActionProto.new_path)
  return new_path_.Mutable(index);
}
inline void ResolvedRenameToActionProto::set_new_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedRenameToActionProto.new_path)
  new_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedRenameToActionProto::set_new_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedRenameToActionProto.new_path)
  new_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedRenameToActionProto::set_new_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  new_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedRenameToActionProto.new_path)
}
inline void ResolvedRenameToActionProto::set_new_path(int index, const char* value, size_t size) {
  new_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedRenameToActionProto.new_path)
}
inline ::std::string* ResolvedRenameToActionProto::add_new_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedRenameToActionProto.new_path)
  return new_path_.Add();
}
inline void ResolvedRenameToActionProto::add_new_path(const ::std::string& value) {
  new_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedRenameToActionProto.new_path)
}
#if LANG_CXX11
inline void ResolvedRenameToActionProto::add_new_path(::std::string&& value) {
  new_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedRenameToActionProto.new_path)
}
#endif
inline void ResolvedRenameToActionProto::add_new_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  new_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedRenameToActionProto.new_path)
}
inline void ResolvedRenameToActionProto::add_new_path(const char* value, size_t size) {
  new_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedRenameToActionProto.new_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedRenameToActionProto::new_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedRenameToActionProto.new_path)
  return new_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedRenameToActionProto::mutable_new_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedRenameToActionProto.new_path)
  return &new_path_;
}

// -------------------------------------------------------------------

// ResolvedAlterPrivilegeRestrictionStmtProto

// optional .zetasql.ResolvedAlterObjectStmtProto parent = 1;
inline bool ResolvedAlterPrivilegeRestrictionStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedAlterPrivilegeRestrictionStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedAlterPrivilegeRestrictionStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedAlterPrivilegeRestrictionStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterObjectStmtProto& ResolvedAlterPrivilegeRestrictionStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterObjectStmtProto& ResolvedAlterPrivilegeRestrictionStmtProto::parent() const {
  const ::zetasql::ResolvedAlterObjectStmtProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterPrivilegeRestrictionStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterObjectStmtProto*>(
      &::zetasql::_ResolvedAlterObjectStmtProto_default_instance_);
}
inline ::zetasql::ResolvedAlterObjectStmtProto* ResolvedAlterPrivilegeRestrictionStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAlterPrivilegeRestrictionStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterObjectStmtProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterObjectStmtProto* ResolvedAlterPrivilegeRestrictionStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterObjectStmtProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterPrivilegeRestrictionStmtProto.parent)
  return parent_;
}
inline void ResolvedAlterPrivilegeRestrictionStmtProto::set_allocated_parent(::zetasql::ResolvedAlterObjectStmtProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAlterPrivilegeRestrictionStmtProto.parent)
}

// repeated .zetasql.ResolvedPrivilegeProto column_privilege_list = 2;
inline int ResolvedAlterPrivilegeRestrictionStmtProto::column_privilege_list_size() const {
  return column_privilege_list_.size();
}
inline void ResolvedAlterPrivilegeRestrictionStmtProto::clear_column_privilege_list() {
  column_privilege_list_.Clear();
}
inline ::zetasql::ResolvedPrivilegeProto* ResolvedAlterPrivilegeRestrictionStmtProto::mutable_column_privilege_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterPrivilegeRestrictionStmtProto.column_privilege_list)
  return column_privilege_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedPrivilegeProto >*
ResolvedAlterPrivilegeRestrictionStmtProto::mutable_column_privilege_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedAlterPrivilegeRestrictionStmtProto.column_privilege_list)
  return &column_privilege_list_;
}
inline const ::zetasql::ResolvedPrivilegeProto& ResolvedAlterPrivilegeRestrictionStmtProto::column_privilege_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterPrivilegeRestrictionStmtProto.column_privilege_list)
  return column_privilege_list_.Get(index);
}
inline ::zetasql::ResolvedPrivilegeProto* ResolvedAlterPrivilegeRestrictionStmtProto::add_column_privilege_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAlterPrivilegeRestrictionStmtProto.column_privilege_list)
  return column_privilege_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedPrivilegeProto >&
ResolvedAlterPrivilegeRestrictionStmtProto::column_privilege_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedAlterPrivilegeRestrictionStmtProto.column_privilege_list)
  return column_privilege_list_;
}

// optional string object_type = 3;
inline bool ResolvedAlterPrivilegeRestrictionStmtProto::has_object_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAlterPrivilegeRestrictionStmtProto::set_has_object_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAlterPrivilegeRestrictionStmtProto::clear_has_object_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAlterPrivilegeRestrictionStmtProto::clear_object_type() {
  object_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_object_type();
}
inline const ::std::string& ResolvedAlterPrivilegeRestrictionStmtProto::object_type() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterPrivilegeRestrictionStmtProto.object_type)
  return object_type_.GetNoArena();
}
inline void ResolvedAlterPrivilegeRestrictionStmtProto::set_object_type(const ::std::string& value) {
  set_has_object_type();
  object_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedAlterPrivilegeRestrictionStmtProto.object_type)
}
#if LANG_CXX11
inline void ResolvedAlterPrivilegeRestrictionStmtProto::set_object_type(::std::string&& value) {
  set_has_object_type();
  object_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedAlterPrivilegeRestrictionStmtProto.object_type)
}
#endif
inline void ResolvedAlterPrivilegeRestrictionStmtProto::set_object_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_object_type();
  object_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedAlterPrivilegeRestrictionStmtProto.object_type)
}
inline void ResolvedAlterPrivilegeRestrictionStmtProto::set_object_type(const char* value, size_t size) {
  set_has_object_type();
  object_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedAlterPrivilegeRestrictionStmtProto.object_type)
}
inline ::std::string* ResolvedAlterPrivilegeRestrictionStmtProto::mutable_object_type() {
  set_has_object_type();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterPrivilegeRestrictionStmtProto.object_type)
  return object_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedAlterPrivilegeRestrictionStmtProto::release_object_type() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAlterPrivilegeRestrictionStmtProto.object_type)
  if (!has_object_type()) {
    return NULL;
  }
  clear_has_object_type();
  return object_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedAlterPrivilegeRestrictionStmtProto::set_allocated_object_type(::std::string* object_type) {
  if (object_type != NULL) {
    set_has_object_type();
  } else {
    clear_has_object_type();
  }
  object_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_type);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAlterPrivilegeRestrictionStmtProto.object_type)
}

// -------------------------------------------------------------------

// ResolvedAlterRowAccessPolicyStmtProto

// optional .zetasql.ResolvedAlterObjectStmtProto parent = 1;
inline bool ResolvedAlterRowAccessPolicyStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedAlterRowAccessPolicyStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedAlterRowAccessPolicyStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedAlterRowAccessPolicyStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterObjectStmtProto& ResolvedAlterRowAccessPolicyStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterObjectStmtProto& ResolvedAlterRowAccessPolicyStmtProto::parent() const {
  const ::zetasql::ResolvedAlterObjectStmtProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterRowAccessPolicyStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterObjectStmtProto*>(
      &::zetasql::_ResolvedAlterObjectStmtProto_default_instance_);
}
inline ::zetasql::ResolvedAlterObjectStmtProto* ResolvedAlterRowAccessPolicyStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAlterRowAccessPolicyStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterObjectStmtProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterObjectStmtProto* ResolvedAlterRowAccessPolicyStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterObjectStmtProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterRowAccessPolicyStmtProto.parent)
  return parent_;
}
inline void ResolvedAlterRowAccessPolicyStmtProto::set_allocated_parent(::zetasql::ResolvedAlterObjectStmtProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAlterRowAccessPolicyStmtProto.parent)
}

// optional string name = 2;
inline bool ResolvedAlterRowAccessPolicyStmtProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAlterRowAccessPolicyStmtProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAlterRowAccessPolicyStmtProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAlterRowAccessPolicyStmtProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ResolvedAlterRowAccessPolicyStmtProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterRowAccessPolicyStmtProto.name)
  return name_.GetNoArena();
}
inline void ResolvedAlterRowAccessPolicyStmtProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedAlterRowAccessPolicyStmtProto.name)
}
#if LANG_CXX11
inline void ResolvedAlterRowAccessPolicyStmtProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedAlterRowAccessPolicyStmtProto.name)
}
#endif
inline void ResolvedAlterRowAccessPolicyStmtProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedAlterRowAccessPolicyStmtProto.name)
}
inline void ResolvedAlterRowAccessPolicyStmtProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedAlterRowAccessPolicyStmtProto.name)
}
inline ::std::string* ResolvedAlterRowAccessPolicyStmtProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterRowAccessPolicyStmtProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedAlterRowAccessPolicyStmtProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAlterRowAccessPolicyStmtProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedAlterRowAccessPolicyStmtProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAlterRowAccessPolicyStmtProto.name)
}

// optional .zetasql.ResolvedTableScanProto table_scan = 6;
inline bool ResolvedAlterRowAccessPolicyStmtProto::has_table_scan() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedAlterRowAccessPolicyStmtProto::set_has_table_scan() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedAlterRowAccessPolicyStmtProto::clear_has_table_scan() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedAlterRowAccessPolicyStmtProto::clear_table_scan() {
  if (table_scan_ != NULL) table_scan_->Clear();
  clear_has_table_scan();
}
inline const ::zetasql::ResolvedTableScanProto& ResolvedAlterRowAccessPolicyStmtProto::_internal_table_scan() const {
  return *table_scan_;
}
inline const ::zetasql::ResolvedTableScanProto& ResolvedAlterRowAccessPolicyStmtProto::table_scan() const {
  const ::zetasql::ResolvedTableScanProto* p = table_scan_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterRowAccessPolicyStmtProto.table_scan)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedTableScanProto*>(
      &::zetasql::_ResolvedTableScanProto_default_instance_);
}
inline ::zetasql::ResolvedTableScanProto* ResolvedAlterRowAccessPolicyStmtProto::release_table_scan() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAlterRowAccessPolicyStmtProto.table_scan)
  clear_has_table_scan();
  ::zetasql::ResolvedTableScanProto* temp = table_scan_;
  table_scan_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedTableScanProto* ResolvedAlterRowAccessPolicyStmtProto::mutable_table_scan() {
  set_has_table_scan();
  if (table_scan_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedTableScanProto>(GetArenaNoVirtual());
    table_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterRowAccessPolicyStmtProto.table_scan)
  return table_scan_;
}
inline void ResolvedAlterRowAccessPolicyStmtProto::set_allocated_table_scan(::zetasql::ResolvedTableScanProto* table_scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete table_scan_;
  }
  if (table_scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table_scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table_scan, submessage_arena);
    }
    set_has_table_scan();
  } else {
    clear_has_table_scan();
  }
  table_scan_ = table_scan;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAlterRowAccessPolicyStmtProto.table_scan)
}

// -------------------------------------------------------------------

// ResolvedAlterAllRowAccessPoliciesStmtProto

// optional .zetasql.ResolvedAlterObjectStmtProto parent = 1;
inline bool ResolvedAlterAllRowAccessPoliciesStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAlterAllRowAccessPoliciesStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAlterAllRowAccessPoliciesStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAlterAllRowAccessPoliciesStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterObjectStmtProto& ResolvedAlterAllRowAccessPoliciesStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterObjectStmtProto& ResolvedAlterAllRowAccessPoliciesStmtProto::parent() const {
  const ::zetasql::ResolvedAlterObjectStmtProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterAllRowAccessPoliciesStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterObjectStmtProto*>(
      &::zetasql::_ResolvedAlterObjectStmtProto_default_instance_);
}
inline ::zetasql::ResolvedAlterObjectStmtProto* ResolvedAlterAllRowAccessPoliciesStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAlterAllRowAccessPoliciesStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterObjectStmtProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterObjectStmtProto* ResolvedAlterAllRowAccessPoliciesStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterObjectStmtProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterAllRowAccessPoliciesStmtProto.parent)
  return parent_;
}
inline void ResolvedAlterAllRowAccessPoliciesStmtProto::set_allocated_parent(::zetasql::ResolvedAlterObjectStmtProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAlterAllRowAccessPoliciesStmtProto.parent)
}

// optional .zetasql.ResolvedTableScanProto table_scan = 6;
inline bool ResolvedAlterAllRowAccessPoliciesStmtProto::has_table_scan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedAlterAllRowAccessPoliciesStmtProto::set_has_table_scan() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedAlterAllRowAccessPoliciesStmtProto::clear_has_table_scan() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedAlterAllRowAccessPoliciesStmtProto::clear_table_scan() {
  if (table_scan_ != NULL) table_scan_->Clear();
  clear_has_table_scan();
}
inline const ::zetasql::ResolvedTableScanProto& ResolvedAlterAllRowAccessPoliciesStmtProto::_internal_table_scan() const {
  return *table_scan_;
}
inline const ::zetasql::ResolvedTableScanProto& ResolvedAlterAllRowAccessPoliciesStmtProto::table_scan() const {
  const ::zetasql::ResolvedTableScanProto* p = table_scan_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterAllRowAccessPoliciesStmtProto.table_scan)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedTableScanProto*>(
      &::zetasql::_ResolvedTableScanProto_default_instance_);
}
inline ::zetasql::ResolvedTableScanProto* ResolvedAlterAllRowAccessPoliciesStmtProto::release_table_scan() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAlterAllRowAccessPoliciesStmtProto.table_scan)
  clear_has_table_scan();
  ::zetasql::ResolvedTableScanProto* temp = table_scan_;
  table_scan_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedTableScanProto* ResolvedAlterAllRowAccessPoliciesStmtProto::mutable_table_scan() {
  set_has_table_scan();
  if (table_scan_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedTableScanProto>(GetArenaNoVirtual());
    table_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterAllRowAccessPoliciesStmtProto.table_scan)
  return table_scan_;
}
inline void ResolvedAlterAllRowAccessPoliciesStmtProto::set_allocated_table_scan(::zetasql::ResolvedTableScanProto* table_scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete table_scan_;
  }
  if (table_scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table_scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table_scan, submessage_arena);
    }
    set_has_table_scan();
  } else {
    clear_has_table_scan();
  }
  table_scan_ = table_scan;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAlterAllRowAccessPoliciesStmtProto.table_scan)
}

// -------------------------------------------------------------------

// ResolvedCreateConstantStmtProto

// optional .zetasql.ResolvedCreateStatementProto parent = 1;
inline bool ResolvedCreateConstantStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedCreateConstantStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedCreateConstantStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedCreateConstantStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedCreateStatementProto& ResolvedCreateConstantStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedCreateStatementProto& ResolvedCreateConstantStmtProto::parent() const {
  const ::zetasql::ResolvedCreateStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateConstantStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedCreateStatementProto*>(
      &::zetasql::_ResolvedCreateStatementProto_default_instance_);
}
inline ::zetasql::ResolvedCreateStatementProto* ResolvedCreateConstantStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateConstantStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedCreateStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedCreateStatementProto* ResolvedCreateConstantStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedCreateStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateConstantStmtProto.parent)
  return parent_;
}
inline void ResolvedCreateConstantStmtProto::set_allocated_parent(::zetasql::ResolvedCreateStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateConstantStmtProto.parent)
}

// optional .zetasql.AnyResolvedExprProto expr = 2;
inline bool ResolvedCreateConstantStmtProto::has_expr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedCreateConstantStmtProto::set_has_expr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedCreateConstantStmtProto::clear_has_expr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedCreateConstantStmtProto::clear_expr() {
  if (expr_ != NULL) expr_->Clear();
  clear_has_expr();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedCreateConstantStmtProto::_internal_expr() const {
  return *expr_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedCreateConstantStmtProto::expr() const {
  const ::zetasql::AnyResolvedExprProto* p = expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateConstantStmtProto.expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCreateConstantStmtProto::release_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateConstantStmtProto.expr)
  clear_has_expr();
  ::zetasql::AnyResolvedExprProto* temp = expr_;
  expr_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCreateConstantStmtProto::mutable_expr() {
  set_has_expr();
  if (expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateConstantStmtProto.expr)
  return expr_;
}
inline void ResolvedCreateConstantStmtProto::set_allocated_expr(::zetasql::AnyResolvedExprProto* expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete expr_;
  }
  if (expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expr, submessage_arena);
    }
    set_has_expr();
  } else {
    clear_has_expr();
  }
  expr_ = expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateConstantStmtProto.expr)
}

// -------------------------------------------------------------------

// ResolvedCreateFunctionStmtProto

// optional .zetasql.ResolvedCreateStatementProto parent = 1;
inline bool ResolvedCreateFunctionStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedCreateFunctionStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedCreateFunctionStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedCreateFunctionStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedCreateStatementProto& ResolvedCreateFunctionStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedCreateStatementProto& ResolvedCreateFunctionStmtProto::parent() const {
  const ::zetasql::ResolvedCreateStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateFunctionStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedCreateStatementProto*>(
      &::zetasql::_ResolvedCreateStatementProto_default_instance_);
}
inline ::zetasql::ResolvedCreateStatementProto* ResolvedCreateFunctionStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateFunctionStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedCreateStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedCreateStatementProto* ResolvedCreateFunctionStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedCreateStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateFunctionStmtProto.parent)
  return parent_;
}
inline void ResolvedCreateFunctionStmtProto::set_allocated_parent(::zetasql::ResolvedCreateStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateFunctionStmtProto.parent)
}

// optional bool has_explicit_return_type = 13;
inline bool ResolvedCreateFunctionStmtProto::has_has_explicit_return_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ResolvedCreateFunctionStmtProto::set_has_has_explicit_return_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ResolvedCreateFunctionStmtProto::clear_has_has_explicit_return_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ResolvedCreateFunctionStmtProto::clear_has_explicit_return_type() {
  has_explicit_return_type_ = false;
  clear_has_has_explicit_return_type();
}
inline bool ResolvedCreateFunctionStmtProto::has_explicit_return_type() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateFunctionStmtProto.has_explicit_return_type)
  return has_explicit_return_type_;
}
inline void ResolvedCreateFunctionStmtProto::set_has_explicit_return_type(bool value) {
  set_has_has_explicit_return_type();
  has_explicit_return_type_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateFunctionStmtProto.has_explicit_return_type)
}

// optional .zetasql.TypeProto return_type = 3;
inline bool ResolvedCreateFunctionStmtProto::has_return_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedCreateFunctionStmtProto::set_has_return_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedCreateFunctionStmtProto::clear_has_return_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::zetasql::TypeProto& ResolvedCreateFunctionStmtProto::_internal_return_type() const {
  return *return_type_;
}
inline const ::zetasql::TypeProto& ResolvedCreateFunctionStmtProto::return_type() const {
  const ::zetasql::TypeProto* p = return_type_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateFunctionStmtProto.return_type)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TypeProto*>(
      &::zetasql::_TypeProto_default_instance_);
}
inline ::zetasql::TypeProto* ResolvedCreateFunctionStmtProto::release_return_type() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateFunctionStmtProto.return_type)
  clear_has_return_type();
  ::zetasql::TypeProto* temp = return_type_;
  return_type_ = NULL;
  return temp;
}
inline ::zetasql::TypeProto* ResolvedCreateFunctionStmtProto::mutable_return_type() {
  set_has_return_type();
  if (return_type_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaNoVirtual());
    return_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateFunctionStmtProto.return_type)
  return return_type_;
}
inline void ResolvedCreateFunctionStmtProto::set_allocated_return_type(::zetasql::TypeProto* return_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(return_type_);
  }
  if (return_type) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(return_type)->GetArena();
    if (message_arena != submessage_arena) {
      return_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, return_type, submessage_arena);
    }
    set_has_return_type();
  } else {
    clear_has_return_type();
  }
  return_type_ = return_type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateFunctionStmtProto.return_type)
}

// repeated string argument_name_list = 11;
inline int ResolvedCreateFunctionStmtProto::argument_name_list_size() const {
  return argument_name_list_.size();
}
inline void ResolvedCreateFunctionStmtProto::clear_argument_name_list() {
  argument_name_list_.Clear();
}
inline const ::std::string& ResolvedCreateFunctionStmtProto::argument_name_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateFunctionStmtProto.argument_name_list)
  return argument_name_list_.Get(index);
}
inline ::std::string* ResolvedCreateFunctionStmtProto::mutable_argument_name_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateFunctionStmtProto.argument_name_list)
  return argument_name_list_.Mutable(index);
}
inline void ResolvedCreateFunctionStmtProto::set_argument_name_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateFunctionStmtProto.argument_name_list)
  argument_name_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedCreateFunctionStmtProto::set_argument_name_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateFunctionStmtProto.argument_name_list)
  argument_name_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedCreateFunctionStmtProto::set_argument_name_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  argument_name_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedCreateFunctionStmtProto.argument_name_list)
}
inline void ResolvedCreateFunctionStmtProto::set_argument_name_list(int index, const char* value, size_t size) {
  argument_name_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedCreateFunctionStmtProto.argument_name_list)
}
inline ::std::string* ResolvedCreateFunctionStmtProto::add_argument_name_list() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedCreateFunctionStmtProto.argument_name_list)
  return argument_name_list_.Add();
}
inline void ResolvedCreateFunctionStmtProto::add_argument_name_list(const ::std::string& value) {
  argument_name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateFunctionStmtProto.argument_name_list)
}
#if LANG_CXX11
inline void ResolvedCreateFunctionStmtProto::add_argument_name_list(::std::string&& value) {
  argument_name_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateFunctionStmtProto.argument_name_list)
}
#endif
inline void ResolvedCreateFunctionStmtProto::add_argument_name_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  argument_name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedCreateFunctionStmtProto.argument_name_list)
}
inline void ResolvedCreateFunctionStmtProto::add_argument_name_list(const char* value, size_t size) {
  argument_name_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedCreateFunctionStmtProto.argument_name_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedCreateFunctionStmtProto::argument_name_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateFunctionStmtProto.argument_name_list)
  return argument_name_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedCreateFunctionStmtProto::mutable_argument_name_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateFunctionStmtProto.argument_name_list)
  return &argument_name_list_;
}

// optional .zetasql.FunctionSignatureProto signature = 10;
inline bool ResolvedCreateFunctionStmtProto::has_signature() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResolvedCreateFunctionStmtProto::set_has_signature() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResolvedCreateFunctionStmtProto::clear_has_signature() {
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::zetasql::FunctionSignatureProto& ResolvedCreateFunctionStmtProto::_internal_signature() const {
  return *signature_;
}
inline const ::zetasql::FunctionSignatureProto& ResolvedCreateFunctionStmtProto::signature() const {
  const ::zetasql::FunctionSignatureProto* p = signature_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateFunctionStmtProto.signature)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::FunctionSignatureProto*>(
      &::zetasql::_FunctionSignatureProto_default_instance_);
}
inline ::zetasql::FunctionSignatureProto* ResolvedCreateFunctionStmtProto::release_signature() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateFunctionStmtProto.signature)
  clear_has_signature();
  ::zetasql::FunctionSignatureProto* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline ::zetasql::FunctionSignatureProto* ResolvedCreateFunctionStmtProto::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::FunctionSignatureProto>(GetArenaNoVirtual());
    signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateFunctionStmtProto.signature)
  return signature_;
}
inline void ResolvedCreateFunctionStmtProto::set_allocated_signature(::zetasql::FunctionSignatureProto* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(signature_);
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateFunctionStmtProto.signature)
}

// optional bool is_aggregate = 8;
inline bool ResolvedCreateFunctionStmtProto::has_is_aggregate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ResolvedCreateFunctionStmtProto::set_has_is_aggregate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ResolvedCreateFunctionStmtProto::clear_has_is_aggregate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ResolvedCreateFunctionStmtProto::clear_is_aggregate() {
  is_aggregate_ = false;
  clear_has_is_aggregate();
}
inline bool ResolvedCreateFunctionStmtProto::is_aggregate() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateFunctionStmtProto.is_aggregate)
  return is_aggregate_;
}
inline void ResolvedCreateFunctionStmtProto::set_is_aggregate(bool value) {
  set_has_is_aggregate();
  is_aggregate_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateFunctionStmtProto.is_aggregate)
}

// optional string language = 4;
inline bool ResolvedCreateFunctionStmtProto::has_language() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedCreateFunctionStmtProto::set_has_language() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedCreateFunctionStmtProto::clear_has_language() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedCreateFunctionStmtProto::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
inline const ::std::string& ResolvedCreateFunctionStmtProto::language() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateFunctionStmtProto.language)
  return language_.GetNoArena();
}
inline void ResolvedCreateFunctionStmtProto::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateFunctionStmtProto.language)
}
#if LANG_CXX11
inline void ResolvedCreateFunctionStmtProto::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedCreateFunctionStmtProto.language)
}
#endif
inline void ResolvedCreateFunctionStmtProto::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedCreateFunctionStmtProto.language)
}
inline void ResolvedCreateFunctionStmtProto::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedCreateFunctionStmtProto.language)
}
inline ::std::string* ResolvedCreateFunctionStmtProto::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateFunctionStmtProto.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedCreateFunctionStmtProto::release_language() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateFunctionStmtProto.language)
  if (!has_language()) {
    return NULL;
  }
  clear_has_language();
  return language_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedCreateFunctionStmtProto::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateFunctionStmtProto.language)
}

// optional string code = 5;
inline bool ResolvedCreateFunctionStmtProto::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedCreateFunctionStmtProto::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedCreateFunctionStmtProto::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedCreateFunctionStmtProto::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& ResolvedCreateFunctionStmtProto::code() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateFunctionStmtProto.code)
  return code_.GetNoArena();
}
inline void ResolvedCreateFunctionStmtProto::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateFunctionStmtProto.code)
}
#if LANG_CXX11
inline void ResolvedCreateFunctionStmtProto::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedCreateFunctionStmtProto.code)
}
#endif
inline void ResolvedCreateFunctionStmtProto::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedCreateFunctionStmtProto.code)
}
inline void ResolvedCreateFunctionStmtProto::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedCreateFunctionStmtProto.code)
}
inline ::std::string* ResolvedCreateFunctionStmtProto::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateFunctionStmtProto.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedCreateFunctionStmtProto::release_code() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateFunctionStmtProto.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedCreateFunctionStmtProto::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateFunctionStmtProto.code)
}

// repeated .zetasql.ResolvedComputedColumnProto aggregate_expression_list = 9;
inline int ResolvedCreateFunctionStmtProto::aggregate_expression_list_size() const {
  return aggregate_expression_list_.size();
}
inline void ResolvedCreateFunctionStmtProto::clear_aggregate_expression_list() {
  aggregate_expression_list_.Clear();
}
inline ::zetasql::ResolvedComputedColumnProto* ResolvedCreateFunctionStmtProto::mutable_aggregate_expression_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateFunctionStmtProto.aggregate_expression_list)
  return aggregate_expression_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >*
ResolvedCreateFunctionStmtProto::mutable_aggregate_expression_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateFunctionStmtProto.aggregate_expression_list)
  return &aggregate_expression_list_;
}
inline const ::zetasql::ResolvedComputedColumnProto& ResolvedCreateFunctionStmtProto::aggregate_expression_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateFunctionStmtProto.aggregate_expression_list)
  return aggregate_expression_list_.Get(index);
}
inline ::zetasql::ResolvedComputedColumnProto* ResolvedCreateFunctionStmtProto::add_aggregate_expression_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateFunctionStmtProto.aggregate_expression_list)
  return aggregate_expression_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >&
ResolvedCreateFunctionStmtProto::aggregate_expression_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateFunctionStmtProto.aggregate_expression_list)
  return aggregate_expression_list_;
}

// optional .zetasql.AnyResolvedExprProto function_expression = 6;
inline bool ResolvedCreateFunctionStmtProto::has_function_expression() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResolvedCreateFunctionStmtProto::set_has_function_expression() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResolvedCreateFunctionStmtProto::clear_has_function_expression() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResolvedCreateFunctionStmtProto::clear_function_expression() {
  if (function_expression_ != NULL) function_expression_->Clear();
  clear_has_function_expression();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedCreateFunctionStmtProto::_internal_function_expression() const {
  return *function_expression_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedCreateFunctionStmtProto::function_expression() const {
  const ::zetasql::AnyResolvedExprProto* p = function_expression_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateFunctionStmtProto.function_expression)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCreateFunctionStmtProto::release_function_expression() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateFunctionStmtProto.function_expression)
  clear_has_function_expression();
  ::zetasql::AnyResolvedExprProto* temp = function_expression_;
  function_expression_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCreateFunctionStmtProto::mutable_function_expression() {
  set_has_function_expression();
  if (function_expression_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    function_expression_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateFunctionStmtProto.function_expression)
  return function_expression_;
}
inline void ResolvedCreateFunctionStmtProto::set_allocated_function_expression(::zetasql::AnyResolvedExprProto* function_expression) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete function_expression_;
  }
  if (function_expression) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      function_expression = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, function_expression, submessage_arena);
    }
    set_has_function_expression();
  } else {
    clear_has_function_expression();
  }
  function_expression_ = function_expression;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateFunctionStmtProto.function_expression)
}

// repeated .zetasql.ResolvedOptionProto option_list = 7;
inline int ResolvedCreateFunctionStmtProto::option_list_size() const {
  return option_list_.size();
}
inline void ResolvedCreateFunctionStmtProto::clear_option_list() {
  option_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedCreateFunctionStmtProto::mutable_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateFunctionStmtProto.option_list)
  return option_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedCreateFunctionStmtProto::mutable_option_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateFunctionStmtProto.option_list)
  return &option_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedCreateFunctionStmtProto::option_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateFunctionStmtProto.option_list)
  return option_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedCreateFunctionStmtProto::add_option_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateFunctionStmtProto.option_list)
  return option_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedCreateFunctionStmtProto::option_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateFunctionStmtProto.option_list)
  return option_list_;
}

// optional .zetasql.ResolvedCreateStatementEnums.SqlSecurity sql_security = 12;
inline bool ResolvedCreateFunctionStmtProto::has_sql_security() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ResolvedCreateFunctionStmtProto::set_has_sql_security() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ResolvedCreateFunctionStmtProto::clear_has_sql_security() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ResolvedCreateFunctionStmtProto::clear_sql_security() {
  sql_security_ = 0;
  clear_has_sql_security();
}
inline ::zetasql::ResolvedCreateStatementEnums_SqlSecurity ResolvedCreateFunctionStmtProto::sql_security() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateFunctionStmtProto.sql_security)
  return static_cast< ::zetasql::ResolvedCreateStatementEnums_SqlSecurity >(sql_security_);
}
inline void ResolvedCreateFunctionStmtProto::set_sql_security(::zetasql::ResolvedCreateStatementEnums_SqlSecurity value) {
  assert(::zetasql::ResolvedCreateStatementEnums_SqlSecurity_IsValid(value));
  set_has_sql_security();
  sql_security_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateFunctionStmtProto.sql_security)
}

// optional .zetasql.ResolvedCreateStatementEnums.DeterminismLevel determinism_level = 14;
inline bool ResolvedCreateFunctionStmtProto::has_determinism_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ResolvedCreateFunctionStmtProto::set_has_determinism_level() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ResolvedCreateFunctionStmtProto::clear_has_determinism_level() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ResolvedCreateFunctionStmtProto::clear_determinism_level() {
  determinism_level_ = 0;
  clear_has_determinism_level();
}
inline ::zetasql::ResolvedCreateStatementEnums_DeterminismLevel ResolvedCreateFunctionStmtProto::determinism_level() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateFunctionStmtProto.determinism_level)
  return static_cast< ::zetasql::ResolvedCreateStatementEnums_DeterminismLevel >(determinism_level_);
}
inline void ResolvedCreateFunctionStmtProto::set_determinism_level(::zetasql::ResolvedCreateStatementEnums_DeterminismLevel value) {
  assert(::zetasql::ResolvedCreateStatementEnums_DeterminismLevel_IsValid(value));
  set_has_determinism_level();
  determinism_level_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateFunctionStmtProto.determinism_level)
}

// optional bool is_remote = 15;
inline bool ResolvedCreateFunctionStmtProto::has_is_remote() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ResolvedCreateFunctionStmtProto::set_has_is_remote() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ResolvedCreateFunctionStmtProto::clear_has_is_remote() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ResolvedCreateFunctionStmtProto::clear_is_remote() {
  is_remote_ = false;
  clear_has_is_remote();
}
inline bool ResolvedCreateFunctionStmtProto::is_remote() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateFunctionStmtProto.is_remote)
  return is_remote_;
}
inline void ResolvedCreateFunctionStmtProto::set_is_remote(bool value) {
  set_has_is_remote();
  is_remote_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateFunctionStmtProto.is_remote)
}

// optional .zetasql.ResolvedConnectionProto connection = 16;
inline bool ResolvedCreateFunctionStmtProto::has_connection() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResolvedCreateFunctionStmtProto::set_has_connection() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ResolvedCreateFunctionStmtProto::clear_has_connection() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ResolvedCreateFunctionStmtProto::clear_connection() {
  if (connection_ != NULL) connection_->Clear();
  clear_has_connection();
}
inline const ::zetasql::ResolvedConnectionProto& ResolvedCreateFunctionStmtProto::_internal_connection() const {
  return *connection_;
}
inline const ::zetasql::ResolvedConnectionProto& ResolvedCreateFunctionStmtProto::connection() const {
  const ::zetasql::ResolvedConnectionProto* p = connection_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateFunctionStmtProto.connection)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedConnectionProto*>(
      &::zetasql::_ResolvedConnectionProto_default_instance_);
}
inline ::zetasql::ResolvedConnectionProto* ResolvedCreateFunctionStmtProto::release_connection() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateFunctionStmtProto.connection)
  clear_has_connection();
  ::zetasql::ResolvedConnectionProto* temp = connection_;
  connection_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedConnectionProto* ResolvedCreateFunctionStmtProto::mutable_connection() {
  set_has_connection();
  if (connection_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedConnectionProto>(GetArenaNoVirtual());
    connection_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateFunctionStmtProto.connection)
  return connection_;
}
inline void ResolvedCreateFunctionStmtProto::set_allocated_connection(::zetasql::ResolvedConnectionProto* connection) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete connection_;
  }
  if (connection) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      connection = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, connection, submessage_arena);
    }
    set_has_connection();
  } else {
    clear_has_connection();
  }
  connection_ = connection;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateFunctionStmtProto.connection)
}

// -------------------------------------------------------------------

// ResolvedArgumentDefProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedArgumentDefProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedArgumentDefProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedArgumentDefProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedArgumentDefProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedArgumentDefProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedArgumentDefProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedArgumentDefProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedArgumentDefProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedArgumentDefProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedArgumentDefProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedArgumentDefProto.parent)
  return parent_;
}
inline void ResolvedArgumentDefProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedArgumentDefProto.parent)
}

// optional string name = 2;
inline bool ResolvedArgumentDefProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedArgumentDefProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedArgumentDefProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedArgumentDefProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ResolvedArgumentDefProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedArgumentDefProto.name)
  return name_.GetNoArena();
}
inline void ResolvedArgumentDefProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedArgumentDefProto.name)
}
#if LANG_CXX11
inline void ResolvedArgumentDefProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedArgumentDefProto.name)
}
#endif
inline void ResolvedArgumentDefProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedArgumentDefProto.name)
}
inline void ResolvedArgumentDefProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedArgumentDefProto.name)
}
inline ::std::string* ResolvedArgumentDefProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedArgumentDefProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedArgumentDefProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedArgumentDefProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedArgumentDefProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedArgumentDefProto.name)
}

// optional .zetasql.TypeProto type = 3;
inline bool ResolvedArgumentDefProto::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedArgumentDefProto::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedArgumentDefProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasql::TypeProto& ResolvedArgumentDefProto::_internal_type() const {
  return *type_;
}
inline const ::zetasql::TypeProto& ResolvedArgumentDefProto::type() const {
  const ::zetasql::TypeProto* p = type_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedArgumentDefProto.type)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TypeProto*>(
      &::zetasql::_TypeProto_default_instance_);
}
inline ::zetasql::TypeProto* ResolvedArgumentDefProto::release_type() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedArgumentDefProto.type)
  clear_has_type();
  ::zetasql::TypeProto* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::zetasql::TypeProto* ResolvedArgumentDefProto::mutable_type() {
  set_has_type();
  if (type_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedArgumentDefProto.type)
  return type_;
}
inline void ResolvedArgumentDefProto::set_allocated_type(::zetasql::TypeProto* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_);
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(type)->GetArena();
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    set_has_type();
  } else {
    clear_has_type();
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedArgumentDefProto.type)
}

// optional .zetasql.ResolvedArgumentDefEnums.ArgumentKind argument_kind = 4;
inline bool ResolvedArgumentDefProto::has_argument_kind() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedArgumentDefProto::set_has_argument_kind() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedArgumentDefProto::clear_has_argument_kind() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedArgumentDefProto::clear_argument_kind() {
  argument_kind_ = 0;
  clear_has_argument_kind();
}
inline ::zetasql::ResolvedArgumentDefEnums_ArgumentKind ResolvedArgumentDefProto::argument_kind() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedArgumentDefProto.argument_kind)
  return static_cast< ::zetasql::ResolvedArgumentDefEnums_ArgumentKind >(argument_kind_);
}
inline void ResolvedArgumentDefProto::set_argument_kind(::zetasql::ResolvedArgumentDefEnums_ArgumentKind value) {
  assert(::zetasql::ResolvedArgumentDefEnums_ArgumentKind_IsValid(value));
  set_has_argument_kind();
  argument_kind_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedArgumentDefProto.argument_kind)
}

// -------------------------------------------------------------------

// ResolvedArgumentRefProto

// optional .zetasql.ResolvedExprProto parent = 1;
inline bool ResolvedArgumentRefProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedArgumentRefProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedArgumentRefProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedArgumentRefProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedExprProto& ResolvedArgumentRefProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedExprProto& ResolvedArgumentRefProto::parent() const {
  const ::zetasql::ResolvedExprProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedArgumentRefProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedExprProto*>(
      &::zetasql::_ResolvedExprProto_default_instance_);
}
inline ::zetasql::ResolvedExprProto* ResolvedArgumentRefProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedArgumentRefProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedExprProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedExprProto* ResolvedArgumentRefProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedExprProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedArgumentRefProto.parent)
  return parent_;
}
inline void ResolvedArgumentRefProto::set_allocated_parent(::zetasql::ResolvedExprProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedArgumentRefProto.parent)
}

// optional string name = 2;
inline bool ResolvedArgumentRefProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedArgumentRefProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedArgumentRefProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedArgumentRefProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ResolvedArgumentRefProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedArgumentRefProto.name)
  return name_.GetNoArena();
}
inline void ResolvedArgumentRefProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedArgumentRefProto.name)
}
#if LANG_CXX11
inline void ResolvedArgumentRefProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedArgumentRefProto.name)
}
#endif
inline void ResolvedArgumentRefProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedArgumentRefProto.name)
}
inline void ResolvedArgumentRefProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedArgumentRefProto.name)
}
inline ::std::string* ResolvedArgumentRefProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedArgumentRefProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedArgumentRefProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedArgumentRefProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedArgumentRefProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedArgumentRefProto.name)
}

// optional .zetasql.ResolvedArgumentDefEnums.ArgumentKind argument_kind = 3;
inline bool ResolvedArgumentRefProto::has_argument_kind() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedArgumentRefProto::set_has_argument_kind() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedArgumentRefProto::clear_has_argument_kind() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedArgumentRefProto::clear_argument_kind() {
  argument_kind_ = 0;
  clear_has_argument_kind();
}
inline ::zetasql::ResolvedArgumentDefEnums_ArgumentKind ResolvedArgumentRefProto::argument_kind() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedArgumentRefProto.argument_kind)
  return static_cast< ::zetasql::ResolvedArgumentDefEnums_ArgumentKind >(argument_kind_);
}
inline void ResolvedArgumentRefProto::set_argument_kind(::zetasql::ResolvedArgumentDefEnums_ArgumentKind value) {
  assert(::zetasql::ResolvedArgumentDefEnums_ArgumentKind_IsValid(value));
  set_has_argument_kind();
  argument_kind_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedArgumentRefProto.argument_kind)
}

// -------------------------------------------------------------------

// ResolvedCreateTableFunctionStmtProto

// optional .zetasql.ResolvedCreateStatementProto parent = 1;
inline bool ResolvedCreateTableFunctionStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedCreateTableFunctionStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedCreateTableFunctionStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedCreateTableFunctionStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedCreateStatementProto& ResolvedCreateTableFunctionStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedCreateStatementProto& ResolvedCreateTableFunctionStmtProto::parent() const {
  const ::zetasql::ResolvedCreateStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableFunctionStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedCreateStatementProto*>(
      &::zetasql::_ResolvedCreateStatementProto_default_instance_);
}
inline ::zetasql::ResolvedCreateStatementProto* ResolvedCreateTableFunctionStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateTableFunctionStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedCreateStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedCreateStatementProto* ResolvedCreateTableFunctionStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedCreateStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateTableFunctionStmtProto.parent)
  return parent_;
}
inline void ResolvedCreateTableFunctionStmtProto::set_allocated_parent(::zetasql::ResolvedCreateStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateTableFunctionStmtProto.parent)
}

// repeated string argument_name_list = 2;
inline int ResolvedCreateTableFunctionStmtProto::argument_name_list_size() const {
  return argument_name_list_.size();
}
inline void ResolvedCreateTableFunctionStmtProto::clear_argument_name_list() {
  argument_name_list_.Clear();
}
inline const ::std::string& ResolvedCreateTableFunctionStmtProto::argument_name_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableFunctionStmtProto.argument_name_list)
  return argument_name_list_.Get(index);
}
inline ::std::string* ResolvedCreateTableFunctionStmtProto::mutable_argument_name_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateTableFunctionStmtProto.argument_name_list)
  return argument_name_list_.Mutable(index);
}
inline void ResolvedCreateTableFunctionStmtProto::set_argument_name_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateTableFunctionStmtProto.argument_name_list)
  argument_name_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedCreateTableFunctionStmtProto::set_argument_name_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateTableFunctionStmtProto.argument_name_list)
  argument_name_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedCreateTableFunctionStmtProto::set_argument_name_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  argument_name_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedCreateTableFunctionStmtProto.argument_name_list)
}
inline void ResolvedCreateTableFunctionStmtProto::set_argument_name_list(int index, const char* value, size_t size) {
  argument_name_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedCreateTableFunctionStmtProto.argument_name_list)
}
inline ::std::string* ResolvedCreateTableFunctionStmtProto::add_argument_name_list() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedCreateTableFunctionStmtProto.argument_name_list)
  return argument_name_list_.Add();
}
inline void ResolvedCreateTableFunctionStmtProto::add_argument_name_list(const ::std::string& value) {
  argument_name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateTableFunctionStmtProto.argument_name_list)
}
#if LANG_CXX11
inline void ResolvedCreateTableFunctionStmtProto::add_argument_name_list(::std::string&& value) {
  argument_name_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateTableFunctionStmtProto.argument_name_list)
}
#endif
inline void ResolvedCreateTableFunctionStmtProto::add_argument_name_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  argument_name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedCreateTableFunctionStmtProto.argument_name_list)
}
inline void ResolvedCreateTableFunctionStmtProto::add_argument_name_list(const char* value, size_t size) {
  argument_name_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedCreateTableFunctionStmtProto.argument_name_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedCreateTableFunctionStmtProto::argument_name_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateTableFunctionStmtProto.argument_name_list)
  return argument_name_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedCreateTableFunctionStmtProto::mutable_argument_name_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateTableFunctionStmtProto.argument_name_list)
  return &argument_name_list_;
}

// optional .zetasql.FunctionSignatureProto signature = 3;
inline bool ResolvedCreateTableFunctionStmtProto::has_signature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedCreateTableFunctionStmtProto::set_has_signature() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedCreateTableFunctionStmtProto::clear_has_signature() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::zetasql::FunctionSignatureProto& ResolvedCreateTableFunctionStmtProto::_internal_signature() const {
  return *signature_;
}
inline const ::zetasql::FunctionSignatureProto& ResolvedCreateTableFunctionStmtProto::signature() const {
  const ::zetasql::FunctionSignatureProto* p = signature_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableFunctionStmtProto.signature)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::FunctionSignatureProto*>(
      &::zetasql::_FunctionSignatureProto_default_instance_);
}
inline ::zetasql::FunctionSignatureProto* ResolvedCreateTableFunctionStmtProto::release_signature() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateTableFunctionStmtProto.signature)
  clear_has_signature();
  ::zetasql::FunctionSignatureProto* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline ::zetasql::FunctionSignatureProto* ResolvedCreateTableFunctionStmtProto::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::FunctionSignatureProto>(GetArenaNoVirtual());
    signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateTableFunctionStmtProto.signature)
  return signature_;
}
inline void ResolvedCreateTableFunctionStmtProto::set_allocated_signature(::zetasql::FunctionSignatureProto* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(signature_);
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateTableFunctionStmtProto.signature)
}

// optional bool has_explicit_return_schema = 11;
inline bool ResolvedCreateTableFunctionStmtProto::has_has_explicit_return_schema() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResolvedCreateTableFunctionStmtProto::set_has_has_explicit_return_schema() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ResolvedCreateTableFunctionStmtProto::clear_has_has_explicit_return_schema() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ResolvedCreateTableFunctionStmtProto::clear_has_explicit_return_schema() {
  has_explicit_return_schema_ = false;
  clear_has_has_explicit_return_schema();
}
inline bool ResolvedCreateTableFunctionStmtProto::has_explicit_return_schema() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableFunctionStmtProto.has_explicit_return_schema)
  return has_explicit_return_schema_;
}
inline void ResolvedCreateTableFunctionStmtProto::set_has_explicit_return_schema(bool value) {
  set_has_has_explicit_return_schema();
  has_explicit_return_schema_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateTableFunctionStmtProto.has_explicit_return_schema)
}

// repeated .zetasql.ResolvedOptionProto option_list = 4;
inline int ResolvedCreateTableFunctionStmtProto::option_list_size() const {
  return option_list_.size();
}
inline void ResolvedCreateTableFunctionStmtProto::clear_option_list() {
  option_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedCreateTableFunctionStmtProto::mutable_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateTableFunctionStmtProto.option_list)
  return option_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedCreateTableFunctionStmtProto::mutable_option_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateTableFunctionStmtProto.option_list)
  return &option_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedCreateTableFunctionStmtProto::option_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableFunctionStmtProto.option_list)
  return option_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedCreateTableFunctionStmtProto::add_option_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateTableFunctionStmtProto.option_list)
  return option_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedCreateTableFunctionStmtProto::option_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateTableFunctionStmtProto.option_list)
  return option_list_;
}

// optional string language = 5;
inline bool ResolvedCreateTableFunctionStmtProto::has_language() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedCreateTableFunctionStmtProto::set_has_language() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedCreateTableFunctionStmtProto::clear_has_language() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedCreateTableFunctionStmtProto::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
inline const ::std::string& ResolvedCreateTableFunctionStmtProto::language() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableFunctionStmtProto.language)
  return language_.GetNoArena();
}
inline void ResolvedCreateTableFunctionStmtProto::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateTableFunctionStmtProto.language)
}
#if LANG_CXX11
inline void ResolvedCreateTableFunctionStmtProto::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedCreateTableFunctionStmtProto.language)
}
#endif
inline void ResolvedCreateTableFunctionStmtProto::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedCreateTableFunctionStmtProto.language)
}
inline void ResolvedCreateTableFunctionStmtProto::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedCreateTableFunctionStmtProto.language)
}
inline ::std::string* ResolvedCreateTableFunctionStmtProto::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateTableFunctionStmtProto.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedCreateTableFunctionStmtProto::release_language() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateTableFunctionStmtProto.language)
  if (!has_language()) {
    return NULL;
  }
  clear_has_language();
  return language_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedCreateTableFunctionStmtProto::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateTableFunctionStmtProto.language)
}

// optional string code = 6;
inline bool ResolvedCreateTableFunctionStmtProto::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedCreateTableFunctionStmtProto::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedCreateTableFunctionStmtProto::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedCreateTableFunctionStmtProto::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& ResolvedCreateTableFunctionStmtProto::code() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableFunctionStmtProto.code)
  return code_.GetNoArena();
}
inline void ResolvedCreateTableFunctionStmtProto::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateTableFunctionStmtProto.code)
}
#if LANG_CXX11
inline void ResolvedCreateTableFunctionStmtProto::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedCreateTableFunctionStmtProto.code)
}
#endif
inline void ResolvedCreateTableFunctionStmtProto::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedCreateTableFunctionStmtProto.code)
}
inline void ResolvedCreateTableFunctionStmtProto::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedCreateTableFunctionStmtProto.code)
}
inline ::std::string* ResolvedCreateTableFunctionStmtProto::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateTableFunctionStmtProto.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedCreateTableFunctionStmtProto::release_code() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateTableFunctionStmtProto.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedCreateTableFunctionStmtProto::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateTableFunctionStmtProto.code)
}

// optional .zetasql.AnyResolvedScanProto query = 7;
inline bool ResolvedCreateTableFunctionStmtProto::has_query() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResolvedCreateTableFunctionStmtProto::set_has_query() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResolvedCreateTableFunctionStmtProto::clear_has_query() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResolvedCreateTableFunctionStmtProto::clear_query() {
  if (query_ != NULL) query_->Clear();
  clear_has_query();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedCreateTableFunctionStmtProto::_internal_query() const {
  return *query_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedCreateTableFunctionStmtProto::query() const {
  const ::zetasql::AnyResolvedScanProto* p = query_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableFunctionStmtProto.query)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedCreateTableFunctionStmtProto::release_query() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateTableFunctionStmtProto.query)
  clear_has_query();
  ::zetasql::AnyResolvedScanProto* temp = query_;
  query_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedCreateTableFunctionStmtProto::mutable_query() {
  set_has_query();
  if (query_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    query_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateTableFunctionStmtProto.query)
  return query_;
}
inline void ResolvedCreateTableFunctionStmtProto::set_allocated_query(::zetasql::AnyResolvedScanProto* query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete query_;
  }
  if (query) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    set_has_query();
  } else {
    clear_has_query();
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateTableFunctionStmtProto.query)
}

// repeated .zetasql.ResolvedOutputColumnProto output_column_list = 8;
inline int ResolvedCreateTableFunctionStmtProto::output_column_list_size() const {
  return output_column_list_.size();
}
inline void ResolvedCreateTableFunctionStmtProto::clear_output_column_list() {
  output_column_list_.Clear();
}
inline ::zetasql::ResolvedOutputColumnProto* ResolvedCreateTableFunctionStmtProto::mutable_output_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateTableFunctionStmtProto.output_column_list)
  return output_column_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >*
ResolvedCreateTableFunctionStmtProto::mutable_output_column_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateTableFunctionStmtProto.output_column_list)
  return &output_column_list_;
}
inline const ::zetasql::ResolvedOutputColumnProto& ResolvedCreateTableFunctionStmtProto::output_column_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableFunctionStmtProto.output_column_list)
  return output_column_list_.Get(index);
}
inline ::zetasql::ResolvedOutputColumnProto* ResolvedCreateTableFunctionStmtProto::add_output_column_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateTableFunctionStmtProto.output_column_list)
  return output_column_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >&
ResolvedCreateTableFunctionStmtProto::output_column_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateTableFunctionStmtProto.output_column_list)
  return output_column_list_;
}

// optional bool is_value_table = 9;
inline bool ResolvedCreateTableFunctionStmtProto::has_is_value_table() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ResolvedCreateTableFunctionStmtProto::set_has_is_value_table() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ResolvedCreateTableFunctionStmtProto::clear_has_is_value_table() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ResolvedCreateTableFunctionStmtProto::clear_is_value_table() {
  is_value_table_ = false;
  clear_has_is_value_table();
}
inline bool ResolvedCreateTableFunctionStmtProto::is_value_table() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableFunctionStmtProto.is_value_table)
  return is_value_table_;
}
inline void ResolvedCreateTableFunctionStmtProto::set_is_value_table(bool value) {
  set_has_is_value_table();
  is_value_table_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateTableFunctionStmtProto.is_value_table)
}

// optional .zetasql.ResolvedCreateStatementEnums.SqlSecurity sql_security = 10;
inline bool ResolvedCreateTableFunctionStmtProto::has_sql_security() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResolvedCreateTableFunctionStmtProto::set_has_sql_security() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResolvedCreateTableFunctionStmtProto::clear_has_sql_security() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ResolvedCreateTableFunctionStmtProto::clear_sql_security() {
  sql_security_ = 0;
  clear_has_sql_security();
}
inline ::zetasql::ResolvedCreateStatementEnums_SqlSecurity ResolvedCreateTableFunctionStmtProto::sql_security() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateTableFunctionStmtProto.sql_security)
  return static_cast< ::zetasql::ResolvedCreateStatementEnums_SqlSecurity >(sql_security_);
}
inline void ResolvedCreateTableFunctionStmtProto::set_sql_security(::zetasql::ResolvedCreateStatementEnums_SqlSecurity value) {
  assert(::zetasql::ResolvedCreateStatementEnums_SqlSecurity_IsValid(value));
  set_has_sql_security();
  sql_security_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateTableFunctionStmtProto.sql_security)
}

// -------------------------------------------------------------------

// ResolvedRelationArgumentScanProto

// optional .zetasql.ResolvedScanProto parent = 1;
inline bool ResolvedRelationArgumentScanProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedRelationArgumentScanProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedRelationArgumentScanProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedRelationArgumentScanProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedScanProto& ResolvedRelationArgumentScanProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedScanProto& ResolvedRelationArgumentScanProto::parent() const {
  const ::zetasql::ResolvedScanProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRelationArgumentScanProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedScanProto*>(
      &::zetasql::_ResolvedScanProto_default_instance_);
}
inline ::zetasql::ResolvedScanProto* ResolvedRelationArgumentScanProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedRelationArgumentScanProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedScanProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedScanProto* ResolvedRelationArgumentScanProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedScanProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedRelationArgumentScanProto.parent)
  return parent_;
}
inline void ResolvedRelationArgumentScanProto::set_allocated_parent(::zetasql::ResolvedScanProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedRelationArgumentScanProto.parent)
}

// optional string name = 2;
inline bool ResolvedRelationArgumentScanProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedRelationArgumentScanProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedRelationArgumentScanProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedRelationArgumentScanProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ResolvedRelationArgumentScanProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRelationArgumentScanProto.name)
  return name_.GetNoArena();
}
inline void ResolvedRelationArgumentScanProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedRelationArgumentScanProto.name)
}
#if LANG_CXX11
inline void ResolvedRelationArgumentScanProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedRelationArgumentScanProto.name)
}
#endif
inline void ResolvedRelationArgumentScanProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedRelationArgumentScanProto.name)
}
inline void ResolvedRelationArgumentScanProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedRelationArgumentScanProto.name)
}
inline ::std::string* ResolvedRelationArgumentScanProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedRelationArgumentScanProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedRelationArgumentScanProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedRelationArgumentScanProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedRelationArgumentScanProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedRelationArgumentScanProto.name)
}

// optional bool is_value_table = 3;
inline bool ResolvedRelationArgumentScanProto::has_is_value_table() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedRelationArgumentScanProto::set_has_is_value_table() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedRelationArgumentScanProto::clear_has_is_value_table() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedRelationArgumentScanProto::clear_is_value_table() {
  is_value_table_ = false;
  clear_has_is_value_table();
}
inline bool ResolvedRelationArgumentScanProto::is_value_table() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedRelationArgumentScanProto.is_value_table)
  return is_value_table_;
}
inline void ResolvedRelationArgumentScanProto::set_is_value_table(bool value) {
  set_has_is_value_table();
  is_value_table_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedRelationArgumentScanProto.is_value_table)
}

// -------------------------------------------------------------------

// ResolvedArgumentListProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedArgumentListProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedArgumentListProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedArgumentListProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedArgumentListProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedArgumentListProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedArgumentListProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedArgumentListProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedArgumentListProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedArgumentListProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedArgumentListProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedArgumentListProto.parent)
  return parent_;
}
inline void ResolvedArgumentListProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedArgumentListProto.parent)
}

// repeated .zetasql.ResolvedArgumentDefProto arg_list = 2;
inline int ResolvedArgumentListProto::arg_list_size() const {
  return arg_list_.size();
}
inline void ResolvedArgumentListProto::clear_arg_list() {
  arg_list_.Clear();
}
inline ::zetasql::ResolvedArgumentDefProto* ResolvedArgumentListProto::mutable_arg_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedArgumentListProto.arg_list)
  return arg_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedArgumentDefProto >*
ResolvedArgumentListProto::mutable_arg_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedArgumentListProto.arg_list)
  return &arg_list_;
}
inline const ::zetasql::ResolvedArgumentDefProto& ResolvedArgumentListProto::arg_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedArgumentListProto.arg_list)
  return arg_list_.Get(index);
}
inline ::zetasql::ResolvedArgumentDefProto* ResolvedArgumentListProto::add_arg_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedArgumentListProto.arg_list)
  return arg_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedArgumentDefProto >&
ResolvedArgumentListProto::arg_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedArgumentListProto.arg_list)
  return arg_list_;
}

// -------------------------------------------------------------------

// ResolvedFunctionSignatureHolderProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedFunctionSignatureHolderProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedFunctionSignatureHolderProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedFunctionSignatureHolderProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedFunctionSignatureHolderProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedFunctionSignatureHolderProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedFunctionSignatureHolderProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFunctionSignatureHolderProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedFunctionSignatureHolderProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedFunctionSignatureHolderProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedFunctionSignatureHolderProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFunctionSignatureHolderProto.parent)
  return parent_;
}
inline void ResolvedFunctionSignatureHolderProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedFunctionSignatureHolderProto.parent)
}

// optional .zetasql.FunctionSignatureProto signature = 2;
inline bool ResolvedFunctionSignatureHolderProto::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedFunctionSignatureHolderProto::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedFunctionSignatureHolderProto::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::FunctionSignatureProto& ResolvedFunctionSignatureHolderProto::_internal_signature() const {
  return *signature_;
}
inline const ::zetasql::FunctionSignatureProto& ResolvedFunctionSignatureHolderProto::signature() const {
  const ::zetasql::FunctionSignatureProto* p = signature_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedFunctionSignatureHolderProto.signature)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::FunctionSignatureProto*>(
      &::zetasql::_FunctionSignatureProto_default_instance_);
}
inline ::zetasql::FunctionSignatureProto* ResolvedFunctionSignatureHolderProto::release_signature() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedFunctionSignatureHolderProto.signature)
  clear_has_signature();
  ::zetasql::FunctionSignatureProto* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline ::zetasql::FunctionSignatureProto* ResolvedFunctionSignatureHolderProto::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::FunctionSignatureProto>(GetArenaNoVirtual());
    signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedFunctionSignatureHolderProto.signature)
  return signature_;
}
inline void ResolvedFunctionSignatureHolderProto::set_allocated_signature(::zetasql::FunctionSignatureProto* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(signature_);
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedFunctionSignatureHolderProto.signature)
}

// -------------------------------------------------------------------

// ResolvedDropFunctionStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedDropFunctionStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedDropFunctionStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedDropFunctionStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedDropFunctionStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedDropFunctionStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedDropFunctionStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropFunctionStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedDropFunctionStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDropFunctionStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedDropFunctionStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDropFunctionStmtProto.parent)
  return parent_;
}
inline void ResolvedDropFunctionStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDropFunctionStmtProto.parent)
}

// optional bool is_if_exists = 2;
inline bool ResolvedDropFunctionStmtProto::has_is_if_exists() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedDropFunctionStmtProto::set_has_is_if_exists() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedDropFunctionStmtProto::clear_has_is_if_exists() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedDropFunctionStmtProto::clear_is_if_exists() {
  is_if_exists_ = false;
  clear_has_is_if_exists();
}
inline bool ResolvedDropFunctionStmtProto::is_if_exists() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropFunctionStmtProto.is_if_exists)
  return is_if_exists_;
}
inline void ResolvedDropFunctionStmtProto::set_is_if_exists(bool value) {
  set_has_is_if_exists();
  is_if_exists_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropFunctionStmtProto.is_if_exists)
}

// repeated string name_path = 3;
inline int ResolvedDropFunctionStmtProto::name_path_size() const {
  return name_path_.size();
}
inline void ResolvedDropFunctionStmtProto::clear_name_path() {
  name_path_.Clear();
}
inline const ::std::string& ResolvedDropFunctionStmtProto::name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropFunctionStmtProto.name_path)
  return name_path_.Get(index);
}
inline ::std::string* ResolvedDropFunctionStmtProto::mutable_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDropFunctionStmtProto.name_path)
  return name_path_.Mutable(index);
}
inline void ResolvedDropFunctionStmtProto::set_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropFunctionStmtProto.name_path)
  name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedDropFunctionStmtProto::set_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropFunctionStmtProto.name_path)
  name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedDropFunctionStmtProto::set_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedDropFunctionStmtProto.name_path)
}
inline void ResolvedDropFunctionStmtProto::set_name_path(int index, const char* value, size_t size) {
  name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedDropFunctionStmtProto.name_path)
}
inline ::std::string* ResolvedDropFunctionStmtProto::add_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedDropFunctionStmtProto.name_path)
  return name_path_.Add();
}
inline void ResolvedDropFunctionStmtProto::add_name_path(const ::std::string& value) {
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedDropFunctionStmtProto.name_path)
}
#if LANG_CXX11
inline void ResolvedDropFunctionStmtProto::add_name_path(::std::string&& value) {
  name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedDropFunctionStmtProto.name_path)
}
#endif
inline void ResolvedDropFunctionStmtProto::add_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedDropFunctionStmtProto.name_path)
}
inline void ResolvedDropFunctionStmtProto::add_name_path(const char* value, size_t size) {
  name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedDropFunctionStmtProto.name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedDropFunctionStmtProto::name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedDropFunctionStmtProto.name_path)
  return name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedDropFunctionStmtProto::mutable_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedDropFunctionStmtProto.name_path)
  return &name_path_;
}

// optional .zetasql.ResolvedArgumentListProto arguments = 4;
inline bool ResolvedDropFunctionStmtProto::has_arguments() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedDropFunctionStmtProto::set_has_arguments() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedDropFunctionStmtProto::clear_has_arguments() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedDropFunctionStmtProto::clear_arguments() {
  if (arguments_ != NULL) arguments_->Clear();
  clear_has_arguments();
}
inline const ::zetasql::ResolvedArgumentListProto& ResolvedDropFunctionStmtProto::_internal_arguments() const {
  return *arguments_;
}
inline const ::zetasql::ResolvedArgumentListProto& ResolvedDropFunctionStmtProto::arguments() const {
  const ::zetasql::ResolvedArgumentListProto* p = arguments_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropFunctionStmtProto.arguments)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentListProto*>(
      &::zetasql::_ResolvedArgumentListProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentListProto* ResolvedDropFunctionStmtProto::release_arguments() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDropFunctionStmtProto.arguments)
  clear_has_arguments();
  ::zetasql::ResolvedArgumentListProto* temp = arguments_;
  arguments_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentListProto* ResolvedDropFunctionStmtProto::mutable_arguments() {
  set_has_arguments();
  if (arguments_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentListProto>(GetArenaNoVirtual());
    arguments_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDropFunctionStmtProto.arguments)
  return arguments_;
}
inline void ResolvedDropFunctionStmtProto::set_allocated_arguments(::zetasql::ResolvedArgumentListProto* arguments) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete arguments_;
  }
  if (arguments) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      arguments = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, arguments, submessage_arena);
    }
    set_has_arguments();
  } else {
    clear_has_arguments();
  }
  arguments_ = arguments;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDropFunctionStmtProto.arguments)
}

// optional .zetasql.ResolvedFunctionSignatureHolderProto signature = 5;
inline bool ResolvedDropFunctionStmtProto::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedDropFunctionStmtProto::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedDropFunctionStmtProto::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedDropFunctionStmtProto::clear_signature() {
  if (signature_ != NULL) signature_->Clear();
  clear_has_signature();
}
inline const ::zetasql::ResolvedFunctionSignatureHolderProto& ResolvedDropFunctionStmtProto::_internal_signature() const {
  return *signature_;
}
inline const ::zetasql::ResolvedFunctionSignatureHolderProto& ResolvedDropFunctionStmtProto::signature() const {
  const ::zetasql::ResolvedFunctionSignatureHolderProto* p = signature_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropFunctionStmtProto.signature)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedFunctionSignatureHolderProto*>(
      &::zetasql::_ResolvedFunctionSignatureHolderProto_default_instance_);
}
inline ::zetasql::ResolvedFunctionSignatureHolderProto* ResolvedDropFunctionStmtProto::release_signature() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDropFunctionStmtProto.signature)
  clear_has_signature();
  ::zetasql::ResolvedFunctionSignatureHolderProto* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedFunctionSignatureHolderProto* ResolvedDropFunctionStmtProto::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedFunctionSignatureHolderProto>(GetArenaNoVirtual());
    signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDropFunctionStmtProto.signature)
  return signature_;
}
inline void ResolvedDropFunctionStmtProto::set_allocated_signature(::zetasql::ResolvedFunctionSignatureHolderProto* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete signature_;
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDropFunctionStmtProto.signature)
}

// -------------------------------------------------------------------

// ResolvedDropTableFunctionStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedDropTableFunctionStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedDropTableFunctionStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedDropTableFunctionStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedDropTableFunctionStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedDropTableFunctionStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedDropTableFunctionStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropTableFunctionStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedDropTableFunctionStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedDropTableFunctionStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedDropTableFunctionStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDropTableFunctionStmtProto.parent)
  return parent_;
}
inline void ResolvedDropTableFunctionStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedDropTableFunctionStmtProto.parent)
}

// optional bool is_if_exists = 2;
inline bool ResolvedDropTableFunctionStmtProto::has_is_if_exists() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedDropTableFunctionStmtProto::set_has_is_if_exists() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedDropTableFunctionStmtProto::clear_has_is_if_exists() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedDropTableFunctionStmtProto::clear_is_if_exists() {
  is_if_exists_ = false;
  clear_has_is_if_exists();
}
inline bool ResolvedDropTableFunctionStmtProto::is_if_exists() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropTableFunctionStmtProto.is_if_exists)
  return is_if_exists_;
}
inline void ResolvedDropTableFunctionStmtProto::set_is_if_exists(bool value) {
  set_has_is_if_exists();
  is_if_exists_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropTableFunctionStmtProto.is_if_exists)
}

// repeated string name_path = 3;
inline int ResolvedDropTableFunctionStmtProto::name_path_size() const {
  return name_path_.size();
}
inline void ResolvedDropTableFunctionStmtProto::clear_name_path() {
  name_path_.Clear();
}
inline const ::std::string& ResolvedDropTableFunctionStmtProto::name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedDropTableFunctionStmtProto.name_path)
  return name_path_.Get(index);
}
inline ::std::string* ResolvedDropTableFunctionStmtProto::mutable_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedDropTableFunctionStmtProto.name_path)
  return name_path_.Mutable(index);
}
inline void ResolvedDropTableFunctionStmtProto::set_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropTableFunctionStmtProto.name_path)
  name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedDropTableFunctionStmtProto::set_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedDropTableFunctionStmtProto.name_path)
  name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedDropTableFunctionStmtProto::set_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedDropTableFunctionStmtProto.name_path)
}
inline void ResolvedDropTableFunctionStmtProto::set_name_path(int index, const char* value, size_t size) {
  name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedDropTableFunctionStmtProto.name_path)
}
inline ::std::string* ResolvedDropTableFunctionStmtProto::add_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedDropTableFunctionStmtProto.name_path)
  return name_path_.Add();
}
inline void ResolvedDropTableFunctionStmtProto::add_name_path(const ::std::string& value) {
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedDropTableFunctionStmtProto.name_path)
}
#if LANG_CXX11
inline void ResolvedDropTableFunctionStmtProto::add_name_path(::std::string&& value) {
  name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedDropTableFunctionStmtProto.name_path)
}
#endif
inline void ResolvedDropTableFunctionStmtProto::add_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedDropTableFunctionStmtProto.name_path)
}
inline void ResolvedDropTableFunctionStmtProto::add_name_path(const char* value, size_t size) {
  name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedDropTableFunctionStmtProto.name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedDropTableFunctionStmtProto::name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedDropTableFunctionStmtProto.name_path)
  return name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedDropTableFunctionStmtProto::mutable_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedDropTableFunctionStmtProto.name_path)
  return &name_path_;
}

// -------------------------------------------------------------------

// ResolvedCallStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedCallStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedCallStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedCallStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedCallStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedCallStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedCallStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCallStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedCallStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCallStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedCallStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCallStmtProto.parent)
  return parent_;
}
inline void ResolvedCallStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCallStmtProto.parent)
}

// optional .zetasql.ProcedureRefProto procedure = 2;
inline bool ResolvedCallStmtProto::has_procedure() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedCallStmtProto::set_has_procedure() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedCallStmtProto::clear_has_procedure() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::ProcedureRefProto& ResolvedCallStmtProto::_internal_procedure() const {
  return *procedure_;
}
inline const ::zetasql::ProcedureRefProto& ResolvedCallStmtProto::procedure() const {
  const ::zetasql::ProcedureRefProto* p = procedure_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCallStmtProto.procedure)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ProcedureRefProto*>(
      &::zetasql::_ProcedureRefProto_default_instance_);
}
inline ::zetasql::ProcedureRefProto* ResolvedCallStmtProto::release_procedure() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCallStmtProto.procedure)
  clear_has_procedure();
  ::zetasql::ProcedureRefProto* temp = procedure_;
  procedure_ = NULL;
  return temp;
}
inline ::zetasql::ProcedureRefProto* ResolvedCallStmtProto::mutable_procedure() {
  set_has_procedure();
  if (procedure_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ProcedureRefProto>(GetArenaNoVirtual());
    procedure_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCallStmtProto.procedure)
  return procedure_;
}
inline void ResolvedCallStmtProto::set_allocated_procedure(::zetasql::ProcedureRefProto* procedure) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(procedure_);
  }
  if (procedure) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      procedure = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, procedure, submessage_arena);
    }
    set_has_procedure();
  } else {
    clear_has_procedure();
  }
  procedure_ = procedure;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCallStmtProto.procedure)
}

// optional .zetasql.FunctionSignatureProto signature = 3;
inline bool ResolvedCallStmtProto::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedCallStmtProto::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedCallStmtProto::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasql::FunctionSignatureProto& ResolvedCallStmtProto::_internal_signature() const {
  return *signature_;
}
inline const ::zetasql::FunctionSignatureProto& ResolvedCallStmtProto::signature() const {
  const ::zetasql::FunctionSignatureProto* p = signature_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCallStmtProto.signature)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::FunctionSignatureProto*>(
      &::zetasql::_FunctionSignatureProto_default_instance_);
}
inline ::zetasql::FunctionSignatureProto* ResolvedCallStmtProto::release_signature() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCallStmtProto.signature)
  clear_has_signature();
  ::zetasql::FunctionSignatureProto* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline ::zetasql::FunctionSignatureProto* ResolvedCallStmtProto::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::FunctionSignatureProto>(GetArenaNoVirtual());
    signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCallStmtProto.signature)
  return signature_;
}
inline void ResolvedCallStmtProto::set_allocated_signature(::zetasql::FunctionSignatureProto* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(signature_);
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCallStmtProto.signature)
}

// repeated .zetasql.AnyResolvedExprProto argument_list = 4;
inline int ResolvedCallStmtProto::argument_list_size() const {
  return argument_list_.size();
}
inline void ResolvedCallStmtProto::clear_argument_list() {
  argument_list_.Clear();
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCallStmtProto::mutable_argument_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCallStmtProto.argument_list)
  return argument_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
ResolvedCallStmtProto::mutable_argument_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCallStmtProto.argument_list)
  return &argument_list_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedCallStmtProto::argument_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCallStmtProto.argument_list)
  return argument_list_.Get(index);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCallStmtProto::add_argument_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCallStmtProto.argument_list)
  return argument_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
ResolvedCallStmtProto::argument_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCallStmtProto.argument_list)
  return argument_list_;
}

// -------------------------------------------------------------------

// ResolvedImportStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedImportStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedImportStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedImportStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedImportStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedImportStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedImportStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedImportStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedImportStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedImportStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedImportStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedImportStmtProto.parent)
  return parent_;
}
inline void ResolvedImportStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedImportStmtProto.parent)
}

// optional .zetasql.ResolvedImportStmtEnums.ImportKind import_kind = 2;
inline bool ResolvedImportStmtProto::has_import_kind() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedImportStmtProto::set_has_import_kind() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedImportStmtProto::clear_has_import_kind() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedImportStmtProto::clear_import_kind() {
  import_kind_ = 0;
  clear_has_import_kind();
}
inline ::zetasql::ResolvedImportStmtEnums_ImportKind ResolvedImportStmtProto::import_kind() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedImportStmtProto.import_kind)
  return static_cast< ::zetasql::ResolvedImportStmtEnums_ImportKind >(import_kind_);
}
inline void ResolvedImportStmtProto::set_import_kind(::zetasql::ResolvedImportStmtEnums_ImportKind value) {
  assert(::zetasql::ResolvedImportStmtEnums_ImportKind_IsValid(value));
  set_has_import_kind();
  import_kind_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedImportStmtProto.import_kind)
}

// repeated string name_path = 3;
inline int ResolvedImportStmtProto::name_path_size() const {
  return name_path_.size();
}
inline void ResolvedImportStmtProto::clear_name_path() {
  name_path_.Clear();
}
inline const ::std::string& ResolvedImportStmtProto::name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedImportStmtProto.name_path)
  return name_path_.Get(index);
}
inline ::std::string* ResolvedImportStmtProto::mutable_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedImportStmtProto.name_path)
  return name_path_.Mutable(index);
}
inline void ResolvedImportStmtProto::set_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedImportStmtProto.name_path)
  name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedImportStmtProto::set_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedImportStmtProto.name_path)
  name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedImportStmtProto::set_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedImportStmtProto.name_path)
}
inline void ResolvedImportStmtProto::set_name_path(int index, const char* value, size_t size) {
  name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedImportStmtProto.name_path)
}
inline ::std::string* ResolvedImportStmtProto::add_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedImportStmtProto.name_path)
  return name_path_.Add();
}
inline void ResolvedImportStmtProto::add_name_path(const ::std::string& value) {
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedImportStmtProto.name_path)
}
#if LANG_CXX11
inline void ResolvedImportStmtProto::add_name_path(::std::string&& value) {
  name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedImportStmtProto.name_path)
}
#endif
inline void ResolvedImportStmtProto::add_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedImportStmtProto.name_path)
}
inline void ResolvedImportStmtProto::add_name_path(const char* value, size_t size) {
  name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedImportStmtProto.name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedImportStmtProto::name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedImportStmtProto.name_path)
  return name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedImportStmtProto::mutable_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedImportStmtProto.name_path)
  return &name_path_;
}

// optional string file_path = 4;
inline bool ResolvedImportStmtProto::has_file_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedImportStmtProto::set_has_file_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedImportStmtProto::clear_has_file_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedImportStmtProto::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_path();
}
inline const ::std::string& ResolvedImportStmtProto::file_path() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedImportStmtProto.file_path)
  return file_path_.GetNoArena();
}
inline void ResolvedImportStmtProto::set_file_path(const ::std::string& value) {
  set_has_file_path();
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedImportStmtProto.file_path)
}
#if LANG_CXX11
inline void ResolvedImportStmtProto::set_file_path(::std::string&& value) {
  set_has_file_path();
  file_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedImportStmtProto.file_path)
}
#endif
inline void ResolvedImportStmtProto::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_path();
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedImportStmtProto.file_path)
}
inline void ResolvedImportStmtProto::set_file_path(const char* value, size_t size) {
  set_has_file_path();
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedImportStmtProto.file_path)
}
inline ::std::string* ResolvedImportStmtProto::mutable_file_path() {
  set_has_file_path();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedImportStmtProto.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedImportStmtProto::release_file_path() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedImportStmtProto.file_path)
  if (!has_file_path()) {
    return NULL;
  }
  clear_has_file_path();
  return file_path_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedImportStmtProto::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    set_has_file_path();
  } else {
    clear_has_file_path();
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedImportStmtProto.file_path)
}

// repeated string alias_path = 5;
inline int ResolvedImportStmtProto::alias_path_size() const {
  return alias_path_.size();
}
inline void ResolvedImportStmtProto::clear_alias_path() {
  alias_path_.Clear();
}
inline const ::std::string& ResolvedImportStmtProto::alias_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedImportStmtProto.alias_path)
  return alias_path_.Get(index);
}
inline ::std::string* ResolvedImportStmtProto::mutable_alias_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedImportStmtProto.alias_path)
  return alias_path_.Mutable(index);
}
inline void ResolvedImportStmtProto::set_alias_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedImportStmtProto.alias_path)
  alias_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedImportStmtProto::set_alias_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedImportStmtProto.alias_path)
  alias_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedImportStmtProto::set_alias_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  alias_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedImportStmtProto.alias_path)
}
inline void ResolvedImportStmtProto::set_alias_path(int index, const char* value, size_t size) {
  alias_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedImportStmtProto.alias_path)
}
inline ::std::string* ResolvedImportStmtProto::add_alias_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedImportStmtProto.alias_path)
  return alias_path_.Add();
}
inline void ResolvedImportStmtProto::add_alias_path(const ::std::string& value) {
  alias_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedImportStmtProto.alias_path)
}
#if LANG_CXX11
inline void ResolvedImportStmtProto::add_alias_path(::std::string&& value) {
  alias_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedImportStmtProto.alias_path)
}
#endif
inline void ResolvedImportStmtProto::add_alias_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  alias_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedImportStmtProto.alias_path)
}
inline void ResolvedImportStmtProto::add_alias_path(const char* value, size_t size) {
  alias_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedImportStmtProto.alias_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedImportStmtProto::alias_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedImportStmtProto.alias_path)
  return alias_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedImportStmtProto::mutable_alias_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedImportStmtProto.alias_path)
  return &alias_path_;
}

// repeated string into_alias_path = 7;
inline int ResolvedImportStmtProto::into_alias_path_size() const {
  return into_alias_path_.size();
}
inline void ResolvedImportStmtProto::clear_into_alias_path() {
  into_alias_path_.Clear();
}
inline const ::std::string& ResolvedImportStmtProto::into_alias_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedImportStmtProto.into_alias_path)
  return into_alias_path_.Get(index);
}
inline ::std::string* ResolvedImportStmtProto::mutable_into_alias_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedImportStmtProto.into_alias_path)
  return into_alias_path_.Mutable(index);
}
inline void ResolvedImportStmtProto::set_into_alias_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedImportStmtProto.into_alias_path)
  into_alias_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedImportStmtProto::set_into_alias_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedImportStmtProto.into_alias_path)
  into_alias_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedImportStmtProto::set_into_alias_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  into_alias_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedImportStmtProto.into_alias_path)
}
inline void ResolvedImportStmtProto::set_into_alias_path(int index, const char* value, size_t size) {
  into_alias_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedImportStmtProto.into_alias_path)
}
inline ::std::string* ResolvedImportStmtProto::add_into_alias_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedImportStmtProto.into_alias_path)
  return into_alias_path_.Add();
}
inline void ResolvedImportStmtProto::add_into_alias_path(const ::std::string& value) {
  into_alias_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedImportStmtProto.into_alias_path)
}
#if LANG_CXX11
inline void ResolvedImportStmtProto::add_into_alias_path(::std::string&& value) {
  into_alias_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedImportStmtProto.into_alias_path)
}
#endif
inline void ResolvedImportStmtProto::add_into_alias_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  into_alias_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedImportStmtProto.into_alias_path)
}
inline void ResolvedImportStmtProto::add_into_alias_path(const char* value, size_t size) {
  into_alias_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedImportStmtProto.into_alias_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedImportStmtProto::into_alias_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedImportStmtProto.into_alias_path)
  return into_alias_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedImportStmtProto::mutable_into_alias_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedImportStmtProto.into_alias_path)
  return &into_alias_path_;
}

// repeated .zetasql.ResolvedOptionProto option_list = 6;
inline int ResolvedImportStmtProto::option_list_size() const {
  return option_list_.size();
}
inline void ResolvedImportStmtProto::clear_option_list() {
  option_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedImportStmtProto::mutable_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedImportStmtProto.option_list)
  return option_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedImportStmtProto::mutable_option_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedImportStmtProto.option_list)
  return &option_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedImportStmtProto::option_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedImportStmtProto.option_list)
  return option_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedImportStmtProto::add_option_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedImportStmtProto.option_list)
  return option_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedImportStmtProto::option_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedImportStmtProto.option_list)
  return option_list_;
}

// -------------------------------------------------------------------

// ResolvedModuleStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedModuleStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedModuleStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedModuleStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedModuleStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedModuleStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedModuleStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedModuleStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedModuleStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedModuleStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedModuleStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedModuleStmtProto.parent)
  return parent_;
}
inline void ResolvedModuleStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedModuleStmtProto.parent)
}

// repeated string name_path = 2;
inline int ResolvedModuleStmtProto::name_path_size() const {
  return name_path_.size();
}
inline void ResolvedModuleStmtProto::clear_name_path() {
  name_path_.Clear();
}
inline const ::std::string& ResolvedModuleStmtProto::name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedModuleStmtProto.name_path)
  return name_path_.Get(index);
}
inline ::std::string* ResolvedModuleStmtProto::mutable_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedModuleStmtProto.name_path)
  return name_path_.Mutable(index);
}
inline void ResolvedModuleStmtProto::set_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedModuleStmtProto.name_path)
  name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedModuleStmtProto::set_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedModuleStmtProto.name_path)
  name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedModuleStmtProto::set_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedModuleStmtProto.name_path)
}
inline void ResolvedModuleStmtProto::set_name_path(int index, const char* value, size_t size) {
  name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedModuleStmtProto.name_path)
}
inline ::std::string* ResolvedModuleStmtProto::add_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedModuleStmtProto.name_path)
  return name_path_.Add();
}
inline void ResolvedModuleStmtProto::add_name_path(const ::std::string& value) {
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedModuleStmtProto.name_path)
}
#if LANG_CXX11
inline void ResolvedModuleStmtProto::add_name_path(::std::string&& value) {
  name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedModuleStmtProto.name_path)
}
#endif
inline void ResolvedModuleStmtProto::add_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedModuleStmtProto.name_path)
}
inline void ResolvedModuleStmtProto::add_name_path(const char* value, size_t size) {
  name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedModuleStmtProto.name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedModuleStmtProto::name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedModuleStmtProto.name_path)
  return name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedModuleStmtProto::mutable_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedModuleStmtProto.name_path)
  return &name_path_;
}

// repeated .zetasql.ResolvedOptionProto option_list = 3;
inline int ResolvedModuleStmtProto::option_list_size() const {
  return option_list_.size();
}
inline void ResolvedModuleStmtProto::clear_option_list() {
  option_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedModuleStmtProto::mutable_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedModuleStmtProto.option_list)
  return option_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedModuleStmtProto::mutable_option_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedModuleStmtProto.option_list)
  return &option_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedModuleStmtProto::option_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedModuleStmtProto.option_list)
  return option_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedModuleStmtProto::add_option_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedModuleStmtProto.option_list)
  return option_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedModuleStmtProto::option_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedModuleStmtProto.option_list)
  return option_list_;
}

// -------------------------------------------------------------------

// ResolvedAggregateHavingModifierProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedAggregateHavingModifierProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAggregateHavingModifierProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAggregateHavingModifierProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAggregateHavingModifierProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedAggregateHavingModifierProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedAggregateHavingModifierProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAggregateHavingModifierProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedAggregateHavingModifierProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAggregateHavingModifierProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedAggregateHavingModifierProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAggregateHavingModifierProto.parent)
  return parent_;
}
inline void ResolvedAggregateHavingModifierProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAggregateHavingModifierProto.parent)
}

// optional .zetasql.ResolvedAggregateHavingModifierEnums.HavingModifierKind kind = 2;
inline bool ResolvedAggregateHavingModifierProto::has_kind() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedAggregateHavingModifierProto::set_has_kind() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedAggregateHavingModifierProto::clear_has_kind() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedAggregateHavingModifierProto::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
inline ::zetasql::ResolvedAggregateHavingModifierEnums_HavingModifierKind ResolvedAggregateHavingModifierProto::kind() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAggregateHavingModifierProto.kind)
  return static_cast< ::zetasql::ResolvedAggregateHavingModifierEnums_HavingModifierKind >(kind_);
}
inline void ResolvedAggregateHavingModifierProto::set_kind(::zetasql::ResolvedAggregateHavingModifierEnums_HavingModifierKind value) {
  assert(::zetasql::ResolvedAggregateHavingModifierEnums_HavingModifierKind_IsValid(value));
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedAggregateHavingModifierProto.kind)
}

// optional .zetasql.AnyResolvedExprProto having_expr = 3;
inline bool ResolvedAggregateHavingModifierProto::has_having_expr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedAggregateHavingModifierProto::set_has_having_expr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedAggregateHavingModifierProto::clear_has_having_expr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedAggregateHavingModifierProto::clear_having_expr() {
  if (having_expr_ != NULL) having_expr_->Clear();
  clear_has_having_expr();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedAggregateHavingModifierProto::_internal_having_expr() const {
  return *having_expr_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedAggregateHavingModifierProto::having_expr() const {
  const ::zetasql::AnyResolvedExprProto* p = having_expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAggregateHavingModifierProto.having_expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedAggregateHavingModifierProto::release_having_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAggregateHavingModifierProto.having_expr)
  clear_has_having_expr();
  ::zetasql::AnyResolvedExprProto* temp = having_expr_;
  having_expr_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedAggregateHavingModifierProto::mutable_having_expr() {
  set_has_having_expr();
  if (having_expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    having_expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAggregateHavingModifierProto.having_expr)
  return having_expr_;
}
inline void ResolvedAggregateHavingModifierProto::set_allocated_having_expr(::zetasql::AnyResolvedExprProto* having_expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete having_expr_;
  }
  if (having_expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      having_expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, having_expr, submessage_arena);
    }
    set_has_having_expr();
  } else {
    clear_has_having_expr();
  }
  having_expr_ = having_expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAggregateHavingModifierProto.having_expr)
}

// -------------------------------------------------------------------

// ResolvedCreateMaterializedViewStmtProto

// optional .zetasql.ResolvedCreateViewBaseProto parent = 1;
inline bool ResolvedCreateMaterializedViewStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedCreateMaterializedViewStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedCreateMaterializedViewStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedCreateMaterializedViewStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedCreateViewBaseProto& ResolvedCreateMaterializedViewStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedCreateViewBaseProto& ResolvedCreateMaterializedViewStmtProto::parent() const {
  const ::zetasql::ResolvedCreateViewBaseProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateMaterializedViewStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedCreateViewBaseProto*>(
      &::zetasql::_ResolvedCreateViewBaseProto_default_instance_);
}
inline ::zetasql::ResolvedCreateViewBaseProto* ResolvedCreateMaterializedViewStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateMaterializedViewStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedCreateViewBaseProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedCreateViewBaseProto* ResolvedCreateMaterializedViewStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedCreateViewBaseProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateMaterializedViewStmtProto.parent)
  return parent_;
}
inline void ResolvedCreateMaterializedViewStmtProto::set_allocated_parent(::zetasql::ResolvedCreateViewBaseProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateMaterializedViewStmtProto.parent)
}

// repeated .zetasql.ResolvedColumnDefinitionProto column_definition_list = 2;
inline int ResolvedCreateMaterializedViewStmtProto::column_definition_list_size() const {
  return column_definition_list_.size();
}
inline void ResolvedCreateMaterializedViewStmtProto::clear_column_definition_list() {
  column_definition_list_.Clear();
}
inline ::zetasql::ResolvedColumnDefinitionProto* ResolvedCreateMaterializedViewStmtProto::mutable_column_definition_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateMaterializedViewStmtProto.column_definition_list)
  return column_definition_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnDefinitionProto >*
ResolvedCreateMaterializedViewStmtProto::mutable_column_definition_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateMaterializedViewStmtProto.column_definition_list)
  return &column_definition_list_;
}
inline const ::zetasql::ResolvedColumnDefinitionProto& ResolvedCreateMaterializedViewStmtProto::column_definition_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateMaterializedViewStmtProto.column_definition_list)
  return column_definition_list_.Get(index);
}
inline ::zetasql::ResolvedColumnDefinitionProto* ResolvedCreateMaterializedViewStmtProto::add_column_definition_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateMaterializedViewStmtProto.column_definition_list)
  return column_definition_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnDefinitionProto >&
ResolvedCreateMaterializedViewStmtProto::column_definition_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateMaterializedViewStmtProto.column_definition_list)
  return column_definition_list_;
}

// repeated .zetasql.AnyResolvedExprProto partition_by_list = 3;
inline int ResolvedCreateMaterializedViewStmtProto::partition_by_list_size() const {
  return partition_by_list_.size();
}
inline void ResolvedCreateMaterializedViewStmtProto::clear_partition_by_list() {
  partition_by_list_.Clear();
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCreateMaterializedViewStmtProto::mutable_partition_by_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateMaterializedViewStmtProto.partition_by_list)
  return partition_by_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
ResolvedCreateMaterializedViewStmtProto::mutable_partition_by_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateMaterializedViewStmtProto.partition_by_list)
  return &partition_by_list_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedCreateMaterializedViewStmtProto::partition_by_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateMaterializedViewStmtProto.partition_by_list)
  return partition_by_list_.Get(index);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCreateMaterializedViewStmtProto::add_partition_by_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateMaterializedViewStmtProto.partition_by_list)
  return partition_by_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
ResolvedCreateMaterializedViewStmtProto::partition_by_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateMaterializedViewStmtProto.partition_by_list)
  return partition_by_list_;
}

// repeated .zetasql.AnyResolvedExprProto cluster_by_list = 4;
inline int ResolvedCreateMaterializedViewStmtProto::cluster_by_list_size() const {
  return cluster_by_list_.size();
}
inline void ResolvedCreateMaterializedViewStmtProto::clear_cluster_by_list() {
  cluster_by_list_.Clear();
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCreateMaterializedViewStmtProto::mutable_cluster_by_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateMaterializedViewStmtProto.cluster_by_list)
  return cluster_by_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
ResolvedCreateMaterializedViewStmtProto::mutable_cluster_by_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateMaterializedViewStmtProto.cluster_by_list)
  return &cluster_by_list_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedCreateMaterializedViewStmtProto::cluster_by_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateMaterializedViewStmtProto.cluster_by_list)
  return cluster_by_list_.Get(index);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedCreateMaterializedViewStmtProto::add_cluster_by_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateMaterializedViewStmtProto.cluster_by_list)
  return cluster_by_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
ResolvedCreateMaterializedViewStmtProto::cluster_by_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateMaterializedViewStmtProto.cluster_by_list)
  return cluster_by_list_;
}

// -------------------------------------------------------------------

// ResolvedCreateProcedureStmtProto

// optional .zetasql.ResolvedCreateStatementProto parent = 1;
inline bool ResolvedCreateProcedureStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedCreateProcedureStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedCreateProcedureStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedCreateProcedureStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedCreateStatementProto& ResolvedCreateProcedureStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedCreateStatementProto& ResolvedCreateProcedureStmtProto::parent() const {
  const ::zetasql::ResolvedCreateStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateProcedureStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedCreateStatementProto*>(
      &::zetasql::_ResolvedCreateStatementProto_default_instance_);
}
inline ::zetasql::ResolvedCreateStatementProto* ResolvedCreateProcedureStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateProcedureStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedCreateStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedCreateStatementProto* ResolvedCreateProcedureStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedCreateStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateProcedureStmtProto.parent)
  return parent_;
}
inline void ResolvedCreateProcedureStmtProto::set_allocated_parent(::zetasql::ResolvedCreateStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateProcedureStmtProto.parent)
}

// repeated string argument_name_list = 2;
inline int ResolvedCreateProcedureStmtProto::argument_name_list_size() const {
  return argument_name_list_.size();
}
inline void ResolvedCreateProcedureStmtProto::clear_argument_name_list() {
  argument_name_list_.Clear();
}
inline const ::std::string& ResolvedCreateProcedureStmtProto::argument_name_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateProcedureStmtProto.argument_name_list)
  return argument_name_list_.Get(index);
}
inline ::std::string* ResolvedCreateProcedureStmtProto::mutable_argument_name_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateProcedureStmtProto.argument_name_list)
  return argument_name_list_.Mutable(index);
}
inline void ResolvedCreateProcedureStmtProto::set_argument_name_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateProcedureStmtProto.argument_name_list)
  argument_name_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedCreateProcedureStmtProto::set_argument_name_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateProcedureStmtProto.argument_name_list)
  argument_name_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedCreateProcedureStmtProto::set_argument_name_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  argument_name_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedCreateProcedureStmtProto.argument_name_list)
}
inline void ResolvedCreateProcedureStmtProto::set_argument_name_list(int index, const char* value, size_t size) {
  argument_name_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedCreateProcedureStmtProto.argument_name_list)
}
inline ::std::string* ResolvedCreateProcedureStmtProto::add_argument_name_list() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedCreateProcedureStmtProto.argument_name_list)
  return argument_name_list_.Add();
}
inline void ResolvedCreateProcedureStmtProto::add_argument_name_list(const ::std::string& value) {
  argument_name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateProcedureStmtProto.argument_name_list)
}
#if LANG_CXX11
inline void ResolvedCreateProcedureStmtProto::add_argument_name_list(::std::string&& value) {
  argument_name_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateProcedureStmtProto.argument_name_list)
}
#endif
inline void ResolvedCreateProcedureStmtProto::add_argument_name_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  argument_name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedCreateProcedureStmtProto.argument_name_list)
}
inline void ResolvedCreateProcedureStmtProto::add_argument_name_list(const char* value, size_t size) {
  argument_name_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedCreateProcedureStmtProto.argument_name_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedCreateProcedureStmtProto::argument_name_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateProcedureStmtProto.argument_name_list)
  return argument_name_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedCreateProcedureStmtProto::mutable_argument_name_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateProcedureStmtProto.argument_name_list)
  return &argument_name_list_;
}

// optional .zetasql.FunctionSignatureProto signature = 3;
inline bool ResolvedCreateProcedureStmtProto::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedCreateProcedureStmtProto::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedCreateProcedureStmtProto::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasql::FunctionSignatureProto& ResolvedCreateProcedureStmtProto::_internal_signature() const {
  return *signature_;
}
inline const ::zetasql::FunctionSignatureProto& ResolvedCreateProcedureStmtProto::signature() const {
  const ::zetasql::FunctionSignatureProto* p = signature_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateProcedureStmtProto.signature)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::FunctionSignatureProto*>(
      &::zetasql::_FunctionSignatureProto_default_instance_);
}
inline ::zetasql::FunctionSignatureProto* ResolvedCreateProcedureStmtProto::release_signature() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateProcedureStmtProto.signature)
  clear_has_signature();
  ::zetasql::FunctionSignatureProto* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline ::zetasql::FunctionSignatureProto* ResolvedCreateProcedureStmtProto::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::FunctionSignatureProto>(GetArenaNoVirtual());
    signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateProcedureStmtProto.signature)
  return signature_;
}
inline void ResolvedCreateProcedureStmtProto::set_allocated_signature(::zetasql::FunctionSignatureProto* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(signature_);
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateProcedureStmtProto.signature)
}

// repeated .zetasql.ResolvedOptionProto option_list = 4;
inline int ResolvedCreateProcedureStmtProto::option_list_size() const {
  return option_list_.size();
}
inline void ResolvedCreateProcedureStmtProto::clear_option_list() {
  option_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedCreateProcedureStmtProto::mutable_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateProcedureStmtProto.option_list)
  return option_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedCreateProcedureStmtProto::mutable_option_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateProcedureStmtProto.option_list)
  return &option_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedCreateProcedureStmtProto::option_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateProcedureStmtProto.option_list)
  return option_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedCreateProcedureStmtProto::add_option_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateProcedureStmtProto.option_list)
  return option_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedCreateProcedureStmtProto::option_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateProcedureStmtProto.option_list)
  return option_list_;
}

// optional string procedure_body = 5;
inline bool ResolvedCreateProcedureStmtProto::has_procedure_body() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedCreateProcedureStmtProto::set_has_procedure_body() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedCreateProcedureStmtProto::clear_has_procedure_body() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedCreateProcedureStmtProto::clear_procedure_body() {
  procedure_body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_procedure_body();
}
inline const ::std::string& ResolvedCreateProcedureStmtProto::procedure_body() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateProcedureStmtProto.procedure_body)
  return procedure_body_.GetNoArena();
}
inline void ResolvedCreateProcedureStmtProto::set_procedure_body(const ::std::string& value) {
  set_has_procedure_body();
  procedure_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateProcedureStmtProto.procedure_body)
}
#if LANG_CXX11
inline void ResolvedCreateProcedureStmtProto::set_procedure_body(::std::string&& value) {
  set_has_procedure_body();
  procedure_body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedCreateProcedureStmtProto.procedure_body)
}
#endif
inline void ResolvedCreateProcedureStmtProto::set_procedure_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_procedure_body();
  procedure_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedCreateProcedureStmtProto.procedure_body)
}
inline void ResolvedCreateProcedureStmtProto::set_procedure_body(const char* value, size_t size) {
  set_has_procedure_body();
  procedure_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedCreateProcedureStmtProto.procedure_body)
}
inline ::std::string* ResolvedCreateProcedureStmtProto::mutable_procedure_body() {
  set_has_procedure_body();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateProcedureStmtProto.procedure_body)
  return procedure_body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedCreateProcedureStmtProto::release_procedure_body() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateProcedureStmtProto.procedure_body)
  if (!has_procedure_body()) {
    return NULL;
  }
  clear_has_procedure_body();
  return procedure_body_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedCreateProcedureStmtProto::set_allocated_procedure_body(::std::string* procedure_body) {
  if (procedure_body != NULL) {
    set_has_procedure_body();
  } else {
    clear_has_procedure_body();
  }
  procedure_body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), procedure_body);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateProcedureStmtProto.procedure_body)
}

// -------------------------------------------------------------------

// ResolvedExecuteImmediateArgumentProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedExecuteImmediateArgumentProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedExecuteImmediateArgumentProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedExecuteImmediateArgumentProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedExecuteImmediateArgumentProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedExecuteImmediateArgumentProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedExecuteImmediateArgumentProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExecuteImmediateArgumentProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedExecuteImmediateArgumentProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedExecuteImmediateArgumentProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedExecuteImmediateArgumentProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExecuteImmediateArgumentProto.parent)
  return parent_;
}
inline void ResolvedExecuteImmediateArgumentProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedExecuteImmediateArgumentProto.parent)
}

// optional string name = 2;
inline bool ResolvedExecuteImmediateArgumentProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedExecuteImmediateArgumentProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedExecuteImmediateArgumentProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedExecuteImmediateArgumentProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ResolvedExecuteImmediateArgumentProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExecuteImmediateArgumentProto.name)
  return name_.GetNoArena();
}
inline void ResolvedExecuteImmediateArgumentProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedExecuteImmediateArgumentProto.name)
}
#if LANG_CXX11
inline void ResolvedExecuteImmediateArgumentProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedExecuteImmediateArgumentProto.name)
}
#endif
inline void ResolvedExecuteImmediateArgumentProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedExecuteImmediateArgumentProto.name)
}
inline void ResolvedExecuteImmediateArgumentProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedExecuteImmediateArgumentProto.name)
}
inline ::std::string* ResolvedExecuteImmediateArgumentProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExecuteImmediateArgumentProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedExecuteImmediateArgumentProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedExecuteImmediateArgumentProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedExecuteImmediateArgumentProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedExecuteImmediateArgumentProto.name)
}

// optional .zetasql.AnyResolvedExprProto expression = 3;
inline bool ResolvedExecuteImmediateArgumentProto::has_expression() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedExecuteImmediateArgumentProto::set_has_expression() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedExecuteImmediateArgumentProto::clear_has_expression() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedExecuteImmediateArgumentProto::clear_expression() {
  if (expression_ != NULL) expression_->Clear();
  clear_has_expression();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedExecuteImmediateArgumentProto::_internal_expression() const {
  return *expression_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedExecuteImmediateArgumentProto::expression() const {
  const ::zetasql::AnyResolvedExprProto* p = expression_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExecuteImmediateArgumentProto.expression)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedExecuteImmediateArgumentProto::release_expression() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedExecuteImmediateArgumentProto.expression)
  clear_has_expression();
  ::zetasql::AnyResolvedExprProto* temp = expression_;
  expression_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedExecuteImmediateArgumentProto::mutable_expression() {
  set_has_expression();
  if (expression_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    expression_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExecuteImmediateArgumentProto.expression)
  return expression_;
}
inline void ResolvedExecuteImmediateArgumentProto::set_allocated_expression(::zetasql::AnyResolvedExprProto* expression) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete expression_;
  }
  if (expression) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expression = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    set_has_expression();
  } else {
    clear_has_expression();
  }
  expression_ = expression;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedExecuteImmediateArgumentProto.expression)
}

// -------------------------------------------------------------------

// ResolvedExecuteImmediateStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedExecuteImmediateStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedExecuteImmediateStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedExecuteImmediateStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedExecuteImmediateStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedExecuteImmediateStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedExecuteImmediateStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExecuteImmediateStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedExecuteImmediateStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedExecuteImmediateStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedExecuteImmediateStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExecuteImmediateStmtProto.parent)
  return parent_;
}
inline void ResolvedExecuteImmediateStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedExecuteImmediateStmtProto.parent)
}

// optional .zetasql.AnyResolvedExprProto sql = 2;
inline bool ResolvedExecuteImmediateStmtProto::has_sql() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedExecuteImmediateStmtProto::set_has_sql() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedExecuteImmediateStmtProto::clear_has_sql() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedExecuteImmediateStmtProto::clear_sql() {
  if (sql_ != NULL) sql_->Clear();
  clear_has_sql();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedExecuteImmediateStmtProto::_internal_sql() const {
  return *sql_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedExecuteImmediateStmtProto::sql() const {
  const ::zetasql::AnyResolvedExprProto* p = sql_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExecuteImmediateStmtProto.sql)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedExecuteImmediateStmtProto::release_sql() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedExecuteImmediateStmtProto.sql)
  clear_has_sql();
  ::zetasql::AnyResolvedExprProto* temp = sql_;
  sql_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedExecuteImmediateStmtProto::mutable_sql() {
  set_has_sql();
  if (sql_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    sql_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExecuteImmediateStmtProto.sql)
  return sql_;
}
inline void ResolvedExecuteImmediateStmtProto::set_allocated_sql(::zetasql::AnyResolvedExprProto* sql) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sql_;
  }
  if (sql) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sql = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sql, submessage_arena);
    }
    set_has_sql();
  } else {
    clear_has_sql();
  }
  sql_ = sql;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedExecuteImmediateStmtProto.sql)
}

// repeated string into_identifier_list = 3;
inline int ResolvedExecuteImmediateStmtProto::into_identifier_list_size() const {
  return into_identifier_list_.size();
}
inline void ResolvedExecuteImmediateStmtProto::clear_into_identifier_list() {
  into_identifier_list_.Clear();
}
inline const ::std::string& ResolvedExecuteImmediateStmtProto::into_identifier_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExecuteImmediateStmtProto.into_identifier_list)
  return into_identifier_list_.Get(index);
}
inline ::std::string* ResolvedExecuteImmediateStmtProto::mutable_into_identifier_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExecuteImmediateStmtProto.into_identifier_list)
  return into_identifier_list_.Mutable(index);
}
inline void ResolvedExecuteImmediateStmtProto::set_into_identifier_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedExecuteImmediateStmtProto.into_identifier_list)
  into_identifier_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedExecuteImmediateStmtProto::set_into_identifier_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedExecuteImmediateStmtProto.into_identifier_list)
  into_identifier_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedExecuteImmediateStmtProto::set_into_identifier_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  into_identifier_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedExecuteImmediateStmtProto.into_identifier_list)
}
inline void ResolvedExecuteImmediateStmtProto::set_into_identifier_list(int index, const char* value, size_t size) {
  into_identifier_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedExecuteImmediateStmtProto.into_identifier_list)
}
inline ::std::string* ResolvedExecuteImmediateStmtProto::add_into_identifier_list() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedExecuteImmediateStmtProto.into_identifier_list)
  return into_identifier_list_.Add();
}
inline void ResolvedExecuteImmediateStmtProto::add_into_identifier_list(const ::std::string& value) {
  into_identifier_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedExecuteImmediateStmtProto.into_identifier_list)
}
#if LANG_CXX11
inline void ResolvedExecuteImmediateStmtProto::add_into_identifier_list(::std::string&& value) {
  into_identifier_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedExecuteImmediateStmtProto.into_identifier_list)
}
#endif
inline void ResolvedExecuteImmediateStmtProto::add_into_identifier_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  into_identifier_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedExecuteImmediateStmtProto.into_identifier_list)
}
inline void ResolvedExecuteImmediateStmtProto::add_into_identifier_list(const char* value, size_t size) {
  into_identifier_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedExecuteImmediateStmtProto.into_identifier_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedExecuteImmediateStmtProto::into_identifier_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedExecuteImmediateStmtProto.into_identifier_list)
  return into_identifier_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedExecuteImmediateStmtProto::mutable_into_identifier_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedExecuteImmediateStmtProto.into_identifier_list)
  return &into_identifier_list_;
}

// repeated .zetasql.ResolvedExecuteImmediateArgumentProto using_argument_list = 4;
inline int ResolvedExecuteImmediateStmtProto::using_argument_list_size() const {
  return using_argument_list_.size();
}
inline void ResolvedExecuteImmediateStmtProto::clear_using_argument_list() {
  using_argument_list_.Clear();
}
inline ::zetasql::ResolvedExecuteImmediateArgumentProto* ResolvedExecuteImmediateStmtProto::mutable_using_argument_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedExecuteImmediateStmtProto.using_argument_list)
  return using_argument_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedExecuteImmediateArgumentProto >*
ResolvedExecuteImmediateStmtProto::mutable_using_argument_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedExecuteImmediateStmtProto.using_argument_list)
  return &using_argument_list_;
}
inline const ::zetasql::ResolvedExecuteImmediateArgumentProto& ResolvedExecuteImmediateStmtProto::using_argument_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedExecuteImmediateStmtProto.using_argument_list)
  return using_argument_list_.Get(index);
}
inline ::zetasql::ResolvedExecuteImmediateArgumentProto* ResolvedExecuteImmediateStmtProto::add_using_argument_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedExecuteImmediateStmtProto.using_argument_list)
  return using_argument_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedExecuteImmediateArgumentProto >&
ResolvedExecuteImmediateStmtProto::using_argument_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedExecuteImmediateStmtProto.using_argument_list)
  return using_argument_list_;
}

// -------------------------------------------------------------------

// ResolvedAssignmentStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedAssignmentStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAssignmentStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAssignmentStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAssignmentStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedAssignmentStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedAssignmentStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAssignmentStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedAssignmentStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAssignmentStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedAssignmentStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAssignmentStmtProto.parent)
  return parent_;
}
inline void ResolvedAssignmentStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAssignmentStmtProto.parent)
}

// optional .zetasql.AnyResolvedExprProto target = 2;
inline bool ResolvedAssignmentStmtProto::has_target() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedAssignmentStmtProto::set_has_target() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedAssignmentStmtProto::clear_has_target() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedAssignmentStmtProto::clear_target() {
  if (target_ != NULL) target_->Clear();
  clear_has_target();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedAssignmentStmtProto::_internal_target() const {
  return *target_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedAssignmentStmtProto::target() const {
  const ::zetasql::AnyResolvedExprProto* p = target_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAssignmentStmtProto.target)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedAssignmentStmtProto::release_target() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAssignmentStmtProto.target)
  clear_has_target();
  ::zetasql::AnyResolvedExprProto* temp = target_;
  target_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedAssignmentStmtProto::mutable_target() {
  set_has_target();
  if (target_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAssignmentStmtProto.target)
  return target_;
}
inline void ResolvedAssignmentStmtProto::set_allocated_target(::zetasql::AnyResolvedExprProto* target) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete target_;
  }
  if (target) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      target = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    set_has_target();
  } else {
    clear_has_target();
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAssignmentStmtProto.target)
}

// optional .zetasql.AnyResolvedExprProto expr = 3;
inline bool ResolvedAssignmentStmtProto::has_expr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedAssignmentStmtProto::set_has_expr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedAssignmentStmtProto::clear_has_expr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedAssignmentStmtProto::clear_expr() {
  if (expr_ != NULL) expr_->Clear();
  clear_has_expr();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedAssignmentStmtProto::_internal_expr() const {
  return *expr_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedAssignmentStmtProto::expr() const {
  const ::zetasql::AnyResolvedExprProto* p = expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAssignmentStmtProto.expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedAssignmentStmtProto::release_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAssignmentStmtProto.expr)
  clear_has_expr();
  ::zetasql::AnyResolvedExprProto* temp = expr_;
  expr_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedAssignmentStmtProto::mutable_expr() {
  set_has_expr();
  if (expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAssignmentStmtProto.expr)
  return expr_;
}
inline void ResolvedAssignmentStmtProto::set_allocated_expr(::zetasql::AnyResolvedExprProto* expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete expr_;
  }
  if (expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expr, submessage_arena);
    }
    set_has_expr();
  } else {
    clear_has_expr();
  }
  expr_ = expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAssignmentStmtProto.expr)
}

// -------------------------------------------------------------------

// ResolvedCreateEntityStmtProto

// optional .zetasql.ResolvedCreateStatementProto parent = 1;
inline bool ResolvedCreateEntityStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedCreateEntityStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedCreateEntityStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedCreateEntityStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedCreateStatementProto& ResolvedCreateEntityStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedCreateStatementProto& ResolvedCreateEntityStmtProto::parent() const {
  const ::zetasql::ResolvedCreateStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateEntityStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedCreateStatementProto*>(
      &::zetasql::_ResolvedCreateStatementProto_default_instance_);
}
inline ::zetasql::ResolvedCreateStatementProto* ResolvedCreateEntityStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateEntityStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedCreateStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedCreateStatementProto* ResolvedCreateEntityStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedCreateStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateEntityStmtProto.parent)
  return parent_;
}
inline void ResolvedCreateEntityStmtProto::set_allocated_parent(::zetasql::ResolvedCreateStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateEntityStmtProto.parent)
}

// optional string entity_type = 2;
inline bool ResolvedCreateEntityStmtProto::has_entity_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedCreateEntityStmtProto::set_has_entity_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedCreateEntityStmtProto::clear_has_entity_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedCreateEntityStmtProto::clear_entity_type() {
  entity_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entity_type();
}
inline const ::std::string& ResolvedCreateEntityStmtProto::entity_type() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateEntityStmtProto.entity_type)
  return entity_type_.GetNoArena();
}
inline void ResolvedCreateEntityStmtProto::set_entity_type(const ::std::string& value) {
  set_has_entity_type();
  entity_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateEntityStmtProto.entity_type)
}
#if LANG_CXX11
inline void ResolvedCreateEntityStmtProto::set_entity_type(::std::string&& value) {
  set_has_entity_type();
  entity_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedCreateEntityStmtProto.entity_type)
}
#endif
inline void ResolvedCreateEntityStmtProto::set_entity_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_entity_type();
  entity_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedCreateEntityStmtProto.entity_type)
}
inline void ResolvedCreateEntityStmtProto::set_entity_type(const char* value, size_t size) {
  set_has_entity_type();
  entity_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedCreateEntityStmtProto.entity_type)
}
inline ::std::string* ResolvedCreateEntityStmtProto::mutable_entity_type() {
  set_has_entity_type();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateEntityStmtProto.entity_type)
  return entity_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedCreateEntityStmtProto::release_entity_type() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateEntityStmtProto.entity_type)
  if (!has_entity_type()) {
    return NULL;
  }
  clear_has_entity_type();
  return entity_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedCreateEntityStmtProto::set_allocated_entity_type(::std::string* entity_type) {
  if (entity_type != NULL) {
    set_has_entity_type();
  } else {
    clear_has_entity_type();
  }
  entity_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entity_type);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateEntityStmtProto.entity_type)
}

// optional string entity_body_json = 3;
inline bool ResolvedCreateEntityStmtProto::has_entity_body_json() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedCreateEntityStmtProto::set_has_entity_body_json() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedCreateEntityStmtProto::clear_has_entity_body_json() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedCreateEntityStmtProto::clear_entity_body_json() {
  entity_body_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entity_body_json();
}
inline const ::std::string& ResolvedCreateEntityStmtProto::entity_body_json() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateEntityStmtProto.entity_body_json)
  return entity_body_json_.GetNoArena();
}
inline void ResolvedCreateEntityStmtProto::set_entity_body_json(const ::std::string& value) {
  set_has_entity_body_json();
  entity_body_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateEntityStmtProto.entity_body_json)
}
#if LANG_CXX11
inline void ResolvedCreateEntityStmtProto::set_entity_body_json(::std::string&& value) {
  set_has_entity_body_json();
  entity_body_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedCreateEntityStmtProto.entity_body_json)
}
#endif
inline void ResolvedCreateEntityStmtProto::set_entity_body_json(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_entity_body_json();
  entity_body_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedCreateEntityStmtProto.entity_body_json)
}
inline void ResolvedCreateEntityStmtProto::set_entity_body_json(const char* value, size_t size) {
  set_has_entity_body_json();
  entity_body_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedCreateEntityStmtProto.entity_body_json)
}
inline ::std::string* ResolvedCreateEntityStmtProto::mutable_entity_body_json() {
  set_has_entity_body_json();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateEntityStmtProto.entity_body_json)
  return entity_body_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedCreateEntityStmtProto::release_entity_body_json() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateEntityStmtProto.entity_body_json)
  if (!has_entity_body_json()) {
    return NULL;
  }
  clear_has_entity_body_json();
  return entity_body_json_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedCreateEntityStmtProto::set_allocated_entity_body_json(::std::string* entity_body_json) {
  if (entity_body_json != NULL) {
    set_has_entity_body_json();
  } else {
    clear_has_entity_body_json();
  }
  entity_body_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entity_body_json);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateEntityStmtProto.entity_body_json)
}

// optional string entity_body_text = 5;
inline bool ResolvedCreateEntityStmtProto::has_entity_body_text() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedCreateEntityStmtProto::set_has_entity_body_text() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedCreateEntityStmtProto::clear_has_entity_body_text() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedCreateEntityStmtProto::clear_entity_body_text() {
  entity_body_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entity_body_text();
}
inline const ::std::string& ResolvedCreateEntityStmtProto::entity_body_text() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateEntityStmtProto.entity_body_text)
  return entity_body_text_.GetNoArena();
}
inline void ResolvedCreateEntityStmtProto::set_entity_body_text(const ::std::string& value) {
  set_has_entity_body_text();
  entity_body_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCreateEntityStmtProto.entity_body_text)
}
#if LANG_CXX11
inline void ResolvedCreateEntityStmtProto::set_entity_body_text(::std::string&& value) {
  set_has_entity_body_text();
  entity_body_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedCreateEntityStmtProto.entity_body_text)
}
#endif
inline void ResolvedCreateEntityStmtProto::set_entity_body_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_entity_body_text();
  entity_body_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedCreateEntityStmtProto.entity_body_text)
}
inline void ResolvedCreateEntityStmtProto::set_entity_body_text(const char* value, size_t size) {
  set_has_entity_body_text();
  entity_body_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedCreateEntityStmtProto.entity_body_text)
}
inline ::std::string* ResolvedCreateEntityStmtProto::mutable_entity_body_text() {
  set_has_entity_body_text();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateEntityStmtProto.entity_body_text)
  return entity_body_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedCreateEntityStmtProto::release_entity_body_text() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCreateEntityStmtProto.entity_body_text)
  if (!has_entity_body_text()) {
    return NULL;
  }
  clear_has_entity_body_text();
  return entity_body_text_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedCreateEntityStmtProto::set_allocated_entity_body_text(::std::string* entity_body_text) {
  if (entity_body_text != NULL) {
    set_has_entity_body_text();
  } else {
    clear_has_entity_body_text();
  }
  entity_body_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entity_body_text);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCreateEntityStmtProto.entity_body_text)
}

// repeated .zetasql.ResolvedOptionProto option_list = 4;
inline int ResolvedCreateEntityStmtProto::option_list_size() const {
  return option_list_.size();
}
inline void ResolvedCreateEntityStmtProto::clear_option_list() {
  option_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedCreateEntityStmtProto::mutable_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCreateEntityStmtProto.option_list)
  return option_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedCreateEntityStmtProto::mutable_option_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCreateEntityStmtProto.option_list)
  return &option_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedCreateEntityStmtProto::option_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCreateEntityStmtProto.option_list)
  return option_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedCreateEntityStmtProto::add_option_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCreateEntityStmtProto.option_list)
  return option_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedCreateEntityStmtProto::option_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCreateEntityStmtProto.option_list)
  return option_list_;
}

// -------------------------------------------------------------------

// ResolvedAlterEntityStmtProto

// optional .zetasql.ResolvedAlterObjectStmtProto parent = 1;
inline bool ResolvedAlterEntityStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedAlterEntityStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedAlterEntityStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedAlterEntityStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedAlterObjectStmtProto& ResolvedAlterEntityStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedAlterObjectStmtProto& ResolvedAlterEntityStmtProto::parent() const {
  const ::zetasql::ResolvedAlterObjectStmtProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterEntityStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedAlterObjectStmtProto*>(
      &::zetasql::_ResolvedAlterObjectStmtProto_default_instance_);
}
inline ::zetasql::ResolvedAlterObjectStmtProto* ResolvedAlterEntityStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAlterEntityStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedAlterObjectStmtProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedAlterObjectStmtProto* ResolvedAlterEntityStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedAlterObjectStmtProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterEntityStmtProto.parent)
  return parent_;
}
inline void ResolvedAlterEntityStmtProto::set_allocated_parent(::zetasql::ResolvedAlterObjectStmtProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAlterEntityStmtProto.parent)
}

// optional string entity_type = 2;
inline bool ResolvedAlterEntityStmtProto::has_entity_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAlterEntityStmtProto::set_has_entity_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAlterEntityStmtProto::clear_has_entity_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAlterEntityStmtProto::clear_entity_type() {
  entity_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entity_type();
}
inline const ::std::string& ResolvedAlterEntityStmtProto::entity_type() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAlterEntityStmtProto.entity_type)
  return entity_type_.GetNoArena();
}
inline void ResolvedAlterEntityStmtProto::set_entity_type(const ::std::string& value) {
  set_has_entity_type();
  entity_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedAlterEntityStmtProto.entity_type)
}
#if LANG_CXX11
inline void ResolvedAlterEntityStmtProto::set_entity_type(::std::string&& value) {
  set_has_entity_type();
  entity_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedAlterEntityStmtProto.entity_type)
}
#endif
inline void ResolvedAlterEntityStmtProto::set_entity_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_entity_type();
  entity_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedAlterEntityStmtProto.entity_type)
}
inline void ResolvedAlterEntityStmtProto::set_entity_type(const char* value, size_t size) {
  set_has_entity_type();
  entity_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedAlterEntityStmtProto.entity_type)
}
inline ::std::string* ResolvedAlterEntityStmtProto::mutable_entity_type() {
  set_has_entity_type();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAlterEntityStmtProto.entity_type)
  return entity_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedAlterEntityStmtProto::release_entity_type() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAlterEntityStmtProto.entity_type)
  if (!has_entity_type()) {
    return NULL;
  }
  clear_has_entity_type();
  return entity_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedAlterEntityStmtProto::set_allocated_entity_type(::std::string* entity_type) {
  if (entity_type != NULL) {
    set_has_entity_type();
  } else {
    clear_has_entity_type();
  }
  entity_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entity_type);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAlterEntityStmtProto.entity_type)
}

// -------------------------------------------------------------------

// ResolvedPivotColumnProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedPivotColumnProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedPivotColumnProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedPivotColumnProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedPivotColumnProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedPivotColumnProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedPivotColumnProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedPivotColumnProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedPivotColumnProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedPivotColumnProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedPivotColumnProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedPivotColumnProto.parent)
  return parent_;
}
inline void ResolvedPivotColumnProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedPivotColumnProto.parent)
}

// optional .zetasql.ResolvedColumnProto column = 2;
inline bool ResolvedPivotColumnProto::has_column() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedPivotColumnProto::set_has_column() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedPivotColumnProto::clear_has_column() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedPivotColumnProto::_internal_column() const {
  return *column_;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedPivotColumnProto::column() const {
  const ::zetasql::ResolvedColumnProto* p = column_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedPivotColumnProto.column)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedColumnProto*>(
      &::zetasql::_ResolvedColumnProto_default_instance_);
}
inline ::zetasql::ResolvedColumnProto* ResolvedPivotColumnProto::release_column() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedPivotColumnProto.column)
  clear_has_column();
  ::zetasql::ResolvedColumnProto* temp = column_;
  column_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedColumnProto* ResolvedPivotColumnProto::mutable_column() {
  set_has_column();
  if (column_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedColumnProto>(GetArenaNoVirtual());
    column_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedPivotColumnProto.column)
  return column_;
}
inline void ResolvedPivotColumnProto::set_allocated_column(::zetasql::ResolvedColumnProto* column) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(column_);
  }
  if (column) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      column = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, column, submessage_arena);
    }
    set_has_column();
  } else {
    clear_has_column();
  }
  column_ = column;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedPivotColumnProto.column)
}

// optional int64 pivot_expr_index = 3;
inline bool ResolvedPivotColumnProto::has_pivot_expr_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedPivotColumnProto::set_has_pivot_expr_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedPivotColumnProto::clear_has_pivot_expr_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedPivotColumnProto::clear_pivot_expr_index() {
  pivot_expr_index_ = GOOGLE_LONGLONG(0);
  clear_has_pivot_expr_index();
}
inline ::google::protobuf::int64 ResolvedPivotColumnProto::pivot_expr_index() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedPivotColumnProto.pivot_expr_index)
  return pivot_expr_index_;
}
inline void ResolvedPivotColumnProto::set_pivot_expr_index(::google::protobuf::int64 value) {
  set_has_pivot_expr_index();
  pivot_expr_index_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedPivotColumnProto.pivot_expr_index)
}

// optional int64 pivot_value_index = 4;
inline bool ResolvedPivotColumnProto::has_pivot_value_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedPivotColumnProto::set_has_pivot_value_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedPivotColumnProto::clear_has_pivot_value_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedPivotColumnProto::clear_pivot_value_index() {
  pivot_value_index_ = GOOGLE_LONGLONG(0);
  clear_has_pivot_value_index();
}
inline ::google::protobuf::int64 ResolvedPivotColumnProto::pivot_value_index() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedPivotColumnProto.pivot_value_index)
  return pivot_value_index_;
}
inline void ResolvedPivotColumnProto::set_pivot_value_index(::google::protobuf::int64 value) {
  set_has_pivot_value_index();
  pivot_value_index_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedPivotColumnProto.pivot_value_index)
}

// -------------------------------------------------------------------

// ResolvedPivotScanProto

// optional .zetasql.ResolvedScanProto parent = 1;
inline bool ResolvedPivotScanProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedPivotScanProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedPivotScanProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedPivotScanProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedScanProto& ResolvedPivotScanProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedScanProto& ResolvedPivotScanProto::parent() const {
  const ::zetasql::ResolvedScanProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedPivotScanProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedScanProto*>(
      &::zetasql::_ResolvedScanProto_default_instance_);
}
inline ::zetasql::ResolvedScanProto* ResolvedPivotScanProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedPivotScanProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedScanProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedScanProto* ResolvedPivotScanProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedScanProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedPivotScanProto.parent)
  return parent_;
}
inline void ResolvedPivotScanProto::set_allocated_parent(::zetasql::ResolvedScanProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedPivotScanProto.parent)
}

// optional .zetasql.AnyResolvedScanProto input_scan = 2;
inline bool ResolvedPivotScanProto::has_input_scan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedPivotScanProto::set_has_input_scan() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedPivotScanProto::clear_has_input_scan() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedPivotScanProto::clear_input_scan() {
  if (input_scan_ != NULL) input_scan_->Clear();
  clear_has_input_scan();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedPivotScanProto::_internal_input_scan() const {
  return *input_scan_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedPivotScanProto::input_scan() const {
  const ::zetasql::AnyResolvedScanProto* p = input_scan_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedPivotScanProto.input_scan)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedPivotScanProto::release_input_scan() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedPivotScanProto.input_scan)
  clear_has_input_scan();
  ::zetasql::AnyResolvedScanProto* temp = input_scan_;
  input_scan_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedPivotScanProto::mutable_input_scan() {
  set_has_input_scan();
  if (input_scan_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    input_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedPivotScanProto.input_scan)
  return input_scan_;
}
inline void ResolvedPivotScanProto::set_allocated_input_scan(::zetasql::AnyResolvedScanProto* input_scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete input_scan_;
  }
  if (input_scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      input_scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input_scan, submessage_arena);
    }
    set_has_input_scan();
  } else {
    clear_has_input_scan();
  }
  input_scan_ = input_scan;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedPivotScanProto.input_scan)
}

// repeated .zetasql.ResolvedComputedColumnProto group_by_list = 3;
inline int ResolvedPivotScanProto::group_by_list_size() const {
  return group_by_list_.size();
}
inline void ResolvedPivotScanProto::clear_group_by_list() {
  group_by_list_.Clear();
}
inline ::zetasql::ResolvedComputedColumnProto* ResolvedPivotScanProto::mutable_group_by_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedPivotScanProto.group_by_list)
  return group_by_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >*
ResolvedPivotScanProto::mutable_group_by_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedPivotScanProto.group_by_list)
  return &group_by_list_;
}
inline const ::zetasql::ResolvedComputedColumnProto& ResolvedPivotScanProto::group_by_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedPivotScanProto.group_by_list)
  return group_by_list_.Get(index);
}
inline ::zetasql::ResolvedComputedColumnProto* ResolvedPivotScanProto::add_group_by_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedPivotScanProto.group_by_list)
  return group_by_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >&
ResolvedPivotScanProto::group_by_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedPivotScanProto.group_by_list)
  return group_by_list_;
}

// repeated .zetasql.AnyResolvedExprProto pivot_expr_list = 4;
inline int ResolvedPivotScanProto::pivot_expr_list_size() const {
  return pivot_expr_list_.size();
}
inline void ResolvedPivotScanProto::clear_pivot_expr_list() {
  pivot_expr_list_.Clear();
}
inline ::zetasql::AnyResolvedExprProto* ResolvedPivotScanProto::mutable_pivot_expr_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedPivotScanProto.pivot_expr_list)
  return pivot_expr_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
ResolvedPivotScanProto::mutable_pivot_expr_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedPivotScanProto.pivot_expr_list)
  return &pivot_expr_list_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedPivotScanProto::pivot_expr_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedPivotScanProto.pivot_expr_list)
  return pivot_expr_list_.Get(index);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedPivotScanProto::add_pivot_expr_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedPivotScanProto.pivot_expr_list)
  return pivot_expr_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
ResolvedPivotScanProto::pivot_expr_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedPivotScanProto.pivot_expr_list)
  return pivot_expr_list_;
}

// optional .zetasql.AnyResolvedExprProto for_expr = 5;
inline bool ResolvedPivotScanProto::has_for_expr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedPivotScanProto::set_has_for_expr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedPivotScanProto::clear_has_for_expr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedPivotScanProto::clear_for_expr() {
  if (for_expr_ != NULL) for_expr_->Clear();
  clear_has_for_expr();
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedPivotScanProto::_internal_for_expr() const {
  return *for_expr_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedPivotScanProto::for_expr() const {
  const ::zetasql::AnyResolvedExprProto* p = for_expr_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedPivotScanProto.for_expr)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedExprProto*>(
      &::zetasql::_AnyResolvedExprProto_default_instance_);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedPivotScanProto::release_for_expr() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedPivotScanProto.for_expr)
  clear_has_for_expr();
  ::zetasql::AnyResolvedExprProto* temp = for_expr_;
  for_expr_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedExprProto* ResolvedPivotScanProto::mutable_for_expr() {
  set_has_for_expr();
  if (for_expr_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedExprProto>(GetArenaNoVirtual());
    for_expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedPivotScanProto.for_expr)
  return for_expr_;
}
inline void ResolvedPivotScanProto::set_allocated_for_expr(::zetasql::AnyResolvedExprProto* for_expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete for_expr_;
  }
  if (for_expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      for_expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, for_expr, submessage_arena);
    }
    set_has_for_expr();
  } else {
    clear_has_for_expr();
  }
  for_expr_ = for_expr;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedPivotScanProto.for_expr)
}

// repeated .zetasql.AnyResolvedExprProto pivot_value_list = 6;
inline int ResolvedPivotScanProto::pivot_value_list_size() const {
  return pivot_value_list_.size();
}
inline void ResolvedPivotScanProto::clear_pivot_value_list() {
  pivot_value_list_.Clear();
}
inline ::zetasql::AnyResolvedExprProto* ResolvedPivotScanProto::mutable_pivot_value_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedPivotScanProto.pivot_value_list)
  return pivot_value_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
ResolvedPivotScanProto::mutable_pivot_value_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedPivotScanProto.pivot_value_list)
  return &pivot_value_list_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedPivotScanProto::pivot_value_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedPivotScanProto.pivot_value_list)
  return pivot_value_list_.Get(index);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedPivotScanProto::add_pivot_value_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedPivotScanProto.pivot_value_list)
  return pivot_value_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
ResolvedPivotScanProto::pivot_value_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedPivotScanProto.pivot_value_list)
  return pivot_value_list_;
}

// repeated .zetasql.ResolvedPivotColumnProto pivot_column_list = 7;
inline int ResolvedPivotScanProto::pivot_column_list_size() const {
  return pivot_column_list_.size();
}
inline void ResolvedPivotScanProto::clear_pivot_column_list() {
  pivot_column_list_.Clear();
}
inline ::zetasql::ResolvedPivotColumnProto* ResolvedPivotScanProto::mutable_pivot_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedPivotScanProto.pivot_column_list)
  return pivot_column_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedPivotColumnProto >*
ResolvedPivotScanProto::mutable_pivot_column_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedPivotScanProto.pivot_column_list)
  return &pivot_column_list_;
}
inline const ::zetasql::ResolvedPivotColumnProto& ResolvedPivotScanProto::pivot_column_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedPivotScanProto.pivot_column_list)
  return pivot_column_list_.Get(index);
}
inline ::zetasql::ResolvedPivotColumnProto* ResolvedPivotScanProto::add_pivot_column_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedPivotScanProto.pivot_column_list)
  return pivot_column_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedPivotColumnProto >&
ResolvedPivotScanProto::pivot_column_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedPivotScanProto.pivot_column_list)
  return pivot_column_list_;
}

// -------------------------------------------------------------------

// ResolvedReturningClauseProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedReturningClauseProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedReturningClauseProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedReturningClauseProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedReturningClauseProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedReturningClauseProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedReturningClauseProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedReturningClauseProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedReturningClauseProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedReturningClauseProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedReturningClauseProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedReturningClauseProto.parent)
  return parent_;
}
inline void ResolvedReturningClauseProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedReturningClauseProto.parent)
}

// repeated .zetasql.ResolvedOutputColumnProto output_column_list = 2;
inline int ResolvedReturningClauseProto::output_column_list_size() const {
  return output_column_list_.size();
}
inline void ResolvedReturningClauseProto::clear_output_column_list() {
  output_column_list_.Clear();
}
inline ::zetasql::ResolvedOutputColumnProto* ResolvedReturningClauseProto::mutable_output_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedReturningClauseProto.output_column_list)
  return output_column_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >*
ResolvedReturningClauseProto::mutable_output_column_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedReturningClauseProto.output_column_list)
  return &output_column_list_;
}
inline const ::zetasql::ResolvedOutputColumnProto& ResolvedReturningClauseProto::output_column_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedReturningClauseProto.output_column_list)
  return output_column_list_.Get(index);
}
inline ::zetasql::ResolvedOutputColumnProto* ResolvedReturningClauseProto::add_output_column_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedReturningClauseProto.output_column_list)
  return output_column_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >&
ResolvedReturningClauseProto::output_column_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedReturningClauseProto.output_column_list)
  return output_column_list_;
}

// optional .zetasql.ResolvedColumnHolderProto action_column = 3;
inline bool ResolvedReturningClauseProto::has_action_column() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedReturningClauseProto::set_has_action_column() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedReturningClauseProto::clear_has_action_column() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedReturningClauseProto::clear_action_column() {
  if (action_column_ != NULL) action_column_->Clear();
  clear_has_action_column();
}
inline const ::zetasql::ResolvedColumnHolderProto& ResolvedReturningClauseProto::_internal_action_column() const {
  return *action_column_;
}
inline const ::zetasql::ResolvedColumnHolderProto& ResolvedReturningClauseProto::action_column() const {
  const ::zetasql::ResolvedColumnHolderProto* p = action_column_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedReturningClauseProto.action_column)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedColumnHolderProto*>(
      &::zetasql::_ResolvedColumnHolderProto_default_instance_);
}
inline ::zetasql::ResolvedColumnHolderProto* ResolvedReturningClauseProto::release_action_column() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedReturningClauseProto.action_column)
  clear_has_action_column();
  ::zetasql::ResolvedColumnHolderProto* temp = action_column_;
  action_column_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedColumnHolderProto* ResolvedReturningClauseProto::mutable_action_column() {
  set_has_action_column();
  if (action_column_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedColumnHolderProto>(GetArenaNoVirtual());
    action_column_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedReturningClauseProto.action_column)
  return action_column_;
}
inline void ResolvedReturningClauseProto::set_allocated_action_column(::zetasql::ResolvedColumnHolderProto* action_column) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete action_column_;
  }
  if (action_column) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      action_column = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, action_column, submessage_arena);
    }
    set_has_action_column();
  } else {
    clear_has_action_column();
  }
  action_column_ = action_column;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedReturningClauseProto.action_column)
}

// repeated .zetasql.ResolvedComputedColumnProto expr_list = 4;
inline int ResolvedReturningClauseProto::expr_list_size() const {
  return expr_list_.size();
}
inline void ResolvedReturningClauseProto::clear_expr_list() {
  expr_list_.Clear();
}
inline ::zetasql::ResolvedComputedColumnProto* ResolvedReturningClauseProto::mutable_expr_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedReturningClauseProto.expr_list)
  return expr_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >*
ResolvedReturningClauseProto::mutable_expr_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedReturningClauseProto.expr_list)
  return &expr_list_;
}
inline const ::zetasql::ResolvedComputedColumnProto& ResolvedReturningClauseProto::expr_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedReturningClauseProto.expr_list)
  return expr_list_.Get(index);
}
inline ::zetasql::ResolvedComputedColumnProto* ResolvedReturningClauseProto::add_expr_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedReturningClauseProto.expr_list)
  return expr_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >&
ResolvedReturningClauseProto::expr_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedReturningClauseProto.expr_list)
  return expr_list_;
}

// -------------------------------------------------------------------

// ResolvedUnpivotArgProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedUnpivotArgProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedUnpivotArgProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedUnpivotArgProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedUnpivotArgProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedUnpivotArgProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedUnpivotArgProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUnpivotArgProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedUnpivotArgProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedUnpivotArgProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedUnpivotArgProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUnpivotArgProto.parent)
  return parent_;
}
inline void ResolvedUnpivotArgProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedUnpivotArgProto.parent)
}

// repeated .zetasql.ResolvedColumnRefProto column_list = 2;
inline int ResolvedUnpivotArgProto::column_list_size() const {
  return column_list_.size();
}
inline void ResolvedUnpivotArgProto::clear_column_list() {
  column_list_.Clear();
}
inline ::zetasql::ResolvedColumnRefProto* ResolvedUnpivotArgProto::mutable_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUnpivotArgProto.column_list)
  return column_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >*
ResolvedUnpivotArgProto::mutable_column_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedUnpivotArgProto.column_list)
  return &column_list_;
}
inline const ::zetasql::ResolvedColumnRefProto& ResolvedUnpivotArgProto::column_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUnpivotArgProto.column_list)
  return column_list_.Get(index);
}
inline ::zetasql::ResolvedColumnRefProto* ResolvedUnpivotArgProto::add_column_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedUnpivotArgProto.column_list)
  return column_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnRefProto >&
ResolvedUnpivotArgProto::column_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedUnpivotArgProto.column_list)
  return column_list_;
}

// -------------------------------------------------------------------

// ResolvedUnpivotScanProto

// optional .zetasql.ResolvedScanProto parent = 1;
inline bool ResolvedUnpivotScanProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedUnpivotScanProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedUnpivotScanProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedUnpivotScanProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedScanProto& ResolvedUnpivotScanProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedScanProto& ResolvedUnpivotScanProto::parent() const {
  const ::zetasql::ResolvedScanProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUnpivotScanProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedScanProto*>(
      &::zetasql::_ResolvedScanProto_default_instance_);
}
inline ::zetasql::ResolvedScanProto* ResolvedUnpivotScanProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedUnpivotScanProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedScanProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedScanProto* ResolvedUnpivotScanProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedScanProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUnpivotScanProto.parent)
  return parent_;
}
inline void ResolvedUnpivotScanProto::set_allocated_parent(::zetasql::ResolvedScanProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedUnpivotScanProto.parent)
}

// optional .zetasql.AnyResolvedScanProto input_scan = 2;
inline bool ResolvedUnpivotScanProto::has_input_scan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedUnpivotScanProto::set_has_input_scan() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedUnpivotScanProto::clear_has_input_scan() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedUnpivotScanProto::clear_input_scan() {
  if (input_scan_ != NULL) input_scan_->Clear();
  clear_has_input_scan();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedUnpivotScanProto::_internal_input_scan() const {
  return *input_scan_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedUnpivotScanProto::input_scan() const {
  const ::zetasql::AnyResolvedScanProto* p = input_scan_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUnpivotScanProto.input_scan)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedUnpivotScanProto::release_input_scan() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedUnpivotScanProto.input_scan)
  clear_has_input_scan();
  ::zetasql::AnyResolvedScanProto* temp = input_scan_;
  input_scan_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedUnpivotScanProto::mutable_input_scan() {
  set_has_input_scan();
  if (input_scan_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    input_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUnpivotScanProto.input_scan)
  return input_scan_;
}
inline void ResolvedUnpivotScanProto::set_allocated_input_scan(::zetasql::AnyResolvedScanProto* input_scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete input_scan_;
  }
  if (input_scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      input_scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input_scan, submessage_arena);
    }
    set_has_input_scan();
  } else {
    clear_has_input_scan();
  }
  input_scan_ = input_scan;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedUnpivotScanProto.input_scan)
}

// repeated .zetasql.ResolvedColumnProto value_column_list = 3;
inline int ResolvedUnpivotScanProto::value_column_list_size() const {
  return value_column_list_.size();
}
inline ::zetasql::ResolvedColumnProto* ResolvedUnpivotScanProto::mutable_value_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUnpivotScanProto.value_column_list)
  return value_column_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >*
ResolvedUnpivotScanProto::mutable_value_column_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedUnpivotScanProto.value_column_list)
  return &value_column_list_;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedUnpivotScanProto::value_column_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUnpivotScanProto.value_column_list)
  return value_column_list_.Get(index);
}
inline ::zetasql::ResolvedColumnProto* ResolvedUnpivotScanProto::add_value_column_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedUnpivotScanProto.value_column_list)
  return value_column_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >&
ResolvedUnpivotScanProto::value_column_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedUnpivotScanProto.value_column_list)
  return value_column_list_;
}

// optional .zetasql.ResolvedColumnProto label_column = 4;
inline bool ResolvedUnpivotScanProto::has_label_column() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedUnpivotScanProto::set_has_label_column() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedUnpivotScanProto::clear_has_label_column() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedUnpivotScanProto::_internal_label_column() const {
  return *label_column_;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedUnpivotScanProto::label_column() const {
  const ::zetasql::ResolvedColumnProto* p = label_column_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUnpivotScanProto.label_column)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedColumnProto*>(
      &::zetasql::_ResolvedColumnProto_default_instance_);
}
inline ::zetasql::ResolvedColumnProto* ResolvedUnpivotScanProto::release_label_column() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedUnpivotScanProto.label_column)
  clear_has_label_column();
  ::zetasql::ResolvedColumnProto* temp = label_column_;
  label_column_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedColumnProto* ResolvedUnpivotScanProto::mutable_label_column() {
  set_has_label_column();
  if (label_column_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedColumnProto>(GetArenaNoVirtual());
    label_column_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUnpivotScanProto.label_column)
  return label_column_;
}
inline void ResolvedUnpivotScanProto::set_allocated_label_column(::zetasql::ResolvedColumnProto* label_column) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(label_column_);
  }
  if (label_column) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      label_column = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, label_column, submessage_arena);
    }
    set_has_label_column();
  } else {
    clear_has_label_column();
  }
  label_column_ = label_column;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedUnpivotScanProto.label_column)
}

// repeated .zetasql.ResolvedLiteralProto label_list = 5;
inline int ResolvedUnpivotScanProto::label_list_size() const {
  return label_list_.size();
}
inline void ResolvedUnpivotScanProto::clear_label_list() {
  label_list_.Clear();
}
inline ::zetasql::ResolvedLiteralProto* ResolvedUnpivotScanProto::mutable_label_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUnpivotScanProto.label_list)
  return label_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedLiteralProto >*
ResolvedUnpivotScanProto::mutable_label_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedUnpivotScanProto.label_list)
  return &label_list_;
}
inline const ::zetasql::ResolvedLiteralProto& ResolvedUnpivotScanProto::label_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUnpivotScanProto.label_list)
  return label_list_.Get(index);
}
inline ::zetasql::ResolvedLiteralProto* ResolvedUnpivotScanProto::add_label_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedUnpivotScanProto.label_list)
  return label_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedLiteralProto >&
ResolvedUnpivotScanProto::label_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedUnpivotScanProto.label_list)
  return label_list_;
}

// repeated .zetasql.ResolvedUnpivotArgProto unpivot_arg_list = 6;
inline int ResolvedUnpivotScanProto::unpivot_arg_list_size() const {
  return unpivot_arg_list_.size();
}
inline void ResolvedUnpivotScanProto::clear_unpivot_arg_list() {
  unpivot_arg_list_.Clear();
}
inline ::zetasql::ResolvedUnpivotArgProto* ResolvedUnpivotScanProto::mutable_unpivot_arg_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUnpivotScanProto.unpivot_arg_list)
  return unpivot_arg_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUnpivotArgProto >*
ResolvedUnpivotScanProto::mutable_unpivot_arg_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedUnpivotScanProto.unpivot_arg_list)
  return &unpivot_arg_list_;
}
inline const ::zetasql::ResolvedUnpivotArgProto& ResolvedUnpivotScanProto::unpivot_arg_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUnpivotScanProto.unpivot_arg_list)
  return unpivot_arg_list_.Get(index);
}
inline ::zetasql::ResolvedUnpivotArgProto* ResolvedUnpivotScanProto::add_unpivot_arg_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedUnpivotScanProto.unpivot_arg_list)
  return unpivot_arg_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedUnpivotArgProto >&
ResolvedUnpivotScanProto::unpivot_arg_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedUnpivotScanProto.unpivot_arg_list)
  return unpivot_arg_list_;
}

// repeated .zetasql.ResolvedComputedColumnProto projected_input_column_list = 7;
inline int ResolvedUnpivotScanProto::projected_input_column_list_size() const {
  return projected_input_column_list_.size();
}
inline void ResolvedUnpivotScanProto::clear_projected_input_column_list() {
  projected_input_column_list_.Clear();
}
inline ::zetasql::ResolvedComputedColumnProto* ResolvedUnpivotScanProto::mutable_projected_input_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedUnpivotScanProto.projected_input_column_list)
  return projected_input_column_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >*
ResolvedUnpivotScanProto::mutable_projected_input_column_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedUnpivotScanProto.projected_input_column_list)
  return &projected_input_column_list_;
}
inline const ::zetasql::ResolvedComputedColumnProto& ResolvedUnpivotScanProto::projected_input_column_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUnpivotScanProto.projected_input_column_list)
  return projected_input_column_list_.Get(index);
}
inline ::zetasql::ResolvedComputedColumnProto* ResolvedUnpivotScanProto::add_projected_input_column_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedUnpivotScanProto.projected_input_column_list)
  return projected_input_column_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedComputedColumnProto >&
ResolvedUnpivotScanProto::projected_input_column_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedUnpivotScanProto.projected_input_column_list)
  return projected_input_column_list_;
}

// optional bool include_nulls = 8;
inline bool ResolvedUnpivotScanProto::has_include_nulls() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedUnpivotScanProto::set_has_include_nulls() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedUnpivotScanProto::clear_has_include_nulls() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedUnpivotScanProto::clear_include_nulls() {
  include_nulls_ = false;
  clear_has_include_nulls();
}
inline bool ResolvedUnpivotScanProto::include_nulls() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedUnpivotScanProto.include_nulls)
  return include_nulls_;
}
inline void ResolvedUnpivotScanProto::set_include_nulls(bool value) {
  set_has_include_nulls();
  include_nulls_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedUnpivotScanProto.include_nulls)
}

// -------------------------------------------------------------------

// ResolvedCloneDataStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedCloneDataStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedCloneDataStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedCloneDataStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedCloneDataStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedCloneDataStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedCloneDataStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCloneDataStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedCloneDataStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCloneDataStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedCloneDataStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCloneDataStmtProto.parent)
  return parent_;
}
inline void ResolvedCloneDataStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCloneDataStmtProto.parent)
}

// optional .zetasql.ResolvedTableScanProto target_table = 2;
inline bool ResolvedCloneDataStmtProto::has_target_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedCloneDataStmtProto::set_has_target_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedCloneDataStmtProto::clear_has_target_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedCloneDataStmtProto::clear_target_table() {
  if (target_table_ != NULL) target_table_->Clear();
  clear_has_target_table();
}
inline const ::zetasql::ResolvedTableScanProto& ResolvedCloneDataStmtProto::_internal_target_table() const {
  return *target_table_;
}
inline const ::zetasql::ResolvedTableScanProto& ResolvedCloneDataStmtProto::target_table() const {
  const ::zetasql::ResolvedTableScanProto* p = target_table_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCloneDataStmtProto.target_table)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedTableScanProto*>(
      &::zetasql::_ResolvedTableScanProto_default_instance_);
}
inline ::zetasql::ResolvedTableScanProto* ResolvedCloneDataStmtProto::release_target_table() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCloneDataStmtProto.target_table)
  clear_has_target_table();
  ::zetasql::ResolvedTableScanProto* temp = target_table_;
  target_table_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedTableScanProto* ResolvedCloneDataStmtProto::mutable_target_table() {
  set_has_target_table();
  if (target_table_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedTableScanProto>(GetArenaNoVirtual());
    target_table_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCloneDataStmtProto.target_table)
  return target_table_;
}
inline void ResolvedCloneDataStmtProto::set_allocated_target_table(::zetasql::ResolvedTableScanProto* target_table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete target_table_;
  }
  if (target_table) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      target_table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target_table, submessage_arena);
    }
    set_has_target_table();
  } else {
    clear_has_target_table();
  }
  target_table_ = target_table;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCloneDataStmtProto.target_table)
}

// optional .zetasql.AnyResolvedScanProto clone_from = 3;
inline bool ResolvedCloneDataStmtProto::has_clone_from() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedCloneDataStmtProto::set_has_clone_from() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedCloneDataStmtProto::clear_has_clone_from() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedCloneDataStmtProto::clear_clone_from() {
  if (clone_from_ != NULL) clone_from_->Clear();
  clear_has_clone_from();
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedCloneDataStmtProto::_internal_clone_from() const {
  return *clone_from_;
}
inline const ::zetasql::AnyResolvedScanProto& ResolvedCloneDataStmtProto::clone_from() const {
  const ::zetasql::AnyResolvedScanProto* p = clone_from_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCloneDataStmtProto.clone_from)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnyResolvedScanProto*>(
      &::zetasql::_AnyResolvedScanProto_default_instance_);
}
inline ::zetasql::AnyResolvedScanProto* ResolvedCloneDataStmtProto::release_clone_from() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCloneDataStmtProto.clone_from)
  clear_has_clone_from();
  ::zetasql::AnyResolvedScanProto* temp = clone_from_;
  clone_from_ = NULL;
  return temp;
}
inline ::zetasql::AnyResolvedScanProto* ResolvedCloneDataStmtProto::mutable_clone_from() {
  set_has_clone_from();
  if (clone_from_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnyResolvedScanProto>(GetArenaNoVirtual());
    clone_from_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCloneDataStmtProto.clone_from)
  return clone_from_;
}
inline void ResolvedCloneDataStmtProto::set_allocated_clone_from(::zetasql::AnyResolvedScanProto* clone_from) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete clone_from_;
  }
  if (clone_from) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      clone_from = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, clone_from, submessage_arena);
    }
    set_has_clone_from();
  } else {
    clear_has_clone_from();
  }
  clone_from_ = clone_from;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCloneDataStmtProto.clone_from)
}

// -------------------------------------------------------------------

// ResolvedTableAndColumnInfoProto

// optional .zetasql.ResolvedArgumentProto parent = 1;
inline bool ResolvedTableAndColumnInfoProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedTableAndColumnInfoProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedTableAndColumnInfoProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedTableAndColumnInfoProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedTableAndColumnInfoProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedArgumentProto& ResolvedTableAndColumnInfoProto::parent() const {
  const ::zetasql::ResolvedArgumentProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedTableAndColumnInfoProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedArgumentProto*>(
      &::zetasql::_ResolvedArgumentProto_default_instance_);
}
inline ::zetasql::ResolvedArgumentProto* ResolvedTableAndColumnInfoProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedTableAndColumnInfoProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedArgumentProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedArgumentProto* ResolvedTableAndColumnInfoProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedArgumentProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedTableAndColumnInfoProto.parent)
  return parent_;
}
inline void ResolvedTableAndColumnInfoProto::set_allocated_parent(::zetasql::ResolvedArgumentProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedTableAndColumnInfoProto.parent)
}

// optional .zetasql.TableRefProto table = 2;
inline bool ResolvedTableAndColumnInfoProto::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedTableAndColumnInfoProto::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedTableAndColumnInfoProto::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::TableRefProto& ResolvedTableAndColumnInfoProto::_internal_table() const {
  return *table_;
}
inline const ::zetasql::TableRefProto& ResolvedTableAndColumnInfoProto::table() const {
  const ::zetasql::TableRefProto* p = table_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedTableAndColumnInfoProto.table)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TableRefProto*>(
      &::zetasql::_TableRefProto_default_instance_);
}
inline ::zetasql::TableRefProto* ResolvedTableAndColumnInfoProto::release_table() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedTableAndColumnInfoProto.table)
  clear_has_table();
  ::zetasql::TableRefProto* temp = table_;
  table_ = NULL;
  return temp;
}
inline ::zetasql::TableRefProto* ResolvedTableAndColumnInfoProto::mutable_table() {
  set_has_table();
  if (table_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TableRefProto>(GetArenaNoVirtual());
    table_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedTableAndColumnInfoProto.table)
  return table_;
}
inline void ResolvedTableAndColumnInfoProto::set_allocated_table(::zetasql::TableRefProto* table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(table_);
  }
  if (table) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    set_has_table();
  } else {
    clear_has_table();
  }
  table_ = table;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedTableAndColumnInfoProto.table)
}

// repeated int64 column_index_list = 3;
inline int ResolvedTableAndColumnInfoProto::column_index_list_size() const {
  return column_index_list_.size();
}
inline void ResolvedTableAndColumnInfoProto::clear_column_index_list() {
  column_index_list_.Clear();
}
inline ::google::protobuf::int64 ResolvedTableAndColumnInfoProto::column_index_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedTableAndColumnInfoProto.column_index_list)
  return column_index_list_.Get(index);
}
inline void ResolvedTableAndColumnInfoProto::set_column_index_list(int index, ::google::protobuf::int64 value) {
  column_index_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedTableAndColumnInfoProto.column_index_list)
}
inline void ResolvedTableAndColumnInfoProto::add_column_index_list(::google::protobuf::int64 value) {
  column_index_list_.Add(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedTableAndColumnInfoProto.column_index_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ResolvedTableAndColumnInfoProto::column_index_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedTableAndColumnInfoProto.column_index_list)
  return column_index_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ResolvedTableAndColumnInfoProto::mutable_column_index_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedTableAndColumnInfoProto.column_index_list)
  return &column_index_list_;
}

// -------------------------------------------------------------------

// ResolvedAnalyzeStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedAnalyzeStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAnalyzeStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAnalyzeStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAnalyzeStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedAnalyzeStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedAnalyzeStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAnalyzeStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedAnalyzeStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAnalyzeStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedAnalyzeStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAnalyzeStmtProto.parent)
  return parent_;
}
inline void ResolvedAnalyzeStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAnalyzeStmtProto.parent)
}

// repeated .zetasql.ResolvedOptionProto option_list = 2;
inline int ResolvedAnalyzeStmtProto::option_list_size() const {
  return option_list_.size();
}
inline void ResolvedAnalyzeStmtProto::clear_option_list() {
  option_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedAnalyzeStmtProto::mutable_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAnalyzeStmtProto.option_list)
  return option_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedAnalyzeStmtProto::mutable_option_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedAnalyzeStmtProto.option_list)
  return &option_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedAnalyzeStmtProto::option_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAnalyzeStmtProto.option_list)
  return option_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedAnalyzeStmtProto::add_option_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAnalyzeStmtProto.option_list)
  return option_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedAnalyzeStmtProto::option_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedAnalyzeStmtProto.option_list)
  return option_list_;
}

// repeated .zetasql.ResolvedTableAndColumnInfoProto table_and_column_index_list = 3;
inline int ResolvedAnalyzeStmtProto::table_and_column_index_list_size() const {
  return table_and_column_index_list_.size();
}
inline void ResolvedAnalyzeStmtProto::clear_table_and_column_index_list() {
  table_and_column_index_list_.Clear();
}
inline ::zetasql::ResolvedTableAndColumnInfoProto* ResolvedAnalyzeStmtProto::mutable_table_and_column_index_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAnalyzeStmtProto.table_and_column_index_list)
  return table_and_column_index_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedTableAndColumnInfoProto >*
ResolvedAnalyzeStmtProto::mutable_table_and_column_index_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedAnalyzeStmtProto.table_and_column_index_list)
  return &table_and_column_index_list_;
}
inline const ::zetasql::ResolvedTableAndColumnInfoProto& ResolvedAnalyzeStmtProto::table_and_column_index_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAnalyzeStmtProto.table_and_column_index_list)
  return table_and_column_index_list_.Get(index);
}
inline ::zetasql::ResolvedTableAndColumnInfoProto* ResolvedAnalyzeStmtProto::add_table_and_column_index_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAnalyzeStmtProto.table_and_column_index_list)
  return table_and_column_index_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedTableAndColumnInfoProto >&
ResolvedAnalyzeStmtProto::table_and_column_index_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedAnalyzeStmtProto.table_and_column_index_list)
  return table_and_column_index_list_;
}

// -------------------------------------------------------------------

// ResolvedAuxLoadDataStmtProto

// optional .zetasql.ResolvedStatementProto parent = 1;
inline bool ResolvedAuxLoadDataStmtProto::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedAuxLoadDataStmtProto::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedAuxLoadDataStmtProto::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedAuxLoadDataStmtProto::clear_parent() {
  if (parent_ != NULL) parent_->Clear();
  clear_has_parent();
}
inline const ::zetasql::ResolvedStatementProto& ResolvedAuxLoadDataStmtProto::_internal_parent() const {
  return *parent_;
}
inline const ::zetasql::ResolvedStatementProto& ResolvedAuxLoadDataStmtProto::parent() const {
  const ::zetasql::ResolvedStatementProto* p = parent_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAuxLoadDataStmtProto.parent)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedStatementProto*>(
      &::zetasql::_ResolvedStatementProto_default_instance_);
}
inline ::zetasql::ResolvedStatementProto* ResolvedAuxLoadDataStmtProto::release_parent() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAuxLoadDataStmtProto.parent)
  clear_has_parent();
  ::zetasql::ResolvedStatementProto* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedStatementProto* ResolvedAuxLoadDataStmtProto::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedStatementProto>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAuxLoadDataStmtProto.parent)
  return parent_;
}
inline void ResolvedAuxLoadDataStmtProto::set_allocated_parent(::zetasql::ResolvedStatementProto* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAuxLoadDataStmtProto.parent)
}

// optional .zetasql.ResolvedAuxLoadDataStmtEnums.InsertionMode insertion_mode = 2;
inline bool ResolvedAuxLoadDataStmtProto::has_insertion_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResolvedAuxLoadDataStmtProto::set_has_insertion_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResolvedAuxLoadDataStmtProto::clear_has_insertion_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResolvedAuxLoadDataStmtProto::clear_insertion_mode() {
  insertion_mode_ = 0;
  clear_has_insertion_mode();
}
inline ::zetasql::ResolvedAuxLoadDataStmtEnums_InsertionMode ResolvedAuxLoadDataStmtProto::insertion_mode() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAuxLoadDataStmtProto.insertion_mode)
  return static_cast< ::zetasql::ResolvedAuxLoadDataStmtEnums_InsertionMode >(insertion_mode_);
}
inline void ResolvedAuxLoadDataStmtProto::set_insertion_mode(::zetasql::ResolvedAuxLoadDataStmtEnums_InsertionMode value) {
  assert(::zetasql::ResolvedAuxLoadDataStmtEnums_InsertionMode_IsValid(value));
  set_has_insertion_mode();
  insertion_mode_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedAuxLoadDataStmtProto.insertion_mode)
}

// repeated string name_path = 3;
inline int ResolvedAuxLoadDataStmtProto::name_path_size() const {
  return name_path_.size();
}
inline void ResolvedAuxLoadDataStmtProto::clear_name_path() {
  name_path_.Clear();
}
inline const ::std::string& ResolvedAuxLoadDataStmtProto::name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAuxLoadDataStmtProto.name_path)
  return name_path_.Get(index);
}
inline ::std::string* ResolvedAuxLoadDataStmtProto::mutable_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAuxLoadDataStmtProto.name_path)
  return name_path_.Mutable(index);
}
inline void ResolvedAuxLoadDataStmtProto::set_name_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedAuxLoadDataStmtProto.name_path)
  name_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResolvedAuxLoadDataStmtProto::set_name_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ResolvedAuxLoadDataStmtProto.name_path)
  name_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResolvedAuxLoadDataStmtProto::set_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedAuxLoadDataStmtProto.name_path)
}
inline void ResolvedAuxLoadDataStmtProto::set_name_path(int index, const char* value, size_t size) {
  name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedAuxLoadDataStmtProto.name_path)
}
inline ::std::string* ResolvedAuxLoadDataStmtProto::add_name_path() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ResolvedAuxLoadDataStmtProto.name_path)
  return name_path_.Add();
}
inline void ResolvedAuxLoadDataStmtProto::add_name_path(const ::std::string& value) {
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAuxLoadDataStmtProto.name_path)
}
#if LANG_CXX11
inline void ResolvedAuxLoadDataStmtProto::add_name_path(::std::string&& value) {
  name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAuxLoadDataStmtProto.name_path)
}
#endif
inline void ResolvedAuxLoadDataStmtProto::add_name_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ResolvedAuxLoadDataStmtProto.name_path)
}
inline void ResolvedAuxLoadDataStmtProto::add_name_path(const char* value, size_t size) {
  name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ResolvedAuxLoadDataStmtProto.name_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolvedAuxLoadDataStmtProto::name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedAuxLoadDataStmtProto.name_path)
  return name_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolvedAuxLoadDataStmtProto::mutable_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedAuxLoadDataStmtProto.name_path)
  return &name_path_;
}

// repeated .zetasql.ResolvedOutputColumnProto output_column_list = 4;
inline int ResolvedAuxLoadDataStmtProto::output_column_list_size() const {
  return output_column_list_.size();
}
inline void ResolvedAuxLoadDataStmtProto::clear_output_column_list() {
  output_column_list_.Clear();
}
inline ::zetasql::ResolvedOutputColumnProto* ResolvedAuxLoadDataStmtProto::mutable_output_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAuxLoadDataStmtProto.output_column_list)
  return output_column_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >*
ResolvedAuxLoadDataStmtProto::mutable_output_column_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedAuxLoadDataStmtProto.output_column_list)
  return &output_column_list_;
}
inline const ::zetasql::ResolvedOutputColumnProto& ResolvedAuxLoadDataStmtProto::output_column_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAuxLoadDataStmtProto.output_column_list)
  return output_column_list_.Get(index);
}
inline ::zetasql::ResolvedOutputColumnProto* ResolvedAuxLoadDataStmtProto::add_output_column_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAuxLoadDataStmtProto.output_column_list)
  return output_column_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOutputColumnProto >&
ResolvedAuxLoadDataStmtProto::output_column_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedAuxLoadDataStmtProto.output_column_list)
  return output_column_list_;
}

// repeated .zetasql.ResolvedColumnDefinitionProto column_definition_list = 5;
inline int ResolvedAuxLoadDataStmtProto::column_definition_list_size() const {
  return column_definition_list_.size();
}
inline void ResolvedAuxLoadDataStmtProto::clear_column_definition_list() {
  column_definition_list_.Clear();
}
inline ::zetasql::ResolvedColumnDefinitionProto* ResolvedAuxLoadDataStmtProto::mutable_column_definition_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAuxLoadDataStmtProto.column_definition_list)
  return column_definition_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnDefinitionProto >*
ResolvedAuxLoadDataStmtProto::mutable_column_definition_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedAuxLoadDataStmtProto.column_definition_list)
  return &column_definition_list_;
}
inline const ::zetasql::ResolvedColumnDefinitionProto& ResolvedAuxLoadDataStmtProto::column_definition_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAuxLoadDataStmtProto.column_definition_list)
  return column_definition_list_.Get(index);
}
inline ::zetasql::ResolvedColumnDefinitionProto* ResolvedAuxLoadDataStmtProto::add_column_definition_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAuxLoadDataStmtProto.column_definition_list)
  return column_definition_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnDefinitionProto >&
ResolvedAuxLoadDataStmtProto::column_definition_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedAuxLoadDataStmtProto.column_definition_list)
  return column_definition_list_;
}

// repeated .zetasql.ResolvedColumnProto pseudo_column_list = 6;
inline int ResolvedAuxLoadDataStmtProto::pseudo_column_list_size() const {
  return pseudo_column_list_.size();
}
inline ::zetasql::ResolvedColumnProto* ResolvedAuxLoadDataStmtProto::mutable_pseudo_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAuxLoadDataStmtProto.pseudo_column_list)
  return pseudo_column_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >*
ResolvedAuxLoadDataStmtProto::mutable_pseudo_column_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedAuxLoadDataStmtProto.pseudo_column_list)
  return &pseudo_column_list_;
}
inline const ::zetasql::ResolvedColumnProto& ResolvedAuxLoadDataStmtProto::pseudo_column_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAuxLoadDataStmtProto.pseudo_column_list)
  return pseudo_column_list_.Get(index);
}
inline ::zetasql::ResolvedColumnProto* ResolvedAuxLoadDataStmtProto::add_pseudo_column_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAuxLoadDataStmtProto.pseudo_column_list)
  return pseudo_column_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedColumnProto >&
ResolvedAuxLoadDataStmtProto::pseudo_column_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedAuxLoadDataStmtProto.pseudo_column_list)
  return pseudo_column_list_;
}

// optional .zetasql.ResolvedPrimaryKeyProto primary_key = 7;
inline bool ResolvedAuxLoadDataStmtProto::has_primary_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedAuxLoadDataStmtProto::set_has_primary_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedAuxLoadDataStmtProto::clear_has_primary_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedAuxLoadDataStmtProto::clear_primary_key() {
  if (primary_key_ != NULL) primary_key_->Clear();
  clear_has_primary_key();
}
inline const ::zetasql::ResolvedPrimaryKeyProto& ResolvedAuxLoadDataStmtProto::_internal_primary_key() const {
  return *primary_key_;
}
inline const ::zetasql::ResolvedPrimaryKeyProto& ResolvedAuxLoadDataStmtProto::primary_key() const {
  const ::zetasql::ResolvedPrimaryKeyProto* p = primary_key_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAuxLoadDataStmtProto.primary_key)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedPrimaryKeyProto*>(
      &::zetasql::_ResolvedPrimaryKeyProto_default_instance_);
}
inline ::zetasql::ResolvedPrimaryKeyProto* ResolvedAuxLoadDataStmtProto::release_primary_key() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAuxLoadDataStmtProto.primary_key)
  clear_has_primary_key();
  ::zetasql::ResolvedPrimaryKeyProto* temp = primary_key_;
  primary_key_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedPrimaryKeyProto* ResolvedAuxLoadDataStmtProto::mutable_primary_key() {
  set_has_primary_key();
  if (primary_key_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedPrimaryKeyProto>(GetArenaNoVirtual());
    primary_key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAuxLoadDataStmtProto.primary_key)
  return primary_key_;
}
inline void ResolvedAuxLoadDataStmtProto::set_allocated_primary_key(::zetasql::ResolvedPrimaryKeyProto* primary_key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete primary_key_;
  }
  if (primary_key) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      primary_key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, primary_key, submessage_arena);
    }
    set_has_primary_key();
  } else {
    clear_has_primary_key();
  }
  primary_key_ = primary_key;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAuxLoadDataStmtProto.primary_key)
}

// repeated .zetasql.ResolvedForeignKeyProto foreign_key_list = 8;
inline int ResolvedAuxLoadDataStmtProto::foreign_key_list_size() const {
  return foreign_key_list_.size();
}
inline void ResolvedAuxLoadDataStmtProto::clear_foreign_key_list() {
  foreign_key_list_.Clear();
}
inline ::zetasql::ResolvedForeignKeyProto* ResolvedAuxLoadDataStmtProto::mutable_foreign_key_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAuxLoadDataStmtProto.foreign_key_list)
  return foreign_key_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedForeignKeyProto >*
ResolvedAuxLoadDataStmtProto::mutable_foreign_key_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedAuxLoadDataStmtProto.foreign_key_list)
  return &foreign_key_list_;
}
inline const ::zetasql::ResolvedForeignKeyProto& ResolvedAuxLoadDataStmtProto::foreign_key_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAuxLoadDataStmtProto.foreign_key_list)
  return foreign_key_list_.Get(index);
}
inline ::zetasql::ResolvedForeignKeyProto* ResolvedAuxLoadDataStmtProto::add_foreign_key_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAuxLoadDataStmtProto.foreign_key_list)
  return foreign_key_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedForeignKeyProto >&
ResolvedAuxLoadDataStmtProto::foreign_key_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedAuxLoadDataStmtProto.foreign_key_list)
  return foreign_key_list_;
}

// repeated .zetasql.ResolvedCheckConstraintProto check_constraint_list = 9;
inline int ResolvedAuxLoadDataStmtProto::check_constraint_list_size() const {
  return check_constraint_list_.size();
}
inline void ResolvedAuxLoadDataStmtProto::clear_check_constraint_list() {
  check_constraint_list_.Clear();
}
inline ::zetasql::ResolvedCheckConstraintProto* ResolvedAuxLoadDataStmtProto::mutable_check_constraint_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAuxLoadDataStmtProto.check_constraint_list)
  return check_constraint_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedCheckConstraintProto >*
ResolvedAuxLoadDataStmtProto::mutable_check_constraint_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedAuxLoadDataStmtProto.check_constraint_list)
  return &check_constraint_list_;
}
inline const ::zetasql::ResolvedCheckConstraintProto& ResolvedAuxLoadDataStmtProto::check_constraint_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAuxLoadDataStmtProto.check_constraint_list)
  return check_constraint_list_.Get(index);
}
inline ::zetasql::ResolvedCheckConstraintProto* ResolvedAuxLoadDataStmtProto::add_check_constraint_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAuxLoadDataStmtProto.check_constraint_list)
  return check_constraint_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedCheckConstraintProto >&
ResolvedAuxLoadDataStmtProto::check_constraint_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedAuxLoadDataStmtProto.check_constraint_list)
  return check_constraint_list_;
}

// repeated .zetasql.AnyResolvedExprProto partition_by_list = 10;
inline int ResolvedAuxLoadDataStmtProto::partition_by_list_size() const {
  return partition_by_list_.size();
}
inline void ResolvedAuxLoadDataStmtProto::clear_partition_by_list() {
  partition_by_list_.Clear();
}
inline ::zetasql::AnyResolvedExprProto* ResolvedAuxLoadDataStmtProto::mutable_partition_by_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAuxLoadDataStmtProto.partition_by_list)
  return partition_by_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
ResolvedAuxLoadDataStmtProto::mutable_partition_by_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedAuxLoadDataStmtProto.partition_by_list)
  return &partition_by_list_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedAuxLoadDataStmtProto::partition_by_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAuxLoadDataStmtProto.partition_by_list)
  return partition_by_list_.Get(index);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedAuxLoadDataStmtProto::add_partition_by_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAuxLoadDataStmtProto.partition_by_list)
  return partition_by_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
ResolvedAuxLoadDataStmtProto::partition_by_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedAuxLoadDataStmtProto.partition_by_list)
  return partition_by_list_;
}

// repeated .zetasql.AnyResolvedExprProto cluster_by_list = 11;
inline int ResolvedAuxLoadDataStmtProto::cluster_by_list_size() const {
  return cluster_by_list_.size();
}
inline void ResolvedAuxLoadDataStmtProto::clear_cluster_by_list() {
  cluster_by_list_.Clear();
}
inline ::zetasql::AnyResolvedExprProto* ResolvedAuxLoadDataStmtProto::mutable_cluster_by_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAuxLoadDataStmtProto.cluster_by_list)
  return cluster_by_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >*
ResolvedAuxLoadDataStmtProto::mutable_cluster_by_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedAuxLoadDataStmtProto.cluster_by_list)
  return &cluster_by_list_;
}
inline const ::zetasql::AnyResolvedExprProto& ResolvedAuxLoadDataStmtProto::cluster_by_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAuxLoadDataStmtProto.cluster_by_list)
  return cluster_by_list_.Get(index);
}
inline ::zetasql::AnyResolvedExprProto* ResolvedAuxLoadDataStmtProto::add_cluster_by_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAuxLoadDataStmtProto.cluster_by_list)
  return cluster_by_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::AnyResolvedExprProto >&
ResolvedAuxLoadDataStmtProto::cluster_by_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedAuxLoadDataStmtProto.cluster_by_list)
  return cluster_by_list_;
}

// repeated .zetasql.ResolvedOptionProto option_list = 12;
inline int ResolvedAuxLoadDataStmtProto::option_list_size() const {
  return option_list_.size();
}
inline void ResolvedAuxLoadDataStmtProto::clear_option_list() {
  option_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedAuxLoadDataStmtProto::mutable_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAuxLoadDataStmtProto.option_list)
  return option_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedAuxLoadDataStmtProto::mutable_option_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedAuxLoadDataStmtProto.option_list)
  return &option_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedAuxLoadDataStmtProto::option_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAuxLoadDataStmtProto.option_list)
  return option_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedAuxLoadDataStmtProto::add_option_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAuxLoadDataStmtProto.option_list)
  return option_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedAuxLoadDataStmtProto::option_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedAuxLoadDataStmtProto.option_list)
  return option_list_;
}

// optional .zetasql.ResolvedWithPartitionColumnsProto with_partition_columns = 13;
inline bool ResolvedAuxLoadDataStmtProto::has_with_partition_columns() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedAuxLoadDataStmtProto::set_has_with_partition_columns() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedAuxLoadDataStmtProto::clear_has_with_partition_columns() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolvedAuxLoadDataStmtProto::clear_with_partition_columns() {
  if (with_partition_columns_ != NULL) with_partition_columns_->Clear();
  clear_has_with_partition_columns();
}
inline const ::zetasql::ResolvedWithPartitionColumnsProto& ResolvedAuxLoadDataStmtProto::_internal_with_partition_columns() const {
  return *with_partition_columns_;
}
inline const ::zetasql::ResolvedWithPartitionColumnsProto& ResolvedAuxLoadDataStmtProto::with_partition_columns() const {
  const ::zetasql::ResolvedWithPartitionColumnsProto* p = with_partition_columns_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAuxLoadDataStmtProto.with_partition_columns)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedWithPartitionColumnsProto*>(
      &::zetasql::_ResolvedWithPartitionColumnsProto_default_instance_);
}
inline ::zetasql::ResolvedWithPartitionColumnsProto* ResolvedAuxLoadDataStmtProto::release_with_partition_columns() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAuxLoadDataStmtProto.with_partition_columns)
  clear_has_with_partition_columns();
  ::zetasql::ResolvedWithPartitionColumnsProto* temp = with_partition_columns_;
  with_partition_columns_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedWithPartitionColumnsProto* ResolvedAuxLoadDataStmtProto::mutable_with_partition_columns() {
  set_has_with_partition_columns();
  if (with_partition_columns_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedWithPartitionColumnsProto>(GetArenaNoVirtual());
    with_partition_columns_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAuxLoadDataStmtProto.with_partition_columns)
  return with_partition_columns_;
}
inline void ResolvedAuxLoadDataStmtProto::set_allocated_with_partition_columns(::zetasql::ResolvedWithPartitionColumnsProto* with_partition_columns) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete with_partition_columns_;
  }
  if (with_partition_columns) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      with_partition_columns = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, with_partition_columns, submessage_arena);
    }
    set_has_with_partition_columns();
  } else {
    clear_has_with_partition_columns();
  }
  with_partition_columns_ = with_partition_columns;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAuxLoadDataStmtProto.with_partition_columns)
}

// optional .zetasql.ResolvedConnectionProto connection = 14;
inline bool ResolvedAuxLoadDataStmtProto::has_connection() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedAuxLoadDataStmtProto::set_has_connection() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedAuxLoadDataStmtProto::clear_has_connection() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolvedAuxLoadDataStmtProto::clear_connection() {
  if (connection_ != NULL) connection_->Clear();
  clear_has_connection();
}
inline const ::zetasql::ResolvedConnectionProto& ResolvedAuxLoadDataStmtProto::_internal_connection() const {
  return *connection_;
}
inline const ::zetasql::ResolvedConnectionProto& ResolvedAuxLoadDataStmtProto::connection() const {
  const ::zetasql::ResolvedConnectionProto* p = connection_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAuxLoadDataStmtProto.connection)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ResolvedConnectionProto*>(
      &::zetasql::_ResolvedConnectionProto_default_instance_);
}
inline ::zetasql::ResolvedConnectionProto* ResolvedAuxLoadDataStmtProto::release_connection() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedAuxLoadDataStmtProto.connection)
  clear_has_connection();
  ::zetasql::ResolvedConnectionProto* temp = connection_;
  connection_ = NULL;
  return temp;
}
inline ::zetasql::ResolvedConnectionProto* ResolvedAuxLoadDataStmtProto::mutable_connection() {
  set_has_connection();
  if (connection_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ResolvedConnectionProto>(GetArenaNoVirtual());
    connection_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAuxLoadDataStmtProto.connection)
  return connection_;
}
inline void ResolvedAuxLoadDataStmtProto::set_allocated_connection(::zetasql::ResolvedConnectionProto* connection) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete connection_;
  }
  if (connection) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      connection = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, connection, submessage_arena);
    }
    set_has_connection();
  } else {
    clear_has_connection();
  }
  connection_ = connection;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedAuxLoadDataStmtProto.connection)
}

// repeated .zetasql.ResolvedOptionProto from_files_option_list = 15;
inline int ResolvedAuxLoadDataStmtProto::from_files_option_list_size() const {
  return from_files_option_list_.size();
}
inline void ResolvedAuxLoadDataStmtProto::clear_from_files_option_list() {
  from_files_option_list_.Clear();
}
inline ::zetasql::ResolvedOptionProto* ResolvedAuxLoadDataStmtProto::mutable_from_files_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedAuxLoadDataStmtProto.from_files_option_list)
  return from_files_option_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >*
ResolvedAuxLoadDataStmtProto::mutable_from_files_option_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedAuxLoadDataStmtProto.from_files_option_list)
  return &from_files_option_list_;
}
inline const ::zetasql::ResolvedOptionProto& ResolvedAuxLoadDataStmtProto::from_files_option_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedAuxLoadDataStmtProto.from_files_option_list)
  return from_files_option_list_.Get(index);
}
inline ::zetasql::ResolvedOptionProto* ResolvedAuxLoadDataStmtProto::add_from_files_option_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedAuxLoadDataStmtProto.from_files_option_list)
  return from_files_option_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedOptionProto >&
ResolvedAuxLoadDataStmtProto::from_files_option_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedAuxLoadDataStmtProto.from_files_option_list)
  return from_files_option_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto
