// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/resolved_ast/resolved_node_kind.proto

#include "zetasql/resolved_ast/resolved_node_kind.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace zetasql {
}  // namespace zetasql
namespace protobuf_zetasql_2fresolved_5fast_2fresolved_5fnode_5fkind_2eproto {
void InitDefaults() {
}

const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];
const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "zetasql/resolved_ast/resolved_node_kind.proto", schemas, file_default_instances, TableStruct::offsets,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n-zetasql/resolved_ast/resolved_node_kin"
      "d.proto\022\007zetasql*\360-\n\020ResolvedNodeKind\022\024\n"
      "\020RESOLVED_LITERAL\020\003\022\026\n\022RESOLVED_PARAMETE"
      "R\020\004\022\036\n\032RESOLVED_EXPRESSION_COLUMN\020\005\022\027\n\023R"
      "ESOLVED_COLUMN_REF\020\006\022\025\n\021RESOLVED_CONSTAN"
      "T\020g\022\035\n\030RESOLVED_SYSTEM_VARIABLE\020\213\001\022\033\n\026RE"
      "SOLVED_INLINE_LAMBDA\020\237\001\022\036\n\031RESOLVED_FILT"
      "ER_FIELD_ARG\020\255\001\022\032\n\025RESOLVED_FILTER_FIELD"
      "\020\256\001\022\032\n\026RESOLVED_FUNCTION_CALL\020\010\022$\n RESOL"
      "VED_AGGREGATE_FUNCTION_CALL\020\t\022#\n\037RESOLVE"
      "D_ANALYTIC_FUNCTION_CALL\020\n\022#\n\036RESOLVED_E"
      "XTENDED_CAST_ELEMENT\020\227\001\022\033\n\026RESOLVED_EXTE"
      "NDED_CAST\020\236\001\022\021\n\rRESOLVED_CAST\020\013\022\030\n\024RESOL"
      "VED_MAKE_STRUCT\020\014\022\027\n\023RESOLVED_MAKE_PROTO"
      "\020\r\022\035\n\031RESOLVED_MAKE_PROTO_FIELD\020\016\022\035\n\031RES"
      "OLVED_GET_STRUCT_FIELD\020\017\022\034\n\030RESOLVED_GET"
      "_PROTO_FIELD\020\020\022\034\n\027RESOLVED_GET_JSON_FIEL"
      "D\020\245\001\022\025\n\020RESOLVED_FLATTEN\020\225\001\022\033\n\026RESOLVED_"
      "FLATTENED_ARG\020\226\001\022 \n\033RESOLVED_REPLACE_FIE"
      "LD_ITEM\020\200\001\022\033\n\026RESOLVED_REPLACE_FIELD\020\201\001\022"
      "\032\n\026RESOLVED_SUBQUERY_EXPR\020\021\022\026\n\021RESOLVED_"
      "LET_EXPR\020\305\001\022\022\n\016RESOLVED_MODEL\020m\022\030\n\023RESOL"
      "VED_CONNECTION\020\215\001\022\030\n\023RESOLVED_DESCRIPTOR"
      "\020\220\001\022\034\n\030RESOLVED_SINGLE_ROW_SCAN\020\023\022\027\n\023RES"
      "OLVED_TABLE_SCAN\020\024\022\026\n\022RESOLVED_JOIN_SCAN"
      "\020\025\022\027\n\023RESOLVED_ARRAY_SCAN\020\026\022\032\n\026RESOLVED_"
      "COLUMN_HOLDER\020\027\022\030\n\024RESOLVED_FILTER_SCAN\020"
      "\030\022\031\n\025RESOLVED_GROUPING_SET\020]\022\033\n\027RESOLVED"
      "_AGGREGATE_SCAN\020\031\022&\n\"RESOLVED_ANONYMIZED"
      "_AGGREGATE_SCAN\020p\022\037\n\033RESOLVED_SET_OPERAT"
      "ION_ITEM\020^\022\037\n\033RESOLVED_SET_OPERATION_SCA"
      "N\020\032\022\032\n\026RESOLVED_ORDER_BY_SCAN\020\033\022\036\n\032RESOL"
      "VED_LIMIT_OFFSET_SCAN\020\034\022\032\n\026RESOLVED_WITH"
      "_REF_SCAN\020\035\022\032\n\026RESOLVED_ANALYTIC_SCAN\020\036\022"
      "\030\n\024RESOLVED_SAMPLE_SCAN\020\037\022\034\n\030RESOLVED_CO"
      "MPUTED_COLUMN\020 \022\032\n\026RESOLVED_ORDER_BY_ITE"
      "M\020!\022\037\n\033RESOLVED_COLUMN_ANNOTATIONS\020h\022\"\n\036"
      "RESOLVED_GENERATED_COLUMN_INFO\020i\022\"\n\035RESO"
      "LVED_COLUMN_DEFAULT_VALUE\020\274\001\022\036\n\032RESOLVED"
      "_COLUMN_DEFINITION\020[\022\030\n\024RESOLVED_PRIMARY"
      "_KEY\020\\\022\030\n\024RESOLVED_FOREIGN_KEY\020n\022\035\n\031RESO"
      "LVED_CHECK_CONSTRAINT\020q\022\032\n\026RESOLVED_OUTP"
      "UT_COLUMN\020\"\022\031\n\025RESOLVED_PROJECT_SCAN\020#\022\024"
      "\n\020RESOLVED_TVFSCAN\020Q\022\035\n\030RESOLVED_GROUP_R"
      "OWS_SCAN\020\260\001\022\036\n\032RESOLVED_FUNCTION_ARGUMEN"
      "T\020R\022\031\n\025RESOLVED_EXPLAIN_STMT\020%\022\027\n\023RESOLV"
      "ED_QUERY_STMT\020&\022!\n\035RESOLVED_CREATE_DATAB"
      "ASE_STMT\020_\022\027\n\023RESOLVED_INDEX_ITEM\020`\022\030\n\024R"
      "ESOLVED_UNNEST_ITEM\020~\022\036\n\032RESOLVED_CREATE"
      "_INDEX_STMT\020a\022 \n\033RESOLVED_CREATE_SCHEMA_"
      "STMT\020\235\001\022\036\n\032RESOLVED_CREATE_TABLE_STMT\020Z\022"
      "(\n$RESOLVED_CREATE_TABLE_AS_SELECT_STMT\020"
      "(\022\036\n\032RESOLVED_CREATE_MODEL_STMT\020k\022\035\n\031RES"
      "OLVED_CREATE_VIEW_STMT\020)\022$\n\037RESOLVED_WIT"
      "H_PARTITION_COLUMNS\020\231\001\022(\n#RESOLVED_CREAT"
      "E_SNAPSHOT_TABLE_STMT\020\266\001\022\'\n#RESOLVED_CRE"
      "ATE_EXTERNAL_TABLE_STMT\020*\022\037\n\032RESOLVED_EX"
      "PORT_MODEL_STMT\020\230\001\022\035\n\031RESOLVED_EXPORT_DA"
      "TA_STMT\020+\022\036\n\032RESOLVED_DEFINE_TABLE_STMT\020"
      ",\022\032\n\026RESOLVED_DESCRIBE_STMT\020-\022\026\n\022RESOLVE"
      "D_SHOW_STMT\020.\022\027\n\023RESOLVED_BEGIN_STMT\020/\022!"
      "\n\035RESOLVED_SET_TRANSACTION_STMT\020x\022\030\n\024RES"
      "OLVED_COMMIT_STMT\0200\022\032\n\026RESOLVED_ROLLBACK"
      "_STMT\0201\022\035\n\031RESOLVED_START_BATCH_STMT\020z\022\033"
      "\n\027RESOLVED_RUN_BATCH_STMT\020{\022\035\n\031RESOLVED_"
      "ABORT_BATCH_STMT\020|\022\026\n\022RESOLVED_DROP_STMT"
      "\0202\022(\n$RESOLVED_DROP_MATERIALIZED_VIEW_ST"
      "MT\020y\022&\n!RESOLVED_DROP_SNAPSHOT_TABLE_STM"
      "T\020\267\001\022 \n\033RESOLVED_RECURSIVE_REF_SCAN\020\223\001\022\034"
      "\n\027RESOLVED_RECURSIVE_SCAN\020\224\001\022\026\n\022RESOLVED"
      "_WITH_SCAN\0203\022\027\n\023RESOLVED_WITH_ENTRY\0204\022\023\n"
      "\017RESOLVED_OPTION\0205\022 \n\034RESOLVED_WINDOW_PA"
      "RTITIONING\0206\022\034\n\030RESOLVED_WINDOW_ORDERING"
      "\0207\022\031\n\025RESOLVED_WINDOW_FRAME\0208\022$\n RESOLVE"
      "D_ANALYTIC_FUNCTION_GROUP\0209\022\036\n\032RESOLVED_"
      "WINDOW_FRAME_EXPR\020:\022\025\n\021RESOLVED_DMLVALUE"
      "\020;\022\027\n\023RESOLVED_DMLDEFAULT\020<\022\030\n\024RESOLVED_"
      "ASSERT_STMT\020b\022!\n\035RESOLVED_ASSERT_ROWS_MO"
      "DIFIED\020=\022\027\n\023RESOLVED_INSERT_ROW\020>\022\030\n\024RES"
      "OLVED_INSERT_STMT\020\?\022\030\n\024RESOLVED_DELETE_S"
      "TMT\020@\022\030\n\024RESOLVED_UPDATE_ITEM\020A\022\036\n\032RESOL"
      "VED_UPDATE_ARRAY_ITEM\020f\022\030\n\024RESOLVED_UPDA"
      "TE_STMT\020B\022\027\n\023RESOLVED_MERGE_WHEN\020d\022\027\n\023RE"
      "SOLVED_MERGE_STMT\020e\022\033\n\026RESOLVED_TRUNCATE"
      "_STMT\020\205\001\022\031\n\024RESOLVED_OBJECT_UNIT\020\310\001\022\026\n\022R"
      "ESOLVED_PRIVILEGE\020C\022\027\n\023RESOLVED_GRANT_ST"
      "MT\020E\022\030\n\024RESOLVED_REVOKE_STMT\020F\022!\n\034RESOLV"
      "ED_ALTER_DATABASE_STMT\020\206\001\022)\n%RESOLVED_AL"
      "TER_MATERIALIZED_VIEW_STMT\020\177\022\037\n\032RESOLVED"
      "_ALTER_SCHEMA_STMT\020\240\001\022\035\n\031RESOLVED_ALTER_"
      "TABLE_STMT\020s\022\034\n\030RESOLVED_ALTER_VIEW_STMT"
      "\020v\022\037\n\033RESOLVED_SET_OPTIONS_ACTION\020u\022\037\n\032R"
      "ESOLVED_ADD_COLUMN_ACTION\020\203\001\022#\n\036RESOLVED"
      "_ADD_CONSTRAINT_ACTION\020\243\001\022$\n\037RESOLVED_DR"
      "OP_CONSTRAINT_ACTION\020\244\001\022%\n RESOLVED_DROP"
      "_PRIMARY_KEY_ACTION\020\270\001\022)\n$RESOLVED_ALTER"
      "_COLUMN_OPTIONS_ACTION\020\251\001\022/\n*RESOLVED_AL"
      "TER_COLUMN_DROP_NOT_NULL_ACTION\020\262\001\022/\n*RE"
      "SOLVED_ALTER_COLUMN_SET_DATA_TYPE_ACTION"
      "\020\265\001\022-\n(RESOLVED_ALTER_COLUMN_SET_DEFAULT"
      "_ACTION\020\306\001\022.\n)RESOLVED_ALTER_COLUMN_DROP"
      "_DEFAULT_ACTION\020\307\001\022 \n\033RESOLVED_DROP_COLU"
      "MN_ACTION\020\204\001\022\"\n\035RESOLVED_RENAME_COLUMN_A"
      "CTION\020\271\001\022\033\n\026RESOLVED_SET_AS_ACTION\020\234\001\022 \n"
      "\033RESOLVED_SET_COLLATE_CLAUSE\020\273\001\022)\n%RESOL"
      "VED_ALTER_TABLE_SET_OPTIONS_STMT\020G\022\030\n\024RE"
      "SOLVED_RENAME_STMT\020H\022/\n*RESOLVED_CREATE_"
      "PRIVILEGE_RESTRICTION_STMT\020\277\001\022*\n&RESOLVE"
      "D_CREATE_ROW_ACCESS_POLICY_STMT\020I\022-\n(RES"
      "OLVED_DROP_PRIVILEGE_RESTRICTION_STMT\020\300\001"
      "\022(\n$RESOLVED_DROP_ROW_ACCESS_POLICY_STMT"
      "\020J\022$\n\037RESOLVED_DROP_SEARCH_INDEX_STMT\020\276\001"
      "\022\035\n\030RESOLVED_GRANT_TO_ACTION\020\207\001\022 \n\033RESOL"
      "VED_RESTRICT_TO_ACTION\020\301\001\022+\n&RESOLVED_AD"
      "D_TO_RESTRICTEE_LIST_ACTION\020\302\001\0220\n+RESOLV"
      "ED_REMOVE_FROM_RESTRICTEE_LIST_ACTION\020\303\001"
      "\022!\n\034RESOLVED_FILTER_USING_ACTION\020\210\001\022 \n\033R"
      "ESOLVED_REVOKE_FROM_ACTION\020\211\001\022\036\n\031RESOLVE"
      "D_RENAME_TO_ACTION\020\212\001\022.\n)RESOLVED_ALTER_"
      "PRIVILEGE_RESTRICTION_STMT\020\304\001\022)\n%RESOLVE"
      "D_ALTER_ROW_ACCESS_POLICY_STMT\020K\0220\n+RESO"
      "LVED_ALTER_ALL_ROW_ACCESS_POLICIES_STMT\020"
      "\221\001\022!\n\035RESOLVED_CREATE_CONSTANT_STMT\020c\022!\n"
      "\035RESOLVED_CREATE_FUNCTION_STMT\020L\022\031\n\025RESO"
      "LVED_ARGUMENT_DEF\020M\022\031\n\025RESOLVED_ARGUMENT"
      "_REF\020N\022\'\n#RESOLVED_CREATE_TABLE_FUNCTION"
      "_STMT\020X\022#\n\037RESOLVED_RELATION_ARGUMENT_SC"
      "AN\020Y\022\032\n\026RESOLVED_ARGUMENT_LIST\020O\022&\n\"RESO"
      "LVED_FUNCTION_SIGNATURE_HOLDER\020T\022\037\n\033RESO"
      "LVED_DROP_FUNCTION_STMT\020P\022&\n!RESOLVED_DR"
      "OP_TABLE_FUNCTION_STMT\020\257\001\022\026\n\022RESOLVED_CA"
      "LL_STMT\020S\022\030\n\024RESOLVED_IMPORT_STMT\020V\022\030\n\024R"
      "ESOLVED_MODULE_STMT\020W\022&\n\"RESOLVED_AGGREG"
      "ATE_HAVING_MODIFIER\020U\022*\n&RESOLVED_CREATE"
      "_MATERIALIZED_VIEW_STMT\020w\022\"\n\036RESOLVED_CR"
      "EATE_PROCEDURE_STMT\020}\022(\n#RESOLVED_EXECUT"
      "E_IMMEDIATE_ARGUMENT\020\217\001\022$\n\037RESOLVED_EXEC"
      "UTE_IMMEDIATE_STMT\020\214\001\022\035\n\030RESOLVED_ASSIGN"
      "MENT_STMT\020\216\001\022 \n\033RESOLVED_CREATE_ENTITY_S"
      "TMT\020\232\001\022\037\n\032RESOLVED_ALTER_ENTITY_STMT\020\233\001\022"
      "\032\n\025RESOLVED_PIVOT_COLUMN\020\246\001\022\030\n\023RESOLVED_"
      "PIVOT_SCAN\020\241\001\022\036\n\031RESOLVED_RETURNING_CLAU"
      "SE\020\252\001\022\031\n\024RESOLVED_UNPIVOT_ARG\020\253\001\022\032\n\025RESO"
      "LVED_UNPIVOT_SCAN\020\254\001\022\035\n\030RESOLVED_CLONE_D"
      "ATA_STMT\020\261\001\022#\n\036RESOLVED_TABLE_AND_COLUMN"
      "_INFO\020\263\001\022\032\n\025RESOLVED_ANALYZE_STMT\020\264\001\022 \n\033"
      "RESOLVED_AUX_LOAD_DATA_STMT\020\272\001\022;\n.__Reso"
      "lvedNodeKind__switch_must_have_default__"
      "\020\377\377\377\377\377\377\377\377\377\001B-\n\022com.google.zetasqlB\027ZetaS"
      "QLResolvedNodeKind"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5978);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zetasql/resolved_ast/resolved_node_kind.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_zetasql_2fresolved_5fast_2fresolved_5fnode_5fkind_2eproto
namespace zetasql {
const ::google::protobuf::EnumDescriptor* ResolvedNodeKind_descriptor() {
  protobuf_zetasql_2fresolved_5fast_2fresolved_5fnode_5fkind_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zetasql_2fresolved_5fast_2fresolved_5fnode_5fkind_2eproto::file_level_enum_descriptors[0];
}
bool ResolvedNodeKind_IsValid(int value) {
  switch (value) {
    case -1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 37:
    case 38:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 107:
    case 109:
    case 110:
    case 112:
    case 113:
    case 115:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 163:
    case 164:
    case 165:
    case 166:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace zetasql
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
