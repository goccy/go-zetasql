// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/resolved_ast/serialization.proto

#ifndef PROTOBUF_INCLUDED_zetasql_2fresolved_5fast_2fserialization_2eproto
#define PROTOBUF_INCLUDED_zetasql_2fresolved_5fast_2fserialization_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "zetasql/public/annotation.pb.h"
#include "zetasql/public/parse_location_range.pb.h"
#include "zetasql/public/type.pb.h"
#include "zetasql/public/value.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_zetasql_2fresolved_5fast_2fserialization_2eproto 

namespace protobuf_zetasql_2fresolved_5fast_2fserialization_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[13];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_zetasql_2fresolved_5fast_2fserialization_2eproto
namespace zetasql {
class ConnectionRefProto;
class ConnectionRefProtoDefaultTypeInternal;
extern ConnectionRefProtoDefaultTypeInternal _ConnectionRefProto_default_instance_;
class ConstantRefProto;
class ConstantRefProtoDefaultTypeInternal;
extern ConstantRefProtoDefaultTypeInternal _ConstantRefProto_default_instance_;
class FieldDescriptorRefProto;
class FieldDescriptorRefProtoDefaultTypeInternal;
extern FieldDescriptorRefProtoDefaultTypeInternal _FieldDescriptorRefProto_default_instance_;
class FunctionRefProto;
class FunctionRefProtoDefaultTypeInternal;
extern FunctionRefProtoDefaultTypeInternal _FunctionRefProto_default_instance_;
class ModelRefProto;
class ModelRefProtoDefaultTypeInternal;
extern ModelRefProtoDefaultTypeInternal _ModelRefProto_default_instance_;
class OneofDescriptorRefProto;
class OneofDescriptorRefProtoDefaultTypeInternal;
extern OneofDescriptorRefProtoDefaultTypeInternal _OneofDescriptorRefProto_default_instance_;
class ProcedureRefProto;
class ProcedureRefProtoDefaultTypeInternal;
extern ProcedureRefProtoDefaultTypeInternal _ProcedureRefProto_default_instance_;
class ResolvedCollationProto;
class ResolvedCollationProtoDefaultTypeInternal;
extern ResolvedCollationProtoDefaultTypeInternal _ResolvedCollationProto_default_instance_;
class ResolvedColumnProto;
class ResolvedColumnProtoDefaultTypeInternal;
extern ResolvedColumnProtoDefaultTypeInternal _ResolvedColumnProto_default_instance_;
class ResolvedNodeProto;
class ResolvedNodeProtoDefaultTypeInternal;
extern ResolvedNodeProtoDefaultTypeInternal _ResolvedNodeProto_default_instance_;
class TableRefProto;
class TableRefProtoDefaultTypeInternal;
extern TableRefProtoDefaultTypeInternal _TableRefProto_default_instance_;
class TableValuedFunctionRefProto;
class TableValuedFunctionRefProtoDefaultTypeInternal;
extern TableValuedFunctionRefProtoDefaultTypeInternal _TableValuedFunctionRefProto_default_instance_;
class ValueWithTypeProto;
class ValueWithTypeProtoDefaultTypeInternal;
extern ValueWithTypeProtoDefaultTypeInternal _ValueWithTypeProto_default_instance_;
}  // namespace zetasql
namespace google {
namespace protobuf {
template<> ::zetasql::ConnectionRefProto* Arena::CreateMaybeMessage<::zetasql::ConnectionRefProto>(Arena*);
template<> ::zetasql::ConstantRefProto* Arena::CreateMaybeMessage<::zetasql::ConstantRefProto>(Arena*);
template<> ::zetasql::FieldDescriptorRefProto* Arena::CreateMaybeMessage<::zetasql::FieldDescriptorRefProto>(Arena*);
template<> ::zetasql::FunctionRefProto* Arena::CreateMaybeMessage<::zetasql::FunctionRefProto>(Arena*);
template<> ::zetasql::ModelRefProto* Arena::CreateMaybeMessage<::zetasql::ModelRefProto>(Arena*);
template<> ::zetasql::OneofDescriptorRefProto* Arena::CreateMaybeMessage<::zetasql::OneofDescriptorRefProto>(Arena*);
template<> ::zetasql::ProcedureRefProto* Arena::CreateMaybeMessage<::zetasql::ProcedureRefProto>(Arena*);
template<> ::zetasql::ResolvedCollationProto* Arena::CreateMaybeMessage<::zetasql::ResolvedCollationProto>(Arena*);
template<> ::zetasql::ResolvedColumnProto* Arena::CreateMaybeMessage<::zetasql::ResolvedColumnProto>(Arena*);
template<> ::zetasql::ResolvedNodeProto* Arena::CreateMaybeMessage<::zetasql::ResolvedNodeProto>(Arena*);
template<> ::zetasql::TableRefProto* Arena::CreateMaybeMessage<::zetasql::TableRefProto>(Arena*);
template<> ::zetasql::TableValuedFunctionRefProto* Arena::CreateMaybeMessage<::zetasql::TableValuedFunctionRefProto>(Arena*);
template<> ::zetasql::ValueWithTypeProto* Arena::CreateMaybeMessage<::zetasql::ValueWithTypeProto>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace zetasql {

// ===================================================================

class ResolvedColumnProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedColumnProto) */ {
 public:
  ResolvedColumnProto();
  virtual ~ResolvedColumnProto();

  ResolvedColumnProto(const ResolvedColumnProto& from);

  inline ResolvedColumnProto& operator=(const ResolvedColumnProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedColumnProto(ResolvedColumnProto&& from) noexcept
    : ResolvedColumnProto() {
    *this = ::std::move(from);
  }

  inline ResolvedColumnProto& operator=(ResolvedColumnProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedColumnProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedColumnProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedColumnProto*>(
               &_ResolvedColumnProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ResolvedColumnProto* other);
  friend void swap(ResolvedColumnProto& a, ResolvedColumnProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedColumnProto* New() const final {
    return CreateMaybeMessage<ResolvedColumnProto>(NULL);
  }

  ResolvedColumnProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedColumnProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResolvedColumnProto& from);
  void MergeFrom(const ResolvedColumnProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedColumnProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string table_name = 2;
  bool has_table_name() const;
  void clear_table_name();
  static const int kTableNameFieldNumber = 2;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  #if LANG_CXX11
  void set_table_name(::std::string&& value);
  #endif
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .zetasql.TypeProto type = 4;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  private:
  const ::zetasql::TypeProto& _internal_type() const;
  public:
  const ::zetasql::TypeProto& type() const;
  ::zetasql::TypeProto* release_type();
  ::zetasql::TypeProto* mutable_type();
  void set_allocated_type(::zetasql::TypeProto* type);

  // optional .zetasql.AnnotationMapProto annotation_map = 5;
  bool has_annotation_map() const;
  void clear_annotation_map();
  static const int kAnnotationMapFieldNumber = 5;
  private:
  const ::zetasql::AnnotationMapProto& _internal_annotation_map() const;
  public:
  const ::zetasql::AnnotationMapProto& annotation_map() const;
  ::zetasql::AnnotationMapProto* release_annotation_map();
  ::zetasql::AnnotationMapProto* mutable_annotation_map();
  void set_allocated_annotation_map(::zetasql::AnnotationMapProto* annotation_map);

  // optional int64 column_id = 1;
  bool has_column_id() const;
  void clear_column_id();
  static const int kColumnIdFieldNumber = 1;
  ::google::protobuf::int64 column_id() const;
  void set_column_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedColumnProto)
 private:
  void set_has_column_id();
  void clear_has_column_id();
  void set_has_table_name();
  void clear_has_table_name();
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_annotation_map();
  void clear_has_annotation_map();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::zetasql::TypeProto* type_;
  ::zetasql::AnnotationMapProto* annotation_map_;
  ::google::protobuf::int64 column_id_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fserialization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueWithTypeProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ValueWithTypeProto) */ {
 public:
  ValueWithTypeProto();
  virtual ~ValueWithTypeProto();

  ValueWithTypeProto(const ValueWithTypeProto& from);

  inline ValueWithTypeProto& operator=(const ValueWithTypeProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueWithTypeProto(ValueWithTypeProto&& from) noexcept
    : ValueWithTypeProto() {
    *this = ::std::move(from);
  }

  inline ValueWithTypeProto& operator=(ValueWithTypeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueWithTypeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueWithTypeProto* internal_default_instance() {
    return reinterpret_cast<const ValueWithTypeProto*>(
               &_ValueWithTypeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ValueWithTypeProto* other);
  friend void swap(ValueWithTypeProto& a, ValueWithTypeProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueWithTypeProto* New() const final {
    return CreateMaybeMessage<ValueWithTypeProto>(NULL);
  }

  ValueWithTypeProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueWithTypeProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueWithTypeProto& from);
  void MergeFrom(const ValueWithTypeProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueWithTypeProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.TypeProto type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  private:
  const ::zetasql::TypeProto& _internal_type() const;
  public:
  const ::zetasql::TypeProto& type() const;
  ::zetasql::TypeProto* release_type();
  ::zetasql::TypeProto* mutable_type();
  void set_allocated_type(::zetasql::TypeProto* type);

  // optional .zetasql.ValueProto value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  private:
  const ::zetasql::ValueProto& _internal_value() const;
  public:
  const ::zetasql::ValueProto& value() const;
  ::zetasql::ValueProto* release_value();
  ::zetasql::ValueProto* mutable_value();
  void set_allocated_value(::zetasql::ValueProto* value);

  // @@protoc_insertion_point(class_scope:zetasql.ValueWithTypeProto)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::TypeProto* type_;
  ::zetasql::ValueProto* value_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fserialization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TableRefProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.TableRefProto) */ {
 public:
  TableRefProto();
  virtual ~TableRefProto();

  TableRefProto(const TableRefProto& from);

  inline TableRefProto& operator=(const TableRefProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableRefProto(TableRefProto&& from) noexcept
    : TableRefProto() {
    *this = ::std::move(from);
  }

  inline TableRefProto& operator=(TableRefProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableRefProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableRefProto* internal_default_instance() {
    return reinterpret_cast<const TableRefProto*>(
               &_TableRefProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TableRefProto* other);
  friend void swap(TableRefProto& a, TableRefProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableRefProto* New() const final {
    return CreateMaybeMessage<TableRefProto>(NULL);
  }

  TableRefProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TableRefProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TableRefProto& from);
  void MergeFrom(const TableRefProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableRefProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string full_name = 3;
  bool has_full_name() const;
  void clear_full_name();
  static const int kFullNameFieldNumber = 3;
  const ::std::string& full_name() const;
  void set_full_name(const ::std::string& value);
  #if LANG_CXX11
  void set_full_name(::std::string&& value);
  #endif
  void set_full_name(const char* value);
  void set_full_name(const char* value, size_t size);
  ::std::string* mutable_full_name();
  ::std::string* release_full_name();
  void set_allocated_full_name(::std::string* full_name);

  // optional int64 serialization_id = 2;
  bool has_serialization_id() const;
  void clear_serialization_id();
  static const int kSerializationIdFieldNumber = 2;
  ::google::protobuf::int64 serialization_id() const;
  void set_serialization_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zetasql.TableRefProto)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_serialization_id();
  void clear_has_serialization_id();
  void set_has_full_name();
  void clear_has_full_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr full_name_;
  ::google::protobuf::int64 serialization_id_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fserialization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ModelRefProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ModelRefProto) */ {
 public:
  ModelRefProto();
  virtual ~ModelRefProto();

  ModelRefProto(const ModelRefProto& from);

  inline ModelRefProto& operator=(const ModelRefProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModelRefProto(ModelRefProto&& from) noexcept
    : ModelRefProto() {
    *this = ::std::move(from);
  }

  inline ModelRefProto& operator=(ModelRefProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelRefProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelRefProto* internal_default_instance() {
    return reinterpret_cast<const ModelRefProto*>(
               &_ModelRefProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ModelRefProto* other);
  friend void swap(ModelRefProto& a, ModelRefProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModelRefProto* New() const final {
    return CreateMaybeMessage<ModelRefProto>(NULL);
  }

  ModelRefProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ModelRefProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ModelRefProto& from);
  void MergeFrom(const ModelRefProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelRefProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string full_name = 3;
  bool has_full_name() const;
  void clear_full_name();
  static const int kFullNameFieldNumber = 3;
  const ::std::string& full_name() const;
  void set_full_name(const ::std::string& value);
  #if LANG_CXX11
  void set_full_name(::std::string&& value);
  #endif
  void set_full_name(const char* value);
  void set_full_name(const char* value, size_t size);
  ::std::string* mutable_full_name();
  ::std::string* release_full_name();
  void set_allocated_full_name(::std::string* full_name);

  // optional int64 serialization_id = 2;
  bool has_serialization_id() const;
  void clear_serialization_id();
  static const int kSerializationIdFieldNumber = 2;
  ::google::protobuf::int64 serialization_id() const;
  void set_serialization_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zetasql.ModelRefProto)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_serialization_id();
  void clear_has_serialization_id();
  void set_has_full_name();
  void clear_has_full_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr full_name_;
  ::google::protobuf::int64 serialization_id_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fserialization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConnectionRefProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ConnectionRefProto) */ {
 public:
  ConnectionRefProto();
  virtual ~ConnectionRefProto();

  ConnectionRefProto(const ConnectionRefProto& from);

  inline ConnectionRefProto& operator=(const ConnectionRefProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectionRefProto(ConnectionRefProto&& from) noexcept
    : ConnectionRefProto() {
    *this = ::std::move(from);
  }

  inline ConnectionRefProto& operator=(ConnectionRefProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectionRefProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectionRefProto* internal_default_instance() {
    return reinterpret_cast<const ConnectionRefProto*>(
               &_ConnectionRefProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ConnectionRefProto* other);
  friend void swap(ConnectionRefProto& a, ConnectionRefProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectionRefProto* New() const final {
    return CreateMaybeMessage<ConnectionRefProto>(NULL);
  }

  ConnectionRefProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConnectionRefProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConnectionRefProto& from);
  void MergeFrom(const ConnectionRefProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionRefProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string full_name = 3;
  bool has_full_name() const;
  void clear_full_name();
  static const int kFullNameFieldNumber = 3;
  const ::std::string& full_name() const;
  void set_full_name(const ::std::string& value);
  #if LANG_CXX11
  void set_full_name(::std::string&& value);
  #endif
  void set_full_name(const char* value);
  void set_full_name(const char* value, size_t size);
  ::std::string* mutable_full_name();
  ::std::string* release_full_name();
  void set_allocated_full_name(::std::string* full_name);

  // @@protoc_insertion_point(class_scope:zetasql.ConnectionRefProto)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_full_name();
  void clear_has_full_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr full_name_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fserialization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConstantRefProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ConstantRefProto) */ {
 public:
  ConstantRefProto();
  virtual ~ConstantRefProto();

  ConstantRefProto(const ConstantRefProto& from);

  inline ConstantRefProto& operator=(const ConstantRefProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConstantRefProto(ConstantRefProto&& from) noexcept
    : ConstantRefProto() {
    *this = ::std::move(from);
  }

  inline ConstantRefProto& operator=(ConstantRefProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConstantRefProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConstantRefProto* internal_default_instance() {
    return reinterpret_cast<const ConstantRefProto*>(
               &_ConstantRefProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ConstantRefProto* other);
  friend void swap(ConstantRefProto& a, ConstantRefProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConstantRefProto* New() const final {
    return CreateMaybeMessage<ConstantRefProto>(NULL);
  }

  ConstantRefProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConstantRefProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConstantRefProto& from);
  void MergeFrom(const ConstantRefProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConstantRefProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:zetasql.ConstantRefProto)
 private:
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fserialization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FunctionRefProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.FunctionRefProto) */ {
 public:
  FunctionRefProto();
  virtual ~FunctionRefProto();

  FunctionRefProto(const FunctionRefProto& from);

  inline FunctionRefProto& operator=(const FunctionRefProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FunctionRefProto(FunctionRefProto&& from) noexcept
    : FunctionRefProto() {
    *this = ::std::move(from);
  }

  inline FunctionRefProto& operator=(FunctionRefProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FunctionRefProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FunctionRefProto* internal_default_instance() {
    return reinterpret_cast<const FunctionRefProto*>(
               &_FunctionRefProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(FunctionRefProto* other);
  friend void swap(FunctionRefProto& a, FunctionRefProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FunctionRefProto* New() const final {
    return CreateMaybeMessage<FunctionRefProto>(NULL);
  }

  FunctionRefProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FunctionRefProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FunctionRefProto& from);
  void MergeFrom(const FunctionRefProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionRefProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:zetasql.FunctionRefProto)
 private:
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fserialization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TableValuedFunctionRefProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.TableValuedFunctionRefProto) */ {
 public:
  TableValuedFunctionRefProto();
  virtual ~TableValuedFunctionRefProto();

  TableValuedFunctionRefProto(const TableValuedFunctionRefProto& from);

  inline TableValuedFunctionRefProto& operator=(const TableValuedFunctionRefProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableValuedFunctionRefProto(TableValuedFunctionRefProto&& from) noexcept
    : TableValuedFunctionRefProto() {
    *this = ::std::move(from);
  }

  inline TableValuedFunctionRefProto& operator=(TableValuedFunctionRefProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableValuedFunctionRefProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableValuedFunctionRefProto* internal_default_instance() {
    return reinterpret_cast<const TableValuedFunctionRefProto*>(
               &_TableValuedFunctionRefProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(TableValuedFunctionRefProto* other);
  friend void swap(TableValuedFunctionRefProto& a, TableValuedFunctionRefProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableValuedFunctionRefProto* New() const final {
    return CreateMaybeMessage<TableValuedFunctionRefProto>(NULL);
  }

  TableValuedFunctionRefProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TableValuedFunctionRefProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TableValuedFunctionRefProto& from);
  void MergeFrom(const TableValuedFunctionRefProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableValuedFunctionRefProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:zetasql.TableValuedFunctionRefProto)
 private:
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fserialization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedNodeProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedNodeProto) */ {
 public:
  ResolvedNodeProto();
  virtual ~ResolvedNodeProto();

  ResolvedNodeProto(const ResolvedNodeProto& from);

  inline ResolvedNodeProto& operator=(const ResolvedNodeProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedNodeProto(ResolvedNodeProto&& from) noexcept
    : ResolvedNodeProto() {
    *this = ::std::move(from);
  }

  inline ResolvedNodeProto& operator=(ResolvedNodeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedNodeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedNodeProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedNodeProto*>(
               &_ResolvedNodeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ResolvedNodeProto* other);
  friend void swap(ResolvedNodeProto& a, ResolvedNodeProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedNodeProto* New() const final {
    return CreateMaybeMessage<ResolvedNodeProto>(NULL);
  }

  ResolvedNodeProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedNodeProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResolvedNodeProto& from);
  void MergeFrom(const ResolvedNodeProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedNodeProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ParseLocationRangeProto parse_location_range = 1;
  bool has_parse_location_range() const;
  void clear_parse_location_range();
  static const int kParseLocationRangeFieldNumber = 1;
  private:
  const ::zetasql::ParseLocationRangeProto& _internal_parse_location_range() const;
  public:
  const ::zetasql::ParseLocationRangeProto& parse_location_range() const;
  ::zetasql::ParseLocationRangeProto* release_parse_location_range();
  ::zetasql::ParseLocationRangeProto* mutable_parse_location_range();
  void set_allocated_parse_location_range(::zetasql::ParseLocationRangeProto* parse_location_range);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedNodeProto)
 private:
  void set_has_parse_location_range();
  void clear_has_parse_location_range();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ParseLocationRangeProto* parse_location_range_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fserialization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FieldDescriptorRefProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.FieldDescriptorRefProto) */ {
 public:
  FieldDescriptorRefProto();
  virtual ~FieldDescriptorRefProto();

  FieldDescriptorRefProto(const FieldDescriptorRefProto& from);

  inline FieldDescriptorRefProto& operator=(const FieldDescriptorRefProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FieldDescriptorRefProto(FieldDescriptorRefProto&& from) noexcept
    : FieldDescriptorRefProto() {
    *this = ::std::move(from);
  }

  inline FieldDescriptorRefProto& operator=(FieldDescriptorRefProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldDescriptorRefProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldDescriptorRefProto* internal_default_instance() {
    return reinterpret_cast<const FieldDescriptorRefProto*>(
               &_FieldDescriptorRefProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(FieldDescriptorRefProto* other);
  friend void swap(FieldDescriptorRefProto& a, FieldDescriptorRefProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FieldDescriptorRefProto* New() const final {
    return CreateMaybeMessage<FieldDescriptorRefProto>(NULL);
  }

  FieldDescriptorRefProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FieldDescriptorRefProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FieldDescriptorRefProto& from);
  void MergeFrom(const FieldDescriptorRefProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldDescriptorRefProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ProtoTypeProto containing_proto = 1;
  bool has_containing_proto() const;
  void clear_containing_proto();
  static const int kContainingProtoFieldNumber = 1;
  private:
  const ::zetasql::ProtoTypeProto& _internal_containing_proto() const;
  public:
  const ::zetasql::ProtoTypeProto& containing_proto() const;
  ::zetasql::ProtoTypeProto* release_containing_proto();
  ::zetasql::ProtoTypeProto* mutable_containing_proto();
  void set_allocated_containing_proto(::zetasql::ProtoTypeProto* containing_proto);

  // optional int32 number = 2;
  bool has_number() const;
  void clear_number();
  static const int kNumberFieldNumber = 2;
  ::google::protobuf::int32 number() const;
  void set_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zetasql.FieldDescriptorRefProto)
 private:
  void set_has_containing_proto();
  void clear_has_containing_proto();
  void set_has_number();
  void clear_has_number();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ProtoTypeProto* containing_proto_;
  ::google::protobuf::int32 number_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fserialization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OneofDescriptorRefProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.OneofDescriptorRefProto) */ {
 public:
  OneofDescriptorRefProto();
  virtual ~OneofDescriptorRefProto();

  OneofDescriptorRefProto(const OneofDescriptorRefProto& from);

  inline OneofDescriptorRefProto& operator=(const OneofDescriptorRefProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OneofDescriptorRefProto(OneofDescriptorRefProto&& from) noexcept
    : OneofDescriptorRefProto() {
    *this = ::std::move(from);
  }

  inline OneofDescriptorRefProto& operator=(OneofDescriptorRefProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneofDescriptorRefProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OneofDescriptorRefProto* internal_default_instance() {
    return reinterpret_cast<const OneofDescriptorRefProto*>(
               &_OneofDescriptorRefProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(OneofDescriptorRefProto* other);
  friend void swap(OneofDescriptorRefProto& a, OneofDescriptorRefProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OneofDescriptorRefProto* New() const final {
    return CreateMaybeMessage<OneofDescriptorRefProto>(NULL);
  }

  OneofDescriptorRefProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OneofDescriptorRefProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OneofDescriptorRefProto& from);
  void MergeFrom(const OneofDescriptorRefProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneofDescriptorRefProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zetasql.ProtoTypeProto containing_proto = 1;
  bool has_containing_proto() const;
  void clear_containing_proto();
  static const int kContainingProtoFieldNumber = 1;
  private:
  const ::zetasql::ProtoTypeProto& _internal_containing_proto() const;
  public:
  const ::zetasql::ProtoTypeProto& containing_proto() const;
  ::zetasql::ProtoTypeProto* release_containing_proto();
  ::zetasql::ProtoTypeProto* mutable_containing_proto();
  void set_allocated_containing_proto(::zetasql::ProtoTypeProto* containing_proto);

  // optional int32 index = 2;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zetasql.OneofDescriptorRefProto)
 private:
  void set_has_containing_proto();
  void clear_has_containing_proto();
  void set_has_index();
  void clear_has_index();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zetasql::ProtoTypeProto* containing_proto_;
  ::google::protobuf::int32 index_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fserialization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProcedureRefProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ProcedureRefProto) */ {
 public:
  ProcedureRefProto();
  virtual ~ProcedureRefProto();

  ProcedureRefProto(const ProcedureRefProto& from);

  inline ProcedureRefProto& operator=(const ProcedureRefProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcedureRefProto(ProcedureRefProto&& from) noexcept
    : ProcedureRefProto() {
    *this = ::std::move(from);
  }

  inline ProcedureRefProto& operator=(ProcedureRefProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcedureRefProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcedureRefProto* internal_default_instance() {
    return reinterpret_cast<const ProcedureRefProto*>(
               &_ProcedureRefProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ProcedureRefProto* other);
  friend void swap(ProcedureRefProto& a, ProcedureRefProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcedureRefProto* New() const final {
    return CreateMaybeMessage<ProcedureRefProto>(NULL);
  }

  ProcedureRefProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProcedureRefProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProcedureRefProto& from);
  void MergeFrom(const ProcedureRefProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcedureRefProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:zetasql.ProcedureRefProto)
 private:
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fserialization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedCollationProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ResolvedCollationProto) */ {
 public:
  ResolvedCollationProto();
  virtual ~ResolvedCollationProto();

  ResolvedCollationProto(const ResolvedCollationProto& from);

  inline ResolvedCollationProto& operator=(const ResolvedCollationProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResolvedCollationProto(ResolvedCollationProto&& from) noexcept
    : ResolvedCollationProto() {
    *this = ::std::move(from);
  }

  inline ResolvedCollationProto& operator=(ResolvedCollationProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedCollationProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedCollationProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedCollationProto*>(
               &_ResolvedCollationProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(ResolvedCollationProto* other);
  friend void swap(ResolvedCollationProto& a, ResolvedCollationProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResolvedCollationProto* New() const final {
    return CreateMaybeMessage<ResolvedCollationProto>(NULL);
  }

  ResolvedCollationProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedCollationProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResolvedCollationProto& from);
  void MergeFrom(const ResolvedCollationProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedCollationProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zetasql.ResolvedCollationProto child_list = 2;
  int child_list_size() const;
  void clear_child_list();
  static const int kChildListFieldNumber = 2;
  ::zetasql::ResolvedCollationProto* mutable_child_list(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedCollationProto >*
      mutable_child_list();
  const ::zetasql::ResolvedCollationProto& child_list(int index) const;
  ::zetasql::ResolvedCollationProto* add_child_list();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedCollationProto >&
      child_list() const;

  // optional string collation_name = 1;
  bool has_collation_name() const;
  void clear_collation_name();
  static const int kCollationNameFieldNumber = 1;
  const ::std::string& collation_name() const;
  void set_collation_name(const ::std::string& value);
  #if LANG_CXX11
  void set_collation_name(::std::string&& value);
  #endif
  void set_collation_name(const char* value);
  void set_collation_name(const char* value, size_t size);
  ::std::string* mutable_collation_name();
  ::std::string* release_collation_name();
  void set_allocated_collation_name(::std::string* collation_name);

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedCollationProto)
 private:
  void set_has_collation_name();
  void clear_has_collation_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedCollationProto > child_list_;
  ::google::protobuf::internal::ArenaStringPtr collation_name_;
  friend struct ::protobuf_zetasql_2fresolved_5fast_2fserialization_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResolvedColumnProto

// optional int64 column_id = 1;
inline bool ResolvedColumnProto::has_column_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResolvedColumnProto::set_has_column_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResolvedColumnProto::clear_has_column_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResolvedColumnProto::clear_column_id() {
  column_id_ = GOOGLE_LONGLONG(0);
  clear_has_column_id();
}
inline ::google::protobuf::int64 ResolvedColumnProto::column_id() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedColumnProto.column_id)
  return column_id_;
}
inline void ResolvedColumnProto::set_column_id(::google::protobuf::int64 value) {
  set_has_column_id();
  column_id_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ResolvedColumnProto.column_id)
}

// optional string table_name = 2;
inline bool ResolvedColumnProto::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedColumnProto::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedColumnProto::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedColumnProto::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table_name();
}
inline const ::std::string& ResolvedColumnProto::table_name() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedColumnProto.table_name)
  return table_name_.GetNoArena();
}
inline void ResolvedColumnProto::set_table_name(const ::std::string& value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedColumnProto.table_name)
}
#if LANG_CXX11
inline void ResolvedColumnProto::set_table_name(::std::string&& value) {
  set_has_table_name();
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedColumnProto.table_name)
}
#endif
inline void ResolvedColumnProto::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedColumnProto.table_name)
}
inline void ResolvedColumnProto::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedColumnProto.table_name)
}
inline ::std::string* ResolvedColumnProto::mutable_table_name() {
  set_has_table_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedColumnProto.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedColumnProto::release_table_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedColumnProto.table_name)
  if (!has_table_name()) {
    return NULL;
  }
  clear_has_table_name();
  return table_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedColumnProto::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    set_has_table_name();
  } else {
    clear_has_table_name();
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedColumnProto.table_name)
}

// optional string name = 3;
inline bool ResolvedColumnProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedColumnProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolvedColumnProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolvedColumnProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ResolvedColumnProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedColumnProto.name)
  return name_.GetNoArena();
}
inline void ResolvedColumnProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedColumnProto.name)
}
#if LANG_CXX11
inline void ResolvedColumnProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedColumnProto.name)
}
#endif
inline void ResolvedColumnProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedColumnProto.name)
}
inline void ResolvedColumnProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedColumnProto.name)
}
inline ::std::string* ResolvedColumnProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedColumnProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedColumnProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedColumnProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedColumnProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedColumnProto.name)
}

// optional .zetasql.TypeProto type = 4;
inline bool ResolvedColumnProto::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedColumnProto::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolvedColumnProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasql::TypeProto& ResolvedColumnProto::_internal_type() const {
  return *type_;
}
inline const ::zetasql::TypeProto& ResolvedColumnProto::type() const {
  const ::zetasql::TypeProto* p = type_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedColumnProto.type)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TypeProto*>(
      &::zetasql::_TypeProto_default_instance_);
}
inline ::zetasql::TypeProto* ResolvedColumnProto::release_type() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedColumnProto.type)
  clear_has_type();
  ::zetasql::TypeProto* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::zetasql::TypeProto* ResolvedColumnProto::mutable_type() {
  set_has_type();
  if (type_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedColumnProto.type)
  return type_;
}
inline void ResolvedColumnProto::set_allocated_type(::zetasql::TypeProto* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_);
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(type)->GetArena();
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    set_has_type();
  } else {
    clear_has_type();
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedColumnProto.type)
}

// optional .zetasql.AnnotationMapProto annotation_map = 5;
inline bool ResolvedColumnProto::has_annotation_map() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedColumnProto::set_has_annotation_map() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolvedColumnProto::clear_has_annotation_map() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::zetasql::AnnotationMapProto& ResolvedColumnProto::_internal_annotation_map() const {
  return *annotation_map_;
}
inline const ::zetasql::AnnotationMapProto& ResolvedColumnProto::annotation_map() const {
  const ::zetasql::AnnotationMapProto* p = annotation_map_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedColumnProto.annotation_map)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::AnnotationMapProto*>(
      &::zetasql::_AnnotationMapProto_default_instance_);
}
inline ::zetasql::AnnotationMapProto* ResolvedColumnProto::release_annotation_map() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedColumnProto.annotation_map)
  clear_has_annotation_map();
  ::zetasql::AnnotationMapProto* temp = annotation_map_;
  annotation_map_ = NULL;
  return temp;
}
inline ::zetasql::AnnotationMapProto* ResolvedColumnProto::mutable_annotation_map() {
  set_has_annotation_map();
  if (annotation_map_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::AnnotationMapProto>(GetArenaNoVirtual());
    annotation_map_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedColumnProto.annotation_map)
  return annotation_map_;
}
inline void ResolvedColumnProto::set_allocated_annotation_map(::zetasql::AnnotationMapProto* annotation_map) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(annotation_map_);
  }
  if (annotation_map) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(annotation_map)->GetArena();
    if (message_arena != submessage_arena) {
      annotation_map = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, annotation_map, submessage_arena);
    }
    set_has_annotation_map();
  } else {
    clear_has_annotation_map();
  }
  annotation_map_ = annotation_map;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedColumnProto.annotation_map)
}

// -------------------------------------------------------------------

// ValueWithTypeProto

// optional .zetasql.TypeProto type = 1;
inline bool ValueWithTypeProto::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ValueWithTypeProto::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ValueWithTypeProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::zetasql::TypeProto& ValueWithTypeProto::_internal_type() const {
  return *type_;
}
inline const ::zetasql::TypeProto& ValueWithTypeProto::type() const {
  const ::zetasql::TypeProto* p = type_;
  // @@protoc_insertion_point(field_get:zetasql.ValueWithTypeProto.type)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TypeProto*>(
      &::zetasql::_TypeProto_default_instance_);
}
inline ::zetasql::TypeProto* ValueWithTypeProto::release_type() {
  // @@protoc_insertion_point(field_release:zetasql.ValueWithTypeProto.type)
  clear_has_type();
  ::zetasql::TypeProto* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::zetasql::TypeProto* ValueWithTypeProto::mutable_type() {
  set_has_type();
  if (type_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ValueWithTypeProto.type)
  return type_;
}
inline void ValueWithTypeProto::set_allocated_type(::zetasql::TypeProto* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_);
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(type)->GetArena();
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    set_has_type();
  } else {
    clear_has_type();
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ValueWithTypeProto.type)
}

// optional .zetasql.ValueProto value = 2;
inline bool ValueWithTypeProto::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ValueWithTypeProto::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ValueWithTypeProto::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::ValueProto& ValueWithTypeProto::_internal_value() const {
  return *value_;
}
inline const ::zetasql::ValueProto& ValueWithTypeProto::value() const {
  const ::zetasql::ValueProto* p = value_;
  // @@protoc_insertion_point(field_get:zetasql.ValueWithTypeProto.value)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ValueProto*>(
      &::zetasql::_ValueProto_default_instance_);
}
inline ::zetasql::ValueProto* ValueWithTypeProto::release_value() {
  // @@protoc_insertion_point(field_release:zetasql.ValueWithTypeProto.value)
  clear_has_value();
  ::zetasql::ValueProto* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::zetasql::ValueProto* ValueWithTypeProto::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ValueProto>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ValueWithTypeProto.value)
  return value_;
}
inline void ValueWithTypeProto::set_allocated_value(::zetasql::ValueProto* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_);
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    set_has_value();
  } else {
    clear_has_value();
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ValueWithTypeProto.value)
}

// -------------------------------------------------------------------

// TableRefProto

// optional string name = 1;
inline bool TableRefProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableRefProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableRefProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableRefProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& TableRefProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.TableRefProto.name)
  return name_.GetNoArena();
}
inline void TableRefProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.TableRefProto.name)
}
#if LANG_CXX11
inline void TableRefProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.TableRefProto.name)
}
#endif
inline void TableRefProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.TableRefProto.name)
}
inline void TableRefProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.TableRefProto.name)
}
inline ::std::string* TableRefProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.TableRefProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableRefProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.TableRefProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableRefProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.TableRefProto.name)
}

// optional int64 serialization_id = 2;
inline bool TableRefProto::has_serialization_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TableRefProto::set_has_serialization_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TableRefProto::clear_has_serialization_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TableRefProto::clear_serialization_id() {
  serialization_id_ = GOOGLE_LONGLONG(0);
  clear_has_serialization_id();
}
inline ::google::protobuf::int64 TableRefProto::serialization_id() const {
  // @@protoc_insertion_point(field_get:zetasql.TableRefProto.serialization_id)
  return serialization_id_;
}
inline void TableRefProto::set_serialization_id(::google::protobuf::int64 value) {
  set_has_serialization_id();
  serialization_id_ = value;
  // @@protoc_insertion_point(field_set:zetasql.TableRefProto.serialization_id)
}

// optional string full_name = 3;
inline bool TableRefProto::has_full_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableRefProto::set_has_full_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TableRefProto::clear_has_full_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TableRefProto::clear_full_name() {
  full_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_full_name();
}
inline const ::std::string& TableRefProto::full_name() const {
  // @@protoc_insertion_point(field_get:zetasql.TableRefProto.full_name)
  return full_name_.GetNoArena();
}
inline void TableRefProto::set_full_name(const ::std::string& value) {
  set_has_full_name();
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.TableRefProto.full_name)
}
#if LANG_CXX11
inline void TableRefProto::set_full_name(::std::string&& value) {
  set_has_full_name();
  full_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.TableRefProto.full_name)
}
#endif
inline void TableRefProto::set_full_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_full_name();
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.TableRefProto.full_name)
}
inline void TableRefProto::set_full_name(const char* value, size_t size) {
  set_has_full_name();
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.TableRefProto.full_name)
}
inline ::std::string* TableRefProto::mutable_full_name() {
  set_has_full_name();
  // @@protoc_insertion_point(field_mutable:zetasql.TableRefProto.full_name)
  return full_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableRefProto::release_full_name() {
  // @@protoc_insertion_point(field_release:zetasql.TableRefProto.full_name)
  if (!has_full_name()) {
    return NULL;
  }
  clear_has_full_name();
  return full_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableRefProto::set_allocated_full_name(::std::string* full_name) {
  if (full_name != NULL) {
    set_has_full_name();
  } else {
    clear_has_full_name();
  }
  full_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.TableRefProto.full_name)
}

// -------------------------------------------------------------------

// ModelRefProto

// optional string name = 1;
inline bool ModelRefProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelRefProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelRefProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelRefProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ModelRefProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.ModelRefProto.name)
  return name_.GetNoArena();
}
inline void ModelRefProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ModelRefProto.name)
}
#if LANG_CXX11
inline void ModelRefProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ModelRefProto.name)
}
#endif
inline void ModelRefProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ModelRefProto.name)
}
inline void ModelRefProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ModelRefProto.name)
}
inline ::std::string* ModelRefProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ModelRefProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelRefProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.ModelRefProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelRefProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ModelRefProto.name)
}

// optional int64 serialization_id = 2;
inline bool ModelRefProto::has_serialization_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModelRefProto::set_has_serialization_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModelRefProto::clear_has_serialization_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModelRefProto::clear_serialization_id() {
  serialization_id_ = GOOGLE_LONGLONG(0);
  clear_has_serialization_id();
}
inline ::google::protobuf::int64 ModelRefProto::serialization_id() const {
  // @@protoc_insertion_point(field_get:zetasql.ModelRefProto.serialization_id)
  return serialization_id_;
}
inline void ModelRefProto::set_serialization_id(::google::protobuf::int64 value) {
  set_has_serialization_id();
  serialization_id_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ModelRefProto.serialization_id)
}

// optional string full_name = 3;
inline bool ModelRefProto::has_full_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelRefProto::set_has_full_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModelRefProto::clear_has_full_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModelRefProto::clear_full_name() {
  full_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_full_name();
}
inline const ::std::string& ModelRefProto::full_name() const {
  // @@protoc_insertion_point(field_get:zetasql.ModelRefProto.full_name)
  return full_name_.GetNoArena();
}
inline void ModelRefProto::set_full_name(const ::std::string& value) {
  set_has_full_name();
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ModelRefProto.full_name)
}
#if LANG_CXX11
inline void ModelRefProto::set_full_name(::std::string&& value) {
  set_has_full_name();
  full_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ModelRefProto.full_name)
}
#endif
inline void ModelRefProto::set_full_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_full_name();
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ModelRefProto.full_name)
}
inline void ModelRefProto::set_full_name(const char* value, size_t size) {
  set_has_full_name();
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ModelRefProto.full_name)
}
inline ::std::string* ModelRefProto::mutable_full_name() {
  set_has_full_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ModelRefProto.full_name)
  return full_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelRefProto::release_full_name() {
  // @@protoc_insertion_point(field_release:zetasql.ModelRefProto.full_name)
  if (!has_full_name()) {
    return NULL;
  }
  clear_has_full_name();
  return full_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelRefProto::set_allocated_full_name(::std::string* full_name) {
  if (full_name != NULL) {
    set_has_full_name();
  } else {
    clear_has_full_name();
  }
  full_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ModelRefProto.full_name)
}

// -------------------------------------------------------------------

// ConnectionRefProto

// optional string name = 1;
inline bool ConnectionRefProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectionRefProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectionRefProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectionRefProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ConnectionRefProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.ConnectionRefProto.name)
  return name_.GetNoArena();
}
inline void ConnectionRefProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ConnectionRefProto.name)
}
#if LANG_CXX11
inline void ConnectionRefProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ConnectionRefProto.name)
}
#endif
inline void ConnectionRefProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ConnectionRefProto.name)
}
inline void ConnectionRefProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ConnectionRefProto.name)
}
inline ::std::string* ConnectionRefProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ConnectionRefProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionRefProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.ConnectionRefProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionRefProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ConnectionRefProto.name)
}

// optional string full_name = 3;
inline bool ConnectionRefProto::has_full_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnectionRefProto::set_has_full_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConnectionRefProto::clear_has_full_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConnectionRefProto::clear_full_name() {
  full_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_full_name();
}
inline const ::std::string& ConnectionRefProto::full_name() const {
  // @@protoc_insertion_point(field_get:zetasql.ConnectionRefProto.full_name)
  return full_name_.GetNoArena();
}
inline void ConnectionRefProto::set_full_name(const ::std::string& value) {
  set_has_full_name();
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ConnectionRefProto.full_name)
}
#if LANG_CXX11
inline void ConnectionRefProto::set_full_name(::std::string&& value) {
  set_has_full_name();
  full_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ConnectionRefProto.full_name)
}
#endif
inline void ConnectionRefProto::set_full_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_full_name();
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ConnectionRefProto.full_name)
}
inline void ConnectionRefProto::set_full_name(const char* value, size_t size) {
  set_has_full_name();
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ConnectionRefProto.full_name)
}
inline ::std::string* ConnectionRefProto::mutable_full_name() {
  set_has_full_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ConnectionRefProto.full_name)
  return full_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionRefProto::release_full_name() {
  // @@protoc_insertion_point(field_release:zetasql.ConnectionRefProto.full_name)
  if (!has_full_name()) {
    return NULL;
  }
  clear_has_full_name();
  return full_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionRefProto::set_allocated_full_name(::std::string* full_name) {
  if (full_name != NULL) {
    set_has_full_name();
  } else {
    clear_has_full_name();
  }
  full_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ConnectionRefProto.full_name)
}

// -------------------------------------------------------------------

// ConstantRefProto

// optional string name = 1;
inline bool ConstantRefProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConstantRefProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConstantRefProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConstantRefProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ConstantRefProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.ConstantRefProto.name)
  return name_.GetNoArena();
}
inline void ConstantRefProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ConstantRefProto.name)
}
#if LANG_CXX11
inline void ConstantRefProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ConstantRefProto.name)
}
#endif
inline void ConstantRefProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ConstantRefProto.name)
}
inline void ConstantRefProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ConstantRefProto.name)
}
inline ::std::string* ConstantRefProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ConstantRefProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConstantRefProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.ConstantRefProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConstantRefProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ConstantRefProto.name)
}

// -------------------------------------------------------------------

// FunctionRefProto

// optional string name = 1;
inline bool FunctionRefProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FunctionRefProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FunctionRefProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FunctionRefProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FunctionRefProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionRefProto.name)
  return name_.GetNoArena();
}
inline void FunctionRefProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionRefProto.name)
}
#if LANG_CXX11
inline void FunctionRefProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.FunctionRefProto.name)
}
#endif
inline void FunctionRefProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.FunctionRefProto.name)
}
inline void FunctionRefProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.FunctionRefProto.name)
}
inline ::std::string* FunctionRefProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.FunctionRefProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FunctionRefProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.FunctionRefProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FunctionRefProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.FunctionRefProto.name)
}

// -------------------------------------------------------------------

// TableValuedFunctionRefProto

// optional string name = 1;
inline bool TableValuedFunctionRefProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableValuedFunctionRefProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableValuedFunctionRefProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableValuedFunctionRefProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& TableValuedFunctionRefProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.TableValuedFunctionRefProto.name)
  return name_.GetNoArena();
}
inline void TableValuedFunctionRefProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.TableValuedFunctionRefProto.name)
}
#if LANG_CXX11
inline void TableValuedFunctionRefProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.TableValuedFunctionRefProto.name)
}
#endif
inline void TableValuedFunctionRefProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.TableValuedFunctionRefProto.name)
}
inline void TableValuedFunctionRefProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.TableValuedFunctionRefProto.name)
}
inline ::std::string* TableValuedFunctionRefProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.TableValuedFunctionRefProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableValuedFunctionRefProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.TableValuedFunctionRefProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableValuedFunctionRefProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.TableValuedFunctionRefProto.name)
}

// -------------------------------------------------------------------

// ResolvedNodeProto

// optional .zetasql.ParseLocationRangeProto parse_location_range = 1;
inline bool ResolvedNodeProto::has_parse_location_range() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedNodeProto::set_has_parse_location_range() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedNodeProto::clear_has_parse_location_range() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::zetasql::ParseLocationRangeProto& ResolvedNodeProto::_internal_parse_location_range() const {
  return *parse_location_range_;
}
inline const ::zetasql::ParseLocationRangeProto& ResolvedNodeProto::parse_location_range() const {
  const ::zetasql::ParseLocationRangeProto* p = parse_location_range_;
  // @@protoc_insertion_point(field_get:zetasql.ResolvedNodeProto.parse_location_range)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ParseLocationRangeProto*>(
      &::zetasql::_ParseLocationRangeProto_default_instance_);
}
inline ::zetasql::ParseLocationRangeProto* ResolvedNodeProto::release_parse_location_range() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedNodeProto.parse_location_range)
  clear_has_parse_location_range();
  ::zetasql::ParseLocationRangeProto* temp = parse_location_range_;
  parse_location_range_ = NULL;
  return temp;
}
inline ::zetasql::ParseLocationRangeProto* ResolvedNodeProto::mutable_parse_location_range() {
  set_has_parse_location_range();
  if (parse_location_range_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ParseLocationRangeProto>(GetArenaNoVirtual());
    parse_location_range_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedNodeProto.parse_location_range)
  return parse_location_range_;
}
inline void ResolvedNodeProto::set_allocated_parse_location_range(::zetasql::ParseLocationRangeProto* parse_location_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(parse_location_range_);
  }
  if (parse_location_range) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parse_location_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parse_location_range, submessage_arena);
    }
    set_has_parse_location_range();
  } else {
    clear_has_parse_location_range();
  }
  parse_location_range_ = parse_location_range;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedNodeProto.parse_location_range)
}

// -------------------------------------------------------------------

// FieldDescriptorRefProto

// optional .zetasql.ProtoTypeProto containing_proto = 1;
inline bool FieldDescriptorRefProto::has_containing_proto() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FieldDescriptorRefProto::set_has_containing_proto() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FieldDescriptorRefProto::clear_has_containing_proto() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::zetasql::ProtoTypeProto& FieldDescriptorRefProto::_internal_containing_proto() const {
  return *containing_proto_;
}
inline const ::zetasql::ProtoTypeProto& FieldDescriptorRefProto::containing_proto() const {
  const ::zetasql::ProtoTypeProto* p = containing_proto_;
  // @@protoc_insertion_point(field_get:zetasql.FieldDescriptorRefProto.containing_proto)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ProtoTypeProto*>(
      &::zetasql::_ProtoTypeProto_default_instance_);
}
inline ::zetasql::ProtoTypeProto* FieldDescriptorRefProto::release_containing_proto() {
  // @@protoc_insertion_point(field_release:zetasql.FieldDescriptorRefProto.containing_proto)
  clear_has_containing_proto();
  ::zetasql::ProtoTypeProto* temp = containing_proto_;
  containing_proto_ = NULL;
  return temp;
}
inline ::zetasql::ProtoTypeProto* FieldDescriptorRefProto::mutable_containing_proto() {
  set_has_containing_proto();
  if (containing_proto_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ProtoTypeProto>(GetArenaNoVirtual());
    containing_proto_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.FieldDescriptorRefProto.containing_proto)
  return containing_proto_;
}
inline void FieldDescriptorRefProto::set_allocated_containing_proto(::zetasql::ProtoTypeProto* containing_proto) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(containing_proto_);
  }
  if (containing_proto) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(containing_proto)->GetArena();
    if (message_arena != submessage_arena) {
      containing_proto = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, containing_proto, submessage_arena);
    }
    set_has_containing_proto();
  } else {
    clear_has_containing_proto();
  }
  containing_proto_ = containing_proto;
  // @@protoc_insertion_point(field_set_allocated:zetasql.FieldDescriptorRefProto.containing_proto)
}

// optional int32 number = 2;
inline bool FieldDescriptorRefProto::has_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FieldDescriptorRefProto::set_has_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FieldDescriptorRefProto::clear_has_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FieldDescriptorRefProto::clear_number() {
  number_ = 0;
  clear_has_number();
}
inline ::google::protobuf::int32 FieldDescriptorRefProto::number() const {
  // @@protoc_insertion_point(field_get:zetasql.FieldDescriptorRefProto.number)
  return number_;
}
inline void FieldDescriptorRefProto::set_number(::google::protobuf::int32 value) {
  set_has_number();
  number_ = value;
  // @@protoc_insertion_point(field_set:zetasql.FieldDescriptorRefProto.number)
}

// -------------------------------------------------------------------

// OneofDescriptorRefProto

// optional .zetasql.ProtoTypeProto containing_proto = 1;
inline bool OneofDescriptorRefProto::has_containing_proto() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneofDescriptorRefProto::set_has_containing_proto() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneofDescriptorRefProto::clear_has_containing_proto() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::zetasql::ProtoTypeProto& OneofDescriptorRefProto::_internal_containing_proto() const {
  return *containing_proto_;
}
inline const ::zetasql::ProtoTypeProto& OneofDescriptorRefProto::containing_proto() const {
  const ::zetasql::ProtoTypeProto* p = containing_proto_;
  // @@protoc_insertion_point(field_get:zetasql.OneofDescriptorRefProto.containing_proto)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ProtoTypeProto*>(
      &::zetasql::_ProtoTypeProto_default_instance_);
}
inline ::zetasql::ProtoTypeProto* OneofDescriptorRefProto::release_containing_proto() {
  // @@protoc_insertion_point(field_release:zetasql.OneofDescriptorRefProto.containing_proto)
  clear_has_containing_proto();
  ::zetasql::ProtoTypeProto* temp = containing_proto_;
  containing_proto_ = NULL;
  return temp;
}
inline ::zetasql::ProtoTypeProto* OneofDescriptorRefProto::mutable_containing_proto() {
  set_has_containing_proto();
  if (containing_proto_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ProtoTypeProto>(GetArenaNoVirtual());
    containing_proto_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.OneofDescriptorRefProto.containing_proto)
  return containing_proto_;
}
inline void OneofDescriptorRefProto::set_allocated_containing_proto(::zetasql::ProtoTypeProto* containing_proto) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(containing_proto_);
  }
  if (containing_proto) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(containing_proto)->GetArena();
    if (message_arena != submessage_arena) {
      containing_proto = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, containing_proto, submessage_arena);
    }
    set_has_containing_proto();
  } else {
    clear_has_containing_proto();
  }
  containing_proto_ = containing_proto;
  // @@protoc_insertion_point(field_set_allocated:zetasql.OneofDescriptorRefProto.containing_proto)
}

// optional int32 index = 2;
inline bool OneofDescriptorRefProto::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneofDescriptorRefProto::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneofDescriptorRefProto::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneofDescriptorRefProto::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 OneofDescriptorRefProto::index() const {
  // @@protoc_insertion_point(field_get:zetasql.OneofDescriptorRefProto.index)
  return index_;
}
inline void OneofDescriptorRefProto::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:zetasql.OneofDescriptorRefProto.index)
}

// -------------------------------------------------------------------

// ProcedureRefProto

// optional string name = 1;
inline bool ProcedureRefProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcedureRefProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcedureRefProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcedureRefProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ProcedureRefProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.ProcedureRefProto.name)
  return name_.GetNoArena();
}
inline void ProcedureRefProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ProcedureRefProto.name)
}
#if LANG_CXX11
inline void ProcedureRefProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ProcedureRefProto.name)
}
#endif
inline void ProcedureRefProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ProcedureRefProto.name)
}
inline void ProcedureRefProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ProcedureRefProto.name)
}
inline ::std::string* ProcedureRefProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ProcedureRefProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcedureRefProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.ProcedureRefProto.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcedureRefProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ProcedureRefProto.name)
}

// -------------------------------------------------------------------

// ResolvedCollationProto

// optional string collation_name = 1;
inline bool ResolvedCollationProto::has_collation_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedCollationProto::set_has_collation_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolvedCollationProto::clear_has_collation_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolvedCollationProto::clear_collation_name() {
  collation_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_collation_name();
}
inline const ::std::string& ResolvedCollationProto::collation_name() const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCollationProto.collation_name)
  return collation_name_.GetNoArena();
}
inline void ResolvedCollationProto::set_collation_name(const ::std::string& value) {
  set_has_collation_name();
  collation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ResolvedCollationProto.collation_name)
}
#if LANG_CXX11
inline void ResolvedCollationProto::set_collation_name(::std::string&& value) {
  set_has_collation_name();
  collation_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ResolvedCollationProto.collation_name)
}
#endif
inline void ResolvedCollationProto::set_collation_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_collation_name();
  collation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ResolvedCollationProto.collation_name)
}
inline void ResolvedCollationProto::set_collation_name(const char* value, size_t size) {
  set_has_collation_name();
  collation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ResolvedCollationProto.collation_name)
}
inline ::std::string* ResolvedCollationProto::mutable_collation_name() {
  set_has_collation_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCollationProto.collation_name)
  return collation_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedCollationProto::release_collation_name() {
  // @@protoc_insertion_point(field_release:zetasql.ResolvedCollationProto.collation_name)
  if (!has_collation_name()) {
    return NULL;
  }
  clear_has_collation_name();
  return collation_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedCollationProto::set_allocated_collation_name(::std::string* collation_name) {
  if (collation_name != NULL) {
    set_has_collation_name();
  } else {
    clear_has_collation_name();
  }
  collation_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collation_name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ResolvedCollationProto.collation_name)
}

// repeated .zetasql.ResolvedCollationProto child_list = 2;
inline int ResolvedCollationProto::child_list_size() const {
  return child_list_.size();
}
inline void ResolvedCollationProto::clear_child_list() {
  child_list_.Clear();
}
inline ::zetasql::ResolvedCollationProto* ResolvedCollationProto::mutable_child_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ResolvedCollationProto.child_list)
  return child_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedCollationProto >*
ResolvedCollationProto::mutable_child_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ResolvedCollationProto.child_list)
  return &child_list_;
}
inline const ::zetasql::ResolvedCollationProto& ResolvedCollationProto::child_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ResolvedCollationProto.child_list)
  return child_list_.Get(index);
}
inline ::zetasql::ResolvedCollationProto* ResolvedCollationProto::add_child_list() {
  // @@protoc_insertion_point(field_add:zetasql.ResolvedCollationProto.child_list)
  return child_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ResolvedCollationProto >&
ResolvedCollationProto::child_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ResolvedCollationProto.child_list)
  return child_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_zetasql_2fresolved_5fast_2fserialization_2eproto
