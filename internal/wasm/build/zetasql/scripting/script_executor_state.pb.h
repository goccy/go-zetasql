// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/scripting/script_executor_state.proto

#ifndef PROTOBUF_INCLUDED_zetasql_2fscripting_2fscript_5fexecutor_5fstate_2eproto
#define PROTOBUF_INCLUDED_zetasql_2fscripting_2fscript_5fexecutor_5fstate_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include "zetasql/proto/function.pb.h"
#include "zetasql/scripting/script_exception.pb.h"
#include "zetasql/scripting/variable.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_zetasql_2fscripting_2fscript_5fexecutor_5fstate_2eproto 

namespace protobuf_zetasql_2fscripting_2fscript_5fexecutor_5fstate_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_zetasql_2fscripting_2fscript_5fexecutor_5fstate_2eproto
namespace zetasql {
class ScriptExecutorStateProto;
class ScriptExecutorStateProtoDefaultTypeInternal;
extern ScriptExecutorStateProtoDefaultTypeInternal _ScriptExecutorStateProto_default_instance_;
class ScriptExecutorStateProto_ProcedureDefinition;
class ScriptExecutorStateProto_ProcedureDefinitionDefaultTypeInternal;
extern ScriptExecutorStateProto_ProcedureDefinitionDefaultTypeInternal _ScriptExecutorStateProto_ProcedureDefinition_default_instance_;
class ScriptExecutorStateProto_ScriptFeatureUsage;
class ScriptExecutorStateProto_ScriptFeatureUsageDefaultTypeInternal;
extern ScriptExecutorStateProto_ScriptFeatureUsageDefaultTypeInternal _ScriptExecutorStateProto_ScriptFeatureUsage_default_instance_;
class ScriptExecutorStateProto_StackFrame;
class ScriptExecutorStateProto_StackFrameDefaultTypeInternal;
extern ScriptExecutorStateProto_StackFrameDefaultTypeInternal _ScriptExecutorStateProto_StackFrame_default_instance_;
class ScriptExecutorStateProto_StackFrame_Parameters;
class ScriptExecutorStateProto_StackFrame_ParametersDefaultTypeInternal;
extern ScriptExecutorStateProto_StackFrame_ParametersDefaultTypeInternal _ScriptExecutorStateProto_StackFrame_Parameters_default_instance_;
}  // namespace zetasql
namespace google {
namespace protobuf {
template<> ::zetasql::ScriptExecutorStateProto* Arena::CreateMaybeMessage<::zetasql::ScriptExecutorStateProto>(Arena*);
template<> ::zetasql::ScriptExecutorStateProto_ProcedureDefinition* Arena::CreateMaybeMessage<::zetasql::ScriptExecutorStateProto_ProcedureDefinition>(Arena*);
template<> ::zetasql::ScriptExecutorStateProto_ScriptFeatureUsage* Arena::CreateMaybeMessage<::zetasql::ScriptExecutorStateProto_ScriptFeatureUsage>(Arena*);
template<> ::zetasql::ScriptExecutorStateProto_StackFrame* Arena::CreateMaybeMessage<::zetasql::ScriptExecutorStateProto_StackFrame>(Arena*);
template<> ::zetasql::ScriptExecutorStateProto_StackFrame_Parameters* Arena::CreateMaybeMessage<::zetasql::ScriptExecutorStateProto_StackFrame_Parameters>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace zetasql {

enum ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode {
  ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode_NONE = 0,
  ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode_NAMED = 1,
  ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode_POSITIONAL = 2
};
bool ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode_IsValid(int value);
const ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode_ParameterMode_MIN = ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode_NONE;
const ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode_ParameterMode_MAX = ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode_POSITIONAL;
const int ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode_ParameterMode_ARRAYSIZE = ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode_ParameterMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode_descriptor();
inline const ::std::string& ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode_Name(ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode_descriptor(), value);
}
inline bool ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode_Parse(
    const ::std::string& name, ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode>(
    ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode_descriptor(), name, value);
}
enum ScriptExecutorStateProto_ScriptFeature {
  ScriptExecutorStateProto_ScriptFeature_INVALID = 0,
  ScriptExecutorStateProto_ScriptFeature_EXCEPTION_CAUGHT = 1,
  ScriptExecutorStateProto_ScriptFeature_CALL_STATEMENT = 2,
  ScriptExecutorStateProto_ScriptFeature_EXECUTE_IMMEDIATE_STATEMENT = 3
};
bool ScriptExecutorStateProto_ScriptFeature_IsValid(int value);
const ScriptExecutorStateProto_ScriptFeature ScriptExecutorStateProto_ScriptFeature_ScriptFeature_MIN = ScriptExecutorStateProto_ScriptFeature_INVALID;
const ScriptExecutorStateProto_ScriptFeature ScriptExecutorStateProto_ScriptFeature_ScriptFeature_MAX = ScriptExecutorStateProto_ScriptFeature_EXECUTE_IMMEDIATE_STATEMENT;
const int ScriptExecutorStateProto_ScriptFeature_ScriptFeature_ARRAYSIZE = ScriptExecutorStateProto_ScriptFeature_ScriptFeature_MAX + 1;

const ::google::protobuf::EnumDescriptor* ScriptExecutorStateProto_ScriptFeature_descriptor();
inline const ::std::string& ScriptExecutorStateProto_ScriptFeature_Name(ScriptExecutorStateProto_ScriptFeature value) {
  return ::google::protobuf::internal::NameOfEnum(
    ScriptExecutorStateProto_ScriptFeature_descriptor(), value);
}
inline bool ScriptExecutorStateProto_ScriptFeature_Parse(
    const ::std::string& name, ScriptExecutorStateProto_ScriptFeature* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ScriptExecutorStateProto_ScriptFeature>(
    ScriptExecutorStateProto_ScriptFeature_descriptor(), name, value);
}
// ===================================================================

class ScriptExecutorStateProto_ProcedureDefinition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ScriptExecutorStateProto.ProcedureDefinition) */ {
 public:
  ScriptExecutorStateProto_ProcedureDefinition();
  virtual ~ScriptExecutorStateProto_ProcedureDefinition();

  ScriptExecutorStateProto_ProcedureDefinition(const ScriptExecutorStateProto_ProcedureDefinition& from);

  inline ScriptExecutorStateProto_ProcedureDefinition& operator=(const ScriptExecutorStateProto_ProcedureDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScriptExecutorStateProto_ProcedureDefinition(ScriptExecutorStateProto_ProcedureDefinition&& from) noexcept
    : ScriptExecutorStateProto_ProcedureDefinition() {
    *this = ::std::move(from);
  }

  inline ScriptExecutorStateProto_ProcedureDefinition& operator=(ScriptExecutorStateProto_ProcedureDefinition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScriptExecutorStateProto_ProcedureDefinition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScriptExecutorStateProto_ProcedureDefinition* internal_default_instance() {
    return reinterpret_cast<const ScriptExecutorStateProto_ProcedureDefinition*>(
               &_ScriptExecutorStateProto_ProcedureDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ScriptExecutorStateProto_ProcedureDefinition* other);
  friend void swap(ScriptExecutorStateProto_ProcedureDefinition& a, ScriptExecutorStateProto_ProcedureDefinition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScriptExecutorStateProto_ProcedureDefinition* New() const final {
    return CreateMaybeMessage<ScriptExecutorStateProto_ProcedureDefinition>(NULL);
  }

  ScriptExecutorStateProto_ProcedureDefinition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScriptExecutorStateProto_ProcedureDefinition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScriptExecutorStateProto_ProcedureDefinition& from);
  void MergeFrom(const ScriptExecutorStateProto_ProcedureDefinition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScriptExecutorStateProto_ProcedureDefinition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string argument_name_list = 3;
  int argument_name_list_size() const;
  void clear_argument_name_list();
  static const int kArgumentNameListFieldNumber = 3;
  const ::std::string& argument_name_list(int index) const;
  ::std::string* mutable_argument_name_list(int index);
  void set_argument_name_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_argument_name_list(int index, ::std::string&& value);
  #endif
  void set_argument_name_list(int index, const char* value);
  void set_argument_name_list(int index, const char* value, size_t size);
  ::std::string* add_argument_name_list();
  void add_argument_name_list(const ::std::string& value);
  #if LANG_CXX11
  void add_argument_name_list(::std::string&& value);
  #endif
  void add_argument_name_list(const char* value);
  void add_argument_name_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& argument_name_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_argument_name_list();

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string body = 4;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 4;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // optional .zetasql.FunctionSignatureProto signature = 2;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 2;
  private:
  const ::zetasql::FunctionSignatureProto& _internal_signature() const;
  public:
  const ::zetasql::FunctionSignatureProto& signature() const;
  ::zetasql::FunctionSignatureProto* release_signature();
  ::zetasql::FunctionSignatureProto* mutable_signature();
  void set_allocated_signature(::zetasql::FunctionSignatureProto* signature);

  // optional bool is_dynamic_sql = 5;
  bool has_is_dynamic_sql() const;
  void clear_is_dynamic_sql();
  static const int kIsDynamicSqlFieldNumber = 5;
  bool is_dynamic_sql() const;
  void set_is_dynamic_sql(bool value);

  // @@protoc_insertion_point(class_scope:zetasql.ScriptExecutorStateProto.ProcedureDefinition)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_signature();
  void clear_has_signature();
  void set_has_body();
  void clear_has_body();
  void set_has_is_dynamic_sql();
  void clear_has_is_dynamic_sql();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> argument_name_list_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::zetasql::FunctionSignatureProto* signature_;
  bool is_dynamic_sql_;
  friend struct ::protobuf_zetasql_2fscripting_2fscript_5fexecutor_5fstate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScriptExecutorStateProto_StackFrame_Parameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ScriptExecutorStateProto.StackFrame.Parameters) */ {
 public:
  ScriptExecutorStateProto_StackFrame_Parameters();
  virtual ~ScriptExecutorStateProto_StackFrame_Parameters();

  ScriptExecutorStateProto_StackFrame_Parameters(const ScriptExecutorStateProto_StackFrame_Parameters& from);

  inline ScriptExecutorStateProto_StackFrame_Parameters& operator=(const ScriptExecutorStateProto_StackFrame_Parameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScriptExecutorStateProto_StackFrame_Parameters(ScriptExecutorStateProto_StackFrame_Parameters&& from) noexcept
    : ScriptExecutorStateProto_StackFrame_Parameters() {
    *this = ::std::move(from);
  }

  inline ScriptExecutorStateProto_StackFrame_Parameters& operator=(ScriptExecutorStateProto_StackFrame_Parameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScriptExecutorStateProto_StackFrame_Parameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScriptExecutorStateProto_StackFrame_Parameters* internal_default_instance() {
    return reinterpret_cast<const ScriptExecutorStateProto_StackFrame_Parameters*>(
               &_ScriptExecutorStateProto_StackFrame_Parameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ScriptExecutorStateProto_StackFrame_Parameters* other);
  friend void swap(ScriptExecutorStateProto_StackFrame_Parameters& a, ScriptExecutorStateProto_StackFrame_Parameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScriptExecutorStateProto_StackFrame_Parameters* New() const final {
    return CreateMaybeMessage<ScriptExecutorStateProto_StackFrame_Parameters>(NULL);
  }

  ScriptExecutorStateProto_StackFrame_Parameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScriptExecutorStateProto_StackFrame_Parameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScriptExecutorStateProto_StackFrame_Parameters& from);
  void MergeFrom(const ScriptExecutorStateProto_StackFrame_Parameters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScriptExecutorStateProto_StackFrame_Parameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode ParameterMode;
  static const ParameterMode NONE =
    ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode_NONE;
  static const ParameterMode NAMED =
    ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode_NAMED;
  static const ParameterMode POSITIONAL =
    ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode_POSITIONAL;
  static inline bool ParameterMode_IsValid(int value) {
    return ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode_IsValid(value);
  }
  static const ParameterMode ParameterMode_MIN =
    ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode_ParameterMode_MIN;
  static const ParameterMode ParameterMode_MAX =
    ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode_ParameterMode_MAX;
  static const int ParameterMode_ARRAYSIZE =
    ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode_ParameterMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ParameterMode_descriptor() {
    return ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode_descriptor();
  }
  static inline const ::std::string& ParameterMode_Name(ParameterMode value) {
    return ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode_Name(value);
  }
  static inline bool ParameterMode_Parse(const ::std::string& name,
      ParameterMode* value) {
    return ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .zetasql.Variable variables = 5;
  int variables_size() const;
  void clear_variables();
  static const int kVariablesFieldNumber = 5;
  ::zetasql::Variable* mutable_variables(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::Variable >*
      mutable_variables();
  const ::zetasql::Variable& variables(int index) const;
  ::zetasql::Variable* add_variables();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::Variable >&
      variables() const;

  // optional .zetasql.ScriptExecutorStateProto.StackFrame.Parameters.ParameterMode mode = 4;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 4;
  ::zetasql::ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode mode() const;
  void set_mode(::zetasql::ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode value);

  // @@protoc_insertion_point(class_scope:zetasql.ScriptExecutorStateProto.StackFrame.Parameters)
 private:
  void set_has_mode();
  void clear_has_mode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::Variable > variables_;
  int mode_;
  friend struct ::protobuf_zetasql_2fscripting_2fscript_5fexecutor_5fstate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScriptExecutorStateProto_StackFrame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ScriptExecutorStateProto.StackFrame) */ {
 public:
  ScriptExecutorStateProto_StackFrame();
  virtual ~ScriptExecutorStateProto_StackFrame();

  ScriptExecutorStateProto_StackFrame(const ScriptExecutorStateProto_StackFrame& from);

  inline ScriptExecutorStateProto_StackFrame& operator=(const ScriptExecutorStateProto_StackFrame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScriptExecutorStateProto_StackFrame(ScriptExecutorStateProto_StackFrame&& from) noexcept
    : ScriptExecutorStateProto_StackFrame() {
    *this = ::std::move(from);
  }

  inline ScriptExecutorStateProto_StackFrame& operator=(ScriptExecutorStateProto_StackFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScriptExecutorStateProto_StackFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScriptExecutorStateProto_StackFrame* internal_default_instance() {
    return reinterpret_cast<const ScriptExecutorStateProto_StackFrame*>(
               &_ScriptExecutorStateProto_StackFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ScriptExecutorStateProto_StackFrame* other);
  friend void swap(ScriptExecutorStateProto_StackFrame& a, ScriptExecutorStateProto_StackFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScriptExecutorStateProto_StackFrame* New() const final {
    return CreateMaybeMessage<ScriptExecutorStateProto_StackFrame>(NULL);
  }

  ScriptExecutorStateProto_StackFrame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScriptExecutorStateProto_StackFrame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScriptExecutorStateProto_StackFrame& from);
  void MergeFrom(const ScriptExecutorStateProto_StackFrame& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScriptExecutorStateProto_StackFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ScriptExecutorStateProto_StackFrame_Parameters Parameters;

  // accessors -------------------------------------------------------

  // repeated .zetasql.Variable variables = 2;
  int variables_size() const;
  void clear_variables();
  static const int kVariablesFieldNumber = 2;
  ::zetasql::Variable* mutable_variables(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::Variable >*
      mutable_variables();
  const ::zetasql::Variable& variables(int index) const;
  ::zetasql::Variable* add_variables();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::Variable >&
      variables() const;

  // repeated .google.protobuf.Any for_loop_stack = 6;
  int for_loop_stack_size() const;
  void clear_for_loop_stack();
  static const int kForLoopStackFieldNumber = 6;
  ::google::protobuf::Any* mutable_for_loop_stack(int index);
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_for_loop_stack();
  const ::google::protobuf::Any& for_loop_stack(int index) const;
  ::google::protobuf::Any* add_for_loop_stack();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      for_loop_stack() const;

  // optional .zetasql.ScriptExecutorStateProto.ProcedureDefinition procedure_definition = 1;
  bool has_procedure_definition() const;
  void clear_procedure_definition();
  static const int kProcedureDefinitionFieldNumber = 1;
  private:
  const ::zetasql::ScriptExecutorStateProto_ProcedureDefinition& _internal_procedure_definition() const;
  public:
  const ::zetasql::ScriptExecutorStateProto_ProcedureDefinition& procedure_definition() const;
  ::zetasql::ScriptExecutorStateProto_ProcedureDefinition* release_procedure_definition();
  ::zetasql::ScriptExecutorStateProto_ProcedureDefinition* mutable_procedure_definition();
  void set_allocated_procedure_definition(::zetasql::ScriptExecutorStateProto_ProcedureDefinition* procedure_definition);

  // optional .zetasql.ScriptExecutorStateProto.StackFrame.Parameters parameters = 4;
  bool has_parameters() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 4;
  private:
  const ::zetasql::ScriptExecutorStateProto_StackFrame_Parameters& _internal_parameters() const;
  public:
  const ::zetasql::ScriptExecutorStateProto_StackFrame_Parameters& parameters() const;
  ::zetasql::ScriptExecutorStateProto_StackFrame_Parameters* release_parameters();
  ::zetasql::ScriptExecutorStateProto_StackFrame_Parameters* mutable_parameters();
  void set_allocated_parameters(::zetasql::ScriptExecutorStateProto_StackFrame_Parameters* parameters);

  // optional int32 current_location_byte_offset = 3;
  bool has_current_location_byte_offset() const;
  void clear_current_location_byte_offset();
  static const int kCurrentLocationByteOffsetFieldNumber = 3;
  ::google::protobuf::int32 current_location_byte_offset() const;
  void set_current_location_byte_offset(::google::protobuf::int32 value);

  // optional int32 control_flow_node_kind = 5;
  bool has_control_flow_node_kind() const;
  void clear_control_flow_node_kind();
  static const int kControlFlowNodeKindFieldNumber = 5;
  ::google::protobuf::int32 control_flow_node_kind() const;
  void set_control_flow_node_kind(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zetasql.ScriptExecutorStateProto.StackFrame)
 private:
  void set_has_procedure_definition();
  void clear_has_procedure_definition();
  void set_has_current_location_byte_offset();
  void clear_has_current_location_byte_offset();
  void set_has_control_flow_node_kind();
  void clear_has_control_flow_node_kind();
  void set_has_parameters();
  void clear_has_parameters();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::Variable > variables_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > for_loop_stack_;
  ::zetasql::ScriptExecutorStateProto_ProcedureDefinition* procedure_definition_;
  ::zetasql::ScriptExecutorStateProto_StackFrame_Parameters* parameters_;
  ::google::protobuf::int32 current_location_byte_offset_;
  ::google::protobuf::int32 control_flow_node_kind_;
  friend struct ::protobuf_zetasql_2fscripting_2fscript_5fexecutor_5fstate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScriptExecutorStateProto_ScriptFeatureUsage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ScriptExecutorStateProto.ScriptFeatureUsage) */ {
 public:
  ScriptExecutorStateProto_ScriptFeatureUsage();
  virtual ~ScriptExecutorStateProto_ScriptFeatureUsage();

  ScriptExecutorStateProto_ScriptFeatureUsage(const ScriptExecutorStateProto_ScriptFeatureUsage& from);

  inline ScriptExecutorStateProto_ScriptFeatureUsage& operator=(const ScriptExecutorStateProto_ScriptFeatureUsage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScriptExecutorStateProto_ScriptFeatureUsage(ScriptExecutorStateProto_ScriptFeatureUsage&& from) noexcept
    : ScriptExecutorStateProto_ScriptFeatureUsage() {
    *this = ::std::move(from);
  }

  inline ScriptExecutorStateProto_ScriptFeatureUsage& operator=(ScriptExecutorStateProto_ScriptFeatureUsage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScriptExecutorStateProto_ScriptFeatureUsage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScriptExecutorStateProto_ScriptFeatureUsage* internal_default_instance() {
    return reinterpret_cast<const ScriptExecutorStateProto_ScriptFeatureUsage*>(
               &_ScriptExecutorStateProto_ScriptFeatureUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ScriptExecutorStateProto_ScriptFeatureUsage* other);
  friend void swap(ScriptExecutorStateProto_ScriptFeatureUsage& a, ScriptExecutorStateProto_ScriptFeatureUsage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScriptExecutorStateProto_ScriptFeatureUsage* New() const final {
    return CreateMaybeMessage<ScriptExecutorStateProto_ScriptFeatureUsage>(NULL);
  }

  ScriptExecutorStateProto_ScriptFeatureUsage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScriptExecutorStateProto_ScriptFeatureUsage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScriptExecutorStateProto_ScriptFeatureUsage& from);
  void MergeFrom(const ScriptExecutorStateProto_ScriptFeatureUsage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScriptExecutorStateProto_ScriptFeatureUsage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 exception = 1;
  bool has_exception() const;
  void clear_exception();
  static const int kExceptionFieldNumber = 1;
  ::google::protobuf::int32 exception() const;
  void set_exception(::google::protobuf::int32 value);

  // optional int32 call_stmt = 2;
  bool has_call_stmt() const;
  void clear_call_stmt();
  static const int kCallStmtFieldNumber = 2;
  ::google::protobuf::int32 call_stmt() const;
  void set_call_stmt(::google::protobuf::int32 value);

  // optional int32 execute_immediate_stmt = 3;
  bool has_execute_immediate_stmt() const;
  void clear_execute_immediate_stmt();
  static const int kExecuteImmediateStmtFieldNumber = 3;
  ::google::protobuf::int32 execute_immediate_stmt() const;
  void set_execute_immediate_stmt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zetasql.ScriptExecutorStateProto.ScriptFeatureUsage)
 private:
  void set_has_exception();
  void clear_has_exception();
  void set_has_call_stmt();
  void clear_has_call_stmt();
  void set_has_execute_immediate_stmt();
  void clear_has_execute_immediate_stmt();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 exception_;
  ::google::protobuf::int32 call_stmt_;
  ::google::protobuf::int32 execute_immediate_stmt_;
  friend struct ::protobuf_zetasql_2fscripting_2fscript_5fexecutor_5fstate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScriptExecutorStateProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.ScriptExecutorStateProto) */ {
 public:
  ScriptExecutorStateProto();
  virtual ~ScriptExecutorStateProto();

  ScriptExecutorStateProto(const ScriptExecutorStateProto& from);

  inline ScriptExecutorStateProto& operator=(const ScriptExecutorStateProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScriptExecutorStateProto(ScriptExecutorStateProto&& from) noexcept
    : ScriptExecutorStateProto() {
    *this = ::std::move(from);
  }

  inline ScriptExecutorStateProto& operator=(ScriptExecutorStateProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScriptExecutorStateProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScriptExecutorStateProto* internal_default_instance() {
    return reinterpret_cast<const ScriptExecutorStateProto*>(
               &_ScriptExecutorStateProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ScriptExecutorStateProto* other);
  friend void swap(ScriptExecutorStateProto& a, ScriptExecutorStateProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScriptExecutorStateProto* New() const final {
    return CreateMaybeMessage<ScriptExecutorStateProto>(NULL);
  }

  ScriptExecutorStateProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScriptExecutorStateProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScriptExecutorStateProto& from);
  void MergeFrom(const ScriptExecutorStateProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScriptExecutorStateProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ScriptExecutorStateProto_ProcedureDefinition ProcedureDefinition;
  typedef ScriptExecutorStateProto_StackFrame StackFrame;
  typedef ScriptExecutorStateProto_ScriptFeatureUsage ScriptFeatureUsage;

  typedef ScriptExecutorStateProto_ScriptFeature ScriptFeature;
  static const ScriptFeature INVALID =
    ScriptExecutorStateProto_ScriptFeature_INVALID;
  static const ScriptFeature EXCEPTION_CAUGHT =
    ScriptExecutorStateProto_ScriptFeature_EXCEPTION_CAUGHT;
  static const ScriptFeature CALL_STATEMENT =
    ScriptExecutorStateProto_ScriptFeature_CALL_STATEMENT;
  static const ScriptFeature EXECUTE_IMMEDIATE_STATEMENT =
    ScriptExecutorStateProto_ScriptFeature_EXECUTE_IMMEDIATE_STATEMENT;
  static inline bool ScriptFeature_IsValid(int value) {
    return ScriptExecutorStateProto_ScriptFeature_IsValid(value);
  }
  static const ScriptFeature ScriptFeature_MIN =
    ScriptExecutorStateProto_ScriptFeature_ScriptFeature_MIN;
  static const ScriptFeature ScriptFeature_MAX =
    ScriptExecutorStateProto_ScriptFeature_ScriptFeature_MAX;
  static const int ScriptFeature_ARRAYSIZE =
    ScriptExecutorStateProto_ScriptFeature_ScriptFeature_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ScriptFeature_descriptor() {
    return ScriptExecutorStateProto_ScriptFeature_descriptor();
  }
  static inline const ::std::string& ScriptFeature_Name(ScriptFeature value) {
    return ScriptExecutorStateProto_ScriptFeature_Name(value);
  }
  static inline bool ScriptFeature_Parse(const ::std::string& name,
      ScriptFeature* value) {
    return ScriptExecutorStateProto_ScriptFeature_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .zetasql.ScriptExecutorStateProto.StackFrame callstack = 1;
  int callstack_size() const;
  void clear_callstack();
  static const int kCallstackFieldNumber = 1;
  ::zetasql::ScriptExecutorStateProto_StackFrame* mutable_callstack(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ScriptExecutorStateProto_StackFrame >*
      mutable_callstack();
  const ::zetasql::ScriptExecutorStateProto_StackFrame& callstack(int index) const;
  ::zetasql::ScriptExecutorStateProto_StackFrame* add_callstack();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ScriptExecutorStateProto_StackFrame >&
      callstack() const;

  // repeated .zetasql.ScriptException pending_exceptions = 2;
  int pending_exceptions_size() const;
  void clear_pending_exceptions();
  static const int kPendingExceptionsFieldNumber = 2;
  ::zetasql::ScriptException* mutable_pending_exceptions(int index);
  ::google::protobuf::RepeatedPtrField< ::zetasql::ScriptException >*
      mutable_pending_exceptions();
  const ::zetasql::ScriptException& pending_exceptions(int index) const;
  ::zetasql::ScriptException* add_pending_exceptions();
  const ::google::protobuf::RepeatedPtrField< ::zetasql::ScriptException >&
      pending_exceptions() const;

  // repeated .zetasql.ScriptExecutorStateProto.ScriptFeature triggered_features = 3;
  int triggered_features_size() const;
  void clear_triggered_features();
  static const int kTriggeredFeaturesFieldNumber = 3;
  ::zetasql::ScriptExecutorStateProto_ScriptFeature triggered_features(int index) const;
  void set_triggered_features(int index, ::zetasql::ScriptExecutorStateProto_ScriptFeature value);
  void add_triggered_features(::zetasql::ScriptExecutorStateProto_ScriptFeature value);
  const ::google::protobuf::RepeatedField<int>& triggered_features() const;
  ::google::protobuf::RepeatedField<int>* mutable_triggered_features();

  // optional string timezone = 4;
  bool has_timezone() const;
  void clear_timezone();
  static const int kTimezoneFieldNumber = 4;
  const ::std::string& timezone() const;
  void set_timezone(const ::std::string& value);
  #if LANG_CXX11
  void set_timezone(::std::string&& value);
  #endif
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  ::std::string* mutable_timezone();
  ::std::string* release_timezone();
  void set_allocated_timezone(::std::string* timezone);

  // optional .zetasql.ScriptExecutorStateProto.ScriptFeatureUsage sql_feature_usage = 7;
  bool has_sql_feature_usage() const;
  void clear_sql_feature_usage();
  static const int kSqlFeatureUsageFieldNumber = 7;
  private:
  const ::zetasql::ScriptExecutorStateProto_ScriptFeatureUsage& _internal_sql_feature_usage() const;
  public:
  const ::zetasql::ScriptExecutorStateProto_ScriptFeatureUsage& sql_feature_usage() const;
  ::zetasql::ScriptExecutorStateProto_ScriptFeatureUsage* release_sql_feature_usage();
  ::zetasql::ScriptExecutorStateProto_ScriptFeatureUsage* mutable_sql_feature_usage();
  void set_allocated_sql_feature_usage(::zetasql::ScriptExecutorStateProto_ScriptFeatureUsage* sql_feature_usage);

  // optional int64 case_stmt_true_branch_index = 5;
  bool has_case_stmt_true_branch_index() const;
  void clear_case_stmt_true_branch_index();
  static const int kCaseStmtTrueBranchIndexFieldNumber = 5;
  ::google::protobuf::int64 case_stmt_true_branch_index() const;
  void set_case_stmt_true_branch_index(::google::protobuf::int64 value);

  // optional int64 case_stmt_current_branch_index = 6;
  bool has_case_stmt_current_branch_index() const;
  void clear_case_stmt_current_branch_index();
  static const int kCaseStmtCurrentBranchIndexFieldNumber = 6;
  ::google::protobuf::int64 case_stmt_current_branch_index() const;
  void set_case_stmt_current_branch_index(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zetasql.ScriptExecutorStateProto)
 private:
  void set_has_timezone();
  void clear_has_timezone();
  void set_has_case_stmt_true_branch_index();
  void clear_has_case_stmt_true_branch_index();
  void set_has_case_stmt_current_branch_index();
  void clear_has_case_stmt_current_branch_index();
  void set_has_sql_feature_usage();
  void clear_has_sql_feature_usage();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ScriptExecutorStateProto_StackFrame > callstack_;
  ::google::protobuf::RepeatedPtrField< ::zetasql::ScriptException > pending_exceptions_;
  ::google::protobuf::RepeatedField<int> triggered_features_;
  ::google::protobuf::internal::ArenaStringPtr timezone_;
  ::zetasql::ScriptExecutorStateProto_ScriptFeatureUsage* sql_feature_usage_;
  ::google::protobuf::int64 case_stmt_true_branch_index_;
  ::google::protobuf::int64 case_stmt_current_branch_index_;
  friend struct ::protobuf_zetasql_2fscripting_2fscript_5fexecutor_5fstate_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ScriptExecutorStateProto_ProcedureDefinition

// optional string name = 1;
inline bool ScriptExecutorStateProto_ProcedureDefinition::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScriptExecutorStateProto_ProcedureDefinition::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScriptExecutorStateProto_ProcedureDefinition::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScriptExecutorStateProto_ProcedureDefinition::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ScriptExecutorStateProto_ProcedureDefinition::name() const {
  // @@protoc_insertion_point(field_get:zetasql.ScriptExecutorStateProto.ProcedureDefinition.name)
  return name_.GetNoArena();
}
inline void ScriptExecutorStateProto_ProcedureDefinition::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ScriptExecutorStateProto.ProcedureDefinition.name)
}
#if LANG_CXX11
inline void ScriptExecutorStateProto_ProcedureDefinition::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ScriptExecutorStateProto.ProcedureDefinition.name)
}
#endif
inline void ScriptExecutorStateProto_ProcedureDefinition::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ScriptExecutorStateProto.ProcedureDefinition.name)
}
inline void ScriptExecutorStateProto_ProcedureDefinition::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ScriptExecutorStateProto.ProcedureDefinition.name)
}
inline ::std::string* ScriptExecutorStateProto_ProcedureDefinition::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ScriptExecutorStateProto.ProcedureDefinition.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScriptExecutorStateProto_ProcedureDefinition::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.ScriptExecutorStateProto.ProcedureDefinition.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScriptExecutorStateProto_ProcedureDefinition::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ScriptExecutorStateProto.ProcedureDefinition.name)
}

// optional .zetasql.FunctionSignatureProto signature = 2;
inline bool ScriptExecutorStateProto_ProcedureDefinition::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScriptExecutorStateProto_ProcedureDefinition::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScriptExecutorStateProto_ProcedureDefinition::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasql::FunctionSignatureProto& ScriptExecutorStateProto_ProcedureDefinition::_internal_signature() const {
  return *signature_;
}
inline const ::zetasql::FunctionSignatureProto& ScriptExecutorStateProto_ProcedureDefinition::signature() const {
  const ::zetasql::FunctionSignatureProto* p = signature_;
  // @@protoc_insertion_point(field_get:zetasql.ScriptExecutorStateProto.ProcedureDefinition.signature)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::FunctionSignatureProto*>(
      &::zetasql::_FunctionSignatureProto_default_instance_);
}
inline ::zetasql::FunctionSignatureProto* ScriptExecutorStateProto_ProcedureDefinition::release_signature() {
  // @@protoc_insertion_point(field_release:zetasql.ScriptExecutorStateProto.ProcedureDefinition.signature)
  clear_has_signature();
  ::zetasql::FunctionSignatureProto* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline ::zetasql::FunctionSignatureProto* ScriptExecutorStateProto_ProcedureDefinition::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::FunctionSignatureProto>(GetArenaNoVirtual());
    signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ScriptExecutorStateProto.ProcedureDefinition.signature)
  return signature_;
}
inline void ScriptExecutorStateProto_ProcedureDefinition::set_allocated_signature(::zetasql::FunctionSignatureProto* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(signature_);
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ScriptExecutorStateProto.ProcedureDefinition.signature)
}

// repeated string argument_name_list = 3;
inline int ScriptExecutorStateProto_ProcedureDefinition::argument_name_list_size() const {
  return argument_name_list_.size();
}
inline void ScriptExecutorStateProto_ProcedureDefinition::clear_argument_name_list() {
  argument_name_list_.Clear();
}
inline const ::std::string& ScriptExecutorStateProto_ProcedureDefinition::argument_name_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ScriptExecutorStateProto.ProcedureDefinition.argument_name_list)
  return argument_name_list_.Get(index);
}
inline ::std::string* ScriptExecutorStateProto_ProcedureDefinition::mutable_argument_name_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ScriptExecutorStateProto.ProcedureDefinition.argument_name_list)
  return argument_name_list_.Mutable(index);
}
inline void ScriptExecutorStateProto_ProcedureDefinition::set_argument_name_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zetasql.ScriptExecutorStateProto.ProcedureDefinition.argument_name_list)
  argument_name_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ScriptExecutorStateProto_ProcedureDefinition::set_argument_name_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasql.ScriptExecutorStateProto.ProcedureDefinition.argument_name_list)
  argument_name_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ScriptExecutorStateProto_ProcedureDefinition::set_argument_name_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  argument_name_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ScriptExecutorStateProto.ProcedureDefinition.argument_name_list)
}
inline void ScriptExecutorStateProto_ProcedureDefinition::set_argument_name_list(int index, const char* value, size_t size) {
  argument_name_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ScriptExecutorStateProto.ProcedureDefinition.argument_name_list)
}
inline ::std::string* ScriptExecutorStateProto_ProcedureDefinition::add_argument_name_list() {
  // @@protoc_insertion_point(field_add_mutable:zetasql.ScriptExecutorStateProto.ProcedureDefinition.argument_name_list)
  return argument_name_list_.Add();
}
inline void ScriptExecutorStateProto_ProcedureDefinition::add_argument_name_list(const ::std::string& value) {
  argument_name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ScriptExecutorStateProto.ProcedureDefinition.argument_name_list)
}
#if LANG_CXX11
inline void ScriptExecutorStateProto_ProcedureDefinition::add_argument_name_list(::std::string&& value) {
  argument_name_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ScriptExecutorStateProto.ProcedureDefinition.argument_name_list)
}
#endif
inline void ScriptExecutorStateProto_ProcedureDefinition::add_argument_name_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  argument_name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ScriptExecutorStateProto.ProcedureDefinition.argument_name_list)
}
inline void ScriptExecutorStateProto_ProcedureDefinition::add_argument_name_list(const char* value, size_t size) {
  argument_name_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ScriptExecutorStateProto.ProcedureDefinition.argument_name_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ScriptExecutorStateProto_ProcedureDefinition::argument_name_list() const {
  // @@protoc_insertion_point(field_list:zetasql.ScriptExecutorStateProto.ProcedureDefinition.argument_name_list)
  return argument_name_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ScriptExecutorStateProto_ProcedureDefinition::mutable_argument_name_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ScriptExecutorStateProto.ProcedureDefinition.argument_name_list)
  return &argument_name_list_;
}

// optional string body = 4;
inline bool ScriptExecutorStateProto_ProcedureDefinition::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScriptExecutorStateProto_ProcedureDefinition::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScriptExecutorStateProto_ProcedureDefinition::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScriptExecutorStateProto_ProcedureDefinition::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
inline const ::std::string& ScriptExecutorStateProto_ProcedureDefinition::body() const {
  // @@protoc_insertion_point(field_get:zetasql.ScriptExecutorStateProto.ProcedureDefinition.body)
  return body_.GetNoArena();
}
inline void ScriptExecutorStateProto_ProcedureDefinition::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ScriptExecutorStateProto.ProcedureDefinition.body)
}
#if LANG_CXX11
inline void ScriptExecutorStateProto_ProcedureDefinition::set_body(::std::string&& value) {
  set_has_body();
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ScriptExecutorStateProto.ProcedureDefinition.body)
}
#endif
inline void ScriptExecutorStateProto_ProcedureDefinition::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ScriptExecutorStateProto.ProcedureDefinition.body)
}
inline void ScriptExecutorStateProto_ProcedureDefinition::set_body(const char* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ScriptExecutorStateProto.ProcedureDefinition.body)
}
inline ::std::string* ScriptExecutorStateProto_ProcedureDefinition::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:zetasql.ScriptExecutorStateProto.ProcedureDefinition.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScriptExecutorStateProto_ProcedureDefinition::release_body() {
  // @@protoc_insertion_point(field_release:zetasql.ScriptExecutorStateProto.ProcedureDefinition.body)
  if (!has_body()) {
    return NULL;
  }
  clear_has_body();
  return body_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScriptExecutorStateProto_ProcedureDefinition::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ScriptExecutorStateProto.ProcedureDefinition.body)
}

// optional bool is_dynamic_sql = 5;
inline bool ScriptExecutorStateProto_ProcedureDefinition::has_is_dynamic_sql() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScriptExecutorStateProto_ProcedureDefinition::set_has_is_dynamic_sql() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScriptExecutorStateProto_ProcedureDefinition::clear_has_is_dynamic_sql() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScriptExecutorStateProto_ProcedureDefinition::clear_is_dynamic_sql() {
  is_dynamic_sql_ = false;
  clear_has_is_dynamic_sql();
}
inline bool ScriptExecutorStateProto_ProcedureDefinition::is_dynamic_sql() const {
  // @@protoc_insertion_point(field_get:zetasql.ScriptExecutorStateProto.ProcedureDefinition.is_dynamic_sql)
  return is_dynamic_sql_;
}
inline void ScriptExecutorStateProto_ProcedureDefinition::set_is_dynamic_sql(bool value) {
  set_has_is_dynamic_sql();
  is_dynamic_sql_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ScriptExecutorStateProto.ProcedureDefinition.is_dynamic_sql)
}

// -------------------------------------------------------------------

// ScriptExecutorStateProto_StackFrame_Parameters

// optional .zetasql.ScriptExecutorStateProto.StackFrame.Parameters.ParameterMode mode = 4;
inline bool ScriptExecutorStateProto_StackFrame_Parameters::has_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScriptExecutorStateProto_StackFrame_Parameters::set_has_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScriptExecutorStateProto_StackFrame_Parameters::clear_has_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScriptExecutorStateProto_StackFrame_Parameters::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::zetasql::ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode ScriptExecutorStateProto_StackFrame_Parameters::mode() const {
  // @@protoc_insertion_point(field_get:zetasql.ScriptExecutorStateProto.StackFrame.Parameters.mode)
  return static_cast< ::zetasql::ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode >(mode_);
}
inline void ScriptExecutorStateProto_StackFrame_Parameters::set_mode(::zetasql::ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode value) {
  assert(::zetasql::ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ScriptExecutorStateProto.StackFrame.Parameters.mode)
}

// repeated .zetasql.Variable variables = 5;
inline int ScriptExecutorStateProto_StackFrame_Parameters::variables_size() const {
  return variables_.size();
}
inline ::zetasql::Variable* ScriptExecutorStateProto_StackFrame_Parameters::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ScriptExecutorStateProto.StackFrame.Parameters.variables)
  return variables_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::Variable >*
ScriptExecutorStateProto_StackFrame_Parameters::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ScriptExecutorStateProto.StackFrame.Parameters.variables)
  return &variables_;
}
inline const ::zetasql::Variable& ScriptExecutorStateProto_StackFrame_Parameters::variables(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ScriptExecutorStateProto.StackFrame.Parameters.variables)
  return variables_.Get(index);
}
inline ::zetasql::Variable* ScriptExecutorStateProto_StackFrame_Parameters::add_variables() {
  // @@protoc_insertion_point(field_add:zetasql.ScriptExecutorStateProto.StackFrame.Parameters.variables)
  return variables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::Variable >&
ScriptExecutorStateProto_StackFrame_Parameters::variables() const {
  // @@protoc_insertion_point(field_list:zetasql.ScriptExecutorStateProto.StackFrame.Parameters.variables)
  return variables_;
}

// -------------------------------------------------------------------

// ScriptExecutorStateProto_StackFrame

// optional .zetasql.ScriptExecutorStateProto.ProcedureDefinition procedure_definition = 1;
inline bool ScriptExecutorStateProto_StackFrame::has_procedure_definition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScriptExecutorStateProto_StackFrame::set_has_procedure_definition() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScriptExecutorStateProto_StackFrame::clear_has_procedure_definition() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScriptExecutorStateProto_StackFrame::clear_procedure_definition() {
  if (procedure_definition_ != NULL) procedure_definition_->Clear();
  clear_has_procedure_definition();
}
inline const ::zetasql::ScriptExecutorStateProto_ProcedureDefinition& ScriptExecutorStateProto_StackFrame::_internal_procedure_definition() const {
  return *procedure_definition_;
}
inline const ::zetasql::ScriptExecutorStateProto_ProcedureDefinition& ScriptExecutorStateProto_StackFrame::procedure_definition() const {
  const ::zetasql::ScriptExecutorStateProto_ProcedureDefinition* p = procedure_definition_;
  // @@protoc_insertion_point(field_get:zetasql.ScriptExecutorStateProto.StackFrame.procedure_definition)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ScriptExecutorStateProto_ProcedureDefinition*>(
      &::zetasql::_ScriptExecutorStateProto_ProcedureDefinition_default_instance_);
}
inline ::zetasql::ScriptExecutorStateProto_ProcedureDefinition* ScriptExecutorStateProto_StackFrame::release_procedure_definition() {
  // @@protoc_insertion_point(field_release:zetasql.ScriptExecutorStateProto.StackFrame.procedure_definition)
  clear_has_procedure_definition();
  ::zetasql::ScriptExecutorStateProto_ProcedureDefinition* temp = procedure_definition_;
  procedure_definition_ = NULL;
  return temp;
}
inline ::zetasql::ScriptExecutorStateProto_ProcedureDefinition* ScriptExecutorStateProto_StackFrame::mutable_procedure_definition() {
  set_has_procedure_definition();
  if (procedure_definition_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ScriptExecutorStateProto_ProcedureDefinition>(GetArenaNoVirtual());
    procedure_definition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ScriptExecutorStateProto.StackFrame.procedure_definition)
  return procedure_definition_;
}
inline void ScriptExecutorStateProto_StackFrame::set_allocated_procedure_definition(::zetasql::ScriptExecutorStateProto_ProcedureDefinition* procedure_definition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete procedure_definition_;
  }
  if (procedure_definition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      procedure_definition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, procedure_definition, submessage_arena);
    }
    set_has_procedure_definition();
  } else {
    clear_has_procedure_definition();
  }
  procedure_definition_ = procedure_definition;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ScriptExecutorStateProto.StackFrame.procedure_definition)
}

// repeated .zetasql.Variable variables = 2;
inline int ScriptExecutorStateProto_StackFrame::variables_size() const {
  return variables_.size();
}
inline ::zetasql::Variable* ScriptExecutorStateProto_StackFrame::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ScriptExecutorStateProto.StackFrame.variables)
  return variables_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::Variable >*
ScriptExecutorStateProto_StackFrame::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ScriptExecutorStateProto.StackFrame.variables)
  return &variables_;
}
inline const ::zetasql::Variable& ScriptExecutorStateProto_StackFrame::variables(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ScriptExecutorStateProto.StackFrame.variables)
  return variables_.Get(index);
}
inline ::zetasql::Variable* ScriptExecutorStateProto_StackFrame::add_variables() {
  // @@protoc_insertion_point(field_add:zetasql.ScriptExecutorStateProto.StackFrame.variables)
  return variables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::Variable >&
ScriptExecutorStateProto_StackFrame::variables() const {
  // @@protoc_insertion_point(field_list:zetasql.ScriptExecutorStateProto.StackFrame.variables)
  return variables_;
}

// optional int32 current_location_byte_offset = 3;
inline bool ScriptExecutorStateProto_StackFrame::has_current_location_byte_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScriptExecutorStateProto_StackFrame::set_has_current_location_byte_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScriptExecutorStateProto_StackFrame::clear_has_current_location_byte_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScriptExecutorStateProto_StackFrame::clear_current_location_byte_offset() {
  current_location_byte_offset_ = 0;
  clear_has_current_location_byte_offset();
}
inline ::google::protobuf::int32 ScriptExecutorStateProto_StackFrame::current_location_byte_offset() const {
  // @@protoc_insertion_point(field_get:zetasql.ScriptExecutorStateProto.StackFrame.current_location_byte_offset)
  return current_location_byte_offset_;
}
inline void ScriptExecutorStateProto_StackFrame::set_current_location_byte_offset(::google::protobuf::int32 value) {
  set_has_current_location_byte_offset();
  current_location_byte_offset_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ScriptExecutorStateProto.StackFrame.current_location_byte_offset)
}

// optional int32 control_flow_node_kind = 5;
inline bool ScriptExecutorStateProto_StackFrame::has_control_flow_node_kind() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScriptExecutorStateProto_StackFrame::set_has_control_flow_node_kind() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScriptExecutorStateProto_StackFrame::clear_has_control_flow_node_kind() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScriptExecutorStateProto_StackFrame::clear_control_flow_node_kind() {
  control_flow_node_kind_ = 0;
  clear_has_control_flow_node_kind();
}
inline ::google::protobuf::int32 ScriptExecutorStateProto_StackFrame::control_flow_node_kind() const {
  // @@protoc_insertion_point(field_get:zetasql.ScriptExecutorStateProto.StackFrame.control_flow_node_kind)
  return control_flow_node_kind_;
}
inline void ScriptExecutorStateProto_StackFrame::set_control_flow_node_kind(::google::protobuf::int32 value) {
  set_has_control_flow_node_kind();
  control_flow_node_kind_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ScriptExecutorStateProto.StackFrame.control_flow_node_kind)
}

// optional .zetasql.ScriptExecutorStateProto.StackFrame.Parameters parameters = 4;
inline bool ScriptExecutorStateProto_StackFrame::has_parameters() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScriptExecutorStateProto_StackFrame::set_has_parameters() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScriptExecutorStateProto_StackFrame::clear_has_parameters() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScriptExecutorStateProto_StackFrame::clear_parameters() {
  if (parameters_ != NULL) parameters_->Clear();
  clear_has_parameters();
}
inline const ::zetasql::ScriptExecutorStateProto_StackFrame_Parameters& ScriptExecutorStateProto_StackFrame::_internal_parameters() const {
  return *parameters_;
}
inline const ::zetasql::ScriptExecutorStateProto_StackFrame_Parameters& ScriptExecutorStateProto_StackFrame::parameters() const {
  const ::zetasql::ScriptExecutorStateProto_StackFrame_Parameters* p = parameters_;
  // @@protoc_insertion_point(field_get:zetasql.ScriptExecutorStateProto.StackFrame.parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ScriptExecutorStateProto_StackFrame_Parameters*>(
      &::zetasql::_ScriptExecutorStateProto_StackFrame_Parameters_default_instance_);
}
inline ::zetasql::ScriptExecutorStateProto_StackFrame_Parameters* ScriptExecutorStateProto_StackFrame::release_parameters() {
  // @@protoc_insertion_point(field_release:zetasql.ScriptExecutorStateProto.StackFrame.parameters)
  clear_has_parameters();
  ::zetasql::ScriptExecutorStateProto_StackFrame_Parameters* temp = parameters_;
  parameters_ = NULL;
  return temp;
}
inline ::zetasql::ScriptExecutorStateProto_StackFrame_Parameters* ScriptExecutorStateProto_StackFrame::mutable_parameters() {
  set_has_parameters();
  if (parameters_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ScriptExecutorStateProto_StackFrame_Parameters>(GetArenaNoVirtual());
    parameters_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ScriptExecutorStateProto.StackFrame.parameters)
  return parameters_;
}
inline void ScriptExecutorStateProto_StackFrame::set_allocated_parameters(::zetasql::ScriptExecutorStateProto_StackFrame_Parameters* parameters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parameters_;
  }
  if (parameters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parameters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parameters, submessage_arena);
    }
    set_has_parameters();
  } else {
    clear_has_parameters();
  }
  parameters_ = parameters;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ScriptExecutorStateProto.StackFrame.parameters)
}

// repeated .google.protobuf.Any for_loop_stack = 6;
inline int ScriptExecutorStateProto_StackFrame::for_loop_stack_size() const {
  return for_loop_stack_.size();
}
inline ::google::protobuf::Any* ScriptExecutorStateProto_StackFrame::mutable_for_loop_stack(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ScriptExecutorStateProto.StackFrame.for_loop_stack)
  return for_loop_stack_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
ScriptExecutorStateProto_StackFrame::mutable_for_loop_stack() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ScriptExecutorStateProto.StackFrame.for_loop_stack)
  return &for_loop_stack_;
}
inline const ::google::protobuf::Any& ScriptExecutorStateProto_StackFrame::for_loop_stack(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ScriptExecutorStateProto.StackFrame.for_loop_stack)
  return for_loop_stack_.Get(index);
}
inline ::google::protobuf::Any* ScriptExecutorStateProto_StackFrame::add_for_loop_stack() {
  // @@protoc_insertion_point(field_add:zetasql.ScriptExecutorStateProto.StackFrame.for_loop_stack)
  return for_loop_stack_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
ScriptExecutorStateProto_StackFrame::for_loop_stack() const {
  // @@protoc_insertion_point(field_list:zetasql.ScriptExecutorStateProto.StackFrame.for_loop_stack)
  return for_loop_stack_;
}

// -------------------------------------------------------------------

// ScriptExecutorStateProto_ScriptFeatureUsage

// optional int32 exception = 1;
inline bool ScriptExecutorStateProto_ScriptFeatureUsage::has_exception() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScriptExecutorStateProto_ScriptFeatureUsage::set_has_exception() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScriptExecutorStateProto_ScriptFeatureUsage::clear_has_exception() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScriptExecutorStateProto_ScriptFeatureUsage::clear_exception() {
  exception_ = 0;
  clear_has_exception();
}
inline ::google::protobuf::int32 ScriptExecutorStateProto_ScriptFeatureUsage::exception() const {
  // @@protoc_insertion_point(field_get:zetasql.ScriptExecutorStateProto.ScriptFeatureUsage.exception)
  return exception_;
}
inline void ScriptExecutorStateProto_ScriptFeatureUsage::set_exception(::google::protobuf::int32 value) {
  set_has_exception();
  exception_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ScriptExecutorStateProto.ScriptFeatureUsage.exception)
}

// optional int32 call_stmt = 2;
inline bool ScriptExecutorStateProto_ScriptFeatureUsage::has_call_stmt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScriptExecutorStateProto_ScriptFeatureUsage::set_has_call_stmt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScriptExecutorStateProto_ScriptFeatureUsage::clear_has_call_stmt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScriptExecutorStateProto_ScriptFeatureUsage::clear_call_stmt() {
  call_stmt_ = 0;
  clear_has_call_stmt();
}
inline ::google::protobuf::int32 ScriptExecutorStateProto_ScriptFeatureUsage::call_stmt() const {
  // @@protoc_insertion_point(field_get:zetasql.ScriptExecutorStateProto.ScriptFeatureUsage.call_stmt)
  return call_stmt_;
}
inline void ScriptExecutorStateProto_ScriptFeatureUsage::set_call_stmt(::google::protobuf::int32 value) {
  set_has_call_stmt();
  call_stmt_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ScriptExecutorStateProto.ScriptFeatureUsage.call_stmt)
}

// optional int32 execute_immediate_stmt = 3;
inline bool ScriptExecutorStateProto_ScriptFeatureUsage::has_execute_immediate_stmt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScriptExecutorStateProto_ScriptFeatureUsage::set_has_execute_immediate_stmt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScriptExecutorStateProto_ScriptFeatureUsage::clear_has_execute_immediate_stmt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScriptExecutorStateProto_ScriptFeatureUsage::clear_execute_immediate_stmt() {
  execute_immediate_stmt_ = 0;
  clear_has_execute_immediate_stmt();
}
inline ::google::protobuf::int32 ScriptExecutorStateProto_ScriptFeatureUsage::execute_immediate_stmt() const {
  // @@protoc_insertion_point(field_get:zetasql.ScriptExecutorStateProto.ScriptFeatureUsage.execute_immediate_stmt)
  return execute_immediate_stmt_;
}
inline void ScriptExecutorStateProto_ScriptFeatureUsage::set_execute_immediate_stmt(::google::protobuf::int32 value) {
  set_has_execute_immediate_stmt();
  execute_immediate_stmt_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ScriptExecutorStateProto.ScriptFeatureUsage.execute_immediate_stmt)
}

// -------------------------------------------------------------------

// ScriptExecutorStateProto

// repeated .zetasql.ScriptExecutorStateProto.StackFrame callstack = 1;
inline int ScriptExecutorStateProto::callstack_size() const {
  return callstack_.size();
}
inline void ScriptExecutorStateProto::clear_callstack() {
  callstack_.Clear();
}
inline ::zetasql::ScriptExecutorStateProto_StackFrame* ScriptExecutorStateProto::mutable_callstack(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ScriptExecutorStateProto.callstack)
  return callstack_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ScriptExecutorStateProto_StackFrame >*
ScriptExecutorStateProto::mutable_callstack() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ScriptExecutorStateProto.callstack)
  return &callstack_;
}
inline const ::zetasql::ScriptExecutorStateProto_StackFrame& ScriptExecutorStateProto::callstack(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ScriptExecutorStateProto.callstack)
  return callstack_.Get(index);
}
inline ::zetasql::ScriptExecutorStateProto_StackFrame* ScriptExecutorStateProto::add_callstack() {
  // @@protoc_insertion_point(field_add:zetasql.ScriptExecutorStateProto.callstack)
  return callstack_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ScriptExecutorStateProto_StackFrame >&
ScriptExecutorStateProto::callstack() const {
  // @@protoc_insertion_point(field_list:zetasql.ScriptExecutorStateProto.callstack)
  return callstack_;
}

// repeated .zetasql.ScriptException pending_exceptions = 2;
inline int ScriptExecutorStateProto::pending_exceptions_size() const {
  return pending_exceptions_.size();
}
inline ::zetasql::ScriptException* ScriptExecutorStateProto::mutable_pending_exceptions(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ScriptExecutorStateProto.pending_exceptions)
  return pending_exceptions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zetasql::ScriptException >*
ScriptExecutorStateProto::mutable_pending_exceptions() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ScriptExecutorStateProto.pending_exceptions)
  return &pending_exceptions_;
}
inline const ::zetasql::ScriptException& ScriptExecutorStateProto::pending_exceptions(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ScriptExecutorStateProto.pending_exceptions)
  return pending_exceptions_.Get(index);
}
inline ::zetasql::ScriptException* ScriptExecutorStateProto::add_pending_exceptions() {
  // @@protoc_insertion_point(field_add:zetasql.ScriptExecutorStateProto.pending_exceptions)
  return pending_exceptions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zetasql::ScriptException >&
ScriptExecutorStateProto::pending_exceptions() const {
  // @@protoc_insertion_point(field_list:zetasql.ScriptExecutorStateProto.pending_exceptions)
  return pending_exceptions_;
}

// repeated .zetasql.ScriptExecutorStateProto.ScriptFeature triggered_features = 3;
inline int ScriptExecutorStateProto::triggered_features_size() const {
  return triggered_features_.size();
}
inline void ScriptExecutorStateProto::clear_triggered_features() {
  triggered_features_.Clear();
}
inline ::zetasql::ScriptExecutorStateProto_ScriptFeature ScriptExecutorStateProto::triggered_features(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ScriptExecutorStateProto.triggered_features)
  return static_cast< ::zetasql::ScriptExecutorStateProto_ScriptFeature >(triggered_features_.Get(index));
}
inline void ScriptExecutorStateProto::set_triggered_features(int index, ::zetasql::ScriptExecutorStateProto_ScriptFeature value) {
  assert(::zetasql::ScriptExecutorStateProto_ScriptFeature_IsValid(value));
  triggered_features_.Set(index, value);
  // @@protoc_insertion_point(field_set:zetasql.ScriptExecutorStateProto.triggered_features)
}
inline void ScriptExecutorStateProto::add_triggered_features(::zetasql::ScriptExecutorStateProto_ScriptFeature value) {
  assert(::zetasql::ScriptExecutorStateProto_ScriptFeature_IsValid(value));
  triggered_features_.Add(value);
  // @@protoc_insertion_point(field_add:zetasql.ScriptExecutorStateProto.triggered_features)
}
inline const ::google::protobuf::RepeatedField<int>&
ScriptExecutorStateProto::triggered_features() const {
  // @@protoc_insertion_point(field_list:zetasql.ScriptExecutorStateProto.triggered_features)
  return triggered_features_;
}
inline ::google::protobuf::RepeatedField<int>*
ScriptExecutorStateProto::mutable_triggered_features() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ScriptExecutorStateProto.triggered_features)
  return &triggered_features_;
}

// optional string timezone = 4;
inline bool ScriptExecutorStateProto::has_timezone() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScriptExecutorStateProto::set_has_timezone() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScriptExecutorStateProto::clear_has_timezone() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScriptExecutorStateProto::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timezone();
}
inline const ::std::string& ScriptExecutorStateProto::timezone() const {
  // @@protoc_insertion_point(field_get:zetasql.ScriptExecutorStateProto.timezone)
  return timezone_.GetNoArena();
}
inline void ScriptExecutorStateProto::set_timezone(const ::std::string& value) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasql.ScriptExecutorStateProto.timezone)
}
#if LANG_CXX11
inline void ScriptExecutorStateProto::set_timezone(::std::string&& value) {
  set_has_timezone();
  timezone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasql.ScriptExecutorStateProto.timezone)
}
#endif
inline void ScriptExecutorStateProto::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasql.ScriptExecutorStateProto.timezone)
}
inline void ScriptExecutorStateProto::set_timezone(const char* value, size_t size) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasql.ScriptExecutorStateProto.timezone)
}
inline ::std::string* ScriptExecutorStateProto::mutable_timezone() {
  set_has_timezone();
  // @@protoc_insertion_point(field_mutable:zetasql.ScriptExecutorStateProto.timezone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScriptExecutorStateProto::release_timezone() {
  // @@protoc_insertion_point(field_release:zetasql.ScriptExecutorStateProto.timezone)
  if (!has_timezone()) {
    return NULL;
  }
  clear_has_timezone();
  return timezone_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScriptExecutorStateProto::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    set_has_timezone();
  } else {
    clear_has_timezone();
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:zetasql.ScriptExecutorStateProto.timezone)
}

// optional int64 case_stmt_true_branch_index = 5;
inline bool ScriptExecutorStateProto::has_case_stmt_true_branch_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScriptExecutorStateProto::set_has_case_stmt_true_branch_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScriptExecutorStateProto::clear_has_case_stmt_true_branch_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScriptExecutorStateProto::clear_case_stmt_true_branch_index() {
  case_stmt_true_branch_index_ = GOOGLE_LONGLONG(0);
  clear_has_case_stmt_true_branch_index();
}
inline ::google::protobuf::int64 ScriptExecutorStateProto::case_stmt_true_branch_index() const {
  // @@protoc_insertion_point(field_get:zetasql.ScriptExecutorStateProto.case_stmt_true_branch_index)
  return case_stmt_true_branch_index_;
}
inline void ScriptExecutorStateProto::set_case_stmt_true_branch_index(::google::protobuf::int64 value) {
  set_has_case_stmt_true_branch_index();
  case_stmt_true_branch_index_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ScriptExecutorStateProto.case_stmt_true_branch_index)
}

// optional int64 case_stmt_current_branch_index = 6;
inline bool ScriptExecutorStateProto::has_case_stmt_current_branch_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScriptExecutorStateProto::set_has_case_stmt_current_branch_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScriptExecutorStateProto::clear_has_case_stmt_current_branch_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScriptExecutorStateProto::clear_case_stmt_current_branch_index() {
  case_stmt_current_branch_index_ = GOOGLE_LONGLONG(0);
  clear_has_case_stmt_current_branch_index();
}
inline ::google::protobuf::int64 ScriptExecutorStateProto::case_stmt_current_branch_index() const {
  // @@protoc_insertion_point(field_get:zetasql.ScriptExecutorStateProto.case_stmt_current_branch_index)
  return case_stmt_current_branch_index_;
}
inline void ScriptExecutorStateProto::set_case_stmt_current_branch_index(::google::protobuf::int64 value) {
  set_has_case_stmt_current_branch_index();
  case_stmt_current_branch_index_ = value;
  // @@protoc_insertion_point(field_set:zetasql.ScriptExecutorStateProto.case_stmt_current_branch_index)
}

// optional .zetasql.ScriptExecutorStateProto.ScriptFeatureUsage sql_feature_usage = 7;
inline bool ScriptExecutorStateProto::has_sql_feature_usage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScriptExecutorStateProto::set_has_sql_feature_usage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScriptExecutorStateProto::clear_has_sql_feature_usage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScriptExecutorStateProto::clear_sql_feature_usage() {
  if (sql_feature_usage_ != NULL) sql_feature_usage_->Clear();
  clear_has_sql_feature_usage();
}
inline const ::zetasql::ScriptExecutorStateProto_ScriptFeatureUsage& ScriptExecutorStateProto::_internal_sql_feature_usage() const {
  return *sql_feature_usage_;
}
inline const ::zetasql::ScriptExecutorStateProto_ScriptFeatureUsage& ScriptExecutorStateProto::sql_feature_usage() const {
  const ::zetasql::ScriptExecutorStateProto_ScriptFeatureUsage* p = sql_feature_usage_;
  // @@protoc_insertion_point(field_get:zetasql.ScriptExecutorStateProto.sql_feature_usage)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ScriptExecutorStateProto_ScriptFeatureUsage*>(
      &::zetasql::_ScriptExecutorStateProto_ScriptFeatureUsage_default_instance_);
}
inline ::zetasql::ScriptExecutorStateProto_ScriptFeatureUsage* ScriptExecutorStateProto::release_sql_feature_usage() {
  // @@protoc_insertion_point(field_release:zetasql.ScriptExecutorStateProto.sql_feature_usage)
  clear_has_sql_feature_usage();
  ::zetasql::ScriptExecutorStateProto_ScriptFeatureUsage* temp = sql_feature_usage_;
  sql_feature_usage_ = NULL;
  return temp;
}
inline ::zetasql::ScriptExecutorStateProto_ScriptFeatureUsage* ScriptExecutorStateProto::mutable_sql_feature_usage() {
  set_has_sql_feature_usage();
  if (sql_feature_usage_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ScriptExecutorStateProto_ScriptFeatureUsage>(GetArenaNoVirtual());
    sql_feature_usage_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.ScriptExecutorStateProto.sql_feature_usage)
  return sql_feature_usage_;
}
inline void ScriptExecutorStateProto::set_allocated_sql_feature_usage(::zetasql::ScriptExecutorStateProto_ScriptFeatureUsage* sql_feature_usage) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sql_feature_usage_;
  }
  if (sql_feature_usage) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sql_feature_usage = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sql_feature_usage, submessage_arena);
    }
    set_has_sql_feature_usage();
  } else {
    clear_has_sql_feature_usage();
  }
  sql_feature_usage_ = sql_feature_usage;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ScriptExecutorStateProto.sql_feature_usage)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::zetasql::ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode>() {
  return ::zetasql::ScriptExecutorStateProto_StackFrame_Parameters_ParameterMode_descriptor();
}
template <> struct is_proto_enum< ::zetasql::ScriptExecutorStateProto_ScriptFeature> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::ScriptExecutorStateProto_ScriptFeature>() {
  return ::zetasql::ScriptExecutorStateProto_ScriptFeature_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_zetasql_2fscripting_2fscript_5fexecutor_5fstate_2eproto
