// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/scripting/variable.proto

#ifndef PROTOBUF_INCLUDED_zetasql_2fscripting_2fvariable_2eproto
#define PROTOBUF_INCLUDED_zetasql_2fscripting_2fvariable_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "zetasql/public/type.pb.h"
#include "zetasql/public/type_parameters.pb.h"
#include "zetasql/public/value.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_zetasql_2fscripting_2fvariable_2eproto 

namespace protobuf_zetasql_2fscripting_2fvariable_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_zetasql_2fscripting_2fvariable_2eproto
namespace zetasql {
class Variable;
class VariableDefaultTypeInternal;
extern VariableDefaultTypeInternal _Variable_default_instance_;
}  // namespace zetasql
namespace google {
namespace protobuf {
template<> ::zetasql::Variable* Arena::CreateMaybeMessage<::zetasql::Variable>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace zetasql {

// ===================================================================

class Variable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zetasql.Variable) */ {
 public:
  Variable();
  virtual ~Variable();

  Variable(const Variable& from);

  inline Variable& operator=(const Variable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Variable(Variable&& from) noexcept
    : Variable() {
    *this = ::std::move(from);
  }

  inline Variable& operator=(Variable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Variable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Variable* internal_default_instance() {
    return reinterpret_cast<const Variable*>(
               &_Variable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(Variable* other);
  void Swap(Variable* other);
  friend void swap(Variable& a, Variable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Variable* New() const final {
    return CreateMaybeMessage<Variable>(NULL);
  }

  Variable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Variable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Variable& from);
  void MergeFrom(const Variable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Variable* other);
  protected:
  explicit Variable(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // optional .zetasql.TypeProto type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  private:
  const ::zetasql::TypeProto& _internal_type() const;
  public:
  const ::zetasql::TypeProto& type() const;
  ::zetasql::TypeProto* release_type();
  ::zetasql::TypeProto* mutable_type();
  void set_allocated_type(::zetasql::TypeProto* type);
  void unsafe_arena_set_allocated_type(
      ::zetasql::TypeProto* type);
  ::zetasql::TypeProto* unsafe_arena_release_type();

  // optional .zetasql.ValueProto value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::zetasql::ValueProto& _internal_value() const;
  public:
  const ::zetasql::ValueProto& value() const;
  ::zetasql::ValueProto* release_value();
  ::zetasql::ValueProto* mutable_value();
  void set_allocated_value(::zetasql::ValueProto* value);
  void unsafe_arena_set_allocated_value(
      ::zetasql::ValueProto* value);
  ::zetasql::ValueProto* unsafe_arena_release_value();

  // optional .zetasql.TypeParametersProto type_params = 4;
  bool has_type_params() const;
  void clear_type_params();
  static const int kTypeParamsFieldNumber = 4;
  private:
  const ::zetasql::TypeParametersProto& _internal_type_params() const;
  public:
  const ::zetasql::TypeParametersProto& type_params() const;
  ::zetasql::TypeParametersProto* release_type_params();
  ::zetasql::TypeParametersProto* mutable_type_params();
  void set_allocated_type_params(::zetasql::TypeParametersProto* type_params);
  void unsafe_arena_set_allocated_type_params(
      ::zetasql::TypeParametersProto* type_params);
  ::zetasql::TypeParametersProto* unsafe_arena_release_type_params();

  // @@protoc_insertion_point(class_scope:zetasql.Variable)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_value();
  void clear_has_value();
  void set_has_type_params();
  void clear_has_type_params();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::zetasql::TypeProto* type_;
  ::zetasql::ValueProto* value_;
  ::zetasql::TypeParametersProto* type_params_;
  friend struct ::protobuf_zetasql_2fscripting_2fvariable_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Variable

// optional string name = 1;
inline bool Variable::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Variable::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Variable::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Variable::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_name();
}
inline const ::std::string& Variable::name() const {
  // @@protoc_insertion_point(field_get:zetasql.Variable.name)
  return name_.Get();
}
inline void Variable::set_name(const ::std::string& value) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:zetasql.Variable.name)
}
#if LANG_CXX11
inline void Variable::set_name(::std::string&& value) {
  set_has_name();
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:zetasql.Variable.name)
}
#endif
inline void Variable::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:zetasql.Variable.name)
}
inline void Variable::set_name(const char* value,
    size_t size) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:zetasql.Variable.name)
}
inline ::std::string* Variable::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zetasql.Variable.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Variable::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.Variable.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Variable::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:zetasql.Variable.name)
}
inline ::std::string* Variable::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.Variable.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_name();
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Variable::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.Variable.name)
}

// optional .zetasql.TypeProto type = 2;
inline bool Variable::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Variable::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Variable::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::TypeProto& Variable::_internal_type() const {
  return *type_;
}
inline const ::zetasql::TypeProto& Variable::type() const {
  const ::zetasql::TypeProto* p = type_;
  // @@protoc_insertion_point(field_get:zetasql.Variable.type)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TypeProto*>(
      &::zetasql::_TypeProto_default_instance_);
}
inline ::zetasql::TypeProto* Variable::release_type() {
  // @@protoc_insertion_point(field_release:zetasql.Variable.type)
  clear_has_type();
  ::zetasql::TypeProto* temp = type_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  type_ = NULL;
  return temp;
}
inline ::zetasql::TypeProto* Variable::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.Variable.type)
  clear_has_type();
  ::zetasql::TypeProto* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::zetasql::TypeProto* Variable::mutable_type() {
  set_has_type();
  if (type_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.Variable.type)
  return type_;
}
inline void Variable::set_allocated_type(::zetasql::TypeProto* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_);
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(type)->GetArena();
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    set_has_type();
  } else {
    clear_has_type();
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.Variable.type)
}

// optional .zetasql.ValueProto value = 3;
inline bool Variable::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Variable::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Variable::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasql::ValueProto& Variable::_internal_value() const {
  return *value_;
}
inline const ::zetasql::ValueProto& Variable::value() const {
  const ::zetasql::ValueProto* p = value_;
  // @@protoc_insertion_point(field_get:zetasql.Variable.value)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::ValueProto*>(
      &::zetasql::_ValueProto_default_instance_);
}
inline ::zetasql::ValueProto* Variable::release_value() {
  // @@protoc_insertion_point(field_release:zetasql.Variable.value)
  clear_has_value();
  ::zetasql::ValueProto* temp = value_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  value_ = NULL;
  return temp;
}
inline ::zetasql::ValueProto* Variable::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.Variable.value)
  clear_has_value();
  ::zetasql::ValueProto* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::zetasql::ValueProto* Variable::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::ValueProto>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.Variable.value)
  return value_;
}
inline void Variable::set_allocated_value(::zetasql::ValueProto* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_);
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    set_has_value();
  } else {
    clear_has_value();
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:zetasql.Variable.value)
}

// optional .zetasql.TypeParametersProto type_params = 4;
inline bool Variable::has_type_params() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Variable::set_has_type_params() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Variable::clear_has_type_params() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::zetasql::TypeParametersProto& Variable::_internal_type_params() const {
  return *type_params_;
}
inline const ::zetasql::TypeParametersProto& Variable::type_params() const {
  const ::zetasql::TypeParametersProto* p = type_params_;
  // @@protoc_insertion_point(field_get:zetasql.Variable.type_params)
  return p != NULL ? *p : *reinterpret_cast<const ::zetasql::TypeParametersProto*>(
      &::zetasql::_TypeParametersProto_default_instance_);
}
inline ::zetasql::TypeParametersProto* Variable::release_type_params() {
  // @@protoc_insertion_point(field_release:zetasql.Variable.type_params)
  clear_has_type_params();
  ::zetasql::TypeParametersProto* temp = type_params_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  type_params_ = NULL;
  return temp;
}
inline ::zetasql::TypeParametersProto* Variable::unsafe_arena_release_type_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.Variable.type_params)
  clear_has_type_params();
  ::zetasql::TypeParametersProto* temp = type_params_;
  type_params_ = NULL;
  return temp;
}
inline ::zetasql::TypeParametersProto* Variable::mutable_type_params() {
  set_has_type_params();
  if (type_params_ == NULL) {
    auto* p = CreateMaybeMessage<::zetasql::TypeParametersProto>(GetArenaNoVirtual());
    type_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasql.Variable.type_params)
  return type_params_;
}
inline void Variable::set_allocated_type_params(::zetasql::TypeParametersProto* type_params) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_params_);
  }
  if (type_params) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      type_params = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type_params, submessage_arena);
    }
    set_has_type_params();
  } else {
    clear_has_type_params();
  }
  type_params_ = type_params;
  // @@protoc_insertion_point(field_set_allocated:zetasql.Variable.type_params)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_zetasql_2fscripting_2fvariable_2eproto
